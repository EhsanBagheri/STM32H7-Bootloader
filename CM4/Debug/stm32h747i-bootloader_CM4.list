
stm32h747i-bootloader_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001190  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08101428  08101428  00011428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101438  08101438  00011438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810143c  0810143c  0001143c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08101440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000064  10000010  08101450  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000074  08101450  00020074  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010c94  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001912  00000000  00000000  00030cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000008d8  00000000  00000000  000325e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000820  00000000  00000000  00032ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00044280  00000000  00000000  000336e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ac04  00000000  00000000  00077960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001cd360  00000000  00000000  00082564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0024f8c4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002290  00000000  00000000  0024f914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08101410 	.word	0x08101410

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08101410 	.word	0x08101410

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b22      	ldr	r3, [pc, #136]	; (8100398 <main+0x90>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a20      	ldr	r2, [pc, #128]	; (8100398 <main+0x90>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b1e      	ldr	r3, [pc, #120]	; (8100398 <main+0x90>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 fe37 	bl	8100fa0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 fec1 	bl	81010b8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 fe42 	bl	8100fc4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b16      	ldr	r3, [pc, #88]	; (810039c <main+0x94>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b14      	ldr	r3, [pc, #80]	; (81003a0 <main+0x98>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a12      	ldr	r2, [pc, #72]	; (81003a0 <main+0x98>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b0f      	ldr	r3, [pc, #60]	; (81003a0 <main+0x98>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a0e      	ldr	r2, [pc, #56]	; (81003a0 <main+0x98>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 f966 	bl	8100640 <HAL_Init>
//  MX_SPI5_Init();
//  MX_TIM8_Init();
//  MX_TIM13_Init();
//  MX_UART8_Init();
//  MX_USB_OTG_HS_PCD_Init();
  MX_GPIO_Init();
 8100374:	f000 f818 	bl	81003a8 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 8100378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810037c:	f000 fa14 	bl	81007a8 <HAL_Delay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8100380:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100384:	4807      	ldr	r0, [pc, #28]	; (81003a4 <main+0x9c>)
 8100386:	f000 fdf0 	bl	8100f6a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 810038a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810038e:	4805      	ldr	r0, [pc, #20]	; (81003a4 <main+0x9c>)
 8100390:	f000 fdeb 	bl	8100f6a <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8100394:	e7f0      	b.n	8100378 <main+0x70>
 8100396:	bf00      	nop
 8100398:	58024400 	.word	0x58024400
 810039c:	e000ed00 	.word	0xe000ed00
 81003a0:	58026400 	.word	0x58026400
 81003a4:	58022000 	.word	0x58022000

081003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 81003a8:	b580      	push	{r7, lr}
 81003aa:	b090      	sub	sp, #64	; 0x40
 81003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81003b2:	2200      	movs	r2, #0
 81003b4:	601a      	str	r2, [r3, #0]
 81003b6:	605a      	str	r2, [r3, #4]
 81003b8:	609a      	str	r2, [r3, #8]
 81003ba:	60da      	str	r2, [r3, #12]
 81003bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 81003be:	4b62      	ldr	r3, [pc, #392]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81003c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003c4:	4a60      	ldr	r2, [pc, #384]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81003c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81003ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003ce:	4b5e      	ldr	r3, [pc, #376]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81003d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81003d8:	62bb      	str	r3, [r7, #40]	; 0x28
 81003da:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81003dc:	4b5a      	ldr	r3, [pc, #360]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81003de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003e2:	4a59      	ldr	r2, [pc, #356]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81003e4:	f043 0302 	orr.w	r3, r3, #2
 81003e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003ec:	4b56      	ldr	r3, [pc, #344]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81003ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003f2:	f003 0302 	and.w	r3, r3, #2
 81003f6:	627b      	str	r3, [r7, #36]	; 0x24
 81003f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81003fa:	4b53      	ldr	r3, [pc, #332]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81003fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100400:	4a51      	ldr	r2, [pc, #324]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810040a:	4b4f      	ldr	r3, [pc, #316]	; (8100548 <MX_GPIO_Init+0x1a0>)
 810040c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100414:	623b      	str	r3, [r7, #32]
 8100416:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100418:	4b4b      	ldr	r3, [pc, #300]	; (8100548 <MX_GPIO_Init+0x1a0>)
 810041a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810041e:	4a4a      	ldr	r2, [pc, #296]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100420:	f043 0310 	orr.w	r3, r3, #16
 8100424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100428:	4b47      	ldr	r3, [pc, #284]	; (8100548 <MX_GPIO_Init+0x1a0>)
 810042a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810042e:	f003 0310 	and.w	r3, r3, #16
 8100432:	61fb      	str	r3, [r7, #28]
 8100434:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100436:	4b44      	ldr	r3, [pc, #272]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810043c:	4a42      	ldr	r2, [pc, #264]	; (8100548 <MX_GPIO_Init+0x1a0>)
 810043e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100446:	4b40      	ldr	r3, [pc, #256]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810044c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100450:	61bb      	str	r3, [r7, #24]
 8100452:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100454:	4b3c      	ldr	r3, [pc, #240]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810045a:	4a3b      	ldr	r2, [pc, #236]	; (8100548 <MX_GPIO_Init+0x1a0>)
 810045c:	f043 0308 	orr.w	r3, r3, #8
 8100460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100464:	4b38      	ldr	r3, [pc, #224]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810046a:	f003 0308 	and.w	r3, r3, #8
 810046e:	617b      	str	r3, [r7, #20]
 8100470:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100472:	4b35      	ldr	r3, [pc, #212]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100478:	4a33      	ldr	r2, [pc, #204]	; (8100548 <MX_GPIO_Init+0x1a0>)
 810047a:	f043 0304 	orr.w	r3, r3, #4
 810047e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100482:	4b31      	ldr	r3, [pc, #196]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100488:	f003 0304 	and.w	r3, r3, #4
 810048c:	613b      	str	r3, [r7, #16]
 810048e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100490:	4b2d      	ldr	r3, [pc, #180]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100496:	4a2c      	ldr	r2, [pc, #176]	; (8100548 <MX_GPIO_Init+0x1a0>)
 8100498:	f043 0301 	orr.w	r3, r3, #1
 810049c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81004a0:	4b29      	ldr	r3, [pc, #164]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004a6:	f003 0301 	and.w	r3, r3, #1
 81004aa:	60fb      	str	r3, [r7, #12]
 81004ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81004ae:	4b26      	ldr	r3, [pc, #152]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004b4:	4a24      	ldr	r2, [pc, #144]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004b6:	f043 0320 	orr.w	r3, r3, #32
 81004ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81004be:	4b22      	ldr	r3, [pc, #136]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004c4:	f003 0320 	and.w	r3, r3, #32
 81004c8:	60bb      	str	r3, [r7, #8]
 81004ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 81004cc:	4b1e      	ldr	r3, [pc, #120]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004d2:	4a1d      	ldr	r2, [pc, #116]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81004d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81004dc:	4b1a      	ldr	r3, [pc, #104]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81004e6:	607b      	str	r3, [r7, #4]
 81004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81004ea:	4b17      	ldr	r3, [pc, #92]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004f0:	4a15      	ldr	r2, [pc, #84]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81004f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81004fa:	4b13      	ldr	r3, [pc, #76]	; (8100548 <MX_GPIO_Init+0x1a0>)
 81004fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100504:	603b      	str	r3, [r7, #0]
 8100506:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8100508:	2200      	movs	r2, #0
 810050a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810050e:	480f      	ldr	r0, [pc, #60]	; (810054c <MX_GPIO_Init+0x1a4>)
 8100510:	f000 fd12 	bl	8100f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8100514:	2201      	movs	r2, #1
 8100516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810051a:	480c      	ldr	r0, [pc, #48]	; (810054c <MX_GPIO_Init+0x1a4>)
 810051c:	f000 fd0c 	bl	8100f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8100520:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8100524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100526:	2301      	movs	r3, #1
 8100528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810052a:	2300      	movs	r3, #0
 810052c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810052e:	2300      	movs	r3, #0
 8100530:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8100536:	4619      	mov	r1, r3
 8100538:	4804      	ldr	r0, [pc, #16]	; (810054c <MX_GPIO_Init+0x1a4>)
 810053a:	f000 fb4d 	bl	8100bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810053e:	bf00      	nop
 8100540:	3740      	adds	r7, #64	; 0x40
 8100542:	46bd      	mov	sp, r7
 8100544:	bd80      	pop	{r7, pc}
 8100546:	bf00      	nop
 8100548:	58024400 	.word	0x58024400
 810054c:	58022000 	.word	0x58022000

08100550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100550:	b480      	push	{r7}
 8100552:	b083      	sub	sp, #12
 8100554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100556:	4b0a      	ldr	r3, [pc, #40]	; (8100580 <HAL_MspInit+0x30>)
 8100558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810055c:	4a08      	ldr	r2, [pc, #32]	; (8100580 <HAL_MspInit+0x30>)
 810055e:	f043 0302 	orr.w	r3, r3, #2
 8100562:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100566:	4b06      	ldr	r3, [pc, #24]	; (8100580 <HAL_MspInit+0x30>)
 8100568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810056c:	f003 0302 	and.w	r3, r3, #2
 8100570:	607b      	str	r3, [r7, #4]
 8100572:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100574:	bf00      	nop
 8100576:	370c      	adds	r7, #12
 8100578:	46bd      	mov	sp, r7
 810057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810057e:	4770      	bx	lr
 8100580:	58024400 	.word	0x58024400

08100584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100584:	b480      	push	{r7}
 8100586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100588:	e7fe      	b.n	8100588 <NMI_Handler+0x4>

0810058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810058a:	b480      	push	{r7}
 810058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810058e:	e7fe      	b.n	810058e <HardFault_Handler+0x4>

08100590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100590:	b480      	push	{r7}
 8100592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100594:	e7fe      	b.n	8100594 <MemManage_Handler+0x4>

08100596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100596:	b480      	push	{r7}
 8100598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810059a:	e7fe      	b.n	810059a <BusFault_Handler+0x4>

0810059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810059c:	b480      	push	{r7}
 810059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81005a0:	e7fe      	b.n	81005a0 <UsageFault_Handler+0x4>

081005a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81005a2:	b480      	push	{r7}
 81005a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81005a6:	bf00      	nop
 81005a8:	46bd      	mov	sp, r7
 81005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005ae:	4770      	bx	lr

081005b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81005b0:	b480      	push	{r7}
 81005b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81005b4:	bf00      	nop
 81005b6:	46bd      	mov	sp, r7
 81005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005bc:	4770      	bx	lr

081005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81005be:	b480      	push	{r7}
 81005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81005c2:	bf00      	nop
 81005c4:	46bd      	mov	sp, r7
 81005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005ca:	4770      	bx	lr

081005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81005cc:	b580      	push	{r7, lr}
 81005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81005d0:	f000 f8ca 	bl	8100768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81005d4:	bf00      	nop
 81005d6:	bd80      	pop	{r7, pc}

081005d8 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 81005d8:	b580      	push	{r7, lr}
 81005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 81005dc:	4802      	ldr	r0, [pc, #8]	; (81005e8 <CEC_IRQHandler+0x10>)
 81005de:	f000 f907 	bl	81007f0 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 81005e2:	bf00      	nop
 81005e4:	bd80      	pop	{r7, pc}
 81005e6:	bf00      	nop
 81005e8:	1000002c 	.word	0x1000002c

081005ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81005ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100624 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81005f0:	f7ff fe72 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81005f4:	480c      	ldr	r0, [pc, #48]	; (8100628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81005f6:	490d      	ldr	r1, [pc, #52]	; (810062c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81005f8:	4a0d      	ldr	r2, [pc, #52]	; (8100630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81005fc:	e002      	b.n	8100604 <LoopCopyDataInit>

081005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100602:	3304      	adds	r3, #4

08100604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100608:	d3f9      	bcc.n	81005fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810060a:	4a0a      	ldr	r2, [pc, #40]	; (8100634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810060c:	4c0a      	ldr	r4, [pc, #40]	; (8100638 <LoopFillZerobss+0x22>)
  movs r3, #0
 810060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100610:	e001      	b.n	8100616 <LoopFillZerobss>

08100612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100614:	3204      	adds	r2, #4

08100616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100618:	d3fb      	bcc.n	8100612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810061a:	f000 fed5 	bl	81013c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810061e:	f7ff fe73 	bl	8100308 <main>
  bx  lr
 8100622:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100624:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100628:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810062c:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100630:	08101440 	.word	0x08101440
  ldr r2, =_sbss
 8100634:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100638:	10000074 	.word	0x10000074

0810063c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810063c:	e7fe      	b.n	810063c <ADC3_IRQHandler>
	...

08100640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100640:	b580      	push	{r7, lr}
 8100642:	b082      	sub	sp, #8
 8100644:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100646:	4b28      	ldr	r3, [pc, #160]	; (81006e8 <HAL_Init+0xa8>)
 8100648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810064c:	4a26      	ldr	r2, [pc, #152]	; (81006e8 <HAL_Init+0xa8>)
 810064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100652:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100656:	4b24      	ldr	r3, [pc, #144]	; (81006e8 <HAL_Init+0xa8>)
 8100658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100660:	603b      	str	r3, [r7, #0]
 8100662:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100664:	4b21      	ldr	r3, [pc, #132]	; (81006ec <HAL_Init+0xac>)
 8100666:	681b      	ldr	r3, [r3, #0]
 8100668:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810066c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100670:	4a1e      	ldr	r2, [pc, #120]	; (81006ec <HAL_Init+0xac>)
 8100672:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100676:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100678:	4b1c      	ldr	r3, [pc, #112]	; (81006ec <HAL_Init+0xac>)
 810067a:	681b      	ldr	r3, [r3, #0]
 810067c:	4a1b      	ldr	r2, [pc, #108]	; (81006ec <HAL_Init+0xac>)
 810067e:	f043 0301 	orr.w	r3, r3, #1
 8100682:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100684:	2003      	movs	r0, #3
 8100686:	f000 fa61 	bl	8100b4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810068a:	f000 fd23 	bl	81010d4 <HAL_RCC_GetSysClockFreq>
 810068e:	4602      	mov	r2, r0
 8100690:	4b15      	ldr	r3, [pc, #84]	; (81006e8 <HAL_Init+0xa8>)
 8100692:	699b      	ldr	r3, [r3, #24]
 8100694:	0a1b      	lsrs	r3, r3, #8
 8100696:	f003 030f 	and.w	r3, r3, #15
 810069a:	4915      	ldr	r1, [pc, #84]	; (81006f0 <HAL_Init+0xb0>)
 810069c:	5ccb      	ldrb	r3, [r1, r3]
 810069e:	f003 031f 	and.w	r3, r3, #31
 81006a2:	fa22 f303 	lsr.w	r3, r2, r3
 81006a6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81006a8:	4b0f      	ldr	r3, [pc, #60]	; (81006e8 <HAL_Init+0xa8>)
 81006aa:	699b      	ldr	r3, [r3, #24]
 81006ac:	f003 030f 	and.w	r3, r3, #15
 81006b0:	4a0f      	ldr	r2, [pc, #60]	; (81006f0 <HAL_Init+0xb0>)
 81006b2:	5cd3      	ldrb	r3, [r2, r3]
 81006b4:	f003 031f 	and.w	r3, r3, #31
 81006b8:	687a      	ldr	r2, [r7, #4]
 81006ba:	fa22 f303 	lsr.w	r3, r2, r3
 81006be:	4a0d      	ldr	r2, [pc, #52]	; (81006f4 <HAL_Init+0xb4>)
 81006c0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81006c2:	4b0c      	ldr	r3, [pc, #48]	; (81006f4 <HAL_Init+0xb4>)
 81006c4:	681b      	ldr	r3, [r3, #0]
 81006c6:	4a0c      	ldr	r2, [pc, #48]	; (81006f8 <HAL_Init+0xb8>)
 81006c8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81006ca:	2000      	movs	r0, #0
 81006cc:	f000 f816 	bl	81006fc <HAL_InitTick>
 81006d0:	4603      	mov	r3, r0
 81006d2:	2b00      	cmp	r3, #0
 81006d4:	d001      	beq.n	81006da <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81006d6:	2301      	movs	r3, #1
 81006d8:	e002      	b.n	81006e0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81006da:	f7ff ff39 	bl	8100550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81006de:	2300      	movs	r3, #0
}
 81006e0:	4618      	mov	r0, r3
 81006e2:	3708      	adds	r7, #8
 81006e4:	46bd      	mov	sp, r7
 81006e6:	bd80      	pop	{r7, pc}
 81006e8:	58024400 	.word	0x58024400
 81006ec:	40024400 	.word	0x40024400
 81006f0:	08101428 	.word	0x08101428
 81006f4:	10000004 	.word	0x10000004
 81006f8:	10000000 	.word	0x10000000

081006fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81006fc:	b580      	push	{r7, lr}
 81006fe:	b082      	sub	sp, #8
 8100700:	af00      	add	r7, sp, #0
 8100702:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100704:	4b15      	ldr	r3, [pc, #84]	; (810075c <HAL_InitTick+0x60>)
 8100706:	781b      	ldrb	r3, [r3, #0]
 8100708:	2b00      	cmp	r3, #0
 810070a:	d101      	bne.n	8100710 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810070c:	2301      	movs	r3, #1
 810070e:	e021      	b.n	8100754 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100710:	4b13      	ldr	r3, [pc, #76]	; (8100760 <HAL_InitTick+0x64>)
 8100712:	681a      	ldr	r2, [r3, #0]
 8100714:	4b11      	ldr	r3, [pc, #68]	; (810075c <HAL_InitTick+0x60>)
 8100716:	781b      	ldrb	r3, [r3, #0]
 8100718:	4619      	mov	r1, r3
 810071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8100722:	fbb2 f3f3 	udiv	r3, r2, r3
 8100726:	4618      	mov	r0, r3
 8100728:	f000 fa35 	bl	8100b96 <HAL_SYSTICK_Config>
 810072c:	4603      	mov	r3, r0
 810072e:	2b00      	cmp	r3, #0
 8100730:	d001      	beq.n	8100736 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100732:	2301      	movs	r3, #1
 8100734:	e00e      	b.n	8100754 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100736:	687b      	ldr	r3, [r7, #4]
 8100738:	2b0f      	cmp	r3, #15
 810073a:	d80a      	bhi.n	8100752 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810073c:	2200      	movs	r2, #0
 810073e:	6879      	ldr	r1, [r7, #4]
 8100740:	f04f 30ff 	mov.w	r0, #4294967295
 8100744:	f000 fa0d 	bl	8100b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100748:	4a06      	ldr	r2, [pc, #24]	; (8100764 <HAL_InitTick+0x68>)
 810074a:	687b      	ldr	r3, [r7, #4]
 810074c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810074e:	2300      	movs	r3, #0
 8100750:	e000      	b.n	8100754 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100752:	2301      	movs	r3, #1
}
 8100754:	4618      	mov	r0, r3
 8100756:	3708      	adds	r7, #8
 8100758:	46bd      	mov	sp, r7
 810075a:	bd80      	pop	{r7, pc}
 810075c:	1000000c 	.word	0x1000000c
 8100760:	10000000 	.word	0x10000000
 8100764:	10000008 	.word	0x10000008

08100768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100768:	b480      	push	{r7}
 810076a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810076c:	4b06      	ldr	r3, [pc, #24]	; (8100788 <HAL_IncTick+0x20>)
 810076e:	781b      	ldrb	r3, [r3, #0]
 8100770:	461a      	mov	r2, r3
 8100772:	4b06      	ldr	r3, [pc, #24]	; (810078c <HAL_IncTick+0x24>)
 8100774:	681b      	ldr	r3, [r3, #0]
 8100776:	4413      	add	r3, r2
 8100778:	4a04      	ldr	r2, [pc, #16]	; (810078c <HAL_IncTick+0x24>)
 810077a:	6013      	str	r3, [r2, #0]
}
 810077c:	bf00      	nop
 810077e:	46bd      	mov	sp, r7
 8100780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100784:	4770      	bx	lr
 8100786:	bf00      	nop
 8100788:	1000000c 	.word	0x1000000c
 810078c:	10000070 	.word	0x10000070

08100790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100790:	b480      	push	{r7}
 8100792:	af00      	add	r7, sp, #0
  return uwTick;
 8100794:	4b03      	ldr	r3, [pc, #12]	; (81007a4 <HAL_GetTick+0x14>)
 8100796:	681b      	ldr	r3, [r3, #0]
}
 8100798:	4618      	mov	r0, r3
 810079a:	46bd      	mov	sp, r7
 810079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007a0:	4770      	bx	lr
 81007a2:	bf00      	nop
 81007a4:	10000070 	.word	0x10000070

081007a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81007a8:	b580      	push	{r7, lr}
 81007aa:	b084      	sub	sp, #16
 81007ac:	af00      	add	r7, sp, #0
 81007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81007b0:	f7ff ffee 	bl	8100790 <HAL_GetTick>
 81007b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81007b6:	687b      	ldr	r3, [r7, #4]
 81007b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81007ba:	68fb      	ldr	r3, [r7, #12]
 81007bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81007c0:	d005      	beq.n	81007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81007c2:	4b0a      	ldr	r3, [pc, #40]	; (81007ec <HAL_Delay+0x44>)
 81007c4:	781b      	ldrb	r3, [r3, #0]
 81007c6:	461a      	mov	r2, r3
 81007c8:	68fb      	ldr	r3, [r7, #12]
 81007ca:	4413      	add	r3, r2
 81007cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81007ce:	bf00      	nop
 81007d0:	f7ff ffde 	bl	8100790 <HAL_GetTick>
 81007d4:	4602      	mov	r2, r0
 81007d6:	68bb      	ldr	r3, [r7, #8]
 81007d8:	1ad3      	subs	r3, r2, r3
 81007da:	68fa      	ldr	r2, [r7, #12]
 81007dc:	429a      	cmp	r2, r3
 81007de:	d8f7      	bhi.n	81007d0 <HAL_Delay+0x28>
  {
  }
}
 81007e0:	bf00      	nop
 81007e2:	bf00      	nop
 81007e4:	3710      	adds	r7, #16
 81007e6:	46bd      	mov	sp, r7
 81007e8:	bd80      	pop	{r7, pc}
 81007ea:	bf00      	nop
 81007ec:	1000000c 	.word	0x1000000c

081007f0 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 81007f0:	b580      	push	{r7, lr}
 81007f2:	b084      	sub	sp, #16
 81007f4:	af00      	add	r7, sp, #0
 81007f6:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 81007f8:	687b      	ldr	r3, [r7, #4]
 81007fa:	681b      	ldr	r3, [r3, #0]
 81007fc:	691b      	ldr	r3, [r3, #16]
 81007fe:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8100800:	68fb      	ldr	r3, [r7, #12]
 8100802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100806:	2b00      	cmp	r3, #0
 8100808:	d00a      	beq.n	8100820 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 810080a:	687b      	ldr	r3, [r7, #4]
 810080c:	2280      	movs	r2, #128	; 0x80
 810080e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8100810:	687b      	ldr	r3, [r7, #4]
 8100812:	681b      	ldr	r3, [r3, #0]
 8100814:	691a      	ldr	r2, [r3, #16]
 8100816:	687b      	ldr	r3, [r7, #4]
 8100818:	681b      	ldr	r3, [r3, #0]
 810081a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810081e:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8100820:	68fb      	ldr	r3, [r7, #12]
 8100822:	f003 0301 	and.w	r3, r3, #1
 8100826:	2b00      	cmp	r3, #0
 8100828:	d01c      	beq.n	8100864 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 810082a:	687b      	ldr	r3, [r7, #4]
 810082c:	2222      	movs	r2, #34	; 0x22
 810082e:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8100830:	687b      	ldr	r3, [r7, #4]
 8100832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8100834:	3301      	adds	r3, #1
 8100836:	b29a      	uxth	r2, r3
 8100838:	687b      	ldr	r3, [r7, #4]
 810083a:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 810083c:	687b      	ldr	r3, [r7, #4]
 810083e:	681b      	ldr	r3, [r3, #0]
 8100840:	68da      	ldr	r2, [r3, #12]
 8100842:	687b      	ldr	r3, [r7, #4]
 8100844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100846:	b2d2      	uxtb	r2, r2
 8100848:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 810084a:	687b      	ldr	r3, [r7, #4]
 810084c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810084e:	1c5a      	adds	r2, r3, #1
 8100850:	687b      	ldr	r3, [r7, #4]
 8100852:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8100854:	687b      	ldr	r3, [r7, #4]
 8100856:	681b      	ldr	r3, [r3, #0]
 8100858:	691a      	ldr	r2, [r3, #16]
 810085a:	687b      	ldr	r3, [r7, #4]
 810085c:	681b      	ldr	r3, [r3, #0]
 810085e:	f042 0201 	orr.w	r2, r2, #1
 8100862:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8100864:	68fb      	ldr	r3, [r7, #12]
 8100866:	f003 0302 	and.w	r3, r3, #2
 810086a:	2b00      	cmp	r3, #0
 810086c:	d01e      	beq.n	81008ac <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 810086e:	687b      	ldr	r3, [r7, #4]
 8100870:	681b      	ldr	r3, [r3, #0]
 8100872:	691a      	ldr	r2, [r3, #16]
 8100874:	687b      	ldr	r3, [r7, #4]
 8100876:	681b      	ldr	r3, [r3, #0]
 8100878:	f042 0202 	orr.w	r2, r2, #2
 810087c:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 810087e:	687b      	ldr	r3, [r7, #4]
 8100880:	2220      	movs	r2, #32
 8100882:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8100884:	687b      	ldr	r3, [r7, #4]
 8100886:	2200      	movs	r2, #0
 8100888:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 810088a:	687b      	ldr	r3, [r7, #4]
 810088c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 810088e:	687b      	ldr	r3, [r7, #4]
 8100890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8100892:	425b      	negs	r3, r3
 8100894:	441a      	add	r2, r3
 8100896:	687b      	ldr	r3, [r7, #4]
 8100898:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 810089a:	687b      	ldr	r3, [r7, #4]
 810089c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 810089e:	4619      	mov	r1, r3
 81008a0:	6878      	ldr	r0, [r7, #4]
 81008a2:	f000 f88c 	bl	81009be <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 81008a6:	687b      	ldr	r3, [r7, #4]
 81008a8:	2200      	movs	r2, #0
 81008aa:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 81008ac:	68fb      	ldr	r3, [r7, #12]
 81008ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81008b2:	2b00      	cmp	r3, #0
 81008b4:	d024      	beq.n	8100900 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 81008b6:	687b      	ldr	r3, [r7, #4]
 81008b8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 81008ba:	3b01      	subs	r3, #1
 81008bc:	b29a      	uxth	r2, r3
 81008be:	687b      	ldr	r3, [r7, #4]
 81008c0:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 81008c2:	687b      	ldr	r3, [r7, #4]
 81008c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 81008c6:	2b00      	cmp	r3, #0
 81008c8:	d107      	bne.n	81008da <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 81008ca:	687b      	ldr	r3, [r7, #4]
 81008cc:	681b      	ldr	r3, [r3, #0]
 81008ce:	681a      	ldr	r2, [r3, #0]
 81008d0:	687b      	ldr	r3, [r7, #4]
 81008d2:	681b      	ldr	r3, [r3, #0]
 81008d4:	f042 0204 	orr.w	r2, r2, #4
 81008d8:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 81008da:	687b      	ldr	r3, [r7, #4]
 81008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81008de:	781a      	ldrb	r2, [r3, #0]
 81008e0:	687b      	ldr	r3, [r7, #4]
 81008e2:	681b      	ldr	r3, [r3, #0]
 81008e4:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 81008e6:	687b      	ldr	r3, [r7, #4]
 81008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81008ea:	1c5a      	adds	r2, r3, #1
 81008ec:	687b      	ldr	r3, [r7, #4]
 81008ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 81008f0:	687b      	ldr	r3, [r7, #4]
 81008f2:	681b      	ldr	r3, [r3, #0]
 81008f4:	691a      	ldr	r2, [r3, #16]
 81008f6:	687b      	ldr	r3, [r7, #4]
 81008f8:	681b      	ldr	r3, [r3, #0]
 81008fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81008fe:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8100900:	68fb      	ldr	r3, [r7, #12]
 8100902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100906:	2b00      	cmp	r3, #0
 8100908:	d014      	beq.n	8100934 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 810090a:	687b      	ldr	r3, [r7, #4]
 810090c:	681b      	ldr	r3, [r3, #0]
 810090e:	691a      	ldr	r2, [r3, #16]
 8100910:	687b      	ldr	r3, [r7, #4]
 8100912:	681b      	ldr	r3, [r3, #0]
 8100914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8100918:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 810091a:	687b      	ldr	r3, [r7, #4]
 810091c:	2220      	movs	r2, #32
 810091e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8100920:	687b      	ldr	r3, [r7, #4]
 8100922:	2200      	movs	r2, #0
 8100924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8100928:	687b      	ldr	r3, [r7, #4]
 810092a:	2200      	movs	r2, #0
 810092c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 810092e:	6878      	ldr	r0, [r7, #4]
 8100930:	f000 f83b 	bl	81009aa <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8100934:	68fa      	ldr	r2, [r7, #12]
 8100936:	f641 437c 	movw	r3, #7292	; 0x1c7c
 810093a:	4013      	ands	r3, r2
 810093c:	2b00      	cmp	r3, #0
 810093e:	d030      	beq.n	81009a2 <HAL_CEC_IRQHandler+0x1b2>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8100940:	687b      	ldr	r3, [r7, #4]
 8100942:	68fa      	ldr	r2, [r7, #12]
 8100944:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8100946:	687b      	ldr	r3, [r7, #4]
 8100948:	681b      	ldr	r3, [r3, #0]
 810094a:	691b      	ldr	r3, [r3, #16]
 810094c:	687a      	ldr	r2, [r7, #4]
 810094e:	6812      	ldr	r2, [r2, #0]
 8100950:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 8100954:	f043 031c 	orr.w	r3, r3, #28
 8100958:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 810095a:	68fb      	ldr	r3, [r7, #12]
 810095c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8100960:	2b00      	cmp	r3, #0
 8100962:	d00e      	beq.n	8100982 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8100964:	687b      	ldr	r3, [r7, #4]
 8100966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8100968:	687b      	ldr	r3, [r7, #4]
 810096a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 810096c:	425b      	negs	r3, r3
 810096e:	441a      	add	r2, r3
 8100970:	687b      	ldr	r3, [r7, #4]
 8100972:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8100974:	687b      	ldr	r3, [r7, #4]
 8100976:	2200      	movs	r2, #0
 8100978:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 810097a:	687b      	ldr	r3, [r7, #4]
 810097c:	2220      	movs	r2, #32
 810097e:	63da      	str	r2, [r3, #60]	; 0x3c
 8100980:	e00c      	b.n	810099c <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8100982:	68fb      	ldr	r3, [r7, #12]
 8100984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100988:	2b00      	cmp	r3, #0
 810098a:	d107      	bne.n	810099c <HAL_CEC_IRQHandler+0x1ac>
 810098c:	68fb      	ldr	r3, [r7, #12]
 810098e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8100992:	2b00      	cmp	r3, #0
 8100994:	d002      	beq.n	810099c <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8100996:	687b      	ldr	r3, [r7, #4]
 8100998:	2220      	movs	r2, #32
 810099a:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 810099c:	6878      	ldr	r0, [r7, #4]
 810099e:	f000 f819 	bl	81009d4 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 81009a2:	bf00      	nop
 81009a4:	3710      	adds	r7, #16
 81009a6:	46bd      	mov	sp, r7
 81009a8:	bd80      	pop	{r7, pc}

081009aa <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 81009aa:	b480      	push	{r7}
 81009ac:	b083      	sub	sp, #12
 81009ae:	af00      	add	r7, sp, #0
 81009b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 81009b2:	bf00      	nop
 81009b4:	370c      	adds	r7, #12
 81009b6:	46bd      	mov	sp, r7
 81009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009bc:	4770      	bx	lr

081009be <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 81009be:	b480      	push	{r7}
 81009c0:	b083      	sub	sp, #12
 81009c2:	af00      	add	r7, sp, #0
 81009c4:	6078      	str	r0, [r7, #4]
 81009c6:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 81009c8:	bf00      	nop
 81009ca:	370c      	adds	r7, #12
 81009cc:	46bd      	mov	sp, r7
 81009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009d2:	4770      	bx	lr

081009d4 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 81009d4:	b480      	push	{r7}
 81009d6:	b083      	sub	sp, #12
 81009d8:	af00      	add	r7, sp, #0
 81009da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 81009dc:	bf00      	nop
 81009de:	370c      	adds	r7, #12
 81009e0:	46bd      	mov	sp, r7
 81009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009e6:	4770      	bx	lr

081009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81009e8:	b480      	push	{r7}
 81009ea:	b085      	sub	sp, #20
 81009ec:	af00      	add	r7, sp, #0
 81009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81009f0:	687b      	ldr	r3, [r7, #4]
 81009f2:	f003 0307 	and.w	r3, r3, #7
 81009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81009f8:	4b0c      	ldr	r3, [pc, #48]	; (8100a2c <__NVIC_SetPriorityGrouping+0x44>)
 81009fa:	68db      	ldr	r3, [r3, #12]
 81009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81009fe:	68ba      	ldr	r2, [r7, #8]
 8100a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100a04:	4013      	ands	r3, r2
 8100a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100a08:	68fb      	ldr	r3, [r7, #12]
 8100a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100a0c:	68bb      	ldr	r3, [r7, #8]
 8100a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100a1a:	4a04      	ldr	r2, [pc, #16]	; (8100a2c <__NVIC_SetPriorityGrouping+0x44>)
 8100a1c:	68bb      	ldr	r3, [r7, #8]
 8100a1e:	60d3      	str	r3, [r2, #12]
}
 8100a20:	bf00      	nop
 8100a22:	3714      	adds	r7, #20
 8100a24:	46bd      	mov	sp, r7
 8100a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a2a:	4770      	bx	lr
 8100a2c:	e000ed00 	.word	0xe000ed00

08100a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100a30:	b480      	push	{r7}
 8100a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100a34:	4b04      	ldr	r3, [pc, #16]	; (8100a48 <__NVIC_GetPriorityGrouping+0x18>)
 8100a36:	68db      	ldr	r3, [r3, #12]
 8100a38:	0a1b      	lsrs	r3, r3, #8
 8100a3a:	f003 0307 	and.w	r3, r3, #7
}
 8100a3e:	4618      	mov	r0, r3
 8100a40:	46bd      	mov	sp, r7
 8100a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a46:	4770      	bx	lr
 8100a48:	e000ed00 	.word	0xe000ed00

08100a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100a4c:	b480      	push	{r7}
 8100a4e:	b083      	sub	sp, #12
 8100a50:	af00      	add	r7, sp, #0
 8100a52:	4603      	mov	r3, r0
 8100a54:	6039      	str	r1, [r7, #0]
 8100a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a5c:	2b00      	cmp	r3, #0
 8100a5e:	db0a      	blt.n	8100a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a60:	683b      	ldr	r3, [r7, #0]
 8100a62:	b2da      	uxtb	r2, r3
 8100a64:	490c      	ldr	r1, [pc, #48]	; (8100a98 <__NVIC_SetPriority+0x4c>)
 8100a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a6a:	0112      	lsls	r2, r2, #4
 8100a6c:	b2d2      	uxtb	r2, r2
 8100a6e:	440b      	add	r3, r1
 8100a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100a74:	e00a      	b.n	8100a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a76:	683b      	ldr	r3, [r7, #0]
 8100a78:	b2da      	uxtb	r2, r3
 8100a7a:	4908      	ldr	r1, [pc, #32]	; (8100a9c <__NVIC_SetPriority+0x50>)
 8100a7c:	88fb      	ldrh	r3, [r7, #6]
 8100a7e:	f003 030f 	and.w	r3, r3, #15
 8100a82:	3b04      	subs	r3, #4
 8100a84:	0112      	lsls	r2, r2, #4
 8100a86:	b2d2      	uxtb	r2, r2
 8100a88:	440b      	add	r3, r1
 8100a8a:	761a      	strb	r2, [r3, #24]
}
 8100a8c:	bf00      	nop
 8100a8e:	370c      	adds	r7, #12
 8100a90:	46bd      	mov	sp, r7
 8100a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a96:	4770      	bx	lr
 8100a98:	e000e100 	.word	0xe000e100
 8100a9c:	e000ed00 	.word	0xe000ed00

08100aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100aa0:	b480      	push	{r7}
 8100aa2:	b089      	sub	sp, #36	; 0x24
 8100aa4:	af00      	add	r7, sp, #0
 8100aa6:	60f8      	str	r0, [r7, #12]
 8100aa8:	60b9      	str	r1, [r7, #8]
 8100aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100aac:	68fb      	ldr	r3, [r7, #12]
 8100aae:	f003 0307 	and.w	r3, r3, #7
 8100ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100ab4:	69fb      	ldr	r3, [r7, #28]
 8100ab6:	f1c3 0307 	rsb	r3, r3, #7
 8100aba:	2b04      	cmp	r3, #4
 8100abc:	bf28      	it	cs
 8100abe:	2304      	movcs	r3, #4
 8100ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100ac2:	69fb      	ldr	r3, [r7, #28]
 8100ac4:	3304      	adds	r3, #4
 8100ac6:	2b06      	cmp	r3, #6
 8100ac8:	d902      	bls.n	8100ad0 <NVIC_EncodePriority+0x30>
 8100aca:	69fb      	ldr	r3, [r7, #28]
 8100acc:	3b03      	subs	r3, #3
 8100ace:	e000      	b.n	8100ad2 <NVIC_EncodePriority+0x32>
 8100ad0:	2300      	movs	r3, #0
 8100ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8100ad8:	69bb      	ldr	r3, [r7, #24]
 8100ada:	fa02 f303 	lsl.w	r3, r2, r3
 8100ade:	43da      	mvns	r2, r3
 8100ae0:	68bb      	ldr	r3, [r7, #8]
 8100ae2:	401a      	ands	r2, r3
 8100ae4:	697b      	ldr	r3, [r7, #20]
 8100ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8100aec:	697b      	ldr	r3, [r7, #20]
 8100aee:	fa01 f303 	lsl.w	r3, r1, r3
 8100af2:	43d9      	mvns	r1, r3
 8100af4:	687b      	ldr	r3, [r7, #4]
 8100af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100af8:	4313      	orrs	r3, r2
         );
}
 8100afa:	4618      	mov	r0, r3
 8100afc:	3724      	adds	r7, #36	; 0x24
 8100afe:	46bd      	mov	sp, r7
 8100b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b04:	4770      	bx	lr
	...

08100b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100b08:	b580      	push	{r7, lr}
 8100b0a:	b082      	sub	sp, #8
 8100b0c:	af00      	add	r7, sp, #0
 8100b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100b10:	687b      	ldr	r3, [r7, #4]
 8100b12:	3b01      	subs	r3, #1
 8100b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100b18:	d301      	bcc.n	8100b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100b1a:	2301      	movs	r3, #1
 8100b1c:	e00f      	b.n	8100b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100b1e:	4a0a      	ldr	r2, [pc, #40]	; (8100b48 <SysTick_Config+0x40>)
 8100b20:	687b      	ldr	r3, [r7, #4]
 8100b22:	3b01      	subs	r3, #1
 8100b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100b26:	210f      	movs	r1, #15
 8100b28:	f04f 30ff 	mov.w	r0, #4294967295
 8100b2c:	f7ff ff8e 	bl	8100a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100b30:	4b05      	ldr	r3, [pc, #20]	; (8100b48 <SysTick_Config+0x40>)
 8100b32:	2200      	movs	r2, #0
 8100b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100b36:	4b04      	ldr	r3, [pc, #16]	; (8100b48 <SysTick_Config+0x40>)
 8100b38:	2207      	movs	r2, #7
 8100b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100b3c:	2300      	movs	r3, #0
}
 8100b3e:	4618      	mov	r0, r3
 8100b40:	3708      	adds	r7, #8
 8100b42:	46bd      	mov	sp, r7
 8100b44:	bd80      	pop	{r7, pc}
 8100b46:	bf00      	nop
 8100b48:	e000e010 	.word	0xe000e010

08100b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b4c:	b580      	push	{r7, lr}
 8100b4e:	b082      	sub	sp, #8
 8100b50:	af00      	add	r7, sp, #0
 8100b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100b54:	6878      	ldr	r0, [r7, #4]
 8100b56:	f7ff ff47 	bl	81009e8 <__NVIC_SetPriorityGrouping>
}
 8100b5a:	bf00      	nop
 8100b5c:	3708      	adds	r7, #8
 8100b5e:	46bd      	mov	sp, r7
 8100b60:	bd80      	pop	{r7, pc}

08100b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100b62:	b580      	push	{r7, lr}
 8100b64:	b086      	sub	sp, #24
 8100b66:	af00      	add	r7, sp, #0
 8100b68:	4603      	mov	r3, r0
 8100b6a:	60b9      	str	r1, [r7, #8]
 8100b6c:	607a      	str	r2, [r7, #4]
 8100b6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100b70:	f7ff ff5e 	bl	8100a30 <__NVIC_GetPriorityGrouping>
 8100b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100b76:	687a      	ldr	r2, [r7, #4]
 8100b78:	68b9      	ldr	r1, [r7, #8]
 8100b7a:	6978      	ldr	r0, [r7, #20]
 8100b7c:	f7ff ff90 	bl	8100aa0 <NVIC_EncodePriority>
 8100b80:	4602      	mov	r2, r0
 8100b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100b86:	4611      	mov	r1, r2
 8100b88:	4618      	mov	r0, r3
 8100b8a:	f7ff ff5f 	bl	8100a4c <__NVIC_SetPriority>
}
 8100b8e:	bf00      	nop
 8100b90:	3718      	adds	r7, #24
 8100b92:	46bd      	mov	sp, r7
 8100b94:	bd80      	pop	{r7, pc}

08100b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100b96:	b580      	push	{r7, lr}
 8100b98:	b082      	sub	sp, #8
 8100b9a:	af00      	add	r7, sp, #0
 8100b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100b9e:	6878      	ldr	r0, [r7, #4]
 8100ba0:	f7ff ffb2 	bl	8100b08 <SysTick_Config>
 8100ba4:	4603      	mov	r3, r0
}
 8100ba6:	4618      	mov	r0, r3
 8100ba8:	3708      	adds	r7, #8
 8100baa:	46bd      	mov	sp, r7
 8100bac:	bd80      	pop	{r7, pc}
	...

08100bb0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100bb0:	b480      	push	{r7}
 8100bb2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100bb4:	4b07      	ldr	r3, [pc, #28]	; (8100bd4 <HAL_GetCurrentCPUID+0x24>)
 8100bb6:	681b      	ldr	r3, [r3, #0]
 8100bb8:	091b      	lsrs	r3, r3, #4
 8100bba:	f003 030f 	and.w	r3, r3, #15
 8100bbe:	2b07      	cmp	r3, #7
 8100bc0:	d101      	bne.n	8100bc6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100bc2:	2303      	movs	r3, #3
 8100bc4:	e000      	b.n	8100bc8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100bc6:	2301      	movs	r3, #1
  }
}
 8100bc8:	4618      	mov	r0, r3
 8100bca:	46bd      	mov	sp, r7
 8100bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bd0:	4770      	bx	lr
 8100bd2:	bf00      	nop
 8100bd4:	e000ed00 	.word	0xe000ed00

08100bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100bd8:	b480      	push	{r7}
 8100bda:	b089      	sub	sp, #36	; 0x24
 8100bdc:	af00      	add	r7, sp, #0
 8100bde:	6078      	str	r0, [r7, #4]
 8100be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100be2:	2300      	movs	r3, #0
 8100be4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100be6:	4b89      	ldr	r3, [pc, #548]	; (8100e0c <HAL_GPIO_Init+0x234>)
 8100be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100bea:	e194      	b.n	8100f16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100bec:	683b      	ldr	r3, [r7, #0]
 8100bee:	681a      	ldr	r2, [r3, #0]
 8100bf0:	2101      	movs	r1, #1
 8100bf2:	69fb      	ldr	r3, [r7, #28]
 8100bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8100bf8:	4013      	ands	r3, r2
 8100bfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100bfc:	693b      	ldr	r3, [r7, #16]
 8100bfe:	2b00      	cmp	r3, #0
 8100c00:	f000 8186 	beq.w	8100f10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100c04:	683b      	ldr	r3, [r7, #0]
 8100c06:	685b      	ldr	r3, [r3, #4]
 8100c08:	f003 0303 	and.w	r3, r3, #3
 8100c0c:	2b01      	cmp	r3, #1
 8100c0e:	d005      	beq.n	8100c1c <HAL_GPIO_Init+0x44>
 8100c10:	683b      	ldr	r3, [r7, #0]
 8100c12:	685b      	ldr	r3, [r3, #4]
 8100c14:	f003 0303 	and.w	r3, r3, #3
 8100c18:	2b02      	cmp	r3, #2
 8100c1a:	d130      	bne.n	8100c7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100c1c:	687b      	ldr	r3, [r7, #4]
 8100c1e:	689b      	ldr	r3, [r3, #8]
 8100c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100c22:	69fb      	ldr	r3, [r7, #28]
 8100c24:	005b      	lsls	r3, r3, #1
 8100c26:	2203      	movs	r2, #3
 8100c28:	fa02 f303 	lsl.w	r3, r2, r3
 8100c2c:	43db      	mvns	r3, r3
 8100c2e:	69ba      	ldr	r2, [r7, #24]
 8100c30:	4013      	ands	r3, r2
 8100c32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100c34:	683b      	ldr	r3, [r7, #0]
 8100c36:	68da      	ldr	r2, [r3, #12]
 8100c38:	69fb      	ldr	r3, [r7, #28]
 8100c3a:	005b      	lsls	r3, r3, #1
 8100c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8100c40:	69ba      	ldr	r2, [r7, #24]
 8100c42:	4313      	orrs	r3, r2
 8100c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100c46:	687b      	ldr	r3, [r7, #4]
 8100c48:	69ba      	ldr	r2, [r7, #24]
 8100c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100c4c:	687b      	ldr	r3, [r7, #4]
 8100c4e:	685b      	ldr	r3, [r3, #4]
 8100c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100c52:	2201      	movs	r2, #1
 8100c54:	69fb      	ldr	r3, [r7, #28]
 8100c56:	fa02 f303 	lsl.w	r3, r2, r3
 8100c5a:	43db      	mvns	r3, r3
 8100c5c:	69ba      	ldr	r2, [r7, #24]
 8100c5e:	4013      	ands	r3, r2
 8100c60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100c62:	683b      	ldr	r3, [r7, #0]
 8100c64:	685b      	ldr	r3, [r3, #4]
 8100c66:	091b      	lsrs	r3, r3, #4
 8100c68:	f003 0201 	and.w	r2, r3, #1
 8100c6c:	69fb      	ldr	r3, [r7, #28]
 8100c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c72:	69ba      	ldr	r2, [r7, #24]
 8100c74:	4313      	orrs	r3, r2
 8100c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100c78:	687b      	ldr	r3, [r7, #4]
 8100c7a:	69ba      	ldr	r2, [r7, #24]
 8100c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100c7e:	683b      	ldr	r3, [r7, #0]
 8100c80:	685b      	ldr	r3, [r3, #4]
 8100c82:	f003 0303 	and.w	r3, r3, #3
 8100c86:	2b03      	cmp	r3, #3
 8100c88:	d017      	beq.n	8100cba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100c8a:	687b      	ldr	r3, [r7, #4]
 8100c8c:	68db      	ldr	r3, [r3, #12]
 8100c8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100c90:	69fb      	ldr	r3, [r7, #28]
 8100c92:	005b      	lsls	r3, r3, #1
 8100c94:	2203      	movs	r2, #3
 8100c96:	fa02 f303 	lsl.w	r3, r2, r3
 8100c9a:	43db      	mvns	r3, r3
 8100c9c:	69ba      	ldr	r2, [r7, #24]
 8100c9e:	4013      	ands	r3, r2
 8100ca0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100ca2:	683b      	ldr	r3, [r7, #0]
 8100ca4:	689a      	ldr	r2, [r3, #8]
 8100ca6:	69fb      	ldr	r3, [r7, #28]
 8100ca8:	005b      	lsls	r3, r3, #1
 8100caa:	fa02 f303 	lsl.w	r3, r2, r3
 8100cae:	69ba      	ldr	r2, [r7, #24]
 8100cb0:	4313      	orrs	r3, r2
 8100cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100cb4:	687b      	ldr	r3, [r7, #4]
 8100cb6:	69ba      	ldr	r2, [r7, #24]
 8100cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100cba:	683b      	ldr	r3, [r7, #0]
 8100cbc:	685b      	ldr	r3, [r3, #4]
 8100cbe:	f003 0303 	and.w	r3, r3, #3
 8100cc2:	2b02      	cmp	r3, #2
 8100cc4:	d123      	bne.n	8100d0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100cc6:	69fb      	ldr	r3, [r7, #28]
 8100cc8:	08da      	lsrs	r2, r3, #3
 8100cca:	687b      	ldr	r3, [r7, #4]
 8100ccc:	3208      	adds	r2, #8
 8100cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100cd4:	69fb      	ldr	r3, [r7, #28]
 8100cd6:	f003 0307 	and.w	r3, r3, #7
 8100cda:	009b      	lsls	r3, r3, #2
 8100cdc:	220f      	movs	r2, #15
 8100cde:	fa02 f303 	lsl.w	r3, r2, r3
 8100ce2:	43db      	mvns	r3, r3
 8100ce4:	69ba      	ldr	r2, [r7, #24]
 8100ce6:	4013      	ands	r3, r2
 8100ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100cea:	683b      	ldr	r3, [r7, #0]
 8100cec:	691a      	ldr	r2, [r3, #16]
 8100cee:	69fb      	ldr	r3, [r7, #28]
 8100cf0:	f003 0307 	and.w	r3, r3, #7
 8100cf4:	009b      	lsls	r3, r3, #2
 8100cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8100cfa:	69ba      	ldr	r2, [r7, #24]
 8100cfc:	4313      	orrs	r3, r2
 8100cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100d00:	69fb      	ldr	r3, [r7, #28]
 8100d02:	08da      	lsrs	r2, r3, #3
 8100d04:	687b      	ldr	r3, [r7, #4]
 8100d06:	3208      	adds	r2, #8
 8100d08:	69b9      	ldr	r1, [r7, #24]
 8100d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100d0e:	687b      	ldr	r3, [r7, #4]
 8100d10:	681b      	ldr	r3, [r3, #0]
 8100d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100d14:	69fb      	ldr	r3, [r7, #28]
 8100d16:	005b      	lsls	r3, r3, #1
 8100d18:	2203      	movs	r2, #3
 8100d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8100d1e:	43db      	mvns	r3, r3
 8100d20:	69ba      	ldr	r2, [r7, #24]
 8100d22:	4013      	ands	r3, r2
 8100d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100d26:	683b      	ldr	r3, [r7, #0]
 8100d28:	685b      	ldr	r3, [r3, #4]
 8100d2a:	f003 0203 	and.w	r2, r3, #3
 8100d2e:	69fb      	ldr	r3, [r7, #28]
 8100d30:	005b      	lsls	r3, r3, #1
 8100d32:	fa02 f303 	lsl.w	r3, r2, r3
 8100d36:	69ba      	ldr	r2, [r7, #24]
 8100d38:	4313      	orrs	r3, r2
 8100d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100d3c:	687b      	ldr	r3, [r7, #4]
 8100d3e:	69ba      	ldr	r2, [r7, #24]
 8100d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100d42:	683b      	ldr	r3, [r7, #0]
 8100d44:	685b      	ldr	r3, [r3, #4]
 8100d46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100d4a:	2b00      	cmp	r3, #0
 8100d4c:	f000 80e0 	beq.w	8100f10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d50:	4b2f      	ldr	r3, [pc, #188]	; (8100e10 <HAL_GPIO_Init+0x238>)
 8100d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d56:	4a2e      	ldr	r2, [pc, #184]	; (8100e10 <HAL_GPIO_Init+0x238>)
 8100d58:	f043 0302 	orr.w	r3, r3, #2
 8100d5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100d60:	4b2b      	ldr	r3, [pc, #172]	; (8100e10 <HAL_GPIO_Init+0x238>)
 8100d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d66:	f003 0302 	and.w	r3, r3, #2
 8100d6a:	60fb      	str	r3, [r7, #12]
 8100d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100d6e:	4a29      	ldr	r2, [pc, #164]	; (8100e14 <HAL_GPIO_Init+0x23c>)
 8100d70:	69fb      	ldr	r3, [r7, #28]
 8100d72:	089b      	lsrs	r3, r3, #2
 8100d74:	3302      	adds	r3, #2
 8100d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100d7c:	69fb      	ldr	r3, [r7, #28]
 8100d7e:	f003 0303 	and.w	r3, r3, #3
 8100d82:	009b      	lsls	r3, r3, #2
 8100d84:	220f      	movs	r2, #15
 8100d86:	fa02 f303 	lsl.w	r3, r2, r3
 8100d8a:	43db      	mvns	r3, r3
 8100d8c:	69ba      	ldr	r2, [r7, #24]
 8100d8e:	4013      	ands	r3, r2
 8100d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100d92:	687b      	ldr	r3, [r7, #4]
 8100d94:	4a20      	ldr	r2, [pc, #128]	; (8100e18 <HAL_GPIO_Init+0x240>)
 8100d96:	4293      	cmp	r3, r2
 8100d98:	d052      	beq.n	8100e40 <HAL_GPIO_Init+0x268>
 8100d9a:	687b      	ldr	r3, [r7, #4]
 8100d9c:	4a1f      	ldr	r2, [pc, #124]	; (8100e1c <HAL_GPIO_Init+0x244>)
 8100d9e:	4293      	cmp	r3, r2
 8100da0:	d031      	beq.n	8100e06 <HAL_GPIO_Init+0x22e>
 8100da2:	687b      	ldr	r3, [r7, #4]
 8100da4:	4a1e      	ldr	r2, [pc, #120]	; (8100e20 <HAL_GPIO_Init+0x248>)
 8100da6:	4293      	cmp	r3, r2
 8100da8:	d02b      	beq.n	8100e02 <HAL_GPIO_Init+0x22a>
 8100daa:	687b      	ldr	r3, [r7, #4]
 8100dac:	4a1d      	ldr	r2, [pc, #116]	; (8100e24 <HAL_GPIO_Init+0x24c>)
 8100dae:	4293      	cmp	r3, r2
 8100db0:	d025      	beq.n	8100dfe <HAL_GPIO_Init+0x226>
 8100db2:	687b      	ldr	r3, [r7, #4]
 8100db4:	4a1c      	ldr	r2, [pc, #112]	; (8100e28 <HAL_GPIO_Init+0x250>)
 8100db6:	4293      	cmp	r3, r2
 8100db8:	d01f      	beq.n	8100dfa <HAL_GPIO_Init+0x222>
 8100dba:	687b      	ldr	r3, [r7, #4]
 8100dbc:	4a1b      	ldr	r2, [pc, #108]	; (8100e2c <HAL_GPIO_Init+0x254>)
 8100dbe:	4293      	cmp	r3, r2
 8100dc0:	d019      	beq.n	8100df6 <HAL_GPIO_Init+0x21e>
 8100dc2:	687b      	ldr	r3, [r7, #4]
 8100dc4:	4a1a      	ldr	r2, [pc, #104]	; (8100e30 <HAL_GPIO_Init+0x258>)
 8100dc6:	4293      	cmp	r3, r2
 8100dc8:	d013      	beq.n	8100df2 <HAL_GPIO_Init+0x21a>
 8100dca:	687b      	ldr	r3, [r7, #4]
 8100dcc:	4a19      	ldr	r2, [pc, #100]	; (8100e34 <HAL_GPIO_Init+0x25c>)
 8100dce:	4293      	cmp	r3, r2
 8100dd0:	d00d      	beq.n	8100dee <HAL_GPIO_Init+0x216>
 8100dd2:	687b      	ldr	r3, [r7, #4]
 8100dd4:	4a18      	ldr	r2, [pc, #96]	; (8100e38 <HAL_GPIO_Init+0x260>)
 8100dd6:	4293      	cmp	r3, r2
 8100dd8:	d007      	beq.n	8100dea <HAL_GPIO_Init+0x212>
 8100dda:	687b      	ldr	r3, [r7, #4]
 8100ddc:	4a17      	ldr	r2, [pc, #92]	; (8100e3c <HAL_GPIO_Init+0x264>)
 8100dde:	4293      	cmp	r3, r2
 8100de0:	d101      	bne.n	8100de6 <HAL_GPIO_Init+0x20e>
 8100de2:	2309      	movs	r3, #9
 8100de4:	e02d      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100de6:	230a      	movs	r3, #10
 8100de8:	e02b      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100dea:	2308      	movs	r3, #8
 8100dec:	e029      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100dee:	2307      	movs	r3, #7
 8100df0:	e027      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100df2:	2306      	movs	r3, #6
 8100df4:	e025      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100df6:	2305      	movs	r3, #5
 8100df8:	e023      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100dfa:	2304      	movs	r3, #4
 8100dfc:	e021      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100dfe:	2303      	movs	r3, #3
 8100e00:	e01f      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100e02:	2302      	movs	r3, #2
 8100e04:	e01d      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100e06:	2301      	movs	r3, #1
 8100e08:	e01b      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100e0a:	bf00      	nop
 8100e0c:	580000c0 	.word	0x580000c0
 8100e10:	58024400 	.word	0x58024400
 8100e14:	58000400 	.word	0x58000400
 8100e18:	58020000 	.word	0x58020000
 8100e1c:	58020400 	.word	0x58020400
 8100e20:	58020800 	.word	0x58020800
 8100e24:	58020c00 	.word	0x58020c00
 8100e28:	58021000 	.word	0x58021000
 8100e2c:	58021400 	.word	0x58021400
 8100e30:	58021800 	.word	0x58021800
 8100e34:	58021c00 	.word	0x58021c00
 8100e38:	58022000 	.word	0x58022000
 8100e3c:	58022400 	.word	0x58022400
 8100e40:	2300      	movs	r3, #0
 8100e42:	69fa      	ldr	r2, [r7, #28]
 8100e44:	f002 0203 	and.w	r2, r2, #3
 8100e48:	0092      	lsls	r2, r2, #2
 8100e4a:	4093      	lsls	r3, r2
 8100e4c:	69ba      	ldr	r2, [r7, #24]
 8100e4e:	4313      	orrs	r3, r2
 8100e50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100e52:	4938      	ldr	r1, [pc, #224]	; (8100f34 <HAL_GPIO_Init+0x35c>)
 8100e54:	69fb      	ldr	r3, [r7, #28]
 8100e56:	089b      	lsrs	r3, r3, #2
 8100e58:	3302      	adds	r3, #2
 8100e5a:	69ba      	ldr	r2, [r7, #24]
 8100e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e64:	681b      	ldr	r3, [r3, #0]
 8100e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e68:	693b      	ldr	r3, [r7, #16]
 8100e6a:	43db      	mvns	r3, r3
 8100e6c:	69ba      	ldr	r2, [r7, #24]
 8100e6e:	4013      	ands	r3, r2
 8100e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100e72:	683b      	ldr	r3, [r7, #0]
 8100e74:	685b      	ldr	r3, [r3, #4]
 8100e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100e7a:	2b00      	cmp	r3, #0
 8100e7c:	d003      	beq.n	8100e86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100e7e:	69ba      	ldr	r2, [r7, #24]
 8100e80:	693b      	ldr	r3, [r7, #16]
 8100e82:	4313      	orrs	r3, r2
 8100e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e8a:	69bb      	ldr	r3, [r7, #24]
 8100e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e92:	685b      	ldr	r3, [r3, #4]
 8100e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e96:	693b      	ldr	r3, [r7, #16]
 8100e98:	43db      	mvns	r3, r3
 8100e9a:	69ba      	ldr	r2, [r7, #24]
 8100e9c:	4013      	ands	r3, r2
 8100e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100ea0:	683b      	ldr	r3, [r7, #0]
 8100ea2:	685b      	ldr	r3, [r3, #4]
 8100ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100ea8:	2b00      	cmp	r3, #0
 8100eaa:	d003      	beq.n	8100eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100eac:	69ba      	ldr	r2, [r7, #24]
 8100eae:	693b      	ldr	r3, [r7, #16]
 8100eb0:	4313      	orrs	r3, r2
 8100eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100eb8:	69bb      	ldr	r3, [r7, #24]
 8100eba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100ebc:	697b      	ldr	r3, [r7, #20]
 8100ebe:	685b      	ldr	r3, [r3, #4]
 8100ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ec2:	693b      	ldr	r3, [r7, #16]
 8100ec4:	43db      	mvns	r3, r3
 8100ec6:	69ba      	ldr	r2, [r7, #24]
 8100ec8:	4013      	ands	r3, r2
 8100eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100ecc:	683b      	ldr	r3, [r7, #0]
 8100ece:	685b      	ldr	r3, [r3, #4]
 8100ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100ed4:	2b00      	cmp	r3, #0
 8100ed6:	d003      	beq.n	8100ee0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100ed8:	69ba      	ldr	r2, [r7, #24]
 8100eda:	693b      	ldr	r3, [r7, #16]
 8100edc:	4313      	orrs	r3, r2
 8100ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100ee0:	697b      	ldr	r3, [r7, #20]
 8100ee2:	69ba      	ldr	r2, [r7, #24]
 8100ee4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100ee6:	697b      	ldr	r3, [r7, #20]
 8100ee8:	681b      	ldr	r3, [r3, #0]
 8100eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100eec:	693b      	ldr	r3, [r7, #16]
 8100eee:	43db      	mvns	r3, r3
 8100ef0:	69ba      	ldr	r2, [r7, #24]
 8100ef2:	4013      	ands	r3, r2
 8100ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100ef6:	683b      	ldr	r3, [r7, #0]
 8100ef8:	685b      	ldr	r3, [r3, #4]
 8100efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100efe:	2b00      	cmp	r3, #0
 8100f00:	d003      	beq.n	8100f0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100f02:	69ba      	ldr	r2, [r7, #24]
 8100f04:	693b      	ldr	r3, [r7, #16]
 8100f06:	4313      	orrs	r3, r2
 8100f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100f0a:	697b      	ldr	r3, [r7, #20]
 8100f0c:	69ba      	ldr	r2, [r7, #24]
 8100f0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100f10:	69fb      	ldr	r3, [r7, #28]
 8100f12:	3301      	adds	r3, #1
 8100f14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100f16:	683b      	ldr	r3, [r7, #0]
 8100f18:	681a      	ldr	r2, [r3, #0]
 8100f1a:	69fb      	ldr	r3, [r7, #28]
 8100f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8100f20:	2b00      	cmp	r3, #0
 8100f22:	f47f ae63 	bne.w	8100bec <HAL_GPIO_Init+0x14>
  }
}
 8100f26:	bf00      	nop
 8100f28:	bf00      	nop
 8100f2a:	3724      	adds	r7, #36	; 0x24
 8100f2c:	46bd      	mov	sp, r7
 8100f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f32:	4770      	bx	lr
 8100f34:	58000400 	.word	0x58000400

08100f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100f38:	b480      	push	{r7}
 8100f3a:	b083      	sub	sp, #12
 8100f3c:	af00      	add	r7, sp, #0
 8100f3e:	6078      	str	r0, [r7, #4]
 8100f40:	460b      	mov	r3, r1
 8100f42:	807b      	strh	r3, [r7, #2]
 8100f44:	4613      	mov	r3, r2
 8100f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100f48:	787b      	ldrb	r3, [r7, #1]
 8100f4a:	2b00      	cmp	r3, #0
 8100f4c:	d003      	beq.n	8100f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100f4e:	887a      	ldrh	r2, [r7, #2]
 8100f50:	687b      	ldr	r3, [r7, #4]
 8100f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100f54:	e003      	b.n	8100f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100f56:	887b      	ldrh	r3, [r7, #2]
 8100f58:	041a      	lsls	r2, r3, #16
 8100f5a:	687b      	ldr	r3, [r7, #4]
 8100f5c:	619a      	str	r2, [r3, #24]
}
 8100f5e:	bf00      	nop
 8100f60:	370c      	adds	r7, #12
 8100f62:	46bd      	mov	sp, r7
 8100f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f68:	4770      	bx	lr

08100f6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100f6a:	b480      	push	{r7}
 8100f6c:	b085      	sub	sp, #20
 8100f6e:	af00      	add	r7, sp, #0
 8100f70:	6078      	str	r0, [r7, #4]
 8100f72:	460b      	mov	r3, r1
 8100f74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100f76:	687b      	ldr	r3, [r7, #4]
 8100f78:	695b      	ldr	r3, [r3, #20]
 8100f7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100f7c:	887a      	ldrh	r2, [r7, #2]
 8100f7e:	68fb      	ldr	r3, [r7, #12]
 8100f80:	4013      	ands	r3, r2
 8100f82:	041a      	lsls	r2, r3, #16
 8100f84:	68fb      	ldr	r3, [r7, #12]
 8100f86:	43d9      	mvns	r1, r3
 8100f88:	887b      	ldrh	r3, [r7, #2]
 8100f8a:	400b      	ands	r3, r1
 8100f8c:	431a      	orrs	r2, r3
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	619a      	str	r2, [r3, #24]
}
 8100f92:	bf00      	nop
 8100f94:	3714      	adds	r7, #20
 8100f96:	46bd      	mov	sp, r7
 8100f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f9c:	4770      	bx	lr
	...

08100fa0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100fa0:	b480      	push	{r7}
 8100fa2:	b083      	sub	sp, #12
 8100fa4:	af00      	add	r7, sp, #0
 8100fa6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100fa8:	4b05      	ldr	r3, [pc, #20]	; (8100fc0 <HAL_HSEM_ActivateNotification+0x20>)
 8100faa:	681a      	ldr	r2, [r3, #0]
 8100fac:	4904      	ldr	r1, [pc, #16]	; (8100fc0 <HAL_HSEM_ActivateNotification+0x20>)
 8100fae:	687b      	ldr	r3, [r7, #4]
 8100fb0:	4313      	orrs	r3, r2
 8100fb2:	600b      	str	r3, [r1, #0]
#endif
}
 8100fb4:	bf00      	nop
 8100fb6:	370c      	adds	r7, #12
 8100fb8:	46bd      	mov	sp, r7
 8100fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fbe:	4770      	bx	lr
 8100fc0:	58026510 	.word	0x58026510

08100fc4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100fc4:	b580      	push	{r7, lr}
 8100fc6:	b084      	sub	sp, #16
 8100fc8:	af00      	add	r7, sp, #0
 8100fca:	60f8      	str	r0, [r7, #12]
 8100fcc:	460b      	mov	r3, r1
 8100fce:	607a      	str	r2, [r7, #4]
 8100fd0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100fd2:	4b37      	ldr	r3, [pc, #220]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fd4:	681b      	ldr	r3, [r3, #0]
 8100fd6:	f023 0201 	bic.w	r2, r3, #1
 8100fda:	4935      	ldr	r1, [pc, #212]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fdc:	68fb      	ldr	r3, [r7, #12]
 8100fde:	4313      	orrs	r3, r2
 8100fe0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100fe2:	687b      	ldr	r3, [r7, #4]
 8100fe4:	2b00      	cmp	r3, #0
 8100fe6:	d123      	bne.n	8101030 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100fe8:	f7ff fde2 	bl	8100bb0 <HAL_GetCurrentCPUID>
 8100fec:	4603      	mov	r3, r0
 8100fee:	2b03      	cmp	r3, #3
 8100ff0:	d158      	bne.n	81010a4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100ff2:	4b2f      	ldr	r3, [pc, #188]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ff4:	691b      	ldr	r3, [r3, #16]
 8100ff6:	4a2e      	ldr	r2, [pc, #184]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ff8:	f023 0301 	bic.w	r3, r3, #1
 8100ffc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100ffe:	4b2d      	ldr	r3, [pc, #180]	; (81010b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101000:	691b      	ldr	r3, [r3, #16]
 8101002:	4a2c      	ldr	r2, [pc, #176]	; (81010b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101004:	f043 0304 	orr.w	r3, r3, #4
 8101008:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810100a:	f3bf 8f4f 	dsb	sy
}
 810100e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101010:	f3bf 8f6f 	isb	sy
}
 8101014:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101016:	7afb      	ldrb	r3, [r7, #11]
 8101018:	2b01      	cmp	r3, #1
 810101a:	d101      	bne.n	8101020 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810101c:	bf30      	wfi
 810101e:	e000      	b.n	8101022 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101020:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101022:	4b24      	ldr	r3, [pc, #144]	; (81010b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101024:	691b      	ldr	r3, [r3, #16]
 8101026:	4a23      	ldr	r2, [pc, #140]	; (81010b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101028:	f023 0304 	bic.w	r3, r3, #4
 810102c:	6113      	str	r3, [r2, #16]
 810102e:	e03c      	b.n	81010aa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101030:	687b      	ldr	r3, [r7, #4]
 8101032:	2b01      	cmp	r3, #1
 8101034:	d123      	bne.n	810107e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101036:	f7ff fdbb 	bl	8100bb0 <HAL_GetCurrentCPUID>
 810103a:	4603      	mov	r3, r0
 810103c:	2b01      	cmp	r3, #1
 810103e:	d133      	bne.n	81010a8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101040:	4b1b      	ldr	r3, [pc, #108]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101042:	695b      	ldr	r3, [r3, #20]
 8101044:	4a1a      	ldr	r2, [pc, #104]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101046:	f023 0302 	bic.w	r3, r3, #2
 810104a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810104c:	4b19      	ldr	r3, [pc, #100]	; (81010b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810104e:	691b      	ldr	r3, [r3, #16]
 8101050:	4a18      	ldr	r2, [pc, #96]	; (81010b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101052:	f043 0304 	orr.w	r3, r3, #4
 8101056:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101058:	f3bf 8f4f 	dsb	sy
}
 810105c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810105e:	f3bf 8f6f 	isb	sy
}
 8101062:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101064:	7afb      	ldrb	r3, [r7, #11]
 8101066:	2b01      	cmp	r3, #1
 8101068:	d101      	bne.n	810106e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810106a:	bf30      	wfi
 810106c:	e000      	b.n	8101070 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810106e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101070:	4b10      	ldr	r3, [pc, #64]	; (81010b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101072:	691b      	ldr	r3, [r3, #16]
 8101074:	4a0f      	ldr	r2, [pc, #60]	; (81010b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101076:	f023 0304 	bic.w	r3, r3, #4
 810107a:	6113      	str	r3, [r2, #16]
 810107c:	e015      	b.n	81010aa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810107e:	f7ff fd97 	bl	8100bb0 <HAL_GetCurrentCPUID>
 8101082:	4603      	mov	r3, r0
 8101084:	2b03      	cmp	r3, #3
 8101086:	d106      	bne.n	8101096 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101088:	4b09      	ldr	r3, [pc, #36]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810108a:	691b      	ldr	r3, [r3, #16]
 810108c:	4a08      	ldr	r2, [pc, #32]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810108e:	f023 0304 	bic.w	r3, r3, #4
 8101092:	6113      	str	r3, [r2, #16]
 8101094:	e009      	b.n	81010aa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101096:	4b06      	ldr	r3, [pc, #24]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101098:	695b      	ldr	r3, [r3, #20]
 810109a:	4a05      	ldr	r2, [pc, #20]	; (81010b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810109c:	f023 0304 	bic.w	r3, r3, #4
 81010a0:	6153      	str	r3, [r2, #20]
 81010a2:	e002      	b.n	81010aa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81010a4:	bf00      	nop
 81010a6:	e000      	b.n	81010aa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81010a8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81010aa:	3710      	adds	r7, #16
 81010ac:	46bd      	mov	sp, r7
 81010ae:	bd80      	pop	{r7, pc}
 81010b0:	58024800 	.word	0x58024800
 81010b4:	e000ed00 	.word	0xe000ed00

081010b8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81010b8:	b580      	push	{r7, lr}
 81010ba:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81010bc:	f7ff fd78 	bl	8100bb0 <HAL_GetCurrentCPUID>
 81010c0:	4603      	mov	r3, r0
 81010c2:	2b03      	cmp	r3, #3
 81010c4:	d101      	bne.n	81010ca <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81010c6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81010c8:	e001      	b.n	81010ce <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81010ca:	bf40      	sev
    __WFE ();
 81010cc:	bf20      	wfe
}
 81010ce:	bf00      	nop
 81010d0:	bd80      	pop	{r7, pc}
	...

081010d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81010d4:	b480      	push	{r7}
 81010d6:	b089      	sub	sp, #36	; 0x24
 81010d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81010da:	4bb3      	ldr	r3, [pc, #716]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010dc:	691b      	ldr	r3, [r3, #16]
 81010de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81010e2:	2b18      	cmp	r3, #24
 81010e4:	f200 8155 	bhi.w	8101392 <HAL_RCC_GetSysClockFreq+0x2be>
 81010e8:	a201      	add	r2, pc, #4	; (adr r2, 81010f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81010ee:	bf00      	nop
 81010f0:	08101155 	.word	0x08101155
 81010f4:	08101393 	.word	0x08101393
 81010f8:	08101393 	.word	0x08101393
 81010fc:	08101393 	.word	0x08101393
 8101100:	08101393 	.word	0x08101393
 8101104:	08101393 	.word	0x08101393
 8101108:	08101393 	.word	0x08101393
 810110c:	08101393 	.word	0x08101393
 8101110:	0810117b 	.word	0x0810117b
 8101114:	08101393 	.word	0x08101393
 8101118:	08101393 	.word	0x08101393
 810111c:	08101393 	.word	0x08101393
 8101120:	08101393 	.word	0x08101393
 8101124:	08101393 	.word	0x08101393
 8101128:	08101393 	.word	0x08101393
 810112c:	08101393 	.word	0x08101393
 8101130:	08101181 	.word	0x08101181
 8101134:	08101393 	.word	0x08101393
 8101138:	08101393 	.word	0x08101393
 810113c:	08101393 	.word	0x08101393
 8101140:	08101393 	.word	0x08101393
 8101144:	08101393 	.word	0x08101393
 8101148:	08101393 	.word	0x08101393
 810114c:	08101393 	.word	0x08101393
 8101150:	08101187 	.word	0x08101187
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101154:	4b94      	ldr	r3, [pc, #592]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101156:	681b      	ldr	r3, [r3, #0]
 8101158:	f003 0320 	and.w	r3, r3, #32
 810115c:	2b00      	cmp	r3, #0
 810115e:	d009      	beq.n	8101174 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101160:	4b91      	ldr	r3, [pc, #580]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101162:	681b      	ldr	r3, [r3, #0]
 8101164:	08db      	lsrs	r3, r3, #3
 8101166:	f003 0303 	and.w	r3, r3, #3
 810116a:	4a90      	ldr	r2, [pc, #576]	; (81013ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 810116c:	fa22 f303 	lsr.w	r3, r2, r3
 8101170:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101172:	e111      	b.n	8101398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101174:	4b8d      	ldr	r3, [pc, #564]	; (81013ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101176:	61bb      	str	r3, [r7, #24]
      break;
 8101178:	e10e      	b.n	8101398 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810117a:	4b8d      	ldr	r3, [pc, #564]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810117c:	61bb      	str	r3, [r7, #24]
      break;
 810117e:	e10b      	b.n	8101398 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101180:	4b8c      	ldr	r3, [pc, #560]	; (81013b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101182:	61bb      	str	r3, [r7, #24]
      break;
 8101184:	e108      	b.n	8101398 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101186:	4b88      	ldr	r3, [pc, #544]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810118a:	f003 0303 	and.w	r3, r3, #3
 810118e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101190:	4b85      	ldr	r3, [pc, #532]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101194:	091b      	lsrs	r3, r3, #4
 8101196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810119a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810119c:	4b82      	ldr	r3, [pc, #520]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81011a0:	f003 0301 	and.w	r3, r3, #1
 81011a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81011a6:	4b80      	ldr	r3, [pc, #512]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81011aa:	08db      	lsrs	r3, r3, #3
 81011ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81011b0:	68fa      	ldr	r2, [r7, #12]
 81011b2:	fb02 f303 	mul.w	r3, r2, r3
 81011b6:	ee07 3a90 	vmov	s15, r3
 81011ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81011c2:	693b      	ldr	r3, [r7, #16]
 81011c4:	2b00      	cmp	r3, #0
 81011c6:	f000 80e1 	beq.w	810138c <HAL_RCC_GetSysClockFreq+0x2b8>
 81011ca:	697b      	ldr	r3, [r7, #20]
 81011cc:	2b02      	cmp	r3, #2
 81011ce:	f000 8083 	beq.w	81012d8 <HAL_RCC_GetSysClockFreq+0x204>
 81011d2:	697b      	ldr	r3, [r7, #20]
 81011d4:	2b02      	cmp	r3, #2
 81011d6:	f200 80a1 	bhi.w	810131c <HAL_RCC_GetSysClockFreq+0x248>
 81011da:	697b      	ldr	r3, [r7, #20]
 81011dc:	2b00      	cmp	r3, #0
 81011de:	d003      	beq.n	81011e8 <HAL_RCC_GetSysClockFreq+0x114>
 81011e0:	697b      	ldr	r3, [r7, #20]
 81011e2:	2b01      	cmp	r3, #1
 81011e4:	d056      	beq.n	8101294 <HAL_RCC_GetSysClockFreq+0x1c0>
 81011e6:	e099      	b.n	810131c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81011e8:	4b6f      	ldr	r3, [pc, #444]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011ea:	681b      	ldr	r3, [r3, #0]
 81011ec:	f003 0320 	and.w	r3, r3, #32
 81011f0:	2b00      	cmp	r3, #0
 81011f2:	d02d      	beq.n	8101250 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81011f4:	4b6c      	ldr	r3, [pc, #432]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011f6:	681b      	ldr	r3, [r3, #0]
 81011f8:	08db      	lsrs	r3, r3, #3
 81011fa:	f003 0303 	and.w	r3, r3, #3
 81011fe:	4a6b      	ldr	r2, [pc, #428]	; (81013ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101200:	fa22 f303 	lsr.w	r3, r2, r3
 8101204:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101206:	687b      	ldr	r3, [r7, #4]
 8101208:	ee07 3a90 	vmov	s15, r3
 810120c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101210:	693b      	ldr	r3, [r7, #16]
 8101212:	ee07 3a90 	vmov	s15, r3
 8101216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810121a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810121e:	4b62      	ldr	r3, [pc, #392]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101226:	ee07 3a90 	vmov	s15, r3
 810122a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810122e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101232:	eddf 5a61 	vldr	s11, [pc, #388]	; 81013b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810123a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810123e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101246:	ee67 7a27 	vmul.f32	s15, s14, s15
 810124a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810124e:	e087      	b.n	8101360 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101250:	693b      	ldr	r3, [r7, #16]
 8101252:	ee07 3a90 	vmov	s15, r3
 8101256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810125a:	eddf 6a58 	vldr	s13, [pc, #352]	; 81013bc <HAL_RCC_GetSysClockFreq+0x2e8>
 810125e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101262:	4b51      	ldr	r3, [pc, #324]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810126a:	ee07 3a90 	vmov	s15, r3
 810126e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101272:	ed97 6a02 	vldr	s12, [r7, #8]
 8101276:	eddf 5a50 	vldr	s11, [pc, #320]	; 81013b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810127a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810127e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810128e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101292:	e065      	b.n	8101360 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101294:	693b      	ldr	r3, [r7, #16]
 8101296:	ee07 3a90 	vmov	s15, r3
 810129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810129e:	eddf 6a48 	vldr	s13, [pc, #288]	; 81013c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 81012a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012a6:	4b40      	ldr	r3, [pc, #256]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012ae:	ee07 3a90 	vmov	s15, r3
 81012b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81012ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81013b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81012be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81012c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81012c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81012ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81012d6:	e043      	b.n	8101360 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81012d8:	693b      	ldr	r3, [r7, #16]
 81012da:	ee07 3a90 	vmov	s15, r3
 81012de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 81013c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81012e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012ea:	4b2f      	ldr	r3, [pc, #188]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012f2:	ee07 3a90 	vmov	s15, r3
 81012f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81012fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81013b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810130a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810130e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101316:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810131a:	e021      	b.n	8101360 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810131c:	693b      	ldr	r3, [r7, #16]
 810131e:	ee07 3a90 	vmov	s15, r3
 8101322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101326:	eddf 6a26 	vldr	s13, [pc, #152]	; 81013c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810132a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810132e:	4b1e      	ldr	r3, [pc, #120]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101336:	ee07 3a90 	vmov	s15, r3
 810133a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810133e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101342:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81013b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810134a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810134e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101356:	ee67 7a27 	vmul.f32	s15, s14, s15
 810135a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810135e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101360:	4b11      	ldr	r3, [pc, #68]	; (81013a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101364:	0a5b      	lsrs	r3, r3, #9
 8101366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810136a:	3301      	adds	r3, #1
 810136c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810136e:	683b      	ldr	r3, [r7, #0]
 8101370:	ee07 3a90 	vmov	s15, r3
 8101374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101378:	edd7 6a07 	vldr	s13, [r7, #28]
 810137c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101384:	ee17 3a90 	vmov	r3, s15
 8101388:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810138a:	e005      	b.n	8101398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810138c:	2300      	movs	r3, #0
 810138e:	61bb      	str	r3, [r7, #24]
      break;
 8101390:	e002      	b.n	8101398 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8101392:	4b07      	ldr	r3, [pc, #28]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101394:	61bb      	str	r3, [r7, #24]
      break;
 8101396:	bf00      	nop
  }

  return sysclockfreq;
 8101398:	69bb      	ldr	r3, [r7, #24]
}
 810139a:	4618      	mov	r0, r3
 810139c:	3724      	adds	r7, #36	; 0x24
 810139e:	46bd      	mov	sp, r7
 81013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a4:	4770      	bx	lr
 81013a6:	bf00      	nop
 81013a8:	58024400 	.word	0x58024400
 81013ac:	03d09000 	.word	0x03d09000
 81013b0:	003d0900 	.word	0x003d0900
 81013b4:	017d7840 	.word	0x017d7840
 81013b8:	46000000 	.word	0x46000000
 81013bc:	4c742400 	.word	0x4c742400
 81013c0:	4a742400 	.word	0x4a742400
 81013c4:	4bbebc20 	.word	0x4bbebc20

081013c8 <__libc_init_array>:
 81013c8:	b570      	push	{r4, r5, r6, lr}
 81013ca:	4d0d      	ldr	r5, [pc, #52]	; (8101400 <__libc_init_array+0x38>)
 81013cc:	4c0d      	ldr	r4, [pc, #52]	; (8101404 <__libc_init_array+0x3c>)
 81013ce:	1b64      	subs	r4, r4, r5
 81013d0:	10a4      	asrs	r4, r4, #2
 81013d2:	2600      	movs	r6, #0
 81013d4:	42a6      	cmp	r6, r4
 81013d6:	d109      	bne.n	81013ec <__libc_init_array+0x24>
 81013d8:	4d0b      	ldr	r5, [pc, #44]	; (8101408 <__libc_init_array+0x40>)
 81013da:	4c0c      	ldr	r4, [pc, #48]	; (810140c <__libc_init_array+0x44>)
 81013dc:	f000 f818 	bl	8101410 <_init>
 81013e0:	1b64      	subs	r4, r4, r5
 81013e2:	10a4      	asrs	r4, r4, #2
 81013e4:	2600      	movs	r6, #0
 81013e6:	42a6      	cmp	r6, r4
 81013e8:	d105      	bne.n	81013f6 <__libc_init_array+0x2e>
 81013ea:	bd70      	pop	{r4, r5, r6, pc}
 81013ec:	f855 3b04 	ldr.w	r3, [r5], #4
 81013f0:	4798      	blx	r3
 81013f2:	3601      	adds	r6, #1
 81013f4:	e7ee      	b.n	81013d4 <__libc_init_array+0xc>
 81013f6:	f855 3b04 	ldr.w	r3, [r5], #4
 81013fa:	4798      	blx	r3
 81013fc:	3601      	adds	r6, #1
 81013fe:	e7f2      	b.n	81013e6 <__libc_init_array+0x1e>
 8101400:	08101438 	.word	0x08101438
 8101404:	08101438 	.word	0x08101438
 8101408:	08101438 	.word	0x08101438
 810140c:	0810143c 	.word	0x0810143c

08101410 <_init>:
 8101410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101412:	bf00      	nop
 8101414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101416:	bc08      	pop	{r3}
 8101418:	469e      	mov	lr, r3
 810141a:	4770      	bx	lr

0810141c <_fini>:
 810141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810141e:	bf00      	nop
 8101420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101422:	bc08      	pop	{r3}
 8101424:	469e      	mov	lr, r3
 8101426:	4770      	bx	lr
