
stm32h747i-bootloader_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003528  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  081037c0  081037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081037d0  081037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081037d4  081037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  081037d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000550  10000010  081037e8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000560  081037e8  00020560  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ffd0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002569  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d78  00000000  00000000  00032580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c50  00000000  00000000  000332f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003f2f3  00000000  00000000  00033f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011566  00000000  00000000  0007323b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00195213  00000000  00000000  000847a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  002199b4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000036cc  00000000  00000000  00219a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081037a8 	.word	0x081037a8

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	081037a8 	.word	0x081037a8

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b1e      	ldr	r3, [pc, #120]	; (8100388 <main+0x80>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a1c      	ldr	r2, [pc, #112]	; (8100388 <main+0x80>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b1a      	ldr	r3, [pc, #104]	; (8100388 <main+0x80>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 fdf5 	bl	8100f1c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 ffc7 	bl	81012c4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 ff48 	bl	81011d0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b12      	ldr	r3, [pc, #72]	; (810038c <main+0x84>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b10      	ldr	r3, [pc, #64]	; (8100390 <main+0x88>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a0e      	ldr	r2, [pc, #56]	; (8100390 <main+0x88>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b0b      	ldr	r3, [pc, #44]	; (8100390 <main+0x88>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a0a      	ldr	r2, [pc, #40]	; (8100390 <main+0x88>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 fa54 	bl	810081c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 8100374:	f000 f814 	bl	81003a0 <MX_RTC_Init>
  MX_USB_OTG_HS_PCD_Init();
 8100378:	f000 f8d6 	bl	8100528 <MX_USB_OTG_HS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 810037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100380:	f000 fb00 	bl	8100984 <HAL_Delay>
 8100384:	e7fa      	b.n	810037c <main+0x74>
 8100386:	bf00      	nop
 8100388:	58024400 	.word	0x58024400
 810038c:	e000ed00 	.word	0xe000ed00
 8100390:	58026400 	.word	0x58026400

08100394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100394:	b480      	push	{r7}
 8100396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100398:	b672      	cpsid	i
}
 810039a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810039c:	e7fe      	b.n	810039c <Error_Handler+0x8>
	...

081003a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 81003a0:	b580      	push	{r7, lr}
 81003a2:	b08a      	sub	sp, #40	; 0x28
 81003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 81003a6:	463b      	mov	r3, r7
 81003a8:	2228      	movs	r2, #40	; 0x28
 81003aa:	2100      	movs	r1, #0
 81003ac:	4618      	mov	r0, r3
 81003ae:	f003 f9f3 	bl	8103798 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 81003b2:	4b20      	ldr	r3, [pc, #128]	; (8100434 <MX_RTC_Init+0x94>)
 81003b4:	4a20      	ldr	r2, [pc, #128]	; (8100438 <MX_RTC_Init+0x98>)
 81003b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 81003b8:	4b1e      	ldr	r3, [pc, #120]	; (8100434 <MX_RTC_Init+0x94>)
 81003ba:	2200      	movs	r2, #0
 81003bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 81003be:	4b1d      	ldr	r3, [pc, #116]	; (8100434 <MX_RTC_Init+0x94>)
 81003c0:	227f      	movs	r2, #127	; 0x7f
 81003c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 81003c4:	4b1b      	ldr	r3, [pc, #108]	; (8100434 <MX_RTC_Init+0x94>)
 81003c6:	22ff      	movs	r2, #255	; 0xff
 81003c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 81003ca:	4b1a      	ldr	r3, [pc, #104]	; (8100434 <MX_RTC_Init+0x94>)
 81003cc:	2200      	movs	r2, #0
 81003ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 81003d0:	4b18      	ldr	r3, [pc, #96]	; (8100434 <MX_RTC_Init+0x94>)
 81003d2:	2200      	movs	r2, #0
 81003d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 81003d6:	4b17      	ldr	r3, [pc, #92]	; (8100434 <MX_RTC_Init+0x94>)
 81003d8:	2200      	movs	r2, #0
 81003da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 81003dc:	4b15      	ldr	r3, [pc, #84]	; (8100434 <MX_RTC_Init+0x94>)
 81003de:	2200      	movs	r2, #0
 81003e0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 81003e2:	4814      	ldr	r0, [pc, #80]	; (8100434 <MX_RTC_Init+0x94>)
 81003e4:	f002 fcb4 	bl	8102d50 <HAL_RTC_Init>
 81003e8:	4603      	mov	r3, r0
 81003ea:	2b00      	cmp	r3, #0
 81003ec:	d001      	beq.n	81003f2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 81003ee:	f7ff ffd1 	bl	8100394 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 81003f2:	2301      	movs	r3, #1
 81003f4:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 81003f6:	2301      	movs	r3, #1
 81003f8:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 81003fa:	2300      	movs	r3, #0
 81003fc:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 81003fe:	2300      	movs	r3, #0
 8100400:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100402:	2300      	movs	r3, #0
 8100404:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100406:	2300      	movs	r3, #0
 8100408:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 810040a:	2300      	movs	r3, #0
 810040c:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 810040e:	2300      	movs	r3, #0
 8100410:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100412:	2380      	movs	r3, #128	; 0x80
 8100414:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100416:	463b      	mov	r3, r7
 8100418:	4619      	mov	r1, r3
 810041a:	4806      	ldr	r0, [pc, #24]	; (8100434 <MX_RTC_Init+0x94>)
 810041c:	f002 fdb0 	bl	8102f80 <HAL_RTCEx_SetTamper>
 8100420:	4603      	mov	r3, r0
 8100422:	2b00      	cmp	r3, #0
 8100424:	d001      	beq.n	810042a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100426:	f7ff ffb5 	bl	8100394 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 810042a:	bf00      	nop
 810042c:	3728      	adds	r7, #40	; 0x28
 810042e:	46bd      	mov	sp, r7
 8100430:	bd80      	pop	{r7, pc}
 8100432:	bf00      	nop
 8100434:	1000002c 	.word	0x1000002c
 8100438:	58004000 	.word	0x58004000

0810043c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 810043c:	b580      	push	{r7, lr}
 810043e:	b0b4      	sub	sp, #208	; 0xd0
 8100440:	af00      	add	r7, sp, #0
 8100442:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100444:	f107 0308 	add.w	r3, r7, #8
 8100448:	22c8      	movs	r2, #200	; 0xc8
 810044a:	2100      	movs	r1, #0
 810044c:	4618      	mov	r0, r3
 810044e:	f003 f9a3 	bl	8103798 <memset>
  if(rtcHandle->Instance==RTC)
 8100452:	687b      	ldr	r3, [r7, #4]
 8100454:	681b      	ldr	r3, [r3, #0]
 8100456:	4a10      	ldr	r2, [pc, #64]	; (8100498 <HAL_RTC_MspInit+0x5c>)
 8100458:	4293      	cmp	r3, r2
 810045a:	d119      	bne.n	8100490 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 810045c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100460:	f04f 0300 	mov.w	r3, #0
 8100464:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100468:	f44f 7300 	mov.w	r3, #512	; 0x200
 810046c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100470:	f107 0308 	add.w	r3, r7, #8
 8100474:	4618      	mov	r0, r3
 8100476:	f001 f8bd 	bl	81015f4 <HAL_RCCEx_PeriphCLKConfig>
 810047a:	4603      	mov	r3, r0
 810047c:	2b00      	cmp	r3, #0
 810047e:	d001      	beq.n	8100484 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8100480:	f7ff ff88 	bl	8100394 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8100484:	4b05      	ldr	r3, [pc, #20]	; (810049c <HAL_RTC_MspInit+0x60>)
 8100486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100488:	4a04      	ldr	r2, [pc, #16]	; (810049c <HAL_RTC_MspInit+0x60>)
 810048a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810048e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8100490:	bf00      	nop
 8100492:	37d0      	adds	r7, #208	; 0xd0
 8100494:	46bd      	mov	sp, r7
 8100496:	bd80      	pop	{r7, pc}
 8100498:	58004000 	.word	0x58004000
 810049c:	58024400 	.word	0x58024400

081004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81004a0:	b480      	push	{r7}
 81004a2:	b083      	sub	sp, #12
 81004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81004a6:	4b0a      	ldr	r3, [pc, #40]	; (81004d0 <HAL_MspInit+0x30>)
 81004a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004ac:	4a08      	ldr	r2, [pc, #32]	; (81004d0 <HAL_MspInit+0x30>)
 81004ae:	f043 0302 	orr.w	r3, r3, #2
 81004b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81004b6:	4b06      	ldr	r3, [pc, #24]	; (81004d0 <HAL_MspInit+0x30>)
 81004b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004bc:	f003 0302 	and.w	r3, r3, #2
 81004c0:	607b      	str	r3, [r7, #4]
 81004c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81004c4:	bf00      	nop
 81004c6:	370c      	adds	r7, #12
 81004c8:	46bd      	mov	sp, r7
 81004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004ce:	4770      	bx	lr
 81004d0:	58024400 	.word	0x58024400

081004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81004d4:	b480      	push	{r7}
 81004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81004d8:	e7fe      	b.n	81004d8 <NMI_Handler+0x4>

081004da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81004da:	b480      	push	{r7}
 81004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81004de:	e7fe      	b.n	81004de <HardFault_Handler+0x4>

081004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81004e0:	b480      	push	{r7}
 81004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81004e4:	e7fe      	b.n	81004e4 <MemManage_Handler+0x4>

081004e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81004e6:	b480      	push	{r7}
 81004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81004ea:	e7fe      	b.n	81004ea <BusFault_Handler+0x4>

081004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81004ec:	b480      	push	{r7}
 81004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81004f0:	e7fe      	b.n	81004f0 <UsageFault_Handler+0x4>

081004f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81004f2:	b480      	push	{r7}
 81004f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81004f6:	bf00      	nop
 81004f8:	46bd      	mov	sp, r7
 81004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004fe:	4770      	bx	lr

08100500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100500:	b480      	push	{r7}
 8100502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100504:	bf00      	nop
 8100506:	46bd      	mov	sp, r7
 8100508:	f85d 7b04 	ldr.w	r7, [sp], #4
 810050c:	4770      	bx	lr

0810050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810050e:	b480      	push	{r7}
 8100510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100512:	bf00      	nop
 8100514:	46bd      	mov	sp, r7
 8100516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810051a:	4770      	bx	lr

0810051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810051c:	b580      	push	{r7, lr}
 810051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100520:	f000 fa10 	bl	8100944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100524:	bf00      	nop
 8100526:	bd80      	pop	{r7, pc}

08100528 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8100528:	b580      	push	{r7, lr}
 810052a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 810052c:	4b15      	ldr	r3, [pc, #84]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810052e:	4a16      	ldr	r2, [pc, #88]	; (8100588 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8100530:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8100532:	4b14      	ldr	r3, [pc, #80]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100534:	2209      	movs	r2, #9
 8100536:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8100538:	4b12      	ldr	r3, [pc, #72]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810053a:	2200      	movs	r2, #0
 810053c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 810053e:	4b11      	ldr	r3, [pc, #68]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100540:	2200      	movs	r2, #0
 8100542:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8100544:	4b0f      	ldr	r3, [pc, #60]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100546:	2201      	movs	r2, #1
 8100548:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 810054a:	4b0e      	ldr	r3, [pc, #56]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810054c:	2200      	movs	r2, #0
 810054e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8100550:	4b0c      	ldr	r3, [pc, #48]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100552:	2200      	movs	r2, #0
 8100554:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8100556:	4b0b      	ldr	r3, [pc, #44]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100558:	2200      	movs	r2, #0
 810055a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 810055c:	4b09      	ldr	r3, [pc, #36]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810055e:	2200      	movs	r2, #0
 8100560:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8100562:	4b08      	ldr	r3, [pc, #32]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100564:	2200      	movs	r2, #0
 8100566:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8100568:	4b06      	ldr	r3, [pc, #24]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810056a:	2200      	movs	r2, #0
 810056c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 810056e:	4805      	ldr	r0, [pc, #20]	; (8100584 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100570:	f000 fce6 	bl	8100f40 <HAL_PCD_Init>
 8100574:	4603      	mov	r3, r0
 8100576:	2b00      	cmp	r3, #0
 8100578:	d001      	beq.n	810057e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 810057a:	f7ff ff0b 	bl	8100394 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 810057e:	bf00      	nop
 8100580:	bd80      	pop	{r7, pc}
 8100582:	bf00      	nop
 8100584:	10000050 	.word	0x10000050
 8100588:	40040000 	.word	0x40040000

0810058c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 810058c:	b580      	push	{r7, lr}
 810058e:	b0c2      	sub	sp, #264	; 0x108
 8100590:	af00      	add	r7, sp, #0
 8100592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8100596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 810059a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810059c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 81005a0:	2200      	movs	r2, #0
 81005a2:	601a      	str	r2, [r3, #0]
 81005a4:	605a      	str	r2, [r3, #4]
 81005a6:	609a      	str	r2, [r3, #8]
 81005a8:	60da      	str	r2, [r3, #12]
 81005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81005ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81005b0:	22c8      	movs	r2, #200	; 0xc8
 81005b2:	2100      	movs	r1, #0
 81005b4:	4618      	mov	r0, r3
 81005b6:	f003 f8ef 	bl	8103798 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 81005ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 81005be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 81005c2:	681b      	ldr	r3, [r3, #0]
 81005c4:	681b      	ldr	r3, [r3, #0]
 81005c6:	4a79      	ldr	r2, [pc, #484]	; (81007ac <HAL_PCD_MspInit+0x220>)
 81005c8:	4293      	cmp	r3, r2
 81005ca:	f040 80ea 	bne.w	81007a2 <HAL_PCD_MspInit+0x216>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81005ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 81005d2:	f04f 0300 	mov.w	r3, #0
 81005d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 81005da:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 81005de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81005e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81005e6:	4618      	mov	r0, r3
 81005e8:	f001 f804 	bl	81015f4 <HAL_RCCEx_PeriphCLKConfig>
 81005ec:	4603      	mov	r3, r0
 81005ee:	2b00      	cmp	r3, #0
 81005f0:	d001      	beq.n	81005f6 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 81005f2:	f7ff fecf 	bl	8100394 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 81005f6:	f000 fe73 	bl	81012e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81005fa:	4b6d      	ldr	r3, [pc, #436]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 81005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100600:	4a6b      	ldr	r2, [pc, #428]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100602:	f043 0302 	orr.w	r3, r3, #2
 8100606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810060a:	4b69      	ldr	r3, [pc, #420]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 810060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100610:	f003 0302 	and.w	r3, r3, #2
 8100614:	627b      	str	r3, [r7, #36]	; 0x24
 8100616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8100618:	4b65      	ldr	r3, [pc, #404]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 810061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810061e:	4a64      	ldr	r2, [pc, #400]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100628:	4b61      	ldr	r3, [pc, #388]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 810062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810062e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100632:	623b      	str	r3, [r7, #32]
 8100634:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100636:	4b5e      	ldr	r3, [pc, #376]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810063c:	4a5c      	ldr	r2, [pc, #368]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 810063e:	f043 0304 	orr.w	r3, r3, #4
 8100642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100646:	4b5a      	ldr	r3, [pc, #360]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810064c:	f003 0304 	and.w	r3, r3, #4
 8100650:	61fb      	str	r3, [r7, #28]
 8100652:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100654:	4b56      	ldr	r3, [pc, #344]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810065a:	4a55      	ldr	r2, [pc, #340]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 810065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100664:	4b52      	ldr	r3, [pc, #328]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810066e:	61bb      	str	r3, [r7, #24]
 8100670:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100672:	4b4f      	ldr	r3, [pc, #316]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100678:	4a4d      	ldr	r2, [pc, #308]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 810067a:	f043 0301 	orr.w	r3, r3, #1
 810067e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100682:	4b4b      	ldr	r3, [pc, #300]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100688:	f003 0301 	and.w	r3, r3, #1
 810068c:	617b      	str	r3, [r7, #20]
 810068e:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8100690:	f643 4323 	movw	r3, #15395	; 0x3c23
 8100694:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100698:	2302      	movs	r3, #2
 810069a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810069e:	2300      	movs	r3, #0
 81006a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81006a4:	2302      	movs	r3, #2
 81006a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81006aa:	230a      	movs	r3, #10
 81006ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81006b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 81006b4:	4619      	mov	r1, r3
 81006b6:	483f      	ldr	r0, [pc, #252]	; (81007b4 <HAL_PCD_MspInit+0x228>)
 81006b8:	f000 fa80 	bl	8100bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 81006bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81006c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006c4:	2302      	movs	r3, #2
 81006c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ca:	2300      	movs	r3, #0
 81006cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81006d0:	2302      	movs	r3, #2
 81006d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81006d6:	230a      	movs	r3, #10
 81006d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 81006dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 81006e0:	4619      	mov	r1, r3
 81006e2:	4835      	ldr	r0, [pc, #212]	; (81007b8 <HAL_PCD_MspInit+0x22c>)
 81006e4:	f000 fa6a 	bl	8100bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 81006e8:	2301      	movs	r3, #1
 81006ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006ee:	2302      	movs	r3, #2
 81006f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006f4:	2300      	movs	r3, #0
 81006f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81006fa:	2302      	movs	r3, #2
 81006fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8100700:	230a      	movs	r3, #10
 8100702:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8100706:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 810070a:	4619      	mov	r1, r3
 810070c:	482b      	ldr	r0, [pc, #172]	; (81007bc <HAL_PCD_MspInit+0x230>)
 810070e:	f000 fa55 	bl	8100bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8100712:	2310      	movs	r3, #16
 8100714:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100718:	2302      	movs	r3, #2
 810071a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810071e:	2300      	movs	r3, #0
 8100720:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100724:	2302      	movs	r3, #2
 8100726:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810072a:	230a      	movs	r3, #10
 810072c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8100730:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8100734:	4619      	mov	r1, r3
 8100736:	4822      	ldr	r0, [pc, #136]	; (81007c0 <HAL_PCD_MspInit+0x234>)
 8100738:	f000 fa40 	bl	8100bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 810073c:	2328      	movs	r3, #40	; 0x28
 810073e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100742:	2302      	movs	r3, #2
 8100744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100748:	2300      	movs	r3, #0
 810074a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810074e:	2302      	movs	r3, #2
 8100750:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8100754:	230a      	movs	r3, #10
 8100756:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810075a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 810075e:	4619      	mov	r1, r3
 8100760:	4818      	ldr	r0, [pc, #96]	; (81007c4 <HAL_PCD_MspInit+0x238>)
 8100762:	f000 fa2b 	bl	8100bbc <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8100766:	4b12      	ldr	r3, [pc, #72]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810076c:	4a10      	ldr	r2, [pc, #64]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 810076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100772:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100776:	4b0e      	ldr	r3, [pc, #56]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810077c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100780:	613b      	str	r3, [r7, #16]
 8100782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8100784:	4b0a      	ldr	r3, [pc, #40]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100786:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810078a:	4a09      	ldr	r2, [pc, #36]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 810078c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8100790:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100794:	4b06      	ldr	r3, [pc, #24]	; (81007b0 <HAL_PCD_MspInit+0x224>)
 8100796:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810079a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810079e:	60fb      	str	r3, [r7, #12]
 81007a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 81007a2:	bf00      	nop
 81007a4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 81007a8:	46bd      	mov	sp, r7
 81007aa:	bd80      	pop	{r7, pc}
 81007ac:	40040000 	.word	0x40040000
 81007b0:	58024400 	.word	0x58024400
 81007b4:	58020400 	.word	0x58020400
 81007b8:	58022000 	.word	0x58022000
 81007bc:	58020800 	.word	0x58020800
 81007c0:	58021c00 	.word	0x58021c00
 81007c4:	58020000 	.word	0x58020000

081007c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81007c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100800 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81007cc:	f7ff fd84 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81007d0:	480c      	ldr	r0, [pc, #48]	; (8100804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81007d2:	490d      	ldr	r1, [pc, #52]	; (8100808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81007d4:	4a0d      	ldr	r2, [pc, #52]	; (810080c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81007d8:	e002      	b.n	81007e0 <LoopCopyDataInit>

081007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81007de:	3304      	adds	r3, #4

081007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81007e4:	d3f9      	bcc.n	81007da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81007e6:	4a0a      	ldr	r2, [pc, #40]	; (8100810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81007e8:	4c0a      	ldr	r4, [pc, #40]	; (8100814 <LoopFillZerobss+0x22>)
  movs r3, #0
 81007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 81007ec:	e001      	b.n	81007f2 <LoopFillZerobss>

081007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81007f0:	3204      	adds	r2, #4

081007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81007f4:	d3fb      	bcc.n	81007ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81007f6:	f002 ffab 	bl	8103750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81007fa:	f7ff fd85 	bl	8100308 <main>
  bx  lr
 81007fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100800:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100804:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100808:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 810080c:	081037d8 	.word	0x081037d8
  ldr r2, =_sbss
 8100810:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100814:	10000560 	.word	0x10000560

08100818 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100818:	e7fe      	b.n	8100818 <ADC3_IRQHandler>
	...

0810081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810081c:	b580      	push	{r7, lr}
 810081e:	b082      	sub	sp, #8
 8100820:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100822:	4b28      	ldr	r3, [pc, #160]	; (81008c4 <HAL_Init+0xa8>)
 8100824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100828:	4a26      	ldr	r2, [pc, #152]	; (81008c4 <HAL_Init+0xa8>)
 810082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810082e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100832:	4b24      	ldr	r3, [pc, #144]	; (81008c4 <HAL_Init+0xa8>)
 8100834:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810083c:	603b      	str	r3, [r7, #0]
 810083e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100840:	4b21      	ldr	r3, [pc, #132]	; (81008c8 <HAL_Init+0xac>)
 8100842:	681b      	ldr	r3, [r3, #0]
 8100844:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100848:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810084c:	4a1e      	ldr	r2, [pc, #120]	; (81008c8 <HAL_Init+0xac>)
 810084e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100852:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100854:	4b1c      	ldr	r3, [pc, #112]	; (81008c8 <HAL_Init+0xac>)
 8100856:	681b      	ldr	r3, [r3, #0]
 8100858:	4a1b      	ldr	r2, [pc, #108]	; (81008c8 <HAL_Init+0xac>)
 810085a:	f043 0301 	orr.w	r3, r3, #1
 810085e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100860:	2003      	movs	r0, #3
 8100862:	f000 f965 	bl	8100b30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100866:	f000 fd4b 	bl	8101300 <HAL_RCC_GetSysClockFreq>
 810086a:	4602      	mov	r2, r0
 810086c:	4b15      	ldr	r3, [pc, #84]	; (81008c4 <HAL_Init+0xa8>)
 810086e:	699b      	ldr	r3, [r3, #24]
 8100870:	0a1b      	lsrs	r3, r3, #8
 8100872:	f003 030f 	and.w	r3, r3, #15
 8100876:	4915      	ldr	r1, [pc, #84]	; (81008cc <HAL_Init+0xb0>)
 8100878:	5ccb      	ldrb	r3, [r1, r3]
 810087a:	f003 031f 	and.w	r3, r3, #31
 810087e:	fa22 f303 	lsr.w	r3, r2, r3
 8100882:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100884:	4b0f      	ldr	r3, [pc, #60]	; (81008c4 <HAL_Init+0xa8>)
 8100886:	699b      	ldr	r3, [r3, #24]
 8100888:	f003 030f 	and.w	r3, r3, #15
 810088c:	4a0f      	ldr	r2, [pc, #60]	; (81008cc <HAL_Init+0xb0>)
 810088e:	5cd3      	ldrb	r3, [r2, r3]
 8100890:	f003 031f 	and.w	r3, r3, #31
 8100894:	687a      	ldr	r2, [r7, #4]
 8100896:	fa22 f303 	lsr.w	r3, r2, r3
 810089a:	4a0d      	ldr	r2, [pc, #52]	; (81008d0 <HAL_Init+0xb4>)
 810089c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810089e:	4b0c      	ldr	r3, [pc, #48]	; (81008d0 <HAL_Init+0xb4>)
 81008a0:	681b      	ldr	r3, [r3, #0]
 81008a2:	4a0c      	ldr	r2, [pc, #48]	; (81008d4 <HAL_Init+0xb8>)
 81008a4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81008a6:	2000      	movs	r0, #0
 81008a8:	f000 f816 	bl	81008d8 <HAL_InitTick>
 81008ac:	4603      	mov	r3, r0
 81008ae:	2b00      	cmp	r3, #0
 81008b0:	d001      	beq.n	81008b6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81008b2:	2301      	movs	r3, #1
 81008b4:	e002      	b.n	81008bc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81008b6:	f7ff fdf3 	bl	81004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81008ba:	2300      	movs	r3, #0
}
 81008bc:	4618      	mov	r0, r3
 81008be:	3708      	adds	r7, #8
 81008c0:	46bd      	mov	sp, r7
 81008c2:	bd80      	pop	{r7, pc}
 81008c4:	58024400 	.word	0x58024400
 81008c8:	40024400 	.word	0x40024400
 81008cc:	081037c0 	.word	0x081037c0
 81008d0:	10000004 	.word	0x10000004
 81008d4:	10000000 	.word	0x10000000

081008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81008d8:	b580      	push	{r7, lr}
 81008da:	b082      	sub	sp, #8
 81008dc:	af00      	add	r7, sp, #0
 81008de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81008e0:	4b15      	ldr	r3, [pc, #84]	; (8100938 <HAL_InitTick+0x60>)
 81008e2:	781b      	ldrb	r3, [r3, #0]
 81008e4:	2b00      	cmp	r3, #0
 81008e6:	d101      	bne.n	81008ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81008e8:	2301      	movs	r3, #1
 81008ea:	e021      	b.n	8100930 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81008ec:	4b13      	ldr	r3, [pc, #76]	; (810093c <HAL_InitTick+0x64>)
 81008ee:	681a      	ldr	r2, [r3, #0]
 81008f0:	4b11      	ldr	r3, [pc, #68]	; (8100938 <HAL_InitTick+0x60>)
 81008f2:	781b      	ldrb	r3, [r3, #0]
 81008f4:	4619      	mov	r1, r3
 81008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81008fa:	fbb3 f3f1 	udiv	r3, r3, r1
 81008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8100902:	4618      	mov	r0, r3
 8100904:	f000 f939 	bl	8100b7a <HAL_SYSTICK_Config>
 8100908:	4603      	mov	r3, r0
 810090a:	2b00      	cmp	r3, #0
 810090c:	d001      	beq.n	8100912 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810090e:	2301      	movs	r3, #1
 8100910:	e00e      	b.n	8100930 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100912:	687b      	ldr	r3, [r7, #4]
 8100914:	2b0f      	cmp	r3, #15
 8100916:	d80a      	bhi.n	810092e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100918:	2200      	movs	r2, #0
 810091a:	6879      	ldr	r1, [r7, #4]
 810091c:	f04f 30ff 	mov.w	r0, #4294967295
 8100920:	f000 f911 	bl	8100b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100924:	4a06      	ldr	r2, [pc, #24]	; (8100940 <HAL_InitTick+0x68>)
 8100926:	687b      	ldr	r3, [r7, #4]
 8100928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810092a:	2300      	movs	r3, #0
 810092c:	e000      	b.n	8100930 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810092e:	2301      	movs	r3, #1
}
 8100930:	4618      	mov	r0, r3
 8100932:	3708      	adds	r7, #8
 8100934:	46bd      	mov	sp, r7
 8100936:	bd80      	pop	{r7, pc}
 8100938:	1000000c 	.word	0x1000000c
 810093c:	10000000 	.word	0x10000000
 8100940:	10000008 	.word	0x10000008

08100944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100944:	b480      	push	{r7}
 8100946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100948:	4b06      	ldr	r3, [pc, #24]	; (8100964 <HAL_IncTick+0x20>)
 810094a:	781b      	ldrb	r3, [r3, #0]
 810094c:	461a      	mov	r2, r3
 810094e:	4b06      	ldr	r3, [pc, #24]	; (8100968 <HAL_IncTick+0x24>)
 8100950:	681b      	ldr	r3, [r3, #0]
 8100952:	4413      	add	r3, r2
 8100954:	4a04      	ldr	r2, [pc, #16]	; (8100968 <HAL_IncTick+0x24>)
 8100956:	6013      	str	r3, [r2, #0]
}
 8100958:	bf00      	nop
 810095a:	46bd      	mov	sp, r7
 810095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100960:	4770      	bx	lr
 8100962:	bf00      	nop
 8100964:	1000000c 	.word	0x1000000c
 8100968:	1000055c 	.word	0x1000055c

0810096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810096c:	b480      	push	{r7}
 810096e:	af00      	add	r7, sp, #0
  return uwTick;
 8100970:	4b03      	ldr	r3, [pc, #12]	; (8100980 <HAL_GetTick+0x14>)
 8100972:	681b      	ldr	r3, [r3, #0]
}
 8100974:	4618      	mov	r0, r3
 8100976:	46bd      	mov	sp, r7
 8100978:	f85d 7b04 	ldr.w	r7, [sp], #4
 810097c:	4770      	bx	lr
 810097e:	bf00      	nop
 8100980:	1000055c 	.word	0x1000055c

08100984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100984:	b580      	push	{r7, lr}
 8100986:	b084      	sub	sp, #16
 8100988:	af00      	add	r7, sp, #0
 810098a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810098c:	f7ff ffee 	bl	810096c <HAL_GetTick>
 8100990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100992:	687b      	ldr	r3, [r7, #4]
 8100994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100996:	68fb      	ldr	r3, [r7, #12]
 8100998:	f1b3 3fff 	cmp.w	r3, #4294967295
 810099c:	d005      	beq.n	81009aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810099e:	4b0a      	ldr	r3, [pc, #40]	; (81009c8 <HAL_Delay+0x44>)
 81009a0:	781b      	ldrb	r3, [r3, #0]
 81009a2:	461a      	mov	r2, r3
 81009a4:	68fb      	ldr	r3, [r7, #12]
 81009a6:	4413      	add	r3, r2
 81009a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81009aa:	bf00      	nop
 81009ac:	f7ff ffde 	bl	810096c <HAL_GetTick>
 81009b0:	4602      	mov	r2, r0
 81009b2:	68bb      	ldr	r3, [r7, #8]
 81009b4:	1ad3      	subs	r3, r2, r3
 81009b6:	68fa      	ldr	r2, [r7, #12]
 81009b8:	429a      	cmp	r2, r3
 81009ba:	d8f7      	bhi.n	81009ac <HAL_Delay+0x28>
  {
  }
}
 81009bc:	bf00      	nop
 81009be:	bf00      	nop
 81009c0:	3710      	adds	r7, #16
 81009c2:	46bd      	mov	sp, r7
 81009c4:	bd80      	pop	{r7, pc}
 81009c6:	bf00      	nop
 81009c8:	1000000c 	.word	0x1000000c

081009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81009cc:	b480      	push	{r7}
 81009ce:	b085      	sub	sp, #20
 81009d0:	af00      	add	r7, sp, #0
 81009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81009d4:	687b      	ldr	r3, [r7, #4]
 81009d6:	f003 0307 	and.w	r3, r3, #7
 81009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81009dc:	4b0c      	ldr	r3, [pc, #48]	; (8100a10 <__NVIC_SetPriorityGrouping+0x44>)
 81009de:	68db      	ldr	r3, [r3, #12]
 81009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81009e2:	68ba      	ldr	r2, [r7, #8]
 81009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81009e8:	4013      	ands	r3, r2
 81009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81009ec:	68fb      	ldr	r3, [r7, #12]
 81009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81009f0:	68bb      	ldr	r3, [r7, #8]
 81009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81009fe:	4a04      	ldr	r2, [pc, #16]	; (8100a10 <__NVIC_SetPriorityGrouping+0x44>)
 8100a00:	68bb      	ldr	r3, [r7, #8]
 8100a02:	60d3      	str	r3, [r2, #12]
}
 8100a04:	bf00      	nop
 8100a06:	3714      	adds	r7, #20
 8100a08:	46bd      	mov	sp, r7
 8100a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a0e:	4770      	bx	lr
 8100a10:	e000ed00 	.word	0xe000ed00

08100a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100a14:	b480      	push	{r7}
 8100a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100a18:	4b04      	ldr	r3, [pc, #16]	; (8100a2c <__NVIC_GetPriorityGrouping+0x18>)
 8100a1a:	68db      	ldr	r3, [r3, #12]
 8100a1c:	0a1b      	lsrs	r3, r3, #8
 8100a1e:	f003 0307 	and.w	r3, r3, #7
}
 8100a22:	4618      	mov	r0, r3
 8100a24:	46bd      	mov	sp, r7
 8100a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a2a:	4770      	bx	lr
 8100a2c:	e000ed00 	.word	0xe000ed00

08100a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100a30:	b480      	push	{r7}
 8100a32:	b083      	sub	sp, #12
 8100a34:	af00      	add	r7, sp, #0
 8100a36:	4603      	mov	r3, r0
 8100a38:	6039      	str	r1, [r7, #0]
 8100a3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a40:	2b00      	cmp	r3, #0
 8100a42:	db0a      	blt.n	8100a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a44:	683b      	ldr	r3, [r7, #0]
 8100a46:	b2da      	uxtb	r2, r3
 8100a48:	490c      	ldr	r1, [pc, #48]	; (8100a7c <__NVIC_SetPriority+0x4c>)
 8100a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a4e:	0112      	lsls	r2, r2, #4
 8100a50:	b2d2      	uxtb	r2, r2
 8100a52:	440b      	add	r3, r1
 8100a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100a58:	e00a      	b.n	8100a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a5a:	683b      	ldr	r3, [r7, #0]
 8100a5c:	b2da      	uxtb	r2, r3
 8100a5e:	4908      	ldr	r1, [pc, #32]	; (8100a80 <__NVIC_SetPriority+0x50>)
 8100a60:	88fb      	ldrh	r3, [r7, #6]
 8100a62:	f003 030f 	and.w	r3, r3, #15
 8100a66:	3b04      	subs	r3, #4
 8100a68:	0112      	lsls	r2, r2, #4
 8100a6a:	b2d2      	uxtb	r2, r2
 8100a6c:	440b      	add	r3, r1
 8100a6e:	761a      	strb	r2, [r3, #24]
}
 8100a70:	bf00      	nop
 8100a72:	370c      	adds	r7, #12
 8100a74:	46bd      	mov	sp, r7
 8100a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a7a:	4770      	bx	lr
 8100a7c:	e000e100 	.word	0xe000e100
 8100a80:	e000ed00 	.word	0xe000ed00

08100a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100a84:	b480      	push	{r7}
 8100a86:	b089      	sub	sp, #36	; 0x24
 8100a88:	af00      	add	r7, sp, #0
 8100a8a:	60f8      	str	r0, [r7, #12]
 8100a8c:	60b9      	str	r1, [r7, #8]
 8100a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100a90:	68fb      	ldr	r3, [r7, #12]
 8100a92:	f003 0307 	and.w	r3, r3, #7
 8100a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100a98:	69fb      	ldr	r3, [r7, #28]
 8100a9a:	f1c3 0307 	rsb	r3, r3, #7
 8100a9e:	2b04      	cmp	r3, #4
 8100aa0:	bf28      	it	cs
 8100aa2:	2304      	movcs	r3, #4
 8100aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100aa6:	69fb      	ldr	r3, [r7, #28]
 8100aa8:	3304      	adds	r3, #4
 8100aaa:	2b06      	cmp	r3, #6
 8100aac:	d902      	bls.n	8100ab4 <NVIC_EncodePriority+0x30>
 8100aae:	69fb      	ldr	r3, [r7, #28]
 8100ab0:	3b03      	subs	r3, #3
 8100ab2:	e000      	b.n	8100ab6 <NVIC_EncodePriority+0x32>
 8100ab4:	2300      	movs	r3, #0
 8100ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8100abc:	69bb      	ldr	r3, [r7, #24]
 8100abe:	fa02 f303 	lsl.w	r3, r2, r3
 8100ac2:	43da      	mvns	r2, r3
 8100ac4:	68bb      	ldr	r3, [r7, #8]
 8100ac6:	401a      	ands	r2, r3
 8100ac8:	697b      	ldr	r3, [r7, #20]
 8100aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100acc:	f04f 31ff 	mov.w	r1, #4294967295
 8100ad0:	697b      	ldr	r3, [r7, #20]
 8100ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8100ad6:	43d9      	mvns	r1, r3
 8100ad8:	687b      	ldr	r3, [r7, #4]
 8100ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100adc:	4313      	orrs	r3, r2
         );
}
 8100ade:	4618      	mov	r0, r3
 8100ae0:	3724      	adds	r7, #36	; 0x24
 8100ae2:	46bd      	mov	sp, r7
 8100ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ae8:	4770      	bx	lr
	...

08100aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100aec:	b580      	push	{r7, lr}
 8100aee:	b082      	sub	sp, #8
 8100af0:	af00      	add	r7, sp, #0
 8100af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100af4:	687b      	ldr	r3, [r7, #4]
 8100af6:	3b01      	subs	r3, #1
 8100af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100afc:	d301      	bcc.n	8100b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100afe:	2301      	movs	r3, #1
 8100b00:	e00f      	b.n	8100b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100b02:	4a0a      	ldr	r2, [pc, #40]	; (8100b2c <SysTick_Config+0x40>)
 8100b04:	687b      	ldr	r3, [r7, #4]
 8100b06:	3b01      	subs	r3, #1
 8100b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100b0a:	210f      	movs	r1, #15
 8100b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100b10:	f7ff ff8e 	bl	8100a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100b14:	4b05      	ldr	r3, [pc, #20]	; (8100b2c <SysTick_Config+0x40>)
 8100b16:	2200      	movs	r2, #0
 8100b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100b1a:	4b04      	ldr	r3, [pc, #16]	; (8100b2c <SysTick_Config+0x40>)
 8100b1c:	2207      	movs	r2, #7
 8100b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100b20:	2300      	movs	r3, #0
}
 8100b22:	4618      	mov	r0, r3
 8100b24:	3708      	adds	r7, #8
 8100b26:	46bd      	mov	sp, r7
 8100b28:	bd80      	pop	{r7, pc}
 8100b2a:	bf00      	nop
 8100b2c:	e000e010 	.word	0xe000e010

08100b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b30:	b580      	push	{r7, lr}
 8100b32:	b082      	sub	sp, #8
 8100b34:	af00      	add	r7, sp, #0
 8100b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100b38:	6878      	ldr	r0, [r7, #4]
 8100b3a:	f7ff ff47 	bl	81009cc <__NVIC_SetPriorityGrouping>
}
 8100b3e:	bf00      	nop
 8100b40:	3708      	adds	r7, #8
 8100b42:	46bd      	mov	sp, r7
 8100b44:	bd80      	pop	{r7, pc}

08100b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100b46:	b580      	push	{r7, lr}
 8100b48:	b086      	sub	sp, #24
 8100b4a:	af00      	add	r7, sp, #0
 8100b4c:	4603      	mov	r3, r0
 8100b4e:	60b9      	str	r1, [r7, #8]
 8100b50:	607a      	str	r2, [r7, #4]
 8100b52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100b54:	f7ff ff5e 	bl	8100a14 <__NVIC_GetPriorityGrouping>
 8100b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100b5a:	687a      	ldr	r2, [r7, #4]
 8100b5c:	68b9      	ldr	r1, [r7, #8]
 8100b5e:	6978      	ldr	r0, [r7, #20]
 8100b60:	f7ff ff90 	bl	8100a84 <NVIC_EncodePriority>
 8100b64:	4602      	mov	r2, r0
 8100b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100b6a:	4611      	mov	r1, r2
 8100b6c:	4618      	mov	r0, r3
 8100b6e:	f7ff ff5f 	bl	8100a30 <__NVIC_SetPriority>
}
 8100b72:	bf00      	nop
 8100b74:	3718      	adds	r7, #24
 8100b76:	46bd      	mov	sp, r7
 8100b78:	bd80      	pop	{r7, pc}

08100b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100b7a:	b580      	push	{r7, lr}
 8100b7c:	b082      	sub	sp, #8
 8100b7e:	af00      	add	r7, sp, #0
 8100b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100b82:	6878      	ldr	r0, [r7, #4]
 8100b84:	f7ff ffb2 	bl	8100aec <SysTick_Config>
 8100b88:	4603      	mov	r3, r0
}
 8100b8a:	4618      	mov	r0, r3
 8100b8c:	3708      	adds	r7, #8
 8100b8e:	46bd      	mov	sp, r7
 8100b90:	bd80      	pop	{r7, pc}
	...

08100b94 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100b94:	b480      	push	{r7}
 8100b96:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100b98:	4b07      	ldr	r3, [pc, #28]	; (8100bb8 <HAL_GetCurrentCPUID+0x24>)
 8100b9a:	681b      	ldr	r3, [r3, #0]
 8100b9c:	091b      	lsrs	r3, r3, #4
 8100b9e:	f003 030f 	and.w	r3, r3, #15
 8100ba2:	2b07      	cmp	r3, #7
 8100ba4:	d101      	bne.n	8100baa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100ba6:	2303      	movs	r3, #3
 8100ba8:	e000      	b.n	8100bac <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100baa:	2301      	movs	r3, #1
  }
}
 8100bac:	4618      	mov	r0, r3
 8100bae:	46bd      	mov	sp, r7
 8100bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop
 8100bb8:	e000ed00 	.word	0xe000ed00

08100bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100bbc:	b480      	push	{r7}
 8100bbe:	b089      	sub	sp, #36	; 0x24
 8100bc0:	af00      	add	r7, sp, #0
 8100bc2:	6078      	str	r0, [r7, #4]
 8100bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100bc6:	2300      	movs	r3, #0
 8100bc8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100bca:	4b89      	ldr	r3, [pc, #548]	; (8100df0 <HAL_GPIO_Init+0x234>)
 8100bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100bce:	e194      	b.n	8100efa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100bd0:	683b      	ldr	r3, [r7, #0]
 8100bd2:	681a      	ldr	r2, [r3, #0]
 8100bd4:	2101      	movs	r1, #1
 8100bd6:	69fb      	ldr	r3, [r7, #28]
 8100bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8100bdc:	4013      	ands	r3, r2
 8100bde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100be0:	693b      	ldr	r3, [r7, #16]
 8100be2:	2b00      	cmp	r3, #0
 8100be4:	f000 8186 	beq.w	8100ef4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100be8:	683b      	ldr	r3, [r7, #0]
 8100bea:	685b      	ldr	r3, [r3, #4]
 8100bec:	f003 0303 	and.w	r3, r3, #3
 8100bf0:	2b01      	cmp	r3, #1
 8100bf2:	d005      	beq.n	8100c00 <HAL_GPIO_Init+0x44>
 8100bf4:	683b      	ldr	r3, [r7, #0]
 8100bf6:	685b      	ldr	r3, [r3, #4]
 8100bf8:	f003 0303 	and.w	r3, r3, #3
 8100bfc:	2b02      	cmp	r3, #2
 8100bfe:	d130      	bne.n	8100c62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100c00:	687b      	ldr	r3, [r7, #4]
 8100c02:	689b      	ldr	r3, [r3, #8]
 8100c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100c06:	69fb      	ldr	r3, [r7, #28]
 8100c08:	005b      	lsls	r3, r3, #1
 8100c0a:	2203      	movs	r2, #3
 8100c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8100c10:	43db      	mvns	r3, r3
 8100c12:	69ba      	ldr	r2, [r7, #24]
 8100c14:	4013      	ands	r3, r2
 8100c16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100c18:	683b      	ldr	r3, [r7, #0]
 8100c1a:	68da      	ldr	r2, [r3, #12]
 8100c1c:	69fb      	ldr	r3, [r7, #28]
 8100c1e:	005b      	lsls	r3, r3, #1
 8100c20:	fa02 f303 	lsl.w	r3, r2, r3
 8100c24:	69ba      	ldr	r2, [r7, #24]
 8100c26:	4313      	orrs	r3, r2
 8100c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100c2a:	687b      	ldr	r3, [r7, #4]
 8100c2c:	69ba      	ldr	r2, [r7, #24]
 8100c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100c30:	687b      	ldr	r3, [r7, #4]
 8100c32:	685b      	ldr	r3, [r3, #4]
 8100c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100c36:	2201      	movs	r2, #1
 8100c38:	69fb      	ldr	r3, [r7, #28]
 8100c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c3e:	43db      	mvns	r3, r3
 8100c40:	69ba      	ldr	r2, [r7, #24]
 8100c42:	4013      	ands	r3, r2
 8100c44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100c46:	683b      	ldr	r3, [r7, #0]
 8100c48:	685b      	ldr	r3, [r3, #4]
 8100c4a:	091b      	lsrs	r3, r3, #4
 8100c4c:	f003 0201 	and.w	r2, r3, #1
 8100c50:	69fb      	ldr	r3, [r7, #28]
 8100c52:	fa02 f303 	lsl.w	r3, r2, r3
 8100c56:	69ba      	ldr	r2, [r7, #24]
 8100c58:	4313      	orrs	r3, r2
 8100c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100c5c:	687b      	ldr	r3, [r7, #4]
 8100c5e:	69ba      	ldr	r2, [r7, #24]
 8100c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100c62:	683b      	ldr	r3, [r7, #0]
 8100c64:	685b      	ldr	r3, [r3, #4]
 8100c66:	f003 0303 	and.w	r3, r3, #3
 8100c6a:	2b03      	cmp	r3, #3
 8100c6c:	d017      	beq.n	8100c9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100c6e:	687b      	ldr	r3, [r7, #4]
 8100c70:	68db      	ldr	r3, [r3, #12]
 8100c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100c74:	69fb      	ldr	r3, [r7, #28]
 8100c76:	005b      	lsls	r3, r3, #1
 8100c78:	2203      	movs	r2, #3
 8100c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c7e:	43db      	mvns	r3, r3
 8100c80:	69ba      	ldr	r2, [r7, #24]
 8100c82:	4013      	ands	r3, r2
 8100c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100c86:	683b      	ldr	r3, [r7, #0]
 8100c88:	689a      	ldr	r2, [r3, #8]
 8100c8a:	69fb      	ldr	r3, [r7, #28]
 8100c8c:	005b      	lsls	r3, r3, #1
 8100c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c92:	69ba      	ldr	r2, [r7, #24]
 8100c94:	4313      	orrs	r3, r2
 8100c96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100c98:	687b      	ldr	r3, [r7, #4]
 8100c9a:	69ba      	ldr	r2, [r7, #24]
 8100c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100c9e:	683b      	ldr	r3, [r7, #0]
 8100ca0:	685b      	ldr	r3, [r3, #4]
 8100ca2:	f003 0303 	and.w	r3, r3, #3
 8100ca6:	2b02      	cmp	r3, #2
 8100ca8:	d123      	bne.n	8100cf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100caa:	69fb      	ldr	r3, [r7, #28]
 8100cac:	08da      	lsrs	r2, r3, #3
 8100cae:	687b      	ldr	r3, [r7, #4]
 8100cb0:	3208      	adds	r2, #8
 8100cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100cb8:	69fb      	ldr	r3, [r7, #28]
 8100cba:	f003 0307 	and.w	r3, r3, #7
 8100cbe:	009b      	lsls	r3, r3, #2
 8100cc0:	220f      	movs	r2, #15
 8100cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8100cc6:	43db      	mvns	r3, r3
 8100cc8:	69ba      	ldr	r2, [r7, #24]
 8100cca:	4013      	ands	r3, r2
 8100ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100cce:	683b      	ldr	r3, [r7, #0]
 8100cd0:	691a      	ldr	r2, [r3, #16]
 8100cd2:	69fb      	ldr	r3, [r7, #28]
 8100cd4:	f003 0307 	and.w	r3, r3, #7
 8100cd8:	009b      	lsls	r3, r3, #2
 8100cda:	fa02 f303 	lsl.w	r3, r2, r3
 8100cde:	69ba      	ldr	r2, [r7, #24]
 8100ce0:	4313      	orrs	r3, r2
 8100ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100ce4:	69fb      	ldr	r3, [r7, #28]
 8100ce6:	08da      	lsrs	r2, r3, #3
 8100ce8:	687b      	ldr	r3, [r7, #4]
 8100cea:	3208      	adds	r2, #8
 8100cec:	69b9      	ldr	r1, [r7, #24]
 8100cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100cf2:	687b      	ldr	r3, [r7, #4]
 8100cf4:	681b      	ldr	r3, [r3, #0]
 8100cf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100cf8:	69fb      	ldr	r3, [r7, #28]
 8100cfa:	005b      	lsls	r3, r3, #1
 8100cfc:	2203      	movs	r2, #3
 8100cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8100d02:	43db      	mvns	r3, r3
 8100d04:	69ba      	ldr	r2, [r7, #24]
 8100d06:	4013      	ands	r3, r2
 8100d08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100d0a:	683b      	ldr	r3, [r7, #0]
 8100d0c:	685b      	ldr	r3, [r3, #4]
 8100d0e:	f003 0203 	and.w	r2, r3, #3
 8100d12:	69fb      	ldr	r3, [r7, #28]
 8100d14:	005b      	lsls	r3, r3, #1
 8100d16:	fa02 f303 	lsl.w	r3, r2, r3
 8100d1a:	69ba      	ldr	r2, [r7, #24]
 8100d1c:	4313      	orrs	r3, r2
 8100d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100d20:	687b      	ldr	r3, [r7, #4]
 8100d22:	69ba      	ldr	r2, [r7, #24]
 8100d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100d26:	683b      	ldr	r3, [r7, #0]
 8100d28:	685b      	ldr	r3, [r3, #4]
 8100d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100d2e:	2b00      	cmp	r3, #0
 8100d30:	f000 80e0 	beq.w	8100ef4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d34:	4b2f      	ldr	r3, [pc, #188]	; (8100df4 <HAL_GPIO_Init+0x238>)
 8100d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d3a:	4a2e      	ldr	r2, [pc, #184]	; (8100df4 <HAL_GPIO_Init+0x238>)
 8100d3c:	f043 0302 	orr.w	r3, r3, #2
 8100d40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100d44:	4b2b      	ldr	r3, [pc, #172]	; (8100df4 <HAL_GPIO_Init+0x238>)
 8100d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d4a:	f003 0302 	and.w	r3, r3, #2
 8100d4e:	60fb      	str	r3, [r7, #12]
 8100d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100d52:	4a29      	ldr	r2, [pc, #164]	; (8100df8 <HAL_GPIO_Init+0x23c>)
 8100d54:	69fb      	ldr	r3, [r7, #28]
 8100d56:	089b      	lsrs	r3, r3, #2
 8100d58:	3302      	adds	r3, #2
 8100d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100d60:	69fb      	ldr	r3, [r7, #28]
 8100d62:	f003 0303 	and.w	r3, r3, #3
 8100d66:	009b      	lsls	r3, r3, #2
 8100d68:	220f      	movs	r2, #15
 8100d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8100d6e:	43db      	mvns	r3, r3
 8100d70:	69ba      	ldr	r2, [r7, #24]
 8100d72:	4013      	ands	r3, r2
 8100d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100d76:	687b      	ldr	r3, [r7, #4]
 8100d78:	4a20      	ldr	r2, [pc, #128]	; (8100dfc <HAL_GPIO_Init+0x240>)
 8100d7a:	4293      	cmp	r3, r2
 8100d7c:	d052      	beq.n	8100e24 <HAL_GPIO_Init+0x268>
 8100d7e:	687b      	ldr	r3, [r7, #4]
 8100d80:	4a1f      	ldr	r2, [pc, #124]	; (8100e00 <HAL_GPIO_Init+0x244>)
 8100d82:	4293      	cmp	r3, r2
 8100d84:	d031      	beq.n	8100dea <HAL_GPIO_Init+0x22e>
 8100d86:	687b      	ldr	r3, [r7, #4]
 8100d88:	4a1e      	ldr	r2, [pc, #120]	; (8100e04 <HAL_GPIO_Init+0x248>)
 8100d8a:	4293      	cmp	r3, r2
 8100d8c:	d02b      	beq.n	8100de6 <HAL_GPIO_Init+0x22a>
 8100d8e:	687b      	ldr	r3, [r7, #4]
 8100d90:	4a1d      	ldr	r2, [pc, #116]	; (8100e08 <HAL_GPIO_Init+0x24c>)
 8100d92:	4293      	cmp	r3, r2
 8100d94:	d025      	beq.n	8100de2 <HAL_GPIO_Init+0x226>
 8100d96:	687b      	ldr	r3, [r7, #4]
 8100d98:	4a1c      	ldr	r2, [pc, #112]	; (8100e0c <HAL_GPIO_Init+0x250>)
 8100d9a:	4293      	cmp	r3, r2
 8100d9c:	d01f      	beq.n	8100dde <HAL_GPIO_Init+0x222>
 8100d9e:	687b      	ldr	r3, [r7, #4]
 8100da0:	4a1b      	ldr	r2, [pc, #108]	; (8100e10 <HAL_GPIO_Init+0x254>)
 8100da2:	4293      	cmp	r3, r2
 8100da4:	d019      	beq.n	8100dda <HAL_GPIO_Init+0x21e>
 8100da6:	687b      	ldr	r3, [r7, #4]
 8100da8:	4a1a      	ldr	r2, [pc, #104]	; (8100e14 <HAL_GPIO_Init+0x258>)
 8100daa:	4293      	cmp	r3, r2
 8100dac:	d013      	beq.n	8100dd6 <HAL_GPIO_Init+0x21a>
 8100dae:	687b      	ldr	r3, [r7, #4]
 8100db0:	4a19      	ldr	r2, [pc, #100]	; (8100e18 <HAL_GPIO_Init+0x25c>)
 8100db2:	4293      	cmp	r3, r2
 8100db4:	d00d      	beq.n	8100dd2 <HAL_GPIO_Init+0x216>
 8100db6:	687b      	ldr	r3, [r7, #4]
 8100db8:	4a18      	ldr	r2, [pc, #96]	; (8100e1c <HAL_GPIO_Init+0x260>)
 8100dba:	4293      	cmp	r3, r2
 8100dbc:	d007      	beq.n	8100dce <HAL_GPIO_Init+0x212>
 8100dbe:	687b      	ldr	r3, [r7, #4]
 8100dc0:	4a17      	ldr	r2, [pc, #92]	; (8100e20 <HAL_GPIO_Init+0x264>)
 8100dc2:	4293      	cmp	r3, r2
 8100dc4:	d101      	bne.n	8100dca <HAL_GPIO_Init+0x20e>
 8100dc6:	2309      	movs	r3, #9
 8100dc8:	e02d      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100dca:	230a      	movs	r3, #10
 8100dcc:	e02b      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100dce:	2308      	movs	r3, #8
 8100dd0:	e029      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100dd2:	2307      	movs	r3, #7
 8100dd4:	e027      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100dd6:	2306      	movs	r3, #6
 8100dd8:	e025      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100dda:	2305      	movs	r3, #5
 8100ddc:	e023      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100dde:	2304      	movs	r3, #4
 8100de0:	e021      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100de2:	2303      	movs	r3, #3
 8100de4:	e01f      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100de6:	2302      	movs	r3, #2
 8100de8:	e01d      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100dea:	2301      	movs	r3, #1
 8100dec:	e01b      	b.n	8100e26 <HAL_GPIO_Init+0x26a>
 8100dee:	bf00      	nop
 8100df0:	580000c0 	.word	0x580000c0
 8100df4:	58024400 	.word	0x58024400
 8100df8:	58000400 	.word	0x58000400
 8100dfc:	58020000 	.word	0x58020000
 8100e00:	58020400 	.word	0x58020400
 8100e04:	58020800 	.word	0x58020800
 8100e08:	58020c00 	.word	0x58020c00
 8100e0c:	58021000 	.word	0x58021000
 8100e10:	58021400 	.word	0x58021400
 8100e14:	58021800 	.word	0x58021800
 8100e18:	58021c00 	.word	0x58021c00
 8100e1c:	58022000 	.word	0x58022000
 8100e20:	58022400 	.word	0x58022400
 8100e24:	2300      	movs	r3, #0
 8100e26:	69fa      	ldr	r2, [r7, #28]
 8100e28:	f002 0203 	and.w	r2, r2, #3
 8100e2c:	0092      	lsls	r2, r2, #2
 8100e2e:	4093      	lsls	r3, r2
 8100e30:	69ba      	ldr	r2, [r7, #24]
 8100e32:	4313      	orrs	r3, r2
 8100e34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100e36:	4938      	ldr	r1, [pc, #224]	; (8100f18 <HAL_GPIO_Init+0x35c>)
 8100e38:	69fb      	ldr	r3, [r7, #28]
 8100e3a:	089b      	lsrs	r3, r3, #2
 8100e3c:	3302      	adds	r3, #2
 8100e3e:	69ba      	ldr	r2, [r7, #24]
 8100e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e48:	681b      	ldr	r3, [r3, #0]
 8100e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e4c:	693b      	ldr	r3, [r7, #16]
 8100e4e:	43db      	mvns	r3, r3
 8100e50:	69ba      	ldr	r2, [r7, #24]
 8100e52:	4013      	ands	r3, r2
 8100e54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100e56:	683b      	ldr	r3, [r7, #0]
 8100e58:	685b      	ldr	r3, [r3, #4]
 8100e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100e5e:	2b00      	cmp	r3, #0
 8100e60:	d003      	beq.n	8100e6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100e62:	69ba      	ldr	r2, [r7, #24]
 8100e64:	693b      	ldr	r3, [r7, #16]
 8100e66:	4313      	orrs	r3, r2
 8100e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e6e:	69bb      	ldr	r3, [r7, #24]
 8100e70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e76:	685b      	ldr	r3, [r3, #4]
 8100e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e7a:	693b      	ldr	r3, [r7, #16]
 8100e7c:	43db      	mvns	r3, r3
 8100e7e:	69ba      	ldr	r2, [r7, #24]
 8100e80:	4013      	ands	r3, r2
 8100e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100e84:	683b      	ldr	r3, [r7, #0]
 8100e86:	685b      	ldr	r3, [r3, #4]
 8100e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100e8c:	2b00      	cmp	r3, #0
 8100e8e:	d003      	beq.n	8100e98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100e90:	69ba      	ldr	r2, [r7, #24]
 8100e92:	693b      	ldr	r3, [r7, #16]
 8100e94:	4313      	orrs	r3, r2
 8100e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e9c:	69bb      	ldr	r3, [r7, #24]
 8100e9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100ea0:	697b      	ldr	r3, [r7, #20]
 8100ea2:	685b      	ldr	r3, [r3, #4]
 8100ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ea6:	693b      	ldr	r3, [r7, #16]
 8100ea8:	43db      	mvns	r3, r3
 8100eaa:	69ba      	ldr	r2, [r7, #24]
 8100eac:	4013      	ands	r3, r2
 8100eae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100eb0:	683b      	ldr	r3, [r7, #0]
 8100eb2:	685b      	ldr	r3, [r3, #4]
 8100eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100eb8:	2b00      	cmp	r3, #0
 8100eba:	d003      	beq.n	8100ec4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100ebc:	69ba      	ldr	r2, [r7, #24]
 8100ebe:	693b      	ldr	r3, [r7, #16]
 8100ec0:	4313      	orrs	r3, r2
 8100ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100ec4:	697b      	ldr	r3, [r7, #20]
 8100ec6:	69ba      	ldr	r2, [r7, #24]
 8100ec8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100eca:	697b      	ldr	r3, [r7, #20]
 8100ecc:	681b      	ldr	r3, [r3, #0]
 8100ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ed0:	693b      	ldr	r3, [r7, #16]
 8100ed2:	43db      	mvns	r3, r3
 8100ed4:	69ba      	ldr	r2, [r7, #24]
 8100ed6:	4013      	ands	r3, r2
 8100ed8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100eda:	683b      	ldr	r3, [r7, #0]
 8100edc:	685b      	ldr	r3, [r3, #4]
 8100ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100ee2:	2b00      	cmp	r3, #0
 8100ee4:	d003      	beq.n	8100eee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100ee6:	69ba      	ldr	r2, [r7, #24]
 8100ee8:	693b      	ldr	r3, [r7, #16]
 8100eea:	4313      	orrs	r3, r2
 8100eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100eee:	697b      	ldr	r3, [r7, #20]
 8100ef0:	69ba      	ldr	r2, [r7, #24]
 8100ef2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100ef4:	69fb      	ldr	r3, [r7, #28]
 8100ef6:	3301      	adds	r3, #1
 8100ef8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100efa:	683b      	ldr	r3, [r7, #0]
 8100efc:	681a      	ldr	r2, [r3, #0]
 8100efe:	69fb      	ldr	r3, [r7, #28]
 8100f00:	fa22 f303 	lsr.w	r3, r2, r3
 8100f04:	2b00      	cmp	r3, #0
 8100f06:	f47f ae63 	bne.w	8100bd0 <HAL_GPIO_Init+0x14>
  }
}
 8100f0a:	bf00      	nop
 8100f0c:	bf00      	nop
 8100f0e:	3724      	adds	r7, #36	; 0x24
 8100f10:	46bd      	mov	sp, r7
 8100f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f16:	4770      	bx	lr
 8100f18:	58000400 	.word	0x58000400

08100f1c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100f1c:	b480      	push	{r7}
 8100f1e:	b083      	sub	sp, #12
 8100f20:	af00      	add	r7, sp, #0
 8100f22:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100f24:	4b05      	ldr	r3, [pc, #20]	; (8100f3c <HAL_HSEM_ActivateNotification+0x20>)
 8100f26:	681a      	ldr	r2, [r3, #0]
 8100f28:	4904      	ldr	r1, [pc, #16]	; (8100f3c <HAL_HSEM_ActivateNotification+0x20>)
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	4313      	orrs	r3, r2
 8100f2e:	600b      	str	r3, [r1, #0]
#endif
}
 8100f30:	bf00      	nop
 8100f32:	370c      	adds	r7, #12
 8100f34:	46bd      	mov	sp, r7
 8100f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f3a:	4770      	bx	lr
 8100f3c:	58026510 	.word	0x58026510

08100f40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8100f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100f42:	b08f      	sub	sp, #60	; 0x3c
 8100f44:	af0a      	add	r7, sp, #40	; 0x28
 8100f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8100f48:	687b      	ldr	r3, [r7, #4]
 8100f4a:	2b00      	cmp	r3, #0
 8100f4c:	d101      	bne.n	8100f52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8100f4e:	2301      	movs	r3, #1
 8100f50:	e116      	b.n	8101180 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8100f52:	687b      	ldr	r3, [r7, #4]
 8100f54:	681b      	ldr	r3, [r3, #0]
 8100f56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8100f58:	687b      	ldr	r3, [r7, #4]
 8100f5a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8100f5e:	b2db      	uxtb	r3, r3
 8100f60:	2b00      	cmp	r3, #0
 8100f62:	d106      	bne.n	8100f72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8100f64:	687b      	ldr	r3, [r7, #4]
 8100f66:	2200      	movs	r2, #0
 8100f68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8100f6c:	6878      	ldr	r0, [r7, #4]
 8100f6e:	f7ff fb0d 	bl	810058c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8100f72:	687b      	ldr	r3, [r7, #4]
 8100f74:	2203      	movs	r2, #3
 8100f76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8100f7a:	68bb      	ldr	r3, [r7, #8]
 8100f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8100f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100f82:	2b00      	cmp	r3, #0
 8100f84:	d102      	bne.n	8100f8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8100f86:	687b      	ldr	r3, [r7, #4]
 8100f88:	2200      	movs	r2, #0
 8100f8a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8100f8c:	687b      	ldr	r3, [r7, #4]
 8100f8e:	681b      	ldr	r3, [r3, #0]
 8100f90:	4618      	mov	r0, r3
 8100f92:	f002 f942 	bl	810321a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8100f96:	687b      	ldr	r3, [r7, #4]
 8100f98:	681b      	ldr	r3, [r3, #0]
 8100f9a:	603b      	str	r3, [r7, #0]
 8100f9c:	687e      	ldr	r6, [r7, #4]
 8100f9e:	466d      	mov	r5, sp
 8100fa0:	f106 0410 	add.w	r4, r6, #16
 8100fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8100fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8100fac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8100fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8100fb4:	1d33      	adds	r3, r6, #4
 8100fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8100fb8:	6838      	ldr	r0, [r7, #0]
 8100fba:	f002 f8c0 	bl	810313e <USB_CoreInit>
 8100fbe:	4603      	mov	r3, r0
 8100fc0:	2b00      	cmp	r3, #0
 8100fc2:	d005      	beq.n	8100fd0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8100fc4:	687b      	ldr	r3, [r7, #4]
 8100fc6:	2202      	movs	r2, #2
 8100fc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8100fcc:	2301      	movs	r3, #1
 8100fce:	e0d7      	b.n	8101180 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8100fd0:	687b      	ldr	r3, [r7, #4]
 8100fd2:	681b      	ldr	r3, [r3, #0]
 8100fd4:	2100      	movs	r1, #0
 8100fd6:	4618      	mov	r0, r3
 8100fd8:	f002 f930 	bl	810323c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8100fdc:	2300      	movs	r3, #0
 8100fde:	73fb      	strb	r3, [r7, #15]
 8100fe0:	e04a      	b.n	8101078 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8100fe2:	7bfa      	ldrb	r2, [r7, #15]
 8100fe4:	6879      	ldr	r1, [r7, #4]
 8100fe6:	4613      	mov	r3, r2
 8100fe8:	00db      	lsls	r3, r3, #3
 8100fea:	4413      	add	r3, r2
 8100fec:	009b      	lsls	r3, r3, #2
 8100fee:	440b      	add	r3, r1
 8100ff0:	333d      	adds	r3, #61	; 0x3d
 8100ff2:	2201      	movs	r2, #1
 8100ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8100ff6:	7bfa      	ldrb	r2, [r7, #15]
 8100ff8:	6879      	ldr	r1, [r7, #4]
 8100ffa:	4613      	mov	r3, r2
 8100ffc:	00db      	lsls	r3, r3, #3
 8100ffe:	4413      	add	r3, r2
 8101000:	009b      	lsls	r3, r3, #2
 8101002:	440b      	add	r3, r1
 8101004:	333c      	adds	r3, #60	; 0x3c
 8101006:	7bfa      	ldrb	r2, [r7, #15]
 8101008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 810100a:	7bfa      	ldrb	r2, [r7, #15]
 810100c:	7bfb      	ldrb	r3, [r7, #15]
 810100e:	b298      	uxth	r0, r3
 8101010:	6879      	ldr	r1, [r7, #4]
 8101012:	4613      	mov	r3, r2
 8101014:	00db      	lsls	r3, r3, #3
 8101016:	4413      	add	r3, r2
 8101018:	009b      	lsls	r3, r3, #2
 810101a:	440b      	add	r3, r1
 810101c:	3356      	adds	r3, #86	; 0x56
 810101e:	4602      	mov	r2, r0
 8101020:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8101022:	7bfa      	ldrb	r2, [r7, #15]
 8101024:	6879      	ldr	r1, [r7, #4]
 8101026:	4613      	mov	r3, r2
 8101028:	00db      	lsls	r3, r3, #3
 810102a:	4413      	add	r3, r2
 810102c:	009b      	lsls	r3, r3, #2
 810102e:	440b      	add	r3, r1
 8101030:	3340      	adds	r3, #64	; 0x40
 8101032:	2200      	movs	r2, #0
 8101034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8101036:	7bfa      	ldrb	r2, [r7, #15]
 8101038:	6879      	ldr	r1, [r7, #4]
 810103a:	4613      	mov	r3, r2
 810103c:	00db      	lsls	r3, r3, #3
 810103e:	4413      	add	r3, r2
 8101040:	009b      	lsls	r3, r3, #2
 8101042:	440b      	add	r3, r1
 8101044:	3344      	adds	r3, #68	; 0x44
 8101046:	2200      	movs	r2, #0
 8101048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 810104a:	7bfa      	ldrb	r2, [r7, #15]
 810104c:	6879      	ldr	r1, [r7, #4]
 810104e:	4613      	mov	r3, r2
 8101050:	00db      	lsls	r3, r3, #3
 8101052:	4413      	add	r3, r2
 8101054:	009b      	lsls	r3, r3, #2
 8101056:	440b      	add	r3, r1
 8101058:	3348      	adds	r3, #72	; 0x48
 810105a:	2200      	movs	r2, #0
 810105c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 810105e:	7bfa      	ldrb	r2, [r7, #15]
 8101060:	6879      	ldr	r1, [r7, #4]
 8101062:	4613      	mov	r3, r2
 8101064:	00db      	lsls	r3, r3, #3
 8101066:	4413      	add	r3, r2
 8101068:	009b      	lsls	r3, r3, #2
 810106a:	440b      	add	r3, r1
 810106c:	334c      	adds	r3, #76	; 0x4c
 810106e:	2200      	movs	r2, #0
 8101070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8101072:	7bfb      	ldrb	r3, [r7, #15]
 8101074:	3301      	adds	r3, #1
 8101076:	73fb      	strb	r3, [r7, #15]
 8101078:	7bfa      	ldrb	r2, [r7, #15]
 810107a:	687b      	ldr	r3, [r7, #4]
 810107c:	685b      	ldr	r3, [r3, #4]
 810107e:	429a      	cmp	r2, r3
 8101080:	d3af      	bcc.n	8100fe2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8101082:	2300      	movs	r3, #0
 8101084:	73fb      	strb	r3, [r7, #15]
 8101086:	e044      	b.n	8101112 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8101088:	7bfa      	ldrb	r2, [r7, #15]
 810108a:	6879      	ldr	r1, [r7, #4]
 810108c:	4613      	mov	r3, r2
 810108e:	00db      	lsls	r3, r3, #3
 8101090:	4413      	add	r3, r2
 8101092:	009b      	lsls	r3, r3, #2
 8101094:	440b      	add	r3, r1
 8101096:	f203 237d 	addw	r3, r3, #637	; 0x27d
 810109a:	2200      	movs	r2, #0
 810109c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 810109e:	7bfa      	ldrb	r2, [r7, #15]
 81010a0:	6879      	ldr	r1, [r7, #4]
 81010a2:	4613      	mov	r3, r2
 81010a4:	00db      	lsls	r3, r3, #3
 81010a6:	4413      	add	r3, r2
 81010a8:	009b      	lsls	r3, r3, #2
 81010aa:	440b      	add	r3, r1
 81010ac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 81010b0:	7bfa      	ldrb	r2, [r7, #15]
 81010b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 81010b4:	7bfa      	ldrb	r2, [r7, #15]
 81010b6:	6879      	ldr	r1, [r7, #4]
 81010b8:	4613      	mov	r3, r2
 81010ba:	00db      	lsls	r3, r3, #3
 81010bc:	4413      	add	r3, r2
 81010be:	009b      	lsls	r3, r3, #2
 81010c0:	440b      	add	r3, r1
 81010c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 81010c6:	2200      	movs	r2, #0
 81010c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 81010ca:	7bfa      	ldrb	r2, [r7, #15]
 81010cc:	6879      	ldr	r1, [r7, #4]
 81010ce:	4613      	mov	r3, r2
 81010d0:	00db      	lsls	r3, r3, #3
 81010d2:	4413      	add	r3, r2
 81010d4:	009b      	lsls	r3, r3, #2
 81010d6:	440b      	add	r3, r1
 81010d8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 81010dc:	2200      	movs	r2, #0
 81010de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 81010e0:	7bfa      	ldrb	r2, [r7, #15]
 81010e2:	6879      	ldr	r1, [r7, #4]
 81010e4:	4613      	mov	r3, r2
 81010e6:	00db      	lsls	r3, r3, #3
 81010e8:	4413      	add	r3, r2
 81010ea:	009b      	lsls	r3, r3, #2
 81010ec:	440b      	add	r3, r1
 81010ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 81010f2:	2200      	movs	r2, #0
 81010f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81010f6:	7bfa      	ldrb	r2, [r7, #15]
 81010f8:	6879      	ldr	r1, [r7, #4]
 81010fa:	4613      	mov	r3, r2
 81010fc:	00db      	lsls	r3, r3, #3
 81010fe:	4413      	add	r3, r2
 8101100:	009b      	lsls	r3, r3, #2
 8101102:	440b      	add	r3, r1
 8101104:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8101108:	2200      	movs	r2, #0
 810110a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810110c:	7bfb      	ldrb	r3, [r7, #15]
 810110e:	3301      	adds	r3, #1
 8101110:	73fb      	strb	r3, [r7, #15]
 8101112:	7bfa      	ldrb	r2, [r7, #15]
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	685b      	ldr	r3, [r3, #4]
 8101118:	429a      	cmp	r2, r3
 810111a:	d3b5      	bcc.n	8101088 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810111c:	687b      	ldr	r3, [r7, #4]
 810111e:	681b      	ldr	r3, [r3, #0]
 8101120:	603b      	str	r3, [r7, #0]
 8101122:	687e      	ldr	r6, [r7, #4]
 8101124:	466d      	mov	r5, sp
 8101126:	f106 0410 	add.w	r4, r6, #16
 810112a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810112c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810112e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8101136:	e885 0003 	stmia.w	r5, {r0, r1}
 810113a:	1d33      	adds	r3, r6, #4
 810113c:	cb0e      	ldmia	r3, {r1, r2, r3}
 810113e:	6838      	ldr	r0, [r7, #0]
 8101140:	f002 f8c8 	bl	81032d4 <USB_DevInit>
 8101144:	4603      	mov	r3, r0
 8101146:	2b00      	cmp	r3, #0
 8101148:	d005      	beq.n	8101156 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 810114a:	687b      	ldr	r3, [r7, #4]
 810114c:	2202      	movs	r2, #2
 810114e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8101152:	2301      	movs	r3, #1
 8101154:	e014      	b.n	8101180 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8101156:	687b      	ldr	r3, [r7, #4]
 8101158:	2200      	movs	r2, #0
 810115a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	2201      	movs	r2, #1
 8101162:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8101166:	687b      	ldr	r3, [r7, #4]
 8101168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810116a:	2b01      	cmp	r3, #1
 810116c:	d102      	bne.n	8101174 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810116e:	6878      	ldr	r0, [r7, #4]
 8101170:	f000 f80a 	bl	8101188 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8101174:	687b      	ldr	r3, [r7, #4]
 8101176:	681b      	ldr	r3, [r3, #0]
 8101178:	4618      	mov	r0, r3
 810117a:	f002 fa86 	bl	810368a <USB_DevDisconnect>

  return HAL_OK;
 810117e:	2300      	movs	r3, #0
}
 8101180:	4618      	mov	r0, r3
 8101182:	3714      	adds	r7, #20
 8101184:	46bd      	mov	sp, r7
 8101186:	bdf0      	pop	{r4, r5, r6, r7, pc}

08101188 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8101188:	b480      	push	{r7}
 810118a:	b085      	sub	sp, #20
 810118c:	af00      	add	r7, sp, #0
 810118e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	681b      	ldr	r3, [r3, #0]
 8101194:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8101196:	687b      	ldr	r3, [r7, #4]
 8101198:	2201      	movs	r2, #1
 810119a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 810119e:	687b      	ldr	r3, [r7, #4]
 81011a0:	2200      	movs	r2, #0
 81011a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 81011a6:	68fb      	ldr	r3, [r7, #12]
 81011a8:	699b      	ldr	r3, [r3, #24]
 81011aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 81011ae:	68fb      	ldr	r3, [r7, #12]
 81011b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 81011b2:	68fb      	ldr	r3, [r7, #12]
 81011b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81011ba:	f043 0303 	orr.w	r3, r3, #3
 81011be:	68fa      	ldr	r2, [r7, #12]
 81011c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 81011c2:	2300      	movs	r3, #0
}
 81011c4:	4618      	mov	r0, r3
 81011c6:	3714      	adds	r7, #20
 81011c8:	46bd      	mov	sp, r7
 81011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ce:	4770      	bx	lr

081011d0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81011d0:	b580      	push	{r7, lr}
 81011d2:	b084      	sub	sp, #16
 81011d4:	af00      	add	r7, sp, #0
 81011d6:	60f8      	str	r0, [r7, #12]
 81011d8:	460b      	mov	r3, r1
 81011da:	607a      	str	r2, [r7, #4]
 81011dc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81011de:	4b37      	ldr	r3, [pc, #220]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81011e0:	681b      	ldr	r3, [r3, #0]
 81011e2:	f023 0201 	bic.w	r2, r3, #1
 81011e6:	4935      	ldr	r1, [pc, #212]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81011e8:	68fb      	ldr	r3, [r7, #12]
 81011ea:	4313      	orrs	r3, r2
 81011ec:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81011ee:	687b      	ldr	r3, [r7, #4]
 81011f0:	2b00      	cmp	r3, #0
 81011f2:	d123      	bne.n	810123c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81011f4:	f7ff fcce 	bl	8100b94 <HAL_GetCurrentCPUID>
 81011f8:	4603      	mov	r3, r0
 81011fa:	2b03      	cmp	r3, #3
 81011fc:	d158      	bne.n	81012b0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81011fe:	4b2f      	ldr	r3, [pc, #188]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101200:	691b      	ldr	r3, [r3, #16]
 8101202:	4a2e      	ldr	r2, [pc, #184]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101204:	f023 0301 	bic.w	r3, r3, #1
 8101208:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810120a:	4b2d      	ldr	r3, [pc, #180]	; (81012c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810120c:	691b      	ldr	r3, [r3, #16]
 810120e:	4a2c      	ldr	r2, [pc, #176]	; (81012c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101210:	f043 0304 	orr.w	r3, r3, #4
 8101214:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101216:	f3bf 8f4f 	dsb	sy
}
 810121a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810121c:	f3bf 8f6f 	isb	sy
}
 8101220:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101222:	7afb      	ldrb	r3, [r7, #11]
 8101224:	2b01      	cmp	r3, #1
 8101226:	d101      	bne.n	810122c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101228:	bf30      	wfi
 810122a:	e000      	b.n	810122e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810122c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810122e:	4b24      	ldr	r3, [pc, #144]	; (81012c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101230:	691b      	ldr	r3, [r3, #16]
 8101232:	4a23      	ldr	r2, [pc, #140]	; (81012c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101234:	f023 0304 	bic.w	r3, r3, #4
 8101238:	6113      	str	r3, [r2, #16]
 810123a:	e03c      	b.n	81012b6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	2b01      	cmp	r3, #1
 8101240:	d123      	bne.n	810128a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101242:	f7ff fca7 	bl	8100b94 <HAL_GetCurrentCPUID>
 8101246:	4603      	mov	r3, r0
 8101248:	2b01      	cmp	r3, #1
 810124a:	d133      	bne.n	81012b4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810124c:	4b1b      	ldr	r3, [pc, #108]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 810124e:	695b      	ldr	r3, [r3, #20]
 8101250:	4a1a      	ldr	r2, [pc, #104]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101252:	f023 0302 	bic.w	r3, r3, #2
 8101256:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101258:	4b19      	ldr	r3, [pc, #100]	; (81012c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810125a:	691b      	ldr	r3, [r3, #16]
 810125c:	4a18      	ldr	r2, [pc, #96]	; (81012c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810125e:	f043 0304 	orr.w	r3, r3, #4
 8101262:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101264:	f3bf 8f4f 	dsb	sy
}
 8101268:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810126a:	f3bf 8f6f 	isb	sy
}
 810126e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101270:	7afb      	ldrb	r3, [r7, #11]
 8101272:	2b01      	cmp	r3, #1
 8101274:	d101      	bne.n	810127a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101276:	bf30      	wfi
 8101278:	e000      	b.n	810127c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810127a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810127c:	4b10      	ldr	r3, [pc, #64]	; (81012c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810127e:	691b      	ldr	r3, [r3, #16]
 8101280:	4a0f      	ldr	r2, [pc, #60]	; (81012c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101282:	f023 0304 	bic.w	r3, r3, #4
 8101286:	6113      	str	r3, [r2, #16]
 8101288:	e015      	b.n	81012b6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810128a:	f7ff fc83 	bl	8100b94 <HAL_GetCurrentCPUID>
 810128e:	4603      	mov	r3, r0
 8101290:	2b03      	cmp	r3, #3
 8101292:	d106      	bne.n	81012a2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101294:	4b09      	ldr	r3, [pc, #36]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101296:	691b      	ldr	r3, [r3, #16]
 8101298:	4a08      	ldr	r2, [pc, #32]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 810129a:	f023 0304 	bic.w	r3, r3, #4
 810129e:	6113      	str	r3, [r2, #16]
 81012a0:	e009      	b.n	81012b6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81012a2:	4b06      	ldr	r3, [pc, #24]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81012a4:	695b      	ldr	r3, [r3, #20]
 81012a6:	4a05      	ldr	r2, [pc, #20]	; (81012bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81012a8:	f023 0304 	bic.w	r3, r3, #4
 81012ac:	6153      	str	r3, [r2, #20]
 81012ae:	e002      	b.n	81012b6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81012b0:	bf00      	nop
 81012b2:	e000      	b.n	81012b6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81012b4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81012b6:	3710      	adds	r7, #16
 81012b8:	46bd      	mov	sp, r7
 81012ba:	bd80      	pop	{r7, pc}
 81012bc:	58024800 	.word	0x58024800
 81012c0:	e000ed00 	.word	0xe000ed00

081012c4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81012c4:	b580      	push	{r7, lr}
 81012c6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81012c8:	f7ff fc64 	bl	8100b94 <HAL_GetCurrentCPUID>
 81012cc:	4603      	mov	r3, r0
 81012ce:	2b03      	cmp	r3, #3
 81012d0:	d101      	bne.n	81012d6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81012d2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81012d4:	e001      	b.n	81012da <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81012d6:	bf40      	sev
    __WFE ();
 81012d8:	bf20      	wfe
}
 81012da:	bf00      	nop
 81012dc:	bd80      	pop	{r7, pc}
	...

081012e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 81012e0:	b480      	push	{r7}
 81012e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 81012e4:	4b05      	ldr	r3, [pc, #20]	; (81012fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81012e6:	68db      	ldr	r3, [r3, #12]
 81012e8:	4a04      	ldr	r2, [pc, #16]	; (81012fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81012ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81012ee:	60d3      	str	r3, [r2, #12]
}
 81012f0:	bf00      	nop
 81012f2:	46bd      	mov	sp, r7
 81012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012f8:	4770      	bx	lr
 81012fa:	bf00      	nop
 81012fc:	58024800 	.word	0x58024800

08101300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101300:	b480      	push	{r7}
 8101302:	b089      	sub	sp, #36	; 0x24
 8101304:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101306:	4bb3      	ldr	r3, [pc, #716]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101308:	691b      	ldr	r3, [r3, #16]
 810130a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810130e:	2b18      	cmp	r3, #24
 8101310:	f200 8155 	bhi.w	81015be <HAL_RCC_GetSysClockFreq+0x2be>
 8101314:	a201      	add	r2, pc, #4	; (adr r2, 810131c <HAL_RCC_GetSysClockFreq+0x1c>)
 8101316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810131a:	bf00      	nop
 810131c:	08101381 	.word	0x08101381
 8101320:	081015bf 	.word	0x081015bf
 8101324:	081015bf 	.word	0x081015bf
 8101328:	081015bf 	.word	0x081015bf
 810132c:	081015bf 	.word	0x081015bf
 8101330:	081015bf 	.word	0x081015bf
 8101334:	081015bf 	.word	0x081015bf
 8101338:	081015bf 	.word	0x081015bf
 810133c:	081013a7 	.word	0x081013a7
 8101340:	081015bf 	.word	0x081015bf
 8101344:	081015bf 	.word	0x081015bf
 8101348:	081015bf 	.word	0x081015bf
 810134c:	081015bf 	.word	0x081015bf
 8101350:	081015bf 	.word	0x081015bf
 8101354:	081015bf 	.word	0x081015bf
 8101358:	081015bf 	.word	0x081015bf
 810135c:	081013ad 	.word	0x081013ad
 8101360:	081015bf 	.word	0x081015bf
 8101364:	081015bf 	.word	0x081015bf
 8101368:	081015bf 	.word	0x081015bf
 810136c:	081015bf 	.word	0x081015bf
 8101370:	081015bf 	.word	0x081015bf
 8101374:	081015bf 	.word	0x081015bf
 8101378:	081015bf 	.word	0x081015bf
 810137c:	081013b3 	.word	0x081013b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101380:	4b94      	ldr	r3, [pc, #592]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101382:	681b      	ldr	r3, [r3, #0]
 8101384:	f003 0320 	and.w	r3, r3, #32
 8101388:	2b00      	cmp	r3, #0
 810138a:	d009      	beq.n	81013a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810138c:	4b91      	ldr	r3, [pc, #580]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810138e:	681b      	ldr	r3, [r3, #0]
 8101390:	08db      	lsrs	r3, r3, #3
 8101392:	f003 0303 	and.w	r3, r3, #3
 8101396:	4a90      	ldr	r2, [pc, #576]	; (81015d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101398:	fa22 f303 	lsr.w	r3, r2, r3
 810139c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810139e:	e111      	b.n	81015c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81013a0:	4b8d      	ldr	r3, [pc, #564]	; (81015d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81013a2:	61bb      	str	r3, [r7, #24]
      break;
 81013a4:	e10e      	b.n	81015c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81013a6:	4b8d      	ldr	r3, [pc, #564]	; (81015dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81013a8:	61bb      	str	r3, [r7, #24]
      break;
 81013aa:	e10b      	b.n	81015c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81013ac:	4b8c      	ldr	r3, [pc, #560]	; (81015e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81013ae:	61bb      	str	r3, [r7, #24]
      break;
 81013b0:	e108      	b.n	81015c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81013b2:	4b88      	ldr	r3, [pc, #544]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81013b6:	f003 0303 	and.w	r3, r3, #3
 81013ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81013bc:	4b85      	ldr	r3, [pc, #532]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81013c0:	091b      	lsrs	r3, r3, #4
 81013c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81013c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81013c8:	4b82      	ldr	r3, [pc, #520]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81013cc:	f003 0301 	and.w	r3, r3, #1
 81013d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81013d2:	4b80      	ldr	r3, [pc, #512]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81013d6:	08db      	lsrs	r3, r3, #3
 81013d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81013dc:	68fa      	ldr	r2, [r7, #12]
 81013de:	fb02 f303 	mul.w	r3, r2, r3
 81013e2:	ee07 3a90 	vmov	s15, r3
 81013e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81013ee:	693b      	ldr	r3, [r7, #16]
 81013f0:	2b00      	cmp	r3, #0
 81013f2:	f000 80e1 	beq.w	81015b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 81013f6:	697b      	ldr	r3, [r7, #20]
 81013f8:	2b02      	cmp	r3, #2
 81013fa:	f000 8083 	beq.w	8101504 <HAL_RCC_GetSysClockFreq+0x204>
 81013fe:	697b      	ldr	r3, [r7, #20]
 8101400:	2b02      	cmp	r3, #2
 8101402:	f200 80a1 	bhi.w	8101548 <HAL_RCC_GetSysClockFreq+0x248>
 8101406:	697b      	ldr	r3, [r7, #20]
 8101408:	2b00      	cmp	r3, #0
 810140a:	d003      	beq.n	8101414 <HAL_RCC_GetSysClockFreq+0x114>
 810140c:	697b      	ldr	r3, [r7, #20]
 810140e:	2b01      	cmp	r3, #1
 8101410:	d056      	beq.n	81014c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101412:	e099      	b.n	8101548 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101414:	4b6f      	ldr	r3, [pc, #444]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101416:	681b      	ldr	r3, [r3, #0]
 8101418:	f003 0320 	and.w	r3, r3, #32
 810141c:	2b00      	cmp	r3, #0
 810141e:	d02d      	beq.n	810147c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101420:	4b6c      	ldr	r3, [pc, #432]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101422:	681b      	ldr	r3, [r3, #0]
 8101424:	08db      	lsrs	r3, r3, #3
 8101426:	f003 0303 	and.w	r3, r3, #3
 810142a:	4a6b      	ldr	r2, [pc, #428]	; (81015d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810142c:	fa22 f303 	lsr.w	r3, r2, r3
 8101430:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101432:	687b      	ldr	r3, [r7, #4]
 8101434:	ee07 3a90 	vmov	s15, r3
 8101438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810143c:	693b      	ldr	r3, [r7, #16]
 810143e:	ee07 3a90 	vmov	s15, r3
 8101442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810144a:	4b62      	ldr	r3, [pc, #392]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810144e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101452:	ee07 3a90 	vmov	s15, r3
 8101456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810145a:	ed97 6a02 	vldr	s12, [r7, #8]
 810145e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81015e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810146a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810146e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101476:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810147a:	e087      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810147c:	693b      	ldr	r3, [r7, #16]
 810147e:	ee07 3a90 	vmov	s15, r3
 8101482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101486:	eddf 6a58 	vldr	s13, [pc, #352]	; 81015e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810148a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810148e:	4b51      	ldr	r3, [pc, #324]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101496:	ee07 3a90 	vmov	s15, r3
 810149a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810149e:	ed97 6a02 	vldr	s12, [r7, #8]
 81014a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 81015e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81014be:	e065      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81014c0:	693b      	ldr	r3, [r7, #16]
 81014c2:	ee07 3a90 	vmov	s15, r3
 81014c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 81015ec <HAL_RCC_GetSysClockFreq+0x2ec>
 81014ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014d2:	4b40      	ldr	r3, [pc, #256]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014da:	ee07 3a90 	vmov	s15, r3
 81014de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014e2:	ed97 6a02 	vldr	s12, [r7, #8]
 81014e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81015e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101502:	e043      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101504:	693b      	ldr	r3, [r7, #16]
 8101506:	ee07 3a90 	vmov	s15, r3
 810150a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810150e:	eddf 6a38 	vldr	s13, [pc, #224]	; 81015f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101516:	4b2f      	ldr	r3, [pc, #188]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810151a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810151e:	ee07 3a90 	vmov	s15, r3
 8101522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101526:	ed97 6a02 	vldr	s12, [r7, #8]
 810152a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81015e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810152e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810153a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810153e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101546:	e021      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101548:	693b      	ldr	r3, [r7, #16]
 810154a:	ee07 3a90 	vmov	s15, r3
 810154e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101552:	eddf 6a26 	vldr	s13, [pc, #152]	; 81015ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8101556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810155a:	4b1e      	ldr	r3, [pc, #120]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810155e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101562:	ee07 3a90 	vmov	s15, r3
 8101566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810156a:	ed97 6a02 	vldr	s12, [r7, #8]
 810156e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81015e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810157a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810157e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810158a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810158c:	4b11      	ldr	r3, [pc, #68]	; (81015d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101590:	0a5b      	lsrs	r3, r3, #9
 8101592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101596:	3301      	adds	r3, #1
 8101598:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810159a:	683b      	ldr	r3, [r7, #0]
 810159c:	ee07 3a90 	vmov	s15, r3
 81015a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81015a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81015a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81015ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81015b0:	ee17 3a90 	vmov	r3, s15
 81015b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81015b6:	e005      	b.n	81015c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81015b8:	2300      	movs	r3, #0
 81015ba:	61bb      	str	r3, [r7, #24]
      break;
 81015bc:	e002      	b.n	81015c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81015be:	4b07      	ldr	r3, [pc, #28]	; (81015dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81015c0:	61bb      	str	r3, [r7, #24]
      break;
 81015c2:	bf00      	nop
  }

  return sysclockfreq;
 81015c4:	69bb      	ldr	r3, [r7, #24]
}
 81015c6:	4618      	mov	r0, r3
 81015c8:	3724      	adds	r7, #36	; 0x24
 81015ca:	46bd      	mov	sp, r7
 81015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015d0:	4770      	bx	lr
 81015d2:	bf00      	nop
 81015d4:	58024400 	.word	0x58024400
 81015d8:	03d09000 	.word	0x03d09000
 81015dc:	003d0900 	.word	0x003d0900
 81015e0:	017d7840 	.word	0x017d7840
 81015e4:	46000000 	.word	0x46000000
 81015e8:	4c742400 	.word	0x4c742400
 81015ec:	4a742400 	.word	0x4a742400
 81015f0:	4bbebc20 	.word	0x4bbebc20

081015f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81015f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81015f8:	b0cc      	sub	sp, #304	; 0x130
 81015fa:	af00      	add	r7, sp, #0
 81015fc:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101600:	2300      	movs	r3, #0
 8101602:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101606:	2300      	movs	r3, #0
 8101608:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810160c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101614:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8101618:	2500      	movs	r5, #0
 810161a:	ea54 0305 	orrs.w	r3, r4, r5
 810161e:	d049      	beq.n	81016b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8101620:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101626:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810162a:	d02f      	beq.n	810168c <HAL_RCCEx_PeriphCLKConfig+0x98>
 810162c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101630:	d828      	bhi.n	8101684 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101636:	d01a      	beq.n	810166e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8101638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810163c:	d822      	bhi.n	8101684 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810163e:	2b00      	cmp	r3, #0
 8101640:	d003      	beq.n	810164a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8101642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101646:	d007      	beq.n	8101658 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101648:	e01c      	b.n	8101684 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810164a:	4bb8      	ldr	r3, [pc, #736]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810164e:	4ab7      	ldr	r2, [pc, #732]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101654:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101656:	e01a      	b.n	810168e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101658:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810165c:	3308      	adds	r3, #8
 810165e:	2102      	movs	r1, #2
 8101660:	4618      	mov	r0, r3
 8101662:	f001 fa11 	bl	8102a88 <RCCEx_PLL2_Config>
 8101666:	4603      	mov	r3, r0
 8101668:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810166c:	e00f      	b.n	810168e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810166e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101672:	3328      	adds	r3, #40	; 0x28
 8101674:	2102      	movs	r1, #2
 8101676:	4618      	mov	r0, r3
 8101678:	f001 fab8 	bl	8102bec <RCCEx_PLL3_Config>
 810167c:	4603      	mov	r3, r0
 810167e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101682:	e004      	b.n	810168e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101684:	2301      	movs	r3, #1
 8101686:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810168a:	e000      	b.n	810168e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810168c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810168e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101692:	2b00      	cmp	r3, #0
 8101694:	d10a      	bne.n	81016ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101696:	4ba5      	ldr	r3, [pc, #660]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810169a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810169e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81016a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81016a4:	4aa1      	ldr	r2, [pc, #644]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016a6:	430b      	orrs	r3, r1
 81016a8:	6513      	str	r3, [r2, #80]	; 0x50
 81016aa:	e003      	b.n	81016b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81016ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81016b0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81016b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81016c0:	f04f 0900 	mov.w	r9, #0
 81016c4:	ea58 0309 	orrs.w	r3, r8, r9
 81016c8:	d047      	beq.n	810175a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81016ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81016d0:	2b04      	cmp	r3, #4
 81016d2:	d82a      	bhi.n	810172a <HAL_RCCEx_PeriphCLKConfig+0x136>
 81016d4:	a201      	add	r2, pc, #4	; (adr r2, 81016dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81016da:	bf00      	nop
 81016dc:	081016f1 	.word	0x081016f1
 81016e0:	081016ff 	.word	0x081016ff
 81016e4:	08101715 	.word	0x08101715
 81016e8:	08101733 	.word	0x08101733
 81016ec:	08101733 	.word	0x08101733
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81016f0:	4b8e      	ldr	r3, [pc, #568]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81016f4:	4a8d      	ldr	r2, [pc, #564]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81016fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81016fc:	e01a      	b.n	8101734 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81016fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101702:	3308      	adds	r3, #8
 8101704:	2100      	movs	r1, #0
 8101706:	4618      	mov	r0, r3
 8101708:	f001 f9be 	bl	8102a88 <RCCEx_PLL2_Config>
 810170c:	4603      	mov	r3, r0
 810170e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101712:	e00f      	b.n	8101734 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101714:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101718:	3328      	adds	r3, #40	; 0x28
 810171a:	2100      	movs	r1, #0
 810171c:	4618      	mov	r0, r3
 810171e:	f001 fa65 	bl	8102bec <RCCEx_PLL3_Config>
 8101722:	4603      	mov	r3, r0
 8101724:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101728:	e004      	b.n	8101734 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810172a:	2301      	movs	r3, #1
 810172c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101730:	e000      	b.n	8101734 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8101732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101734:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101738:	2b00      	cmp	r3, #0
 810173a:	d10a      	bne.n	8101752 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810173c:	4b7b      	ldr	r3, [pc, #492]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810173e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101740:	f023 0107 	bic.w	r1, r3, #7
 8101744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810174a:	4a78      	ldr	r2, [pc, #480]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810174c:	430b      	orrs	r3, r1
 810174e:	6513      	str	r3, [r2, #80]	; 0x50
 8101750:	e003      	b.n	810175a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101752:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101756:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810175a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101762:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8101766:	f04f 0b00 	mov.w	fp, #0
 810176a:	ea5a 030b 	orrs.w	r3, sl, fp
 810176e:	d04c      	beq.n	810180a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8101770:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810177a:	d030      	beq.n	81017de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810177c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101780:	d829      	bhi.n	81017d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101782:	2bc0      	cmp	r3, #192	; 0xc0
 8101784:	d02d      	beq.n	81017e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101786:	2bc0      	cmp	r3, #192	; 0xc0
 8101788:	d825      	bhi.n	81017d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810178a:	2b80      	cmp	r3, #128	; 0x80
 810178c:	d018      	beq.n	81017c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810178e:	2b80      	cmp	r3, #128	; 0x80
 8101790:	d821      	bhi.n	81017d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101792:	2b00      	cmp	r3, #0
 8101794:	d002      	beq.n	810179c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101796:	2b40      	cmp	r3, #64	; 0x40
 8101798:	d007      	beq.n	81017aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810179a:	e01c      	b.n	81017d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810179c:	4b63      	ldr	r3, [pc, #396]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017a0:	4a62      	ldr	r2, [pc, #392]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81017a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81017a8:	e01c      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81017aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81017ae:	3308      	adds	r3, #8
 81017b0:	2100      	movs	r1, #0
 81017b2:	4618      	mov	r0, r3
 81017b4:	f001 f968 	bl	8102a88 <RCCEx_PLL2_Config>
 81017b8:	4603      	mov	r3, r0
 81017ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81017be:	e011      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81017c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81017c4:	3328      	adds	r3, #40	; 0x28
 81017c6:	2100      	movs	r1, #0
 81017c8:	4618      	mov	r0, r3
 81017ca:	f001 fa0f 	bl	8102bec <RCCEx_PLL3_Config>
 81017ce:	4603      	mov	r3, r0
 81017d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81017d4:	e006      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81017d6:	2301      	movs	r3, #1
 81017d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81017dc:	e002      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81017de:	bf00      	nop
 81017e0:	e000      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81017e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81017e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81017e8:	2b00      	cmp	r3, #0
 81017ea:	d10a      	bne.n	8101802 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81017ec:	4b4f      	ldr	r3, [pc, #316]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81017f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 81017f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81017fa:	4a4c      	ldr	r2, [pc, #304]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017fc:	430b      	orrs	r3, r1
 81017fe:	6513      	str	r3, [r2, #80]	; 0x50
 8101800:	e003      	b.n	810180a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101802:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101806:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810180a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101812:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8101816:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 810181a:	2300      	movs	r3, #0
 810181c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8101820:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8101824:	460b      	mov	r3, r1
 8101826:	4313      	orrs	r3, r2
 8101828:	d053      	beq.n	81018d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810182a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810182e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101836:	d035      	beq.n	81018a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810183c:	d82e      	bhi.n	810189c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810183e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101842:	d031      	beq.n	81018a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8101844:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101848:	d828      	bhi.n	810189c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810184a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810184e:	d01a      	beq.n	8101886 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8101850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101854:	d822      	bhi.n	810189c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101856:	2b00      	cmp	r3, #0
 8101858:	d003      	beq.n	8101862 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810185a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810185e:	d007      	beq.n	8101870 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8101860:	e01c      	b.n	810189c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101862:	4b32      	ldr	r3, [pc, #200]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101866:	4a31      	ldr	r2, [pc, #196]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810186c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810186e:	e01c      	b.n	81018aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101870:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101874:	3308      	adds	r3, #8
 8101876:	2100      	movs	r1, #0
 8101878:	4618      	mov	r0, r3
 810187a:	f001 f905 	bl	8102a88 <RCCEx_PLL2_Config>
 810187e:	4603      	mov	r3, r0
 8101880:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101884:	e011      	b.n	81018aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101886:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810188a:	3328      	adds	r3, #40	; 0x28
 810188c:	2100      	movs	r1, #0
 810188e:	4618      	mov	r0, r3
 8101890:	f001 f9ac 	bl	8102bec <RCCEx_PLL3_Config>
 8101894:	4603      	mov	r3, r0
 8101896:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810189a:	e006      	b.n	81018aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810189c:	2301      	movs	r3, #1
 810189e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81018a2:	e002      	b.n	81018aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81018a4:	bf00      	nop
 81018a6:	e000      	b.n	81018aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81018a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81018aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81018ae:	2b00      	cmp	r3, #0
 81018b0:	d10b      	bne.n	81018ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81018b2:	4b1e      	ldr	r3, [pc, #120]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81018b6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 81018ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81018be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81018c2:	4a1a      	ldr	r2, [pc, #104]	; (810192c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81018c4:	430b      	orrs	r3, r1
 81018c6:	6593      	str	r3, [r2, #88]	; 0x58
 81018c8:	e003      	b.n	81018d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81018ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81018d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018da:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 81018de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 81018e2:	2300      	movs	r3, #0
 81018e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 81018e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 81018ec:	460b      	mov	r3, r1
 81018ee:	4313      	orrs	r3, r2
 81018f0:	d056      	beq.n	81019a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81018f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81018f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81018fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81018fe:	d038      	beq.n	8101972 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8101900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101904:	d831      	bhi.n	810196a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101906:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810190a:	d034      	beq.n	8101976 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810190c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101910:	d82b      	bhi.n	810196a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101916:	d01d      	beq.n	8101954 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8101918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810191c:	d825      	bhi.n	810196a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810191e:	2b00      	cmp	r3, #0
 8101920:	d006      	beq.n	8101930 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8101922:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101926:	d00a      	beq.n	810193e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101928:	e01f      	b.n	810196a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810192a:	bf00      	nop
 810192c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101930:	4ba2      	ldr	r3, [pc, #648]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101934:	4aa1      	ldr	r2, [pc, #644]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810193a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810193c:	e01c      	b.n	8101978 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810193e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101942:	3308      	adds	r3, #8
 8101944:	2100      	movs	r1, #0
 8101946:	4618      	mov	r0, r3
 8101948:	f001 f89e 	bl	8102a88 <RCCEx_PLL2_Config>
 810194c:	4603      	mov	r3, r0
 810194e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101952:	e011      	b.n	8101978 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101954:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101958:	3328      	adds	r3, #40	; 0x28
 810195a:	2100      	movs	r1, #0
 810195c:	4618      	mov	r0, r3
 810195e:	f001 f945 	bl	8102bec <RCCEx_PLL3_Config>
 8101962:	4603      	mov	r3, r0
 8101964:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101968:	e006      	b.n	8101978 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810196a:	2301      	movs	r3, #1
 810196c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101970:	e002      	b.n	8101978 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101972:	bf00      	nop
 8101974:	e000      	b.n	8101978 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101978:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810197c:	2b00      	cmp	r3, #0
 810197e:	d10b      	bne.n	8101998 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101980:	4b8e      	ldr	r3, [pc, #568]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101984:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8101988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810198c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101990:	4a8a      	ldr	r2, [pc, #552]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101992:	430b      	orrs	r3, r1
 8101994:	6593      	str	r3, [r2, #88]	; 0x58
 8101996:	e003      	b.n	81019a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101998:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810199c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81019a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81019a8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 81019ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 81019b0:	2300      	movs	r3, #0
 81019b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 81019b6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 81019ba:	460b      	mov	r3, r1
 81019bc:	4313      	orrs	r3, r2
 81019be:	d03a      	beq.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81019c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81019c6:	2b30      	cmp	r3, #48	; 0x30
 81019c8:	d01f      	beq.n	8101a0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 81019ca:	2b30      	cmp	r3, #48	; 0x30
 81019cc:	d819      	bhi.n	8101a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81019ce:	2b20      	cmp	r3, #32
 81019d0:	d00c      	beq.n	81019ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81019d2:	2b20      	cmp	r3, #32
 81019d4:	d815      	bhi.n	8101a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81019d6:	2b00      	cmp	r3, #0
 81019d8:	d019      	beq.n	8101a0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81019da:	2b10      	cmp	r3, #16
 81019dc:	d111      	bne.n	8101a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019de:	4b77      	ldr	r3, [pc, #476]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81019e2:	4a76      	ldr	r2, [pc, #472]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81019e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81019ea:	e011      	b.n	8101a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81019ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81019f0:	3308      	adds	r3, #8
 81019f2:	2102      	movs	r1, #2
 81019f4:	4618      	mov	r0, r3
 81019f6:	f001 f847 	bl	8102a88 <RCCEx_PLL2_Config>
 81019fa:	4603      	mov	r3, r0
 81019fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101a00:	e006      	b.n	8101a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101a02:	2301      	movs	r3, #1
 8101a04:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101a08:	e002      	b.n	8101a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101a0a:	bf00      	nop
 8101a0c:	e000      	b.n	8101a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101a10:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101a14:	2b00      	cmp	r3, #0
 8101a16:	d10a      	bne.n	8101a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101a18:	4b68      	ldr	r3, [pc, #416]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101a1c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8101a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101a26:	4a65      	ldr	r2, [pc, #404]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a28:	430b      	orrs	r3, r1
 8101a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8101a2c:	e003      	b.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a2e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101a32:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a3e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8101a42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8101a46:	2300      	movs	r3, #0
 8101a48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8101a4c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8101a50:	460b      	mov	r3, r1
 8101a52:	4313      	orrs	r3, r2
 8101a54:	d051      	beq.n	8101afa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8101a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101a60:	d035      	beq.n	8101ace <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8101a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101a66:	d82e      	bhi.n	8101ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101a68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101a6c:	d031      	beq.n	8101ad2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8101a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101a72:	d828      	bhi.n	8101ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a78:	d01a      	beq.n	8101ab0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8101a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a7e:	d822      	bhi.n	8101ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101a80:	2b00      	cmp	r3, #0
 8101a82:	d003      	beq.n	8101a8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101a88:	d007      	beq.n	8101a9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101a8a:	e01c      	b.n	8101ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a8c:	4b4b      	ldr	r3, [pc, #300]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101a90:	4a4a      	ldr	r2, [pc, #296]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101a98:	e01c      	b.n	8101ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101a9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101a9e:	3308      	adds	r3, #8
 8101aa0:	2100      	movs	r1, #0
 8101aa2:	4618      	mov	r0, r3
 8101aa4:	f000 fff0 	bl	8102a88 <RCCEx_PLL2_Config>
 8101aa8:	4603      	mov	r3, r0
 8101aaa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101aae:	e011      	b.n	8101ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101ab4:	3328      	adds	r3, #40	; 0x28
 8101ab6:	2100      	movs	r1, #0
 8101ab8:	4618      	mov	r0, r3
 8101aba:	f001 f897 	bl	8102bec <RCCEx_PLL3_Config>
 8101abe:	4603      	mov	r3, r0
 8101ac0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101ac4:	e006      	b.n	8101ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101ac6:	2301      	movs	r3, #1
 8101ac8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101acc:	e002      	b.n	8101ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101ace:	bf00      	nop
 8101ad0:	e000      	b.n	8101ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ad4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101ad8:	2b00      	cmp	r3, #0
 8101ada:	d10a      	bne.n	8101af2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101adc:	4b37      	ldr	r3, [pc, #220]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101ae0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8101ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101aea:	4a34      	ldr	r2, [pc, #208]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101aec:	430b      	orrs	r3, r1
 8101aee:	6513      	str	r3, [r2, #80]	; 0x50
 8101af0:	e003      	b.n	8101afa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101af2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101af6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8101b06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8101b0a:	2300      	movs	r3, #0
 8101b0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8101b10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8101b14:	460b      	mov	r3, r1
 8101b16:	4313      	orrs	r3, r2
 8101b18:	d056      	beq.n	8101bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8101b1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101b24:	d033      	beq.n	8101b8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101b26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101b2a:	d82c      	bhi.n	8101b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101b2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101b30:	d02f      	beq.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8101b32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101b36:	d826      	bhi.n	8101b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101b38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101b3c:	d02b      	beq.n	8101b96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8101b3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101b42:	d820      	bhi.n	8101b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101b48:	d012      	beq.n	8101b70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8101b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101b4e:	d81a      	bhi.n	8101b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101b50:	2b00      	cmp	r3, #0
 8101b52:	d022      	beq.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8101b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101b58:	d115      	bne.n	8101b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101b5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101b5e:	3308      	adds	r3, #8
 8101b60:	2101      	movs	r1, #1
 8101b62:	4618      	mov	r0, r3
 8101b64:	f000 ff90 	bl	8102a88 <RCCEx_PLL2_Config>
 8101b68:	4603      	mov	r3, r0
 8101b6a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101b6e:	e015      	b.n	8101b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101b74:	3328      	adds	r3, #40	; 0x28
 8101b76:	2101      	movs	r1, #1
 8101b78:	4618      	mov	r0, r3
 8101b7a:	f001 f837 	bl	8102bec <RCCEx_PLL3_Config>
 8101b7e:	4603      	mov	r3, r0
 8101b80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101b84:	e00a      	b.n	8101b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101b86:	2301      	movs	r3, #1
 8101b88:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101b8c:	e006      	b.n	8101b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b8e:	bf00      	nop
 8101b90:	e004      	b.n	8101b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b92:	bf00      	nop
 8101b94:	e002      	b.n	8101b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b96:	bf00      	nop
 8101b98:	e000      	b.n	8101b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101b9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101ba0:	2b00      	cmp	r3, #0
 8101ba2:	d10d      	bne.n	8101bc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101ba4:	4b05      	ldr	r3, [pc, #20]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101ba8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8101bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101bb2:	4a02      	ldr	r2, [pc, #8]	; (8101bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101bb4:	430b      	orrs	r3, r1
 8101bb6:	6513      	str	r3, [r2, #80]	; 0x50
 8101bb8:	e006      	b.n	8101bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8101bba:	bf00      	nop
 8101bbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101bc0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101bc4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bd0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8101bd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8101bd8:	2300      	movs	r3, #0
 8101bda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8101bde:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8101be2:	460b      	mov	r3, r1
 8101be4:	4313      	orrs	r3, r2
 8101be6:	d055      	beq.n	8101c94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8101be8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101bec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8101bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101bf4:	d033      	beq.n	8101c5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8101bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101bfa:	d82c      	bhi.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101c00:	d02f      	beq.n	8101c62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8101c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101c06:	d826      	bhi.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101c08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101c0c:	d02b      	beq.n	8101c66 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8101c0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101c12:	d820      	bhi.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101c18:	d012      	beq.n	8101c40 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8101c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101c1e:	d81a      	bhi.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101c20:	2b00      	cmp	r3, #0
 8101c22:	d022      	beq.n	8101c6a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8101c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101c28:	d115      	bne.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101c2e:	3308      	adds	r3, #8
 8101c30:	2101      	movs	r1, #1
 8101c32:	4618      	mov	r0, r3
 8101c34:	f000 ff28 	bl	8102a88 <RCCEx_PLL2_Config>
 8101c38:	4603      	mov	r3, r0
 8101c3a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101c3e:	e015      	b.n	8101c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101c44:	3328      	adds	r3, #40	; 0x28
 8101c46:	2101      	movs	r1, #1
 8101c48:	4618      	mov	r0, r3
 8101c4a:	f000 ffcf 	bl	8102bec <RCCEx_PLL3_Config>
 8101c4e:	4603      	mov	r3, r0
 8101c50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101c54:	e00a      	b.n	8101c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8101c56:	2301      	movs	r3, #1
 8101c58:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101c5c:	e006      	b.n	8101c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101c5e:	bf00      	nop
 8101c60:	e004      	b.n	8101c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101c62:	bf00      	nop
 8101c64:	e002      	b.n	8101c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101c66:	bf00      	nop
 8101c68:	e000      	b.n	8101c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c6c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101c70:	2b00      	cmp	r3, #0
 8101c72:	d10b      	bne.n	8101c8c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101c74:	4bb7      	ldr	r3, [pc, #732]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101c78:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8101c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101c80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8101c84:	4ab3      	ldr	r2, [pc, #716]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101c86:	430b      	orrs	r3, r1
 8101c88:	6593      	str	r3, [r2, #88]	; 0x58
 8101c8a:	e003      	b.n	8101c94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101c90:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8101c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c9c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8101ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8101ca4:	2300      	movs	r3, #0
 8101ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8101caa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8101cae:	460b      	mov	r3, r1
 8101cb0:	4313      	orrs	r3, r2
 8101cb2:	d02a      	beq.n	8101d0a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8101cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101cba:	2b00      	cmp	r3, #0
 8101cbc:	d011      	beq.n	8101ce2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8101cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101cc2:	d10a      	bne.n	8101cda <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101cc8:	3308      	adds	r3, #8
 8101cca:	2101      	movs	r1, #1
 8101ccc:	4618      	mov	r0, r3
 8101cce:	f000 fedb 	bl	8102a88 <RCCEx_PLL2_Config>
 8101cd2:	4603      	mov	r3, r0
 8101cd4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8101cd8:	e004      	b.n	8101ce4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101cda:	2301      	movs	r3, #1
 8101cdc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101ce0:	e000      	b.n	8101ce4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8101ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ce4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101ce8:	2b00      	cmp	r3, #0
 8101cea:	d10a      	bne.n	8101d02 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8101cec:	4b99      	ldr	r3, [pc, #612]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101cf0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8101cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101cfa:	4a96      	ldr	r2, [pc, #600]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101cfc:	430b      	orrs	r3, r1
 8101cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8101d00:	e003      	b.n	8101d0a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101d06:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d12:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8101d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8101d1a:	2300      	movs	r3, #0
 8101d1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8101d20:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8101d24:	460b      	mov	r3, r1
 8101d26:	4313      	orrs	r3, r2
 8101d28:	d037      	beq.n	8101d9a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8101d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101d34:	d00e      	beq.n	8101d54 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8101d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101d3a:	d816      	bhi.n	8101d6a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8101d3c:	2b00      	cmp	r3, #0
 8101d3e:	d018      	beq.n	8101d72 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8101d40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101d44:	d111      	bne.n	8101d6a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d46:	4b83      	ldr	r3, [pc, #524]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d4a:	4a82      	ldr	r2, [pc, #520]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101d52:	e00f      	b.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101d58:	3308      	adds	r3, #8
 8101d5a:	2101      	movs	r1, #1
 8101d5c:	4618      	mov	r0, r3
 8101d5e:	f000 fe93 	bl	8102a88 <RCCEx_PLL2_Config>
 8101d62:	4603      	mov	r3, r0
 8101d64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101d68:	e004      	b.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101d6a:	2301      	movs	r3, #1
 8101d6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101d70:	e000      	b.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8101d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101d78:	2b00      	cmp	r3, #0
 8101d7a:	d10a      	bne.n	8101d92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101d7c:	4b75      	ldr	r3, [pc, #468]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101d80:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8101d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101d8a:	4a72      	ldr	r2, [pc, #456]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101d8c:	430b      	orrs	r3, r1
 8101d8e:	6513      	str	r3, [r2, #80]	; 0x50
 8101d90:	e003      	b.n	8101d9a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101d96:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101d9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101da2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8101da6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8101daa:	2300      	movs	r3, #0
 8101dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8101db0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8101db4:	460b      	mov	r3, r1
 8101db6:	4313      	orrs	r3, r2
 8101db8:	d03a      	beq.n	8101e30 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8101dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101dc0:	2b03      	cmp	r3, #3
 8101dc2:	d81d      	bhi.n	8101e00 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8101dc4:	a201      	add	r2, pc, #4	; (adr r2, 8101dcc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8101dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101dca:	bf00      	nop
 8101dcc:	08101e09 	.word	0x08101e09
 8101dd0:	08101ddd 	.word	0x08101ddd
 8101dd4:	08101deb 	.word	0x08101deb
 8101dd8:	08101e09 	.word	0x08101e09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101ddc:	4b5d      	ldr	r3, [pc, #372]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101de0:	4a5c      	ldr	r2, [pc, #368]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101de8:	e00f      	b.n	8101e0a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101dee:	3308      	adds	r3, #8
 8101df0:	2102      	movs	r1, #2
 8101df2:	4618      	mov	r0, r3
 8101df4:	f000 fe48 	bl	8102a88 <RCCEx_PLL2_Config>
 8101df8:	4603      	mov	r3, r0
 8101dfa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101dfe:	e004      	b.n	8101e0a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101e00:	2301      	movs	r3, #1
 8101e02:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101e06:	e000      	b.n	8101e0a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8101e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101e0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101e0e:	2b00      	cmp	r3, #0
 8101e10:	d10a      	bne.n	8101e28 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101e12:	4b50      	ldr	r3, [pc, #320]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101e16:	f023 0103 	bic.w	r1, r3, #3
 8101e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101e20:	4a4c      	ldr	r2, [pc, #304]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e22:	430b      	orrs	r3, r1
 8101e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8101e26:	e003      	b.n	8101e30 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e28:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101e2c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e38:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8101e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8101e40:	2300      	movs	r3, #0
 8101e42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8101e46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8101e4a:	460b      	mov	r3, r1
 8101e4c:	4313      	orrs	r3, r2
 8101e4e:	f000 80a0 	beq.w	8101f92 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101e52:	4b41      	ldr	r3, [pc, #260]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8101e54:	681b      	ldr	r3, [r3, #0]
 8101e56:	4a40      	ldr	r2, [pc, #256]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8101e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101e5e:	f7fe fd85 	bl	810096c <HAL_GetTick>
 8101e62:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101e66:	e00b      	b.n	8101e80 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101e68:	f7fe fd80 	bl	810096c <HAL_GetTick>
 8101e6c:	4602      	mov	r2, r0
 8101e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8101e72:	1ad3      	subs	r3, r2, r3
 8101e74:	2b64      	cmp	r3, #100	; 0x64
 8101e76:	d903      	bls.n	8101e80 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8101e78:	2303      	movs	r3, #3
 8101e7a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8101e7e:	e005      	b.n	8101e8c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101e80:	4b35      	ldr	r3, [pc, #212]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101e88:	2b00      	cmp	r3, #0
 8101e8a:	d0ed      	beq.n	8101e68 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8101e8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101e90:	2b00      	cmp	r3, #0
 8101e92:	d17a      	bne.n	8101f8a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101e94:	4b2f      	ldr	r3, [pc, #188]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101e9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8101ea0:	4053      	eors	r3, r2
 8101ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101ea6:	2b00      	cmp	r3, #0
 8101ea8:	d015      	beq.n	8101ed6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101eaa:	4b2a      	ldr	r3, [pc, #168]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101eb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101eb6:	4b27      	ldr	r3, [pc, #156]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101eba:	4a26      	ldr	r2, [pc, #152]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101ec0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101ec2:	4b24      	ldr	r3, [pc, #144]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101ec6:	4a23      	ldr	r2, [pc, #140]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101ecc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101ece:	4a21      	ldr	r2, [pc, #132]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101ed0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8101ed4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101ed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101eda:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8101ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101ee2:	d118      	bne.n	8101f16 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101ee4:	f7fe fd42 	bl	810096c <HAL_GetTick>
 8101ee8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101eec:	e00d      	b.n	8101f0a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101eee:	f7fe fd3d 	bl	810096c <HAL_GetTick>
 8101ef2:	4602      	mov	r2, r0
 8101ef4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8101ef8:	1ad2      	subs	r2, r2, r3
 8101efa:	f241 3388 	movw	r3, #5000	; 0x1388
 8101efe:	429a      	cmp	r2, r3
 8101f00:	d903      	bls.n	8101f0a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8101f02:	2303      	movs	r3, #3
 8101f04:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8101f08:	e005      	b.n	8101f16 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101f0a:	4b12      	ldr	r3, [pc, #72]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101f0e:	f003 0302 	and.w	r3, r3, #2
 8101f12:	2b00      	cmp	r3, #0
 8101f14:	d0eb      	beq.n	8101eee <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8101f16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101f1a:	2b00      	cmp	r3, #0
 8101f1c:	d130      	bne.n	8101f80 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101f1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101f22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8101f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101f2e:	d115      	bne.n	8101f5c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8101f30:	4b08      	ldr	r3, [pc, #32]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f32:	691b      	ldr	r3, [r3, #16]
 8101f34:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8101f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101f3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8101f40:	091b      	lsrs	r3, r3, #4
 8101f42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8101f46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8101f4a:	4a02      	ldr	r2, [pc, #8]	; (8101f54 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8101f4c:	430b      	orrs	r3, r1
 8101f4e:	6113      	str	r3, [r2, #16]
 8101f50:	e00a      	b.n	8101f68 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8101f52:	bf00      	nop
 8101f54:	58024400 	.word	0x58024400
 8101f58:	58024800 	.word	0x58024800
 8101f5c:	4bd4      	ldr	r3, [pc, #848]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8101f5e:	691b      	ldr	r3, [r3, #16]
 8101f60:	4ad3      	ldr	r2, [pc, #844]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8101f62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8101f66:	6113      	str	r3, [r2, #16]
 8101f68:	4bd1      	ldr	r3, [pc, #836]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8101f6a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8101f6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101f70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8101f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101f78:	4acd      	ldr	r2, [pc, #820]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8101f7a:	430b      	orrs	r3, r1
 8101f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8101f7e:	e008      	b.n	8101f92 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101f80:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101f84:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8101f88:	e003      	b.n	8101f92 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f8a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8101f8e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f9a:	f002 0301 	and.w	r3, r2, #1
 8101f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8101fa2:	2300      	movs	r3, #0
 8101fa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8101fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8101fac:	460b      	mov	r3, r1
 8101fae:	4313      	orrs	r3, r2
 8101fb0:	f000 808b 	beq.w	81020ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8101fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8101fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101fbc:	2b28      	cmp	r3, #40	; 0x28
 8101fbe:	d86b      	bhi.n	8102098 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8101fc0:	a201      	add	r2, pc, #4	; (adr r2, 8101fc8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8101fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101fc6:	bf00      	nop
 8101fc8:	081020a1 	.word	0x081020a1
 8101fcc:	08102099 	.word	0x08102099
 8101fd0:	08102099 	.word	0x08102099
 8101fd4:	08102099 	.word	0x08102099
 8101fd8:	08102099 	.word	0x08102099
 8101fdc:	08102099 	.word	0x08102099
 8101fe0:	08102099 	.word	0x08102099
 8101fe4:	08102099 	.word	0x08102099
 8101fe8:	0810206d 	.word	0x0810206d
 8101fec:	08102099 	.word	0x08102099
 8101ff0:	08102099 	.word	0x08102099
 8101ff4:	08102099 	.word	0x08102099
 8101ff8:	08102099 	.word	0x08102099
 8101ffc:	08102099 	.word	0x08102099
 8102000:	08102099 	.word	0x08102099
 8102004:	08102099 	.word	0x08102099
 8102008:	08102083 	.word	0x08102083
 810200c:	08102099 	.word	0x08102099
 8102010:	08102099 	.word	0x08102099
 8102014:	08102099 	.word	0x08102099
 8102018:	08102099 	.word	0x08102099
 810201c:	08102099 	.word	0x08102099
 8102020:	08102099 	.word	0x08102099
 8102024:	08102099 	.word	0x08102099
 8102028:	081020a1 	.word	0x081020a1
 810202c:	08102099 	.word	0x08102099
 8102030:	08102099 	.word	0x08102099
 8102034:	08102099 	.word	0x08102099
 8102038:	08102099 	.word	0x08102099
 810203c:	08102099 	.word	0x08102099
 8102040:	08102099 	.word	0x08102099
 8102044:	08102099 	.word	0x08102099
 8102048:	081020a1 	.word	0x081020a1
 810204c:	08102099 	.word	0x08102099
 8102050:	08102099 	.word	0x08102099
 8102054:	08102099 	.word	0x08102099
 8102058:	08102099 	.word	0x08102099
 810205c:	08102099 	.word	0x08102099
 8102060:	08102099 	.word	0x08102099
 8102064:	08102099 	.word	0x08102099
 8102068:	081020a1 	.word	0x081020a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810206c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102070:	3308      	adds	r3, #8
 8102072:	2101      	movs	r1, #1
 8102074:	4618      	mov	r0, r3
 8102076:	f000 fd07 	bl	8102a88 <RCCEx_PLL2_Config>
 810207a:	4603      	mov	r3, r0
 810207c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102080:	e00f      	b.n	81020a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102082:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102086:	3328      	adds	r3, #40	; 0x28
 8102088:	2101      	movs	r1, #1
 810208a:	4618      	mov	r0, r3
 810208c:	f000 fdae 	bl	8102bec <RCCEx_PLL3_Config>
 8102090:	4603      	mov	r3, r0
 8102092:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102096:	e004      	b.n	81020a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102098:	2301      	movs	r3, #1
 810209a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810209e:	e000      	b.n	81020a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 81020a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81020a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81020a6:	2b00      	cmp	r3, #0
 81020a8:	d10b      	bne.n	81020c2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81020aa:	4b81      	ldr	r3, [pc, #516]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020ae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 81020b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81020b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81020ba:	4a7d      	ldr	r2, [pc, #500]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81020bc:	430b      	orrs	r3, r1
 81020be:	6553      	str	r3, [r2, #84]	; 0x54
 81020c0:	e003      	b.n	81020ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81020c6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81020ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020d2:	f002 0302 	and.w	r3, r2, #2
 81020d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81020da:	2300      	movs	r3, #0
 81020dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81020e0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 81020e4:	460b      	mov	r3, r1
 81020e6:	4313      	orrs	r3, r2
 81020e8:	d042      	beq.n	8102170 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81020ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81020ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81020f0:	2b05      	cmp	r3, #5
 81020f2:	d825      	bhi.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81020f4:	a201      	add	r2, pc, #4	; (adr r2, 81020fc <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020fa:	bf00      	nop
 81020fc:	08102149 	.word	0x08102149
 8102100:	08102115 	.word	0x08102115
 8102104:	0810212b 	.word	0x0810212b
 8102108:	08102149 	.word	0x08102149
 810210c:	08102149 	.word	0x08102149
 8102110:	08102149 	.word	0x08102149
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102114:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102118:	3308      	adds	r3, #8
 810211a:	2101      	movs	r1, #1
 810211c:	4618      	mov	r0, r3
 810211e:	f000 fcb3 	bl	8102a88 <RCCEx_PLL2_Config>
 8102122:	4603      	mov	r3, r0
 8102124:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102128:	e00f      	b.n	810214a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810212a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810212e:	3328      	adds	r3, #40	; 0x28
 8102130:	2101      	movs	r1, #1
 8102132:	4618      	mov	r0, r3
 8102134:	f000 fd5a 	bl	8102bec <RCCEx_PLL3_Config>
 8102138:	4603      	mov	r3, r0
 810213a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810213e:	e004      	b.n	810214a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102140:	2301      	movs	r3, #1
 8102142:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102146:	e000      	b.n	810214a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8102148:	bf00      	nop
    }

    if (ret == HAL_OK)
 810214a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810214e:	2b00      	cmp	r3, #0
 8102150:	d10a      	bne.n	8102168 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102152:	4b57      	ldr	r3, [pc, #348]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102156:	f023 0107 	bic.w	r1, r3, #7
 810215a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810215e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102160:	4a53      	ldr	r2, [pc, #332]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102162:	430b      	orrs	r3, r1
 8102164:	6553      	str	r3, [r2, #84]	; 0x54
 8102166:	e003      	b.n	8102170 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102168:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810216c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102170:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102178:	f002 0304 	and.w	r3, r2, #4
 810217c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8102180:	2300      	movs	r3, #0
 8102182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8102186:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 810218a:	460b      	mov	r3, r1
 810218c:	4313      	orrs	r3, r2
 810218e:	d044      	beq.n	810221a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102190:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102198:	2b05      	cmp	r3, #5
 810219a:	d825      	bhi.n	81021e8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 810219c:	a201      	add	r2, pc, #4	; (adr r2, 81021a4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810219e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81021a2:	bf00      	nop
 81021a4:	081021f1 	.word	0x081021f1
 81021a8:	081021bd 	.word	0x081021bd
 81021ac:	081021d3 	.word	0x081021d3
 81021b0:	081021f1 	.word	0x081021f1
 81021b4:	081021f1 	.word	0x081021f1
 81021b8:	081021f1 	.word	0x081021f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81021bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81021c0:	3308      	adds	r3, #8
 81021c2:	2101      	movs	r1, #1
 81021c4:	4618      	mov	r0, r3
 81021c6:	f000 fc5f 	bl	8102a88 <RCCEx_PLL2_Config>
 81021ca:	4603      	mov	r3, r0
 81021cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81021d0:	e00f      	b.n	81021f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81021d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81021d6:	3328      	adds	r3, #40	; 0x28
 81021d8:	2101      	movs	r1, #1
 81021da:	4618      	mov	r0, r3
 81021dc:	f000 fd06 	bl	8102bec <RCCEx_PLL3_Config>
 81021e0:	4603      	mov	r3, r0
 81021e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81021e6:	e004      	b.n	81021f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81021e8:	2301      	movs	r3, #1
 81021ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81021ee:	e000      	b.n	81021f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 81021f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d10b      	bne.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81021fa:	4b2d      	ldr	r3, [pc, #180]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81021fe:	f023 0107 	bic.w	r1, r3, #7
 8102202:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810220a:	4a29      	ldr	r2, [pc, #164]	; (81022b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810220c:	430b      	orrs	r3, r1
 810220e:	6593      	str	r3, [r2, #88]	; 0x58
 8102210:	e003      	b.n	810221a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102212:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102216:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810221a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102222:	f002 0320 	and.w	r3, r2, #32
 8102226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 810222a:	2300      	movs	r3, #0
 810222c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8102230:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8102234:	460b      	mov	r3, r1
 8102236:	4313      	orrs	r3, r2
 8102238:	d057      	beq.n	81022ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810223a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102246:	d035      	beq.n	81022b4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8102248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810224c:	d82c      	bhi.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810224e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102252:	d031      	beq.n	81022b8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8102254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102258:	d826      	bhi.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810225a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810225e:	d02d      	beq.n	81022bc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8102260:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102264:	d820      	bhi.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810226a:	d012      	beq.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 810226c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102270:	d81a      	bhi.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102272:	2b00      	cmp	r3, #0
 8102274:	d024      	beq.n	81022c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8102276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810227a:	d115      	bne.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810227c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102280:	3308      	adds	r3, #8
 8102282:	2100      	movs	r1, #0
 8102284:	4618      	mov	r0, r3
 8102286:	f000 fbff 	bl	8102a88 <RCCEx_PLL2_Config>
 810228a:	4603      	mov	r3, r0
 810228c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102290:	e017      	b.n	81022c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102296:	3328      	adds	r3, #40	; 0x28
 8102298:	2102      	movs	r1, #2
 810229a:	4618      	mov	r0, r3
 810229c:	f000 fca6 	bl	8102bec <RCCEx_PLL3_Config>
 81022a0:	4603      	mov	r3, r0
 81022a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81022a6:	e00c      	b.n	81022c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81022a8:	2301      	movs	r3, #1
 81022aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81022ae:	e008      	b.n	81022c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 81022b0:	58024400 	.word	0x58024400
        break;
 81022b4:	bf00      	nop
 81022b6:	e004      	b.n	81022c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81022b8:	bf00      	nop
 81022ba:	e002      	b.n	81022c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81022bc:	bf00      	nop
 81022be:	e000      	b.n	81022c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81022c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81022c6:	2b00      	cmp	r3, #0
 81022c8:	d10b      	bne.n	81022e2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81022ca:	4bc2      	ldr	r3, [pc, #776]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81022d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81022da:	4abe      	ldr	r2, [pc, #760]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81022dc:	430b      	orrs	r3, r1
 81022de:	6553      	str	r3, [r2, #84]	; 0x54
 81022e0:	e003      	b.n	81022ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81022e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81022ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 81022f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 81022fa:	2300      	movs	r3, #0
 81022fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8102300:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8102304:	460b      	mov	r3, r1
 8102306:	4313      	orrs	r3, r2
 8102308:	d055      	beq.n	81023b6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810230a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810230e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102312:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102316:	d033      	beq.n	8102380 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8102318:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810231c:	d82c      	bhi.n	8102378 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102322:	d02f      	beq.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8102324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102328:	d826      	bhi.n	8102378 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810232a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810232e:	d02b      	beq.n	8102388 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8102330:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102334:	d820      	bhi.n	8102378 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810233a:	d012      	beq.n	8102362 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 810233c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102340:	d81a      	bhi.n	8102378 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102342:	2b00      	cmp	r3, #0
 8102344:	d022      	beq.n	810238c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8102346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810234a:	d115      	bne.n	8102378 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810234c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102350:	3308      	adds	r3, #8
 8102352:	2100      	movs	r1, #0
 8102354:	4618      	mov	r0, r3
 8102356:	f000 fb97 	bl	8102a88 <RCCEx_PLL2_Config>
 810235a:	4603      	mov	r3, r0
 810235c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102360:	e015      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102362:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102366:	3328      	adds	r3, #40	; 0x28
 8102368:	2102      	movs	r1, #2
 810236a:	4618      	mov	r0, r3
 810236c:	f000 fc3e 	bl	8102bec <RCCEx_PLL3_Config>
 8102370:	4603      	mov	r3, r0
 8102372:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102376:	e00a      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102378:	2301      	movs	r3, #1
 810237a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810237e:	e006      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102380:	bf00      	nop
 8102382:	e004      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102384:	bf00      	nop
 8102386:	e002      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102388:	bf00      	nop
 810238a:	e000      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810238c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810238e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102392:	2b00      	cmp	r3, #0
 8102394:	d10b      	bne.n	81023ae <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102396:	4b8f      	ldr	r3, [pc, #572]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810239a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 810239e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81023a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81023a6:	4a8b      	ldr	r2, [pc, #556]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81023a8:	430b      	orrs	r3, r1
 81023aa:	6593      	str	r3, [r2, #88]	; 0x58
 81023ac:	e003      	b.n	81023b6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81023b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81023b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023be:	f002 0380 	and.w	r3, r2, #128	; 0x80
 81023c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 81023c6:	2300      	movs	r3, #0
 81023c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 81023cc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 81023d0:	460b      	mov	r3, r1
 81023d2:	4313      	orrs	r3, r2
 81023d4:	d055      	beq.n	8102482 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81023d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81023da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81023de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81023e2:	d033      	beq.n	810244c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 81023e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81023e8:	d82c      	bhi.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81023ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81023ee:	d02f      	beq.n	8102450 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 81023f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81023f4:	d826      	bhi.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81023f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81023fa:	d02b      	beq.n	8102454 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 81023fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102400:	d820      	bhi.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8102402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102406:	d012      	beq.n	810242e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8102408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810240c:	d81a      	bhi.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810240e:	2b00      	cmp	r3, #0
 8102410:	d022      	beq.n	8102458 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8102412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102416:	d115      	bne.n	8102444 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810241c:	3308      	adds	r3, #8
 810241e:	2100      	movs	r1, #0
 8102420:	4618      	mov	r0, r3
 8102422:	f000 fb31 	bl	8102a88 <RCCEx_PLL2_Config>
 8102426:	4603      	mov	r3, r0
 8102428:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810242c:	e015      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810242e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102432:	3328      	adds	r3, #40	; 0x28
 8102434:	2102      	movs	r1, #2
 8102436:	4618      	mov	r0, r3
 8102438:	f000 fbd8 	bl	8102bec <RCCEx_PLL3_Config>
 810243c:	4603      	mov	r3, r0
 810243e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102442:	e00a      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102444:	2301      	movs	r3, #1
 8102446:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810244a:	e006      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810244c:	bf00      	nop
 810244e:	e004      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102450:	bf00      	nop
 8102452:	e002      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102454:	bf00      	nop
 8102456:	e000      	b.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102458:	bf00      	nop
    }

    if (ret == HAL_OK)
 810245a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810245e:	2b00      	cmp	r3, #0
 8102460:	d10b      	bne.n	810247a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102462:	4b5c      	ldr	r3, [pc, #368]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102466:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 810246a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810246e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102472:	4a58      	ldr	r2, [pc, #352]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102474:	430b      	orrs	r3, r1
 8102476:	6593      	str	r3, [r2, #88]	; 0x58
 8102478:	e003      	b.n	8102482 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810247a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810247e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102482:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102486:	e9d3 2300 	ldrd	r2, r3, [r3]
 810248a:	f002 0308 	and.w	r3, r2, #8
 810248e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8102492:	2300      	movs	r3, #0
 8102494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8102498:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 810249c:	460b      	mov	r3, r1
 810249e:	4313      	orrs	r3, r2
 81024a0:	d01e      	beq.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81024a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81024aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81024ae:	d10c      	bne.n	81024ca <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81024b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81024b4:	3328      	adds	r3, #40	; 0x28
 81024b6:	2102      	movs	r1, #2
 81024b8:	4618      	mov	r0, r3
 81024ba:	f000 fb97 	bl	8102bec <RCCEx_PLL3_Config>
 81024be:	4603      	mov	r3, r0
 81024c0:	2b00      	cmp	r3, #0
 81024c2:	d002      	beq.n	81024ca <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 81024c4:	2301      	movs	r3, #1
 81024c6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81024ca:	4b42      	ldr	r3, [pc, #264]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81024d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81024da:	4a3e      	ldr	r2, [pc, #248]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81024dc:	430b      	orrs	r3, r1
 81024de:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81024e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024e8:	f002 0310 	and.w	r3, r2, #16
 81024ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 81024f0:	2300      	movs	r3, #0
 81024f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 81024f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81024fa:	460b      	mov	r3, r1
 81024fc:	4313      	orrs	r3, r2
 81024fe:	d01e      	beq.n	810253e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8102500:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810250c:	d10c      	bne.n	8102528 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810250e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102512:	3328      	adds	r3, #40	; 0x28
 8102514:	2102      	movs	r1, #2
 8102516:	4618      	mov	r0, r3
 8102518:	f000 fb68 	bl	8102bec <RCCEx_PLL3_Config>
 810251c:	4603      	mov	r3, r0
 810251e:	2b00      	cmp	r3, #0
 8102520:	d002      	beq.n	8102528 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8102522:	2301      	movs	r3, #1
 8102524:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102528:	4b2a      	ldr	r3, [pc, #168]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810252c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8102530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102538:	4a26      	ldr	r2, [pc, #152]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810253a:	430b      	orrs	r3, r1
 810253c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810253e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102546:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 810254a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 810254e:	2300      	movs	r3, #0
 8102550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8102554:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8102558:	460b      	mov	r3, r1
 810255a:	4313      	orrs	r3, r2
 810255c:	d040      	beq.n	81025e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810255e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810256a:	d022      	beq.n	81025b2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 810256c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102570:	d81b      	bhi.n	81025aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8102572:	2b00      	cmp	r3, #0
 8102574:	d003      	beq.n	810257e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8102576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810257a:	d00b      	beq.n	8102594 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 810257c:	e015      	b.n	81025aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810257e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102582:	3308      	adds	r3, #8
 8102584:	2100      	movs	r1, #0
 8102586:	4618      	mov	r0, r3
 8102588:	f000 fa7e 	bl	8102a88 <RCCEx_PLL2_Config>
 810258c:	4603      	mov	r3, r0
 810258e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102592:	e00f      	b.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102594:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102598:	3328      	adds	r3, #40	; 0x28
 810259a:	2102      	movs	r1, #2
 810259c:	4618      	mov	r0, r3
 810259e:	f000 fb25 	bl	8102bec <RCCEx_PLL3_Config>
 81025a2:	4603      	mov	r3, r0
 81025a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81025a8:	e004      	b.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81025aa:	2301      	movs	r3, #1
 81025ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81025b0:	e000      	b.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 81025b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81025b8:	2b00      	cmp	r3, #0
 81025ba:	d10d      	bne.n	81025d8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81025bc:	4b05      	ldr	r3, [pc, #20]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81025c0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 81025c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81025c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81025cc:	4a01      	ldr	r2, [pc, #4]	; (81025d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81025ce:	430b      	orrs	r3, r1
 81025d0:	6593      	str	r3, [r2, #88]	; 0x58
 81025d2:	e005      	b.n	81025e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 81025d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81025dc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81025e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025e8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 81025ec:	67bb      	str	r3, [r7, #120]	; 0x78
 81025ee:	2300      	movs	r3, #0
 81025f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 81025f2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 81025f6:	460b      	mov	r3, r1
 81025f8:	4313      	orrs	r3, r2
 81025fa:	d03b      	beq.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81025fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102604:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102608:	d01f      	beq.n	810264a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810260a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810260e:	d818      	bhi.n	8102642 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8102610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102614:	d003      	beq.n	810261e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8102616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810261a:	d007      	beq.n	810262c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 810261c:	e011      	b.n	8102642 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810261e:	4b64      	ldr	r3, [pc, #400]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102622:	4a63      	ldr	r2, [pc, #396]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810262a:	e00f      	b.n	810264c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810262c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102630:	3328      	adds	r3, #40	; 0x28
 8102632:	2101      	movs	r1, #1
 8102634:	4618      	mov	r0, r3
 8102636:	f000 fad9 	bl	8102bec <RCCEx_PLL3_Config>
 810263a:	4603      	mov	r3, r0
 810263c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8102640:	e004      	b.n	810264c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102642:	2301      	movs	r3, #1
 8102644:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102648:	e000      	b.n	810264c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810264a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810264c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102650:	2b00      	cmp	r3, #0
 8102652:	d10b      	bne.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102654:	4b56      	ldr	r3, [pc, #344]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102658:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810265c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102664:	4a52      	ldr	r2, [pc, #328]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102666:	430b      	orrs	r3, r1
 8102668:	6553      	str	r3, [r2, #84]	; 0x54
 810266a:	e003      	b.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810266c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102670:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102674:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102678:	e9d3 2300 	ldrd	r2, r3, [r3]
 810267c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8102680:	673b      	str	r3, [r7, #112]	; 0x70
 8102682:	2300      	movs	r3, #0
 8102684:	677b      	str	r3, [r7, #116]	; 0x74
 8102686:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 810268a:	460b      	mov	r3, r1
 810268c:	4313      	orrs	r3, r2
 810268e:	d031      	beq.n	81026f4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8102690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102696:	2b00      	cmp	r3, #0
 8102698:	d003      	beq.n	81026a2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810269a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810269e:	d007      	beq.n	81026b0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81026a0:	e011      	b.n	81026c6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026a2:	4b43      	ldr	r3, [pc, #268]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026a6:	4a42      	ldr	r2, [pc, #264]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81026ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81026ae:	e00e      	b.n	81026ce <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81026b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81026b4:	3308      	adds	r3, #8
 81026b6:	2102      	movs	r1, #2
 81026b8:	4618      	mov	r0, r3
 81026ba:	f000 f9e5 	bl	8102a88 <RCCEx_PLL2_Config>
 81026be:	4603      	mov	r3, r0
 81026c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81026c4:	e003      	b.n	81026ce <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81026c6:	2301      	movs	r3, #1
 81026c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81026cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81026d2:	2b00      	cmp	r3, #0
 81026d4:	d10a      	bne.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81026d6:	4b36      	ldr	r3, [pc, #216]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81026da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81026de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026e4:	4a32      	ldr	r2, [pc, #200]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81026e6:	430b      	orrs	r3, r1
 81026e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 81026ea:	e003      	b.n	81026f4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026ec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81026f0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81026f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026fc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8102700:	66bb      	str	r3, [r7, #104]	; 0x68
 8102702:	2300      	movs	r3, #0
 8102704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8102706:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 810270a:	460b      	mov	r3, r1
 810270c:	4313      	orrs	r3, r2
 810270e:	d00c      	beq.n	810272a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102710:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102714:	3328      	adds	r3, #40	; 0x28
 8102716:	2102      	movs	r1, #2
 8102718:	4618      	mov	r0, r3
 810271a:	f000 fa67 	bl	8102bec <RCCEx_PLL3_Config>
 810271e:	4603      	mov	r3, r0
 8102720:	2b00      	cmp	r3, #0
 8102722:	d002      	beq.n	810272a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8102724:	2301      	movs	r3, #1
 8102726:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810272a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102732:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8102736:	663b      	str	r3, [r7, #96]	; 0x60
 8102738:	2300      	movs	r3, #0
 810273a:	667b      	str	r3, [r7, #100]	; 0x64
 810273c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8102740:	460b      	mov	r3, r1
 8102742:	4313      	orrs	r3, r2
 8102744:	d03a      	beq.n	81027bc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102746:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810274a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810274e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102752:	d018      	beq.n	8102786 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8102754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102758:	d811      	bhi.n	810277e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810275a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810275e:	d014      	beq.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8102760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102764:	d80b      	bhi.n	810277e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8102766:	2b00      	cmp	r3, #0
 8102768:	d011      	beq.n	810278e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810276a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810276e:	d106      	bne.n	810277e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102770:	4b0f      	ldr	r3, [pc, #60]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102774:	4a0e      	ldr	r2, [pc, #56]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8102776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810277a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810277c:	e008      	b.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810277e:	2301      	movs	r3, #1
 8102780:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102784:	e004      	b.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8102786:	bf00      	nop
 8102788:	e002      	b.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810278a:	bf00      	nop
 810278c:	e000      	b.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810278e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102790:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102794:	2b00      	cmp	r3, #0
 8102796:	d10d      	bne.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102798:	4b05      	ldr	r3, [pc, #20]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810279c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81027a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81027a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81027a8:	4a01      	ldr	r2, [pc, #4]	; (81027b0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81027aa:	430b      	orrs	r3, r1
 81027ac:	6553      	str	r3, [r2, #84]	; 0x54
 81027ae:	e005      	b.n	81027bc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 81027b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81027b8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81027bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 81027c8:	65bb      	str	r3, [r7, #88]	; 0x58
 81027ca:	2300      	movs	r3, #0
 81027cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 81027ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 81027d2:	460b      	mov	r3, r1
 81027d4:	4313      	orrs	r3, r2
 81027d6:	d009      	beq.n	81027ec <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81027d8:	4baa      	ldr	r3, [pc, #680]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81027da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81027dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81027e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81027e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81027e6:	4aa7      	ldr	r2, [pc, #668]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81027e8:	430b      	orrs	r3, r1
 81027ea:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81027ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027f4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 81027f8:	653b      	str	r3, [r7, #80]	; 0x50
 81027fa:	2300      	movs	r3, #0
 81027fc:	657b      	str	r3, [r7, #84]	; 0x54
 81027fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8102802:	460b      	mov	r3, r1
 8102804:	4313      	orrs	r3, r2
 8102806:	d00a      	beq.n	810281e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102808:	4b9e      	ldr	r3, [pc, #632]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810280a:	691b      	ldr	r3, [r3, #16]
 810280c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8102810:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102814:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8102818:	4a9a      	ldr	r2, [pc, #616]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810281a:	430b      	orrs	r3, r1
 810281c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810281e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102826:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 810282a:	64bb      	str	r3, [r7, #72]	; 0x48
 810282c:	2300      	movs	r3, #0
 810282e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102830:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8102834:	460b      	mov	r3, r1
 8102836:	4313      	orrs	r3, r2
 8102838:	d009      	beq.n	810284e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810283a:	4b92      	ldr	r3, [pc, #584]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810283c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810283e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8102842:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102848:	4a8e      	ldr	r2, [pc, #568]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810284a:	430b      	orrs	r3, r1
 810284c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810284e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102856:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 810285a:	643b      	str	r3, [r7, #64]	; 0x40
 810285c:	2300      	movs	r3, #0
 810285e:	647b      	str	r3, [r7, #68]	; 0x44
 8102860:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8102864:	460b      	mov	r3, r1
 8102866:	4313      	orrs	r3, r2
 8102868:	d00e      	beq.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810286a:	4b86      	ldr	r3, [pc, #536]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810286c:	691b      	ldr	r3, [r3, #16]
 810286e:	4a85      	ldr	r2, [pc, #532]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102870:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102874:	6113      	str	r3, [r2, #16]
 8102876:	4b83      	ldr	r3, [pc, #524]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102878:	6919      	ldr	r1, [r3, #16]
 810287a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810287e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102882:	4a80      	ldr	r2, [pc, #512]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8102884:	430b      	orrs	r3, r1
 8102886:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102888:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102890:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8102894:	63bb      	str	r3, [r7, #56]	; 0x38
 8102896:	2300      	movs	r3, #0
 8102898:	63fb      	str	r3, [r7, #60]	; 0x3c
 810289a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 810289e:	460b      	mov	r3, r1
 81028a0:	4313      	orrs	r3, r2
 81028a2:	d009      	beq.n	81028b8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81028a4:	4b77      	ldr	r3, [pc, #476]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81028a8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81028ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81028b2:	4a74      	ldr	r2, [pc, #464]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028b4:	430b      	orrs	r3, r1
 81028b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81028b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028c0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 81028c4:	633b      	str	r3, [r7, #48]	; 0x30
 81028c6:	2300      	movs	r3, #0
 81028c8:	637b      	str	r3, [r7, #52]	; 0x34
 81028ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 81028ce:	460b      	mov	r3, r1
 81028d0:	4313      	orrs	r3, r2
 81028d2:	d00a      	beq.n	81028ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81028d4:	4b6b      	ldr	r3, [pc, #428]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028d8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 81028dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81028e4:	4a67      	ldr	r2, [pc, #412]	; (8102a84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81028e6:	430b      	orrs	r3, r1
 81028e8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81028ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028f2:	2100      	movs	r1, #0
 81028f4:	62b9      	str	r1, [r7, #40]	; 0x28
 81028f6:	f003 0301 	and.w	r3, r3, #1
 81028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 81028fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8102900:	460b      	mov	r3, r1
 8102902:	4313      	orrs	r3, r2
 8102904:	d011      	beq.n	810292a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102906:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810290a:	3308      	adds	r3, #8
 810290c:	2100      	movs	r1, #0
 810290e:	4618      	mov	r0, r3
 8102910:	f000 f8ba 	bl	8102a88 <RCCEx_PLL2_Config>
 8102914:	4603      	mov	r3, r0
 8102916:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810291a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810291e:	2b00      	cmp	r3, #0
 8102920:	d003      	beq.n	810292a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102922:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102926:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810292a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102932:	2100      	movs	r1, #0
 8102934:	6239      	str	r1, [r7, #32]
 8102936:	f003 0302 	and.w	r3, r3, #2
 810293a:	627b      	str	r3, [r7, #36]	; 0x24
 810293c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102940:	460b      	mov	r3, r1
 8102942:	4313      	orrs	r3, r2
 8102944:	d011      	beq.n	810296a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102946:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810294a:	3308      	adds	r3, #8
 810294c:	2101      	movs	r1, #1
 810294e:	4618      	mov	r0, r3
 8102950:	f000 f89a 	bl	8102a88 <RCCEx_PLL2_Config>
 8102954:	4603      	mov	r3, r0
 8102956:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810295a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810295e:	2b00      	cmp	r3, #0
 8102960:	d003      	beq.n	810296a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102962:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102966:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810296a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102972:	2100      	movs	r1, #0
 8102974:	61b9      	str	r1, [r7, #24]
 8102976:	f003 0304 	and.w	r3, r3, #4
 810297a:	61fb      	str	r3, [r7, #28]
 810297c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8102980:	460b      	mov	r3, r1
 8102982:	4313      	orrs	r3, r2
 8102984:	d011      	beq.n	81029aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102986:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810298a:	3308      	adds	r3, #8
 810298c:	2102      	movs	r1, #2
 810298e:	4618      	mov	r0, r3
 8102990:	f000 f87a 	bl	8102a88 <RCCEx_PLL2_Config>
 8102994:	4603      	mov	r3, r0
 8102996:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810299a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810299e:	2b00      	cmp	r3, #0
 81029a0:	d003      	beq.n	81029aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81029a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81029aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029b2:	2100      	movs	r1, #0
 81029b4:	6139      	str	r1, [r7, #16]
 81029b6:	f003 0308 	and.w	r3, r3, #8
 81029ba:	617b      	str	r3, [r7, #20]
 81029bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81029c0:	460b      	mov	r3, r1
 81029c2:	4313      	orrs	r3, r2
 81029c4:	d011      	beq.n	81029ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81029c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81029ca:	3328      	adds	r3, #40	; 0x28
 81029cc:	2100      	movs	r1, #0
 81029ce:	4618      	mov	r0, r3
 81029d0:	f000 f90c 	bl	8102bec <RCCEx_PLL3_Config>
 81029d4:	4603      	mov	r3, r0
 81029d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 81029da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81029de:	2b00      	cmp	r3, #0
 81029e0:	d003      	beq.n	81029ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81029e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81029ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029f2:	2100      	movs	r1, #0
 81029f4:	60b9      	str	r1, [r7, #8]
 81029f6:	f003 0310 	and.w	r3, r3, #16
 81029fa:	60fb      	str	r3, [r7, #12]
 81029fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8102a00:	460b      	mov	r3, r1
 8102a02:	4313      	orrs	r3, r2
 8102a04:	d011      	beq.n	8102a2a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102a0a:	3328      	adds	r3, #40	; 0x28
 8102a0c:	2101      	movs	r1, #1
 8102a0e:	4618      	mov	r0, r3
 8102a10:	f000 f8ec 	bl	8102bec <RCCEx_PLL3_Config>
 8102a14:	4603      	mov	r3, r0
 8102a16:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8102a1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102a1e:	2b00      	cmp	r3, #0
 8102a20:	d003      	beq.n	8102a2a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102a26:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a32:	2100      	movs	r1, #0
 8102a34:	6039      	str	r1, [r7, #0]
 8102a36:	f003 0320 	and.w	r3, r3, #32
 8102a3a:	607b      	str	r3, [r7, #4]
 8102a3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102a40:	460b      	mov	r3, r1
 8102a42:	4313      	orrs	r3, r2
 8102a44:	d011      	beq.n	8102a6a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102a4a:	3328      	adds	r3, #40	; 0x28
 8102a4c:	2102      	movs	r1, #2
 8102a4e:	4618      	mov	r0, r3
 8102a50:	f000 f8cc 	bl	8102bec <RCCEx_PLL3_Config>
 8102a54:	4603      	mov	r3, r0
 8102a56:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8102a5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102a5e:	2b00      	cmp	r3, #0
 8102a60:	d003      	beq.n	8102a6a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a62:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102a66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8102a6a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8102a6e:	2b00      	cmp	r3, #0
 8102a70:	d101      	bne.n	8102a76 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8102a72:	2300      	movs	r3, #0
 8102a74:	e000      	b.n	8102a78 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8102a76:	2301      	movs	r3, #1
}
 8102a78:	4618      	mov	r0, r3
 8102a7a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8102a7e:	46bd      	mov	sp, r7
 8102a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102a84:	58024400 	.word	0x58024400

08102a88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102a88:	b580      	push	{r7, lr}
 8102a8a:	b084      	sub	sp, #16
 8102a8c:	af00      	add	r7, sp, #0
 8102a8e:	6078      	str	r0, [r7, #4]
 8102a90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102a92:	2300      	movs	r3, #0
 8102a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102a96:	4b54      	ldr	r3, [pc, #336]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102a9a:	f003 0303 	and.w	r3, r3, #3
 8102a9e:	2b03      	cmp	r3, #3
 8102aa0:	d101      	bne.n	8102aa6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102aa2:	2301      	movs	r3, #1
 8102aa4:	e09b      	b.n	8102bde <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102aa6:	4b50      	ldr	r3, [pc, #320]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102aa8:	681b      	ldr	r3, [r3, #0]
 8102aaa:	4a4f      	ldr	r2, [pc, #316]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102aac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102ab2:	f7fd ff5b 	bl	810096c <HAL_GetTick>
 8102ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102ab8:	e008      	b.n	8102acc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8102aba:	f7fd ff57 	bl	810096c <HAL_GetTick>
 8102abe:	4602      	mov	r2, r0
 8102ac0:	68bb      	ldr	r3, [r7, #8]
 8102ac2:	1ad3      	subs	r3, r2, r3
 8102ac4:	2b02      	cmp	r3, #2
 8102ac6:	d901      	bls.n	8102acc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102ac8:	2303      	movs	r3, #3
 8102aca:	e088      	b.n	8102bde <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102acc:	4b46      	ldr	r3, [pc, #280]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102ad4:	2b00      	cmp	r3, #0
 8102ad6:	d1f0      	bne.n	8102aba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102ad8:	4b43      	ldr	r3, [pc, #268]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102adc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	031b      	lsls	r3, r3, #12
 8102ae6:	4940      	ldr	r1, [pc, #256]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102ae8:	4313      	orrs	r3, r2
 8102aea:	628b      	str	r3, [r1, #40]	; 0x28
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	685b      	ldr	r3, [r3, #4]
 8102af0:	3b01      	subs	r3, #1
 8102af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102af6:	687b      	ldr	r3, [r7, #4]
 8102af8:	689b      	ldr	r3, [r3, #8]
 8102afa:	3b01      	subs	r3, #1
 8102afc:	025b      	lsls	r3, r3, #9
 8102afe:	b29b      	uxth	r3, r3
 8102b00:	431a      	orrs	r2, r3
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	68db      	ldr	r3, [r3, #12]
 8102b06:	3b01      	subs	r3, #1
 8102b08:	041b      	lsls	r3, r3, #16
 8102b0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102b0e:	431a      	orrs	r2, r3
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	691b      	ldr	r3, [r3, #16]
 8102b14:	3b01      	subs	r3, #1
 8102b16:	061b      	lsls	r3, r3, #24
 8102b18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102b1c:	4932      	ldr	r1, [pc, #200]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b1e:	4313      	orrs	r3, r2
 8102b20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102b22:	4b31      	ldr	r3, [pc, #196]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102b2a:	687b      	ldr	r3, [r7, #4]
 8102b2c:	695b      	ldr	r3, [r3, #20]
 8102b2e:	492e      	ldr	r1, [pc, #184]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b30:	4313      	orrs	r3, r2
 8102b32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102b34:	4b2c      	ldr	r3, [pc, #176]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b38:	f023 0220 	bic.w	r2, r3, #32
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	699b      	ldr	r3, [r3, #24]
 8102b40:	4929      	ldr	r1, [pc, #164]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b42:	4313      	orrs	r3, r2
 8102b44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102b46:	4b28      	ldr	r3, [pc, #160]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b4a:	4a27      	ldr	r2, [pc, #156]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b4c:	f023 0310 	bic.w	r3, r3, #16
 8102b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102b52:	4b25      	ldr	r3, [pc, #148]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102b5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102b5e:	687a      	ldr	r2, [r7, #4]
 8102b60:	69d2      	ldr	r2, [r2, #28]
 8102b62:	00d2      	lsls	r2, r2, #3
 8102b64:	4920      	ldr	r1, [pc, #128]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b66:	4313      	orrs	r3, r2
 8102b68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102b6a:	4b1f      	ldr	r3, [pc, #124]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b6e:	4a1e      	ldr	r2, [pc, #120]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b70:	f043 0310 	orr.w	r3, r3, #16
 8102b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8102b76:	683b      	ldr	r3, [r7, #0]
 8102b78:	2b00      	cmp	r3, #0
 8102b7a:	d106      	bne.n	8102b8a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102b7c:	4b1a      	ldr	r3, [pc, #104]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b80:	4a19      	ldr	r2, [pc, #100]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102b88:	e00f      	b.n	8102baa <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8102b8a:	683b      	ldr	r3, [r7, #0]
 8102b8c:	2b01      	cmp	r3, #1
 8102b8e:	d106      	bne.n	8102b9e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102b90:	4b15      	ldr	r3, [pc, #84]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b94:	4a14      	ldr	r2, [pc, #80]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102b9c:	e005      	b.n	8102baa <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102b9e:	4b12      	ldr	r3, [pc, #72]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ba2:	4a11      	ldr	r2, [pc, #68]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102baa:	4b0f      	ldr	r3, [pc, #60]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	4a0e      	ldr	r2, [pc, #56]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102bb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102bb6:	f7fd fed9 	bl	810096c <HAL_GetTick>
 8102bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102bbc:	e008      	b.n	8102bd0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8102bbe:	f7fd fed5 	bl	810096c <HAL_GetTick>
 8102bc2:	4602      	mov	r2, r0
 8102bc4:	68bb      	ldr	r3, [r7, #8]
 8102bc6:	1ad3      	subs	r3, r2, r3
 8102bc8:	2b02      	cmp	r3, #2
 8102bca:	d901      	bls.n	8102bd0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102bcc:	2303      	movs	r3, #3
 8102bce:	e006      	b.n	8102bde <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102bd0:	4b05      	ldr	r3, [pc, #20]	; (8102be8 <RCCEx_PLL2_Config+0x160>)
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102bd8:	2b00      	cmp	r3, #0
 8102bda:	d0f0      	beq.n	8102bbe <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8102bde:	4618      	mov	r0, r3
 8102be0:	3710      	adds	r7, #16
 8102be2:	46bd      	mov	sp, r7
 8102be4:	bd80      	pop	{r7, pc}
 8102be6:	bf00      	nop
 8102be8:	58024400 	.word	0x58024400

08102bec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102bec:	b580      	push	{r7, lr}
 8102bee:	b084      	sub	sp, #16
 8102bf0:	af00      	add	r7, sp, #0
 8102bf2:	6078      	str	r0, [r7, #4]
 8102bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102bf6:	2300      	movs	r3, #0
 8102bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102bfa:	4b54      	ldr	r3, [pc, #336]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102bfe:	f003 0303 	and.w	r3, r3, #3
 8102c02:	2b03      	cmp	r3, #3
 8102c04:	d101      	bne.n	8102c0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102c06:	2301      	movs	r3, #1
 8102c08:	e09b      	b.n	8102d42 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102c0a:	4b50      	ldr	r3, [pc, #320]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	4a4f      	ldr	r2, [pc, #316]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102c16:	f7fd fea9 	bl	810096c <HAL_GetTick>
 8102c1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102c1c:	e008      	b.n	8102c30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8102c1e:	f7fd fea5 	bl	810096c <HAL_GetTick>
 8102c22:	4602      	mov	r2, r0
 8102c24:	68bb      	ldr	r3, [r7, #8]
 8102c26:	1ad3      	subs	r3, r2, r3
 8102c28:	2b02      	cmp	r3, #2
 8102c2a:	d901      	bls.n	8102c30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102c2c:	2303      	movs	r3, #3
 8102c2e:	e088      	b.n	8102d42 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102c30:	4b46      	ldr	r3, [pc, #280]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102c38:	2b00      	cmp	r3, #0
 8102c3a:	d1f0      	bne.n	8102c1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102c3c:	4b43      	ldr	r3, [pc, #268]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	051b      	lsls	r3, r3, #20
 8102c4a:	4940      	ldr	r1, [pc, #256]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102c4c:	4313      	orrs	r3, r2
 8102c4e:	628b      	str	r3, [r1, #40]	; 0x28
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	685b      	ldr	r3, [r3, #4]
 8102c54:	3b01      	subs	r3, #1
 8102c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	689b      	ldr	r3, [r3, #8]
 8102c5e:	3b01      	subs	r3, #1
 8102c60:	025b      	lsls	r3, r3, #9
 8102c62:	b29b      	uxth	r3, r3
 8102c64:	431a      	orrs	r2, r3
 8102c66:	687b      	ldr	r3, [r7, #4]
 8102c68:	68db      	ldr	r3, [r3, #12]
 8102c6a:	3b01      	subs	r3, #1
 8102c6c:	041b      	lsls	r3, r3, #16
 8102c6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102c72:	431a      	orrs	r2, r3
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	691b      	ldr	r3, [r3, #16]
 8102c78:	3b01      	subs	r3, #1
 8102c7a:	061b      	lsls	r3, r3, #24
 8102c7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102c80:	4932      	ldr	r1, [pc, #200]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102c82:	4313      	orrs	r3, r2
 8102c84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102c86:	4b31      	ldr	r3, [pc, #196]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8102c8e:	687b      	ldr	r3, [r7, #4]
 8102c90:	695b      	ldr	r3, [r3, #20]
 8102c92:	492e      	ldr	r1, [pc, #184]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102c94:	4313      	orrs	r3, r2
 8102c96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102c98:	4b2c      	ldr	r3, [pc, #176]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	699b      	ldr	r3, [r3, #24]
 8102ca4:	4929      	ldr	r1, [pc, #164]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102ca6:	4313      	orrs	r3, r2
 8102ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102caa:	4b28      	ldr	r3, [pc, #160]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cae:	4a27      	ldr	r2, [pc, #156]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102cb6:	4b25      	ldr	r3, [pc, #148]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102cbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102cc2:	687a      	ldr	r2, [r7, #4]
 8102cc4:	69d2      	ldr	r2, [r2, #28]
 8102cc6:	00d2      	lsls	r2, r2, #3
 8102cc8:	4920      	ldr	r1, [pc, #128]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102cca:	4313      	orrs	r3, r2
 8102ccc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8102cce:	4b1f      	ldr	r3, [pc, #124]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cd2:	4a1e      	ldr	r2, [pc, #120]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8102cda:	683b      	ldr	r3, [r7, #0]
 8102cdc:	2b00      	cmp	r3, #0
 8102cde:	d106      	bne.n	8102cee <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8102ce0:	4b1a      	ldr	r3, [pc, #104]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ce4:	4a19      	ldr	r2, [pc, #100]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102ce6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102cec:	e00f      	b.n	8102d0e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8102cee:	683b      	ldr	r3, [r7, #0]
 8102cf0:	2b01      	cmp	r3, #1
 8102cf2:	d106      	bne.n	8102d02 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102cf4:	4b15      	ldr	r3, [pc, #84]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cf8:	4a14      	ldr	r2, [pc, #80]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102d00:	e005      	b.n	8102d0e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102d02:	4b12      	ldr	r3, [pc, #72]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d06:	4a11      	ldr	r2, [pc, #68]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8102d0e:	4b0f      	ldr	r3, [pc, #60]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	4a0e      	ldr	r2, [pc, #56]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102d1a:	f7fd fe27 	bl	810096c <HAL_GetTick>
 8102d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102d20:	e008      	b.n	8102d34 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8102d22:	f7fd fe23 	bl	810096c <HAL_GetTick>
 8102d26:	4602      	mov	r2, r0
 8102d28:	68bb      	ldr	r3, [r7, #8]
 8102d2a:	1ad3      	subs	r3, r2, r3
 8102d2c:	2b02      	cmp	r3, #2
 8102d2e:	d901      	bls.n	8102d34 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102d30:	2303      	movs	r3, #3
 8102d32:	e006      	b.n	8102d42 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102d34:	4b05      	ldr	r3, [pc, #20]	; (8102d4c <RCCEx_PLL3_Config+0x160>)
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102d3c:	2b00      	cmp	r3, #0
 8102d3e:	d0f0      	beq.n	8102d22 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8102d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8102d42:	4618      	mov	r0, r3
 8102d44:	3710      	adds	r7, #16
 8102d46:	46bd      	mov	sp, r7
 8102d48:	bd80      	pop	{r7, pc}
 8102d4a:	bf00      	nop
 8102d4c:	58024400 	.word	0x58024400

08102d50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8102d50:	b580      	push	{r7, lr}
 8102d52:	b084      	sub	sp, #16
 8102d54:	af00      	add	r7, sp, #0
 8102d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8102d58:	2301      	movs	r3, #1
 8102d5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	2b00      	cmp	r3, #0
 8102d60:	d073      	beq.n	8102e4a <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8102d62:	687b      	ldr	r3, [r7, #4]
 8102d64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8102d68:	b2db      	uxtb	r3, r3
 8102d6a:	2b00      	cmp	r3, #0
 8102d6c:	d106      	bne.n	8102d7c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	2200      	movs	r2, #0
 8102d72:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8102d76:	6878      	ldr	r0, [r7, #4]
 8102d78:	f7fd fb60 	bl	810043c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	2202      	movs	r2, #2
 8102d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	68db      	ldr	r3, [r3, #12]
 8102d8a:	f003 0310 	and.w	r3, r3, #16
 8102d8e:	2b10      	cmp	r3, #16
 8102d90:	d052      	beq.n	8102e38 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	22ca      	movs	r2, #202	; 0xca
 8102d98:	625a      	str	r2, [r3, #36]	; 0x24
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	2253      	movs	r2, #83	; 0x53
 8102da0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8102da2:	6878      	ldr	r0, [r7, #4]
 8102da4:	f000 f87a 	bl	8102e9c <RTC_EnterInitMode>
 8102da8:	4603      	mov	r3, r0
 8102daa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8102dac:	7bfb      	ldrb	r3, [r7, #15]
 8102dae:	2b00      	cmp	r3, #0
 8102db0:	d126      	bne.n	8102e00 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8102db2:	687b      	ldr	r3, [r7, #4]
 8102db4:	681b      	ldr	r3, [r3, #0]
 8102db6:	689b      	ldr	r3, [r3, #8]
 8102db8:	687a      	ldr	r2, [r7, #4]
 8102dba:	6812      	ldr	r2, [r2, #0]
 8102dbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8102dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8102dc4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	681b      	ldr	r3, [r3, #0]
 8102dca:	6899      	ldr	r1, [r3, #8]
 8102dcc:	687b      	ldr	r3, [r7, #4]
 8102dce:	685a      	ldr	r2, [r3, #4]
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	691b      	ldr	r3, [r3, #16]
 8102dd4:	431a      	orrs	r2, r3
 8102dd6:	687b      	ldr	r3, [r7, #4]
 8102dd8:	699b      	ldr	r3, [r3, #24]
 8102dda:	431a      	orrs	r2, r3
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	430a      	orrs	r2, r1
 8102de2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8102de4:	687b      	ldr	r3, [r7, #4]
 8102de6:	689b      	ldr	r3, [r3, #8]
 8102de8:	0419      	lsls	r1, r3, #16
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	68da      	ldr	r2, [r3, #12]
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	430a      	orrs	r2, r1
 8102df4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8102df6:	6878      	ldr	r0, [r7, #4]
 8102df8:	f000 f884 	bl	8102f04 <RTC_ExitInitMode>
 8102dfc:	4603      	mov	r3, r0
 8102dfe:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8102e00:	7bfb      	ldrb	r3, [r7, #15]
 8102e02:	2b00      	cmp	r3, #0
 8102e04:	d113      	bne.n	8102e2e <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	681b      	ldr	r3, [r3, #0]
 8102e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	681b      	ldr	r3, [r3, #0]
 8102e10:	f022 0203 	bic.w	r2, r2, #3
 8102e14:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	69da      	ldr	r2, [r3, #28]
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	695b      	ldr	r3, [r3, #20]
 8102e24:	431a      	orrs	r2, r3
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	430a      	orrs	r2, r1
 8102e2c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	22ff      	movs	r2, #255	; 0xff
 8102e34:	625a      	str	r2, [r3, #36]	; 0x24
 8102e36:	e001      	b.n	8102e3c <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8102e38:	2300      	movs	r3, #0
 8102e3a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8102e3c:	7bfb      	ldrb	r3, [r7, #15]
 8102e3e:	2b00      	cmp	r3, #0
 8102e40:	d103      	bne.n	8102e4a <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	2201      	movs	r2, #1
 8102e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8102e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8102e4c:	4618      	mov	r0, r3
 8102e4e:	3710      	adds	r7, #16
 8102e50:	46bd      	mov	sp, r7
 8102e52:	bd80      	pop	{r7, pc}

08102e54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8102e54:	b580      	push	{r7, lr}
 8102e56:	b084      	sub	sp, #16
 8102e58:	af00      	add	r7, sp, #0
 8102e5a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	4a0d      	ldr	r2, [pc, #52]	; (8102e98 <HAL_RTC_WaitForSynchro+0x44>)
 8102e62:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8102e64:	f7fd fd82 	bl	810096c <HAL_GetTick>
 8102e68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8102e6a:	e009      	b.n	8102e80 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8102e6c:	f7fd fd7e 	bl	810096c <HAL_GetTick>
 8102e70:	4602      	mov	r2, r0
 8102e72:	68fb      	ldr	r3, [r7, #12]
 8102e74:	1ad3      	subs	r3, r2, r3
 8102e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8102e7a:	d901      	bls.n	8102e80 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8102e7c:	2303      	movs	r3, #3
 8102e7e:	e007      	b.n	8102e90 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	68db      	ldr	r3, [r3, #12]
 8102e86:	f003 0320 	and.w	r3, r3, #32
 8102e8a:	2b00      	cmp	r3, #0
 8102e8c:	d0ee      	beq.n	8102e6c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8102e8e:	2300      	movs	r3, #0
}
 8102e90:	4618      	mov	r0, r3
 8102e92:	3710      	adds	r7, #16
 8102e94:	46bd      	mov	sp, r7
 8102e96:	bd80      	pop	{r7, pc}
 8102e98:	0003ff5f 	.word	0x0003ff5f

08102e9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8102e9c:	b580      	push	{r7, lr}
 8102e9e:	b084      	sub	sp, #16
 8102ea0:	af00      	add	r7, sp, #0
 8102ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102ea4:	2300      	movs	r3, #0
 8102ea6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	68db      	ldr	r3, [r3, #12]
 8102eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102eb2:	2b00      	cmp	r3, #0
 8102eb4:	d120      	bne.n	8102ef8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	f04f 32ff 	mov.w	r2, #4294967295
 8102ebe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8102ec0:	f7fd fd54 	bl	810096c <HAL_GetTick>
 8102ec4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8102ec6:	e00d      	b.n	8102ee4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8102ec8:	f7fd fd50 	bl	810096c <HAL_GetTick>
 8102ecc:	4602      	mov	r2, r0
 8102ece:	68bb      	ldr	r3, [r7, #8]
 8102ed0:	1ad3      	subs	r3, r2, r3
 8102ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8102ed6:	d905      	bls.n	8102ee4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8102ed8:	2303      	movs	r3, #3
 8102eda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	2203      	movs	r2, #3
 8102ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	68db      	ldr	r3, [r3, #12]
 8102eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102eee:	2b00      	cmp	r3, #0
 8102ef0:	d102      	bne.n	8102ef8 <RTC_EnterInitMode+0x5c>
 8102ef2:	7bfb      	ldrb	r3, [r7, #15]
 8102ef4:	2b03      	cmp	r3, #3
 8102ef6:	d1e7      	bne.n	8102ec8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8102ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8102efa:	4618      	mov	r0, r3
 8102efc:	3710      	adds	r7, #16
 8102efe:	46bd      	mov	sp, r7
 8102f00:	bd80      	pop	{r7, pc}
	...

08102f04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8102f04:	b580      	push	{r7, lr}
 8102f06:	b084      	sub	sp, #16
 8102f08:	af00      	add	r7, sp, #0
 8102f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102f0c:	2300      	movs	r3, #0
 8102f0e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8102f10:	4b1a      	ldr	r3, [pc, #104]	; (8102f7c <RTC_ExitInitMode+0x78>)
 8102f12:	68db      	ldr	r3, [r3, #12]
 8102f14:	4a19      	ldr	r2, [pc, #100]	; (8102f7c <RTC_ExitInitMode+0x78>)
 8102f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8102f1a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8102f1c:	4b17      	ldr	r3, [pc, #92]	; (8102f7c <RTC_ExitInitMode+0x78>)
 8102f1e:	689b      	ldr	r3, [r3, #8]
 8102f20:	f003 0320 	and.w	r3, r3, #32
 8102f24:	2b00      	cmp	r3, #0
 8102f26:	d10c      	bne.n	8102f42 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8102f28:	6878      	ldr	r0, [r7, #4]
 8102f2a:	f7ff ff93 	bl	8102e54 <HAL_RTC_WaitForSynchro>
 8102f2e:	4603      	mov	r3, r0
 8102f30:	2b00      	cmp	r3, #0
 8102f32:	d01e      	beq.n	8102f72 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	2203      	movs	r2, #3
 8102f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8102f3c:	2303      	movs	r3, #3
 8102f3e:	73fb      	strb	r3, [r7, #15]
 8102f40:	e017      	b.n	8102f72 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8102f42:	4b0e      	ldr	r3, [pc, #56]	; (8102f7c <RTC_ExitInitMode+0x78>)
 8102f44:	689b      	ldr	r3, [r3, #8]
 8102f46:	4a0d      	ldr	r2, [pc, #52]	; (8102f7c <RTC_ExitInitMode+0x78>)
 8102f48:	f023 0320 	bic.w	r3, r3, #32
 8102f4c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8102f4e:	6878      	ldr	r0, [r7, #4]
 8102f50:	f7ff ff80 	bl	8102e54 <HAL_RTC_WaitForSynchro>
 8102f54:	4603      	mov	r3, r0
 8102f56:	2b00      	cmp	r3, #0
 8102f58:	d005      	beq.n	8102f66 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	2203      	movs	r2, #3
 8102f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8102f62:	2303      	movs	r3, #3
 8102f64:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8102f66:	4b05      	ldr	r3, [pc, #20]	; (8102f7c <RTC_ExitInitMode+0x78>)
 8102f68:	689b      	ldr	r3, [r3, #8]
 8102f6a:	4a04      	ldr	r2, [pc, #16]	; (8102f7c <RTC_ExitInitMode+0x78>)
 8102f6c:	f043 0320 	orr.w	r3, r3, #32
 8102f70:	6093      	str	r3, [r2, #8]
  }

  return status;
 8102f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8102f74:	4618      	mov	r0, r3
 8102f76:	3710      	adds	r7, #16
 8102f78:	46bd      	mov	sp, r7
 8102f7a:	bd80      	pop	{r7, pc}
 8102f7c:	58004000 	.word	0x58004000

08102f80 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8102f80:	b480      	push	{r7}
 8102f82:	b085      	sub	sp, #20
 8102f84:	af00      	add	r7, sp, #0
 8102f86:	6078      	str	r0, [r7, #4]
 8102f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8102f90:	2b01      	cmp	r3, #1
 8102f92:	d101      	bne.n	8102f98 <HAL_RTCEx_SetTamper+0x18>
 8102f94:	2302      	movs	r3, #2
 8102f96:	e0cc      	b.n	8103132 <HAL_RTCEx_SetTamper+0x1b2>
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	2201      	movs	r2, #1
 8102f9c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	2202      	movs	r2, #2
 8102fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8102fa8:	687b      	ldr	r3, [r7, #4]
 8102faa:	681b      	ldr	r3, [r3, #0]
 8102fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102fae:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8102fb0:	683b      	ldr	r3, [r7, #0]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	68fa      	ldr	r2, [r7, #12]
 8102fb6:	4313      	orrs	r3, r2
 8102fb8:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8102fba:	683b      	ldr	r3, [r7, #0]
 8102fbc:	689b      	ldr	r3, [r3, #8]
 8102fbe:	2b08      	cmp	r3, #8
 8102fc0:	d003      	beq.n	8102fca <HAL_RTCEx_SetTamper+0x4a>
 8102fc2:	683b      	ldr	r3, [r7, #0]
 8102fc4:	689b      	ldr	r3, [r3, #8]
 8102fc6:	2b02      	cmp	r3, #2
 8102fc8:	d106      	bne.n	8102fd8 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8102fca:	683b      	ldr	r3, [r7, #0]
 8102fcc:	681b      	ldr	r3, [r3, #0]
 8102fce:	005b      	lsls	r3, r3, #1
 8102fd0:	68fa      	ldr	r2, [r7, #12]
 8102fd2:	4313      	orrs	r3, r2
 8102fd4:	60fb      	str	r3, [r7, #12]
 8102fd6:	e006      	b.n	8102fe6 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8102fd8:	683b      	ldr	r3, [r7, #0]
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	005b      	lsls	r3, r3, #1
 8102fde:	43db      	mvns	r3, r3
 8102fe0:	68fa      	ldr	r2, [r7, #12]
 8102fe2:	4013      	ands	r3, r2
 8102fe4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8102fe6:	683b      	ldr	r3, [r7, #0]
 8102fe8:	68db      	ldr	r3, [r3, #12]
 8102fea:	2b00      	cmp	r3, #0
 8102fec:	d01e      	beq.n	810302c <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8102fee:	683b      	ldr	r3, [r7, #0]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	f003 0301 	and.w	r3, r3, #1
 8102ff6:	2b00      	cmp	r3, #0
 8102ff8:	d003      	beq.n	8103002 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8102ffa:	68fb      	ldr	r3, [r7, #12]
 8102ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103000:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8103002:	683b      	ldr	r3, [r7, #0]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	f003 0308 	and.w	r3, r3, #8
 810300a:	2b00      	cmp	r3, #0
 810300c:	d003      	beq.n	8103016 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 810300e:	68fb      	ldr	r3, [r7, #12]
 8103010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103014:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8103016:	683b      	ldr	r3, [r7, #0]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	f003 0320 	and.w	r3, r3, #32
 810301e:	2b00      	cmp	r3, #0
 8103020:	d022      	beq.n	8103068 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8103022:	68fb      	ldr	r3, [r7, #12]
 8103024:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103028:	60fb      	str	r3, [r7, #12]
 810302a:	e01d      	b.n	8103068 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810302c:	683b      	ldr	r3, [r7, #0]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	f003 0301 	and.w	r3, r3, #1
 8103034:	2b00      	cmp	r3, #0
 8103036:	d003      	beq.n	8103040 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8103038:	68fb      	ldr	r3, [r7, #12]
 810303a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810303e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8103040:	683b      	ldr	r3, [r7, #0]
 8103042:	681b      	ldr	r3, [r3, #0]
 8103044:	f003 0308 	and.w	r3, r3, #8
 8103048:	2b00      	cmp	r3, #0
 810304a:	d003      	beq.n	8103054 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 810304c:	68fb      	ldr	r3, [r7, #12]
 810304e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8103052:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8103054:	683b      	ldr	r3, [r7, #0]
 8103056:	681b      	ldr	r3, [r3, #0]
 8103058:	f003 0320 	and.w	r3, r3, #32
 810305c:	2b00      	cmp	r3, #0
 810305e:	d003      	beq.n	8103068 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8103060:	68fb      	ldr	r3, [r7, #12]
 8103062:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8103066:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8103068:	683b      	ldr	r3, [r7, #0]
 810306a:	691b      	ldr	r3, [r3, #16]
 810306c:	2b00      	cmp	r3, #0
 810306e:	d01e      	beq.n	81030ae <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8103070:	683b      	ldr	r3, [r7, #0]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	f003 0301 	and.w	r3, r3, #1
 8103078:	2b00      	cmp	r3, #0
 810307a:	d003      	beq.n	8103084 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 810307c:	68fb      	ldr	r3, [r7, #12]
 810307e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103082:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8103084:	683b      	ldr	r3, [r7, #0]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	f003 0308 	and.w	r3, r3, #8
 810308c:	2b00      	cmp	r3, #0
 810308e:	d003      	beq.n	8103098 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8103090:	68fb      	ldr	r3, [r7, #12]
 8103092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103096:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8103098:	683b      	ldr	r3, [r7, #0]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	f003 0320 	and.w	r3, r3, #32
 81030a0:	2b00      	cmp	r3, #0
 81030a2:	d022      	beq.n	81030ea <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 81030a4:	68fb      	ldr	r3, [r7, #12]
 81030a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81030aa:	60fb      	str	r3, [r7, #12]
 81030ac:	e01d      	b.n	81030ea <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81030ae:	683b      	ldr	r3, [r7, #0]
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	f003 0301 	and.w	r3, r3, #1
 81030b6:	2b00      	cmp	r3, #0
 81030b8:	d003      	beq.n	81030c2 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 81030ba:	68fb      	ldr	r3, [r7, #12]
 81030bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81030c0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81030c2:	683b      	ldr	r3, [r7, #0]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	f003 0308 	and.w	r3, r3, #8
 81030ca:	2b00      	cmp	r3, #0
 81030cc:	d003      	beq.n	81030d6 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 81030ce:	68fb      	ldr	r3, [r7, #12]
 81030d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81030d4:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81030d6:	683b      	ldr	r3, [r7, #0]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	f003 0320 	and.w	r3, r3, #32
 81030de:	2b00      	cmp	r3, #0
 81030e0:	d003      	beq.n	81030ea <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 81030e2:	68fb      	ldr	r3, [r7, #12]
 81030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81030e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 81030ea:	68fb      	ldr	r3, [r7, #12]
 81030ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81030f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81030f4:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81030f6:	683b      	ldr	r3, [r7, #0]
 81030f8:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 81030fa:	683b      	ldr	r3, [r7, #0]
 81030fc:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81030fe:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8103100:	683b      	ldr	r3, [r7, #0]
 8103102:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8103104:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8103106:	683b      	ldr	r3, [r7, #0]
 8103108:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 810310a:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 810310c:	683b      	ldr	r3, [r7, #0]
 810310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8103110:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8103112:	68fa      	ldr	r2, [r7, #12]
 8103114:	4313      	orrs	r3, r2
 8103116:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	681b      	ldr	r3, [r3, #0]
 810311c:	68fa      	ldr	r2, [r7, #12]
 810311e:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	2201      	movs	r2, #1
 8103124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	2200      	movs	r2, #0
 810312c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8103130:	2300      	movs	r3, #0
}
 8103132:	4618      	mov	r0, r3
 8103134:	3714      	adds	r7, #20
 8103136:	46bd      	mov	sp, r7
 8103138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810313c:	4770      	bx	lr

0810313e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810313e:	b084      	sub	sp, #16
 8103140:	b580      	push	{r7, lr}
 8103142:	b084      	sub	sp, #16
 8103144:	af00      	add	r7, sp, #0
 8103146:	6078      	str	r0, [r7, #4]
 8103148:	f107 001c 	add.w	r0, r7, #28
 810314c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8103150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103152:	2b01      	cmp	r3, #1
 8103154:	d122      	bne.n	810319c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810315a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	68db      	ldr	r3, [r3, #12]
 8103166:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 810316a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810316e:	687a      	ldr	r2, [r7, #4]
 8103170:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	68db      	ldr	r3, [r3, #12]
 8103176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103180:	2b01      	cmp	r3, #1
 8103182:	d105      	bne.n	8103190 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	68db      	ldr	r3, [r3, #12]
 8103188:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8103190:	6878      	ldr	r0, [r7, #4]
 8103192:	f000 faa9 	bl	81036e8 <USB_CoreReset>
 8103196:	4603      	mov	r3, r0
 8103198:	73fb      	strb	r3, [r7, #15]
 810319a:	e01a      	b.n	81031d2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	68db      	ldr	r3, [r3, #12]
 81031a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 81031a8:	6878      	ldr	r0, [r7, #4]
 81031aa:	f000 fa9d 	bl	81036e8 <USB_CoreReset>
 81031ae:	4603      	mov	r3, r0
 81031b0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 81031b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81031b4:	2b00      	cmp	r3, #0
 81031b6:	d106      	bne.n	81031c6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 81031b8:	687b      	ldr	r3, [r7, #4]
 81031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81031bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	639a      	str	r2, [r3, #56]	; 0x38
 81031c4:	e005      	b.n	81031d2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81031ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 81031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81031d4:	2b01      	cmp	r3, #1
 81031d6:	d118      	bne.n	810320a <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031dc:	b29a      	uxth	r2, r3
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031e6:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 81031ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031ee:	687a      	ldr	r2, [r7, #4]
 81031f0:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	689b      	ldr	r3, [r3, #8]
 81031f6:	f043 0206 	orr.w	r2, r3, #6
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 81031fe:	687b      	ldr	r3, [r7, #4]
 8103200:	689b      	ldr	r3, [r3, #8]
 8103202:	f043 0220 	orr.w	r2, r3, #32
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810320a:	7bfb      	ldrb	r3, [r7, #15]
}
 810320c:	4618      	mov	r0, r3
 810320e:	3710      	adds	r7, #16
 8103210:	46bd      	mov	sp, r7
 8103212:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8103216:	b004      	add	sp, #16
 8103218:	4770      	bx	lr

0810321a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810321a:	b480      	push	{r7}
 810321c:	b083      	sub	sp, #12
 810321e:	af00      	add	r7, sp, #0
 8103220:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	689b      	ldr	r3, [r3, #8]
 8103226:	f023 0201 	bic.w	r2, r3, #1
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810322e:	2300      	movs	r3, #0
}
 8103230:	4618      	mov	r0, r3
 8103232:	370c      	adds	r7, #12
 8103234:	46bd      	mov	sp, r7
 8103236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810323a:	4770      	bx	lr

0810323c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810323c:	b580      	push	{r7, lr}
 810323e:	b084      	sub	sp, #16
 8103240:	af00      	add	r7, sp, #0
 8103242:	6078      	str	r0, [r7, #4]
 8103244:	460b      	mov	r3, r1
 8103246:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8103248:	2300      	movs	r3, #0
 810324a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	68db      	ldr	r3, [r3, #12]
 8103250:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8103258:	78fb      	ldrb	r3, [r7, #3]
 810325a:	2b01      	cmp	r3, #1
 810325c:	d115      	bne.n	810328a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	68db      	ldr	r3, [r3, #12]
 8103262:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 810326a:	2001      	movs	r0, #1
 810326c:	f7fd fb8a 	bl	8100984 <HAL_Delay>
      ms++;
 8103270:	68fb      	ldr	r3, [r7, #12]
 8103272:	3301      	adds	r3, #1
 8103274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8103276:	6878      	ldr	r0, [r7, #4]
 8103278:	f000 fa28 	bl	81036cc <USB_GetMode>
 810327c:	4603      	mov	r3, r0
 810327e:	2b01      	cmp	r3, #1
 8103280:	d01e      	beq.n	81032c0 <USB_SetCurrentMode+0x84>
 8103282:	68fb      	ldr	r3, [r7, #12]
 8103284:	2b31      	cmp	r3, #49	; 0x31
 8103286:	d9f0      	bls.n	810326a <USB_SetCurrentMode+0x2e>
 8103288:	e01a      	b.n	81032c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810328a:	78fb      	ldrb	r3, [r7, #3]
 810328c:	2b00      	cmp	r3, #0
 810328e:	d115      	bne.n	81032bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	68db      	ldr	r3, [r3, #12]
 8103294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 810329c:	2001      	movs	r0, #1
 810329e:	f7fd fb71 	bl	8100984 <HAL_Delay>
      ms++;
 81032a2:	68fb      	ldr	r3, [r7, #12]
 81032a4:	3301      	adds	r3, #1
 81032a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 81032a8:	6878      	ldr	r0, [r7, #4]
 81032aa:	f000 fa0f 	bl	81036cc <USB_GetMode>
 81032ae:	4603      	mov	r3, r0
 81032b0:	2b00      	cmp	r3, #0
 81032b2:	d005      	beq.n	81032c0 <USB_SetCurrentMode+0x84>
 81032b4:	68fb      	ldr	r3, [r7, #12]
 81032b6:	2b31      	cmp	r3, #49	; 0x31
 81032b8:	d9f0      	bls.n	810329c <USB_SetCurrentMode+0x60>
 81032ba:	e001      	b.n	81032c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 81032bc:	2301      	movs	r3, #1
 81032be:	e005      	b.n	81032cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 81032c0:	68fb      	ldr	r3, [r7, #12]
 81032c2:	2b32      	cmp	r3, #50	; 0x32
 81032c4:	d101      	bne.n	81032ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 81032c6:	2301      	movs	r3, #1
 81032c8:	e000      	b.n	81032cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 81032ca:	2300      	movs	r3, #0
}
 81032cc:	4618      	mov	r0, r3
 81032ce:	3710      	adds	r7, #16
 81032d0:	46bd      	mov	sp, r7
 81032d2:	bd80      	pop	{r7, pc}

081032d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 81032d4:	b084      	sub	sp, #16
 81032d6:	b580      	push	{r7, lr}
 81032d8:	b086      	sub	sp, #24
 81032da:	af00      	add	r7, sp, #0
 81032dc:	6078      	str	r0, [r7, #4]
 81032de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 81032e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 81032e6:	2300      	movs	r3, #0
 81032e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 81032ee:	2300      	movs	r3, #0
 81032f0:	613b      	str	r3, [r7, #16]
 81032f2:	e009      	b.n	8103308 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 81032f4:	687a      	ldr	r2, [r7, #4]
 81032f6:	693b      	ldr	r3, [r7, #16]
 81032f8:	3340      	adds	r3, #64	; 0x40
 81032fa:	009b      	lsls	r3, r3, #2
 81032fc:	4413      	add	r3, r2
 81032fe:	2200      	movs	r2, #0
 8103300:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8103302:	693b      	ldr	r3, [r7, #16]
 8103304:	3301      	adds	r3, #1
 8103306:	613b      	str	r3, [r7, #16]
 8103308:	693b      	ldr	r3, [r7, #16]
 810330a:	2b0e      	cmp	r3, #14
 810330c:	d9f2      	bls.n	81032f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810330e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103310:	2b00      	cmp	r3, #0
 8103312:	d11c      	bne.n	810334e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8103314:	68fb      	ldr	r3, [r7, #12]
 8103316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810331a:	685b      	ldr	r3, [r3, #4]
 810331c:	68fa      	ldr	r2, [r7, #12]
 810331e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8103322:	f043 0302 	orr.w	r3, r3, #2
 8103326:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810332c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	601a      	str	r2, [r3, #0]
 810334c:	e005      	b.n	810335a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103352:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810335a:	68fb      	ldr	r3, [r7, #12]
 810335c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8103360:	461a      	mov	r2, r3
 8103362:	2300      	movs	r3, #0
 8103364:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8103366:	68fb      	ldr	r3, [r7, #12]
 8103368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810336c:	4619      	mov	r1, r3
 810336e:	68fb      	ldr	r3, [r7, #12]
 8103370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8103374:	461a      	mov	r2, r3
 8103376:	680b      	ldr	r3, [r1, #0]
 8103378:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810337c:	2b01      	cmp	r3, #1
 810337e:	d10c      	bne.n	810339a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8103380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103382:	2b00      	cmp	r3, #0
 8103384:	d104      	bne.n	8103390 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8103386:	2100      	movs	r1, #0
 8103388:	6878      	ldr	r0, [r7, #4]
 810338a:	f000 f965 	bl	8103658 <USB_SetDevSpeed>
 810338e:	e008      	b.n	81033a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8103390:	2101      	movs	r1, #1
 8103392:	6878      	ldr	r0, [r7, #4]
 8103394:	f000 f960 	bl	8103658 <USB_SetDevSpeed>
 8103398:	e003      	b.n	81033a2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810339a:	2103      	movs	r1, #3
 810339c:	6878      	ldr	r0, [r7, #4]
 810339e:	f000 f95b 	bl	8103658 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 81033a2:	2110      	movs	r1, #16
 81033a4:	6878      	ldr	r0, [r7, #4]
 81033a6:	f000 f8f3 	bl	8103590 <USB_FlushTxFifo>
 81033aa:	4603      	mov	r3, r0
 81033ac:	2b00      	cmp	r3, #0
 81033ae:	d001      	beq.n	81033b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 81033b0:	2301      	movs	r3, #1
 81033b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 81033b4:	6878      	ldr	r0, [r7, #4]
 81033b6:	f000 f91f 	bl	81035f8 <USB_FlushRxFifo>
 81033ba:	4603      	mov	r3, r0
 81033bc:	2b00      	cmp	r3, #0
 81033be:	d001      	beq.n	81033c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 81033c0:	2301      	movs	r3, #1
 81033c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 81033c4:	68fb      	ldr	r3, [r7, #12]
 81033c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81033ca:	461a      	mov	r2, r3
 81033cc:	2300      	movs	r3, #0
 81033ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 81033d0:	68fb      	ldr	r3, [r7, #12]
 81033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81033d6:	461a      	mov	r2, r3
 81033d8:	2300      	movs	r3, #0
 81033da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 81033dc:	68fb      	ldr	r3, [r7, #12]
 81033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81033e2:	461a      	mov	r2, r3
 81033e4:	2300      	movs	r3, #0
 81033e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 81033e8:	2300      	movs	r3, #0
 81033ea:	613b      	str	r3, [r7, #16]
 81033ec:	e043      	b.n	8103476 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 81033ee:	693b      	ldr	r3, [r7, #16]
 81033f0:	015a      	lsls	r2, r3, #5
 81033f2:	68fb      	ldr	r3, [r7, #12]
 81033f4:	4413      	add	r3, r2
 81033f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8103400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8103404:	d118      	bne.n	8103438 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8103406:	693b      	ldr	r3, [r7, #16]
 8103408:	2b00      	cmp	r3, #0
 810340a:	d10a      	bne.n	8103422 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810340c:	693b      	ldr	r3, [r7, #16]
 810340e:	015a      	lsls	r2, r3, #5
 8103410:	68fb      	ldr	r3, [r7, #12]
 8103412:	4413      	add	r3, r2
 8103414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8103418:	461a      	mov	r2, r3
 810341a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810341e:	6013      	str	r3, [r2, #0]
 8103420:	e013      	b.n	810344a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8103422:	693b      	ldr	r3, [r7, #16]
 8103424:	015a      	lsls	r2, r3, #5
 8103426:	68fb      	ldr	r3, [r7, #12]
 8103428:	4413      	add	r3, r2
 810342a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810342e:	461a      	mov	r2, r3
 8103430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8103434:	6013      	str	r3, [r2, #0]
 8103436:	e008      	b.n	810344a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8103438:	693b      	ldr	r3, [r7, #16]
 810343a:	015a      	lsls	r2, r3, #5
 810343c:	68fb      	ldr	r3, [r7, #12]
 810343e:	4413      	add	r3, r2
 8103440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8103444:	461a      	mov	r2, r3
 8103446:	2300      	movs	r3, #0
 8103448:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810344a:	693b      	ldr	r3, [r7, #16]
 810344c:	015a      	lsls	r2, r3, #5
 810344e:	68fb      	ldr	r3, [r7, #12]
 8103450:	4413      	add	r3, r2
 8103452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8103456:	461a      	mov	r2, r3
 8103458:	2300      	movs	r3, #0
 810345a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810345c:	693b      	ldr	r3, [r7, #16]
 810345e:	015a      	lsls	r2, r3, #5
 8103460:	68fb      	ldr	r3, [r7, #12]
 8103462:	4413      	add	r3, r2
 8103464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8103468:	461a      	mov	r2, r3
 810346a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810346e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8103470:	693b      	ldr	r3, [r7, #16]
 8103472:	3301      	adds	r3, #1
 8103474:	613b      	str	r3, [r7, #16]
 8103476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103478:	693a      	ldr	r2, [r7, #16]
 810347a:	429a      	cmp	r2, r3
 810347c:	d3b7      	bcc.n	81033ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810347e:	2300      	movs	r3, #0
 8103480:	613b      	str	r3, [r7, #16]
 8103482:	e043      	b.n	810350c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8103484:	693b      	ldr	r3, [r7, #16]
 8103486:	015a      	lsls	r2, r3, #5
 8103488:	68fb      	ldr	r3, [r7, #12]
 810348a:	4413      	add	r3, r2
 810348c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8103496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810349a:	d118      	bne.n	81034ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 810349c:	693b      	ldr	r3, [r7, #16]
 810349e:	2b00      	cmp	r3, #0
 81034a0:	d10a      	bne.n	81034b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 81034a2:	693b      	ldr	r3, [r7, #16]
 81034a4:	015a      	lsls	r2, r3, #5
 81034a6:	68fb      	ldr	r3, [r7, #12]
 81034a8:	4413      	add	r3, r2
 81034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81034ae:	461a      	mov	r2, r3
 81034b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 81034b4:	6013      	str	r3, [r2, #0]
 81034b6:	e013      	b.n	81034e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 81034b8:	693b      	ldr	r3, [r7, #16]
 81034ba:	015a      	lsls	r2, r3, #5
 81034bc:	68fb      	ldr	r3, [r7, #12]
 81034be:	4413      	add	r3, r2
 81034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81034c4:	461a      	mov	r2, r3
 81034c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 81034ca:	6013      	str	r3, [r2, #0]
 81034cc:	e008      	b.n	81034e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 81034ce:	693b      	ldr	r3, [r7, #16]
 81034d0:	015a      	lsls	r2, r3, #5
 81034d2:	68fb      	ldr	r3, [r7, #12]
 81034d4:	4413      	add	r3, r2
 81034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81034da:	461a      	mov	r2, r3
 81034dc:	2300      	movs	r3, #0
 81034de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 81034e0:	693b      	ldr	r3, [r7, #16]
 81034e2:	015a      	lsls	r2, r3, #5
 81034e4:	68fb      	ldr	r3, [r7, #12]
 81034e6:	4413      	add	r3, r2
 81034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81034ec:	461a      	mov	r2, r3
 81034ee:	2300      	movs	r3, #0
 81034f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 81034f2:	693b      	ldr	r3, [r7, #16]
 81034f4:	015a      	lsls	r2, r3, #5
 81034f6:	68fb      	ldr	r3, [r7, #12]
 81034f8:	4413      	add	r3, r2
 81034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81034fe:	461a      	mov	r2, r3
 8103500:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8103504:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8103506:	693b      	ldr	r3, [r7, #16]
 8103508:	3301      	adds	r3, #1
 810350a:	613b      	str	r3, [r7, #16]
 810350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810350e:	693a      	ldr	r2, [r7, #16]
 8103510:	429a      	cmp	r2, r3
 8103512:	d3b7      	bcc.n	8103484 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8103514:	68fb      	ldr	r3, [r7, #12]
 8103516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810351a:	691b      	ldr	r3, [r3, #16]
 810351c:	68fa      	ldr	r2, [r7, #12]
 810351e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8103522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103526:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	2200      	movs	r2, #0
 810352c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8103534:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8103536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103538:	2b00      	cmp	r3, #0
 810353a:	d105      	bne.n	8103548 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	699b      	ldr	r3, [r3, #24]
 8103540:	f043 0210 	orr.w	r2, r3, #16
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	699a      	ldr	r2, [r3, #24]
 810354c:	4b0f      	ldr	r3, [pc, #60]	; (810358c <USB_DevInit+0x2b8>)
 810354e:	4313      	orrs	r3, r2
 8103550:	687a      	ldr	r2, [r7, #4]
 8103552:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8103554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103556:	2b00      	cmp	r3, #0
 8103558:	d005      	beq.n	8103566 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	699b      	ldr	r3, [r3, #24]
 810355e:	f043 0208 	orr.w	r2, r3, #8
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8103566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103568:	2b01      	cmp	r3, #1
 810356a:	d107      	bne.n	810357c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	699b      	ldr	r3, [r3, #24]
 8103570:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103574:	f043 0304 	orr.w	r3, r3, #4
 8103578:	687a      	ldr	r2, [r7, #4]
 810357a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810357c:	7dfb      	ldrb	r3, [r7, #23]
}
 810357e:	4618      	mov	r0, r3
 8103580:	3718      	adds	r7, #24
 8103582:	46bd      	mov	sp, r7
 8103584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8103588:	b004      	add	sp, #16
 810358a:	4770      	bx	lr
 810358c:	803c3800 	.word	0x803c3800

08103590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8103590:	b480      	push	{r7}
 8103592:	b085      	sub	sp, #20
 8103594:	af00      	add	r7, sp, #0
 8103596:	6078      	str	r0, [r7, #4]
 8103598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810359a:	2300      	movs	r3, #0
 810359c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810359e:	68fb      	ldr	r3, [r7, #12]
 81035a0:	3301      	adds	r3, #1
 81035a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81035a4:	68fb      	ldr	r3, [r7, #12]
 81035a6:	4a13      	ldr	r2, [pc, #76]	; (81035f4 <USB_FlushTxFifo+0x64>)
 81035a8:	4293      	cmp	r3, r2
 81035aa:	d901      	bls.n	81035b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 81035ac:	2303      	movs	r3, #3
 81035ae:	e01b      	b.n	81035e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81035b0:	687b      	ldr	r3, [r7, #4]
 81035b2:	691b      	ldr	r3, [r3, #16]
 81035b4:	2b00      	cmp	r3, #0
 81035b6:	daf2      	bge.n	810359e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 81035b8:	2300      	movs	r3, #0
 81035ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 81035bc:	683b      	ldr	r3, [r7, #0]
 81035be:	019b      	lsls	r3, r3, #6
 81035c0:	f043 0220 	orr.w	r2, r3, #32
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81035c8:	68fb      	ldr	r3, [r7, #12]
 81035ca:	3301      	adds	r3, #1
 81035cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81035ce:	68fb      	ldr	r3, [r7, #12]
 81035d0:	4a08      	ldr	r2, [pc, #32]	; (81035f4 <USB_FlushTxFifo+0x64>)
 81035d2:	4293      	cmp	r3, r2
 81035d4:	d901      	bls.n	81035da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 81035d6:	2303      	movs	r3, #3
 81035d8:	e006      	b.n	81035e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	691b      	ldr	r3, [r3, #16]
 81035de:	f003 0320 	and.w	r3, r3, #32
 81035e2:	2b20      	cmp	r3, #32
 81035e4:	d0f0      	beq.n	81035c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 81035e6:	2300      	movs	r3, #0
}
 81035e8:	4618      	mov	r0, r3
 81035ea:	3714      	adds	r7, #20
 81035ec:	46bd      	mov	sp, r7
 81035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035f2:	4770      	bx	lr
 81035f4:	00030d40 	.word	0x00030d40

081035f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 81035f8:	b480      	push	{r7}
 81035fa:	b085      	sub	sp, #20
 81035fc:	af00      	add	r7, sp, #0
 81035fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8103600:	2300      	movs	r3, #0
 8103602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8103604:	68fb      	ldr	r3, [r7, #12]
 8103606:	3301      	adds	r3, #1
 8103608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810360a:	68fb      	ldr	r3, [r7, #12]
 810360c:	4a11      	ldr	r2, [pc, #68]	; (8103654 <USB_FlushRxFifo+0x5c>)
 810360e:	4293      	cmp	r3, r2
 8103610:	d901      	bls.n	8103616 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8103612:	2303      	movs	r3, #3
 8103614:	e018      	b.n	8103648 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	691b      	ldr	r3, [r3, #16]
 810361a:	2b00      	cmp	r3, #0
 810361c:	daf2      	bge.n	8103604 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810361e:	2300      	movs	r3, #0
 8103620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	2210      	movs	r2, #16
 8103626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8103628:	68fb      	ldr	r3, [r7, #12]
 810362a:	3301      	adds	r3, #1
 810362c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810362e:	68fb      	ldr	r3, [r7, #12]
 8103630:	4a08      	ldr	r2, [pc, #32]	; (8103654 <USB_FlushRxFifo+0x5c>)
 8103632:	4293      	cmp	r3, r2
 8103634:	d901      	bls.n	810363a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8103636:	2303      	movs	r3, #3
 8103638:	e006      	b.n	8103648 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810363a:	687b      	ldr	r3, [r7, #4]
 810363c:	691b      	ldr	r3, [r3, #16]
 810363e:	f003 0310 	and.w	r3, r3, #16
 8103642:	2b10      	cmp	r3, #16
 8103644:	d0f0      	beq.n	8103628 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8103646:	2300      	movs	r3, #0
}
 8103648:	4618      	mov	r0, r3
 810364a:	3714      	adds	r7, #20
 810364c:	46bd      	mov	sp, r7
 810364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103652:	4770      	bx	lr
 8103654:	00030d40 	.word	0x00030d40

08103658 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8103658:	b480      	push	{r7}
 810365a:	b085      	sub	sp, #20
 810365c:	af00      	add	r7, sp, #0
 810365e:	6078      	str	r0, [r7, #4]
 8103660:	460b      	mov	r3, r1
 8103662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8103668:	68fb      	ldr	r3, [r7, #12]
 810366a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810366e:	681a      	ldr	r2, [r3, #0]
 8103670:	78fb      	ldrb	r3, [r7, #3]
 8103672:	68f9      	ldr	r1, [r7, #12]
 8103674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8103678:	4313      	orrs	r3, r2
 810367a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810367c:	2300      	movs	r3, #0
}
 810367e:	4618      	mov	r0, r3
 8103680:	3714      	adds	r7, #20
 8103682:	46bd      	mov	sp, r7
 8103684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103688:	4770      	bx	lr

0810368a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 810368a:	b480      	push	{r7}
 810368c:	b085      	sub	sp, #20
 810368e:	af00      	add	r7, sp, #0
 8103690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8103692:	687b      	ldr	r3, [r7, #4]
 8103694:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8103696:	68fb      	ldr	r3, [r7, #12]
 8103698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810369c:	681b      	ldr	r3, [r3, #0]
 810369e:	68fa      	ldr	r2, [r7, #12]
 81036a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 81036a4:	f023 0303 	bic.w	r3, r3, #3
 81036a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 81036aa:	68fb      	ldr	r3, [r7, #12]
 81036ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81036b0:	685b      	ldr	r3, [r3, #4]
 81036b2:	68fa      	ldr	r2, [r7, #12]
 81036b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81036b8:	f043 0302 	orr.w	r3, r3, #2
 81036bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 81036be:	2300      	movs	r3, #0
}
 81036c0:	4618      	mov	r0, r3
 81036c2:	3714      	adds	r7, #20
 81036c4:	46bd      	mov	sp, r7
 81036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036ca:	4770      	bx	lr

081036cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 81036cc:	b480      	push	{r7}
 81036ce:	b083      	sub	sp, #12
 81036d0:	af00      	add	r7, sp, #0
 81036d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	695b      	ldr	r3, [r3, #20]
 81036d8:	f003 0301 	and.w	r3, r3, #1
}
 81036dc:	4618      	mov	r0, r3
 81036de:	370c      	adds	r7, #12
 81036e0:	46bd      	mov	sp, r7
 81036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036e6:	4770      	bx	lr

081036e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 81036e8:	b480      	push	{r7}
 81036ea:	b085      	sub	sp, #20
 81036ec:	af00      	add	r7, sp, #0
 81036ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81036f0:	2300      	movs	r3, #0
 81036f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81036f4:	68fb      	ldr	r3, [r7, #12]
 81036f6:	3301      	adds	r3, #1
 81036f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81036fa:	68fb      	ldr	r3, [r7, #12]
 81036fc:	4a13      	ldr	r2, [pc, #76]	; (810374c <USB_CoreReset+0x64>)
 81036fe:	4293      	cmp	r3, r2
 8103700:	d901      	bls.n	8103706 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8103702:	2303      	movs	r3, #3
 8103704:	e01b      	b.n	810373e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	691b      	ldr	r3, [r3, #16]
 810370a:	2b00      	cmp	r3, #0
 810370c:	daf2      	bge.n	81036f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810370e:	2300      	movs	r3, #0
 8103710:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	691b      	ldr	r3, [r3, #16]
 8103716:	f043 0201 	orr.w	r2, r3, #1
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810371e:	68fb      	ldr	r3, [r7, #12]
 8103720:	3301      	adds	r3, #1
 8103722:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8103724:	68fb      	ldr	r3, [r7, #12]
 8103726:	4a09      	ldr	r2, [pc, #36]	; (810374c <USB_CoreReset+0x64>)
 8103728:	4293      	cmp	r3, r2
 810372a:	d901      	bls.n	8103730 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810372c:	2303      	movs	r3, #3
 810372e:	e006      	b.n	810373e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	691b      	ldr	r3, [r3, #16]
 8103734:	f003 0301 	and.w	r3, r3, #1
 8103738:	2b01      	cmp	r3, #1
 810373a:	d0f0      	beq.n	810371e <USB_CoreReset+0x36>

  return HAL_OK;
 810373c:	2300      	movs	r3, #0
}
 810373e:	4618      	mov	r0, r3
 8103740:	3714      	adds	r7, #20
 8103742:	46bd      	mov	sp, r7
 8103744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103748:	4770      	bx	lr
 810374a:	bf00      	nop
 810374c:	00030d40 	.word	0x00030d40

08103750 <__libc_init_array>:
 8103750:	b570      	push	{r4, r5, r6, lr}
 8103752:	4d0d      	ldr	r5, [pc, #52]	; (8103788 <__libc_init_array+0x38>)
 8103754:	4c0d      	ldr	r4, [pc, #52]	; (810378c <__libc_init_array+0x3c>)
 8103756:	1b64      	subs	r4, r4, r5
 8103758:	10a4      	asrs	r4, r4, #2
 810375a:	2600      	movs	r6, #0
 810375c:	42a6      	cmp	r6, r4
 810375e:	d109      	bne.n	8103774 <__libc_init_array+0x24>
 8103760:	4d0b      	ldr	r5, [pc, #44]	; (8103790 <__libc_init_array+0x40>)
 8103762:	4c0c      	ldr	r4, [pc, #48]	; (8103794 <__libc_init_array+0x44>)
 8103764:	f000 f820 	bl	81037a8 <_init>
 8103768:	1b64      	subs	r4, r4, r5
 810376a:	10a4      	asrs	r4, r4, #2
 810376c:	2600      	movs	r6, #0
 810376e:	42a6      	cmp	r6, r4
 8103770:	d105      	bne.n	810377e <__libc_init_array+0x2e>
 8103772:	bd70      	pop	{r4, r5, r6, pc}
 8103774:	f855 3b04 	ldr.w	r3, [r5], #4
 8103778:	4798      	blx	r3
 810377a:	3601      	adds	r6, #1
 810377c:	e7ee      	b.n	810375c <__libc_init_array+0xc>
 810377e:	f855 3b04 	ldr.w	r3, [r5], #4
 8103782:	4798      	blx	r3
 8103784:	3601      	adds	r6, #1
 8103786:	e7f2      	b.n	810376e <__libc_init_array+0x1e>
 8103788:	081037d0 	.word	0x081037d0
 810378c:	081037d0 	.word	0x081037d0
 8103790:	081037d0 	.word	0x081037d0
 8103794:	081037d4 	.word	0x081037d4

08103798 <memset>:
 8103798:	4402      	add	r2, r0
 810379a:	4603      	mov	r3, r0
 810379c:	4293      	cmp	r3, r2
 810379e:	d100      	bne.n	81037a2 <memset+0xa>
 81037a0:	4770      	bx	lr
 81037a2:	f803 1b01 	strb.w	r1, [r3], #1
 81037a6:	e7f9      	b.n	810379c <memset+0x4>

081037a8 <_init>:
 81037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81037aa:	bf00      	nop
 81037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81037ae:	bc08      	pop	{r3}
 81037b0:	469e      	mov	lr, r3
 81037b2:	4770      	bx	lr

081037b4 <_fini>:
 81037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81037b6:	bf00      	nop
 81037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81037ba:	bc08      	pop	{r3}
 81037bc:	469e      	mov	lr, r3
 81037be:	4770      	bx	lr
