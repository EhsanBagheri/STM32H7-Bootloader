
stm32h747i-bootloader_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b0  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08106b48  08106b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08106b58  08106b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08106b5c  08106b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08106b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RxDecripSection 00000060  10000010  08106b70  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 00000060  10000070  08106bd0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000850  100000d0  08106c30  000200d0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  10000920  08106c30  00020920  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001d639  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003f9e  00000000  00000000  0003d739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001520  00000000  00000000  000416d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001350  00000000  00000000  00042bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00044181  00000000  00000000  00043f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001da58  00000000  00000000  000880c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a6c30  00000000  00000000  000a5b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0024c751  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000056cc  00000000  00000000  0024c7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08106b30 	.word	0x08106b30

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	08106b30 	.word	0x08106b30

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 810030c:	4b1e      	ldr	r3, [pc, #120]	; (8100388 <MX_ETH_Init+0x80>)
 810030e:	4a1f      	ldr	r2, [pc, #124]	; (810038c <MX_ETH_Init+0x84>)
 8100310:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8100312:	4b1f      	ldr	r3, [pc, #124]	; (8100390 <MX_ETH_Init+0x88>)
 8100314:	2200      	movs	r2, #0
 8100316:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8100318:	4b1d      	ldr	r3, [pc, #116]	; (8100390 <MX_ETH_Init+0x88>)
 810031a:	2280      	movs	r2, #128	; 0x80
 810031c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 810031e:	4b1c      	ldr	r3, [pc, #112]	; (8100390 <MX_ETH_Init+0x88>)
 8100320:	22e1      	movs	r2, #225	; 0xe1
 8100322:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8100324:	4b1a      	ldr	r3, [pc, #104]	; (8100390 <MX_ETH_Init+0x88>)
 8100326:	2200      	movs	r2, #0
 8100328:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 810032a:	4b19      	ldr	r3, [pc, #100]	; (8100390 <MX_ETH_Init+0x88>)
 810032c:	2200      	movs	r2, #0
 810032e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100330:	4b17      	ldr	r3, [pc, #92]	; (8100390 <MX_ETH_Init+0x88>)
 8100332:	2200      	movs	r2, #0
 8100334:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8100336:	4b14      	ldr	r3, [pc, #80]	; (8100388 <MX_ETH_Init+0x80>)
 8100338:	4a15      	ldr	r2, [pc, #84]	; (8100390 <MX_ETH_Init+0x88>)
 810033a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 810033c:	4b12      	ldr	r3, [pc, #72]	; (8100388 <MX_ETH_Init+0x80>)
 810033e:	2201      	movs	r2, #1
 8100340:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100342:	4b11      	ldr	r3, [pc, #68]	; (8100388 <MX_ETH_Init+0x80>)
 8100344:	4a13      	ldr	r2, [pc, #76]	; (8100394 <MX_ETH_Init+0x8c>)
 8100346:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100348:	4b0f      	ldr	r3, [pc, #60]	; (8100388 <MX_ETH_Init+0x80>)
 810034a:	4a13      	ldr	r2, [pc, #76]	; (8100398 <MX_ETH_Init+0x90>)
 810034c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 810034e:	4b0e      	ldr	r3, [pc, #56]	; (8100388 <MX_ETH_Init+0x80>)
 8100350:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8100354:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8100356:	480c      	ldr	r0, [pc, #48]	; (8100388 <MX_ETH_Init+0x80>)
 8100358:	f001 fb6e 	bl	8101a38 <HAL_ETH_Init>
 810035c:	4603      	mov	r3, r0
 810035e:	2b00      	cmp	r3, #0
 8100360:	d001      	beq.n	8100366 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8100362:	f000 fbaf 	bl	8100ac4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8100366:	2238      	movs	r2, #56	; 0x38
 8100368:	2100      	movs	r1, #0
 810036a:	480c      	ldr	r0, [pc, #48]	; (810039c <MX_ETH_Init+0x94>)
 810036c:	f006 fbd8 	bl	8106b20 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100370:	4b0a      	ldr	r3, [pc, #40]	; (810039c <MX_ETH_Init+0x94>)
 8100372:	2221      	movs	r2, #33	; 0x21
 8100374:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100376:	4b09      	ldr	r3, [pc, #36]	; (810039c <MX_ETH_Init+0x94>)
 8100378:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 810037c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 810037e:	4b07      	ldr	r3, [pc, #28]	; (810039c <MX_ETH_Init+0x94>)
 8100380:	2200      	movs	r2, #0
 8100382:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100384:	bf00      	nop
 8100386:	bd80      	pop	{r7, pc}
 8100388:	10000124 	.word	0x10000124
 810038c:	40028000 	.word	0x40028000
 8100390:	100001d4 	.word	0x100001d4
 8100394:	10000070 	.word	0x10000070
 8100398:	10000010 	.word	0x10000010
 810039c:	100000ec 	.word	0x100000ec

081003a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 81003a0:	b580      	push	{r7, lr}
 81003a2:	b08e      	sub	sp, #56	; 0x38
 81003a4:	af00      	add	r7, sp, #0
 81003a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81003ac:	2200      	movs	r2, #0
 81003ae:	601a      	str	r2, [r3, #0]
 81003b0:	605a      	str	r2, [r3, #4]
 81003b2:	609a      	str	r2, [r3, #8]
 81003b4:	60da      	str	r2, [r3, #12]
 81003b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 81003b8:	687b      	ldr	r3, [r7, #4]
 81003ba:	681b      	ldr	r3, [r3, #0]
 81003bc:	4a49      	ldr	r2, [pc, #292]	; (81004e4 <HAL_ETH_MspInit+0x144>)
 81003be:	4293      	cmp	r3, r2
 81003c0:	f040 808b 	bne.w	81004da <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81003c4:	4b48      	ldr	r3, [pc, #288]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 81003c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81003ca:	4a47      	ldr	r2, [pc, #284]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 81003cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81003d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81003d4:	4b44      	ldr	r3, [pc, #272]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 81003d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81003da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81003de:	623b      	str	r3, [r7, #32]
 81003e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 81003e2:	4b41      	ldr	r3, [pc, #260]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 81003e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81003e8:	4a3f      	ldr	r2, [pc, #252]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 81003ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81003ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81003f2:	4b3d      	ldr	r3, [pc, #244]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 81003f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81003f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81003fc:	61fb      	str	r3, [r7, #28]
 81003fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8100400:	4b39      	ldr	r3, [pc, #228]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 8100402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100406:	4a38      	ldr	r2, [pc, #224]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 8100408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810040c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100410:	4b35      	ldr	r3, [pc, #212]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 8100412:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810041a:	61bb      	str	r3, [r7, #24]
 810041c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810041e:	4b32      	ldr	r3, [pc, #200]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 8100420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100424:	4a30      	ldr	r2, [pc, #192]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 8100426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810042a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810042e:	4b2e      	ldr	r3, [pc, #184]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 8100430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100438:	617b      	str	r3, [r7, #20]
 810043a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810043c:	4b2a      	ldr	r3, [pc, #168]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 810043e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100442:	4a29      	ldr	r2, [pc, #164]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 8100444:	f043 0304 	orr.w	r3, r3, #4
 8100448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810044c:	4b26      	ldr	r3, [pc, #152]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 810044e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100452:	f003 0304 	and.w	r3, r3, #4
 8100456:	613b      	str	r3, [r7, #16]
 8100458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810045a:	4b23      	ldr	r3, [pc, #140]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 810045c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100460:	4a21      	ldr	r2, [pc, #132]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 8100462:	f043 0301 	orr.w	r3, r3, #1
 8100466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810046a:	4b1f      	ldr	r3, [pc, #124]	; (81004e8 <HAL_ETH_MspInit+0x148>)
 810046c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100470:	f003 0301 	and.w	r3, r3, #1
 8100474:	60fb      	str	r3, [r7, #12]
 8100476:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 8100478:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 810047c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810047e:	2302      	movs	r3, #2
 8100480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100482:	2300      	movs	r3, #0
 8100484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100486:	2300      	movs	r3, #0
 8100488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810048a:	230b      	movs	r3, #11
 810048c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810048e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100492:	4619      	mov	r1, r3
 8100494:	4815      	ldr	r0, [pc, #84]	; (81004ec <HAL_ETH_MspInit+0x14c>)
 8100496:	f001 fef3 	bl	8102280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 810049a:	2332      	movs	r3, #50	; 0x32
 810049c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810049e:	2302      	movs	r3, #2
 81004a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81004a2:	2300      	movs	r3, #0
 81004a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81004a6:	2300      	movs	r3, #0
 81004a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81004aa:	230b      	movs	r3, #11
 81004ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81004ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81004b2:	4619      	mov	r1, r3
 81004b4:	480e      	ldr	r0, [pc, #56]	; (81004f0 <HAL_ETH_MspInit+0x150>)
 81004b6:	f001 fee3 	bl	8102280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 81004ba:	2386      	movs	r3, #134	; 0x86
 81004bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81004be:	2302      	movs	r3, #2
 81004c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81004c2:	2300      	movs	r3, #0
 81004c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81004c6:	2300      	movs	r3, #0
 81004c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81004ca:	230b      	movs	r3, #11
 81004cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81004ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81004d2:	4619      	mov	r1, r3
 81004d4:	4807      	ldr	r0, [pc, #28]	; (81004f4 <HAL_ETH_MspInit+0x154>)
 81004d6:	f001 fed3 	bl	8102280 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 81004da:	bf00      	nop
 81004dc:	3738      	adds	r7, #56	; 0x38
 81004de:	46bd      	mov	sp, r7
 81004e0:	bd80      	pop	{r7, pc}
 81004e2:	bf00      	nop
 81004e4:	40028000 	.word	0x40028000
 81004e8:	58024400 	.word	0x58024400
 81004ec:	58021800 	.word	0x58021800
 81004f0:	58020800 	.word	0x58020800
 81004f4:	58020000 	.word	0x58020000

081004f8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 81004f8:	b580      	push	{r7, lr}
 81004fa:	b088      	sub	sp, #32
 81004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 81004fe:	1d3b      	adds	r3, r7, #4
 8100500:	2200      	movs	r2, #0
 8100502:	601a      	str	r2, [r3, #0]
 8100504:	605a      	str	r2, [r3, #4]
 8100506:	609a      	str	r2, [r3, #8]
 8100508:	60da      	str	r2, [r3, #12]
 810050a:	611a      	str	r2, [r3, #16]
 810050c:	615a      	str	r2, [r3, #20]
 810050e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8100510:	4b1e      	ldr	r3, [pc, #120]	; (810058c <MX_FMC_Init+0x94>)
 8100512:	4a1f      	ldr	r2, [pc, #124]	; (8100590 <MX_FMC_Init+0x98>)
 8100514:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100516:	4b1d      	ldr	r3, [pc, #116]	; (810058c <MX_FMC_Init+0x94>)
 8100518:	2201      	movs	r2, #1
 810051a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 810051c:	4b1b      	ldr	r3, [pc, #108]	; (810058c <MX_FMC_Init+0x94>)
 810051e:	2200      	movs	r2, #0
 8100520:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8100522:	4b1a      	ldr	r3, [pc, #104]	; (810058c <MX_FMC_Init+0x94>)
 8100524:	2208      	movs	r2, #8
 8100526:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8100528:	4b18      	ldr	r3, [pc, #96]	; (810058c <MX_FMC_Init+0x94>)
 810052a:	2220      	movs	r2, #32
 810052c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 810052e:	4b17      	ldr	r3, [pc, #92]	; (810058c <MX_FMC_Init+0x94>)
 8100530:	2200      	movs	r2, #0
 8100532:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8100534:	4b15      	ldr	r3, [pc, #84]	; (810058c <MX_FMC_Init+0x94>)
 8100536:	2280      	movs	r2, #128	; 0x80
 8100538:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 810053a:	4b14      	ldr	r3, [pc, #80]	; (810058c <MX_FMC_Init+0x94>)
 810053c:	2200      	movs	r2, #0
 810053e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8100540:	4b12      	ldr	r3, [pc, #72]	; (810058c <MX_FMC_Init+0x94>)
 8100542:	2200      	movs	r2, #0
 8100544:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8100546:	4b11      	ldr	r3, [pc, #68]	; (810058c <MX_FMC_Init+0x94>)
 8100548:	2200      	movs	r2, #0
 810054a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 810054c:	4b0f      	ldr	r3, [pc, #60]	; (810058c <MX_FMC_Init+0x94>)
 810054e:	2200      	movs	r2, #0
 8100550:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8100552:	2310      	movs	r3, #16
 8100554:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8100556:	2310      	movs	r3, #16
 8100558:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 810055a:	2310      	movs	r3, #16
 810055c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 810055e:	2310      	movs	r3, #16
 8100560:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8100562:	2310      	movs	r3, #16
 8100564:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8100566:	2310      	movs	r3, #16
 8100568:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 810056a:	2310      	movs	r3, #16
 810056c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 810056e:	1d3b      	adds	r3, r7, #4
 8100570:	4619      	mov	r1, r3
 8100572:	4806      	ldr	r0, [pc, #24]	; (810058c <MX_FMC_Init+0x94>)
 8100574:	f005 fe36 	bl	81061e4 <HAL_SDRAM_Init>
 8100578:	4603      	mov	r3, r0
 810057a:	2b00      	cmp	r3, #0
 810057c:	d001      	beq.n	8100582 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 810057e:	f000 faa1 	bl	8100ac4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8100582:	bf00      	nop
 8100584:	3720      	adds	r7, #32
 8100586:	46bd      	mov	sp, r7
 8100588:	bd80      	pop	{r7, pc}
 810058a:	bf00      	nop
 810058c:	100001dc 	.word	0x100001dc
 8100590:	52004140 	.word	0x52004140

08100594 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8100594:	b580      	push	{r7, lr}
 8100596:	b0ba      	sub	sp, #232	; 0xe8
 8100598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810059a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810059e:	2200      	movs	r2, #0
 81005a0:	601a      	str	r2, [r3, #0]
 81005a2:	605a      	str	r2, [r3, #4]
 81005a4:	609a      	str	r2, [r3, #8]
 81005a6:	60da      	str	r2, [r3, #12]
 81005a8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 81005aa:	4b5c      	ldr	r3, [pc, #368]	; (810071c <HAL_FMC_MspInit+0x188>)
 81005ac:	681b      	ldr	r3, [r3, #0]
 81005ae:	2b00      	cmp	r3, #0
 81005b0:	f040 80b0 	bne.w	8100714 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 81005b4:	4b59      	ldr	r3, [pc, #356]	; (810071c <HAL_FMC_MspInit+0x188>)
 81005b6:	2201      	movs	r2, #1
 81005b8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81005ba:	f107 0308 	add.w	r3, r7, #8
 81005be:	22c8      	movs	r2, #200	; 0xc8
 81005c0:	2100      	movs	r1, #0
 81005c2:	4618      	mov	r0, r3
 81005c4:	f006 faac 	bl	8106b20 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 81005c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81005cc:	f04f 0300 	mov.w	r3, #0
 81005d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 81005d4:	2300      	movs	r3, #0
 81005d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81005d8:	f107 0308 	add.w	r3, r7, #8
 81005dc:	4618      	mov	r0, r3
 81005de:	f002 fbe7 	bl	8102db0 <HAL_RCCEx_PeriphCLKConfig>
 81005e2:	4603      	mov	r3, r0
 81005e4:	2b00      	cmp	r3, #0
 81005e6:	d001      	beq.n	81005ec <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 81005e8:	f000 fa6c 	bl	8100ac4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 81005ec:	4b4c      	ldr	r3, [pc, #304]	; (8100720 <HAL_FMC_MspInit+0x18c>)
 81005ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81005f2:	4a4b      	ldr	r2, [pc, #300]	; (8100720 <HAL_FMC_MspInit+0x18c>)
 81005f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81005f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 81005fc:	4b48      	ldr	r3, [pc, #288]	; (8100720 <HAL_FMC_MspInit+0x18c>)
 81005fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8100606:	607b      	str	r3, [r7, #4]
 8100608:	687b      	ldr	r3, [r7, #4]
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 810060a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 810060e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100612:	2302      	movs	r3, #2
 8100614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100618:	2300      	movs	r3, #0
 810061a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810061e:	2303      	movs	r3, #3
 8100620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100624:	230c      	movs	r3, #12
 8100626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 810062a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810062e:	4619      	mov	r1, r3
 8100630:	483c      	ldr	r0, [pc, #240]	; (8100724 <HAL_FMC_MspInit+0x190>)
 8100632:	f001 fe25 	bl	8102280 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 8100636:	f64f 7383 	movw	r3, #65411	; 0xff83
 810063a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810063e:	2302      	movs	r3, #2
 8100640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100644:	2300      	movs	r3, #0
 8100646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810064a:	2303      	movs	r3, #3
 810064c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100650:	230c      	movs	r3, #12
 8100652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100656:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810065a:	4619      	mov	r1, r3
 810065c:	4832      	ldr	r0, [pc, #200]	; (8100728 <HAL_FMC_MspInit+0x194>)
 810065e:	f001 fe0f 	bl	8102280 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 8100662:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8100666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810066a:	2302      	movs	r3, #2
 810066c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100670:	2300      	movs	r3, #0
 8100672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100676:	2303      	movs	r3, #3
 8100678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810067c:	230c      	movs	r3, #12
 810067e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100682:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100686:	4619      	mov	r1, r3
 8100688:	4828      	ldr	r0, [pc, #160]	; (810072c <HAL_FMC_MspInit+0x198>)
 810068a:	f001 fdf9 	bl	8102280 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|FMC_BA0_Pin|FMC_A12_Pin
 810068e:	f248 1317 	movw	r3, #33047	; 0x8117
 8100692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100696:	2302      	movs	r3, #2
 8100698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810069c:	2300      	movs	r3, #0
 810069e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81006a2:	2303      	movs	r3, #3
 81006a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81006a8:	230c      	movs	r3, #12
 81006aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81006ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81006b2:	4619      	mov	r1, r3
 81006b4:	481e      	ldr	r0, [pc, #120]	; (8100730 <HAL_FMC_MspInit+0x19c>)
 81006b6:	f001 fde3 	bl	8102280 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 81006ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 81006be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006c2:	2302      	movs	r3, #2
 81006c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006c8:	2300      	movs	r3, #0
 81006ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81006ce:	2303      	movs	r3, #3
 81006d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81006d4:	230c      	movs	r3, #12
 81006d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81006da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81006de:	4619      	mov	r1, r3
 81006e0:	4814      	ldr	r0, [pc, #80]	; (8100734 <HAL_FMC_MspInit+0x1a0>)
 81006e2:	f001 fdcd 	bl	8102280 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 81006e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 81006ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006ee:	2302      	movs	r3, #2
 81006f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006f4:	2300      	movs	r3, #0
 81006f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81006fa:	2303      	movs	r3, #3
 81006fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100700:	230c      	movs	r3, #12
 8100702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100706:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810070a:	4619      	mov	r1, r3
 810070c:	480a      	ldr	r0, [pc, #40]	; (8100738 <HAL_FMC_MspInit+0x1a4>)
 810070e:	f001 fdb7 	bl	8102280 <HAL_GPIO_Init>
 8100712:	e000      	b.n	8100716 <HAL_FMC_MspInit+0x182>
    return;
 8100714:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8100716:	37e8      	adds	r7, #232	; 0xe8
 8100718:	46bd      	mov	sp, r7
 810071a:	bd80      	pop	{r7, pc}
 810071c:	10000210 	.word	0x10000210
 8100720:	58024400 	.word	0x58024400
 8100724:	58022000 	.word	0x58022000
 8100728:	58021000 	.word	0x58021000
 810072c:	58021c00 	.word	0x58021c00
 8100730:	58021800 	.word	0x58021800
 8100734:	58020c00 	.word	0x58020c00
 8100738:	58021400 	.word	0x58021400

0810073c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 810073c:	b580      	push	{r7, lr}
 810073e:	b082      	sub	sp, #8
 8100740:	af00      	add	r7, sp, #0
 8100742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8100744:	f7ff ff26 	bl	8100594 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8100748:	bf00      	nop
 810074a:	3708      	adds	r7, #8
 810074c:	46bd      	mov	sp, r7
 810074e:	bd80      	pop	{r7, pc}

08100750 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100750:	b580      	push	{r7, lr}
 8100752:	b08e      	sub	sp, #56	; 0x38
 8100754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810075a:	2200      	movs	r2, #0
 810075c:	601a      	str	r2, [r3, #0]
 810075e:	605a      	str	r2, [r3, #4]
 8100760:	609a      	str	r2, [r3, #8]
 8100762:	60da      	str	r2, [r3, #12]
 8100764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100766:	4b53      	ldr	r3, [pc, #332]	; (81008b4 <MX_GPIO_Init+0x164>)
 8100768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810076c:	4a51      	ldr	r2, [pc, #324]	; (81008b4 <MX_GPIO_Init+0x164>)
 810076e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100776:	4b4f      	ldr	r3, [pc, #316]	; (81008b4 <MX_GPIO_Init+0x164>)
 8100778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810077c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100780:	623b      	str	r3, [r7, #32]
 8100782:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100784:	4b4b      	ldr	r3, [pc, #300]	; (81008b4 <MX_GPIO_Init+0x164>)
 8100786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810078a:	4a4a      	ldr	r2, [pc, #296]	; (81008b4 <MX_GPIO_Init+0x164>)
 810078c:	f043 0302 	orr.w	r3, r3, #2
 8100790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100794:	4b47      	ldr	r3, [pc, #284]	; (81008b4 <MX_GPIO_Init+0x164>)
 8100796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810079a:	f003 0302 	and.w	r3, r3, #2
 810079e:	61fb      	str	r3, [r7, #28]
 81007a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81007a2:	4b44      	ldr	r3, [pc, #272]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007a8:	4a42      	ldr	r2, [pc, #264]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007aa:	f043 0310 	orr.w	r3, r3, #16
 81007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007b2:	4b40      	ldr	r3, [pc, #256]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007b8:	f003 0310 	and.w	r3, r3, #16
 81007bc:	61bb      	str	r3, [r7, #24]
 81007be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81007c0:	4b3c      	ldr	r3, [pc, #240]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007c6:	4a3b      	ldr	r2, [pc, #236]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81007cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007d0:	4b38      	ldr	r3, [pc, #224]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81007da:	617b      	str	r3, [r7, #20]
 81007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81007de:	4b35      	ldr	r3, [pc, #212]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007e4:	4a33      	ldr	r2, [pc, #204]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007ee:	4b31      	ldr	r3, [pc, #196]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81007f8:	613b      	str	r3, [r7, #16]
 81007fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81007fc:	4b2d      	ldr	r3, [pc, #180]	; (81008b4 <MX_GPIO_Init+0x164>)
 81007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100802:	4a2c      	ldr	r2, [pc, #176]	; (81008b4 <MX_GPIO_Init+0x164>)
 8100804:	f043 0308 	orr.w	r3, r3, #8
 8100808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810080c:	4b29      	ldr	r3, [pc, #164]	; (81008b4 <MX_GPIO_Init+0x164>)
 810080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100812:	f003 0308 	and.w	r3, r3, #8
 8100816:	60fb      	str	r3, [r7, #12]
 8100818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810081a:	4b26      	ldr	r3, [pc, #152]	; (81008b4 <MX_GPIO_Init+0x164>)
 810081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100820:	4a24      	ldr	r2, [pc, #144]	; (81008b4 <MX_GPIO_Init+0x164>)
 8100822:	f043 0304 	orr.w	r3, r3, #4
 8100826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810082a:	4b22      	ldr	r3, [pc, #136]	; (81008b4 <MX_GPIO_Init+0x164>)
 810082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100830:	f003 0304 	and.w	r3, r3, #4
 8100834:	60bb      	str	r3, [r7, #8]
 8100836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100838:	4b1e      	ldr	r3, [pc, #120]	; (81008b4 <MX_GPIO_Init+0x164>)
 810083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810083e:	4a1d      	ldr	r2, [pc, #116]	; (81008b4 <MX_GPIO_Init+0x164>)
 8100840:	f043 0320 	orr.w	r3, r3, #32
 8100844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100848:	4b1a      	ldr	r3, [pc, #104]	; (81008b4 <MX_GPIO_Init+0x164>)
 810084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810084e:	f003 0320 	and.w	r3, r3, #32
 8100852:	607b      	str	r3, [r7, #4]
 8100854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100856:	4b17      	ldr	r3, [pc, #92]	; (81008b4 <MX_GPIO_Init+0x164>)
 8100858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810085c:	4a15      	ldr	r2, [pc, #84]	; (81008b4 <MX_GPIO_Init+0x164>)
 810085e:	f043 0301 	orr.w	r3, r3, #1
 8100862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100866:	4b13      	ldr	r3, [pc, #76]	; (81008b4 <MX_GPIO_Init+0x164>)
 8100868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810086c:	f003 0301 	and.w	r3, r3, #1
 8100870:	603b      	str	r3, [r7, #0]
 8100872:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8100874:	2200      	movs	r2, #0
 8100876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810087a:	480f      	ldr	r0, [pc, #60]	; (81008b8 <MX_GPIO_Init+0x168>)
 810087c:	f001 feb0 	bl	81025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8100880:	2201      	movs	r2, #1
 8100882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8100886:	480c      	ldr	r0, [pc, #48]	; (81008b8 <MX_GPIO_Init+0x168>)
 8100888:	f001 feaa 	bl	81025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 810088c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8100890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100892:	2301      	movs	r3, #1
 8100894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100896:	2300      	movs	r3, #0
 8100898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810089a:	2300      	movs	r3, #0
 810089c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 810089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81008a2:	4619      	mov	r1, r3
 81008a4:	4804      	ldr	r0, [pc, #16]	; (81008b8 <MX_GPIO_Init+0x168>)
 81008a6:	f001 fceb 	bl	8102280 <HAL_GPIO_Init>

}
 81008aa:	bf00      	nop
 81008ac:	3738      	adds	r7, #56	; 0x38
 81008ae:	46bd      	mov	sp, r7
 81008b0:	bd80      	pop	{r7, pc}
 81008b2:	bf00      	nop
 81008b4:	58024400 	.word	0x58024400
 81008b8:	58022000 	.word	0x58022000

081008bc <MX_HDMI_CEC_Init>:
CEC_HandleTypeDef hcec;
uint8_t cec_receive_buffer[16];

/* HDMI_CEC init function */
void MX_HDMI_CEC_Init(void)
{
 81008bc:	b580      	push	{r7, lr}
 81008be:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 81008c0:	4b15      	ldr	r3, [pc, #84]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008c2:	4a16      	ldr	r2, [pc, #88]	; (810091c <MX_HDMI_CEC_Init+0x60>)
 81008c4:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 81008c6:	4b14      	ldr	r3, [pc, #80]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008c8:	2200      	movs	r2, #0
 81008ca:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 81008cc:	4b12      	ldr	r3, [pc, #72]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008ce:	2200      	movs	r2, #0
 81008d0:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 81008d2:	4b11      	ldr	r3, [pc, #68]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008d4:	2210      	movs	r2, #16
 81008d6:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 81008d8:	4b0f      	ldr	r3, [pc, #60]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008da:	2200      	movs	r2, #0
 81008dc:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 81008de:	4b0e      	ldr	r3, [pc, #56]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008e0:	2200      	movs	r2, #0
 81008e2:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 81008e4:	4b0c      	ldr	r3, [pc, #48]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008e6:	2200      	movs	r2, #0
 81008e8:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 81008ea:	4b0b      	ldr	r3, [pc, #44]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008ec:	2200      	movs	r2, #0
 81008ee:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 81008f0:	4b09      	ldr	r3, [pc, #36]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81008f6:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 81008f8:	4b07      	ldr	r3, [pc, #28]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 81008fa:	2200      	movs	r2, #0
 81008fc:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 81008fe:	4b06      	ldr	r3, [pc, #24]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 8100900:	4a07      	ldr	r2, [pc, #28]	; (8100920 <MX_HDMI_CEC_Init+0x64>)
 8100902:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100904:	4804      	ldr	r0, [pc, #16]	; (8100918 <MX_HDMI_CEC_Init+0x5c>)
 8100906:	f000 fe15 	bl	8101534 <HAL_CEC_Init>
 810090a:	4603      	mov	r3, r0
 810090c:	2b00      	cmp	r3, #0
 810090e:	d001      	beq.n	8100914 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100910:	f000 f8d8 	bl	8100ac4 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100914:	bf00      	nop
 8100916:	bd80      	pop	{r7, pc}
 8100918:	10000214 	.word	0x10000214
 810091c:	40006c00 	.word	0x40006c00
 8100920:	10000258 	.word	0x10000258

08100924 <HAL_CEC_MspInit>:

void HAL_CEC_MspInit(CEC_HandleTypeDef* cecHandle)
{
 8100924:	b580      	push	{r7, lr}
 8100926:	b0bc      	sub	sp, #240	; 0xf0
 8100928:	af00      	add	r7, sp, #0
 810092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810092c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100930:	2200      	movs	r2, #0
 8100932:	601a      	str	r2, [r3, #0]
 8100934:	605a      	str	r2, [r3, #4]
 8100936:	609a      	str	r2, [r3, #8]
 8100938:	60da      	str	r2, [r3, #12]
 810093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810093c:	f107 0310 	add.w	r3, r7, #16
 8100940:	22c8      	movs	r2, #200	; 0xc8
 8100942:	2100      	movs	r1, #0
 8100944:	4618      	mov	r0, r3
 8100946:	f006 f8eb 	bl	8106b20 <memset>
  if(cecHandle->Instance==CEC)
 810094a:	687b      	ldr	r3, [r7, #4]
 810094c:	681b      	ldr	r3, [r3, #0]
 810094e:	4a2b      	ldr	r2, [pc, #172]	; (81009fc <HAL_CEC_MspInit+0xd8>)
 8100950:	4293      	cmp	r3, r2
 8100952:	d14e      	bne.n	81009f2 <HAL_CEC_MspInit+0xce>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8100954:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8100958:	f04f 0300 	mov.w	r3, #0
 810095c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8100960:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8100964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100968:	f107 0310 	add.w	r3, r7, #16
 810096c:	4618      	mov	r0, r3
 810096e:	f002 fa1f 	bl	8102db0 <HAL_RCCEx_PeriphCLKConfig>
 8100972:	4603      	mov	r3, r0
 8100974:	2b00      	cmp	r3, #0
 8100976:	d001      	beq.n	810097c <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8100978:	f000 f8a4 	bl	8100ac4 <Error_Handler>
    }

    /* CEC clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 810097c:	4b20      	ldr	r3, [pc, #128]	; (8100a00 <HAL_CEC_MspInit+0xdc>)
 810097e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100982:	4a1f      	ldr	r2, [pc, #124]	; (8100a00 <HAL_CEC_MspInit+0xdc>)
 8100984:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8100988:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810098c:	4b1c      	ldr	r3, [pc, #112]	; (8100a00 <HAL_CEC_MspInit+0xdc>)
 810098e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100992:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8100996:	60fb      	str	r3, [r7, #12]
 8100998:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810099a:	4b19      	ldr	r3, [pc, #100]	; (8100a00 <HAL_CEC_MspInit+0xdc>)
 810099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009a0:	4a17      	ldr	r2, [pc, #92]	; (8100a00 <HAL_CEC_MspInit+0xdc>)
 81009a2:	f043 0302 	orr.w	r3, r3, #2
 81009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81009aa:	4b15      	ldr	r3, [pc, #84]	; (8100a00 <HAL_CEC_MspInit+0xdc>)
 81009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009b0:	f003 0302 	and.w	r3, r3, #2
 81009b4:	60bb      	str	r3, [r7, #8]
 81009b6:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 81009b8:	2340      	movs	r3, #64	; 0x40
 81009ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81009be:	2312      	movs	r3, #18
 81009c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009c4:	2300      	movs	r3, #0
 81009c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009ca:	2300      	movs	r3, #0
 81009cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 81009d0:	2305      	movs	r3, #5
 81009d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 81009d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81009da:	4619      	mov	r1, r3
 81009dc:	4809      	ldr	r0, [pc, #36]	; (8100a04 <HAL_CEC_MspInit+0xe0>)
 81009de:	f001 fc4f 	bl	8102280 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 81009e2:	2200      	movs	r2, #0
 81009e4:	2100      	movs	r1, #0
 81009e6:	205e      	movs	r0, #94	; 0x5e
 81009e8:	f000 ffdd 	bl	81019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 81009ec:	205e      	movs	r0, #94	; 0x5e
 81009ee:	f000 fff4 	bl	81019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }
}
 81009f2:	bf00      	nop
 81009f4:	37f0      	adds	r7, #240	; 0xf0
 81009f6:	46bd      	mov	sp, r7
 81009f8:	bd80      	pop	{r7, pc}
 81009fa:	bf00      	nop
 81009fc:	40006c00 	.word	0x40006c00
 8100a00:	58024400 	.word	0x58024400
 8100a04:	58020400 	.word	0x58020400

08100a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100a08:	b580      	push	{r7, lr}
 8100a0a:	b082      	sub	sp, #8
 8100a0c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100a0e:	4b29      	ldr	r3, [pc, #164]	; (8100ab4 <main+0xac>)
 8100a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a14:	4a27      	ldr	r2, [pc, #156]	; (8100ab4 <main+0xac>)
 8100a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a1e:	4b25      	ldr	r3, [pc, #148]	; (8100ab4 <main+0xac>)
 8100a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100a28:	607b      	str	r3, [r7, #4]
 8100a2a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100a2c:	2001      	movs	r0, #1
 8100a2e:	f001 fe0b 	bl	8102648 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100a32:	f001 ffdd 	bl	81029f0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100a36:	2201      	movs	r2, #1
 8100a38:	2102      	movs	r1, #2
 8100a3a:	2000      	movs	r0, #0
 8100a3c:	f001 ff5e 	bl	81028fc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100a40:	4b1d      	ldr	r3, [pc, #116]	; (8100ab8 <main+0xb0>)
 8100a42:	681b      	ldr	r3, [r3, #0]
 8100a44:	091b      	lsrs	r3, r3, #4
 8100a46:	f003 030f 	and.w	r3, r3, #15
 8100a4a:	2b07      	cmp	r3, #7
 8100a4c:	d108      	bne.n	8100a60 <main+0x58>
 8100a4e:	4b1b      	ldr	r3, [pc, #108]	; (8100abc <main+0xb4>)
 8100a50:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100a54:	4a19      	ldr	r2, [pc, #100]	; (8100abc <main+0xb4>)
 8100a56:	f043 0301 	orr.w	r3, r3, #1
 8100a5a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100a5e:	e007      	b.n	8100a70 <main+0x68>
 8100a60:	4b16      	ldr	r3, [pc, #88]	; (8100abc <main+0xb4>)
 8100a62:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100a66:	4a15      	ldr	r2, [pc, #84]	; (8100abc <main+0xb4>)
 8100a68:	f043 0301 	orr.w	r3, r3, #1
 8100a6c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100a70:	f000 fc68 	bl	8101344 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ETH_Init();
 8100a74:	f7ff fc48 	bl	8100308 <MX_ETH_Init>
  MX_FMC_Init();
 8100a78:	f7ff fd3e 	bl	81004f8 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 8100a7c:	f7ff ff1e 	bl	81008bc <MX_HDMI_CEC_Init>
  MX_RTC_Init();
 8100a80:	f000 f826 	bl	8100ad0 <MX_RTC_Init>
  MX_SAI1_Init();
 8100a84:	f000 f8a4 	bl	8100bd0 <MX_SAI1_Init>
  MX_SPDIFRX1_Init();
 8100a88:	f000 f9f6 	bl	8100e78 <MX_SPDIFRX1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8100a8c:	f000 fae0 	bl	8101050 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8100a90:	f7ff fe5e 	bl	8100750 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 8100a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100a98:	f000 fd08 	bl	81014ac <HAL_Delay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8100a9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100aa0:	4807      	ldr	r0, [pc, #28]	; (8100ac0 <main+0xb8>)
 8100aa2:	f001 fdb6 	bl	8102612 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8100aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8100aaa:	4805      	ldr	r0, [pc, #20]	; (8100ac0 <main+0xb8>)
 8100aac:	f001 fdb1 	bl	8102612 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8100ab0:	e7f0      	b.n	8100a94 <main+0x8c>
 8100ab2:	bf00      	nop
 8100ab4:	58024400 	.word	0x58024400
 8100ab8:	e000ed00 	.word	0xe000ed00
 8100abc:	58026400 	.word	0x58026400
 8100ac0:	58022000 	.word	0x58022000

08100ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100ac4:	b480      	push	{r7}
 8100ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100ac8:	b672      	cpsid	i
}
 8100aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100acc:	e7fe      	b.n	8100acc <Error_Handler+0x8>
	...

08100ad0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8100ad0:	b580      	push	{r7, lr}
 8100ad2:	b08a      	sub	sp, #40	; 0x28
 8100ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100ad6:	463b      	mov	r3, r7
 8100ad8:	2228      	movs	r2, #40	; 0x28
 8100ada:	2100      	movs	r1, #0
 8100adc:	4618      	mov	r0, r3
 8100ade:	f006 f81f 	bl	8106b20 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100ae2:	4b20      	ldr	r3, [pc, #128]	; (8100b64 <MX_RTC_Init+0x94>)
 8100ae4:	4a20      	ldr	r2, [pc, #128]	; (8100b68 <MX_RTC_Init+0x98>)
 8100ae6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100ae8:	4b1e      	ldr	r3, [pc, #120]	; (8100b64 <MX_RTC_Init+0x94>)
 8100aea:	2200      	movs	r2, #0
 8100aec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100aee:	4b1d      	ldr	r3, [pc, #116]	; (8100b64 <MX_RTC_Init+0x94>)
 8100af0:	227f      	movs	r2, #127	; 0x7f
 8100af2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100af4:	4b1b      	ldr	r3, [pc, #108]	; (8100b64 <MX_RTC_Init+0x94>)
 8100af6:	22ff      	movs	r2, #255	; 0xff
 8100af8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100afa:	4b1a      	ldr	r3, [pc, #104]	; (8100b64 <MX_RTC_Init+0x94>)
 8100afc:	2200      	movs	r2, #0
 8100afe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100b00:	4b18      	ldr	r3, [pc, #96]	; (8100b64 <MX_RTC_Init+0x94>)
 8100b02:	2200      	movs	r2, #0
 8100b04:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100b06:	4b17      	ldr	r3, [pc, #92]	; (8100b64 <MX_RTC_Init+0x94>)
 8100b08:	2200      	movs	r2, #0
 8100b0a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100b0c:	4b15      	ldr	r3, [pc, #84]	; (8100b64 <MX_RTC_Init+0x94>)
 8100b0e:	2200      	movs	r2, #0
 8100b10:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100b12:	4814      	ldr	r0, [pc, #80]	; (8100b64 <MX_RTC_Init+0x94>)
 8100b14:	f004 fe8a 	bl	810582c <HAL_RTC_Init>
 8100b18:	4603      	mov	r3, r0
 8100b1a:	2b00      	cmp	r3, #0
 8100b1c:	d001      	beq.n	8100b22 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100b1e:	f7ff ffd1 	bl	8100ac4 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100b22:	2301      	movs	r3, #1
 8100b24:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100b26:	2301      	movs	r3, #1
 8100b28:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100b2a:	2300      	movs	r3, #0
 8100b2c:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100b2e:	2300      	movs	r3, #0
 8100b30:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100b32:	2300      	movs	r3, #0
 8100b34:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100b36:	2300      	movs	r3, #0
 8100b38:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100b3a:	2300      	movs	r3, #0
 8100b3c:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100b3e:	2300      	movs	r3, #0
 8100b40:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100b42:	2380      	movs	r3, #128	; 0x80
 8100b44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100b46:	463b      	mov	r3, r7
 8100b48:	4619      	mov	r1, r3
 8100b4a:	4806      	ldr	r0, [pc, #24]	; (8100b64 <MX_RTC_Init+0x94>)
 8100b4c:	f004 ff86 	bl	8105a5c <HAL_RTCEx_SetTamper>
 8100b50:	4603      	mov	r3, r0
 8100b52:	2b00      	cmp	r3, #0
 8100b54:	d001      	beq.n	8100b5a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100b56:	f7ff ffb5 	bl	8100ac4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100b5a:	bf00      	nop
 8100b5c:	3728      	adds	r7, #40	; 0x28
 8100b5e:	46bd      	mov	sp, r7
 8100b60:	bd80      	pop	{r7, pc}
 8100b62:	bf00      	nop
 8100b64:	10000268 	.word	0x10000268
 8100b68:	58004000 	.word	0x58004000

08100b6c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8100b6c:	b580      	push	{r7, lr}
 8100b6e:	b0b4      	sub	sp, #208	; 0xd0
 8100b70:	af00      	add	r7, sp, #0
 8100b72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100b74:	f107 0308 	add.w	r3, r7, #8
 8100b78:	22c8      	movs	r2, #200	; 0xc8
 8100b7a:	2100      	movs	r1, #0
 8100b7c:	4618      	mov	r0, r3
 8100b7e:	f005 ffcf 	bl	8106b20 <memset>
  if(rtcHandle->Instance==RTC)
 8100b82:	687b      	ldr	r3, [r7, #4]
 8100b84:	681b      	ldr	r3, [r3, #0]
 8100b86:	4a10      	ldr	r2, [pc, #64]	; (8100bc8 <HAL_RTC_MspInit+0x5c>)
 8100b88:	4293      	cmp	r3, r2
 8100b8a:	d119      	bne.n	8100bc0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8100b8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100b90:	f04f 0300 	mov.w	r3, #0
 8100b94:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100ba0:	f107 0308 	add.w	r3, r7, #8
 8100ba4:	4618      	mov	r0, r3
 8100ba6:	f002 f903 	bl	8102db0 <HAL_RCCEx_PeriphCLKConfig>
 8100baa:	4603      	mov	r3, r0
 8100bac:	2b00      	cmp	r3, #0
 8100bae:	d001      	beq.n	8100bb4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8100bb0:	f7ff ff88 	bl	8100ac4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8100bb4:	4b05      	ldr	r3, [pc, #20]	; (8100bcc <HAL_RTC_MspInit+0x60>)
 8100bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100bb8:	4a04      	ldr	r2, [pc, #16]	; (8100bcc <HAL_RTC_MspInit+0x60>)
 8100bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100bbe:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8100bc0:	bf00      	nop
 8100bc2:	37d0      	adds	r7, #208	; 0xd0
 8100bc4:	46bd      	mov	sp, r7
 8100bc6:	bd80      	pop	{r7, pc}
 8100bc8:	58004000 	.word	0x58004000
 8100bcc:	58024400 	.word	0x58024400

08100bd0 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8100bd0:	b580      	push	{r7, lr}
 8100bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8100bd4:	4b47      	ldr	r3, [pc, #284]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100bd6:	4a48      	ldr	r2, [pc, #288]	; (8100cf8 <MX_SAI1_Init+0x128>)
 8100bd8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100bda:	4b46      	ldr	r3, [pc, #280]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100bdc:	2200      	movs	r2, #0
 8100bde:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100be0:	4b44      	ldr	r3, [pc, #272]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100be2:	2200      	movs	r2, #0
 8100be4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100be6:	4b43      	ldr	r3, [pc, #268]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100be8:	2240      	movs	r2, #64	; 0x40
 8100bea:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100bec:	4b41      	ldr	r3, [pc, #260]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100bee:	2200      	movs	r2, #0
 8100bf0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100bf2:	4b40      	ldr	r3, [pc, #256]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100bf4:	2200      	movs	r2, #0
 8100bf6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100bf8:	4b3e      	ldr	r3, [pc, #248]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100bfa:	2200      	movs	r2, #0
 8100bfc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100bfe:	4b3d      	ldr	r3, [pc, #244]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c00:	2200      	movs	r2, #0
 8100c02:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8100c04:	4b3b      	ldr	r3, [pc, #236]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c06:	2200      	movs	r2, #0
 8100c08:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100c0a:	4b3a      	ldr	r3, [pc, #232]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c0c:	2200      	movs	r2, #0
 8100c0e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100c10:	4b38      	ldr	r3, [pc, #224]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c12:	4a3a      	ldr	r2, [pc, #232]	; (8100cfc <MX_SAI1_Init+0x12c>)
 8100c14:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100c16:	4b37      	ldr	r3, [pc, #220]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c18:	2200      	movs	r2, #0
 8100c1a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100c1c:	4b35      	ldr	r3, [pc, #212]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c1e:	2200      	movs	r2, #0
 8100c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100c22:	4b34      	ldr	r3, [pc, #208]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c24:	2200      	movs	r2, #0
 8100c26:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100c28:	4b32      	ldr	r3, [pc, #200]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c2a:	2200      	movs	r2, #0
 8100c2c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100c2e:	4b31      	ldr	r3, [pc, #196]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c30:	2200      	movs	r2, #0
 8100c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100c36:	4b2f      	ldr	r3, [pc, #188]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c38:	2201      	movs	r2, #1
 8100c3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100c3c:	4b2d      	ldr	r3, [pc, #180]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100c42:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100c44:	4b2b      	ldr	r3, [pc, #172]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c46:	2208      	movs	r2, #8
 8100c48:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100c4a:	4b2a      	ldr	r3, [pc, #168]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c4c:	2201      	movs	r2, #1
 8100c4e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100c50:	4b28      	ldr	r3, [pc, #160]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c52:	2200      	movs	r2, #0
 8100c54:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100c56:	4b27      	ldr	r3, [pc, #156]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c58:	2200      	movs	r2, #0
 8100c5a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100c5c:	4b25      	ldr	r3, [pc, #148]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c5e:	2200      	movs	r2, #0
 8100c60:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100c62:	4b24      	ldr	r3, [pc, #144]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c64:	2200      	movs	r2, #0
 8100c66:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100c68:	4b22      	ldr	r3, [pc, #136]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c6a:	2200      	movs	r2, #0
 8100c6c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100c6e:	4b21      	ldr	r3, [pc, #132]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c70:	2201      	movs	r2, #1
 8100c72:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100c74:	4b1f      	ldr	r3, [pc, #124]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c76:	2200      	movs	r2, #0
 8100c78:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100c7a:	481e      	ldr	r0, [pc, #120]	; (8100cf4 <MX_SAI1_Init+0x124>)
 8100c7c:	f004 ffce 	bl	8105c1c <HAL_SAI_Init>
 8100c80:	4603      	mov	r3, r0
 8100c82:	2b00      	cmp	r3, #0
 8100c84:	d001      	beq.n	8100c8a <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8100c86:	f7ff ff1d 	bl	8100ac4 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8100c8a:	4b1d      	ldr	r3, [pc, #116]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100c8c:	4a1d      	ldr	r2, [pc, #116]	; (8100d04 <MX_SAI1_Init+0x134>)
 8100c8e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100c90:	4b1b      	ldr	r3, [pc, #108]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100c92:	2204      	movs	r2, #4
 8100c94:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100c96:	4b1a      	ldr	r3, [pc, #104]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100c98:	2200      	movs	r2, #0
 8100c9a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100c9c:	4b18      	ldr	r3, [pc, #96]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100c9e:	2200      	movs	r2, #0
 8100ca0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100ca2:	4b17      	ldr	r3, [pc, #92]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100ca4:	2200      	movs	r2, #0
 8100ca6:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100ca8:	4b15      	ldr	r3, [pc, #84]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100caa:	2200      	movs	r2, #0
 8100cac:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100cae:	4b14      	ldr	r3, [pc, #80]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100cb0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8100cb4:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100cb6:	4b12      	ldr	r3, [pc, #72]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100cb8:	2200      	movs	r2, #0
 8100cba:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100cbc:	4b10      	ldr	r3, [pc, #64]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100cbe:	2200      	movs	r2, #0
 8100cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100cc2:	4b0f      	ldr	r3, [pc, #60]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100cc4:	2200      	movs	r2, #0
 8100cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100cc8:	4b0d      	ldr	r3, [pc, #52]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100cca:	2200      	movs	r2, #0
 8100ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100cd0:	4b0b      	ldr	r3, [pc, #44]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100cd2:	2201      	movs	r2, #1
 8100cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100cd6:	4b0a      	ldr	r3, [pc, #40]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100cdc:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100cde:	4808      	ldr	r0, [pc, #32]	; (8100d00 <MX_SAI1_Init+0x130>)
 8100ce0:	f004 ff9c 	bl	8105c1c <HAL_SAI_Init>
 8100ce4:	4603      	mov	r3, r0
 8100ce6:	2b00      	cmp	r3, #0
 8100ce8:	d001      	beq.n	8100cee <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 8100cea:	f7ff feeb 	bl	8100ac4 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100cee:	bf00      	nop
 8100cf0:	bd80      	pop	{r7, pc}
 8100cf2:	bf00      	nop
 8100cf4:	1000028c 	.word	0x1000028c
 8100cf8:	40015804 	.word	0x40015804
 8100cfc:	0002ee00 	.word	0x0002ee00
 8100d00:	10000324 	.word	0x10000324
 8100d04:	40015824 	.word	0x40015824

08100d08 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8100d08:	b580      	push	{r7, lr}
 8100d0a:	b0bc      	sub	sp, #240	; 0xf0
 8100d0c:	af00      	add	r7, sp, #0
 8100d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100d10:	f107 0310 	add.w	r3, r7, #16
 8100d14:	22c8      	movs	r2, #200	; 0xc8
 8100d16:	2100      	movs	r1, #0
 8100d18:	4618      	mov	r0, r3
 8100d1a:	f005 ff01 	bl	8106b20 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8100d1e:	687b      	ldr	r3, [r7, #4]
 8100d20:	681b      	ldr	r3, [r3, #0]
 8100d22:	4a4f      	ldr	r2, [pc, #316]	; (8100e60 <HAL_SAI_MspInit+0x158>)
 8100d24:	4293      	cmp	r3, r2
 8100d26:	d153      	bne.n	8100dd0 <HAL_SAI_MspInit+0xc8>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8100d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100d2c:	f04f 0300 	mov.w	r3, #0
 8100d30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8100d34:	2300      	movs	r3, #0
 8100d36:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100d38:	f107 0310 	add.w	r3, r7, #16
 8100d3c:	4618      	mov	r0, r3
 8100d3e:	f002 f837 	bl	8102db0 <HAL_RCCEx_PeriphCLKConfig>
 8100d42:	4603      	mov	r3, r0
 8100d44:	2b00      	cmp	r3, #0
 8100d46:	d001      	beq.n	8100d4c <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8100d48:	f7ff febc 	bl	8100ac4 <Error_Handler>
    }

    if (SAI1_client == 0)
 8100d4c:	4b45      	ldr	r3, [pc, #276]	; (8100e64 <HAL_SAI_MspInit+0x15c>)
 8100d4e:	681b      	ldr	r3, [r3, #0]
 8100d50:	2b00      	cmp	r3, #0
 8100d52:	d10e      	bne.n	8100d72 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8100d54:	4b44      	ldr	r3, [pc, #272]	; (8100e68 <HAL_SAI_MspInit+0x160>)
 8100d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100d5a:	4a43      	ldr	r2, [pc, #268]	; (8100e68 <HAL_SAI_MspInit+0x160>)
 8100d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8100d60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100d64:	4b40      	ldr	r3, [pc, #256]	; (8100e68 <HAL_SAI_MspInit+0x160>)
 8100d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100d6e:	60fb      	str	r3, [r7, #12]
 8100d70:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8100d72:	4b3c      	ldr	r3, [pc, #240]	; (8100e64 <HAL_SAI_MspInit+0x15c>)
 8100d74:	681b      	ldr	r3, [r3, #0]
 8100d76:	3301      	adds	r3, #1
 8100d78:	4a3a      	ldr	r2, [pc, #232]	; (8100e64 <HAL_SAI_MspInit+0x15c>)
 8100d7a:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8100d7c:	2370      	movs	r3, #112	; 0x70
 8100d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d82:	2302      	movs	r3, #2
 8100d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d88:	2300      	movs	r3, #0
 8100d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d8e:	2300      	movs	r3, #0
 8100d90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8100d94:	2306      	movs	r3, #6
 8100d96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100d9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100d9e:	4619      	mov	r1, r3
 8100da0:	4832      	ldr	r0, [pc, #200]	; (8100e6c <HAL_SAI_MspInit+0x164>)
 8100da2:	f001 fa6d 	bl	8102280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8100da6:	2380      	movs	r3, #128	; 0x80
 8100da8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100dac:	2302      	movs	r3, #2
 8100dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100db2:	2300      	movs	r3, #0
 8100db4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100db8:	2300      	movs	r3, #0
 8100dba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8100dbe:	2306      	movs	r3, #6
 8100dc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8100dc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100dc8:	4619      	mov	r1, r3
 8100dca:	4829      	ldr	r0, [pc, #164]	; (8100e70 <HAL_SAI_MspInit+0x168>)
 8100dcc:	f001 fa58 	bl	8102280 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8100dd0:	687b      	ldr	r3, [r7, #4]
 8100dd2:	681b      	ldr	r3, [r3, #0]
 8100dd4:	4a27      	ldr	r2, [pc, #156]	; (8100e74 <HAL_SAI_MspInit+0x16c>)
 8100dd6:	4293      	cmp	r3, r2
 8100dd8:	d13e      	bne.n	8100e58 <HAL_SAI_MspInit+0x150>
    {
      /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8100dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100dde:	f04f 0300 	mov.w	r3, #0
 8100de2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8100de6:	2300      	movs	r3, #0
 8100de8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100dea:	f107 0310 	add.w	r3, r7, #16
 8100dee:	4618      	mov	r0, r3
 8100df0:	f001 ffde 	bl	8102db0 <HAL_RCCEx_PeriphCLKConfig>
 8100df4:	4603      	mov	r3, r0
 8100df6:	2b00      	cmp	r3, #0
 8100df8:	d001      	beq.n	8100dfe <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 8100dfa:	f7ff fe63 	bl	8100ac4 <Error_Handler>
    }

      if (SAI1_client == 0)
 8100dfe:	4b19      	ldr	r3, [pc, #100]	; (8100e64 <HAL_SAI_MspInit+0x15c>)
 8100e00:	681b      	ldr	r3, [r3, #0]
 8100e02:	2b00      	cmp	r3, #0
 8100e04:	d10e      	bne.n	8100e24 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8100e06:	4b18      	ldr	r3, [pc, #96]	; (8100e68 <HAL_SAI_MspInit+0x160>)
 8100e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100e0c:	4a16      	ldr	r2, [pc, #88]	; (8100e68 <HAL_SAI_MspInit+0x160>)
 8100e0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8100e12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100e16:	4b14      	ldr	r3, [pc, #80]	; (8100e68 <HAL_SAI_MspInit+0x160>)
 8100e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100e20:	60bb      	str	r3, [r7, #8]
 8100e22:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8100e24:	4b0f      	ldr	r3, [pc, #60]	; (8100e64 <HAL_SAI_MspInit+0x15c>)
 8100e26:	681b      	ldr	r3, [r3, #0]
 8100e28:	3301      	adds	r3, #1
 8100e2a:	4a0e      	ldr	r2, [pc, #56]	; (8100e64 <HAL_SAI_MspInit+0x15c>)
 8100e2c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8100e2e:	2308      	movs	r3, #8
 8100e30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e34:	2302      	movs	r3, #2
 8100e36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e3a:	2300      	movs	r3, #0
 8100e3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e40:	2300      	movs	r3, #0
 8100e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8100e46:	2306      	movs	r3, #6
 8100e48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8100e4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100e50:	4619      	mov	r1, r3
 8100e52:	4806      	ldr	r0, [pc, #24]	; (8100e6c <HAL_SAI_MspInit+0x164>)
 8100e54:	f001 fa14 	bl	8102280 <HAL_GPIO_Init>

    }
}
 8100e58:	bf00      	nop
 8100e5a:	37f0      	adds	r7, #240	; 0xf0
 8100e5c:	46bd      	mov	sp, r7
 8100e5e:	bd80      	pop	{r7, pc}
 8100e60:	40015804 	.word	0x40015804
 8100e64:	100003bc 	.word	0x100003bc
 8100e68:	58024400 	.word	0x58024400
 8100e6c:	58021000 	.word	0x58021000
 8100e70:	58021800 	.word	0x58021800
 8100e74:	40015824 	.word	0x40015824

08100e78 <MX_SPDIFRX1_Init>:

SPDIFRX_HandleTypeDef hspdif1;

/* SPDIFRX1 init function */
void MX_SPDIFRX1_Init(void)
{
 8100e78:	b580      	push	{r7, lr}
 8100e7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100e7c:	4b19      	ldr	r3, [pc, #100]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100e7e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8100e82:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100e84:	4b17      	ldr	r3, [pc, #92]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100e86:	2200      	movs	r2, #0
 8100e88:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100e8a:	4b16      	ldr	r3, [pc, #88]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100e8c:	2200      	movs	r2, #0
 8100e8e:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100e90:	4b14      	ldr	r3, [pc, #80]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100e92:	2200      	movs	r2, #0
 8100e94:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100e96:	4b13      	ldr	r3, [pc, #76]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100e98:	2200      	movs	r2, #0
 8100e9a:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100e9c:	4b11      	ldr	r3, [pc, #68]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100e9e:	2200      	movs	r2, #0
 8100ea0:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100ea2:	4b10      	ldr	r3, [pc, #64]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100ea4:	2200      	movs	r2, #0
 8100ea6:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100ea8:	4b0e      	ldr	r3, [pc, #56]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100eaa:	2200      	movs	r2, #0
 8100eac:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100eae:	4b0d      	ldr	r3, [pc, #52]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100eb0:	2200      	movs	r2, #0
 8100eb2:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100eb4:	4b0b      	ldr	r3, [pc, #44]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100eb6:	2200      	movs	r2, #0
 8100eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100eba:	4b0a      	ldr	r3, [pc, #40]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100ebc:	2200      	movs	r2, #0
 8100ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100ec0:	4b08      	ldr	r3, [pc, #32]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100ec2:	2200      	movs	r2, #0
 8100ec4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100ec8:	4b06      	ldr	r3, [pc, #24]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100eca:	2200      	movs	r2, #0
 8100ecc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100ed0:	4804      	ldr	r0, [pc, #16]	; (8100ee4 <MX_SPDIFRX1_Init+0x6c>)
 8100ed2:	f005 f9c3 	bl	810625c <HAL_SPDIFRX_Init>
 8100ed6:	4603      	mov	r3, r0
 8100ed8:	2b00      	cmp	r3, #0
 8100eda:	d001      	beq.n	8100ee0 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100edc:	f7ff fdf2 	bl	8100ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100ee0:	bf00      	nop
 8100ee2:	bd80      	pop	{r7, pc}
 8100ee4:	100003c0 	.word	0x100003c0

08100ee8 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8100ee8:	b580      	push	{r7, lr}
 8100eea:	b0bc      	sub	sp, #240	; 0xf0
 8100eec:	af00      	add	r7, sp, #0
 8100eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ef0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100ef4:	2200      	movs	r2, #0
 8100ef6:	601a      	str	r2, [r3, #0]
 8100ef8:	605a      	str	r2, [r3, #4]
 8100efa:	609a      	str	r2, [r3, #8]
 8100efc:	60da      	str	r2, [r3, #12]
 8100efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f00:	f107 0310 	add.w	r3, r7, #16
 8100f04:	22c8      	movs	r2, #200	; 0xc8
 8100f06:	2100      	movs	r1, #0
 8100f08:	4618      	mov	r0, r3
 8100f0a:	f005 fe09 	bl	8106b20 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	681b      	ldr	r3, [r3, #0]
 8100f12:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8100f16:	d144      	bne.n	8100fa2 <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8100f18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8100f1c:	f04f 0300 	mov.w	r3, #0
 8100f20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8100f24:	2300      	movs	r3, #0
 8100f26:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100f28:	f107 0310 	add.w	r3, r7, #16
 8100f2c:	4618      	mov	r0, r3
 8100f2e:	f001 ff3f 	bl	8102db0 <HAL_RCCEx_PeriphCLKConfig>
 8100f32:	4603      	mov	r3, r0
 8100f34:	2b00      	cmp	r3, #0
 8100f36:	d001      	beq.n	8100f3c <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8100f38:	f7ff fdc4 	bl	8100ac4 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8100f3c:	4b1b      	ldr	r3, [pc, #108]	; (8100fac <HAL_SPDIFRX_MspInit+0xc4>)
 8100f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f42:	4a1a      	ldr	r2, [pc, #104]	; (8100fac <HAL_SPDIFRX_MspInit+0xc4>)
 8100f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100f48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100f4c:	4b17      	ldr	r3, [pc, #92]	; (8100fac <HAL_SPDIFRX_MspInit+0xc4>)
 8100f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100f56:	60fb      	str	r3, [r7, #12]
 8100f58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100f5a:	4b14      	ldr	r3, [pc, #80]	; (8100fac <HAL_SPDIFRX_MspInit+0xc4>)
 8100f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f60:	4a12      	ldr	r2, [pc, #72]	; (8100fac <HAL_SPDIFRX_MspInit+0xc4>)
 8100f62:	f043 0308 	orr.w	r3, r3, #8
 8100f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f6a:	4b10      	ldr	r3, [pc, #64]	; (8100fac <HAL_SPDIFRX_MspInit+0xc4>)
 8100f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f70:	f003 0308 	and.w	r3, r3, #8
 8100f74:	60bb      	str	r3, [r7, #8]
 8100f76:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8100f78:	2380      	movs	r3, #128	; 0x80
 8100f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f7e:	2302      	movs	r3, #2
 8100f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f84:	2300      	movs	r3, #0
 8100f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f8a:	2300      	movs	r3, #0
 8100f8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8100f90:	2309      	movs	r3, #9
 8100f92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8100f96:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100f9a:	4619      	mov	r1, r3
 8100f9c:	4804      	ldr	r0, [pc, #16]	; (8100fb0 <HAL_SPDIFRX_MspInit+0xc8>)
 8100f9e:	f001 f96f 	bl	8102280 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8100fa2:	bf00      	nop
 8100fa4:	37f0      	adds	r7, #240	; 0xf0
 8100fa6:	46bd      	mov	sp, r7
 8100fa8:	bd80      	pop	{r7, pc}
 8100faa:	bf00      	nop
 8100fac:	58024400 	.word	0x58024400
 8100fb0:	58020c00 	.word	0x58020c00

08100fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100fb4:	b480      	push	{r7}
 8100fb6:	b083      	sub	sp, #12
 8100fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100fba:	4b0a      	ldr	r3, [pc, #40]	; (8100fe4 <HAL_MspInit+0x30>)
 8100fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100fc0:	4a08      	ldr	r2, [pc, #32]	; (8100fe4 <HAL_MspInit+0x30>)
 8100fc2:	f043 0302 	orr.w	r3, r3, #2
 8100fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100fca:	4b06      	ldr	r3, [pc, #24]	; (8100fe4 <HAL_MspInit+0x30>)
 8100fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100fd0:	f003 0302 	and.w	r3, r3, #2
 8100fd4:	607b      	str	r3, [r7, #4]
 8100fd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100fd8:	bf00      	nop
 8100fda:	370c      	adds	r7, #12
 8100fdc:	46bd      	mov	sp, r7
 8100fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe2:	4770      	bx	lr
 8100fe4:	58024400 	.word	0x58024400

08100fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100fe8:	b480      	push	{r7}
 8100fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100fec:	e7fe      	b.n	8100fec <NMI_Handler+0x4>

08100fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100fee:	b480      	push	{r7}
 8100ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100ff2:	e7fe      	b.n	8100ff2 <HardFault_Handler+0x4>

08100ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100ff4:	b480      	push	{r7}
 8100ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100ff8:	e7fe      	b.n	8100ff8 <MemManage_Handler+0x4>

08100ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100ffa:	b480      	push	{r7}
 8100ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100ffe:	e7fe      	b.n	8100ffe <BusFault_Handler+0x4>

08101000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101000:	b480      	push	{r7}
 8101002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101004:	e7fe      	b.n	8101004 <UsageFault_Handler+0x4>

08101006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101006:	b480      	push	{r7}
 8101008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810100a:	bf00      	nop
 810100c:	46bd      	mov	sp, r7
 810100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101012:	4770      	bx	lr

08101014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101014:	b480      	push	{r7}
 8101016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101018:	bf00      	nop
 810101a:	46bd      	mov	sp, r7
 810101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101020:	4770      	bx	lr

08101022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101022:	b480      	push	{r7}
 8101024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101026:	bf00      	nop
 8101028:	46bd      	mov	sp, r7
 810102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810102e:	4770      	bx	lr

08101030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101030:	b580      	push	{r7, lr}
 8101032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101034:	f000 fa1a 	bl	810146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101038:	bf00      	nop
 810103a:	bd80      	pop	{r7, pc}

0810103c <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 810103c:	b580      	push	{r7, lr}
 810103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8101040:	4802      	ldr	r0, [pc, #8]	; (810104c <CEC_IRQHandler+0x10>)
 8101042:	f000 fad9 	bl	81015f8 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8101046:	bf00      	nop
 8101048:	bd80      	pop	{r7, pc}
 810104a:	bf00      	nop
 810104c:	10000214 	.word	0x10000214

08101050 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8101050:	b580      	push	{r7, lr}
 8101052:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8101054:	4b15      	ldr	r3, [pc, #84]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101056:	4a16      	ldr	r2, [pc, #88]	; (81010b0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8101058:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 810105a:	4b14      	ldr	r3, [pc, #80]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810105c:	2209      	movs	r2, #9
 810105e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8101060:	4b12      	ldr	r3, [pc, #72]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101062:	2200      	movs	r2, #0
 8101064:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8101066:	4b11      	ldr	r3, [pc, #68]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101068:	2200      	movs	r2, #0
 810106a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 810106c:	4b0f      	ldr	r3, [pc, #60]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810106e:	2201      	movs	r2, #1
 8101070:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8101072:	4b0e      	ldr	r3, [pc, #56]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101074:	2200      	movs	r2, #0
 8101076:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8101078:	4b0c      	ldr	r3, [pc, #48]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810107a:	2200      	movs	r2, #0
 810107c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 810107e:	4b0b      	ldr	r3, [pc, #44]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101080:	2200      	movs	r2, #0
 8101082:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8101084:	4b09      	ldr	r3, [pc, #36]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101086:	2200      	movs	r2, #0
 8101088:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 810108a:	4b08      	ldr	r3, [pc, #32]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810108c:	2200      	movs	r2, #0
 810108e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8101090:	4b06      	ldr	r3, [pc, #24]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101092:	2200      	movs	r2, #0
 8101094:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8101096:	4805      	ldr	r0, [pc, #20]	; (81010ac <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101098:	f001 fae8 	bl	810266c <HAL_PCD_Init>
 810109c:	4603      	mov	r3, r0
 810109e:	2b00      	cmp	r3, #0
 81010a0:	d001      	beq.n	81010a6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 81010a2:	f7ff fd0f 	bl	8100ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 81010a6:	bf00      	nop
 81010a8:	bd80      	pop	{r7, pc}
 81010aa:	bf00      	nop
 81010ac:	10000410 	.word	0x10000410
 81010b0:	40040000 	.word	0x40040000

081010b4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 81010b4:	b580      	push	{r7, lr}
 81010b6:	b0c2      	sub	sp, #264	; 0x108
 81010b8:	af00      	add	r7, sp, #0
 81010ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 81010be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 81010c2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 81010c8:	2200      	movs	r2, #0
 81010ca:	601a      	str	r2, [r3, #0]
 81010cc:	605a      	str	r2, [r3, #4]
 81010ce:	609a      	str	r2, [r3, #8]
 81010d0:	60da      	str	r2, [r3, #12]
 81010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81010d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81010d8:	22c8      	movs	r2, #200	; 0xc8
 81010da:	2100      	movs	r1, #0
 81010dc:	4618      	mov	r0, r3
 81010de:	f005 fd1f 	bl	8106b20 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 81010e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 81010e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 81010ea:	681b      	ldr	r3, [r3, #0]
 81010ec:	681b      	ldr	r3, [r3, #0]
 81010ee:	4a79      	ldr	r2, [pc, #484]	; (81012d4 <HAL_PCD_MspInit+0x220>)
 81010f0:	4293      	cmp	r3, r2
 81010f2:	f040 80ea 	bne.w	81012ca <HAL_PCD_MspInit+0x216>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81010f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 81010fa:	f04f 0300 	mov.w	r3, #0
 81010fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8101102:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8101106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810110a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810110e:	4618      	mov	r0, r3
 8101110:	f001 fe4e 	bl	8102db0 <HAL_RCCEx_PeriphCLKConfig>
 8101114:	4603      	mov	r3, r0
 8101116:	2b00      	cmp	r3, #0
 8101118:	d001      	beq.n	810111e <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 810111a:	f7ff fcd3 	bl	8100ac4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 810111e:	f001 fc75 	bl	8102a0c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101122:	4b6d      	ldr	r3, [pc, #436]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101128:	4a6b      	ldr	r2, [pc, #428]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 810112a:	f043 0302 	orr.w	r3, r3, #2
 810112e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101132:	4b69      	ldr	r3, [pc, #420]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101138:	f003 0302 	and.w	r3, r3, #2
 810113c:	627b      	str	r3, [r7, #36]	; 0x24
 810113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8101140:	4b65      	ldr	r3, [pc, #404]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101146:	4a64      	ldr	r2, [pc, #400]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810114c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101150:	4b61      	ldr	r3, [pc, #388]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810115a:	623b      	str	r3, [r7, #32]
 810115c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810115e:	4b5e      	ldr	r3, [pc, #376]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101164:	4a5c      	ldr	r2, [pc, #368]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101166:	f043 0304 	orr.w	r3, r3, #4
 810116a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810116e:	4b5a      	ldr	r3, [pc, #360]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101174:	f003 0304 	and.w	r3, r3, #4
 8101178:	61fb      	str	r3, [r7, #28]
 810117a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 810117c:	4b56      	ldr	r3, [pc, #344]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 810117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101182:	4a55      	ldr	r2, [pc, #340]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810118c:	4b52      	ldr	r3, [pc, #328]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 810118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101196:	61bb      	str	r3, [r7, #24]
 8101198:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810119a:	4b4f      	ldr	r3, [pc, #316]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 810119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011a0:	4a4d      	ldr	r2, [pc, #308]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 81011a2:	f043 0301 	orr.w	r3, r3, #1
 81011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011aa:	4b4b      	ldr	r3, [pc, #300]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 81011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011b0:	f003 0301 	and.w	r3, r3, #1
 81011b4:	617b      	str	r3, [r7, #20]
 81011b6:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 81011b8:	f643 4323 	movw	r3, #15395	; 0x3c23
 81011bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011c0:	2302      	movs	r3, #2
 81011c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011c6:	2300      	movs	r3, #0
 81011c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81011cc:	2302      	movs	r3, #2
 81011ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81011d2:	230a      	movs	r3, #10
 81011d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81011d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 81011dc:	4619      	mov	r1, r3
 81011de:	483f      	ldr	r0, [pc, #252]	; (81012dc <HAL_PCD_MspInit+0x228>)
 81011e0:	f001 f84e 	bl	8102280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 81011e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81011e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011ec:	2302      	movs	r3, #2
 81011ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011f2:	2300      	movs	r3, #0
 81011f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81011f8:	2302      	movs	r3, #2
 81011fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81011fe:	230a      	movs	r3, #10
 8101200:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8101204:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8101208:	4619      	mov	r1, r3
 810120a:	4835      	ldr	r0, [pc, #212]	; (81012e0 <HAL_PCD_MspInit+0x22c>)
 810120c:	f001 f838 	bl	8102280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8101210:	2301      	movs	r3, #1
 8101212:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101216:	2302      	movs	r3, #2
 8101218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810121c:	2300      	movs	r3, #0
 810121e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101222:	2302      	movs	r3, #2
 8101224:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101228:	230a      	movs	r3, #10
 810122a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 810122e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8101232:	4619      	mov	r1, r3
 8101234:	482b      	ldr	r0, [pc, #172]	; (81012e4 <HAL_PCD_MspInit+0x230>)
 8101236:	f001 f823 	bl	8102280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 810123a:	2310      	movs	r3, #16
 810123c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101240:	2302      	movs	r3, #2
 8101242:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101246:	2300      	movs	r3, #0
 8101248:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810124c:	2302      	movs	r3, #2
 810124e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101252:	230a      	movs	r3, #10
 8101254:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8101258:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 810125c:	4619      	mov	r1, r3
 810125e:	4822      	ldr	r0, [pc, #136]	; (81012e8 <HAL_PCD_MspInit+0x234>)
 8101260:	f001 f80e 	bl	8102280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8101264:	2328      	movs	r3, #40	; 0x28
 8101266:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810126a:	2302      	movs	r3, #2
 810126c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101270:	2300      	movs	r3, #0
 8101272:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101276:	2302      	movs	r3, #2
 8101278:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810127c:	230a      	movs	r3, #10
 810127e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101282:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8101286:	4619      	mov	r1, r3
 8101288:	4818      	ldr	r0, [pc, #96]	; (81012ec <HAL_PCD_MspInit+0x238>)
 810128a:	f000 fff9 	bl	8102280 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 810128e:	4b12      	ldr	r3, [pc, #72]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101294:	4a10      	ldr	r2, [pc, #64]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 8101296:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810129a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810129e:	4b0e      	ldr	r3, [pc, #56]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 81012a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81012a8:	613b      	str	r3, [r7, #16]
 81012aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 81012ac:	4b0a      	ldr	r3, [pc, #40]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 81012ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012b2:	4a09      	ldr	r2, [pc, #36]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 81012b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81012b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81012bc:	4b06      	ldr	r3, [pc, #24]	; (81012d8 <HAL_PCD_MspInit+0x224>)
 81012be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81012c6:	60fb      	str	r3, [r7, #12]
 81012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 81012ca:	bf00      	nop
 81012cc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 81012d0:	46bd      	mov	sp, r7
 81012d2:	bd80      	pop	{r7, pc}
 81012d4:	40040000 	.word	0x40040000
 81012d8:	58024400 	.word	0x58024400
 81012dc:	58020400 	.word	0x58020400
 81012e0:	58022000 	.word	0x58022000
 81012e4:	58020800 	.word	0x58020800
 81012e8:	58021c00 	.word	0x58021c00
 81012ec:	58020000 	.word	0x58020000

081012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81012f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101328 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81012f4:	f7fe fff0 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81012f8:	480c      	ldr	r0, [pc, #48]	; (810132c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81012fa:	490d      	ldr	r1, [pc, #52]	; (8101330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81012fc:	4a0d      	ldr	r2, [pc, #52]	; (8101334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101300:	e002      	b.n	8101308 <LoopCopyDataInit>

08101302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101306:	3304      	adds	r3, #4

08101308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810130c:	d3f9      	bcc.n	8101302 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810130e:	4a0a      	ldr	r2, [pc, #40]	; (8101338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101310:	4c0a      	ldr	r4, [pc, #40]	; (810133c <LoopFillZerobss+0x22>)
  movs r3, #0
 8101312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101314:	e001      	b.n	810131a <LoopFillZerobss>

08101316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101318:	3204      	adds	r2, #4

0810131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810131c:	d3fb      	bcc.n	8101316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810131e:	f005 fbdb 	bl	8106ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101322:	f7ff fb71 	bl	8100a08 <main>
  bx  lr
 8101326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101328:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810132c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101330:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101334:	08106b60 	.word	0x08106b60
  ldr r2, =_sbss
 8101338:	100000d0 	.word	0x100000d0
  ldr r4, =_ebss
 810133c:	10000920 	.word	0x10000920

08101340 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101340:	e7fe      	b.n	8101340 <ADC3_IRQHandler>
	...

08101344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101344:	b580      	push	{r7, lr}
 8101346:	b082      	sub	sp, #8
 8101348:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810134a:	4b28      	ldr	r3, [pc, #160]	; (81013ec <HAL_Init+0xa8>)
 810134c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101350:	4a26      	ldr	r2, [pc, #152]	; (81013ec <HAL_Init+0xa8>)
 8101352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101356:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810135a:	4b24      	ldr	r3, [pc, #144]	; (81013ec <HAL_Init+0xa8>)
 810135c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101364:	603b      	str	r3, [r7, #0]
 8101366:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101368:	4b21      	ldr	r3, [pc, #132]	; (81013f0 <HAL_Init+0xac>)
 810136a:	681b      	ldr	r3, [r3, #0]
 810136c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101370:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101374:	4a1e      	ldr	r2, [pc, #120]	; (81013f0 <HAL_Init+0xac>)
 8101376:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810137a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810137c:	4b1c      	ldr	r3, [pc, #112]	; (81013f0 <HAL_Init+0xac>)
 810137e:	681b      	ldr	r3, [r3, #0]
 8101380:	4a1b      	ldr	r2, [pc, #108]	; (81013f0 <HAL_Init+0xac>)
 8101382:	f043 0301 	orr.w	r3, r3, #1
 8101386:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101388:	2003      	movs	r0, #3
 810138a:	f000 fb01 	bl	8101990 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810138e:	f001 fb4d 	bl	8102a2c <HAL_RCC_GetSysClockFreq>
 8101392:	4602      	mov	r2, r0
 8101394:	4b15      	ldr	r3, [pc, #84]	; (81013ec <HAL_Init+0xa8>)
 8101396:	699b      	ldr	r3, [r3, #24]
 8101398:	0a1b      	lsrs	r3, r3, #8
 810139a:	f003 030f 	and.w	r3, r3, #15
 810139e:	4915      	ldr	r1, [pc, #84]	; (81013f4 <HAL_Init+0xb0>)
 81013a0:	5ccb      	ldrb	r3, [r1, r3]
 81013a2:	f003 031f 	and.w	r3, r3, #31
 81013a6:	fa22 f303 	lsr.w	r3, r2, r3
 81013aa:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81013ac:	4b0f      	ldr	r3, [pc, #60]	; (81013ec <HAL_Init+0xa8>)
 81013ae:	699b      	ldr	r3, [r3, #24]
 81013b0:	f003 030f 	and.w	r3, r3, #15
 81013b4:	4a0f      	ldr	r2, [pc, #60]	; (81013f4 <HAL_Init+0xb0>)
 81013b6:	5cd3      	ldrb	r3, [r2, r3]
 81013b8:	f003 031f 	and.w	r3, r3, #31
 81013bc:	687a      	ldr	r2, [r7, #4]
 81013be:	fa22 f303 	lsr.w	r3, r2, r3
 81013c2:	4a0d      	ldr	r2, [pc, #52]	; (81013f8 <HAL_Init+0xb4>)
 81013c4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81013c6:	4b0c      	ldr	r3, [pc, #48]	; (81013f8 <HAL_Init+0xb4>)
 81013c8:	681b      	ldr	r3, [r3, #0]
 81013ca:	4a0c      	ldr	r2, [pc, #48]	; (81013fc <HAL_Init+0xb8>)
 81013cc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81013ce:	2000      	movs	r0, #0
 81013d0:	f000 f816 	bl	8101400 <HAL_InitTick>
 81013d4:	4603      	mov	r3, r0
 81013d6:	2b00      	cmp	r3, #0
 81013d8:	d001      	beq.n	81013de <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81013da:	2301      	movs	r3, #1
 81013dc:	e002      	b.n	81013e4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81013de:	f7ff fde9 	bl	8100fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81013e2:	2300      	movs	r3, #0
}
 81013e4:	4618      	mov	r0, r3
 81013e6:	3708      	adds	r7, #8
 81013e8:	46bd      	mov	sp, r7
 81013ea:	bd80      	pop	{r7, pc}
 81013ec:	58024400 	.word	0x58024400
 81013f0:	40024400 	.word	0x40024400
 81013f4:	08106b48 	.word	0x08106b48
 81013f8:	10000004 	.word	0x10000004
 81013fc:	10000000 	.word	0x10000000

08101400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101400:	b580      	push	{r7, lr}
 8101402:	b082      	sub	sp, #8
 8101404:	af00      	add	r7, sp, #0
 8101406:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101408:	4b15      	ldr	r3, [pc, #84]	; (8101460 <HAL_InitTick+0x60>)
 810140a:	781b      	ldrb	r3, [r3, #0]
 810140c:	2b00      	cmp	r3, #0
 810140e:	d101      	bne.n	8101414 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101410:	2301      	movs	r3, #1
 8101412:	e021      	b.n	8101458 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101414:	4b13      	ldr	r3, [pc, #76]	; (8101464 <HAL_InitTick+0x64>)
 8101416:	681a      	ldr	r2, [r3, #0]
 8101418:	4b11      	ldr	r3, [pc, #68]	; (8101460 <HAL_InitTick+0x60>)
 810141a:	781b      	ldrb	r3, [r3, #0]
 810141c:	4619      	mov	r1, r3
 810141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101422:	fbb3 f3f1 	udiv	r3, r3, r1
 8101426:	fbb2 f3f3 	udiv	r3, r2, r3
 810142a:	4618      	mov	r0, r3
 810142c:	f000 fae3 	bl	81019f6 <HAL_SYSTICK_Config>
 8101430:	4603      	mov	r3, r0
 8101432:	2b00      	cmp	r3, #0
 8101434:	d001      	beq.n	810143a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101436:	2301      	movs	r3, #1
 8101438:	e00e      	b.n	8101458 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810143a:	687b      	ldr	r3, [r7, #4]
 810143c:	2b0f      	cmp	r3, #15
 810143e:	d80a      	bhi.n	8101456 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101440:	2200      	movs	r2, #0
 8101442:	6879      	ldr	r1, [r7, #4]
 8101444:	f04f 30ff 	mov.w	r0, #4294967295
 8101448:	f000 faad 	bl	81019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810144c:	4a06      	ldr	r2, [pc, #24]	; (8101468 <HAL_InitTick+0x68>)
 810144e:	687b      	ldr	r3, [r7, #4]
 8101450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101452:	2300      	movs	r3, #0
 8101454:	e000      	b.n	8101458 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101456:	2301      	movs	r3, #1
}
 8101458:	4618      	mov	r0, r3
 810145a:	3708      	adds	r7, #8
 810145c:	46bd      	mov	sp, r7
 810145e:	bd80      	pop	{r7, pc}
 8101460:	1000000c 	.word	0x1000000c
 8101464:	10000000 	.word	0x10000000
 8101468:	10000008 	.word	0x10000008

0810146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810146c:	b480      	push	{r7}
 810146e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101470:	4b06      	ldr	r3, [pc, #24]	; (810148c <HAL_IncTick+0x20>)
 8101472:	781b      	ldrb	r3, [r3, #0]
 8101474:	461a      	mov	r2, r3
 8101476:	4b06      	ldr	r3, [pc, #24]	; (8101490 <HAL_IncTick+0x24>)
 8101478:	681b      	ldr	r3, [r3, #0]
 810147a:	4413      	add	r3, r2
 810147c:	4a04      	ldr	r2, [pc, #16]	; (8101490 <HAL_IncTick+0x24>)
 810147e:	6013      	str	r3, [r2, #0]
}
 8101480:	bf00      	nop
 8101482:	46bd      	mov	sp, r7
 8101484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101488:	4770      	bx	lr
 810148a:	bf00      	nop
 810148c:	1000000c 	.word	0x1000000c
 8101490:	1000091c 	.word	0x1000091c

08101494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101494:	b480      	push	{r7}
 8101496:	af00      	add	r7, sp, #0
  return uwTick;
 8101498:	4b03      	ldr	r3, [pc, #12]	; (81014a8 <HAL_GetTick+0x14>)
 810149a:	681b      	ldr	r3, [r3, #0]
}
 810149c:	4618      	mov	r0, r3
 810149e:	46bd      	mov	sp, r7
 81014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014a4:	4770      	bx	lr
 81014a6:	bf00      	nop
 81014a8:	1000091c 	.word	0x1000091c

081014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81014ac:	b580      	push	{r7, lr}
 81014ae:	b084      	sub	sp, #16
 81014b0:	af00      	add	r7, sp, #0
 81014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81014b4:	f7ff ffee 	bl	8101494 <HAL_GetTick>
 81014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81014ba:	687b      	ldr	r3, [r7, #4]
 81014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81014be:	68fb      	ldr	r3, [r7, #12]
 81014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81014c4:	d005      	beq.n	81014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81014c6:	4b0a      	ldr	r3, [pc, #40]	; (81014f0 <HAL_Delay+0x44>)
 81014c8:	781b      	ldrb	r3, [r3, #0]
 81014ca:	461a      	mov	r2, r3
 81014cc:	68fb      	ldr	r3, [r7, #12]
 81014ce:	4413      	add	r3, r2
 81014d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81014d2:	bf00      	nop
 81014d4:	f7ff ffde 	bl	8101494 <HAL_GetTick>
 81014d8:	4602      	mov	r2, r0
 81014da:	68bb      	ldr	r3, [r7, #8]
 81014dc:	1ad3      	subs	r3, r2, r3
 81014de:	68fa      	ldr	r2, [r7, #12]
 81014e0:	429a      	cmp	r2, r3
 81014e2:	d8f7      	bhi.n	81014d4 <HAL_Delay+0x28>
  {
  }
}
 81014e4:	bf00      	nop
 81014e6:	bf00      	nop
 81014e8:	3710      	adds	r7, #16
 81014ea:	46bd      	mov	sp, r7
 81014ec:	bd80      	pop	{r7, pc}
 81014ee:	bf00      	nop
 81014f0:	1000000c 	.word	0x1000000c

081014f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81014f4:	b480      	push	{r7}
 81014f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81014f8:	4b03      	ldr	r3, [pc, #12]	; (8101508 <HAL_GetREVID+0x14>)
 81014fa:	681b      	ldr	r3, [r3, #0]
 81014fc:	0c1b      	lsrs	r3, r3, #16
}
 81014fe:	4618      	mov	r0, r3
 8101500:	46bd      	mov	sp, r7
 8101502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101506:	4770      	bx	lr
 8101508:	5c001000 	.word	0x5c001000

0810150c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 810150c:	b480      	push	{r7}
 810150e:	b083      	sub	sp, #12
 8101510:	af00      	add	r7, sp, #0
 8101512:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8101514:	4b06      	ldr	r3, [pc, #24]	; (8101530 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101516:	685b      	ldr	r3, [r3, #4]
 8101518:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 810151c:	4904      	ldr	r1, [pc, #16]	; (8101530 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810151e:	687b      	ldr	r3, [r7, #4]
 8101520:	4313      	orrs	r3, r2
 8101522:	604b      	str	r3, [r1, #4]
}
 8101524:	bf00      	nop
 8101526:	370c      	adds	r7, #12
 8101528:	46bd      	mov	sp, r7
 810152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810152e:	4770      	bx	lr
 8101530:	58000400 	.word	0x58000400

08101534 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8101534:	b580      	push	{r7, lr}
 8101536:	b082      	sub	sp, #8
 8101538:	af00      	add	r7, sp, #0
 810153a:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 810153c:	687b      	ldr	r3, [r7, #4]
 810153e:	2b00      	cmp	r3, #0
 8101540:	d003      	beq.n	810154a <HAL_CEC_Init+0x16>
 8101542:	687b      	ldr	r3, [r7, #4]
 8101544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101546:	2b00      	cmp	r3, #0
 8101548:	d101      	bne.n	810154e <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 810154a:	2301      	movs	r3, #1
 810154c:	e050      	b.n	81015f0 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 810154e:	687b      	ldr	r3, [r7, #4]
 8101550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101552:	2b00      	cmp	r3, #0
 8101554:	d106      	bne.n	8101564 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8101556:	687b      	ldr	r3, [r7, #4]
 8101558:	2200      	movs	r2, #0
 810155a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 810155e:	6878      	ldr	r0, [r7, #4]
 8101560:	f7ff f9e0 	bl	8100924 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8101564:	687b      	ldr	r3, [r7, #4]
 8101566:	2224      	movs	r2, #36	; 0x24
 8101568:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 810156a:	687b      	ldr	r3, [r7, #4]
 810156c:	681b      	ldr	r3, [r3, #0]
 810156e:	681a      	ldr	r2, [r3, #0]
 8101570:	687b      	ldr	r3, [r7, #4]
 8101572:	681b      	ldr	r3, [r3, #0]
 8101574:	f022 0201 	bic.w	r2, r2, #1
 8101578:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	685a      	ldr	r2, [r3, #4]
 810157e:	687b      	ldr	r3, [r7, #4]
 8101580:	689b      	ldr	r3, [r3, #8]
 8101582:	431a      	orrs	r2, r3
 8101584:	687b      	ldr	r3, [r7, #4]
 8101586:	68db      	ldr	r3, [r3, #12]
 8101588:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 810158a:	687b      	ldr	r3, [r7, #4]
 810158c:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810158e:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8101590:	687b      	ldr	r3, [r7, #4]
 8101592:	695b      	ldr	r3, [r3, #20]
 8101594:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8101596:	687b      	ldr	r3, [r7, #4]
 8101598:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 810159a:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810159c:	687b      	ldr	r3, [r7, #4]
 810159e:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 81015a0:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81015a2:	687b      	ldr	r3, [r7, #4]
 81015a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 81015a6:	041b      	lsls	r3, r3, #16
 81015a8:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81015b0:	687b      	ldr	r3, [r7, #4]
 81015b2:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81015b4:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81015b6:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 81015b8:	687b      	ldr	r3, [r7, #4]
 81015ba:	681b      	ldr	r3, [r3, #0]
 81015bc:	695b      	ldr	r3, [r3, #20]
 81015be:	687a      	ldr	r2, [r7, #4]
 81015c0:	6812      	ldr	r2, [r2, #0]
 81015c2:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 81015c6:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 81015ca:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 81015cc:	687b      	ldr	r3, [r7, #4]
 81015ce:	681b      	ldr	r3, [r3, #0]
 81015d0:	681a      	ldr	r2, [r3, #0]
 81015d2:	687b      	ldr	r3, [r7, #4]
 81015d4:	681b      	ldr	r3, [r3, #0]
 81015d6:	f042 0201 	orr.w	r2, r2, #1
 81015da:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81015dc:	687b      	ldr	r3, [r7, #4]
 81015de:	2200      	movs	r2, #0
 81015e0:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 81015e2:	687b      	ldr	r3, [r7, #4]
 81015e4:	2220      	movs	r2, #32
 81015e6:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 81015e8:	687b      	ldr	r3, [r7, #4]
 81015ea:	2220      	movs	r2, #32
 81015ec:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81015ee:	2300      	movs	r3, #0
}
 81015f0:	4618      	mov	r0, r3
 81015f2:	3708      	adds	r7, #8
 81015f4:	46bd      	mov	sp, r7
 81015f6:	bd80      	pop	{r7, pc}

081015f8 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 81015f8:	b580      	push	{r7, lr}
 81015fa:	b084      	sub	sp, #16
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8101600:	687b      	ldr	r3, [r7, #4]
 8101602:	681b      	ldr	r3, [r3, #0]
 8101604:	691b      	ldr	r3, [r3, #16]
 8101606:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8101608:	68fb      	ldr	r3, [r7, #12]
 810160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810160e:	2b00      	cmp	r3, #0
 8101610:	d00a      	beq.n	8101628 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8101612:	687b      	ldr	r3, [r7, #4]
 8101614:	2280      	movs	r2, #128	; 0x80
 8101616:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	691a      	ldr	r2, [r3, #16]
 810161e:	687b      	ldr	r3, [r7, #4]
 8101620:	681b      	ldr	r3, [r3, #0]
 8101622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8101626:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8101628:	68fb      	ldr	r3, [r7, #12]
 810162a:	f003 0301 	and.w	r3, r3, #1
 810162e:	2b00      	cmp	r3, #0
 8101630:	d01c      	beq.n	810166c <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8101632:	687b      	ldr	r3, [r7, #4]
 8101634:	2222      	movs	r2, #34	; 0x22
 8101636:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8101638:	687b      	ldr	r3, [r7, #4]
 810163a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 810163c:	3301      	adds	r3, #1
 810163e:	b29a      	uxth	r2, r3
 8101640:	687b      	ldr	r3, [r7, #4]
 8101642:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8101644:	687b      	ldr	r3, [r7, #4]
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	68da      	ldr	r2, [r3, #12]
 810164a:	687b      	ldr	r3, [r7, #4]
 810164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810164e:	b2d2      	uxtb	r2, r2
 8101650:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8101652:	687b      	ldr	r3, [r7, #4]
 8101654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101656:	1c5a      	adds	r2, r3, #1
 8101658:	687b      	ldr	r3, [r7, #4]
 810165a:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 810165c:	687b      	ldr	r3, [r7, #4]
 810165e:	681b      	ldr	r3, [r3, #0]
 8101660:	691a      	ldr	r2, [r3, #16]
 8101662:	687b      	ldr	r3, [r7, #4]
 8101664:	681b      	ldr	r3, [r3, #0]
 8101666:	f042 0201 	orr.w	r2, r2, #1
 810166a:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 810166c:	68fb      	ldr	r3, [r7, #12]
 810166e:	f003 0302 	and.w	r3, r3, #2
 8101672:	2b00      	cmp	r3, #0
 8101674:	d01e      	beq.n	81016b4 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8101676:	687b      	ldr	r3, [r7, #4]
 8101678:	681b      	ldr	r3, [r3, #0]
 810167a:	691a      	ldr	r2, [r3, #16]
 810167c:	687b      	ldr	r3, [r7, #4]
 810167e:	681b      	ldr	r3, [r3, #0]
 8101680:	f042 0202 	orr.w	r2, r2, #2
 8101684:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8101686:	687b      	ldr	r3, [r7, #4]
 8101688:	2220      	movs	r2, #32
 810168a:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 810168c:	687b      	ldr	r3, [r7, #4]
 810168e:	2200      	movs	r2, #0
 8101690:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8101692:	687b      	ldr	r3, [r7, #4]
 8101694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 810169a:	425b      	negs	r3, r3
 810169c:	441a      	add	r2, r3
 810169e:	687b      	ldr	r3, [r7, #4]
 81016a0:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 81016a2:	687b      	ldr	r3, [r7, #4]
 81016a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 81016a6:	4619      	mov	r1, r3
 81016a8:	6878      	ldr	r0, [r7, #4]
 81016aa:	f000 f88c 	bl	81017c6 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	2200      	movs	r2, #0
 81016b2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 81016b4:	68fb      	ldr	r3, [r7, #12]
 81016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81016ba:	2b00      	cmp	r3, #0
 81016bc:	d024      	beq.n	8101708 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 81016be:	687b      	ldr	r3, [r7, #4]
 81016c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 81016c2:	3b01      	subs	r3, #1
 81016c4:	b29a      	uxth	r2, r3
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 81016ca:	687b      	ldr	r3, [r7, #4]
 81016cc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 81016ce:	2b00      	cmp	r3, #0
 81016d0:	d107      	bne.n	81016e2 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	681b      	ldr	r3, [r3, #0]
 81016d6:	681a      	ldr	r2, [r3, #0]
 81016d8:	687b      	ldr	r3, [r7, #4]
 81016da:	681b      	ldr	r3, [r3, #0]
 81016dc:	f042 0204 	orr.w	r2, r2, #4
 81016e0:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 81016e2:	687b      	ldr	r3, [r7, #4]
 81016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81016e6:	781a      	ldrb	r2, [r3, #0]
 81016e8:	687b      	ldr	r3, [r7, #4]
 81016ea:	681b      	ldr	r3, [r3, #0]
 81016ec:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81016f2:	1c5a      	adds	r2, r3, #1
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 81016f8:	687b      	ldr	r3, [r7, #4]
 81016fa:	681b      	ldr	r3, [r3, #0]
 81016fc:	691a      	ldr	r2, [r3, #16]
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	681b      	ldr	r3, [r3, #0]
 8101702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101706:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8101708:	68fb      	ldr	r3, [r7, #12]
 810170a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810170e:	2b00      	cmp	r3, #0
 8101710:	d014      	beq.n	810173c <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8101712:	687b      	ldr	r3, [r7, #4]
 8101714:	681b      	ldr	r3, [r3, #0]
 8101716:	691a      	ldr	r2, [r3, #16]
 8101718:	687b      	ldr	r3, [r7, #4]
 810171a:	681b      	ldr	r3, [r3, #0]
 810171c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8101720:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8101722:	687b      	ldr	r3, [r7, #4]
 8101724:	2220      	movs	r2, #32
 8101726:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8101728:	687b      	ldr	r3, [r7, #4]
 810172a:	2200      	movs	r2, #0
 810172c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	2200      	movs	r2, #0
 8101734:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8101736:	6878      	ldr	r0, [r7, #4]
 8101738:	f000 f83b 	bl	81017b2 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 810173c:	68fa      	ldr	r2, [r7, #12]
 810173e:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8101742:	4013      	ands	r3, r2
 8101744:	2b00      	cmp	r3, #0
 8101746:	d030      	beq.n	81017aa <HAL_CEC_IRQHandler+0x1b2>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8101748:	687b      	ldr	r3, [r7, #4]
 810174a:	68fa      	ldr	r2, [r7, #12]
 810174c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 810174e:	687b      	ldr	r3, [r7, #4]
 8101750:	681b      	ldr	r3, [r3, #0]
 8101752:	691b      	ldr	r3, [r3, #16]
 8101754:	687a      	ldr	r2, [r7, #4]
 8101756:	6812      	ldr	r2, [r2, #0]
 8101758:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 810175c:	f043 031c 	orr.w	r3, r3, #28
 8101760:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8101762:	68fb      	ldr	r3, [r7, #12]
 8101764:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8101768:	2b00      	cmp	r3, #0
 810176a:	d00e      	beq.n	810178a <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101770:	687b      	ldr	r3, [r7, #4]
 8101772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8101774:	425b      	negs	r3, r3
 8101776:	441a      	add	r2, r3
 8101778:	687b      	ldr	r3, [r7, #4]
 810177a:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	2200      	movs	r2, #0
 8101780:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8101782:	687b      	ldr	r3, [r7, #4]
 8101784:	2220      	movs	r2, #32
 8101786:	63da      	str	r2, [r3, #60]	; 0x3c
 8101788:	e00c      	b.n	81017a4 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 810178a:	68fb      	ldr	r3, [r7, #12]
 810178c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101790:	2b00      	cmp	r3, #0
 8101792:	d107      	bne.n	81017a4 <HAL_CEC_IRQHandler+0x1ac>
 8101794:	68fb      	ldr	r3, [r7, #12]
 8101796:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 810179a:	2b00      	cmp	r3, #0
 810179c:	d002      	beq.n	81017a4 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 810179e:	687b      	ldr	r3, [r7, #4]
 81017a0:	2220      	movs	r2, #32
 81017a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 81017a4:	6878      	ldr	r0, [r7, #4]
 81017a6:	f000 f819 	bl	81017dc <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 81017aa:	bf00      	nop
 81017ac:	3710      	adds	r7, #16
 81017ae:	46bd      	mov	sp, r7
 81017b0:	bd80      	pop	{r7, pc}

081017b2 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 81017b2:	b480      	push	{r7}
 81017b4:	b083      	sub	sp, #12
 81017b6:	af00      	add	r7, sp, #0
 81017b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 81017ba:	bf00      	nop
 81017bc:	370c      	adds	r7, #12
 81017be:	46bd      	mov	sp, r7
 81017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017c4:	4770      	bx	lr

081017c6 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 81017c6:	b480      	push	{r7}
 81017c8:	b083      	sub	sp, #12
 81017ca:	af00      	add	r7, sp, #0
 81017cc:	6078      	str	r0, [r7, #4]
 81017ce:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 81017d0:	bf00      	nop
 81017d2:	370c      	adds	r7, #12
 81017d4:	46bd      	mov	sp, r7
 81017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017da:	4770      	bx	lr

081017dc <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 81017dc:	b480      	push	{r7}
 81017de:	b083      	sub	sp, #12
 81017e0:	af00      	add	r7, sp, #0
 81017e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 81017e4:	bf00      	nop
 81017e6:	370c      	adds	r7, #12
 81017e8:	46bd      	mov	sp, r7
 81017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ee:	4770      	bx	lr

081017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81017f0:	b480      	push	{r7}
 81017f2:	b085      	sub	sp, #20
 81017f4:	af00      	add	r7, sp, #0
 81017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81017f8:	687b      	ldr	r3, [r7, #4]
 81017fa:	f003 0307 	and.w	r3, r3, #7
 81017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101800:	4b0c      	ldr	r3, [pc, #48]	; (8101834 <__NVIC_SetPriorityGrouping+0x44>)
 8101802:	68db      	ldr	r3, [r3, #12]
 8101804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101806:	68ba      	ldr	r2, [r7, #8]
 8101808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810180c:	4013      	ands	r3, r2
 810180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101810:	68fb      	ldr	r3, [r7, #12]
 8101812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101814:	68bb      	ldr	r3, [r7, #8]
 8101816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101822:	4a04      	ldr	r2, [pc, #16]	; (8101834 <__NVIC_SetPriorityGrouping+0x44>)
 8101824:	68bb      	ldr	r3, [r7, #8]
 8101826:	60d3      	str	r3, [r2, #12]
}
 8101828:	bf00      	nop
 810182a:	3714      	adds	r7, #20
 810182c:	46bd      	mov	sp, r7
 810182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101832:	4770      	bx	lr
 8101834:	e000ed00 	.word	0xe000ed00

08101838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101838:	b480      	push	{r7}
 810183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810183c:	4b04      	ldr	r3, [pc, #16]	; (8101850 <__NVIC_GetPriorityGrouping+0x18>)
 810183e:	68db      	ldr	r3, [r3, #12]
 8101840:	0a1b      	lsrs	r3, r3, #8
 8101842:	f003 0307 	and.w	r3, r3, #7
}
 8101846:	4618      	mov	r0, r3
 8101848:	46bd      	mov	sp, r7
 810184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810184e:	4770      	bx	lr
 8101850:	e000ed00 	.word	0xe000ed00

08101854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101854:	b480      	push	{r7}
 8101856:	b083      	sub	sp, #12
 8101858:	af00      	add	r7, sp, #0
 810185a:	4603      	mov	r3, r0
 810185c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810185e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101862:	2b00      	cmp	r3, #0
 8101864:	db0b      	blt.n	810187e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101866:	88fb      	ldrh	r3, [r7, #6]
 8101868:	f003 021f 	and.w	r2, r3, #31
 810186c:	4907      	ldr	r1, [pc, #28]	; (810188c <__NVIC_EnableIRQ+0x38>)
 810186e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101872:	095b      	lsrs	r3, r3, #5
 8101874:	2001      	movs	r0, #1
 8101876:	fa00 f202 	lsl.w	r2, r0, r2
 810187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810187e:	bf00      	nop
 8101880:	370c      	adds	r7, #12
 8101882:	46bd      	mov	sp, r7
 8101884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101888:	4770      	bx	lr
 810188a:	bf00      	nop
 810188c:	e000e100 	.word	0xe000e100

08101890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101890:	b480      	push	{r7}
 8101892:	b083      	sub	sp, #12
 8101894:	af00      	add	r7, sp, #0
 8101896:	4603      	mov	r3, r0
 8101898:	6039      	str	r1, [r7, #0]
 810189a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81018a0:	2b00      	cmp	r3, #0
 81018a2:	db0a      	blt.n	81018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81018a4:	683b      	ldr	r3, [r7, #0]
 81018a6:	b2da      	uxtb	r2, r3
 81018a8:	490c      	ldr	r1, [pc, #48]	; (81018dc <__NVIC_SetPriority+0x4c>)
 81018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81018ae:	0112      	lsls	r2, r2, #4
 81018b0:	b2d2      	uxtb	r2, r2
 81018b2:	440b      	add	r3, r1
 81018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81018b8:	e00a      	b.n	81018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81018ba:	683b      	ldr	r3, [r7, #0]
 81018bc:	b2da      	uxtb	r2, r3
 81018be:	4908      	ldr	r1, [pc, #32]	; (81018e0 <__NVIC_SetPriority+0x50>)
 81018c0:	88fb      	ldrh	r3, [r7, #6]
 81018c2:	f003 030f 	and.w	r3, r3, #15
 81018c6:	3b04      	subs	r3, #4
 81018c8:	0112      	lsls	r2, r2, #4
 81018ca:	b2d2      	uxtb	r2, r2
 81018cc:	440b      	add	r3, r1
 81018ce:	761a      	strb	r2, [r3, #24]
}
 81018d0:	bf00      	nop
 81018d2:	370c      	adds	r7, #12
 81018d4:	46bd      	mov	sp, r7
 81018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018da:	4770      	bx	lr
 81018dc:	e000e100 	.word	0xe000e100
 81018e0:	e000ed00 	.word	0xe000ed00

081018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81018e4:	b480      	push	{r7}
 81018e6:	b089      	sub	sp, #36	; 0x24
 81018e8:	af00      	add	r7, sp, #0
 81018ea:	60f8      	str	r0, [r7, #12]
 81018ec:	60b9      	str	r1, [r7, #8]
 81018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81018f0:	68fb      	ldr	r3, [r7, #12]
 81018f2:	f003 0307 	and.w	r3, r3, #7
 81018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81018f8:	69fb      	ldr	r3, [r7, #28]
 81018fa:	f1c3 0307 	rsb	r3, r3, #7
 81018fe:	2b04      	cmp	r3, #4
 8101900:	bf28      	it	cs
 8101902:	2304      	movcs	r3, #4
 8101904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101906:	69fb      	ldr	r3, [r7, #28]
 8101908:	3304      	adds	r3, #4
 810190a:	2b06      	cmp	r3, #6
 810190c:	d902      	bls.n	8101914 <NVIC_EncodePriority+0x30>
 810190e:	69fb      	ldr	r3, [r7, #28]
 8101910:	3b03      	subs	r3, #3
 8101912:	e000      	b.n	8101916 <NVIC_EncodePriority+0x32>
 8101914:	2300      	movs	r3, #0
 8101916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101918:	f04f 32ff 	mov.w	r2, #4294967295
 810191c:	69bb      	ldr	r3, [r7, #24]
 810191e:	fa02 f303 	lsl.w	r3, r2, r3
 8101922:	43da      	mvns	r2, r3
 8101924:	68bb      	ldr	r3, [r7, #8]
 8101926:	401a      	ands	r2, r3
 8101928:	697b      	ldr	r3, [r7, #20]
 810192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810192c:	f04f 31ff 	mov.w	r1, #4294967295
 8101930:	697b      	ldr	r3, [r7, #20]
 8101932:	fa01 f303 	lsl.w	r3, r1, r3
 8101936:	43d9      	mvns	r1, r3
 8101938:	687b      	ldr	r3, [r7, #4]
 810193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810193c:	4313      	orrs	r3, r2
         );
}
 810193e:	4618      	mov	r0, r3
 8101940:	3724      	adds	r7, #36	; 0x24
 8101942:	46bd      	mov	sp, r7
 8101944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101948:	4770      	bx	lr
	...

0810194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810194c:	b580      	push	{r7, lr}
 810194e:	b082      	sub	sp, #8
 8101950:	af00      	add	r7, sp, #0
 8101952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	3b01      	subs	r3, #1
 8101958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810195c:	d301      	bcc.n	8101962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810195e:	2301      	movs	r3, #1
 8101960:	e00f      	b.n	8101982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101962:	4a0a      	ldr	r2, [pc, #40]	; (810198c <SysTick_Config+0x40>)
 8101964:	687b      	ldr	r3, [r7, #4]
 8101966:	3b01      	subs	r3, #1
 8101968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810196a:	210f      	movs	r1, #15
 810196c:	f04f 30ff 	mov.w	r0, #4294967295
 8101970:	f7ff ff8e 	bl	8101890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101974:	4b05      	ldr	r3, [pc, #20]	; (810198c <SysTick_Config+0x40>)
 8101976:	2200      	movs	r2, #0
 8101978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810197a:	4b04      	ldr	r3, [pc, #16]	; (810198c <SysTick_Config+0x40>)
 810197c:	2207      	movs	r2, #7
 810197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101980:	2300      	movs	r3, #0
}
 8101982:	4618      	mov	r0, r3
 8101984:	3708      	adds	r7, #8
 8101986:	46bd      	mov	sp, r7
 8101988:	bd80      	pop	{r7, pc}
 810198a:	bf00      	nop
 810198c:	e000e010 	.word	0xe000e010

08101990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101990:	b580      	push	{r7, lr}
 8101992:	b082      	sub	sp, #8
 8101994:	af00      	add	r7, sp, #0
 8101996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101998:	6878      	ldr	r0, [r7, #4]
 810199a:	f7ff ff29 	bl	81017f0 <__NVIC_SetPriorityGrouping>
}
 810199e:	bf00      	nop
 81019a0:	3708      	adds	r7, #8
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd80      	pop	{r7, pc}

081019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81019a6:	b580      	push	{r7, lr}
 81019a8:	b086      	sub	sp, #24
 81019aa:	af00      	add	r7, sp, #0
 81019ac:	4603      	mov	r3, r0
 81019ae:	60b9      	str	r1, [r7, #8]
 81019b0:	607a      	str	r2, [r7, #4]
 81019b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81019b4:	f7ff ff40 	bl	8101838 <__NVIC_GetPriorityGrouping>
 81019b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81019ba:	687a      	ldr	r2, [r7, #4]
 81019bc:	68b9      	ldr	r1, [r7, #8]
 81019be:	6978      	ldr	r0, [r7, #20]
 81019c0:	f7ff ff90 	bl	81018e4 <NVIC_EncodePriority>
 81019c4:	4602      	mov	r2, r0
 81019c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81019ca:	4611      	mov	r1, r2
 81019cc:	4618      	mov	r0, r3
 81019ce:	f7ff ff5f 	bl	8101890 <__NVIC_SetPriority>
}
 81019d2:	bf00      	nop
 81019d4:	3718      	adds	r7, #24
 81019d6:	46bd      	mov	sp, r7
 81019d8:	bd80      	pop	{r7, pc}

081019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81019da:	b580      	push	{r7, lr}
 81019dc:	b082      	sub	sp, #8
 81019de:	af00      	add	r7, sp, #0
 81019e0:	4603      	mov	r3, r0
 81019e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81019e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019e8:	4618      	mov	r0, r3
 81019ea:	f7ff ff33 	bl	8101854 <__NVIC_EnableIRQ>
}
 81019ee:	bf00      	nop
 81019f0:	3708      	adds	r7, #8
 81019f2:	46bd      	mov	sp, r7
 81019f4:	bd80      	pop	{r7, pc}

081019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81019f6:	b580      	push	{r7, lr}
 81019f8:	b082      	sub	sp, #8
 81019fa:	af00      	add	r7, sp, #0
 81019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81019fe:	6878      	ldr	r0, [r7, #4]
 8101a00:	f7ff ffa4 	bl	810194c <SysTick_Config>
 8101a04:	4603      	mov	r3, r0
}
 8101a06:	4618      	mov	r0, r3
 8101a08:	3708      	adds	r7, #8
 8101a0a:	46bd      	mov	sp, r7
 8101a0c:	bd80      	pop	{r7, pc}
	...

08101a10 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101a10:	b480      	push	{r7}
 8101a12:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101a14:	4b07      	ldr	r3, [pc, #28]	; (8101a34 <HAL_GetCurrentCPUID+0x24>)
 8101a16:	681b      	ldr	r3, [r3, #0]
 8101a18:	091b      	lsrs	r3, r3, #4
 8101a1a:	f003 030f 	and.w	r3, r3, #15
 8101a1e:	2b07      	cmp	r3, #7
 8101a20:	d101      	bne.n	8101a26 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101a22:	2303      	movs	r3, #3
 8101a24:	e000      	b.n	8101a28 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101a26:	2301      	movs	r3, #1
  }
}
 8101a28:	4618      	mov	r0, r3
 8101a2a:	46bd      	mov	sp, r7
 8101a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a30:	4770      	bx	lr
 8101a32:	bf00      	nop
 8101a34:	e000ed00 	.word	0xe000ed00

08101a38 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8101a38:	b580      	push	{r7, lr}
 8101a3a:	b084      	sub	sp, #16
 8101a3c:	af00      	add	r7, sp, #0
 8101a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8101a40:	687b      	ldr	r3, [r7, #4]
 8101a42:	2b00      	cmp	r3, #0
 8101a44:	d101      	bne.n	8101a4a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8101a46:	2301      	movs	r3, #1
 8101a48:	e0d1      	b.n	8101bee <HAL_ETH_Init+0x1b6>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101a50:	2b00      	cmp	r3, #0
 8101a52:	d106      	bne.n	8101a62 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	2223      	movs	r2, #35	; 0x23
 8101a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8101a5c:	6878      	ldr	r0, [r7, #4]
 8101a5e:	f7fe fc9f 	bl	81003a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101a62:	4b65      	ldr	r3, [pc, #404]	; (8101bf8 <HAL_ETH_Init+0x1c0>)
 8101a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a68:	4a63      	ldr	r2, [pc, #396]	; (8101bf8 <HAL_ETH_Init+0x1c0>)
 8101a6a:	f043 0302 	orr.w	r3, r3, #2
 8101a6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101a72:	4b61      	ldr	r3, [pc, #388]	; (8101bf8 <HAL_ETH_Init+0x1c0>)
 8101a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a78:	f003 0302 	and.w	r3, r3, #2
 8101a7c:	60bb      	str	r3, [r7, #8]
 8101a7e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	7a1b      	ldrb	r3, [r3, #8]
 8101a84:	2b00      	cmp	r3, #0
 8101a86:	d103      	bne.n	8101a90 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8101a88:	2000      	movs	r0, #0
 8101a8a:	f7ff fd3f 	bl	810150c <HAL_SYSCFG_ETHInterfaceSelect>
 8101a8e:	e003      	b.n	8101a98 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8101a90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8101a94:	f7ff fd3a 	bl	810150c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8101a98:	4b58      	ldr	r3, [pc, #352]	; (8101bfc <HAL_ETH_Init+0x1c4>)
 8101a9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	681b      	ldr	r3, [r3, #0]
 8101aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101aa4:	681b      	ldr	r3, [r3, #0]
 8101aa6:	687a      	ldr	r2, [r7, #4]
 8101aa8:	6812      	ldr	r2, [r2, #0]
 8101aaa:	f043 0301 	orr.w	r3, r3, #1
 8101aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101ab2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101ab4:	f7ff fcee 	bl	8101494 <HAL_GetTick>
 8101ab8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8101aba:	e011      	b.n	8101ae0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8101abc:	f7ff fcea 	bl	8101494 <HAL_GetTick>
 8101ac0:	4602      	mov	r2, r0
 8101ac2:	68fb      	ldr	r3, [r7, #12]
 8101ac4:	1ad3      	subs	r3, r2, r3
 8101ac6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8101aca:	d909      	bls.n	8101ae0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	2204      	movs	r2, #4
 8101ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	22e0      	movs	r2, #224	; 0xe0
 8101ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8101adc:	2301      	movs	r3, #1
 8101ade:	e086      	b.n	8101bee <HAL_ETH_Init+0x1b6>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101ae8:	681b      	ldr	r3, [r3, #0]
 8101aea:	f003 0301 	and.w	r3, r3, #1
 8101aee:	2b00      	cmp	r3, #0
 8101af0:	d1e4      	bne.n	8101abc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8101af2:	6878      	ldr	r0, [r7, #4]
 8101af4:	f000 f886 	bl	8101c04 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8101af8:	f001 f912 	bl	8102d20 <HAL_RCC_GetHCLKFreq>
 8101afc:	4603      	mov	r3, r0
 8101afe:	4a40      	ldr	r2, [pc, #256]	; (8101c00 <HAL_ETH_Init+0x1c8>)
 8101b00:	fba2 2303 	umull	r2, r3, r2, r3
 8101b04:	0c9a      	lsrs	r2, r3, #18
 8101b06:	687b      	ldr	r3, [r7, #4]
 8101b08:	681b      	ldr	r3, [r3, #0]
 8101b0a:	3a01      	subs	r2, #1
 8101b0c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8101b10:	6878      	ldr	r0, [r7, #4]
 8101b12:	f000 fa71 	bl	8101ff8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	681b      	ldr	r3, [r3, #0]
 8101b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101b1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8101b22:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8101b26:	687a      	ldr	r2, [r7, #4]
 8101b28:	6812      	ldr	r2, [r2, #0]
 8101b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8101b2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101b32:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	695b      	ldr	r3, [r3, #20]
 8101b3a:	f003 0303 	and.w	r3, r3, #3
 8101b3e:	2b00      	cmp	r3, #0
 8101b40:	d009      	beq.n	8101b56 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	2201      	movs	r2, #1
 8101b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8101b4a:	687b      	ldr	r3, [r7, #4]
 8101b4c:	22e0      	movs	r2, #224	; 0xe0
 8101b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8101b52:	2301      	movs	r3, #1
 8101b54:	e04b      	b.n	8101bee <HAL_ETH_Init+0x1b6>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8101b56:	687b      	ldr	r3, [r7, #4]
 8101b58:	681b      	ldr	r3, [r3, #0]
 8101b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101b5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8101b62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8101b66:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8101b6a:	687a      	ldr	r2, [r7, #4]
 8101b6c:	6952      	ldr	r2, [r2, #20]
 8101b6e:	0051      	lsls	r1, r2, #1
 8101b70:	687a      	ldr	r2, [r7, #4]
 8101b72:	6812      	ldr	r2, [r2, #0]
 8101b74:	430b      	orrs	r3, r1
 8101b76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101b7a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8101b7e:	6878      	ldr	r0, [r7, #4]
 8101b80:	f000 fad7 	bl	8102132 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8101b84:	6878      	ldr	r0, [r7, #4]
 8101b86:	f000 fb1d 	bl	81021c4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8101b8a:	687b      	ldr	r3, [r7, #4]
 8101b8c:	685b      	ldr	r3, [r3, #4]
 8101b8e:	3305      	adds	r3, #5
 8101b90:	781b      	ldrb	r3, [r3, #0]
 8101b92:	021a      	lsls	r2, r3, #8
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	685b      	ldr	r3, [r3, #4]
 8101b98:	3304      	adds	r3, #4
 8101b9a:	781b      	ldrb	r3, [r3, #0]
 8101b9c:	4619      	mov	r1, r3
 8101b9e:	687b      	ldr	r3, [r7, #4]
 8101ba0:	681b      	ldr	r3, [r3, #0]
 8101ba2:	430a      	orrs	r2, r1
 8101ba4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	685b      	ldr	r3, [r3, #4]
 8101bac:	3303      	adds	r3, #3
 8101bae:	781b      	ldrb	r3, [r3, #0]
 8101bb0:	061a      	lsls	r2, r3, #24
 8101bb2:	687b      	ldr	r3, [r7, #4]
 8101bb4:	685b      	ldr	r3, [r3, #4]
 8101bb6:	3302      	adds	r3, #2
 8101bb8:	781b      	ldrb	r3, [r3, #0]
 8101bba:	041b      	lsls	r3, r3, #16
 8101bbc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	685b      	ldr	r3, [r3, #4]
 8101bc2:	3301      	adds	r3, #1
 8101bc4:	781b      	ldrb	r3, [r3, #0]
 8101bc6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101bc8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101bca:	687b      	ldr	r3, [r7, #4]
 8101bcc:	685b      	ldr	r3, [r3, #4]
 8101bce:	781b      	ldrb	r3, [r3, #0]
 8101bd0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101bd2:	687b      	ldr	r3, [r7, #4]
 8101bd4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101bd6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101bd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	2200      	movs	r2, #0
 8101be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8101be4:	687b      	ldr	r3, [r7, #4]
 8101be6:	2210      	movs	r2, #16
 8101be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8101bec:	2300      	movs	r3, #0
}
 8101bee:	4618      	mov	r0, r3
 8101bf0:	3710      	adds	r7, #16
 8101bf2:	46bd      	mov	sp, r7
 8101bf4:	bd80      	pop	{r7, pc}
 8101bf6:	bf00      	nop
 8101bf8:	58024400 	.word	0x58024400
 8101bfc:	58000400 	.word	0x58000400
 8101c00:	431bde83 	.word	0x431bde83

08101c04 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8101c04:	b580      	push	{r7, lr}
 8101c06:	b084      	sub	sp, #16
 8101c08:	af00      	add	r7, sp, #0
 8101c0a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8101c0c:	687b      	ldr	r3, [r7, #4]
 8101c0e:	681b      	ldr	r3, [r3, #0]
 8101c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8101c14:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8101c16:	68fb      	ldr	r3, [r7, #12]
 8101c18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101c1c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8101c1e:	f001 f87f 	bl	8102d20 <HAL_RCC_GetHCLKFreq>
 8101c22:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8101c24:	68bb      	ldr	r3, [r7, #8]
 8101c26:	4a1e      	ldr	r2, [pc, #120]	; (8101ca0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8101c28:	4293      	cmp	r3, r2
 8101c2a:	d908      	bls.n	8101c3e <HAL_ETH_SetMDIOClockRange+0x3a>
 8101c2c:	68bb      	ldr	r3, [r7, #8]
 8101c2e:	4a1d      	ldr	r2, [pc, #116]	; (8101ca4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8101c30:	4293      	cmp	r3, r2
 8101c32:	d804      	bhi.n	8101c3e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8101c34:	68fb      	ldr	r3, [r7, #12]
 8101c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101c3a:	60fb      	str	r3, [r7, #12]
 8101c3c:	e027      	b.n	8101c8e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8101c3e:	68bb      	ldr	r3, [r7, #8]
 8101c40:	4a18      	ldr	r2, [pc, #96]	; (8101ca4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8101c42:	4293      	cmp	r3, r2
 8101c44:	d908      	bls.n	8101c58 <HAL_ETH_SetMDIOClockRange+0x54>
 8101c46:	68bb      	ldr	r3, [r7, #8]
 8101c48:	4a17      	ldr	r2, [pc, #92]	; (8101ca8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8101c4a:	4293      	cmp	r3, r2
 8101c4c:	d204      	bcs.n	8101c58 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8101c4e:	68fb      	ldr	r3, [r7, #12]
 8101c50:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8101c54:	60fb      	str	r3, [r7, #12]
 8101c56:	e01a      	b.n	8101c8e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8101c58:	68bb      	ldr	r3, [r7, #8]
 8101c5a:	4a13      	ldr	r2, [pc, #76]	; (8101ca8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8101c5c:	4293      	cmp	r3, r2
 8101c5e:	d303      	bcc.n	8101c68 <HAL_ETH_SetMDIOClockRange+0x64>
 8101c60:	68bb      	ldr	r3, [r7, #8]
 8101c62:	4a12      	ldr	r2, [pc, #72]	; (8101cac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8101c64:	4293      	cmp	r3, r2
 8101c66:	d911      	bls.n	8101c8c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8101c68:	68bb      	ldr	r3, [r7, #8]
 8101c6a:	4a10      	ldr	r2, [pc, #64]	; (8101cac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8101c6c:	4293      	cmp	r3, r2
 8101c6e:	d908      	bls.n	8101c82 <HAL_ETH_SetMDIOClockRange+0x7e>
 8101c70:	68bb      	ldr	r3, [r7, #8]
 8101c72:	4a0f      	ldr	r2, [pc, #60]	; (8101cb0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8101c74:	4293      	cmp	r3, r2
 8101c76:	d804      	bhi.n	8101c82 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8101c78:	68fb      	ldr	r3, [r7, #12]
 8101c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101c7e:	60fb      	str	r3, [r7, #12]
 8101c80:	e005      	b.n	8101c8e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8101c82:	68fb      	ldr	r3, [r7, #12]
 8101c84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101c88:	60fb      	str	r3, [r7, #12]
 8101c8a:	e000      	b.n	8101c8e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8101c8c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	68fa      	ldr	r2, [r7, #12]
 8101c94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8101c98:	bf00      	nop
 8101c9a:	3710      	adds	r7, #16
 8101c9c:	46bd      	mov	sp, r7
 8101c9e:	bd80      	pop	{r7, pc}
 8101ca0:	01312cff 	.word	0x01312cff
 8101ca4:	02160ebf 	.word	0x02160ebf
 8101ca8:	03938700 	.word	0x03938700
 8101cac:	05f5e0ff 	.word	0x05f5e0ff
 8101cb0:	08f0d17f 	.word	0x08f0d17f

08101cb4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8101cb4:	b480      	push	{r7}
 8101cb6:	b085      	sub	sp, #20
 8101cb8:	af00      	add	r7, sp, #0
 8101cba:	6078      	str	r0, [r7, #4]
 8101cbc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8101cbe:	683b      	ldr	r3, [r7, #0]
 8101cc0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8101cc2:	683b      	ldr	r3, [r7, #0]
 8101cc4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8101cc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8101cc8:	683b      	ldr	r3, [r7, #0]
 8101cca:	791b      	ldrb	r3, [r3, #4]
 8101ccc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8101cce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8101cd0:	683b      	ldr	r3, [r7, #0]
 8101cd2:	7b1b      	ldrb	r3, [r3, #12]
 8101cd4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8101cd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8101cd8:	683b      	ldr	r3, [r7, #0]
 8101cda:	7b5b      	ldrb	r3, [r3, #13]
 8101cdc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8101cde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8101ce0:	683b      	ldr	r3, [r7, #0]
 8101ce2:	7b9b      	ldrb	r3, [r3, #14]
 8101ce4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8101ce6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8101ce8:	683b      	ldr	r3, [r7, #0]
 8101cea:	7bdb      	ldrb	r3, [r3, #15]
 8101cec:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8101cee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8101cf0:	683a      	ldr	r2, [r7, #0]
 8101cf2:	7c12      	ldrb	r2, [r2, #16]
 8101cf4:	2a00      	cmp	r2, #0
 8101cf6:	d102      	bne.n	8101cfe <ETH_SetMACConfig+0x4a>
 8101cf8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8101cfc:	e000      	b.n	8101d00 <ETH_SetMACConfig+0x4c>
 8101cfe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8101d00:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8101d02:	683a      	ldr	r2, [r7, #0]
 8101d04:	7c52      	ldrb	r2, [r2, #17]
 8101d06:	2a00      	cmp	r2, #0
 8101d08:	d102      	bne.n	8101d10 <ETH_SetMACConfig+0x5c>
 8101d0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101d0e:	e000      	b.n	8101d12 <ETH_SetMACConfig+0x5e>
 8101d10:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8101d12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8101d14:	683b      	ldr	r3, [r7, #0]
 8101d16:	7c9b      	ldrb	r3, [r3, #18]
 8101d18:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8101d1a:	431a      	orrs	r2, r3
               macconf->Speed |
 8101d1c:	683b      	ldr	r3, [r7, #0]
 8101d1e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8101d20:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8101d22:	683b      	ldr	r3, [r7, #0]
 8101d24:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8101d26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8101d28:	683b      	ldr	r3, [r7, #0]
 8101d2a:	7f1b      	ldrb	r3, [r3, #28]
 8101d2c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8101d2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8101d30:	683b      	ldr	r3, [r7, #0]
 8101d32:	7f5b      	ldrb	r3, [r3, #29]
 8101d34:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8101d36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8101d38:	683a      	ldr	r2, [r7, #0]
 8101d3a:	7f92      	ldrb	r2, [r2, #30]
 8101d3c:	2a00      	cmp	r2, #0
 8101d3e:	d102      	bne.n	8101d46 <ETH_SetMACConfig+0x92>
 8101d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101d44:	e000      	b.n	8101d48 <ETH_SetMACConfig+0x94>
 8101d46:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8101d48:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8101d4a:	683b      	ldr	r3, [r7, #0]
 8101d4c:	7fdb      	ldrb	r3, [r3, #31]
 8101d4e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8101d50:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8101d52:	683a      	ldr	r2, [r7, #0]
 8101d54:	f892 2020 	ldrb.w	r2, [r2, #32]
 8101d58:	2a00      	cmp	r2, #0
 8101d5a:	d102      	bne.n	8101d62 <ETH_SetMACConfig+0xae>
 8101d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101d60:	e000      	b.n	8101d64 <ETH_SetMACConfig+0xb0>
 8101d62:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8101d64:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8101d66:	683b      	ldr	r3, [r7, #0]
 8101d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8101d6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8101d6c:	683b      	ldr	r3, [r7, #0]
 8101d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8101d72:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8101d74:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8101d76:	683b      	ldr	r3, [r7, #0]
 8101d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8101d7a:	4313      	orrs	r3, r2
 8101d7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	681b      	ldr	r3, [r3, #0]
 8101d82:	681a      	ldr	r2, [r3, #0]
 8101d84:	4b57      	ldr	r3, [pc, #348]	; (8101ee4 <ETH_SetMACConfig+0x230>)
 8101d86:	4013      	ands	r3, r2
 8101d88:	687a      	ldr	r2, [r7, #4]
 8101d8a:	6812      	ldr	r2, [r2, #0]
 8101d8c:	68f9      	ldr	r1, [r7, #12]
 8101d8e:	430b      	orrs	r3, r1
 8101d90:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8101d92:	683b      	ldr	r3, [r7, #0]
 8101d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101d96:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8101d98:	683b      	ldr	r3, [r7, #0]
 8101d9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8101d9e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8101da0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8101da2:	683b      	ldr	r3, [r7, #0]
 8101da4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8101da8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8101daa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8101dac:	683b      	ldr	r3, [r7, #0]
 8101dae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8101db2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8101db4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8101db6:	683a      	ldr	r2, [r7, #0]
 8101db8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8101dbc:	2a00      	cmp	r2, #0
 8101dbe:	d102      	bne.n	8101dc6 <ETH_SetMACConfig+0x112>
 8101dc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101dc4:	e000      	b.n	8101dc8 <ETH_SetMACConfig+0x114>
 8101dc6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8101dc8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8101dca:	683b      	ldr	r3, [r7, #0]
 8101dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8101dce:	4313      	orrs	r3, r2
 8101dd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	685a      	ldr	r2, [r3, #4]
 8101dd8:	4b43      	ldr	r3, [pc, #268]	; (8101ee8 <ETH_SetMACConfig+0x234>)
 8101dda:	4013      	ands	r3, r2
 8101ddc:	687a      	ldr	r2, [r7, #4]
 8101dde:	6812      	ldr	r2, [r2, #0]
 8101de0:	68f9      	ldr	r1, [r7, #12]
 8101de2:	430b      	orrs	r3, r1
 8101de4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8101de6:	683b      	ldr	r3, [r7, #0]
 8101de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101dec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8101dee:	683b      	ldr	r3, [r7, #0]
 8101df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8101df2:	4313      	orrs	r3, r2
 8101df4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	681b      	ldr	r3, [r3, #0]
 8101dfa:	68db      	ldr	r3, [r3, #12]
 8101dfc:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8101e00:	f023 0301 	bic.w	r3, r3, #1
 8101e04:	687a      	ldr	r2, [r7, #4]
 8101e06:	6812      	ldr	r2, [r2, #0]
 8101e08:	68f9      	ldr	r1, [r7, #12]
 8101e0a:	430b      	orrs	r3, r1
 8101e0c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8101e0e:	683b      	ldr	r3, [r7, #0]
 8101e10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8101e14:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8101e16:	683b      	ldr	r3, [r7, #0]
 8101e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8101e1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8101e1c:	683a      	ldr	r2, [r7, #0]
 8101e1e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8101e22:	2a00      	cmp	r2, #0
 8101e24:	d101      	bne.n	8101e2a <ETH_SetMACConfig+0x176>
 8101e26:	2280      	movs	r2, #128	; 0x80
 8101e28:	e000      	b.n	8101e2c <ETH_SetMACConfig+0x178>
 8101e2a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8101e2c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8101e2e:	683b      	ldr	r3, [r7, #0]
 8101e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101e32:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8101e34:	4313      	orrs	r3, r2
 8101e36:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101e3e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8101e42:	4013      	ands	r3, r2
 8101e44:	687a      	ldr	r2, [r7, #4]
 8101e46:	6812      	ldr	r2, [r2, #0]
 8101e48:	68f9      	ldr	r1, [r7, #12]
 8101e4a:	430b      	orrs	r3, r1
 8101e4c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8101e4e:	683b      	ldr	r3, [r7, #0]
 8101e50:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8101e54:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8101e56:	683b      	ldr	r3, [r7, #0]
 8101e58:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8101e5c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8101e5e:	4313      	orrs	r3, r2
 8101e60:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8101e62:	687b      	ldr	r3, [r7, #4]
 8101e64:	681b      	ldr	r3, [r3, #0]
 8101e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101e6a:	f023 0103 	bic.w	r1, r3, #3
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	681b      	ldr	r3, [r3, #0]
 8101e72:	68fa      	ldr	r2, [r7, #12]
 8101e74:	430a      	orrs	r2, r1
 8101e76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8101e82:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8101e86:	683b      	ldr	r3, [r7, #0]
 8101e88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	681b      	ldr	r3, [r3, #0]
 8101e8e:	430a      	orrs	r2, r1
 8101e90:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8101e94:	683b      	ldr	r3, [r7, #0]
 8101e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8101e98:	683a      	ldr	r2, [r7, #0]
 8101e9a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8101e9e:	2a00      	cmp	r2, #0
 8101ea0:	d101      	bne.n	8101ea6 <ETH_SetMACConfig+0x1f2>
 8101ea2:	2240      	movs	r2, #64	; 0x40
 8101ea4:	e000      	b.n	8101ea8 <ETH_SetMACConfig+0x1f4>
 8101ea6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8101ea8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8101eaa:	683b      	ldr	r3, [r7, #0]
 8101eac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8101eb0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8101eb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8101eb4:	683b      	ldr	r3, [r7, #0]
 8101eb6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8101eba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8101ebc:	4313      	orrs	r3, r2
 8101ebe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8101ec8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	68fa      	ldr	r2, [r7, #12]
 8101ed2:	430a      	orrs	r2, r1
 8101ed4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8101ed8:	bf00      	nop
 8101eda:	3714      	adds	r7, #20
 8101edc:	46bd      	mov	sp, r7
 8101ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ee2:	4770      	bx	lr
 8101ee4:	00048083 	.word	0x00048083
 8101ee8:	c0f88000 	.word	0xc0f88000

08101eec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8101eec:	b480      	push	{r7}
 8101eee:	b085      	sub	sp, #20
 8101ef0:	af00      	add	r7, sp, #0
 8101ef2:	6078      	str	r0, [r7, #4]
 8101ef4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	681b      	ldr	r3, [r3, #0]
 8101efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101efe:	681b      	ldr	r3, [r3, #0]
 8101f00:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8101f04:	f023 0302 	bic.w	r3, r3, #2
 8101f08:	683a      	ldr	r2, [r7, #0]
 8101f0a:	6811      	ldr	r1, [r2, #0]
 8101f0c:	687a      	ldr	r2, [r7, #4]
 8101f0e:	6812      	ldr	r2, [r2, #0]
 8101f10:	430b      	orrs	r3, r1
 8101f12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101f16:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8101f18:	683b      	ldr	r3, [r7, #0]
 8101f1a:	791b      	ldrb	r3, [r3, #4]
 8101f1c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8101f1e:	683b      	ldr	r3, [r7, #0]
 8101f20:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8101f22:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8101f24:	683b      	ldr	r3, [r7, #0]
 8101f26:	7b1b      	ldrb	r3, [r3, #12]
 8101f28:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8101f2a:	4313      	orrs	r3, r2
 8101f2c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8101f2e:	687b      	ldr	r3, [r7, #4]
 8101f30:	681b      	ldr	r3, [r3, #0]
 8101f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101f36:	685b      	ldr	r3, [r3, #4]
 8101f38:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8101f3c:	f023 0301 	bic.w	r3, r3, #1
 8101f40:	687a      	ldr	r2, [r7, #4]
 8101f42:	6812      	ldr	r2, [r2, #0]
 8101f44:	68f9      	ldr	r1, [r7, #12]
 8101f46:	430b      	orrs	r3, r1
 8101f48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101f4c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8101f4e:	683b      	ldr	r3, [r7, #0]
 8101f50:	7b5b      	ldrb	r3, [r3, #13]
 8101f52:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8101f54:	683b      	ldr	r3, [r7, #0]
 8101f56:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8101f58:	4313      	orrs	r3, r2
 8101f5a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	681b      	ldr	r3, [r3, #0]
 8101f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101f64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8101f68:	4b21      	ldr	r3, [pc, #132]	; (8101ff0 <ETH_SetDMAConfig+0x104>)
 8101f6a:	4013      	ands	r3, r2
 8101f6c:	687a      	ldr	r2, [r7, #4]
 8101f6e:	6812      	ldr	r2, [r2, #0]
 8101f70:	68f9      	ldr	r1, [r7, #12]
 8101f72:	430b      	orrs	r3, r1
 8101f74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101f78:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8101f7c:	683b      	ldr	r3, [r7, #0]
 8101f7e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8101f80:	683b      	ldr	r3, [r7, #0]
 8101f82:	7d1b      	ldrb	r3, [r3, #20]
 8101f84:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8101f86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8101f88:	683b      	ldr	r3, [r7, #0]
 8101f8a:	7f5b      	ldrb	r3, [r3, #29]
 8101f8c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8101f8e:	4313      	orrs	r3, r2
 8101f90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	681b      	ldr	r3, [r3, #0]
 8101f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101f9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8101f9e:	4b15      	ldr	r3, [pc, #84]	; (8101ff4 <ETH_SetDMAConfig+0x108>)
 8101fa0:	4013      	ands	r3, r2
 8101fa2:	687a      	ldr	r2, [r7, #4]
 8101fa4:	6812      	ldr	r2, [r2, #0]
 8101fa6:	68f9      	ldr	r1, [r7, #12]
 8101fa8:	430b      	orrs	r3, r1
 8101faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101fae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8101fb2:	683b      	ldr	r3, [r7, #0]
 8101fb4:	7f1b      	ldrb	r3, [r3, #28]
 8101fb6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8101fb8:	683b      	ldr	r3, [r7, #0]
 8101fba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8101fbc:	4313      	orrs	r3, r2
 8101fbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8101fc0:	687b      	ldr	r3, [r7, #4]
 8101fc2:	681b      	ldr	r3, [r3, #0]
 8101fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101fc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8101fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101fd0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8101fd4:	687a      	ldr	r2, [r7, #4]
 8101fd6:	6812      	ldr	r2, [r2, #0]
 8101fd8:	68f9      	ldr	r1, [r7, #12]
 8101fda:	430b      	orrs	r3, r1
 8101fdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101fe0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8101fe4:	bf00      	nop
 8101fe6:	3714      	adds	r7, #20
 8101fe8:	46bd      	mov	sp, r7
 8101fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fee:	4770      	bx	lr
 8101ff0:	fffec000 	.word	0xfffec000
 8101ff4:	ffc0efef 	.word	0xffc0efef

08101ff8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8101ff8:	b580      	push	{r7, lr}
 8101ffa:	b0a4      	sub	sp, #144	; 0x90
 8101ffc:	af00      	add	r7, sp, #0
 8101ffe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8102000:	2301      	movs	r3, #1
 8102002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8102006:	2300      	movs	r3, #0
 8102008:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 810200a:	2300      	movs	r3, #0
 810200c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8102010:	2300      	movs	r3, #0
 8102012:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8102016:	2301      	movs	r3, #1
 8102018:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 810201c:	2301      	movs	r3, #1
 810201e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8102022:	2301      	movs	r3, #1
 8102024:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8102028:	2300      	movs	r3, #0
 810202a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810202e:	2301      	movs	r3, #1
 8102030:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8102034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8102038:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 810203a:	2300      	movs	r3, #0
 810203c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8102040:	2300      	movs	r3, #0
 8102042:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8102044:	2300      	movs	r3, #0
 8102046:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 810204a:	2300      	movs	r3, #0
 810204c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8102050:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8102054:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8102056:	2300      	movs	r3, #0
 8102058:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 810205c:	2300      	movs	r3, #0
 810205e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8102060:	2301      	movs	r3, #1
 8102062:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8102066:	2300      	movs	r3, #0
 8102068:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 810206c:	2300      	movs	r3, #0
 810206e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8102072:	2300      	movs	r3, #0
 8102074:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8102076:	2300      	movs	r3, #0
 8102078:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 810207a:	2300      	movs	r3, #0
 810207c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810207e:	2300      	movs	r3, #0
 8102080:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8102084:	2300      	movs	r3, #0
 8102086:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 810208a:	2301      	movs	r3, #1
 810208c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8102090:	2320      	movs	r3, #32
 8102092:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8102096:	2301      	movs	r3, #1
 8102098:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 810209c:	2300      	movs	r3, #0
 810209e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81020a2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 81020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81020a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81020ac:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81020ae:	2300      	movs	r3, #0
 81020b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81020b4:	2302      	movs	r3, #2
 81020b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 81020ba:	2300      	movs	r3, #0
 81020bc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81020c0:	2300      	movs	r3, #0
 81020c2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81020c6:	2300      	movs	r3, #0
 81020c8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 81020cc:	2301      	movs	r3, #1
 81020ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 81020d2:	2300      	movs	r3, #0
 81020d4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 81020d6:	2301      	movs	r3, #1
 81020d8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81020dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81020e0:	4619      	mov	r1, r3
 81020e2:	6878      	ldr	r0, [r7, #4]
 81020e4:	f7ff fde6 	bl	8101cb4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81020e8:	2301      	movs	r3, #1
 81020ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 81020ec:	2301      	movs	r3, #1
 81020ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 81020f0:	2300      	movs	r3, #0
 81020f2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 81020f4:	2300      	movs	r3, #0
 81020f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 81020fa:	2300      	movs	r3, #0
 81020fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 81020fe:	2300      	movs	r3, #0
 8102100:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8102102:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8102106:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8102108:	2300      	movs	r3, #0
 810210a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 810210c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8102110:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8102112:	2300      	movs	r3, #0
 8102114:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8102118:	f44f 7306 	mov.w	r3, #536	; 0x218
 810211c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 810211e:	f107 0308 	add.w	r3, r7, #8
 8102122:	4619      	mov	r1, r3
 8102124:	6878      	ldr	r0, [r7, #4]
 8102126:	f7ff fee1 	bl	8101eec <ETH_SetDMAConfig>
}
 810212a:	bf00      	nop
 810212c:	3790      	adds	r7, #144	; 0x90
 810212e:	46bd      	mov	sp, r7
 8102130:	bd80      	pop	{r7, pc}

08102132 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8102132:	b480      	push	{r7}
 8102134:	b085      	sub	sp, #20
 8102136:	af00      	add	r7, sp, #0
 8102138:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810213a:	2300      	movs	r3, #0
 810213c:	60fb      	str	r3, [r7, #12]
 810213e:	e01d      	b.n	810217c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8102140:	687b      	ldr	r3, [r7, #4]
 8102142:	68d9      	ldr	r1, [r3, #12]
 8102144:	68fa      	ldr	r2, [r7, #12]
 8102146:	4613      	mov	r3, r2
 8102148:	005b      	lsls	r3, r3, #1
 810214a:	4413      	add	r3, r2
 810214c:	00db      	lsls	r3, r3, #3
 810214e:	440b      	add	r3, r1
 8102150:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8102152:	68bb      	ldr	r3, [r7, #8]
 8102154:	2200      	movs	r2, #0
 8102156:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8102158:	68bb      	ldr	r3, [r7, #8]
 810215a:	2200      	movs	r2, #0
 810215c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 810215e:	68bb      	ldr	r3, [r7, #8]
 8102160:	2200      	movs	r2, #0
 8102162:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8102164:	68bb      	ldr	r3, [r7, #8]
 8102166:	2200      	movs	r2, #0
 8102168:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 810216a:	68b9      	ldr	r1, [r7, #8]
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	68fa      	ldr	r2, [r7, #12]
 8102170:	3206      	adds	r2, #6
 8102172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8102176:	68fb      	ldr	r3, [r7, #12]
 8102178:	3301      	adds	r3, #1
 810217a:	60fb      	str	r3, [r7, #12]
 810217c:	68fb      	ldr	r3, [r7, #12]
 810217e:	2b03      	cmp	r3, #3
 8102180:	d9de      	bls.n	8102140 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	2200      	movs	r2, #0
 8102186:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8102188:	687b      	ldr	r3, [r7, #4]
 810218a:	681b      	ldr	r3, [r3, #0]
 810218c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102190:	461a      	mov	r2, r3
 8102192:	2303      	movs	r3, #3
 8102194:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	68da      	ldr	r2, [r3, #12]
 810219c:	687b      	ldr	r3, [r7, #4]
 810219e:	681b      	ldr	r3, [r3, #0]
 81021a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81021a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	68da      	ldr	r2, [r3, #12]
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	681b      	ldr	r3, [r3, #0]
 81021b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81021b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 81021b8:	bf00      	nop
 81021ba:	3714      	adds	r7, #20
 81021bc:	46bd      	mov	sp, r7
 81021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021c2:	4770      	bx	lr

081021c4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81021c4:	b480      	push	{r7}
 81021c6:	b085      	sub	sp, #20
 81021c8:	af00      	add	r7, sp, #0
 81021ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81021cc:	2300      	movs	r3, #0
 81021ce:	60fb      	str	r3, [r7, #12]
 81021d0:	e023      	b.n	810221a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	6919      	ldr	r1, [r3, #16]
 81021d6:	68fa      	ldr	r2, [r7, #12]
 81021d8:	4613      	mov	r3, r2
 81021da:	005b      	lsls	r3, r3, #1
 81021dc:	4413      	add	r3, r2
 81021de:	00db      	lsls	r3, r3, #3
 81021e0:	440b      	add	r3, r1
 81021e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 81021e4:	68bb      	ldr	r3, [r7, #8]
 81021e6:	2200      	movs	r2, #0
 81021e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 81021ea:	68bb      	ldr	r3, [r7, #8]
 81021ec:	2200      	movs	r2, #0
 81021ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 81021f0:	68bb      	ldr	r3, [r7, #8]
 81021f2:	2200      	movs	r2, #0
 81021f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 81021f6:	68bb      	ldr	r3, [r7, #8]
 81021f8:	2200      	movs	r2, #0
 81021fa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 81021fc:	68bb      	ldr	r3, [r7, #8]
 81021fe:	2200      	movs	r2, #0
 8102200:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8102202:	68bb      	ldr	r3, [r7, #8]
 8102204:	2200      	movs	r2, #0
 8102206:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8102208:	68b9      	ldr	r1, [r7, #8]
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	68fa      	ldr	r2, [r7, #12]
 810220e:	3212      	adds	r2, #18
 8102210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8102214:	68fb      	ldr	r3, [r7, #12]
 8102216:	3301      	adds	r3, #1
 8102218:	60fb      	str	r3, [r7, #12]
 810221a:	68fb      	ldr	r3, [r7, #12]
 810221c:	2b03      	cmp	r3, #3
 810221e:	d9d8      	bls.n	81021d2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8102220:	687b      	ldr	r3, [r7, #4]
 8102222:	2200      	movs	r2, #0
 8102224:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	2200      	movs	r2, #0
 810222a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	2200      	movs	r2, #0
 8102230:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	2200      	movs	r2, #0
 8102236:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	2200      	movs	r2, #0
 810223c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	681b      	ldr	r3, [r3, #0]
 8102242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102246:	461a      	mov	r2, r3
 8102248:	2303      	movs	r3, #3
 810224a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	691a      	ldr	r2, [r3, #16]
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	681b      	ldr	r3, [r3, #0]
 8102256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810225a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	691b      	ldr	r3, [r3, #16]
 8102262:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	681b      	ldr	r3, [r3, #0]
 810226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810226e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8102272:	bf00      	nop
 8102274:	3714      	adds	r7, #20
 8102276:	46bd      	mov	sp, r7
 8102278:	f85d 7b04 	ldr.w	r7, [sp], #4
 810227c:	4770      	bx	lr
	...

08102280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102280:	b480      	push	{r7}
 8102282:	b089      	sub	sp, #36	; 0x24
 8102284:	af00      	add	r7, sp, #0
 8102286:	6078      	str	r0, [r7, #4]
 8102288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810228a:	2300      	movs	r3, #0
 810228c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810228e:	4b89      	ldr	r3, [pc, #548]	; (81024b4 <HAL_GPIO_Init+0x234>)
 8102290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102292:	e194      	b.n	81025be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102294:	683b      	ldr	r3, [r7, #0]
 8102296:	681a      	ldr	r2, [r3, #0]
 8102298:	2101      	movs	r1, #1
 810229a:	69fb      	ldr	r3, [r7, #28]
 810229c:	fa01 f303 	lsl.w	r3, r1, r3
 81022a0:	4013      	ands	r3, r2
 81022a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81022a4:	693b      	ldr	r3, [r7, #16]
 81022a6:	2b00      	cmp	r3, #0
 81022a8:	f000 8186 	beq.w	81025b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81022ac:	683b      	ldr	r3, [r7, #0]
 81022ae:	685b      	ldr	r3, [r3, #4]
 81022b0:	f003 0303 	and.w	r3, r3, #3
 81022b4:	2b01      	cmp	r3, #1
 81022b6:	d005      	beq.n	81022c4 <HAL_GPIO_Init+0x44>
 81022b8:	683b      	ldr	r3, [r7, #0]
 81022ba:	685b      	ldr	r3, [r3, #4]
 81022bc:	f003 0303 	and.w	r3, r3, #3
 81022c0:	2b02      	cmp	r3, #2
 81022c2:	d130      	bne.n	8102326 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	689b      	ldr	r3, [r3, #8]
 81022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81022ca:	69fb      	ldr	r3, [r7, #28]
 81022cc:	005b      	lsls	r3, r3, #1
 81022ce:	2203      	movs	r2, #3
 81022d0:	fa02 f303 	lsl.w	r3, r2, r3
 81022d4:	43db      	mvns	r3, r3
 81022d6:	69ba      	ldr	r2, [r7, #24]
 81022d8:	4013      	ands	r3, r2
 81022da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81022dc:	683b      	ldr	r3, [r7, #0]
 81022de:	68da      	ldr	r2, [r3, #12]
 81022e0:	69fb      	ldr	r3, [r7, #28]
 81022e2:	005b      	lsls	r3, r3, #1
 81022e4:	fa02 f303 	lsl.w	r3, r2, r3
 81022e8:	69ba      	ldr	r2, [r7, #24]
 81022ea:	4313      	orrs	r3, r2
 81022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	69ba      	ldr	r2, [r7, #24]
 81022f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	685b      	ldr	r3, [r3, #4]
 81022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81022fa:	2201      	movs	r2, #1
 81022fc:	69fb      	ldr	r3, [r7, #28]
 81022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8102302:	43db      	mvns	r3, r3
 8102304:	69ba      	ldr	r2, [r7, #24]
 8102306:	4013      	ands	r3, r2
 8102308:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810230a:	683b      	ldr	r3, [r7, #0]
 810230c:	685b      	ldr	r3, [r3, #4]
 810230e:	091b      	lsrs	r3, r3, #4
 8102310:	f003 0201 	and.w	r2, r3, #1
 8102314:	69fb      	ldr	r3, [r7, #28]
 8102316:	fa02 f303 	lsl.w	r3, r2, r3
 810231a:	69ba      	ldr	r2, [r7, #24]
 810231c:	4313      	orrs	r3, r2
 810231e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	69ba      	ldr	r2, [r7, #24]
 8102324:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102326:	683b      	ldr	r3, [r7, #0]
 8102328:	685b      	ldr	r3, [r3, #4]
 810232a:	f003 0303 	and.w	r3, r3, #3
 810232e:	2b03      	cmp	r3, #3
 8102330:	d017      	beq.n	8102362 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	68db      	ldr	r3, [r3, #12]
 8102336:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102338:	69fb      	ldr	r3, [r7, #28]
 810233a:	005b      	lsls	r3, r3, #1
 810233c:	2203      	movs	r2, #3
 810233e:	fa02 f303 	lsl.w	r3, r2, r3
 8102342:	43db      	mvns	r3, r3
 8102344:	69ba      	ldr	r2, [r7, #24]
 8102346:	4013      	ands	r3, r2
 8102348:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810234a:	683b      	ldr	r3, [r7, #0]
 810234c:	689a      	ldr	r2, [r3, #8]
 810234e:	69fb      	ldr	r3, [r7, #28]
 8102350:	005b      	lsls	r3, r3, #1
 8102352:	fa02 f303 	lsl.w	r3, r2, r3
 8102356:	69ba      	ldr	r2, [r7, #24]
 8102358:	4313      	orrs	r3, r2
 810235a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	69ba      	ldr	r2, [r7, #24]
 8102360:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102362:	683b      	ldr	r3, [r7, #0]
 8102364:	685b      	ldr	r3, [r3, #4]
 8102366:	f003 0303 	and.w	r3, r3, #3
 810236a:	2b02      	cmp	r3, #2
 810236c:	d123      	bne.n	81023b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810236e:	69fb      	ldr	r3, [r7, #28]
 8102370:	08da      	lsrs	r2, r3, #3
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	3208      	adds	r2, #8
 8102376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810237c:	69fb      	ldr	r3, [r7, #28]
 810237e:	f003 0307 	and.w	r3, r3, #7
 8102382:	009b      	lsls	r3, r3, #2
 8102384:	220f      	movs	r2, #15
 8102386:	fa02 f303 	lsl.w	r3, r2, r3
 810238a:	43db      	mvns	r3, r3
 810238c:	69ba      	ldr	r2, [r7, #24]
 810238e:	4013      	ands	r3, r2
 8102390:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102392:	683b      	ldr	r3, [r7, #0]
 8102394:	691a      	ldr	r2, [r3, #16]
 8102396:	69fb      	ldr	r3, [r7, #28]
 8102398:	f003 0307 	and.w	r3, r3, #7
 810239c:	009b      	lsls	r3, r3, #2
 810239e:	fa02 f303 	lsl.w	r3, r2, r3
 81023a2:	69ba      	ldr	r2, [r7, #24]
 81023a4:	4313      	orrs	r3, r2
 81023a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81023a8:	69fb      	ldr	r3, [r7, #28]
 81023aa:	08da      	lsrs	r2, r3, #3
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	3208      	adds	r2, #8
 81023b0:	69b9      	ldr	r1, [r7, #24]
 81023b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81023bc:	69fb      	ldr	r3, [r7, #28]
 81023be:	005b      	lsls	r3, r3, #1
 81023c0:	2203      	movs	r2, #3
 81023c2:	fa02 f303 	lsl.w	r3, r2, r3
 81023c6:	43db      	mvns	r3, r3
 81023c8:	69ba      	ldr	r2, [r7, #24]
 81023ca:	4013      	ands	r3, r2
 81023cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81023ce:	683b      	ldr	r3, [r7, #0]
 81023d0:	685b      	ldr	r3, [r3, #4]
 81023d2:	f003 0203 	and.w	r2, r3, #3
 81023d6:	69fb      	ldr	r3, [r7, #28]
 81023d8:	005b      	lsls	r3, r3, #1
 81023da:	fa02 f303 	lsl.w	r3, r2, r3
 81023de:	69ba      	ldr	r2, [r7, #24]
 81023e0:	4313      	orrs	r3, r2
 81023e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	69ba      	ldr	r2, [r7, #24]
 81023e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81023ea:	683b      	ldr	r3, [r7, #0]
 81023ec:	685b      	ldr	r3, [r3, #4]
 81023ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81023f2:	2b00      	cmp	r3, #0
 81023f4:	f000 80e0 	beq.w	81025b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81023f8:	4b2f      	ldr	r3, [pc, #188]	; (81024b8 <HAL_GPIO_Init+0x238>)
 81023fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81023fe:	4a2e      	ldr	r2, [pc, #184]	; (81024b8 <HAL_GPIO_Init+0x238>)
 8102400:	f043 0302 	orr.w	r3, r3, #2
 8102404:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102408:	4b2b      	ldr	r3, [pc, #172]	; (81024b8 <HAL_GPIO_Init+0x238>)
 810240a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810240e:	f003 0302 	and.w	r3, r3, #2
 8102412:	60fb      	str	r3, [r7, #12]
 8102414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102416:	4a29      	ldr	r2, [pc, #164]	; (81024bc <HAL_GPIO_Init+0x23c>)
 8102418:	69fb      	ldr	r3, [r7, #28]
 810241a:	089b      	lsrs	r3, r3, #2
 810241c:	3302      	adds	r3, #2
 810241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102424:	69fb      	ldr	r3, [r7, #28]
 8102426:	f003 0303 	and.w	r3, r3, #3
 810242a:	009b      	lsls	r3, r3, #2
 810242c:	220f      	movs	r2, #15
 810242e:	fa02 f303 	lsl.w	r3, r2, r3
 8102432:	43db      	mvns	r3, r3
 8102434:	69ba      	ldr	r2, [r7, #24]
 8102436:	4013      	ands	r3, r2
 8102438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	4a20      	ldr	r2, [pc, #128]	; (81024c0 <HAL_GPIO_Init+0x240>)
 810243e:	4293      	cmp	r3, r2
 8102440:	d052      	beq.n	81024e8 <HAL_GPIO_Init+0x268>
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	4a1f      	ldr	r2, [pc, #124]	; (81024c4 <HAL_GPIO_Init+0x244>)
 8102446:	4293      	cmp	r3, r2
 8102448:	d031      	beq.n	81024ae <HAL_GPIO_Init+0x22e>
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	4a1e      	ldr	r2, [pc, #120]	; (81024c8 <HAL_GPIO_Init+0x248>)
 810244e:	4293      	cmp	r3, r2
 8102450:	d02b      	beq.n	81024aa <HAL_GPIO_Init+0x22a>
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	4a1d      	ldr	r2, [pc, #116]	; (81024cc <HAL_GPIO_Init+0x24c>)
 8102456:	4293      	cmp	r3, r2
 8102458:	d025      	beq.n	81024a6 <HAL_GPIO_Init+0x226>
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	4a1c      	ldr	r2, [pc, #112]	; (81024d0 <HAL_GPIO_Init+0x250>)
 810245e:	4293      	cmp	r3, r2
 8102460:	d01f      	beq.n	81024a2 <HAL_GPIO_Init+0x222>
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	4a1b      	ldr	r2, [pc, #108]	; (81024d4 <HAL_GPIO_Init+0x254>)
 8102466:	4293      	cmp	r3, r2
 8102468:	d019      	beq.n	810249e <HAL_GPIO_Init+0x21e>
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	4a1a      	ldr	r2, [pc, #104]	; (81024d8 <HAL_GPIO_Init+0x258>)
 810246e:	4293      	cmp	r3, r2
 8102470:	d013      	beq.n	810249a <HAL_GPIO_Init+0x21a>
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	4a19      	ldr	r2, [pc, #100]	; (81024dc <HAL_GPIO_Init+0x25c>)
 8102476:	4293      	cmp	r3, r2
 8102478:	d00d      	beq.n	8102496 <HAL_GPIO_Init+0x216>
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	4a18      	ldr	r2, [pc, #96]	; (81024e0 <HAL_GPIO_Init+0x260>)
 810247e:	4293      	cmp	r3, r2
 8102480:	d007      	beq.n	8102492 <HAL_GPIO_Init+0x212>
 8102482:	687b      	ldr	r3, [r7, #4]
 8102484:	4a17      	ldr	r2, [pc, #92]	; (81024e4 <HAL_GPIO_Init+0x264>)
 8102486:	4293      	cmp	r3, r2
 8102488:	d101      	bne.n	810248e <HAL_GPIO_Init+0x20e>
 810248a:	2309      	movs	r3, #9
 810248c:	e02d      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 810248e:	230a      	movs	r3, #10
 8102490:	e02b      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 8102492:	2308      	movs	r3, #8
 8102494:	e029      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 8102496:	2307      	movs	r3, #7
 8102498:	e027      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 810249a:	2306      	movs	r3, #6
 810249c:	e025      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 810249e:	2305      	movs	r3, #5
 81024a0:	e023      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 81024a2:	2304      	movs	r3, #4
 81024a4:	e021      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 81024a6:	2303      	movs	r3, #3
 81024a8:	e01f      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 81024aa:	2302      	movs	r3, #2
 81024ac:	e01d      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 81024ae:	2301      	movs	r3, #1
 81024b0:	e01b      	b.n	81024ea <HAL_GPIO_Init+0x26a>
 81024b2:	bf00      	nop
 81024b4:	580000c0 	.word	0x580000c0
 81024b8:	58024400 	.word	0x58024400
 81024bc:	58000400 	.word	0x58000400
 81024c0:	58020000 	.word	0x58020000
 81024c4:	58020400 	.word	0x58020400
 81024c8:	58020800 	.word	0x58020800
 81024cc:	58020c00 	.word	0x58020c00
 81024d0:	58021000 	.word	0x58021000
 81024d4:	58021400 	.word	0x58021400
 81024d8:	58021800 	.word	0x58021800
 81024dc:	58021c00 	.word	0x58021c00
 81024e0:	58022000 	.word	0x58022000
 81024e4:	58022400 	.word	0x58022400
 81024e8:	2300      	movs	r3, #0
 81024ea:	69fa      	ldr	r2, [r7, #28]
 81024ec:	f002 0203 	and.w	r2, r2, #3
 81024f0:	0092      	lsls	r2, r2, #2
 81024f2:	4093      	lsls	r3, r2
 81024f4:	69ba      	ldr	r2, [r7, #24]
 81024f6:	4313      	orrs	r3, r2
 81024f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81024fa:	4938      	ldr	r1, [pc, #224]	; (81025dc <HAL_GPIO_Init+0x35c>)
 81024fc:	69fb      	ldr	r3, [r7, #28]
 81024fe:	089b      	lsrs	r3, r3, #2
 8102500:	3302      	adds	r3, #2
 8102502:	69ba      	ldr	r2, [r7, #24]
 8102504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102510:	693b      	ldr	r3, [r7, #16]
 8102512:	43db      	mvns	r3, r3
 8102514:	69ba      	ldr	r2, [r7, #24]
 8102516:	4013      	ands	r3, r2
 8102518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810251a:	683b      	ldr	r3, [r7, #0]
 810251c:	685b      	ldr	r3, [r3, #4]
 810251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102522:	2b00      	cmp	r3, #0
 8102524:	d003      	beq.n	810252e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102526:	69ba      	ldr	r2, [r7, #24]
 8102528:	693b      	ldr	r3, [r7, #16]
 810252a:	4313      	orrs	r3, r2
 810252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810252e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102532:	69bb      	ldr	r3, [r7, #24]
 8102534:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810253a:	685b      	ldr	r3, [r3, #4]
 810253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810253e:	693b      	ldr	r3, [r7, #16]
 8102540:	43db      	mvns	r3, r3
 8102542:	69ba      	ldr	r2, [r7, #24]
 8102544:	4013      	ands	r3, r2
 8102546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102548:	683b      	ldr	r3, [r7, #0]
 810254a:	685b      	ldr	r3, [r3, #4]
 810254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102550:	2b00      	cmp	r3, #0
 8102552:	d003      	beq.n	810255c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102554:	69ba      	ldr	r2, [r7, #24]
 8102556:	693b      	ldr	r3, [r7, #16]
 8102558:	4313      	orrs	r3, r2
 810255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810255c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102560:	69bb      	ldr	r3, [r7, #24]
 8102562:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102564:	697b      	ldr	r3, [r7, #20]
 8102566:	685b      	ldr	r3, [r3, #4]
 8102568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810256a:	693b      	ldr	r3, [r7, #16]
 810256c:	43db      	mvns	r3, r3
 810256e:	69ba      	ldr	r2, [r7, #24]
 8102570:	4013      	ands	r3, r2
 8102572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102574:	683b      	ldr	r3, [r7, #0]
 8102576:	685b      	ldr	r3, [r3, #4]
 8102578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810257c:	2b00      	cmp	r3, #0
 810257e:	d003      	beq.n	8102588 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102580:	69ba      	ldr	r2, [r7, #24]
 8102582:	693b      	ldr	r3, [r7, #16]
 8102584:	4313      	orrs	r3, r2
 8102586:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102588:	697b      	ldr	r3, [r7, #20]
 810258a:	69ba      	ldr	r2, [r7, #24]
 810258c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810258e:	697b      	ldr	r3, [r7, #20]
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102594:	693b      	ldr	r3, [r7, #16]
 8102596:	43db      	mvns	r3, r3
 8102598:	69ba      	ldr	r2, [r7, #24]
 810259a:	4013      	ands	r3, r2
 810259c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810259e:	683b      	ldr	r3, [r7, #0]
 81025a0:	685b      	ldr	r3, [r3, #4]
 81025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81025a6:	2b00      	cmp	r3, #0
 81025a8:	d003      	beq.n	81025b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81025aa:	69ba      	ldr	r2, [r7, #24]
 81025ac:	693b      	ldr	r3, [r7, #16]
 81025ae:	4313      	orrs	r3, r2
 81025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81025b2:	697b      	ldr	r3, [r7, #20]
 81025b4:	69ba      	ldr	r2, [r7, #24]
 81025b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81025b8:	69fb      	ldr	r3, [r7, #28]
 81025ba:	3301      	adds	r3, #1
 81025bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81025be:	683b      	ldr	r3, [r7, #0]
 81025c0:	681a      	ldr	r2, [r3, #0]
 81025c2:	69fb      	ldr	r3, [r7, #28]
 81025c4:	fa22 f303 	lsr.w	r3, r2, r3
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	f47f ae63 	bne.w	8102294 <HAL_GPIO_Init+0x14>
  }
}
 81025ce:	bf00      	nop
 81025d0:	bf00      	nop
 81025d2:	3724      	adds	r7, #36	; 0x24
 81025d4:	46bd      	mov	sp, r7
 81025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025da:	4770      	bx	lr
 81025dc:	58000400 	.word	0x58000400

081025e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81025e0:	b480      	push	{r7}
 81025e2:	b083      	sub	sp, #12
 81025e4:	af00      	add	r7, sp, #0
 81025e6:	6078      	str	r0, [r7, #4]
 81025e8:	460b      	mov	r3, r1
 81025ea:	807b      	strh	r3, [r7, #2]
 81025ec:	4613      	mov	r3, r2
 81025ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81025f0:	787b      	ldrb	r3, [r7, #1]
 81025f2:	2b00      	cmp	r3, #0
 81025f4:	d003      	beq.n	81025fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81025f6:	887a      	ldrh	r2, [r7, #2]
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81025fc:	e003      	b.n	8102606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81025fe:	887b      	ldrh	r3, [r7, #2]
 8102600:	041a      	lsls	r2, r3, #16
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	619a      	str	r2, [r3, #24]
}
 8102606:	bf00      	nop
 8102608:	370c      	adds	r7, #12
 810260a:	46bd      	mov	sp, r7
 810260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102610:	4770      	bx	lr

08102612 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8102612:	b480      	push	{r7}
 8102614:	b085      	sub	sp, #20
 8102616:	af00      	add	r7, sp, #0
 8102618:	6078      	str	r0, [r7, #4]
 810261a:	460b      	mov	r3, r1
 810261c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	695b      	ldr	r3, [r3, #20]
 8102622:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8102624:	887a      	ldrh	r2, [r7, #2]
 8102626:	68fb      	ldr	r3, [r7, #12]
 8102628:	4013      	ands	r3, r2
 810262a:	041a      	lsls	r2, r3, #16
 810262c:	68fb      	ldr	r3, [r7, #12]
 810262e:	43d9      	mvns	r1, r3
 8102630:	887b      	ldrh	r3, [r7, #2]
 8102632:	400b      	ands	r3, r1
 8102634:	431a      	orrs	r2, r3
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	619a      	str	r2, [r3, #24]
}
 810263a:	bf00      	nop
 810263c:	3714      	adds	r7, #20
 810263e:	46bd      	mov	sp, r7
 8102640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102644:	4770      	bx	lr
	...

08102648 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102648:	b480      	push	{r7}
 810264a:	b083      	sub	sp, #12
 810264c:	af00      	add	r7, sp, #0
 810264e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102650:	4b05      	ldr	r3, [pc, #20]	; (8102668 <HAL_HSEM_ActivateNotification+0x20>)
 8102652:	681a      	ldr	r2, [r3, #0]
 8102654:	4904      	ldr	r1, [pc, #16]	; (8102668 <HAL_HSEM_ActivateNotification+0x20>)
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	4313      	orrs	r3, r2
 810265a:	600b      	str	r3, [r1, #0]
#endif
}
 810265c:	bf00      	nop
 810265e:	370c      	adds	r7, #12
 8102660:	46bd      	mov	sp, r7
 8102662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102666:	4770      	bx	lr
 8102668:	58026510 	.word	0x58026510

0810266c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 810266c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810266e:	b08f      	sub	sp, #60	; 0x3c
 8102670:	af0a      	add	r7, sp, #40	; 0x28
 8102672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	2b00      	cmp	r3, #0
 8102678:	d101      	bne.n	810267e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810267a:	2301      	movs	r3, #1
 810267c:	e116      	b.n	81028ac <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 810268a:	b2db      	uxtb	r3, r3
 810268c:	2b00      	cmp	r3, #0
 810268e:	d106      	bne.n	810269e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	2200      	movs	r2, #0
 8102694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8102698:	6878      	ldr	r0, [r7, #4]
 810269a:	f7fe fd0b 	bl	81010b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	2203      	movs	r2, #3
 81026a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 81026a6:	68bb      	ldr	r3, [r7, #8]
 81026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81026ae:	2b00      	cmp	r3, #0
 81026b0:	d102      	bne.n	81026b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	2200      	movs	r2, #0
 81026b6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	681b      	ldr	r3, [r3, #0]
 81026bc:	4618      	mov	r0, r3
 81026be:	f003 ff6f 	bl	81065a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	603b      	str	r3, [r7, #0]
 81026c8:	687e      	ldr	r6, [r7, #4]
 81026ca:	466d      	mov	r5, sp
 81026cc:	f106 0410 	add.w	r4, r6, #16
 81026d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81026d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81026d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81026d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81026d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 81026dc:	e885 0003 	stmia.w	r5, {r0, r1}
 81026e0:	1d33      	adds	r3, r6, #4
 81026e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 81026e4:	6838      	ldr	r0, [r7, #0]
 81026e6:	f003 feed 	bl	81064c4 <USB_CoreInit>
 81026ea:	4603      	mov	r3, r0
 81026ec:	2b00      	cmp	r3, #0
 81026ee:	d005      	beq.n	81026fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	2202      	movs	r2, #2
 81026f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 81026f8:	2301      	movs	r3, #1
 81026fa:	e0d7      	b.n	81028ac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	2100      	movs	r1, #0
 8102702:	4618      	mov	r0, r3
 8102704:	f003 ff5d 	bl	81065c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102708:	2300      	movs	r3, #0
 810270a:	73fb      	strb	r3, [r7, #15]
 810270c:	e04a      	b.n	81027a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 810270e:	7bfa      	ldrb	r2, [r7, #15]
 8102710:	6879      	ldr	r1, [r7, #4]
 8102712:	4613      	mov	r3, r2
 8102714:	00db      	lsls	r3, r3, #3
 8102716:	4413      	add	r3, r2
 8102718:	009b      	lsls	r3, r3, #2
 810271a:	440b      	add	r3, r1
 810271c:	333d      	adds	r3, #61	; 0x3d
 810271e:	2201      	movs	r2, #1
 8102720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8102722:	7bfa      	ldrb	r2, [r7, #15]
 8102724:	6879      	ldr	r1, [r7, #4]
 8102726:	4613      	mov	r3, r2
 8102728:	00db      	lsls	r3, r3, #3
 810272a:	4413      	add	r3, r2
 810272c:	009b      	lsls	r3, r3, #2
 810272e:	440b      	add	r3, r1
 8102730:	333c      	adds	r3, #60	; 0x3c
 8102732:	7bfa      	ldrb	r2, [r7, #15]
 8102734:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8102736:	7bfa      	ldrb	r2, [r7, #15]
 8102738:	7bfb      	ldrb	r3, [r7, #15]
 810273a:	b298      	uxth	r0, r3
 810273c:	6879      	ldr	r1, [r7, #4]
 810273e:	4613      	mov	r3, r2
 8102740:	00db      	lsls	r3, r3, #3
 8102742:	4413      	add	r3, r2
 8102744:	009b      	lsls	r3, r3, #2
 8102746:	440b      	add	r3, r1
 8102748:	3356      	adds	r3, #86	; 0x56
 810274a:	4602      	mov	r2, r0
 810274c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 810274e:	7bfa      	ldrb	r2, [r7, #15]
 8102750:	6879      	ldr	r1, [r7, #4]
 8102752:	4613      	mov	r3, r2
 8102754:	00db      	lsls	r3, r3, #3
 8102756:	4413      	add	r3, r2
 8102758:	009b      	lsls	r3, r3, #2
 810275a:	440b      	add	r3, r1
 810275c:	3340      	adds	r3, #64	; 0x40
 810275e:	2200      	movs	r2, #0
 8102760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8102762:	7bfa      	ldrb	r2, [r7, #15]
 8102764:	6879      	ldr	r1, [r7, #4]
 8102766:	4613      	mov	r3, r2
 8102768:	00db      	lsls	r3, r3, #3
 810276a:	4413      	add	r3, r2
 810276c:	009b      	lsls	r3, r3, #2
 810276e:	440b      	add	r3, r1
 8102770:	3344      	adds	r3, #68	; 0x44
 8102772:	2200      	movs	r2, #0
 8102774:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8102776:	7bfa      	ldrb	r2, [r7, #15]
 8102778:	6879      	ldr	r1, [r7, #4]
 810277a:	4613      	mov	r3, r2
 810277c:	00db      	lsls	r3, r3, #3
 810277e:	4413      	add	r3, r2
 8102780:	009b      	lsls	r3, r3, #2
 8102782:	440b      	add	r3, r1
 8102784:	3348      	adds	r3, #72	; 0x48
 8102786:	2200      	movs	r2, #0
 8102788:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 810278a:	7bfa      	ldrb	r2, [r7, #15]
 810278c:	6879      	ldr	r1, [r7, #4]
 810278e:	4613      	mov	r3, r2
 8102790:	00db      	lsls	r3, r3, #3
 8102792:	4413      	add	r3, r2
 8102794:	009b      	lsls	r3, r3, #2
 8102796:	440b      	add	r3, r1
 8102798:	334c      	adds	r3, #76	; 0x4c
 810279a:	2200      	movs	r2, #0
 810279c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810279e:	7bfb      	ldrb	r3, [r7, #15]
 81027a0:	3301      	adds	r3, #1
 81027a2:	73fb      	strb	r3, [r7, #15]
 81027a4:	7bfa      	ldrb	r2, [r7, #15]
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	685b      	ldr	r3, [r3, #4]
 81027aa:	429a      	cmp	r2, r3
 81027ac:	d3af      	bcc.n	810270e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81027ae:	2300      	movs	r3, #0
 81027b0:	73fb      	strb	r3, [r7, #15]
 81027b2:	e044      	b.n	810283e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 81027b4:	7bfa      	ldrb	r2, [r7, #15]
 81027b6:	6879      	ldr	r1, [r7, #4]
 81027b8:	4613      	mov	r3, r2
 81027ba:	00db      	lsls	r3, r3, #3
 81027bc:	4413      	add	r3, r2
 81027be:	009b      	lsls	r3, r3, #2
 81027c0:	440b      	add	r3, r1
 81027c2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 81027c6:	2200      	movs	r2, #0
 81027c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 81027ca:	7bfa      	ldrb	r2, [r7, #15]
 81027cc:	6879      	ldr	r1, [r7, #4]
 81027ce:	4613      	mov	r3, r2
 81027d0:	00db      	lsls	r3, r3, #3
 81027d2:	4413      	add	r3, r2
 81027d4:	009b      	lsls	r3, r3, #2
 81027d6:	440b      	add	r3, r1
 81027d8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 81027dc:	7bfa      	ldrb	r2, [r7, #15]
 81027de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 81027e0:	7bfa      	ldrb	r2, [r7, #15]
 81027e2:	6879      	ldr	r1, [r7, #4]
 81027e4:	4613      	mov	r3, r2
 81027e6:	00db      	lsls	r3, r3, #3
 81027e8:	4413      	add	r3, r2
 81027ea:	009b      	lsls	r3, r3, #2
 81027ec:	440b      	add	r3, r1
 81027ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 81027f2:	2200      	movs	r2, #0
 81027f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 81027f6:	7bfa      	ldrb	r2, [r7, #15]
 81027f8:	6879      	ldr	r1, [r7, #4]
 81027fa:	4613      	mov	r3, r2
 81027fc:	00db      	lsls	r3, r3, #3
 81027fe:	4413      	add	r3, r2
 8102800:	009b      	lsls	r3, r3, #2
 8102802:	440b      	add	r3, r1
 8102804:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8102808:	2200      	movs	r2, #0
 810280a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 810280c:	7bfa      	ldrb	r2, [r7, #15]
 810280e:	6879      	ldr	r1, [r7, #4]
 8102810:	4613      	mov	r3, r2
 8102812:	00db      	lsls	r3, r3, #3
 8102814:	4413      	add	r3, r2
 8102816:	009b      	lsls	r3, r3, #2
 8102818:	440b      	add	r3, r1
 810281a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 810281e:	2200      	movs	r2, #0
 8102820:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8102822:	7bfa      	ldrb	r2, [r7, #15]
 8102824:	6879      	ldr	r1, [r7, #4]
 8102826:	4613      	mov	r3, r2
 8102828:	00db      	lsls	r3, r3, #3
 810282a:	4413      	add	r3, r2
 810282c:	009b      	lsls	r3, r3, #2
 810282e:	440b      	add	r3, r1
 8102830:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8102834:	2200      	movs	r2, #0
 8102836:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102838:	7bfb      	ldrb	r3, [r7, #15]
 810283a:	3301      	adds	r3, #1
 810283c:	73fb      	strb	r3, [r7, #15]
 810283e:	7bfa      	ldrb	r2, [r7, #15]
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	685b      	ldr	r3, [r3, #4]
 8102844:	429a      	cmp	r2, r3
 8102846:	d3b5      	bcc.n	81027b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	681b      	ldr	r3, [r3, #0]
 810284c:	603b      	str	r3, [r7, #0]
 810284e:	687e      	ldr	r6, [r7, #4]
 8102850:	466d      	mov	r5, sp
 8102852:	f106 0410 	add.w	r4, r6, #16
 8102856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8102858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810285a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810285c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810285e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8102862:	e885 0003 	stmia.w	r5, {r0, r1}
 8102866:	1d33      	adds	r3, r6, #4
 8102868:	cb0e      	ldmia	r3, {r1, r2, r3}
 810286a:	6838      	ldr	r0, [r7, #0]
 810286c:	f003 fef6 	bl	810665c <USB_DevInit>
 8102870:	4603      	mov	r3, r0
 8102872:	2b00      	cmp	r3, #0
 8102874:	d005      	beq.n	8102882 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	2202      	movs	r2, #2
 810287a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 810287e:	2301      	movs	r3, #1
 8102880:	e014      	b.n	81028ac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	2200      	movs	r2, #0
 8102886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	2201      	movs	r2, #1
 810288e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102896:	2b01      	cmp	r3, #1
 8102898:	d102      	bne.n	81028a0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810289a:	6878      	ldr	r0, [r7, #4]
 810289c:	f000 f80a 	bl	81028b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	4618      	mov	r0, r3
 81028a6:	f004 f8b4 	bl	8106a12 <USB_DevDisconnect>

  return HAL_OK;
 81028aa:	2300      	movs	r3, #0
}
 81028ac:	4618      	mov	r0, r3
 81028ae:	3714      	adds	r7, #20
 81028b0:	46bd      	mov	sp, r7
 81028b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

081028b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 81028b4:	b480      	push	{r7}
 81028b6:	b085      	sub	sp, #20
 81028b8:	af00      	add	r7, sp, #0
 81028ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	681b      	ldr	r3, [r3, #0]
 81028c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	2201      	movs	r2, #1
 81028c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	2200      	movs	r2, #0
 81028ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 81028d2:	68fb      	ldr	r3, [r7, #12]
 81028d4:	699b      	ldr	r3, [r3, #24]
 81028d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 81028da:	68fb      	ldr	r3, [r7, #12]
 81028dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 81028de:	68fb      	ldr	r3, [r7, #12]
 81028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81028e6:	f043 0303 	orr.w	r3, r3, #3
 81028ea:	68fa      	ldr	r2, [r7, #12]
 81028ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 81028ee:	2300      	movs	r3, #0
}
 81028f0:	4618      	mov	r0, r3
 81028f2:	3714      	adds	r7, #20
 81028f4:	46bd      	mov	sp, r7
 81028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028fa:	4770      	bx	lr

081028fc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81028fc:	b580      	push	{r7, lr}
 81028fe:	b084      	sub	sp, #16
 8102900:	af00      	add	r7, sp, #0
 8102902:	60f8      	str	r0, [r7, #12]
 8102904:	460b      	mov	r3, r1
 8102906:	607a      	str	r2, [r7, #4]
 8102908:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810290a:	4b37      	ldr	r3, [pc, #220]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	f023 0201 	bic.w	r2, r3, #1
 8102912:	4935      	ldr	r1, [pc, #212]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102914:	68fb      	ldr	r3, [r7, #12]
 8102916:	4313      	orrs	r3, r2
 8102918:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	2b00      	cmp	r3, #0
 810291e:	d123      	bne.n	8102968 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102920:	f7ff f876 	bl	8101a10 <HAL_GetCurrentCPUID>
 8102924:	4603      	mov	r3, r0
 8102926:	2b03      	cmp	r3, #3
 8102928:	d158      	bne.n	81029dc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810292a:	4b2f      	ldr	r3, [pc, #188]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810292c:	691b      	ldr	r3, [r3, #16]
 810292e:	4a2e      	ldr	r2, [pc, #184]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102930:	f023 0301 	bic.w	r3, r3, #1
 8102934:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102936:	4b2d      	ldr	r3, [pc, #180]	; (81029ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102938:	691b      	ldr	r3, [r3, #16]
 810293a:	4a2c      	ldr	r2, [pc, #176]	; (81029ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 810293c:	f043 0304 	orr.w	r3, r3, #4
 8102940:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102942:	f3bf 8f4f 	dsb	sy
}
 8102946:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102948:	f3bf 8f6f 	isb	sy
}
 810294c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810294e:	7afb      	ldrb	r3, [r7, #11]
 8102950:	2b01      	cmp	r3, #1
 8102952:	d101      	bne.n	8102958 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102954:	bf30      	wfi
 8102956:	e000      	b.n	810295a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102958:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810295a:	4b24      	ldr	r3, [pc, #144]	; (81029ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 810295c:	691b      	ldr	r3, [r3, #16]
 810295e:	4a23      	ldr	r2, [pc, #140]	; (81029ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102960:	f023 0304 	bic.w	r3, r3, #4
 8102964:	6113      	str	r3, [r2, #16]
 8102966:	e03c      	b.n	81029e2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	2b01      	cmp	r3, #1
 810296c:	d123      	bne.n	81029b6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810296e:	f7ff f84f 	bl	8101a10 <HAL_GetCurrentCPUID>
 8102972:	4603      	mov	r3, r0
 8102974:	2b01      	cmp	r3, #1
 8102976:	d133      	bne.n	81029e0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102978:	4b1b      	ldr	r3, [pc, #108]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810297a:	695b      	ldr	r3, [r3, #20]
 810297c:	4a1a      	ldr	r2, [pc, #104]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810297e:	f023 0302 	bic.w	r3, r3, #2
 8102982:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102984:	4b19      	ldr	r3, [pc, #100]	; (81029ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102986:	691b      	ldr	r3, [r3, #16]
 8102988:	4a18      	ldr	r2, [pc, #96]	; (81029ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 810298a:	f043 0304 	orr.w	r3, r3, #4
 810298e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102990:	f3bf 8f4f 	dsb	sy
}
 8102994:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102996:	f3bf 8f6f 	isb	sy
}
 810299a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810299c:	7afb      	ldrb	r3, [r7, #11]
 810299e:	2b01      	cmp	r3, #1
 81029a0:	d101      	bne.n	81029a6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81029a2:	bf30      	wfi
 81029a4:	e000      	b.n	81029a8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81029a6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81029a8:	4b10      	ldr	r3, [pc, #64]	; (81029ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 81029aa:	691b      	ldr	r3, [r3, #16]
 81029ac:	4a0f      	ldr	r2, [pc, #60]	; (81029ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 81029ae:	f023 0304 	bic.w	r3, r3, #4
 81029b2:	6113      	str	r3, [r2, #16]
 81029b4:	e015      	b.n	81029e2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81029b6:	f7ff f82b 	bl	8101a10 <HAL_GetCurrentCPUID>
 81029ba:	4603      	mov	r3, r0
 81029bc:	2b03      	cmp	r3, #3
 81029be:	d106      	bne.n	81029ce <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81029c0:	4b09      	ldr	r3, [pc, #36]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81029c2:	691b      	ldr	r3, [r3, #16]
 81029c4:	4a08      	ldr	r2, [pc, #32]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81029c6:	f023 0304 	bic.w	r3, r3, #4
 81029ca:	6113      	str	r3, [r2, #16]
 81029cc:	e009      	b.n	81029e2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81029ce:	4b06      	ldr	r3, [pc, #24]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81029d0:	695b      	ldr	r3, [r3, #20]
 81029d2:	4a05      	ldr	r2, [pc, #20]	; (81029e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81029d4:	f023 0304 	bic.w	r3, r3, #4
 81029d8:	6153      	str	r3, [r2, #20]
 81029da:	e002      	b.n	81029e2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81029dc:	bf00      	nop
 81029de:	e000      	b.n	81029e2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81029e0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81029e2:	3710      	adds	r7, #16
 81029e4:	46bd      	mov	sp, r7
 81029e6:	bd80      	pop	{r7, pc}
 81029e8:	58024800 	.word	0x58024800
 81029ec:	e000ed00 	.word	0xe000ed00

081029f0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81029f0:	b580      	push	{r7, lr}
 81029f2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81029f4:	f7ff f80c 	bl	8101a10 <HAL_GetCurrentCPUID>
 81029f8:	4603      	mov	r3, r0
 81029fa:	2b03      	cmp	r3, #3
 81029fc:	d101      	bne.n	8102a02 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81029fe:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102a00:	e001      	b.n	8102a06 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102a02:	bf40      	sev
    __WFE ();
 8102a04:	bf20      	wfe
}
 8102a06:	bf00      	nop
 8102a08:	bd80      	pop	{r7, pc}
	...

08102a0c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8102a0c:	b480      	push	{r7}
 8102a0e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8102a10:	4b05      	ldr	r3, [pc, #20]	; (8102a28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8102a12:	68db      	ldr	r3, [r3, #12]
 8102a14:	4a04      	ldr	r2, [pc, #16]	; (8102a28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8102a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102a1a:	60d3      	str	r3, [r2, #12]
}
 8102a1c:	bf00      	nop
 8102a1e:	46bd      	mov	sp, r7
 8102a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a24:	4770      	bx	lr
 8102a26:	bf00      	nop
 8102a28:	58024800 	.word	0x58024800

08102a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102a2c:	b480      	push	{r7}
 8102a2e:	b089      	sub	sp, #36	; 0x24
 8102a30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102a32:	4bb3      	ldr	r3, [pc, #716]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a34:	691b      	ldr	r3, [r3, #16]
 8102a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102a3a:	2b18      	cmp	r3, #24
 8102a3c:	f200 8155 	bhi.w	8102cea <HAL_RCC_GetSysClockFreq+0x2be>
 8102a40:	a201      	add	r2, pc, #4	; (adr r2, 8102a48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a46:	bf00      	nop
 8102a48:	08102aad 	.word	0x08102aad
 8102a4c:	08102ceb 	.word	0x08102ceb
 8102a50:	08102ceb 	.word	0x08102ceb
 8102a54:	08102ceb 	.word	0x08102ceb
 8102a58:	08102ceb 	.word	0x08102ceb
 8102a5c:	08102ceb 	.word	0x08102ceb
 8102a60:	08102ceb 	.word	0x08102ceb
 8102a64:	08102ceb 	.word	0x08102ceb
 8102a68:	08102ad3 	.word	0x08102ad3
 8102a6c:	08102ceb 	.word	0x08102ceb
 8102a70:	08102ceb 	.word	0x08102ceb
 8102a74:	08102ceb 	.word	0x08102ceb
 8102a78:	08102ceb 	.word	0x08102ceb
 8102a7c:	08102ceb 	.word	0x08102ceb
 8102a80:	08102ceb 	.word	0x08102ceb
 8102a84:	08102ceb 	.word	0x08102ceb
 8102a88:	08102ad9 	.word	0x08102ad9
 8102a8c:	08102ceb 	.word	0x08102ceb
 8102a90:	08102ceb 	.word	0x08102ceb
 8102a94:	08102ceb 	.word	0x08102ceb
 8102a98:	08102ceb 	.word	0x08102ceb
 8102a9c:	08102ceb 	.word	0x08102ceb
 8102aa0:	08102ceb 	.word	0x08102ceb
 8102aa4:	08102ceb 	.word	0x08102ceb
 8102aa8:	08102adf 	.word	0x08102adf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102aac:	4b94      	ldr	r3, [pc, #592]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102aae:	681b      	ldr	r3, [r3, #0]
 8102ab0:	f003 0320 	and.w	r3, r3, #32
 8102ab4:	2b00      	cmp	r3, #0
 8102ab6:	d009      	beq.n	8102acc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102ab8:	4b91      	ldr	r3, [pc, #580]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	08db      	lsrs	r3, r3, #3
 8102abe:	f003 0303 	and.w	r3, r3, #3
 8102ac2:	4a90      	ldr	r2, [pc, #576]	; (8102d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8102ac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102aca:	e111      	b.n	8102cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102acc:	4b8d      	ldr	r3, [pc, #564]	; (8102d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102ace:	61bb      	str	r3, [r7, #24]
      break;
 8102ad0:	e10e      	b.n	8102cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102ad2:	4b8d      	ldr	r3, [pc, #564]	; (8102d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102ad4:	61bb      	str	r3, [r7, #24]
      break;
 8102ad6:	e10b      	b.n	8102cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102ad8:	4b8c      	ldr	r3, [pc, #560]	; (8102d0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102ada:	61bb      	str	r3, [r7, #24]
      break;
 8102adc:	e108      	b.n	8102cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102ade:	4b88      	ldr	r3, [pc, #544]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ae2:	f003 0303 	and.w	r3, r3, #3
 8102ae6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102ae8:	4b85      	ldr	r3, [pc, #532]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102aec:	091b      	lsrs	r3, r3, #4
 8102aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102af2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102af4:	4b82      	ldr	r3, [pc, #520]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102af8:	f003 0301 	and.w	r3, r3, #1
 8102afc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102afe:	4b80      	ldr	r3, [pc, #512]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102b02:	08db      	lsrs	r3, r3, #3
 8102b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102b08:	68fa      	ldr	r2, [r7, #12]
 8102b0a:	fb02 f303 	mul.w	r3, r2, r3
 8102b0e:	ee07 3a90 	vmov	s15, r3
 8102b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102b1a:	693b      	ldr	r3, [r7, #16]
 8102b1c:	2b00      	cmp	r3, #0
 8102b1e:	f000 80e1 	beq.w	8102ce4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102b22:	697b      	ldr	r3, [r7, #20]
 8102b24:	2b02      	cmp	r3, #2
 8102b26:	f000 8083 	beq.w	8102c30 <HAL_RCC_GetSysClockFreq+0x204>
 8102b2a:	697b      	ldr	r3, [r7, #20]
 8102b2c:	2b02      	cmp	r3, #2
 8102b2e:	f200 80a1 	bhi.w	8102c74 <HAL_RCC_GetSysClockFreq+0x248>
 8102b32:	697b      	ldr	r3, [r7, #20]
 8102b34:	2b00      	cmp	r3, #0
 8102b36:	d003      	beq.n	8102b40 <HAL_RCC_GetSysClockFreq+0x114>
 8102b38:	697b      	ldr	r3, [r7, #20]
 8102b3a:	2b01      	cmp	r3, #1
 8102b3c:	d056      	beq.n	8102bec <HAL_RCC_GetSysClockFreq+0x1c0>
 8102b3e:	e099      	b.n	8102c74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102b40:	4b6f      	ldr	r3, [pc, #444]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	f003 0320 	and.w	r3, r3, #32
 8102b48:	2b00      	cmp	r3, #0
 8102b4a:	d02d      	beq.n	8102ba8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102b4c:	4b6c      	ldr	r3, [pc, #432]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	08db      	lsrs	r3, r3, #3
 8102b52:	f003 0303 	and.w	r3, r3, #3
 8102b56:	4a6b      	ldr	r2, [pc, #428]	; (8102d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102b58:	fa22 f303 	lsr.w	r3, r2, r3
 8102b5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	ee07 3a90 	vmov	s15, r3
 8102b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b68:	693b      	ldr	r3, [r7, #16]
 8102b6a:	ee07 3a90 	vmov	s15, r3
 8102b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b76:	4b62      	ldr	r3, [pc, #392]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b7e:	ee07 3a90 	vmov	s15, r3
 8102b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ba2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8102ba6:	e087      	b.n	8102cb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102ba8:	693b      	ldr	r3, [r7, #16]
 8102baa:	ee07 3a90 	vmov	s15, r3
 8102bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102d14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102bba:	4b51      	ldr	r3, [pc, #324]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102bc2:	ee07 3a90 	vmov	s15, r3
 8102bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8102bce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102be6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102bea:	e065      	b.n	8102cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102bec:	693b      	ldr	r3, [r7, #16]
 8102bee:	ee07 3a90 	vmov	s15, r3
 8102bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bf6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102bfe:	4b40      	ldr	r3, [pc, #256]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c06:	ee07 3a90 	vmov	s15, r3
 8102c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102c12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102c2e:	e043      	b.n	8102cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102c30:	693b      	ldr	r3, [r7, #16]
 8102c32:	ee07 3a90 	vmov	s15, r3
 8102c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102d1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8102c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c42:	4b2f      	ldr	r3, [pc, #188]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c4a:	ee07 3a90 	vmov	s15, r3
 8102c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8102c56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102c72:	e021      	b.n	8102cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102c74:	693b      	ldr	r3, [r7, #16]
 8102c76:	ee07 3a90 	vmov	s15, r3
 8102c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c86:	4b1e      	ldr	r3, [pc, #120]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c8e:	ee07 3a90 	vmov	s15, r3
 8102c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8102c9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102cb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102cb8:	4b11      	ldr	r3, [pc, #68]	; (8102d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102cbc:	0a5b      	lsrs	r3, r3, #9
 8102cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102cc2:	3301      	adds	r3, #1
 8102cc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102cc6:	683b      	ldr	r3, [r7, #0]
 8102cc8:	ee07 3a90 	vmov	s15, r3
 8102ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8102cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102cdc:	ee17 3a90 	vmov	r3, s15
 8102ce0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102ce2:	e005      	b.n	8102cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102ce4:	2300      	movs	r3, #0
 8102ce6:	61bb      	str	r3, [r7, #24]
      break;
 8102ce8:	e002      	b.n	8102cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102cea:	4b07      	ldr	r3, [pc, #28]	; (8102d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102cec:	61bb      	str	r3, [r7, #24]
      break;
 8102cee:	bf00      	nop
  }

  return sysclockfreq;
 8102cf0:	69bb      	ldr	r3, [r7, #24]
}
 8102cf2:	4618      	mov	r0, r3
 8102cf4:	3724      	adds	r7, #36	; 0x24
 8102cf6:	46bd      	mov	sp, r7
 8102cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cfc:	4770      	bx	lr
 8102cfe:	bf00      	nop
 8102d00:	58024400 	.word	0x58024400
 8102d04:	03d09000 	.word	0x03d09000
 8102d08:	003d0900 	.word	0x003d0900
 8102d0c:	017d7840 	.word	0x017d7840
 8102d10:	46000000 	.word	0x46000000
 8102d14:	4c742400 	.word	0x4c742400
 8102d18:	4a742400 	.word	0x4a742400
 8102d1c:	4bbebc20 	.word	0x4bbebc20

08102d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102d20:	b580      	push	{r7, lr}
 8102d22:	b082      	sub	sp, #8
 8102d24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102d26:	f7ff fe81 	bl	8102a2c <HAL_RCC_GetSysClockFreq>
 8102d2a:	4602      	mov	r2, r0
 8102d2c:	4b11      	ldr	r3, [pc, #68]	; (8102d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8102d2e:	699b      	ldr	r3, [r3, #24]
 8102d30:	0a1b      	lsrs	r3, r3, #8
 8102d32:	f003 030f 	and.w	r3, r3, #15
 8102d36:	4910      	ldr	r1, [pc, #64]	; (8102d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8102d38:	5ccb      	ldrb	r3, [r1, r3]
 8102d3a:	f003 031f 	and.w	r3, r3, #31
 8102d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8102d42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102d44:	4b0b      	ldr	r3, [pc, #44]	; (8102d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8102d46:	699b      	ldr	r3, [r3, #24]
 8102d48:	f003 030f 	and.w	r3, r3, #15
 8102d4c:	4a0a      	ldr	r2, [pc, #40]	; (8102d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8102d4e:	5cd3      	ldrb	r3, [r2, r3]
 8102d50:	f003 031f 	and.w	r3, r3, #31
 8102d54:	687a      	ldr	r2, [r7, #4]
 8102d56:	fa22 f303 	lsr.w	r3, r2, r3
 8102d5a:	4a08      	ldr	r2, [pc, #32]	; (8102d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102d5c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102d5e:	4b07      	ldr	r3, [pc, #28]	; (8102d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	4a07      	ldr	r2, [pc, #28]	; (8102d80 <HAL_RCC_GetHCLKFreq+0x60>)
 8102d64:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102d66:	4b05      	ldr	r3, [pc, #20]	; (8102d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102d68:	681b      	ldr	r3, [r3, #0]
}
 8102d6a:	4618      	mov	r0, r3
 8102d6c:	3708      	adds	r7, #8
 8102d6e:	46bd      	mov	sp, r7
 8102d70:	bd80      	pop	{r7, pc}
 8102d72:	bf00      	nop
 8102d74:	58024400 	.word	0x58024400
 8102d78:	08106b48 	.word	0x08106b48
 8102d7c:	10000004 	.word	0x10000004
 8102d80:	10000000 	.word	0x10000000

08102d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102d84:	b580      	push	{r7, lr}
 8102d86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102d88:	f7ff ffca 	bl	8102d20 <HAL_RCC_GetHCLKFreq>
 8102d8c:	4602      	mov	r2, r0
 8102d8e:	4b06      	ldr	r3, [pc, #24]	; (8102da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102d90:	69db      	ldr	r3, [r3, #28]
 8102d92:	091b      	lsrs	r3, r3, #4
 8102d94:	f003 0307 	and.w	r3, r3, #7
 8102d98:	4904      	ldr	r1, [pc, #16]	; (8102dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8102d9a:	5ccb      	ldrb	r3, [r1, r3]
 8102d9c:	f003 031f 	and.w	r3, r3, #31
 8102da0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102da4:	4618      	mov	r0, r3
 8102da6:	bd80      	pop	{r7, pc}
 8102da8:	58024400 	.word	0x58024400
 8102dac:	08106b48 	.word	0x08106b48

08102db0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102db4:	b0cc      	sub	sp, #304	; 0x130
 8102db6:	af00      	add	r7, sp, #0
 8102db8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102dbc:	2300      	movs	r3, #0
 8102dbe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102dc2:	2300      	movs	r3, #0
 8102dc4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dd0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8102dd4:	2500      	movs	r5, #0
 8102dd6:	ea54 0305 	orrs.w	r3, r4, r5
 8102dda:	d049      	beq.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102de2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102de6:	d02f      	beq.n	8102e48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102de8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102dec:	d828      	bhi.n	8102e40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102df2:	d01a      	beq.n	8102e2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102df8:	d822      	bhi.n	8102e40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102dfa:	2b00      	cmp	r3, #0
 8102dfc:	d003      	beq.n	8102e06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102e02:	d007      	beq.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102e04:	e01c      	b.n	8102e40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e06:	4bb8      	ldr	r3, [pc, #736]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e0a:	4ab7      	ldr	r2, [pc, #732]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102e12:	e01a      	b.n	8102e4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e18:	3308      	adds	r3, #8
 8102e1a:	2102      	movs	r1, #2
 8102e1c:	4618      	mov	r0, r3
 8102e1e:	f002 fba1 	bl	8105564 <RCCEx_PLL2_Config>
 8102e22:	4603      	mov	r3, r0
 8102e24:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102e28:	e00f      	b.n	8102e4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e2e:	3328      	adds	r3, #40	; 0x28
 8102e30:	2102      	movs	r1, #2
 8102e32:	4618      	mov	r0, r3
 8102e34:	f002 fc48 	bl	81056c8 <RCCEx_PLL3_Config>
 8102e38:	4603      	mov	r3, r0
 8102e3a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102e3e:	e004      	b.n	8102e4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102e40:	2301      	movs	r3, #1
 8102e42:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102e46:	e000      	b.n	8102e4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102e4e:	2b00      	cmp	r3, #0
 8102e50:	d10a      	bne.n	8102e68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102e52:	4ba5      	ldr	r3, [pc, #660]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102e56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8102e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102e60:	4aa1      	ldr	r2, [pc, #644]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102e62:	430b      	orrs	r3, r1
 8102e64:	6513      	str	r3, [r2, #80]	; 0x50
 8102e66:	e003      	b.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e68:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102e6c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e78:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8102e7c:	f04f 0900 	mov.w	r9, #0
 8102e80:	ea58 0309 	orrs.w	r3, r8, r9
 8102e84:	d047      	beq.n	8102f16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8102e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102e8c:	2b04      	cmp	r3, #4
 8102e8e:	d82a      	bhi.n	8102ee6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102e90:	a201      	add	r2, pc, #4	; (adr r2, 8102e98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8102e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102e96:	bf00      	nop
 8102e98:	08102ead 	.word	0x08102ead
 8102e9c:	08102ebb 	.word	0x08102ebb
 8102ea0:	08102ed1 	.word	0x08102ed1
 8102ea4:	08102eef 	.word	0x08102eef
 8102ea8:	08102eef 	.word	0x08102eef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102eac:	4b8e      	ldr	r3, [pc, #568]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102eb0:	4a8d      	ldr	r2, [pc, #564]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102eb8:	e01a      	b.n	8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102ebe:	3308      	adds	r3, #8
 8102ec0:	2100      	movs	r1, #0
 8102ec2:	4618      	mov	r0, r3
 8102ec4:	f002 fb4e 	bl	8105564 <RCCEx_PLL2_Config>
 8102ec8:	4603      	mov	r3, r0
 8102eca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102ece:	e00f      	b.n	8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102ed4:	3328      	adds	r3, #40	; 0x28
 8102ed6:	2100      	movs	r1, #0
 8102ed8:	4618      	mov	r0, r3
 8102eda:	f002 fbf5 	bl	81056c8 <RCCEx_PLL3_Config>
 8102ede:	4603      	mov	r3, r0
 8102ee0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102ee4:	e004      	b.n	8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102ee6:	2301      	movs	r3, #1
 8102ee8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102eec:	e000      	b.n	8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ef0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102ef4:	2b00      	cmp	r3, #0
 8102ef6:	d10a      	bne.n	8102f0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102ef8:	4b7b      	ldr	r3, [pc, #492]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102efc:	f023 0107 	bic.w	r1, r3, #7
 8102f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f06:	4a78      	ldr	r2, [pc, #480]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102f08:	430b      	orrs	r3, r1
 8102f0a:	6513      	str	r3, [r2, #80]	; 0x50
 8102f0c:	e003      	b.n	8102f16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102f12:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f1e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8102f22:	f04f 0b00 	mov.w	fp, #0
 8102f26:	ea5a 030b 	orrs.w	r3, sl, fp
 8102f2a:	d04c      	beq.n	8102fc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102f36:	d030      	beq.n	8102f9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102f3c:	d829      	bhi.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102f3e:	2bc0      	cmp	r3, #192	; 0xc0
 8102f40:	d02d      	beq.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8102f42:	2bc0      	cmp	r3, #192	; 0xc0
 8102f44:	d825      	bhi.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102f46:	2b80      	cmp	r3, #128	; 0x80
 8102f48:	d018      	beq.n	8102f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102f4a:	2b80      	cmp	r3, #128	; 0x80
 8102f4c:	d821      	bhi.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102f4e:	2b00      	cmp	r3, #0
 8102f50:	d002      	beq.n	8102f58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8102f52:	2b40      	cmp	r3, #64	; 0x40
 8102f54:	d007      	beq.n	8102f66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102f56:	e01c      	b.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f58:	4b63      	ldr	r3, [pc, #396]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f5c:	4a62      	ldr	r2, [pc, #392]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102f64:	e01c      	b.n	8102fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102f6a:	3308      	adds	r3, #8
 8102f6c:	2100      	movs	r1, #0
 8102f6e:	4618      	mov	r0, r3
 8102f70:	f002 faf8 	bl	8105564 <RCCEx_PLL2_Config>
 8102f74:	4603      	mov	r3, r0
 8102f76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102f7a:	e011      	b.n	8102fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102f80:	3328      	adds	r3, #40	; 0x28
 8102f82:	2100      	movs	r1, #0
 8102f84:	4618      	mov	r0, r3
 8102f86:	f002 fb9f 	bl	81056c8 <RCCEx_PLL3_Config>
 8102f8a:	4603      	mov	r3, r0
 8102f8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102f90:	e006      	b.n	8102fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102f92:	2301      	movs	r3, #1
 8102f94:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8102f98:	e002      	b.n	8102fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102f9a:	bf00      	nop
 8102f9c:	e000      	b.n	8102fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102fa0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102fa4:	2b00      	cmp	r3, #0
 8102fa6:	d10a      	bne.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102fa8:	4b4f      	ldr	r3, [pc, #316]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102fac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8102fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102fb6:	4a4c      	ldr	r2, [pc, #304]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102fb8:	430b      	orrs	r3, r1
 8102fba:	6513      	str	r3, [r2, #80]	; 0x50
 8102fbc:	e003      	b.n	8102fc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fbe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8102fc2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fce:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8102fd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8102fd6:	2300      	movs	r3, #0
 8102fd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8102fdc:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8102fe0:	460b      	mov	r3, r1
 8102fe2:	4313      	orrs	r3, r2
 8102fe4:	d053      	beq.n	810308e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8102fea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102fee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102ff2:	d035      	beq.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102ff4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102ff8:	d82e      	bhi.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102ffa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102ffe:	d031      	beq.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103000:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103004:	d828      	bhi.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810300a:	d01a      	beq.n	8103042 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810300c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103010:	d822      	bhi.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103012:	2b00      	cmp	r3, #0
 8103014:	d003      	beq.n	810301e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810301a:	d007      	beq.n	810302c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810301c:	e01c      	b.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810301e:	4b32      	ldr	r3, [pc, #200]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103022:	4a31      	ldr	r2, [pc, #196]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810302a:	e01c      	b.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810302c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103030:	3308      	adds	r3, #8
 8103032:	2100      	movs	r1, #0
 8103034:	4618      	mov	r0, r3
 8103036:	f002 fa95 	bl	8105564 <RCCEx_PLL2_Config>
 810303a:	4603      	mov	r3, r0
 810303c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103040:	e011      	b.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103042:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103046:	3328      	adds	r3, #40	; 0x28
 8103048:	2100      	movs	r1, #0
 810304a:	4618      	mov	r0, r3
 810304c:	f002 fb3c 	bl	81056c8 <RCCEx_PLL3_Config>
 8103050:	4603      	mov	r3, r0
 8103052:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103056:	e006      	b.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103058:	2301      	movs	r3, #1
 810305a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810305e:	e002      	b.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103060:	bf00      	nop
 8103062:	e000      	b.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103066:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810306a:	2b00      	cmp	r3, #0
 810306c:	d10b      	bne.n	8103086 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810306e:	4b1e      	ldr	r3, [pc, #120]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103072:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8103076:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810307a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810307e:	4a1a      	ldr	r2, [pc, #104]	; (81030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103080:	430b      	orrs	r3, r1
 8103082:	6593      	str	r3, [r2, #88]	; 0x58
 8103084:	e003      	b.n	810308e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103086:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810308a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810308e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103096:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 810309a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 810309e:	2300      	movs	r3, #0
 81030a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 81030a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 81030a8:	460b      	mov	r3, r1
 81030aa:	4313      	orrs	r3, r2
 81030ac:	d056      	beq.n	810315c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81030ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81030b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81030b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81030ba:	d038      	beq.n	810312e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81030bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81030c0:	d831      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81030c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81030c6:	d034      	beq.n	8103132 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81030c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81030cc:	d82b      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81030ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81030d2:	d01d      	beq.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81030d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81030d8:	d825      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81030da:	2b00      	cmp	r3, #0
 81030dc:	d006      	beq.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81030de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81030e2:	d00a      	beq.n	81030fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81030e4:	e01f      	b.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81030e6:	bf00      	nop
 81030e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030ec:	4ba2      	ldr	r3, [pc, #648]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030f0:	4aa1      	ldr	r2, [pc, #644]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81030f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81030f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81030f8:	e01c      	b.n	8103134 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81030fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81030fe:	3308      	adds	r3, #8
 8103100:	2100      	movs	r1, #0
 8103102:	4618      	mov	r0, r3
 8103104:	f002 fa2e 	bl	8105564 <RCCEx_PLL2_Config>
 8103108:	4603      	mov	r3, r0
 810310a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810310e:	e011      	b.n	8103134 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103114:	3328      	adds	r3, #40	; 0x28
 8103116:	2100      	movs	r1, #0
 8103118:	4618      	mov	r0, r3
 810311a:	f002 fad5 	bl	81056c8 <RCCEx_PLL3_Config>
 810311e:	4603      	mov	r3, r0
 8103120:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103124:	e006      	b.n	8103134 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103126:	2301      	movs	r3, #1
 8103128:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810312c:	e002      	b.n	8103134 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810312e:	bf00      	nop
 8103130:	e000      	b.n	8103134 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103134:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103138:	2b00      	cmp	r3, #0
 810313a:	d10b      	bne.n	8103154 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810313c:	4b8e      	ldr	r3, [pc, #568]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103140:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8103144:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103148:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810314c:	4a8a      	ldr	r2, [pc, #552]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810314e:	430b      	orrs	r3, r1
 8103150:	6593      	str	r3, [r2, #88]	; 0x58
 8103152:	e003      	b.n	810315c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103154:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103158:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810315c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103164:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8103168:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 810316c:	2300      	movs	r3, #0
 810316e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8103172:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8103176:	460b      	mov	r3, r1
 8103178:	4313      	orrs	r3, r2
 810317a:	d03a      	beq.n	81031f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810317c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103182:	2b30      	cmp	r3, #48	; 0x30
 8103184:	d01f      	beq.n	81031c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103186:	2b30      	cmp	r3, #48	; 0x30
 8103188:	d819      	bhi.n	81031be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810318a:	2b20      	cmp	r3, #32
 810318c:	d00c      	beq.n	81031a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810318e:	2b20      	cmp	r3, #32
 8103190:	d815      	bhi.n	81031be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103192:	2b00      	cmp	r3, #0
 8103194:	d019      	beq.n	81031ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103196:	2b10      	cmp	r3, #16
 8103198:	d111      	bne.n	81031be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810319a:	4b77      	ldr	r3, [pc, #476]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810319e:	4a76      	ldr	r2, [pc, #472]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81031a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81031a6:	e011      	b.n	81031cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81031a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81031ac:	3308      	adds	r3, #8
 81031ae:	2102      	movs	r1, #2
 81031b0:	4618      	mov	r0, r3
 81031b2:	f002 f9d7 	bl	8105564 <RCCEx_PLL2_Config>
 81031b6:	4603      	mov	r3, r0
 81031b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81031bc:	e006      	b.n	81031cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81031be:	2301      	movs	r3, #1
 81031c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81031c4:	e002      	b.n	81031cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81031c6:	bf00      	nop
 81031c8:	e000      	b.n	81031cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81031ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81031cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81031d0:	2b00      	cmp	r3, #0
 81031d2:	d10a      	bne.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81031d4:	4b68      	ldr	r3, [pc, #416]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81031d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81031d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 81031dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81031e2:	4a65      	ldr	r2, [pc, #404]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81031e4:	430b      	orrs	r3, r1
 81031e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 81031e8:	e003      	b.n	81031f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81031ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81031f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 81031fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8103202:	2300      	movs	r3, #0
 8103204:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8103208:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 810320c:	460b      	mov	r3, r1
 810320e:	4313      	orrs	r3, r2
 8103210:	d051      	beq.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103212:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810321c:	d035      	beq.n	810328a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810321e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103222:	d82e      	bhi.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103228:	d031      	beq.n	810328e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810322a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810322e:	d828      	bhi.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103234:	d01a      	beq.n	810326c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810323a:	d822      	bhi.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810323c:	2b00      	cmp	r3, #0
 810323e:	d003      	beq.n	8103248 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103244:	d007      	beq.n	8103256 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103246:	e01c      	b.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103248:	4b4b      	ldr	r3, [pc, #300]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810324c:	4a4a      	ldr	r2, [pc, #296]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810324e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103254:	e01c      	b.n	8103290 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103256:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810325a:	3308      	adds	r3, #8
 810325c:	2100      	movs	r1, #0
 810325e:	4618      	mov	r0, r3
 8103260:	f002 f980 	bl	8105564 <RCCEx_PLL2_Config>
 8103264:	4603      	mov	r3, r0
 8103266:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810326a:	e011      	b.n	8103290 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810326c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103270:	3328      	adds	r3, #40	; 0x28
 8103272:	2100      	movs	r1, #0
 8103274:	4618      	mov	r0, r3
 8103276:	f002 fa27 	bl	81056c8 <RCCEx_PLL3_Config>
 810327a:	4603      	mov	r3, r0
 810327c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103280:	e006      	b.n	8103290 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103282:	2301      	movs	r3, #1
 8103284:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103288:	e002      	b.n	8103290 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810328a:	bf00      	nop
 810328c:	e000      	b.n	8103290 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810328e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103290:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103294:	2b00      	cmp	r3, #0
 8103296:	d10a      	bne.n	81032ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103298:	4b37      	ldr	r3, [pc, #220]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810329c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 81032a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81032a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81032a6:	4a34      	ldr	r2, [pc, #208]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81032a8:	430b      	orrs	r3, r1
 81032aa:	6513      	str	r3, [r2, #80]	; 0x50
 81032ac:	e003      	b.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81032b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81032b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 81032c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 81032c6:	2300      	movs	r3, #0
 81032c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 81032cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 81032d0:	460b      	mov	r3, r1
 81032d2:	4313      	orrs	r3, r2
 81032d4:	d056      	beq.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81032d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81032da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81032dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81032e0:	d033      	beq.n	810334a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81032e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81032e6:	d82c      	bhi.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81032e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81032ec:	d02f      	beq.n	810334e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81032ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81032f2:	d826      	bhi.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81032f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81032f8:	d02b      	beq.n	8103352 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81032fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81032fe:	d820      	bhi.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103304:	d012      	beq.n	810332c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810330a:	d81a      	bhi.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810330c:	2b00      	cmp	r3, #0
 810330e:	d022      	beq.n	8103356 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103314:	d115      	bne.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103316:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810331a:	3308      	adds	r3, #8
 810331c:	2101      	movs	r1, #1
 810331e:	4618      	mov	r0, r3
 8103320:	f002 f920 	bl	8105564 <RCCEx_PLL2_Config>
 8103324:	4603      	mov	r3, r0
 8103326:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810332a:	e015      	b.n	8103358 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810332c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103330:	3328      	adds	r3, #40	; 0x28
 8103332:	2101      	movs	r1, #1
 8103334:	4618      	mov	r0, r3
 8103336:	f002 f9c7 	bl	81056c8 <RCCEx_PLL3_Config>
 810333a:	4603      	mov	r3, r0
 810333c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103340:	e00a      	b.n	8103358 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103342:	2301      	movs	r3, #1
 8103344:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103348:	e006      	b.n	8103358 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810334a:	bf00      	nop
 810334c:	e004      	b.n	8103358 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810334e:	bf00      	nop
 8103350:	e002      	b.n	8103358 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103352:	bf00      	nop
 8103354:	e000      	b.n	8103358 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103358:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810335c:	2b00      	cmp	r3, #0
 810335e:	d10d      	bne.n	810337c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103360:	4b05      	ldr	r3, [pc, #20]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103364:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8103368:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810336c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810336e:	4a02      	ldr	r2, [pc, #8]	; (8103378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103370:	430b      	orrs	r3, r1
 8103372:	6513      	str	r3, [r2, #80]	; 0x50
 8103374:	e006      	b.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103376:	bf00      	nop
 8103378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810337c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103380:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103384:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103388:	e9d3 2300 	ldrd	r2, r3, [r3]
 810338c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8103390:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8103394:	2300      	movs	r3, #0
 8103396:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 810339a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 810339e:	460b      	mov	r3, r1
 81033a0:	4313      	orrs	r3, r2
 81033a2:	d055      	beq.n	8103450 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81033a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81033a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81033ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81033b0:	d033      	beq.n	810341a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81033b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81033b6:	d82c      	bhi.n	8103412 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81033bc:	d02f      	beq.n	810341e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81033be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81033c2:	d826      	bhi.n	8103412 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81033c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81033c8:	d02b      	beq.n	8103422 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81033ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81033ce:	d820      	bhi.n	8103412 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81033d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81033d4:	d012      	beq.n	81033fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81033d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81033da:	d81a      	bhi.n	8103412 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81033dc:	2b00      	cmp	r3, #0
 81033de:	d022      	beq.n	8103426 <HAL_RCCEx_PeriphCLKConfig+0x676>
 81033e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81033e4:	d115      	bne.n	8103412 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81033e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81033ea:	3308      	adds	r3, #8
 81033ec:	2101      	movs	r1, #1
 81033ee:	4618      	mov	r0, r3
 81033f0:	f002 f8b8 	bl	8105564 <RCCEx_PLL2_Config>
 81033f4:	4603      	mov	r3, r0
 81033f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81033fa:	e015      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81033fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103400:	3328      	adds	r3, #40	; 0x28
 8103402:	2101      	movs	r1, #1
 8103404:	4618      	mov	r0, r3
 8103406:	f002 f95f 	bl	81056c8 <RCCEx_PLL3_Config>
 810340a:	4603      	mov	r3, r0
 810340c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103410:	e00a      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103412:	2301      	movs	r3, #1
 8103414:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103418:	e006      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810341a:	bf00      	nop
 810341c:	e004      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810341e:	bf00      	nop
 8103420:	e002      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103422:	bf00      	nop
 8103424:	e000      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103428:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810342c:	2b00      	cmp	r3, #0
 810342e:	d10b      	bne.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103430:	4bb7      	ldr	r3, [pc, #732]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103434:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8103438:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810343c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103440:	4ab3      	ldr	r2, [pc, #716]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103442:	430b      	orrs	r3, r1
 8103444:	6593      	str	r3, [r2, #88]	; 0x58
 8103446:	e003      	b.n	8103450 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103448:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810344c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8103450:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103458:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 810345c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8103460:	2300      	movs	r3, #0
 8103462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8103466:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 810346a:	460b      	mov	r3, r1
 810346c:	4313      	orrs	r3, r2
 810346e:	d02a      	beq.n	81034c6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8103470:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103476:	2b00      	cmp	r3, #0
 8103478:	d011      	beq.n	810349e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810347a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810347e:	d10a      	bne.n	8103496 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103484:	3308      	adds	r3, #8
 8103486:	2101      	movs	r1, #1
 8103488:	4618      	mov	r0, r3
 810348a:	f002 f86b 	bl	8105564 <RCCEx_PLL2_Config>
 810348e:	4603      	mov	r3, r0
 8103490:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8103494:	e004      	b.n	81034a0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103496:	2301      	movs	r3, #1
 8103498:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810349c:	e000      	b.n	81034a0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810349e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81034a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81034a4:	2b00      	cmp	r3, #0
 81034a6:	d10a      	bne.n	81034be <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 81034a8:	4b99      	ldr	r3, [pc, #612]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81034aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81034ac:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 81034b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81034b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81034b6:	4a96      	ldr	r2, [pc, #600]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81034b8:	430b      	orrs	r3, r1
 81034ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 81034bc:	e003      	b.n	81034c6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81034c2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81034c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034ce:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 81034d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 81034d6:	2300      	movs	r3, #0
 81034d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 81034dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 81034e0:	460b      	mov	r3, r1
 81034e2:	4313      	orrs	r3, r2
 81034e4:	d037      	beq.n	8103556 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81034e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81034ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81034f0:	d00e      	beq.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0x760>
 81034f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81034f6:	d816      	bhi.n	8103526 <HAL_RCCEx_PeriphCLKConfig+0x776>
 81034f8:	2b00      	cmp	r3, #0
 81034fa:	d018      	beq.n	810352e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 81034fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103500:	d111      	bne.n	8103526 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103502:	4b83      	ldr	r3, [pc, #524]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103506:	4a82      	ldr	r2, [pc, #520]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810350c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810350e:	e00f      	b.n	8103530 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103514:	3308      	adds	r3, #8
 8103516:	2101      	movs	r1, #1
 8103518:	4618      	mov	r0, r3
 810351a:	f002 f823 	bl	8105564 <RCCEx_PLL2_Config>
 810351e:	4603      	mov	r3, r0
 8103520:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103524:	e004      	b.n	8103530 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103526:	2301      	movs	r3, #1
 8103528:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810352c:	e000      	b.n	8103530 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810352e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103530:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103534:	2b00      	cmp	r3, #0
 8103536:	d10a      	bne.n	810354e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103538:	4b75      	ldr	r3, [pc, #468]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810353c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8103540:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103546:	4a72      	ldr	r2, [pc, #456]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103548:	430b      	orrs	r3, r1
 810354a:	6513      	str	r3, [r2, #80]	; 0x50
 810354c:	e003      	b.n	8103556 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810354e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103552:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103556:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810355e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8103562:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8103566:	2300      	movs	r3, #0
 8103568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 810356c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8103570:	460b      	mov	r3, r1
 8103572:	4313      	orrs	r3, r2
 8103574:	d03a      	beq.n	81035ec <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103576:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810357c:	2b03      	cmp	r3, #3
 810357e:	d81d      	bhi.n	81035bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8103580:	a201      	add	r2, pc, #4	; (adr r2, 8103588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8103582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103586:	bf00      	nop
 8103588:	081035c5 	.word	0x081035c5
 810358c:	08103599 	.word	0x08103599
 8103590:	081035a7 	.word	0x081035a7
 8103594:	081035c5 	.word	0x081035c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103598:	4b5d      	ldr	r3, [pc, #372]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810359c:	4a5c      	ldr	r2, [pc, #368]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810359e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81035a4:	e00f      	b.n	81035c6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81035a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81035aa:	3308      	adds	r3, #8
 81035ac:	2102      	movs	r1, #2
 81035ae:	4618      	mov	r0, r3
 81035b0:	f001 ffd8 	bl	8105564 <RCCEx_PLL2_Config>
 81035b4:	4603      	mov	r3, r0
 81035b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 81035ba:	e004      	b.n	81035c6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81035bc:	2301      	movs	r3, #1
 81035be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81035c2:	e000      	b.n	81035c6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 81035c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	d10a      	bne.n	81035e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81035ce:	4b50      	ldr	r3, [pc, #320]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81035d2:	f023 0103 	bic.w	r1, r3, #3
 81035d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81035da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81035dc:	4a4c      	ldr	r2, [pc, #304]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81035de:	430b      	orrs	r3, r1
 81035e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 81035e2:	e003      	b.n	81035ec <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81035e8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81035ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 81035f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 81035fc:	2300      	movs	r3, #0
 81035fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8103602:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8103606:	460b      	mov	r3, r1
 8103608:	4313      	orrs	r3, r2
 810360a:	f000 80a0 	beq.w	810374e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810360e:	4b41      	ldr	r3, [pc, #260]	; (8103714 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103610:	681b      	ldr	r3, [r3, #0]
 8103612:	4a40      	ldr	r2, [pc, #256]	; (8103714 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103618:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810361a:	f7fd ff3b 	bl	8101494 <HAL_GetTick>
 810361e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103622:	e00b      	b.n	810363c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103624:	f7fd ff36 	bl	8101494 <HAL_GetTick>
 8103628:	4602      	mov	r2, r0
 810362a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 810362e:	1ad3      	subs	r3, r2, r3
 8103630:	2b64      	cmp	r3, #100	; 0x64
 8103632:	d903      	bls.n	810363c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8103634:	2303      	movs	r3, #3
 8103636:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810363a:	e005      	b.n	8103648 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810363c:	4b35      	ldr	r3, [pc, #212]	; (8103714 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810363e:	681b      	ldr	r3, [r3, #0]
 8103640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103644:	2b00      	cmp	r3, #0
 8103646:	d0ed      	beq.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8103648:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810364c:	2b00      	cmp	r3, #0
 810364e:	d17a      	bne.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103650:	4b2f      	ldr	r3, [pc, #188]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103654:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103658:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810365c:	4053      	eors	r3, r2
 810365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103662:	2b00      	cmp	r3, #0
 8103664:	d015      	beq.n	8103692 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103666:	4b2a      	ldr	r3, [pc, #168]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810366a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810366e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103672:	4b27      	ldr	r3, [pc, #156]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103676:	4a26      	ldr	r2, [pc, #152]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810367c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810367e:	4b24      	ldr	r3, [pc, #144]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103682:	4a23      	ldr	r2, [pc, #140]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103688:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810368a:	4a21      	ldr	r2, [pc, #132]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810368c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8103690:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103696:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810369a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810369e:	d118      	bne.n	81036d2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81036a0:	f7fd fef8 	bl	8101494 <HAL_GetTick>
 81036a4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81036a8:	e00d      	b.n	81036c6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81036aa:	f7fd fef3 	bl	8101494 <HAL_GetTick>
 81036ae:	4602      	mov	r2, r0
 81036b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 81036b4:	1ad2      	subs	r2, r2, r3
 81036b6:	f241 3388 	movw	r3, #5000	; 0x1388
 81036ba:	429a      	cmp	r2, r3
 81036bc:	d903      	bls.n	81036c6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 81036be:	2303      	movs	r3, #3
 81036c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 81036c4:	e005      	b.n	81036d2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81036c6:	4b12      	ldr	r3, [pc, #72]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81036ca:	f003 0302 	and.w	r3, r3, #2
 81036ce:	2b00      	cmp	r3, #0
 81036d0:	d0eb      	beq.n	81036aa <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 81036d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81036d6:	2b00      	cmp	r3, #0
 81036d8:	d130      	bne.n	810373c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81036da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81036e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81036ea:	d115      	bne.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0x968>
 81036ec:	4b08      	ldr	r3, [pc, #32]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036ee:	691b      	ldr	r3, [r3, #16]
 81036f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 81036f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81036fc:	091b      	lsrs	r3, r3, #4
 81036fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103702:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103706:	4a02      	ldr	r2, [pc, #8]	; (8103710 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103708:	430b      	orrs	r3, r1
 810370a:	6113      	str	r3, [r2, #16]
 810370c:	e00a      	b.n	8103724 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810370e:	bf00      	nop
 8103710:	58024400 	.word	0x58024400
 8103714:	58024800 	.word	0x58024800
 8103718:	4bd4      	ldr	r3, [pc, #848]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810371a:	691b      	ldr	r3, [r3, #16]
 810371c:	4ad3      	ldr	r2, [pc, #844]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810371e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103722:	6113      	str	r3, [r2, #16]
 8103724:	4bd1      	ldr	r3, [pc, #836]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103726:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8103728:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810372c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103734:	4acd      	ldr	r2, [pc, #820]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103736:	430b      	orrs	r3, r1
 8103738:	6713      	str	r3, [r2, #112]	; 0x70
 810373a:	e008      	b.n	810374e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810373c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103740:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8103744:	e003      	b.n	810374e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103746:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810374a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810374e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103756:	f002 0301 	and.w	r3, r2, #1
 810375a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810375e:	2300      	movs	r3, #0
 8103760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8103764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8103768:	460b      	mov	r3, r1
 810376a:	4313      	orrs	r3, r2
 810376c:	f000 808b 	beq.w	8103886 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103770:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103778:	2b28      	cmp	r3, #40	; 0x28
 810377a:	d86b      	bhi.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810377c:	a201      	add	r2, pc, #4	; (adr r2, 8103784 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103782:	bf00      	nop
 8103784:	0810385d 	.word	0x0810385d
 8103788:	08103855 	.word	0x08103855
 810378c:	08103855 	.word	0x08103855
 8103790:	08103855 	.word	0x08103855
 8103794:	08103855 	.word	0x08103855
 8103798:	08103855 	.word	0x08103855
 810379c:	08103855 	.word	0x08103855
 81037a0:	08103855 	.word	0x08103855
 81037a4:	08103829 	.word	0x08103829
 81037a8:	08103855 	.word	0x08103855
 81037ac:	08103855 	.word	0x08103855
 81037b0:	08103855 	.word	0x08103855
 81037b4:	08103855 	.word	0x08103855
 81037b8:	08103855 	.word	0x08103855
 81037bc:	08103855 	.word	0x08103855
 81037c0:	08103855 	.word	0x08103855
 81037c4:	0810383f 	.word	0x0810383f
 81037c8:	08103855 	.word	0x08103855
 81037cc:	08103855 	.word	0x08103855
 81037d0:	08103855 	.word	0x08103855
 81037d4:	08103855 	.word	0x08103855
 81037d8:	08103855 	.word	0x08103855
 81037dc:	08103855 	.word	0x08103855
 81037e0:	08103855 	.word	0x08103855
 81037e4:	0810385d 	.word	0x0810385d
 81037e8:	08103855 	.word	0x08103855
 81037ec:	08103855 	.word	0x08103855
 81037f0:	08103855 	.word	0x08103855
 81037f4:	08103855 	.word	0x08103855
 81037f8:	08103855 	.word	0x08103855
 81037fc:	08103855 	.word	0x08103855
 8103800:	08103855 	.word	0x08103855
 8103804:	0810385d 	.word	0x0810385d
 8103808:	08103855 	.word	0x08103855
 810380c:	08103855 	.word	0x08103855
 8103810:	08103855 	.word	0x08103855
 8103814:	08103855 	.word	0x08103855
 8103818:	08103855 	.word	0x08103855
 810381c:	08103855 	.word	0x08103855
 8103820:	08103855 	.word	0x08103855
 8103824:	0810385d 	.word	0x0810385d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103828:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810382c:	3308      	adds	r3, #8
 810382e:	2101      	movs	r1, #1
 8103830:	4618      	mov	r0, r3
 8103832:	f001 fe97 	bl	8105564 <RCCEx_PLL2_Config>
 8103836:	4603      	mov	r3, r0
 8103838:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810383c:	e00f      	b.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810383e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103842:	3328      	adds	r3, #40	; 0x28
 8103844:	2101      	movs	r1, #1
 8103846:	4618      	mov	r0, r3
 8103848:	f001 ff3e 	bl	81056c8 <RCCEx_PLL3_Config>
 810384c:	4603      	mov	r3, r0
 810384e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103852:	e004      	b.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103854:	2301      	movs	r3, #1
 8103856:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810385a:	e000      	b.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810385c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810385e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103862:	2b00      	cmp	r3, #0
 8103864:	d10b      	bne.n	810387e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103866:	4b81      	ldr	r3, [pc, #516]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810386a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 810386e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103876:	4a7d      	ldr	r2, [pc, #500]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103878:	430b      	orrs	r3, r1
 810387a:	6553      	str	r3, [r2, #84]	; 0x54
 810387c:	e003      	b.n	8103886 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810387e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103882:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103886:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810388e:	f002 0302 	and.w	r3, r2, #2
 8103892:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8103896:	2300      	movs	r3, #0
 8103898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810389c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 81038a0:	460b      	mov	r3, r1
 81038a2:	4313      	orrs	r3, r2
 81038a4:	d042      	beq.n	810392c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81038a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81038ac:	2b05      	cmp	r3, #5
 81038ae:	d825      	bhi.n	81038fc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81038b0:	a201      	add	r2, pc, #4	; (adr r2, 81038b8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038b6:	bf00      	nop
 81038b8:	08103905 	.word	0x08103905
 81038bc:	081038d1 	.word	0x081038d1
 81038c0:	081038e7 	.word	0x081038e7
 81038c4:	08103905 	.word	0x08103905
 81038c8:	08103905 	.word	0x08103905
 81038cc:	08103905 	.word	0x08103905
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81038d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038d4:	3308      	adds	r3, #8
 81038d6:	2101      	movs	r1, #1
 81038d8:	4618      	mov	r0, r3
 81038da:	f001 fe43 	bl	8105564 <RCCEx_PLL2_Config>
 81038de:	4603      	mov	r3, r0
 81038e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81038e4:	e00f      	b.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81038e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038ea:	3328      	adds	r3, #40	; 0x28
 81038ec:	2101      	movs	r1, #1
 81038ee:	4618      	mov	r0, r3
 81038f0:	f001 feea 	bl	81056c8 <RCCEx_PLL3_Config>
 81038f4:	4603      	mov	r3, r0
 81038f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81038fa:	e004      	b.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81038fc:	2301      	movs	r3, #1
 81038fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103902:	e000      	b.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8103904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103906:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810390a:	2b00      	cmp	r3, #0
 810390c:	d10a      	bne.n	8103924 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810390e:	4b57      	ldr	r3, [pc, #348]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103912:	f023 0107 	bic.w	r1, r3, #7
 8103916:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810391a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810391c:	4a53      	ldr	r2, [pc, #332]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810391e:	430b      	orrs	r3, r1
 8103920:	6553      	str	r3, [r2, #84]	; 0x54
 8103922:	e003      	b.n	810392c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103924:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103928:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810392c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103934:	f002 0304 	and.w	r3, r2, #4
 8103938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 810393c:	2300      	movs	r3, #0
 810393e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8103942:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8103946:	460b      	mov	r3, r1
 8103948:	4313      	orrs	r3, r2
 810394a:	d044      	beq.n	81039d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810394c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103954:	2b05      	cmp	r3, #5
 8103956:	d825      	bhi.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8103958:	a201      	add	r2, pc, #4	; (adr r2, 8103960 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810395e:	bf00      	nop
 8103960:	081039ad 	.word	0x081039ad
 8103964:	08103979 	.word	0x08103979
 8103968:	0810398f 	.word	0x0810398f
 810396c:	081039ad 	.word	0x081039ad
 8103970:	081039ad 	.word	0x081039ad
 8103974:	081039ad 	.word	0x081039ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103978:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810397c:	3308      	adds	r3, #8
 810397e:	2101      	movs	r1, #1
 8103980:	4618      	mov	r0, r3
 8103982:	f001 fdef 	bl	8105564 <RCCEx_PLL2_Config>
 8103986:	4603      	mov	r3, r0
 8103988:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810398c:	e00f      	b.n	81039ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810398e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103992:	3328      	adds	r3, #40	; 0x28
 8103994:	2101      	movs	r1, #1
 8103996:	4618      	mov	r0, r3
 8103998:	f001 fe96 	bl	81056c8 <RCCEx_PLL3_Config>
 810399c:	4603      	mov	r3, r0
 810399e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81039a2:	e004      	b.n	81039ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81039a4:	2301      	movs	r3, #1
 81039a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81039aa:	e000      	b.n	81039ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 81039ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81039b2:	2b00      	cmp	r3, #0
 81039b4:	d10b      	bne.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81039b6:	4b2d      	ldr	r3, [pc, #180]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039ba:	f023 0107 	bic.w	r1, r3, #7
 81039be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81039c6:	4a29      	ldr	r2, [pc, #164]	; (8103a6c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81039c8:	430b      	orrs	r3, r1
 81039ca:	6593      	str	r3, [r2, #88]	; 0x58
 81039cc:	e003      	b.n	81039d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81039d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81039d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039de:	f002 0320 	and.w	r3, r2, #32
 81039e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 81039e6:	2300      	movs	r3, #0
 81039e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 81039ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 81039f0:	460b      	mov	r3, r1
 81039f2:	4313      	orrs	r3, r2
 81039f4:	d057      	beq.n	8103aa6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81039f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81039fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103a02:	d035      	beq.n	8103a70 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8103a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103a08:	d82c      	bhi.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103a0e:	d031      	beq.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8103a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103a14:	d826      	bhi.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103a16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103a1a:	d02d      	beq.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8103a1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103a20:	d820      	bhi.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103a26:	d012      	beq.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8103a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103a2c:	d81a      	bhi.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	d024      	beq.n	8103a7c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8103a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103a36:	d115      	bne.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a3c:	3308      	adds	r3, #8
 8103a3e:	2100      	movs	r1, #0
 8103a40:	4618      	mov	r0, r3
 8103a42:	f001 fd8f 	bl	8105564 <RCCEx_PLL2_Config>
 8103a46:	4603      	mov	r3, r0
 8103a48:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103a4c:	e017      	b.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a52:	3328      	adds	r3, #40	; 0x28
 8103a54:	2102      	movs	r1, #2
 8103a56:	4618      	mov	r0, r3
 8103a58:	f001 fe36 	bl	81056c8 <RCCEx_PLL3_Config>
 8103a5c:	4603      	mov	r3, r0
 8103a5e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103a62:	e00c      	b.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a64:	2301      	movs	r3, #1
 8103a66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103a6a:	e008      	b.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8103a6c:	58024400 	.word	0x58024400
        break;
 8103a70:	bf00      	nop
 8103a72:	e004      	b.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103a74:	bf00      	nop
 8103a76:	e002      	b.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103a78:	bf00      	nop
 8103a7a:	e000      	b.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a7e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	d10b      	bne.n	8103a9e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103a86:	4bc2      	ldr	r3, [pc, #776]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a8a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8103a8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103a96:	4abe      	ldr	r2, [pc, #760]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103a98:	430b      	orrs	r3, r1
 8103a9a:	6553      	str	r3, [r2, #84]	; 0x54
 8103a9c:	e003      	b.n	8103aa6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a9e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103aa2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103aae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8103ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8103ab6:	2300      	movs	r3, #0
 8103ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8103abc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8103ac0:	460b      	mov	r3, r1
 8103ac2:	4313      	orrs	r3, r2
 8103ac4:	d055      	beq.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103ace:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103ad2:	d033      	beq.n	8103b3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8103ad4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103ad8:	d82c      	bhi.n	8103b34 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103ade:	d02f      	beq.n	8103b40 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8103ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103ae4:	d826      	bhi.n	8103b34 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103aea:	d02b      	beq.n	8103b44 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8103aec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103af0:	d820      	bhi.n	8103b34 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103af6:	d012      	beq.n	8103b1e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8103af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103afc:	d81a      	bhi.n	8103b34 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103afe:	2b00      	cmp	r3, #0
 8103b00:	d022      	beq.n	8103b48 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8103b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103b06:	d115      	bne.n	8103b34 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b0c:	3308      	adds	r3, #8
 8103b0e:	2100      	movs	r1, #0
 8103b10:	4618      	mov	r0, r3
 8103b12:	f001 fd27 	bl	8105564 <RCCEx_PLL2_Config>
 8103b16:	4603      	mov	r3, r0
 8103b18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103b1c:	e015      	b.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b22:	3328      	adds	r3, #40	; 0x28
 8103b24:	2102      	movs	r1, #2
 8103b26:	4618      	mov	r0, r3
 8103b28:	f001 fdce 	bl	81056c8 <RCCEx_PLL3_Config>
 8103b2c:	4603      	mov	r3, r0
 8103b2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103b32:	e00a      	b.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b34:	2301      	movs	r3, #1
 8103b36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103b3a:	e006      	b.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103b3c:	bf00      	nop
 8103b3e:	e004      	b.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103b40:	bf00      	nop
 8103b42:	e002      	b.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103b44:	bf00      	nop
 8103b46:	e000      	b.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b4e:	2b00      	cmp	r3, #0
 8103b50:	d10b      	bne.n	8103b6a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103b52:	4b8f      	ldr	r3, [pc, #572]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b56:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8103b5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103b62:	4a8b      	ldr	r2, [pc, #556]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103b64:	430b      	orrs	r3, r1
 8103b66:	6593      	str	r3, [r2, #88]	; 0x58
 8103b68:	e003      	b.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b6e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b7a:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8103b7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8103b82:	2300      	movs	r3, #0
 8103b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8103b88:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8103b8c:	460b      	mov	r3, r1
 8103b8e:	4313      	orrs	r3, r2
 8103b90:	d055      	beq.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103b9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103b9e:	d033      	beq.n	8103c08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8103ba0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103ba4:	d82c      	bhi.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103baa:	d02f      	beq.n	8103c0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8103bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103bb0:	d826      	bhi.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103bb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103bb6:	d02b      	beq.n	8103c10 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8103bb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103bbc:	d820      	bhi.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103bc2:	d012      	beq.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8103bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103bc8:	d81a      	bhi.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103bca:	2b00      	cmp	r3, #0
 8103bcc:	d022      	beq.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8103bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103bd2:	d115      	bne.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103bd8:	3308      	adds	r3, #8
 8103bda:	2100      	movs	r1, #0
 8103bdc:	4618      	mov	r0, r3
 8103bde:	f001 fcc1 	bl	8105564 <RCCEx_PLL2_Config>
 8103be2:	4603      	mov	r3, r0
 8103be4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103be8:	e015      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103bee:	3328      	adds	r3, #40	; 0x28
 8103bf0:	2102      	movs	r1, #2
 8103bf2:	4618      	mov	r0, r3
 8103bf4:	f001 fd68 	bl	81056c8 <RCCEx_PLL3_Config>
 8103bf8:	4603      	mov	r3, r0
 8103bfa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103bfe:	e00a      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c00:	2301      	movs	r3, #1
 8103c02:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103c06:	e006      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103c08:	bf00      	nop
 8103c0a:	e004      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103c0c:	bf00      	nop
 8103c0e:	e002      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103c10:	bf00      	nop
 8103c12:	e000      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103c1a:	2b00      	cmp	r3, #0
 8103c1c:	d10b      	bne.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103c1e:	4b5c      	ldr	r3, [pc, #368]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c22:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8103c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103c2e:	4a58      	ldr	r2, [pc, #352]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c30:	430b      	orrs	r3, r1
 8103c32:	6593      	str	r3, [r2, #88]	; 0x58
 8103c34:	e003      	b.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c36:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103c3a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c46:	f002 0308 	and.w	r3, r2, #8
 8103c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8103c4e:	2300      	movs	r3, #0
 8103c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8103c54:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8103c58:	460b      	mov	r3, r1
 8103c5a:	4313      	orrs	r3, r2
 8103c5c:	d01e      	beq.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103c6a:	d10c      	bne.n	8103c86 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c70:	3328      	adds	r3, #40	; 0x28
 8103c72:	2102      	movs	r1, #2
 8103c74:	4618      	mov	r0, r3
 8103c76:	f001 fd27 	bl	81056c8 <RCCEx_PLL3_Config>
 8103c7a:	4603      	mov	r3, r0
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	d002      	beq.n	8103c86 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8103c80:	2301      	movs	r3, #1
 8103c82:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103c86:	4b42      	ldr	r3, [pc, #264]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8103c8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103c96:	4a3e      	ldr	r2, [pc, #248]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c98:	430b      	orrs	r3, r1
 8103c9a:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ca4:	f002 0310 	and.w	r3, r2, #16
 8103ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8103cac:	2300      	movs	r3, #0
 8103cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8103cb2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8103cb6:	460b      	mov	r3, r1
 8103cb8:	4313      	orrs	r3, r2
 8103cba:	d01e      	beq.n	8103cfa <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8103cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103cc8:	d10c      	bne.n	8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cce:	3328      	adds	r3, #40	; 0x28
 8103cd0:	2102      	movs	r1, #2
 8103cd2:	4618      	mov	r0, r3
 8103cd4:	f001 fcf8 	bl	81056c8 <RCCEx_PLL3_Config>
 8103cd8:	4603      	mov	r3, r0
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d002      	beq.n	8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8103cde:	2301      	movs	r3, #1
 8103ce0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103ce4:	4b2a      	ldr	r3, [pc, #168]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ce8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8103cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103cf4:	4a26      	ldr	r2, [pc, #152]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103cf6:	430b      	orrs	r3, r1
 8103cf8:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d02:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8103d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8103d0a:	2300      	movs	r3, #0
 8103d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8103d10:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8103d14:	460b      	mov	r3, r1
 8103d16:	4313      	orrs	r3, r2
 8103d18:	d040      	beq.n	8103d9c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d26:	d022      	beq.n	8103d6e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8103d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d2c:	d81b      	bhi.n	8103d66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103d2e:	2b00      	cmp	r3, #0
 8103d30:	d003      	beq.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8103d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103d36:	d00b      	beq.n	8103d50 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8103d38:	e015      	b.n	8103d66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d3e:	3308      	adds	r3, #8
 8103d40:	2100      	movs	r1, #0
 8103d42:	4618      	mov	r0, r3
 8103d44:	f001 fc0e 	bl	8105564 <RCCEx_PLL2_Config>
 8103d48:	4603      	mov	r3, r0
 8103d4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103d4e:	e00f      	b.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103d50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d54:	3328      	adds	r3, #40	; 0x28
 8103d56:	2102      	movs	r1, #2
 8103d58:	4618      	mov	r0, r3
 8103d5a:	f001 fcb5 	bl	81056c8 <RCCEx_PLL3_Config>
 8103d5e:	4603      	mov	r3, r0
 8103d60:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103d64:	e004      	b.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d66:	2301      	movs	r3, #1
 8103d68:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103d6c:	e000      	b.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8103d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d70:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103d74:	2b00      	cmp	r3, #0
 8103d76:	d10d      	bne.n	8103d94 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103d78:	4b05      	ldr	r3, [pc, #20]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d7c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8103d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103d88:	4a01      	ldr	r2, [pc, #4]	; (8103d90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d8a:	430b      	orrs	r3, r1
 8103d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8103d8e:	e005      	b.n	8103d9c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8103d90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103d98:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103da4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8103da8:	67bb      	str	r3, [r7, #120]	; 0x78
 8103daa:	2300      	movs	r3, #0
 8103dac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8103dae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8103db2:	460b      	mov	r3, r1
 8103db4:	4313      	orrs	r3, r2
 8103db6:	d03b      	beq.n	8103e30 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103dc4:	d01f      	beq.n	8103e06 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8103dc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103dca:	d818      	bhi.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8103dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103dd0:	d003      	beq.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8103dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103dd6:	d007      	beq.n	8103de8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8103dd8:	e011      	b.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103dda:	4b64      	ldr	r3, [pc, #400]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dde:	4a63      	ldr	r2, [pc, #396]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103de6:	e00f      	b.n	8103e08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103dec:	3328      	adds	r3, #40	; 0x28
 8103dee:	2101      	movs	r1, #1
 8103df0:	4618      	mov	r0, r3
 8103df2:	f001 fc69 	bl	81056c8 <RCCEx_PLL3_Config>
 8103df6:	4603      	mov	r3, r0
 8103df8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8103dfc:	e004      	b.n	8103e08 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103dfe:	2301      	movs	r3, #1
 8103e00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103e04:	e000      	b.n	8103e08 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8103e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e08:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103e0c:	2b00      	cmp	r3, #0
 8103e0e:	d10b      	bne.n	8103e28 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103e10:	4b56      	ldr	r3, [pc, #344]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e14:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8103e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103e20:	4a52      	ldr	r2, [pc, #328]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103e22:	430b      	orrs	r3, r1
 8103e24:	6553      	str	r3, [r2, #84]	; 0x54
 8103e26:	e003      	b.n	8103e30 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e28:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103e2c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e38:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8103e3c:	673b      	str	r3, [r7, #112]	; 0x70
 8103e3e:	2300      	movs	r3, #0
 8103e40:	677b      	str	r3, [r7, #116]	; 0x74
 8103e42:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8103e46:	460b      	mov	r3, r1
 8103e48:	4313      	orrs	r3, r2
 8103e4a:	d031      	beq.n	8103eb0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8103e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e52:	2b00      	cmp	r3, #0
 8103e54:	d003      	beq.n	8103e5e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8103e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e5a:	d007      	beq.n	8103e6c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8103e5c:	e011      	b.n	8103e82 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e5e:	4b43      	ldr	r3, [pc, #268]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e62:	4a42      	ldr	r2, [pc, #264]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103e6a:	e00e      	b.n	8103e8a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e70:	3308      	adds	r3, #8
 8103e72:	2102      	movs	r1, #2
 8103e74:	4618      	mov	r0, r3
 8103e76:	f001 fb75 	bl	8105564 <RCCEx_PLL2_Config>
 8103e7a:	4603      	mov	r3, r0
 8103e7c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103e80:	e003      	b.n	8103e8a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8103e82:	2301      	movs	r3, #1
 8103e84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e8a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103e8e:	2b00      	cmp	r3, #0
 8103e90:	d10a      	bne.n	8103ea8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103e92:	4b36      	ldr	r3, [pc, #216]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e96:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8103e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ea0:	4a32      	ldr	r2, [pc, #200]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103ea2:	430b      	orrs	r3, r1
 8103ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103ea6:	e003      	b.n	8103eb0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ea8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103eac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103eb8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8103ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8103ebe:	2300      	movs	r3, #0
 8103ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8103ec2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8103ec6:	460b      	mov	r3, r1
 8103ec8:	4313      	orrs	r3, r2
 8103eca:	d00c      	beq.n	8103ee6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ed0:	3328      	adds	r3, #40	; 0x28
 8103ed2:	2102      	movs	r1, #2
 8103ed4:	4618      	mov	r0, r3
 8103ed6:	f001 fbf7 	bl	81056c8 <RCCEx_PLL3_Config>
 8103eda:	4603      	mov	r3, r0
 8103edc:	2b00      	cmp	r3, #0
 8103ede:	d002      	beq.n	8103ee6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8103ee0:	2301      	movs	r3, #1
 8103ee2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103eee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8103ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8103ef4:	2300      	movs	r3, #0
 8103ef6:	667b      	str	r3, [r7, #100]	; 0x64
 8103ef8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8103efc:	460b      	mov	r3, r1
 8103efe:	4313      	orrs	r3, r2
 8103f00:	d03a      	beq.n	8103f78 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8103f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103f0e:	d018      	beq.n	8103f42 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8103f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103f14:	d811      	bhi.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8103f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103f1a:	d014      	beq.n	8103f46 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8103f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103f20:	d80b      	bhi.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8103f22:	2b00      	cmp	r3, #0
 8103f24:	d011      	beq.n	8103f4a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8103f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103f2a:	d106      	bne.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f2c:	4b0f      	ldr	r3, [pc, #60]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f30:	4a0e      	ldr	r2, [pc, #56]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103f38:	e008      	b.n	8103f4c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f3a:	2301      	movs	r3, #1
 8103f3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103f40:	e004      	b.n	8103f4c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103f42:	bf00      	nop
 8103f44:	e002      	b.n	8103f4c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103f46:	bf00      	nop
 8103f48:	e000      	b.n	8103f4c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103f50:	2b00      	cmp	r3, #0
 8103f52:	d10d      	bne.n	8103f70 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103f54:	4b05      	ldr	r3, [pc, #20]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8103f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103f64:	4a01      	ldr	r2, [pc, #4]	; (8103f6c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103f66:	430b      	orrs	r3, r1
 8103f68:	6553      	str	r3, [r2, #84]	; 0x54
 8103f6a:	e005      	b.n	8103f78 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8103f6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f70:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103f74:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f80:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8103f84:	65bb      	str	r3, [r7, #88]	; 0x58
 8103f86:	2300      	movs	r3, #0
 8103f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8103f8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8103f8e:	460b      	mov	r3, r1
 8103f90:	4313      	orrs	r3, r2
 8103f92:	d009      	beq.n	8103fa8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103f94:	4baa      	ldr	r3, [pc, #680]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8103f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103fa2:	4aa7      	ldr	r2, [pc, #668]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103fa4:	430b      	orrs	r3, r1
 8103fa6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103fa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fb0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8103fb4:	653b      	str	r3, [r7, #80]	; 0x50
 8103fb6:	2300      	movs	r3, #0
 8103fb8:	657b      	str	r3, [r7, #84]	; 0x54
 8103fba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8103fbe:	460b      	mov	r3, r1
 8103fc0:	4313      	orrs	r3, r2
 8103fc2:	d00a      	beq.n	8103fda <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103fc4:	4b9e      	ldr	r3, [pc, #632]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103fc6:	691b      	ldr	r3, [r3, #16]
 8103fc8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8103fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8103fd4:	4a9a      	ldr	r2, [pc, #616]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103fd6:	430b      	orrs	r3, r1
 8103fd8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fe2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8103fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8103fe8:	2300      	movs	r3, #0
 8103fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8103fec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8103ff0:	460b      	mov	r3, r1
 8103ff2:	4313      	orrs	r3, r2
 8103ff4:	d009      	beq.n	810400a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103ff6:	4b92      	ldr	r3, [pc, #584]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ffa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8103ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104004:	4a8e      	ldr	r2, [pc, #568]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104006:	430b      	orrs	r3, r1
 8104008:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810400a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104012:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8104016:	643b      	str	r3, [r7, #64]	; 0x40
 8104018:	2300      	movs	r3, #0
 810401a:	647b      	str	r3, [r7, #68]	; 0x44
 810401c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8104020:	460b      	mov	r3, r1
 8104022:	4313      	orrs	r3, r2
 8104024:	d00e      	beq.n	8104044 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104026:	4b86      	ldr	r3, [pc, #536]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104028:	691b      	ldr	r3, [r3, #16]
 810402a:	4a85      	ldr	r2, [pc, #532]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810402c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104030:	6113      	str	r3, [r2, #16]
 8104032:	4b83      	ldr	r3, [pc, #524]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104034:	6919      	ldr	r1, [r3, #16]
 8104036:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810403a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 810403e:	4a80      	ldr	r2, [pc, #512]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104040:	430b      	orrs	r3, r1
 8104042:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104044:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104048:	e9d3 2300 	ldrd	r2, r3, [r3]
 810404c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8104050:	63bb      	str	r3, [r7, #56]	; 0x38
 8104052:	2300      	movs	r3, #0
 8104054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104056:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 810405a:	460b      	mov	r3, r1
 810405c:	4313      	orrs	r3, r2
 810405e:	d009      	beq.n	8104074 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104060:	4b77      	ldr	r3, [pc, #476]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104064:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104068:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810406e:	4a74      	ldr	r2, [pc, #464]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104070:	430b      	orrs	r3, r1
 8104072:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104074:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104078:	e9d3 2300 	ldrd	r2, r3, [r3]
 810407c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8104080:	633b      	str	r3, [r7, #48]	; 0x30
 8104082:	2300      	movs	r3, #0
 8104084:	637b      	str	r3, [r7, #52]	; 0x34
 8104086:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810408a:	460b      	mov	r3, r1
 810408c:	4313      	orrs	r3, r2
 810408e:	d00a      	beq.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104090:	4b6b      	ldr	r3, [pc, #428]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104094:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8104098:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81040a0:	4a67      	ldr	r2, [pc, #412]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81040a2:	430b      	orrs	r3, r1
 81040a4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81040a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040ae:	2100      	movs	r1, #0
 81040b0:	62b9      	str	r1, [r7, #40]	; 0x28
 81040b2:	f003 0301 	and.w	r3, r3, #1
 81040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 81040b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 81040bc:	460b      	mov	r3, r1
 81040be:	4313      	orrs	r3, r2
 81040c0:	d011      	beq.n	81040e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81040c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040c6:	3308      	adds	r3, #8
 81040c8:	2100      	movs	r1, #0
 81040ca:	4618      	mov	r0, r3
 81040cc:	f001 fa4a 	bl	8105564 <RCCEx_PLL2_Config>
 81040d0:	4603      	mov	r3, r0
 81040d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 81040d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81040da:	2b00      	cmp	r3, #0
 81040dc:	d003      	beq.n	81040e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81040e2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81040e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040ee:	2100      	movs	r1, #0
 81040f0:	6239      	str	r1, [r7, #32]
 81040f2:	f003 0302 	and.w	r3, r3, #2
 81040f6:	627b      	str	r3, [r7, #36]	; 0x24
 81040f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81040fc:	460b      	mov	r3, r1
 81040fe:	4313      	orrs	r3, r2
 8104100:	d011      	beq.n	8104126 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104102:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104106:	3308      	adds	r3, #8
 8104108:	2101      	movs	r1, #1
 810410a:	4618      	mov	r0, r3
 810410c:	f001 fa2a 	bl	8105564 <RCCEx_PLL2_Config>
 8104110:	4603      	mov	r3, r0
 8104112:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104116:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810411a:	2b00      	cmp	r3, #0
 810411c:	d003      	beq.n	8104126 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810411e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104122:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104126:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810412e:	2100      	movs	r1, #0
 8104130:	61b9      	str	r1, [r7, #24]
 8104132:	f003 0304 	and.w	r3, r3, #4
 8104136:	61fb      	str	r3, [r7, #28]
 8104138:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810413c:	460b      	mov	r3, r1
 810413e:	4313      	orrs	r3, r2
 8104140:	d011      	beq.n	8104166 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104142:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104146:	3308      	adds	r3, #8
 8104148:	2102      	movs	r1, #2
 810414a:	4618      	mov	r0, r3
 810414c:	f001 fa0a 	bl	8105564 <RCCEx_PLL2_Config>
 8104150:	4603      	mov	r3, r0
 8104152:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104156:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810415a:	2b00      	cmp	r3, #0
 810415c:	d003      	beq.n	8104166 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810415e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104162:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104166:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810416e:	2100      	movs	r1, #0
 8104170:	6139      	str	r1, [r7, #16]
 8104172:	f003 0308 	and.w	r3, r3, #8
 8104176:	617b      	str	r3, [r7, #20]
 8104178:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810417c:	460b      	mov	r3, r1
 810417e:	4313      	orrs	r3, r2
 8104180:	d011      	beq.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104182:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104186:	3328      	adds	r3, #40	; 0x28
 8104188:	2100      	movs	r1, #0
 810418a:	4618      	mov	r0, r3
 810418c:	f001 fa9c 	bl	81056c8 <RCCEx_PLL3_Config>
 8104190:	4603      	mov	r3, r0
 8104192:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8104196:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810419a:	2b00      	cmp	r3, #0
 810419c:	d003      	beq.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810419e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041a2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81041a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041ae:	2100      	movs	r1, #0
 81041b0:	60b9      	str	r1, [r7, #8]
 81041b2:	f003 0310 	and.w	r3, r3, #16
 81041b6:	60fb      	str	r3, [r7, #12]
 81041b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81041bc:	460b      	mov	r3, r1
 81041be:	4313      	orrs	r3, r2
 81041c0:	d011      	beq.n	81041e6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81041c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041c6:	3328      	adds	r3, #40	; 0x28
 81041c8:	2101      	movs	r1, #1
 81041ca:	4618      	mov	r0, r3
 81041cc:	f001 fa7c 	bl	81056c8 <RCCEx_PLL3_Config>
 81041d0:	4603      	mov	r3, r0
 81041d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 81041d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041da:	2b00      	cmp	r3, #0
 81041dc:	d003      	beq.n	81041e6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041e2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81041e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041ee:	2100      	movs	r1, #0
 81041f0:	6039      	str	r1, [r7, #0]
 81041f2:	f003 0320 	and.w	r3, r3, #32
 81041f6:	607b      	str	r3, [r7, #4]
 81041f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 81041fc:	460b      	mov	r3, r1
 81041fe:	4313      	orrs	r3, r2
 8104200:	d011      	beq.n	8104226 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104202:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104206:	3328      	adds	r3, #40	; 0x28
 8104208:	2102      	movs	r1, #2
 810420a:	4618      	mov	r0, r3
 810420c:	f001 fa5c 	bl	81056c8 <RCCEx_PLL3_Config>
 8104210:	4603      	mov	r3, r0
 8104212:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104216:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810421a:	2b00      	cmp	r3, #0
 810421c:	d003      	beq.n	8104226 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810421e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104222:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8104226:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 810422a:	2b00      	cmp	r3, #0
 810422c:	d101      	bne.n	8104232 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810422e:	2300      	movs	r3, #0
 8104230:	e000      	b.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8104232:	2301      	movs	r3, #1
}
 8104234:	4618      	mov	r0, r3
 8104236:	f507 7798 	add.w	r7, r7, #304	; 0x130
 810423a:	46bd      	mov	sp, r7
 810423c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104240:	58024400 	.word	0x58024400

08104244 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104244:	b580      	push	{r7, lr}
 8104246:	b090      	sub	sp, #64	; 0x40
 8104248:	af00      	add	r7, sp, #0
 810424a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810424e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104252:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8104256:	430b      	orrs	r3, r1
 8104258:	f040 8094 	bne.w	8104384 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 810425c:	4b9e      	ldr	r3, [pc, #632]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810425e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104260:	f003 0307 	and.w	r3, r3, #7
 8104264:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104268:	2b04      	cmp	r3, #4
 810426a:	f200 8087 	bhi.w	810437c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810426e:	a201      	add	r2, pc, #4	; (adr r2, 8104274 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8104270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104274:	08104289 	.word	0x08104289
 8104278:	081042b1 	.word	0x081042b1
 810427c:	081042d9 	.word	0x081042d9
 8104280:	08104375 	.word	0x08104375
 8104284:	08104301 	.word	0x08104301
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104288:	4b93      	ldr	r3, [pc, #588]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104294:	d108      	bne.n	81042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810429a:	4618      	mov	r0, r3
 810429c:	f001 f810 	bl	81052c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81042a4:	f000 bd45 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81042a8:	2300      	movs	r3, #0
 81042aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81042ac:	f000 bd41 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81042b0:	4b89      	ldr	r3, [pc, #548]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81042b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81042bc:	d108      	bne.n	81042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81042be:	f107 0318 	add.w	r3, r7, #24
 81042c2:	4618      	mov	r0, r3
 81042c4:	f000 fd54 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81042c8:	69bb      	ldr	r3, [r7, #24]
 81042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81042cc:	f000 bd31 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81042d0:	2300      	movs	r3, #0
 81042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81042d4:	f000 bd2d 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81042d8:	4b7f      	ldr	r3, [pc, #508]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81042e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81042e4:	d108      	bne.n	81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81042e6:	f107 030c 	add.w	r3, r7, #12
 81042ea:	4618      	mov	r0, r3
 81042ec:	f000 fe94 	bl	8105018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81042f4:	f000 bd1d 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81042f8:	2300      	movs	r3, #0
 81042fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81042fc:	f000 bd19 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104300:	4b75      	ldr	r3, [pc, #468]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104304:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104308:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810430a:	4b73      	ldr	r3, [pc, #460]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810430c:	681b      	ldr	r3, [r3, #0]
 810430e:	f003 0304 	and.w	r3, r3, #4
 8104312:	2b04      	cmp	r3, #4
 8104314:	d10c      	bne.n	8104330 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8104316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104318:	2b00      	cmp	r3, #0
 810431a:	d109      	bne.n	8104330 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810431c:	4b6e      	ldr	r3, [pc, #440]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	08db      	lsrs	r3, r3, #3
 8104322:	f003 0303 	and.w	r3, r3, #3
 8104326:	4a6d      	ldr	r2, [pc, #436]	; (81044dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104328:	fa22 f303 	lsr.w	r3, r2, r3
 810432c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810432e:	e01f      	b.n	8104370 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104330:	4b69      	ldr	r3, [pc, #420]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810433c:	d106      	bne.n	810434c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104344:	d102      	bne.n	810434c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104346:	4b66      	ldr	r3, [pc, #408]	; (81044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104348:	63fb      	str	r3, [r7, #60]	; 0x3c
 810434a:	e011      	b.n	8104370 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810434c:	4b62      	ldr	r3, [pc, #392]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104358:	d106      	bne.n	8104368 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810435c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104360:	d102      	bne.n	8104368 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104362:	4b60      	ldr	r3, [pc, #384]	; (81044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104366:	e003      	b.n	8104370 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104368:	2300      	movs	r3, #0
 810436a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810436c:	f000 bce1 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104370:	f000 bcdf 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104374:	4b5c      	ldr	r3, [pc, #368]	; (81044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104378:	f000 bcdb 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810437c:	2300      	movs	r3, #0
 810437e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104380:	f000 bcd7 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104388:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 810438c:	430b      	orrs	r3, r1
 810438e:	f040 80ad 	bne.w	81044ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8104392:	4b51      	ldr	r3, [pc, #324]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104396:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810439a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81043a2:	d056      	beq.n	8104452 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81043a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81043aa:	f200 8090 	bhi.w	81044ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81043b0:	2bc0      	cmp	r3, #192	; 0xc0
 81043b2:	f000 8088 	beq.w	81044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81043b8:	2bc0      	cmp	r3, #192	; 0xc0
 81043ba:	f200 8088 	bhi.w	81044ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81043c0:	2b80      	cmp	r3, #128	; 0x80
 81043c2:	d032      	beq.n	810442a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81043c6:	2b80      	cmp	r3, #128	; 0x80
 81043c8:	f200 8081 	bhi.w	81044ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81043ce:	2b00      	cmp	r3, #0
 81043d0:	d003      	beq.n	81043da <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81043d4:	2b40      	cmp	r3, #64	; 0x40
 81043d6:	d014      	beq.n	8104402 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81043d8:	e079      	b.n	81044ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81043da:	4b3f      	ldr	r3, [pc, #252]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81043e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81043e6:	d108      	bne.n	81043fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81043e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81043ec:	4618      	mov	r0, r3
 81043ee:	f000 ff67 	bl	81052c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81043f6:	f000 bc9c 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81043fa:	2300      	movs	r3, #0
 81043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81043fe:	f000 bc98 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104402:	4b35      	ldr	r3, [pc, #212]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810440a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810440e:	d108      	bne.n	8104422 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104410:	f107 0318 	add.w	r3, r7, #24
 8104414:	4618      	mov	r0, r3
 8104416:	f000 fcab 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810441a:	69bb      	ldr	r3, [r7, #24]
 810441c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810441e:	f000 bc88 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104422:	2300      	movs	r3, #0
 8104424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104426:	f000 bc84 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810442a:	4b2b      	ldr	r3, [pc, #172]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104436:	d108      	bne.n	810444a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104438:	f107 030c 	add.w	r3, r7, #12
 810443c:	4618      	mov	r0, r3
 810443e:	f000 fdeb 	bl	8105018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104442:	68fb      	ldr	r3, [r7, #12]
 8104444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104446:	f000 bc74 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810444a:	2300      	movs	r3, #0
 810444c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810444e:	f000 bc70 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104452:	4b21      	ldr	r3, [pc, #132]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104456:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810445a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810445c:	4b1e      	ldr	r3, [pc, #120]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	f003 0304 	and.w	r3, r3, #4
 8104464:	2b04      	cmp	r3, #4
 8104466:	d10c      	bne.n	8104482 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8104468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810446a:	2b00      	cmp	r3, #0
 810446c:	d109      	bne.n	8104482 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810446e:	4b1a      	ldr	r3, [pc, #104]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104470:	681b      	ldr	r3, [r3, #0]
 8104472:	08db      	lsrs	r3, r3, #3
 8104474:	f003 0303 	and.w	r3, r3, #3
 8104478:	4a18      	ldr	r2, [pc, #96]	; (81044dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810447a:	fa22 f303 	lsr.w	r3, r2, r3
 810447e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104480:	e01f      	b.n	81044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104482:	4b15      	ldr	r3, [pc, #84]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810448a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810448e:	d106      	bne.n	810449e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8104490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104496:	d102      	bne.n	810449e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104498:	4b11      	ldr	r3, [pc, #68]	; (81044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810449a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810449c:	e011      	b.n	81044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810449e:	4b0e      	ldr	r3, [pc, #56]	; (81044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044a0:	681b      	ldr	r3, [r3, #0]
 81044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81044a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81044aa:	d106      	bne.n	81044ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81044ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81044ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81044b2:	d102      	bne.n	81044ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81044b4:	4b0b      	ldr	r3, [pc, #44]	; (81044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81044b8:	e003      	b.n	81044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81044ba:	2300      	movs	r3, #0
 81044bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81044be:	f000 bc38 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81044c2:	f000 bc36 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81044c6:	4b08      	ldr	r3, [pc, #32]	; (81044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81044c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81044ca:	f000 bc32 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81044ce:	2300      	movs	r3, #0
 81044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81044d2:	f000 bc2e 	b.w	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81044d6:	bf00      	nop
 81044d8:	58024400 	.word	0x58024400
 81044dc:	03d09000 	.word	0x03d09000
 81044e0:	003d0900 	.word	0x003d0900
 81044e4:	017d7840 	.word	0x017d7840
 81044e8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81044ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 81044f0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 81044f4:	430b      	orrs	r3, r1
 81044f6:	f040 809c 	bne.w	8104632 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81044fa:	4b9e      	ldr	r3, [pc, #632]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044fe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8104502:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810450a:	d054      	beq.n	81045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 810450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810450e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104512:	f200 808b 	bhi.w	810462c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104518:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810451c:	f000 8083 	beq.w	8104626 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8104520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104522:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104526:	f200 8081 	bhi.w	810462c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810452c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104530:	d02f      	beq.n	8104592 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8104532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104538:	d878      	bhi.n	810462c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810453c:	2b00      	cmp	r3, #0
 810453e:	d004      	beq.n	810454a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8104540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104546:	d012      	beq.n	810456e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8104548:	e070      	b.n	810462c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810454a:	4b8a      	ldr	r3, [pc, #552]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104556:	d107      	bne.n	8104568 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810455c:	4618      	mov	r0, r3
 810455e:	f000 feaf 	bl	81052c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104566:	e3e4      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104568:	2300      	movs	r3, #0
 810456a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810456c:	e3e1      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810456e:	4b81      	ldr	r3, [pc, #516]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810457a:	d107      	bne.n	810458c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810457c:	f107 0318 	add.w	r3, r7, #24
 8104580:	4618      	mov	r0, r3
 8104582:	f000 fbf5 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104586:	69bb      	ldr	r3, [r7, #24]
 8104588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810458a:	e3d2      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810458c:	2300      	movs	r3, #0
 810458e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104590:	e3cf      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104592:	4b78      	ldr	r3, [pc, #480]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104594:	681b      	ldr	r3, [r3, #0]
 8104596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810459a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810459e:	d107      	bne.n	81045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81045a0:	f107 030c 	add.w	r3, r7, #12
 81045a4:	4618      	mov	r0, r3
 81045a6:	f000 fd37 	bl	8105018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81045ae:	e3c0      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81045b0:	2300      	movs	r3, #0
 81045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81045b4:	e3bd      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81045b6:	4b6f      	ldr	r3, [pc, #444]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81045ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81045be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81045c0:	4b6c      	ldr	r3, [pc, #432]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81045c2:	681b      	ldr	r3, [r3, #0]
 81045c4:	f003 0304 	and.w	r3, r3, #4
 81045c8:	2b04      	cmp	r3, #4
 81045ca:	d10c      	bne.n	81045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81045cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81045ce:	2b00      	cmp	r3, #0
 81045d0:	d109      	bne.n	81045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81045d2:	4b68      	ldr	r3, [pc, #416]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	08db      	lsrs	r3, r3, #3
 81045d8:	f003 0303 	and.w	r3, r3, #3
 81045dc:	4a66      	ldr	r2, [pc, #408]	; (8104778 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81045de:	fa22 f303 	lsr.w	r3, r2, r3
 81045e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81045e4:	e01e      	b.n	8104624 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81045e6:	4b63      	ldr	r3, [pc, #396]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81045e8:	681b      	ldr	r3, [r3, #0]
 81045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81045ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81045f2:	d106      	bne.n	8104602 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81045f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81045f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81045fa:	d102      	bne.n	8104602 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81045fc:	4b5f      	ldr	r3, [pc, #380]	; (810477c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104600:	e010      	b.n	8104624 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104602:	4b5c      	ldr	r3, [pc, #368]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104604:	681b      	ldr	r3, [r3, #0]
 8104606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810460a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810460e:	d106      	bne.n	810461e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8104610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104616:	d102      	bne.n	810461e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104618:	4b59      	ldr	r3, [pc, #356]	; (8104780 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810461a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810461c:	e002      	b.n	8104624 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810461e:	2300      	movs	r3, #0
 8104620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104622:	e386      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104624:	e385      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104626:	4b57      	ldr	r3, [pc, #348]	; (8104784 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810462a:	e382      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810462c:	2300      	movs	r3, #0
 810462e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104630:	e37f      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104636:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 810463a:	430b      	orrs	r3, r1
 810463c:	f040 80a7 	bne.w	810478e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8104640:	4b4c      	ldr	r3, [pc, #304]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104644:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8104648:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810464c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104650:	d055      	beq.n	81046fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8104652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104658:	f200 8096 	bhi.w	8104788 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810465e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104662:	f000 8084 	beq.w	810476e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8104666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104668:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810466c:	f200 808c 	bhi.w	8104788 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104676:	d030      	beq.n	81046da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8104678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810467a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810467e:	f200 8083 	bhi.w	8104788 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104684:	2b00      	cmp	r3, #0
 8104686:	d004      	beq.n	8104692 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810468a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810468e:	d012      	beq.n	81046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104690:	e07a      	b.n	8104788 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104692:	4b38      	ldr	r3, [pc, #224]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104694:	681b      	ldr	r3, [r3, #0]
 8104696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810469a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810469e:	d107      	bne.n	81046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81046a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81046a4:	4618      	mov	r0, r3
 81046a6:	f000 fe0b 	bl	81052c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046ae:	e340      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046b0:	2300      	movs	r3, #0
 81046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81046b4:	e33d      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81046b6:	4b2f      	ldr	r3, [pc, #188]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81046b8:	681b      	ldr	r3, [r3, #0]
 81046ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81046be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81046c2:	d107      	bne.n	81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81046c4:	f107 0318 	add.w	r3, r7, #24
 81046c8:	4618      	mov	r0, r3
 81046ca:	f000 fb51 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81046ce:	69bb      	ldr	r3, [r7, #24]
 81046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046d2:	e32e      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046d4:	2300      	movs	r3, #0
 81046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81046d8:	e32b      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81046da:	4b26      	ldr	r3, [pc, #152]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81046dc:	681b      	ldr	r3, [r3, #0]
 81046de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81046e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81046e6:	d107      	bne.n	81046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81046e8:	f107 030c 	add.w	r3, r7, #12
 81046ec:	4618      	mov	r0, r3
 81046ee:	f000 fc93 	bl	8105018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81046f2:	68fb      	ldr	r3, [r7, #12]
 81046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046f6:	e31c      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046f8:	2300      	movs	r3, #0
 81046fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81046fc:	e319      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81046fe:	4b1d      	ldr	r3, [pc, #116]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104706:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104708:	4b1a      	ldr	r3, [pc, #104]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	f003 0304 	and.w	r3, r3, #4
 8104710:	2b04      	cmp	r3, #4
 8104712:	d10c      	bne.n	810472e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8104714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104716:	2b00      	cmp	r3, #0
 8104718:	d109      	bne.n	810472e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810471a:	4b16      	ldr	r3, [pc, #88]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810471c:	681b      	ldr	r3, [r3, #0]
 810471e:	08db      	lsrs	r3, r3, #3
 8104720:	f003 0303 	and.w	r3, r3, #3
 8104724:	4a14      	ldr	r2, [pc, #80]	; (8104778 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104726:	fa22 f303 	lsr.w	r3, r2, r3
 810472a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810472c:	e01e      	b.n	810476c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810472e:	4b11      	ldr	r3, [pc, #68]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810473a:	d106      	bne.n	810474a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 810473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810473e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104742:	d102      	bne.n	810474a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104744:	4b0d      	ldr	r3, [pc, #52]	; (810477c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104748:	e010      	b.n	810476c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810474a:	4b0a      	ldr	r3, [pc, #40]	; (8104774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104756:	d106      	bne.n	8104766 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8104758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810475a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810475e:	d102      	bne.n	8104766 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104760:	4b07      	ldr	r3, [pc, #28]	; (8104780 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104764:	e002      	b.n	810476c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104766:	2300      	movs	r3, #0
 8104768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810476a:	e2e2      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810476c:	e2e1      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810476e:	4b05      	ldr	r3, [pc, #20]	; (8104784 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104772:	e2de      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104774:	58024400 	.word	0x58024400
 8104778:	03d09000 	.word	0x03d09000
 810477c:	003d0900 	.word	0x003d0900
 8104780:	017d7840 	.word	0x017d7840
 8104784:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8104788:	2300      	movs	r3, #0
 810478a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810478c:	e2d1      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810478e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104792:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8104796:	430b      	orrs	r3, r1
 8104798:	f040 809c 	bne.w	81048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 810479c:	4b93      	ldr	r3, [pc, #588]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810479e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 81047a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81047a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81047ac:	d054      	beq.n	8104858 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81047b4:	f200 808b 	bhi.w	81048ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81047be:	f000 8083 	beq.w	81048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81047c8:	f200 8081 	bhi.w	81048ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81047d2:	d02f      	beq.n	8104834 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81047da:	d878      	bhi.n	81048ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047de:	2b00      	cmp	r3, #0
 81047e0:	d004      	beq.n	81047ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81047e8:	d012      	beq.n	8104810 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81047ea:	e070      	b.n	81048ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81047ec:	4b7f      	ldr	r3, [pc, #508]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81047ee:	681b      	ldr	r3, [r3, #0]
 81047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81047f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81047f8:	d107      	bne.n	810480a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81047fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81047fe:	4618      	mov	r0, r3
 8104800:	f000 fd5e 	bl	81052c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104808:	e293      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810480a:	2300      	movs	r3, #0
 810480c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810480e:	e290      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104810:	4b76      	ldr	r3, [pc, #472]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810481c:	d107      	bne.n	810482e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810481e:	f107 0318 	add.w	r3, r7, #24
 8104822:	4618      	mov	r0, r3
 8104824:	f000 faa4 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104828:	69bb      	ldr	r3, [r7, #24]
 810482a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810482c:	e281      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810482e:	2300      	movs	r3, #0
 8104830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104832:	e27e      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104834:	4b6d      	ldr	r3, [pc, #436]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104836:	681b      	ldr	r3, [r3, #0]
 8104838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810483c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104840:	d107      	bne.n	8104852 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104842:	f107 030c 	add.w	r3, r7, #12
 8104846:	4618      	mov	r0, r3
 8104848:	f000 fbe6 	bl	8105018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810484c:	68fb      	ldr	r3, [r7, #12]
 810484e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104850:	e26f      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104852:	2300      	movs	r3, #0
 8104854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104856:	e26c      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104858:	4b64      	ldr	r3, [pc, #400]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810485a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810485c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104860:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104862:	4b62      	ldr	r3, [pc, #392]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	f003 0304 	and.w	r3, r3, #4
 810486a:	2b04      	cmp	r3, #4
 810486c:	d10c      	bne.n	8104888 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810486e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104870:	2b00      	cmp	r3, #0
 8104872:	d109      	bne.n	8104888 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104874:	4b5d      	ldr	r3, [pc, #372]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104876:	681b      	ldr	r3, [r3, #0]
 8104878:	08db      	lsrs	r3, r3, #3
 810487a:	f003 0303 	and.w	r3, r3, #3
 810487e:	4a5c      	ldr	r2, [pc, #368]	; (81049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104880:	fa22 f303 	lsr.w	r3, r2, r3
 8104884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104886:	e01e      	b.n	81048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104888:	4b58      	ldr	r3, [pc, #352]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104894:	d106      	bne.n	81048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8104896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810489c:	d102      	bne.n	81048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810489e:	4b55      	ldr	r3, [pc, #340]	; (81049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81048a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81048a2:	e010      	b.n	81048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81048a4:	4b51      	ldr	r3, [pc, #324]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81048ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81048b0:	d106      	bne.n	81048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81048b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81048b8:	d102      	bne.n	81048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81048ba:	4b4f      	ldr	r3, [pc, #316]	; (81049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81048bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81048be:	e002      	b.n	81048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81048c0:	2300      	movs	r3, #0
 81048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81048c4:	e235      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81048c6:	e234      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81048c8:	4b4c      	ldr	r3, [pc, #304]	; (81049fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81048ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81048cc:	e231      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81048ce:	2300      	movs	r3, #0
 81048d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81048d2:	e22e      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81048d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81048d8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 81048dc:	430b      	orrs	r3, r1
 81048de:	f040 808f 	bne.w	8104a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81048e2:	4b42      	ldr	r3, [pc, #264]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81048e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 81048ea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 81048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81048ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81048f2:	d06b      	beq.n	81049cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81048f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81048fa:	d874      	bhi.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81048fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104902:	d056      	beq.n	81049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8104904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810490a:	d86c      	bhi.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810490e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104912:	d03b      	beq.n	810498c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8104914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104916:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810491a:	d864      	bhi.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810491e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104922:	d021      	beq.n	8104968 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8104924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810492a:	d85c      	bhi.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810492e:	2b00      	cmp	r3, #0
 8104930:	d004      	beq.n	810493c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8104932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104938:	d004      	beq.n	8104944 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810493a:	e054      	b.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 810493c:	f7fe fa22 	bl	8102d84 <HAL_RCC_GetPCLK1Freq>
 8104940:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104942:	e1f6      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104944:	4b29      	ldr	r3, [pc, #164]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104946:	681b      	ldr	r3, [r3, #0]
 8104948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810494c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104950:	d107      	bne.n	8104962 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104952:	f107 0318 	add.w	r3, r7, #24
 8104956:	4618      	mov	r0, r3
 8104958:	f000 fa0a 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810495c:	69fb      	ldr	r3, [r7, #28]
 810495e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104960:	e1e7      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104962:	2300      	movs	r3, #0
 8104964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104966:	e1e4      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104968:	4b20      	ldr	r3, [pc, #128]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810496a:	681b      	ldr	r3, [r3, #0]
 810496c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104974:	d107      	bne.n	8104986 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104976:	f107 030c 	add.w	r3, r7, #12
 810497a:	4618      	mov	r0, r3
 810497c:	f000 fb4c 	bl	8105018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104980:	693b      	ldr	r3, [r7, #16]
 8104982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104984:	e1d5      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104986:	2300      	movs	r3, #0
 8104988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810498a:	e1d2      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810498c:	4b17      	ldr	r3, [pc, #92]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810498e:	681b      	ldr	r3, [r3, #0]
 8104990:	f003 0304 	and.w	r3, r3, #4
 8104994:	2b04      	cmp	r3, #4
 8104996:	d109      	bne.n	81049ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104998:	4b14      	ldr	r3, [pc, #80]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810499a:	681b      	ldr	r3, [r3, #0]
 810499c:	08db      	lsrs	r3, r3, #3
 810499e:	f003 0303 	and.w	r3, r3, #3
 81049a2:	4a13      	ldr	r2, [pc, #76]	; (81049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81049a4:	fa22 f303 	lsr.w	r3, r2, r3
 81049a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049aa:	e1c2      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049ac:	2300      	movs	r3, #0
 81049ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049b0:	e1bf      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81049b2:	4b0e      	ldr	r3, [pc, #56]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81049b4:	681b      	ldr	r3, [r3, #0]
 81049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81049ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81049be:	d102      	bne.n	81049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81049c0:	4b0c      	ldr	r3, [pc, #48]	; (81049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049c4:	e1b5      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049c6:	2300      	movs	r3, #0
 81049c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049ca:	e1b2      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81049cc:	4b07      	ldr	r3, [pc, #28]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81049ce:	681b      	ldr	r3, [r3, #0]
 81049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81049d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81049d8:	d102      	bne.n	81049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81049da:	4b07      	ldr	r3, [pc, #28]	; (81049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049de:	e1a8      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049e0:	2300      	movs	r3, #0
 81049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049e4:	e1a5      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81049e6:	2300      	movs	r3, #0
 81049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049ea:	e1a2      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81049ec:	58024400 	.word	0x58024400
 81049f0:	03d09000 	.word	0x03d09000
 81049f4:	003d0900 	.word	0x003d0900
 81049f8:	017d7840 	.word	0x017d7840
 81049fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8104a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104a04:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8104a08:	430b      	orrs	r3, r1
 8104a0a:	d173      	bne.n	8104af4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8104a0c:	4b9c      	ldr	r3, [pc, #624]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104a14:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104a1c:	d02f      	beq.n	8104a7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104a24:	d863      	bhi.n	8104aee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8104a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104a28:	2b00      	cmp	r3, #0
 8104a2a:	d004      	beq.n	8104a36 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8104a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104a32:	d012      	beq.n	8104a5a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8104a34:	e05b      	b.n	8104aee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104a36:	4b92      	ldr	r3, [pc, #584]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104a42:	d107      	bne.n	8104a54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104a44:	f107 0318 	add.w	r3, r7, #24
 8104a48:	4618      	mov	r0, r3
 8104a4a:	f000 f991 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104a4e:	69bb      	ldr	r3, [r7, #24]
 8104a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a52:	e16e      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a54:	2300      	movs	r3, #0
 8104a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104a58:	e16b      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104a5a:	4b89      	ldr	r3, [pc, #548]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a5c:	681b      	ldr	r3, [r3, #0]
 8104a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a66:	d107      	bne.n	8104a78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104a68:	f107 030c 	add.w	r3, r7, #12
 8104a6c:	4618      	mov	r0, r3
 8104a6e:	f000 fad3 	bl	8105018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8104a72:	697b      	ldr	r3, [r7, #20]
 8104a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a76:	e15c      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a78:	2300      	movs	r3, #0
 8104a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104a7c:	e159      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104a7e:	4b80      	ldr	r3, [pc, #512]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104a82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104a86:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104a88:	4b7d      	ldr	r3, [pc, #500]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	f003 0304 	and.w	r3, r3, #4
 8104a90:	2b04      	cmp	r3, #4
 8104a92:	d10c      	bne.n	8104aae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8104a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104a96:	2b00      	cmp	r3, #0
 8104a98:	d109      	bne.n	8104aae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a9a:	4b79      	ldr	r3, [pc, #484]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	08db      	lsrs	r3, r3, #3
 8104aa0:	f003 0303 	and.w	r3, r3, #3
 8104aa4:	4a77      	ldr	r2, [pc, #476]	; (8104c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8104aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104aac:	e01e      	b.n	8104aec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104aae:	4b74      	ldr	r3, [pc, #464]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ab0:	681b      	ldr	r3, [r3, #0]
 8104ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104aba:	d106      	bne.n	8104aca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8104abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104ac2:	d102      	bne.n	8104aca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104ac4:	4b70      	ldr	r3, [pc, #448]	; (8104c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ac8:	e010      	b.n	8104aec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104aca:	4b6d      	ldr	r3, [pc, #436]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104ad6:	d106      	bne.n	8104ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8104ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104ade:	d102      	bne.n	8104ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104ae0:	4b6a      	ldr	r3, [pc, #424]	; (8104c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ae4:	e002      	b.n	8104aec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104ae6:	2300      	movs	r3, #0
 8104ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104aea:	e122      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104aec:	e121      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104aee:	2300      	movs	r3, #0
 8104af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104af2:	e11e      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104af8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8104afc:	430b      	orrs	r3, r1
 8104afe:	d133      	bne.n	8104b68 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8104b00:	4b5f      	ldr	r3, [pc, #380]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104b08:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b0c:	2b00      	cmp	r3, #0
 8104b0e:	d004      	beq.n	8104b1a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8104b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104b16:	d012      	beq.n	8104b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8104b18:	e023      	b.n	8104b62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104b1a:	4b59      	ldr	r3, [pc, #356]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104b26:	d107      	bne.n	8104b38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104b2c:	4618      	mov	r0, r3
 8104b2e:	f000 fbc7 	bl	81052c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b36:	e0fc      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b38:	2300      	movs	r3, #0
 8104b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b3c:	e0f9      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104b3e:	4b50      	ldr	r3, [pc, #320]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104b40:	681b      	ldr	r3, [r3, #0]
 8104b42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104b4a:	d107      	bne.n	8104b5c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104b4c:	f107 0318 	add.w	r3, r7, #24
 8104b50:	4618      	mov	r0, r3
 8104b52:	f000 f90d 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8104b56:	6a3b      	ldr	r3, [r7, #32]
 8104b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b5a:	e0ea      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b5c:	2300      	movs	r3, #0
 8104b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b60:	e0e7      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104b62:	2300      	movs	r3, #0
 8104b64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b66:	e0e4      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104b6c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8104b70:	430b      	orrs	r3, r1
 8104b72:	f040 808d 	bne.w	8104c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8104b76:	4b42      	ldr	r3, [pc, #264]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104b7a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8104b7e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104b86:	d06b      	beq.n	8104c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8104b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104b8e:	d874      	bhi.n	8104c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104b96:	d056      	beq.n	8104c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8104b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104b9e:	d86c      	bhi.n	8104c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ba2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104ba6:	d03b      	beq.n	8104c20 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8104ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104baa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104bae:	d864      	bhi.n	8104c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104bb6:	d021      	beq.n	8104bfc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8104bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104bbe:	d85c      	bhi.n	8104c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bc2:	2b00      	cmp	r3, #0
 8104bc4:	d004      	beq.n	8104bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8104bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104bcc:	d004      	beq.n	8104bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8104bce:	e054      	b.n	8104c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8104bd0:	f000 f8b8 	bl	8104d44 <HAL_RCCEx_GetD3PCLK1Freq>
 8104bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104bd6:	e0ac      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104bd8:	4b29      	ldr	r3, [pc, #164]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104bda:	681b      	ldr	r3, [r3, #0]
 8104bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104be4:	d107      	bne.n	8104bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104be6:	f107 0318 	add.w	r3, r7, #24
 8104bea:	4618      	mov	r0, r3
 8104bec:	f000 f8c0 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104bf0:	69fb      	ldr	r3, [r7, #28]
 8104bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104bf4:	e09d      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104bf6:	2300      	movs	r3, #0
 8104bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104bfa:	e09a      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104bfc:	4b20      	ldr	r3, [pc, #128]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104bfe:	681b      	ldr	r3, [r3, #0]
 8104c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104c08:	d107      	bne.n	8104c1a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104c0a:	f107 030c 	add.w	r3, r7, #12
 8104c0e:	4618      	mov	r0, r3
 8104c10:	f000 fa02 	bl	8105018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104c14:	693b      	ldr	r3, [r7, #16]
 8104c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c18:	e08b      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c1a:	2300      	movs	r3, #0
 8104c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c1e:	e088      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104c20:	4b17      	ldr	r3, [pc, #92]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	f003 0304 	and.w	r3, r3, #4
 8104c28:	2b04      	cmp	r3, #4
 8104c2a:	d109      	bne.n	8104c40 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104c2c:	4b14      	ldr	r3, [pc, #80]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	08db      	lsrs	r3, r3, #3
 8104c32:	f003 0303 	and.w	r3, r3, #3
 8104c36:	4a13      	ldr	r2, [pc, #76]	; (8104c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104c38:	fa22 f303 	lsr.w	r3, r2, r3
 8104c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c3e:	e078      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c40:	2300      	movs	r3, #0
 8104c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c44:	e075      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104c46:	4b0e      	ldr	r3, [pc, #56]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c48:	681b      	ldr	r3, [r3, #0]
 8104c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c52:	d102      	bne.n	8104c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8104c54:	4b0c      	ldr	r3, [pc, #48]	; (8104c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c58:	e06b      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c5a:	2300      	movs	r3, #0
 8104c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c5e:	e068      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104c60:	4b07      	ldr	r3, [pc, #28]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104c6c:	d102      	bne.n	8104c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8104c6e:	4b07      	ldr	r3, [pc, #28]	; (8104c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c72:	e05e      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c74:	2300      	movs	r3, #0
 8104c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c78:	e05b      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8104c7a:	2300      	movs	r3, #0
 8104c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c7e:	e058      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104c80:	58024400 	.word	0x58024400
 8104c84:	03d09000 	.word	0x03d09000
 8104c88:	003d0900 	.word	0x003d0900
 8104c8c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8104c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104c94:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8104c98:	430b      	orrs	r3, r1
 8104c9a:	d148      	bne.n	8104d2e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8104c9c:	4b27      	ldr	r3, [pc, #156]	; (8104d3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104ca4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104cac:	d02a      	beq.n	8104d04 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8104cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104cb4:	d838      	bhi.n	8104d28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8104cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104cb8:	2b00      	cmp	r3, #0
 8104cba:	d004      	beq.n	8104cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8104cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104cc2:	d00d      	beq.n	8104ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8104cc4:	e030      	b.n	8104d28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104cc6:	4b1d      	ldr	r3, [pc, #116]	; (8104d3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104cc8:	681b      	ldr	r3, [r3, #0]
 8104cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104cd2:	d102      	bne.n	8104cda <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8104cd4:	4b1a      	ldr	r3, [pc, #104]	; (8104d40 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8104cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104cd8:	e02b      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104cda:	2300      	movs	r3, #0
 8104cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104cde:	e028      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104ce0:	4b16      	ldr	r3, [pc, #88]	; (8104d3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104ce2:	681b      	ldr	r3, [r3, #0]
 8104ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104cec:	d107      	bne.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104cf2:	4618      	mov	r0, r3
 8104cf4:	f000 fae4 	bl	81052c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104cfc:	e019      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104cfe:	2300      	movs	r3, #0
 8104d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104d02:	e016      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104d04:	4b0d      	ldr	r3, [pc, #52]	; (8104d3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104d06:	681b      	ldr	r3, [r3, #0]
 8104d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104d10:	d107      	bne.n	8104d22 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104d12:	f107 0318 	add.w	r3, r7, #24
 8104d16:	4618      	mov	r0, r3
 8104d18:	f000 f82a 	bl	8104d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104d1c:	69fb      	ldr	r3, [r7, #28]
 8104d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d20:	e007      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d22:	2300      	movs	r3, #0
 8104d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104d26:	e004      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104d28:	2300      	movs	r3, #0
 8104d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104d2c:	e001      	b.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8104d2e:	2300      	movs	r3, #0
 8104d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8104d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8104d34:	4618      	mov	r0, r3
 8104d36:	3740      	adds	r7, #64	; 0x40
 8104d38:	46bd      	mov	sp, r7
 8104d3a:	bd80      	pop	{r7, pc}
 8104d3c:	58024400 	.word	0x58024400
 8104d40:	017d7840 	.word	0x017d7840

08104d44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104d44:	b580      	push	{r7, lr}
 8104d46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104d48:	f7fd ffea 	bl	8102d20 <HAL_RCC_GetHCLKFreq>
 8104d4c:	4602      	mov	r2, r0
 8104d4e:	4b06      	ldr	r3, [pc, #24]	; (8104d68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104d50:	6a1b      	ldr	r3, [r3, #32]
 8104d52:	091b      	lsrs	r3, r3, #4
 8104d54:	f003 0307 	and.w	r3, r3, #7
 8104d58:	4904      	ldr	r1, [pc, #16]	; (8104d6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104d5a:	5ccb      	ldrb	r3, [r1, r3]
 8104d5c:	f003 031f 	and.w	r3, r3, #31
 8104d60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104d64:	4618      	mov	r0, r3
 8104d66:	bd80      	pop	{r7, pc}
 8104d68:	58024400 	.word	0x58024400
 8104d6c:	08106b48 	.word	0x08106b48

08104d70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104d70:	b480      	push	{r7}
 8104d72:	b089      	sub	sp, #36	; 0x24
 8104d74:	af00      	add	r7, sp, #0
 8104d76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104d78:	4ba1      	ldr	r3, [pc, #644]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d7c:	f003 0303 	and.w	r3, r3, #3
 8104d80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8104d82:	4b9f      	ldr	r3, [pc, #636]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d86:	0b1b      	lsrs	r3, r3, #12
 8104d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104d8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104d8e:	4b9c      	ldr	r3, [pc, #624]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d92:	091b      	lsrs	r3, r3, #4
 8104d94:	f003 0301 	and.w	r3, r3, #1
 8104d98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8104d9a:	4b99      	ldr	r3, [pc, #612]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104d9e:	08db      	lsrs	r3, r3, #3
 8104da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104da4:	693a      	ldr	r2, [r7, #16]
 8104da6:	fb02 f303 	mul.w	r3, r2, r3
 8104daa:	ee07 3a90 	vmov	s15, r3
 8104dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104db2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104db6:	697b      	ldr	r3, [r7, #20]
 8104db8:	2b00      	cmp	r3, #0
 8104dba:	f000 8111 	beq.w	8104fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104dbe:	69bb      	ldr	r3, [r7, #24]
 8104dc0:	2b02      	cmp	r3, #2
 8104dc2:	f000 8083 	beq.w	8104ecc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104dc6:	69bb      	ldr	r3, [r7, #24]
 8104dc8:	2b02      	cmp	r3, #2
 8104dca:	f200 80a1 	bhi.w	8104f10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104dce:	69bb      	ldr	r3, [r7, #24]
 8104dd0:	2b00      	cmp	r3, #0
 8104dd2:	d003      	beq.n	8104ddc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104dd4:	69bb      	ldr	r3, [r7, #24]
 8104dd6:	2b01      	cmp	r3, #1
 8104dd8:	d056      	beq.n	8104e88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104dda:	e099      	b.n	8104f10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ddc:	4b88      	ldr	r3, [pc, #544]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104dde:	681b      	ldr	r3, [r3, #0]
 8104de0:	f003 0320 	and.w	r3, r3, #32
 8104de4:	2b00      	cmp	r3, #0
 8104de6:	d02d      	beq.n	8104e44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104de8:	4b85      	ldr	r3, [pc, #532]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	08db      	lsrs	r3, r3, #3
 8104dee:	f003 0303 	and.w	r3, r3, #3
 8104df2:	4a84      	ldr	r2, [pc, #528]	; (8105004 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104df4:	fa22 f303 	lsr.w	r3, r2, r3
 8104df8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104dfa:	68bb      	ldr	r3, [r7, #8]
 8104dfc:	ee07 3a90 	vmov	s15, r3
 8104e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e04:	697b      	ldr	r3, [r7, #20]
 8104e06:	ee07 3a90 	vmov	s15, r3
 8104e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e12:	4b7b      	ldr	r3, [pc, #492]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e1a:	ee07 3a90 	vmov	s15, r3
 8104e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104e42:	e087      	b.n	8104f54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104e44:	697b      	ldr	r3, [r7, #20]
 8104e46:	ee07 3a90 	vmov	s15, r3
 8104e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810500c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e56:	4b6a      	ldr	r3, [pc, #424]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e5e:	ee07 3a90 	vmov	s15, r3
 8104e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e86:	e065      	b.n	8104f54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104e88:	697b      	ldr	r3, [r7, #20]
 8104e8a:	ee07 3a90 	vmov	s15, r3
 8104e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e9a:	4b59      	ldr	r3, [pc, #356]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ea2:	ee07 3a90 	vmov	s15, r3
 8104ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8104eae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104eca:	e043      	b.n	8104f54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104ecc:	697b      	ldr	r3, [r7, #20]
 8104ece:	ee07 3a90 	vmov	s15, r3
 8104ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ed6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105014 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ede:	4b48      	ldr	r3, [pc, #288]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ee6:	ee07 3a90 	vmov	s15, r3
 8104eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ef2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104f0e:	e021      	b.n	8104f54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104f10:	697b      	ldr	r3, [r7, #20]
 8104f12:	ee07 3a90 	vmov	s15, r3
 8104f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f22:	4b37      	ldr	r3, [pc, #220]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f2a:	ee07 3a90 	vmov	s15, r3
 8104f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8104f36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104f52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8104f54:	4b2a      	ldr	r3, [pc, #168]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104f58:	0a5b      	lsrs	r3, r3, #9
 8104f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104f5e:	ee07 3a90 	vmov	s15, r3
 8104f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f7a:	ee17 2a90 	vmov	r2, s15
 8104f7e:	687b      	ldr	r3, [r7, #4]
 8104f80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8104f82:	4b1f      	ldr	r3, [pc, #124]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104f86:	0c1b      	lsrs	r3, r3, #16
 8104f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104f8c:	ee07 3a90 	vmov	s15, r3
 8104f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104fa8:	ee17 2a90 	vmov	r2, s15
 8104fac:	687b      	ldr	r3, [r7, #4]
 8104fae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8104fb0:	4b13      	ldr	r3, [pc, #76]	; (8105000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104fb4:	0e1b      	lsrs	r3, r3, #24
 8104fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104fba:	ee07 3a90 	vmov	s15, r3
 8104fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8104fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104fd6:	ee17 2a90 	vmov	r2, s15
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104fde:	e008      	b.n	8104ff2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	2200      	movs	r2, #0
 8104fe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	2200      	movs	r2, #0
 8104fea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104fec:	687b      	ldr	r3, [r7, #4]
 8104fee:	2200      	movs	r2, #0
 8104ff0:	609a      	str	r2, [r3, #8]
}
 8104ff2:	bf00      	nop
 8104ff4:	3724      	adds	r7, #36	; 0x24
 8104ff6:	46bd      	mov	sp, r7
 8104ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ffc:	4770      	bx	lr
 8104ffe:	bf00      	nop
 8105000:	58024400 	.word	0x58024400
 8105004:	03d09000 	.word	0x03d09000
 8105008:	46000000 	.word	0x46000000
 810500c:	4c742400 	.word	0x4c742400
 8105010:	4a742400 	.word	0x4a742400
 8105014:	4bbebc20 	.word	0x4bbebc20

08105018 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105018:	b480      	push	{r7}
 810501a:	b089      	sub	sp, #36	; 0x24
 810501c:	af00      	add	r7, sp, #0
 810501e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105020:	4ba1      	ldr	r3, [pc, #644]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105024:	f003 0303 	and.w	r3, r3, #3
 8105028:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810502a:	4b9f      	ldr	r3, [pc, #636]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810502e:	0d1b      	lsrs	r3, r3, #20
 8105030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105034:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105036:	4b9c      	ldr	r3, [pc, #624]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810503a:	0a1b      	lsrs	r3, r3, #8
 810503c:	f003 0301 	and.w	r3, r3, #1
 8105040:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105042:	4b99      	ldr	r3, [pc, #612]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105046:	08db      	lsrs	r3, r3, #3
 8105048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810504c:	693a      	ldr	r2, [r7, #16]
 810504e:	fb02 f303 	mul.w	r3, r2, r3
 8105052:	ee07 3a90 	vmov	s15, r3
 8105056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810505a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810505e:	697b      	ldr	r3, [r7, #20]
 8105060:	2b00      	cmp	r3, #0
 8105062:	f000 8111 	beq.w	8105288 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105066:	69bb      	ldr	r3, [r7, #24]
 8105068:	2b02      	cmp	r3, #2
 810506a:	f000 8083 	beq.w	8105174 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810506e:	69bb      	ldr	r3, [r7, #24]
 8105070:	2b02      	cmp	r3, #2
 8105072:	f200 80a1 	bhi.w	81051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105076:	69bb      	ldr	r3, [r7, #24]
 8105078:	2b00      	cmp	r3, #0
 810507a:	d003      	beq.n	8105084 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810507c:	69bb      	ldr	r3, [r7, #24]
 810507e:	2b01      	cmp	r3, #1
 8105080:	d056      	beq.n	8105130 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105082:	e099      	b.n	81051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105084:	4b88      	ldr	r3, [pc, #544]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	f003 0320 	and.w	r3, r3, #32
 810508c:	2b00      	cmp	r3, #0
 810508e:	d02d      	beq.n	81050ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105090:	4b85      	ldr	r3, [pc, #532]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	08db      	lsrs	r3, r3, #3
 8105096:	f003 0303 	and.w	r3, r3, #3
 810509a:	4a84      	ldr	r2, [pc, #528]	; (81052ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810509c:	fa22 f303 	lsr.w	r3, r2, r3
 81050a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81050a2:	68bb      	ldr	r3, [r7, #8]
 81050a4:	ee07 3a90 	vmov	s15, r3
 81050a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050ac:	697b      	ldr	r3, [r7, #20]
 81050ae:	ee07 3a90 	vmov	s15, r3
 81050b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050ba:	4b7b      	ldr	r3, [pc, #492]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81050be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050c2:	ee07 3a90 	vmov	s15, r3
 81050c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81050ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 81052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81050d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81050de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81050ea:	e087      	b.n	81051fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81050ec:	697b      	ldr	r3, [r7, #20]
 81050ee:	ee07 3a90 	vmov	s15, r3
 81050f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81050fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050fe:	4b6a      	ldr	r3, [pc, #424]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105106:	ee07 3a90 	vmov	s15, r3
 810510a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810510e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105112:	eddf 5a67 	vldr	s11, [pc, #412]	; 81052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810511a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810511e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105126:	ee67 7a27 	vmul.f32	s15, s14, s15
 810512a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810512e:	e065      	b.n	81051fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105130:	697b      	ldr	r3, [r7, #20]
 8105132:	ee07 3a90 	vmov	s15, r3
 8105136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810513a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810513e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105142:	4b59      	ldr	r3, [pc, #356]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810514a:	ee07 3a90 	vmov	s15, r3
 810514e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105152:	ed97 6a03 	vldr	s12, [r7, #12]
 8105156:	eddf 5a56 	vldr	s11, [pc, #344]	; 81052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810515a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810515e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810516a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810516e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105172:	e043      	b.n	81051fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105174:	697b      	ldr	r3, [r7, #20]
 8105176:	ee07 3a90 	vmov	s15, r3
 810517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810517e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81052bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105186:	4b48      	ldr	r3, [pc, #288]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810518a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810518e:	ee07 3a90 	vmov	s15, r3
 8105192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105196:	ed97 6a03 	vldr	s12, [r7, #12]
 810519a:	eddf 5a45 	vldr	s11, [pc, #276]	; 81052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810519e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81051aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81051b6:	e021      	b.n	81051fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81051b8:	697b      	ldr	r3, [r7, #20]
 81051ba:	ee07 3a90 	vmov	s15, r3
 81051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81051c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81051ca:	4b37      	ldr	r3, [pc, #220]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81051ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81051d2:	ee07 3a90 	vmov	s15, r3
 81051d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051da:	ed97 6a03 	vldr	s12, [r7, #12]
 81051de:	eddf 5a34 	vldr	s11, [pc, #208]	; 81052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81051e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81051ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81051fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81051fc:	4b2a      	ldr	r3, [pc, #168]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105200:	0a5b      	lsrs	r3, r3, #9
 8105202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105206:	ee07 3a90 	vmov	s15, r3
 810520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810520e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105216:	edd7 6a07 	vldr	s13, [r7, #28]
 810521a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810521e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105222:	ee17 2a90 	vmov	r2, s15
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810522a:	4b1f      	ldr	r3, [pc, #124]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810522e:	0c1b      	lsrs	r3, r3, #16
 8105230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105234:	ee07 3a90 	vmov	s15, r3
 8105238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810523c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105244:	edd7 6a07 	vldr	s13, [r7, #28]
 8105248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810524c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105250:	ee17 2a90 	vmov	r2, s15
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105258:	4b13      	ldr	r3, [pc, #76]	; (81052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810525c:	0e1b      	lsrs	r3, r3, #24
 810525e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105262:	ee07 3a90 	vmov	s15, r3
 8105266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810526a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810526e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105272:	edd7 6a07 	vldr	s13, [r7, #28]
 8105276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810527a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810527e:	ee17 2a90 	vmov	r2, s15
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105286:	e008      	b.n	810529a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	2200      	movs	r2, #0
 810528c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	2200      	movs	r2, #0
 8105292:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	2200      	movs	r2, #0
 8105298:	609a      	str	r2, [r3, #8]
}
 810529a:	bf00      	nop
 810529c:	3724      	adds	r7, #36	; 0x24
 810529e:	46bd      	mov	sp, r7
 81052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052a4:	4770      	bx	lr
 81052a6:	bf00      	nop
 81052a8:	58024400 	.word	0x58024400
 81052ac:	03d09000 	.word	0x03d09000
 81052b0:	46000000 	.word	0x46000000
 81052b4:	4c742400 	.word	0x4c742400
 81052b8:	4a742400 	.word	0x4a742400
 81052bc:	4bbebc20 	.word	0x4bbebc20

081052c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 81052c0:	b480      	push	{r7}
 81052c2:	b089      	sub	sp, #36	; 0x24
 81052c4:	af00      	add	r7, sp, #0
 81052c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81052c8:	4ba0      	ldr	r3, [pc, #640]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052cc:	f003 0303 	and.w	r3, r3, #3
 81052d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81052d2:	4b9e      	ldr	r3, [pc, #632]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052d6:	091b      	lsrs	r3, r3, #4
 81052d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81052dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81052de:	4b9b      	ldr	r3, [pc, #620]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052e2:	f003 0301 	and.w	r3, r3, #1
 81052e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81052e8:	4b98      	ldr	r3, [pc, #608]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81052ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81052ec:	08db      	lsrs	r3, r3, #3
 81052ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81052f2:	693a      	ldr	r2, [r7, #16]
 81052f4:	fb02 f303 	mul.w	r3, r2, r3
 81052f8:	ee07 3a90 	vmov	s15, r3
 81052fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105300:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105304:	697b      	ldr	r3, [r7, #20]
 8105306:	2b00      	cmp	r3, #0
 8105308:	f000 8111 	beq.w	810552e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810530c:	69bb      	ldr	r3, [r7, #24]
 810530e:	2b02      	cmp	r3, #2
 8105310:	f000 8083 	beq.w	810541a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105314:	69bb      	ldr	r3, [r7, #24]
 8105316:	2b02      	cmp	r3, #2
 8105318:	f200 80a1 	bhi.w	810545e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810531c:	69bb      	ldr	r3, [r7, #24]
 810531e:	2b00      	cmp	r3, #0
 8105320:	d003      	beq.n	810532a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105322:	69bb      	ldr	r3, [r7, #24]
 8105324:	2b01      	cmp	r3, #1
 8105326:	d056      	beq.n	81053d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105328:	e099      	b.n	810545e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810532a:	4b88      	ldr	r3, [pc, #544]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810532c:	681b      	ldr	r3, [r3, #0]
 810532e:	f003 0320 	and.w	r3, r3, #32
 8105332:	2b00      	cmp	r3, #0
 8105334:	d02d      	beq.n	8105392 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105336:	4b85      	ldr	r3, [pc, #532]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105338:	681b      	ldr	r3, [r3, #0]
 810533a:	08db      	lsrs	r3, r3, #3
 810533c:	f003 0303 	and.w	r3, r3, #3
 8105340:	4a83      	ldr	r2, [pc, #524]	; (8105550 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105342:	fa22 f303 	lsr.w	r3, r2, r3
 8105346:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105348:	68bb      	ldr	r3, [r7, #8]
 810534a:	ee07 3a90 	vmov	s15, r3
 810534e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105352:	697b      	ldr	r3, [r7, #20]
 8105354:	ee07 3a90 	vmov	s15, r3
 8105358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810535c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105360:	4b7a      	ldr	r3, [pc, #488]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105368:	ee07 3a90 	vmov	s15, r3
 810536c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105370:	ed97 6a03 	vldr	s12, [r7, #12]
 8105374:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810537c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105388:	ee67 7a27 	vmul.f32	s15, s14, s15
 810538c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105390:	e087      	b.n	81054a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105392:	697b      	ldr	r3, [r7, #20]
 8105394:	ee07 3a90 	vmov	s15, r3
 8105398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810539c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105558 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81053a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053a4:	4b69      	ldr	r3, [pc, #420]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81053a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053ac:	ee07 3a90 	vmov	s15, r3
 81053b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053b4:	ed97 6a03 	vldr	s12, [r7, #12]
 81053b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81053bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81053c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81053c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81053d4:	e065      	b.n	81054a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81053d6:	697b      	ldr	r3, [r7, #20]
 81053d8:	ee07 3a90 	vmov	s15, r3
 81053dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810555c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81053e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053e8:	4b58      	ldr	r3, [pc, #352]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81053ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053f0:	ee07 3a90 	vmov	s15, r3
 81053f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053f8:	ed97 6a03 	vldr	s12, [r7, #12]
 81053fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810540c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105414:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105418:	e043      	b.n	81054a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810541a:	697b      	ldr	r3, [r7, #20]
 810541c:	ee07 3a90 	vmov	s15, r3
 8105420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105424:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8105560 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810542c:	4b47      	ldr	r3, [pc, #284]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105434:	ee07 3a90 	vmov	s15, r3
 8105438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810543c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105440:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810544c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105458:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810545c:	e021      	b.n	81054a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810545e:	697b      	ldr	r3, [r7, #20]
 8105460:	ee07 3a90 	vmov	s15, r3
 8105464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105468:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8105558 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810546c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105470:	4b36      	ldr	r3, [pc, #216]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105478:	ee07 3a90 	vmov	s15, r3
 810547c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105480:	ed97 6a03 	vldr	s12, [r7, #12]
 8105484:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810548c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105498:	ee67 7a27 	vmul.f32	s15, s14, s15
 810549c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81054a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81054a2:	4b2a      	ldr	r3, [pc, #168]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81054a6:	0a5b      	lsrs	r3, r3, #9
 81054a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81054ac:	ee07 3a90 	vmov	s15, r3
 81054b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81054b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81054bc:	edd7 6a07 	vldr	s13, [r7, #28]
 81054c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81054c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054c8:	ee17 2a90 	vmov	r2, s15
 81054cc:	687b      	ldr	r3, [r7, #4]
 81054ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81054d0:	4b1e      	ldr	r3, [pc, #120]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81054d4:	0c1b      	lsrs	r3, r3, #16
 81054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81054da:	ee07 3a90 	vmov	s15, r3
 81054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81054e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81054ea:	edd7 6a07 	vldr	s13, [r7, #28]
 81054ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81054f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054f6:	ee17 2a90 	vmov	r2, s15
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81054fe:	4b13      	ldr	r3, [pc, #76]	; (810554c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105502:	0e1b      	lsrs	r3, r3, #24
 8105504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105508:	ee07 3a90 	vmov	s15, r3
 810550c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105514:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105518:	edd7 6a07 	vldr	s13, [r7, #28]
 810551c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105524:	ee17 2a90 	vmov	r2, s15
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810552c:	e008      	b.n	8105540 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	2200      	movs	r2, #0
 8105532:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	2200      	movs	r2, #0
 8105538:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810553a:	687b      	ldr	r3, [r7, #4]
 810553c:	2200      	movs	r2, #0
 810553e:	609a      	str	r2, [r3, #8]
}
 8105540:	bf00      	nop
 8105542:	3724      	adds	r7, #36	; 0x24
 8105544:	46bd      	mov	sp, r7
 8105546:	f85d 7b04 	ldr.w	r7, [sp], #4
 810554a:	4770      	bx	lr
 810554c:	58024400 	.word	0x58024400
 8105550:	03d09000 	.word	0x03d09000
 8105554:	46000000 	.word	0x46000000
 8105558:	4c742400 	.word	0x4c742400
 810555c:	4a742400 	.word	0x4a742400
 8105560:	4bbebc20 	.word	0x4bbebc20

08105564 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105564:	b580      	push	{r7, lr}
 8105566:	b084      	sub	sp, #16
 8105568:	af00      	add	r7, sp, #0
 810556a:	6078      	str	r0, [r7, #4]
 810556c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810556e:	2300      	movs	r3, #0
 8105570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105572:	4b54      	ldr	r3, [pc, #336]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105576:	f003 0303 	and.w	r3, r3, #3
 810557a:	2b03      	cmp	r3, #3
 810557c:	d101      	bne.n	8105582 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810557e:	2301      	movs	r3, #1
 8105580:	e09b      	b.n	81056ba <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105582:	4b50      	ldr	r3, [pc, #320]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105584:	681b      	ldr	r3, [r3, #0]
 8105586:	4a4f      	ldr	r2, [pc, #316]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105588:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810558c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810558e:	f7fb ff81 	bl	8101494 <HAL_GetTick>
 8105592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105594:	e008      	b.n	81055a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105596:	f7fb ff7d 	bl	8101494 <HAL_GetTick>
 810559a:	4602      	mov	r2, r0
 810559c:	68bb      	ldr	r3, [r7, #8]
 810559e:	1ad3      	subs	r3, r2, r3
 81055a0:	2b02      	cmp	r3, #2
 81055a2:	d901      	bls.n	81055a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81055a4:	2303      	movs	r3, #3
 81055a6:	e088      	b.n	81056ba <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81055a8:	4b46      	ldr	r3, [pc, #280]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 81055aa:	681b      	ldr	r3, [r3, #0]
 81055ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81055b0:	2b00      	cmp	r3, #0
 81055b2:	d1f0      	bne.n	8105596 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81055b4:	4b43      	ldr	r3, [pc, #268]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 81055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	681b      	ldr	r3, [r3, #0]
 81055c0:	031b      	lsls	r3, r3, #12
 81055c2:	4940      	ldr	r1, [pc, #256]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 81055c4:	4313      	orrs	r3, r2
 81055c6:	628b      	str	r3, [r1, #40]	; 0x28
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	685b      	ldr	r3, [r3, #4]
 81055cc:	3b01      	subs	r3, #1
 81055ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	689b      	ldr	r3, [r3, #8]
 81055d6:	3b01      	subs	r3, #1
 81055d8:	025b      	lsls	r3, r3, #9
 81055da:	b29b      	uxth	r3, r3
 81055dc:	431a      	orrs	r2, r3
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	68db      	ldr	r3, [r3, #12]
 81055e2:	3b01      	subs	r3, #1
 81055e4:	041b      	lsls	r3, r3, #16
 81055e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81055ea:	431a      	orrs	r2, r3
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	691b      	ldr	r3, [r3, #16]
 81055f0:	3b01      	subs	r3, #1
 81055f2:	061b      	lsls	r3, r3, #24
 81055f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81055f8:	4932      	ldr	r1, [pc, #200]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 81055fa:	4313      	orrs	r3, r2
 81055fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81055fe:	4b31      	ldr	r3, [pc, #196]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	695b      	ldr	r3, [r3, #20]
 810560a:	492e      	ldr	r1, [pc, #184]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 810560c:	4313      	orrs	r3, r2
 810560e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105610:	4b2c      	ldr	r3, [pc, #176]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105614:	f023 0220 	bic.w	r2, r3, #32
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	699b      	ldr	r3, [r3, #24]
 810561c:	4929      	ldr	r1, [pc, #164]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 810561e:	4313      	orrs	r3, r2
 8105620:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105622:	4b28      	ldr	r3, [pc, #160]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105626:	4a27      	ldr	r2, [pc, #156]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105628:	f023 0310 	bic.w	r3, r3, #16
 810562c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810562e:	4b25      	ldr	r3, [pc, #148]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105636:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810563a:	687a      	ldr	r2, [r7, #4]
 810563c:	69d2      	ldr	r2, [r2, #28]
 810563e:	00d2      	lsls	r2, r2, #3
 8105640:	4920      	ldr	r1, [pc, #128]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105642:	4313      	orrs	r3, r2
 8105644:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105646:	4b1f      	ldr	r3, [pc, #124]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810564a:	4a1e      	ldr	r2, [pc, #120]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 810564c:	f043 0310 	orr.w	r3, r3, #16
 8105650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105652:	683b      	ldr	r3, [r7, #0]
 8105654:	2b00      	cmp	r3, #0
 8105656:	d106      	bne.n	8105666 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105658:	4b1a      	ldr	r3, [pc, #104]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 810565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810565c:	4a19      	ldr	r2, [pc, #100]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 810565e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105662:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105664:	e00f      	b.n	8105686 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105666:	683b      	ldr	r3, [r7, #0]
 8105668:	2b01      	cmp	r3, #1
 810566a:	d106      	bne.n	810567a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810566c:	4b15      	ldr	r3, [pc, #84]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 810566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105670:	4a14      	ldr	r2, [pc, #80]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105676:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105678:	e005      	b.n	8105686 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810567a:	4b12      	ldr	r3, [pc, #72]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 810567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810567e:	4a11      	ldr	r2, [pc, #68]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105686:	4b0f      	ldr	r3, [pc, #60]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 8105688:	681b      	ldr	r3, [r3, #0]
 810568a:	4a0e      	ldr	r2, [pc, #56]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 810568c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105692:	f7fb feff 	bl	8101494 <HAL_GetTick>
 8105696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105698:	e008      	b.n	81056ac <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810569a:	f7fb fefb 	bl	8101494 <HAL_GetTick>
 810569e:	4602      	mov	r2, r0
 81056a0:	68bb      	ldr	r3, [r7, #8]
 81056a2:	1ad3      	subs	r3, r2, r3
 81056a4:	2b02      	cmp	r3, #2
 81056a6:	d901      	bls.n	81056ac <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81056a8:	2303      	movs	r3, #3
 81056aa:	e006      	b.n	81056ba <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81056ac:	4b05      	ldr	r3, [pc, #20]	; (81056c4 <RCCEx_PLL2_Config+0x160>)
 81056ae:	681b      	ldr	r3, [r3, #0]
 81056b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81056b4:	2b00      	cmp	r3, #0
 81056b6:	d0f0      	beq.n	810569a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 81056ba:	4618      	mov	r0, r3
 81056bc:	3710      	adds	r7, #16
 81056be:	46bd      	mov	sp, r7
 81056c0:	bd80      	pop	{r7, pc}
 81056c2:	bf00      	nop
 81056c4:	58024400 	.word	0x58024400

081056c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81056c8:	b580      	push	{r7, lr}
 81056ca:	b084      	sub	sp, #16
 81056cc:	af00      	add	r7, sp, #0
 81056ce:	6078      	str	r0, [r7, #4]
 81056d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81056d2:	2300      	movs	r3, #0
 81056d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81056d6:	4b54      	ldr	r3, [pc, #336]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056da:	f003 0303 	and.w	r3, r3, #3
 81056de:	2b03      	cmp	r3, #3
 81056e0:	d101      	bne.n	81056e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81056e2:	2301      	movs	r3, #1
 81056e4:	e09b      	b.n	810581e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81056e6:	4b50      	ldr	r3, [pc, #320]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	4a4f      	ldr	r2, [pc, #316]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81056ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81056f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81056f2:	f7fb fecf 	bl	8101494 <HAL_GetTick>
 81056f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81056f8:	e008      	b.n	810570c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81056fa:	f7fb fecb 	bl	8101494 <HAL_GetTick>
 81056fe:	4602      	mov	r2, r0
 8105700:	68bb      	ldr	r3, [r7, #8]
 8105702:	1ad3      	subs	r3, r2, r3
 8105704:	2b02      	cmp	r3, #2
 8105706:	d901      	bls.n	810570c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105708:	2303      	movs	r3, #3
 810570a:	e088      	b.n	810581e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810570c:	4b46      	ldr	r3, [pc, #280]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105714:	2b00      	cmp	r3, #0
 8105716:	d1f0      	bne.n	81056fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105718:	4b43      	ldr	r3, [pc, #268]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 810571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810571c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105720:	687b      	ldr	r3, [r7, #4]
 8105722:	681b      	ldr	r3, [r3, #0]
 8105724:	051b      	lsls	r3, r3, #20
 8105726:	4940      	ldr	r1, [pc, #256]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 8105728:	4313      	orrs	r3, r2
 810572a:	628b      	str	r3, [r1, #40]	; 0x28
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	685b      	ldr	r3, [r3, #4]
 8105730:	3b01      	subs	r3, #1
 8105732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	689b      	ldr	r3, [r3, #8]
 810573a:	3b01      	subs	r3, #1
 810573c:	025b      	lsls	r3, r3, #9
 810573e:	b29b      	uxth	r3, r3
 8105740:	431a      	orrs	r2, r3
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	68db      	ldr	r3, [r3, #12]
 8105746:	3b01      	subs	r3, #1
 8105748:	041b      	lsls	r3, r3, #16
 810574a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810574e:	431a      	orrs	r2, r3
 8105750:	687b      	ldr	r3, [r7, #4]
 8105752:	691b      	ldr	r3, [r3, #16]
 8105754:	3b01      	subs	r3, #1
 8105756:	061b      	lsls	r3, r3, #24
 8105758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810575c:	4932      	ldr	r1, [pc, #200]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 810575e:	4313      	orrs	r3, r2
 8105760:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105762:	4b31      	ldr	r3, [pc, #196]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 8105764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105766:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810576a:	687b      	ldr	r3, [r7, #4]
 810576c:	695b      	ldr	r3, [r3, #20]
 810576e:	492e      	ldr	r1, [pc, #184]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 8105770:	4313      	orrs	r3, r2
 8105772:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105774:	4b2c      	ldr	r3, [pc, #176]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 8105776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105778:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	699b      	ldr	r3, [r3, #24]
 8105780:	4929      	ldr	r1, [pc, #164]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 8105782:	4313      	orrs	r3, r2
 8105784:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105786:	4b28      	ldr	r3, [pc, #160]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 8105788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810578a:	4a27      	ldr	r2, [pc, #156]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 810578c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105792:	4b25      	ldr	r3, [pc, #148]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 8105794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810579a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810579e:	687a      	ldr	r2, [r7, #4]
 81057a0:	69d2      	ldr	r2, [r2, #28]
 81057a2:	00d2      	lsls	r2, r2, #3
 81057a4:	4920      	ldr	r1, [pc, #128]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057a6:	4313      	orrs	r3, r2
 81057a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81057aa:	4b1f      	ldr	r3, [pc, #124]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057ae:	4a1e      	ldr	r2, [pc, #120]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81057b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81057b6:	683b      	ldr	r3, [r7, #0]
 81057b8:	2b00      	cmp	r3, #0
 81057ba:	d106      	bne.n	81057ca <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81057bc:	4b1a      	ldr	r3, [pc, #104]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057c0:	4a19      	ldr	r2, [pc, #100]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81057c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81057c8:	e00f      	b.n	81057ea <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81057ca:	683b      	ldr	r3, [r7, #0]
 81057cc:	2b01      	cmp	r3, #1
 81057ce:	d106      	bne.n	81057de <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81057d0:	4b15      	ldr	r3, [pc, #84]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057d4:	4a14      	ldr	r2, [pc, #80]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81057da:	62d3      	str	r3, [r2, #44]	; 0x2c
 81057dc:	e005      	b.n	81057ea <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81057de:	4b12      	ldr	r3, [pc, #72]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057e2:	4a11      	ldr	r2, [pc, #68]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81057e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81057ea:	4b0f      	ldr	r3, [pc, #60]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	4a0e      	ldr	r2, [pc, #56]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 81057f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81057f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81057f6:	f7fb fe4d 	bl	8101494 <HAL_GetTick>
 81057fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81057fc:	e008      	b.n	8105810 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81057fe:	f7fb fe49 	bl	8101494 <HAL_GetTick>
 8105802:	4602      	mov	r2, r0
 8105804:	68bb      	ldr	r3, [r7, #8]
 8105806:	1ad3      	subs	r3, r2, r3
 8105808:	2b02      	cmp	r3, #2
 810580a:	d901      	bls.n	8105810 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810580c:	2303      	movs	r3, #3
 810580e:	e006      	b.n	810581e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105810:	4b05      	ldr	r3, [pc, #20]	; (8105828 <RCCEx_PLL3_Config+0x160>)
 8105812:	681b      	ldr	r3, [r3, #0]
 8105814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105818:	2b00      	cmp	r3, #0
 810581a:	d0f0      	beq.n	81057fe <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810581c:	7bfb      	ldrb	r3, [r7, #15]
}
 810581e:	4618      	mov	r0, r3
 8105820:	3710      	adds	r7, #16
 8105822:	46bd      	mov	sp, r7
 8105824:	bd80      	pop	{r7, pc}
 8105826:	bf00      	nop
 8105828:	58024400 	.word	0x58024400

0810582c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 810582c:	b580      	push	{r7, lr}
 810582e:	b084      	sub	sp, #16
 8105830:	af00      	add	r7, sp, #0
 8105832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105834:	2301      	movs	r3, #1
 8105836:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	2b00      	cmp	r3, #0
 810583c:	d073      	beq.n	8105926 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810583e:	687b      	ldr	r3, [r7, #4]
 8105840:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8105844:	b2db      	uxtb	r3, r3
 8105846:	2b00      	cmp	r3, #0
 8105848:	d106      	bne.n	8105858 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	2200      	movs	r2, #0
 810584e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8105852:	6878      	ldr	r0, [r7, #4]
 8105854:	f7fb f98a 	bl	8100b6c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	2202      	movs	r2, #2
 810585c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	68db      	ldr	r3, [r3, #12]
 8105866:	f003 0310 	and.w	r3, r3, #16
 810586a:	2b10      	cmp	r3, #16
 810586c:	d052      	beq.n	8105914 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	681b      	ldr	r3, [r3, #0]
 8105872:	22ca      	movs	r2, #202	; 0xca
 8105874:	625a      	str	r2, [r3, #36]	; 0x24
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	2253      	movs	r2, #83	; 0x53
 810587c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 810587e:	6878      	ldr	r0, [r7, #4]
 8105880:	f000 f87a 	bl	8105978 <RTC_EnterInitMode>
 8105884:	4603      	mov	r3, r0
 8105886:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8105888:	7bfb      	ldrb	r3, [r7, #15]
 810588a:	2b00      	cmp	r3, #0
 810588c:	d126      	bne.n	81058dc <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 810588e:	687b      	ldr	r3, [r7, #4]
 8105890:	681b      	ldr	r3, [r3, #0]
 8105892:	689b      	ldr	r3, [r3, #8]
 8105894:	687a      	ldr	r2, [r7, #4]
 8105896:	6812      	ldr	r2, [r2, #0]
 8105898:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810589c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81058a0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 81058a2:	687b      	ldr	r3, [r7, #4]
 81058a4:	681b      	ldr	r3, [r3, #0]
 81058a6:	6899      	ldr	r1, [r3, #8]
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	685a      	ldr	r2, [r3, #4]
 81058ac:	687b      	ldr	r3, [r7, #4]
 81058ae:	691b      	ldr	r3, [r3, #16]
 81058b0:	431a      	orrs	r2, r3
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	699b      	ldr	r3, [r3, #24]
 81058b6:	431a      	orrs	r2, r3
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	430a      	orrs	r2, r1
 81058be:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	689b      	ldr	r3, [r3, #8]
 81058c4:	0419      	lsls	r1, r3, #16
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	68da      	ldr	r2, [r3, #12]
 81058ca:	687b      	ldr	r3, [r7, #4]
 81058cc:	681b      	ldr	r3, [r3, #0]
 81058ce:	430a      	orrs	r2, r1
 81058d0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 81058d2:	6878      	ldr	r0, [r7, #4]
 81058d4:	f000 f884 	bl	81059e0 <RTC_ExitInitMode>
 81058d8:	4603      	mov	r3, r0
 81058da:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 81058dc:	7bfb      	ldrb	r3, [r7, #15]
 81058de:	2b00      	cmp	r3, #0
 81058e0:	d113      	bne.n	810590a <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 81058e2:	687b      	ldr	r3, [r7, #4]
 81058e4:	681b      	ldr	r3, [r3, #0]
 81058e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81058e8:	687b      	ldr	r3, [r7, #4]
 81058ea:	681b      	ldr	r3, [r3, #0]
 81058ec:	f022 0203 	bic.w	r2, r2, #3
 81058f0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 81058f2:	687b      	ldr	r3, [r7, #4]
 81058f4:	681b      	ldr	r3, [r3, #0]
 81058f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	69da      	ldr	r2, [r3, #28]
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	695b      	ldr	r3, [r3, #20]
 8105900:	431a      	orrs	r2, r3
 8105902:	687b      	ldr	r3, [r7, #4]
 8105904:	681b      	ldr	r3, [r3, #0]
 8105906:	430a      	orrs	r2, r1
 8105908:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810590a:	687b      	ldr	r3, [r7, #4]
 810590c:	681b      	ldr	r3, [r3, #0]
 810590e:	22ff      	movs	r2, #255	; 0xff
 8105910:	625a      	str	r2, [r3, #36]	; 0x24
 8105912:	e001      	b.n	8105918 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8105914:	2300      	movs	r3, #0
 8105916:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8105918:	7bfb      	ldrb	r3, [r7, #15]
 810591a:	2b00      	cmp	r3, #0
 810591c:	d103      	bne.n	8105926 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 810591e:	687b      	ldr	r3, [r7, #4]
 8105920:	2201      	movs	r2, #1
 8105922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8105926:	7bfb      	ldrb	r3, [r7, #15]
}
 8105928:	4618      	mov	r0, r3
 810592a:	3710      	adds	r7, #16
 810592c:	46bd      	mov	sp, r7
 810592e:	bd80      	pop	{r7, pc}

08105930 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105930:	b580      	push	{r7, lr}
 8105932:	b084      	sub	sp, #16
 8105934:	af00      	add	r7, sp, #0
 8105936:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	681b      	ldr	r3, [r3, #0]
 810593c:	4a0d      	ldr	r2, [pc, #52]	; (8105974 <HAL_RTC_WaitForSynchro+0x44>)
 810593e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8105940:	f7fb fda8 	bl	8101494 <HAL_GetTick>
 8105944:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105946:	e009      	b.n	810595c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8105948:	f7fb fda4 	bl	8101494 <HAL_GetTick>
 810594c:	4602      	mov	r2, r0
 810594e:	68fb      	ldr	r3, [r7, #12]
 8105950:	1ad3      	subs	r3, r2, r3
 8105952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105956:	d901      	bls.n	810595c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8105958:	2303      	movs	r3, #3
 810595a:	e007      	b.n	810596c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 810595c:	687b      	ldr	r3, [r7, #4]
 810595e:	681b      	ldr	r3, [r3, #0]
 8105960:	68db      	ldr	r3, [r3, #12]
 8105962:	f003 0320 	and.w	r3, r3, #32
 8105966:	2b00      	cmp	r3, #0
 8105968:	d0ee      	beq.n	8105948 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 810596a:	2300      	movs	r3, #0
}
 810596c:	4618      	mov	r0, r3
 810596e:	3710      	adds	r7, #16
 8105970:	46bd      	mov	sp, r7
 8105972:	bd80      	pop	{r7, pc}
 8105974:	0003ff5f 	.word	0x0003ff5f

08105978 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8105978:	b580      	push	{r7, lr}
 810597a:	b084      	sub	sp, #16
 810597c:	af00      	add	r7, sp, #0
 810597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105980:	2300      	movs	r3, #0
 8105982:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	681b      	ldr	r3, [r3, #0]
 8105988:	68db      	ldr	r3, [r3, #12]
 810598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810598e:	2b00      	cmp	r3, #0
 8105990:	d120      	bne.n	81059d4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	681b      	ldr	r3, [r3, #0]
 8105996:	f04f 32ff 	mov.w	r2, #4294967295
 810599a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 810599c:	f7fb fd7a 	bl	8101494 <HAL_GetTick>
 81059a0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81059a2:	e00d      	b.n	81059c0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 81059a4:	f7fb fd76 	bl	8101494 <HAL_GetTick>
 81059a8:	4602      	mov	r2, r0
 81059aa:	68bb      	ldr	r3, [r7, #8]
 81059ac:	1ad3      	subs	r3, r2, r3
 81059ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81059b2:	d905      	bls.n	81059c0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 81059b4:	2303      	movs	r3, #3
 81059b6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	2203      	movs	r2, #3
 81059bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81059c0:	687b      	ldr	r3, [r7, #4]
 81059c2:	681b      	ldr	r3, [r3, #0]
 81059c4:	68db      	ldr	r3, [r3, #12]
 81059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81059ca:	2b00      	cmp	r3, #0
 81059cc:	d102      	bne.n	81059d4 <RTC_EnterInitMode+0x5c>
 81059ce:	7bfb      	ldrb	r3, [r7, #15]
 81059d0:	2b03      	cmp	r3, #3
 81059d2:	d1e7      	bne.n	81059a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 81059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81059d6:	4618      	mov	r0, r3
 81059d8:	3710      	adds	r7, #16
 81059da:	46bd      	mov	sp, r7
 81059dc:	bd80      	pop	{r7, pc}
	...

081059e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 81059e0:	b580      	push	{r7, lr}
 81059e2:	b084      	sub	sp, #16
 81059e4:	af00      	add	r7, sp, #0
 81059e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81059e8:	2300      	movs	r3, #0
 81059ea:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 81059ec:	4b1a      	ldr	r3, [pc, #104]	; (8105a58 <RTC_ExitInitMode+0x78>)
 81059ee:	68db      	ldr	r3, [r3, #12]
 81059f0:	4a19      	ldr	r2, [pc, #100]	; (8105a58 <RTC_ExitInitMode+0x78>)
 81059f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81059f6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 81059f8:	4b17      	ldr	r3, [pc, #92]	; (8105a58 <RTC_ExitInitMode+0x78>)
 81059fa:	689b      	ldr	r3, [r3, #8]
 81059fc:	f003 0320 	and.w	r3, r3, #32
 8105a00:	2b00      	cmp	r3, #0
 8105a02:	d10c      	bne.n	8105a1e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105a04:	6878      	ldr	r0, [r7, #4]
 8105a06:	f7ff ff93 	bl	8105930 <HAL_RTC_WaitForSynchro>
 8105a0a:	4603      	mov	r3, r0
 8105a0c:	2b00      	cmp	r3, #0
 8105a0e:	d01e      	beq.n	8105a4e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	2203      	movs	r2, #3
 8105a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8105a18:	2303      	movs	r3, #3
 8105a1a:	73fb      	strb	r3, [r7, #15]
 8105a1c:	e017      	b.n	8105a4e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105a1e:	4b0e      	ldr	r3, [pc, #56]	; (8105a58 <RTC_ExitInitMode+0x78>)
 8105a20:	689b      	ldr	r3, [r3, #8]
 8105a22:	4a0d      	ldr	r2, [pc, #52]	; (8105a58 <RTC_ExitInitMode+0x78>)
 8105a24:	f023 0320 	bic.w	r3, r3, #32
 8105a28:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105a2a:	6878      	ldr	r0, [r7, #4]
 8105a2c:	f7ff ff80 	bl	8105930 <HAL_RTC_WaitForSynchro>
 8105a30:	4603      	mov	r3, r0
 8105a32:	2b00      	cmp	r3, #0
 8105a34:	d005      	beq.n	8105a42 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	2203      	movs	r2, #3
 8105a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8105a3e:	2303      	movs	r3, #3
 8105a40:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105a42:	4b05      	ldr	r3, [pc, #20]	; (8105a58 <RTC_ExitInitMode+0x78>)
 8105a44:	689b      	ldr	r3, [r3, #8]
 8105a46:	4a04      	ldr	r2, [pc, #16]	; (8105a58 <RTC_ExitInitMode+0x78>)
 8105a48:	f043 0320 	orr.w	r3, r3, #32
 8105a4c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8105a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8105a50:	4618      	mov	r0, r3
 8105a52:	3710      	adds	r7, #16
 8105a54:	46bd      	mov	sp, r7
 8105a56:	bd80      	pop	{r7, pc}
 8105a58:	58004000 	.word	0x58004000

08105a5c <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8105a5c:	b480      	push	{r7}
 8105a5e:	b085      	sub	sp, #20
 8105a60:	af00      	add	r7, sp, #0
 8105a62:	6078      	str	r0, [r7, #4]
 8105a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105a6c:	2b01      	cmp	r3, #1
 8105a6e:	d101      	bne.n	8105a74 <HAL_RTCEx_SetTamper+0x18>
 8105a70:	2302      	movs	r3, #2
 8105a72:	e0cc      	b.n	8105c0e <HAL_RTCEx_SetTamper+0x1b2>
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	2201      	movs	r2, #1
 8105a78:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	2202      	movs	r2, #2
 8105a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	681b      	ldr	r3, [r3, #0]
 8105a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a8a:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8105a8c:	683b      	ldr	r3, [r7, #0]
 8105a8e:	681b      	ldr	r3, [r3, #0]
 8105a90:	68fa      	ldr	r2, [r7, #12]
 8105a92:	4313      	orrs	r3, r2
 8105a94:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8105a96:	683b      	ldr	r3, [r7, #0]
 8105a98:	689b      	ldr	r3, [r3, #8]
 8105a9a:	2b08      	cmp	r3, #8
 8105a9c:	d003      	beq.n	8105aa6 <HAL_RTCEx_SetTamper+0x4a>
 8105a9e:	683b      	ldr	r3, [r7, #0]
 8105aa0:	689b      	ldr	r3, [r3, #8]
 8105aa2:	2b02      	cmp	r3, #2
 8105aa4:	d106      	bne.n	8105ab4 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8105aa6:	683b      	ldr	r3, [r7, #0]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	005b      	lsls	r3, r3, #1
 8105aac:	68fa      	ldr	r2, [r7, #12]
 8105aae:	4313      	orrs	r3, r2
 8105ab0:	60fb      	str	r3, [r7, #12]
 8105ab2:	e006      	b.n	8105ac2 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8105ab4:	683b      	ldr	r3, [r7, #0]
 8105ab6:	681b      	ldr	r3, [r3, #0]
 8105ab8:	005b      	lsls	r3, r3, #1
 8105aba:	43db      	mvns	r3, r3
 8105abc:	68fa      	ldr	r2, [r7, #12]
 8105abe:	4013      	ands	r3, r2
 8105ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8105ac2:	683b      	ldr	r3, [r7, #0]
 8105ac4:	68db      	ldr	r3, [r3, #12]
 8105ac6:	2b00      	cmp	r3, #0
 8105ac8:	d01e      	beq.n	8105b08 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105aca:	683b      	ldr	r3, [r7, #0]
 8105acc:	681b      	ldr	r3, [r3, #0]
 8105ace:	f003 0301 	and.w	r3, r3, #1
 8105ad2:	2b00      	cmp	r3, #0
 8105ad4:	d003      	beq.n	8105ade <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8105ad6:	68fb      	ldr	r3, [r7, #12]
 8105ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105adc:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105ade:	683b      	ldr	r3, [r7, #0]
 8105ae0:	681b      	ldr	r3, [r3, #0]
 8105ae2:	f003 0308 	and.w	r3, r3, #8
 8105ae6:	2b00      	cmp	r3, #0
 8105ae8:	d003      	beq.n	8105af2 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8105aea:	68fb      	ldr	r3, [r7, #12]
 8105aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105af0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105af2:	683b      	ldr	r3, [r7, #0]
 8105af4:	681b      	ldr	r3, [r3, #0]
 8105af6:	f003 0320 	and.w	r3, r3, #32
 8105afa:	2b00      	cmp	r3, #0
 8105afc:	d022      	beq.n	8105b44 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8105afe:	68fb      	ldr	r3, [r7, #12]
 8105b00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105b04:	60fb      	str	r3, [r7, #12]
 8105b06:	e01d      	b.n	8105b44 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105b08:	683b      	ldr	r3, [r7, #0]
 8105b0a:	681b      	ldr	r3, [r3, #0]
 8105b0c:	f003 0301 	and.w	r3, r3, #1
 8105b10:	2b00      	cmp	r3, #0
 8105b12:	d003      	beq.n	8105b1c <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8105b14:	68fb      	ldr	r3, [r7, #12]
 8105b16:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8105b1a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105b1c:	683b      	ldr	r3, [r7, #0]
 8105b1e:	681b      	ldr	r3, [r3, #0]
 8105b20:	f003 0308 	and.w	r3, r3, #8
 8105b24:	2b00      	cmp	r3, #0
 8105b26:	d003      	beq.n	8105b30 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8105b28:	68fb      	ldr	r3, [r7, #12]
 8105b2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8105b2e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105b30:	683b      	ldr	r3, [r7, #0]
 8105b32:	681b      	ldr	r3, [r3, #0]
 8105b34:	f003 0320 	and.w	r3, r3, #32
 8105b38:	2b00      	cmp	r3, #0
 8105b3a:	d003      	beq.n	8105b44 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105b3c:	68fb      	ldr	r3, [r7, #12]
 8105b3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8105b42:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8105b44:	683b      	ldr	r3, [r7, #0]
 8105b46:	691b      	ldr	r3, [r3, #16]
 8105b48:	2b00      	cmp	r3, #0
 8105b4a:	d01e      	beq.n	8105b8a <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105b4c:	683b      	ldr	r3, [r7, #0]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	f003 0301 	and.w	r3, r3, #1
 8105b54:	2b00      	cmp	r3, #0
 8105b56:	d003      	beq.n	8105b60 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8105b58:	68fb      	ldr	r3, [r7, #12]
 8105b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8105b5e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105b60:	683b      	ldr	r3, [r7, #0]
 8105b62:	681b      	ldr	r3, [r3, #0]
 8105b64:	f003 0308 	and.w	r3, r3, #8
 8105b68:	2b00      	cmp	r3, #0
 8105b6a:	d003      	beq.n	8105b74 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105b6c:	68fb      	ldr	r3, [r7, #12]
 8105b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105b72:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105b74:	683b      	ldr	r3, [r7, #0]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	f003 0320 	and.w	r3, r3, #32
 8105b7c:	2b00      	cmp	r3, #0
 8105b7e:	d022      	beq.n	8105bc6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105b80:	68fb      	ldr	r3, [r7, #12]
 8105b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105b86:	60fb      	str	r3, [r7, #12]
 8105b88:	e01d      	b.n	8105bc6 <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105b8a:	683b      	ldr	r3, [r7, #0]
 8105b8c:	681b      	ldr	r3, [r3, #0]
 8105b8e:	f003 0301 	and.w	r3, r3, #1
 8105b92:	2b00      	cmp	r3, #0
 8105b94:	d003      	beq.n	8105b9e <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8105b96:	68fb      	ldr	r3, [r7, #12]
 8105b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8105b9c:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105b9e:	683b      	ldr	r3, [r7, #0]
 8105ba0:	681b      	ldr	r3, [r3, #0]
 8105ba2:	f003 0308 	and.w	r3, r3, #8
 8105ba6:	2b00      	cmp	r3, #0
 8105ba8:	d003      	beq.n	8105bb2 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8105baa:	68fb      	ldr	r3, [r7, #12]
 8105bac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8105bb0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105bb2:	683b      	ldr	r3, [r7, #0]
 8105bb4:	681b      	ldr	r3, [r3, #0]
 8105bb6:	f003 0320 	and.w	r3, r3, #32
 8105bba:	2b00      	cmp	r3, #0
 8105bbc:	d003      	beq.n	8105bc6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8105bbe:	68fb      	ldr	r3, [r7, #12]
 8105bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105bc4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8105bc6:	68fb      	ldr	r3, [r7, #12]
 8105bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105bd0:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105bd2:	683b      	ldr	r3, [r7, #0]
 8105bd4:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8105bd6:	683b      	ldr	r3, [r7, #0]
 8105bd8:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105bda:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8105bdc:	683b      	ldr	r3, [r7, #0]
 8105bde:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8105be0:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8105be2:	683b      	ldr	r3, [r7, #0]
 8105be4:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8105be6:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8105be8:	683b      	ldr	r3, [r7, #0]
 8105bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8105bec:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105bee:	68fa      	ldr	r2, [r7, #12]
 8105bf0:	4313      	orrs	r3, r2
 8105bf2:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8105bf4:	687b      	ldr	r3, [r7, #4]
 8105bf6:	681b      	ldr	r3, [r3, #0]
 8105bf8:	68fa      	ldr	r2, [r7, #12]
 8105bfa:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	2201      	movs	r2, #1
 8105c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105c04:	687b      	ldr	r3, [r7, #4]
 8105c06:	2200      	movs	r2, #0
 8105c08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8105c0c:	2300      	movs	r3, #0
}
 8105c0e:	4618      	mov	r0, r3
 8105c10:	3714      	adds	r7, #20
 8105c12:	46bd      	mov	sp, r7
 8105c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c18:	4770      	bx	lr
	...

08105c1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8105c1c:	b580      	push	{r7, lr}
 8105c1e:	b08a      	sub	sp, #40	; 0x28
 8105c20:	af00      	add	r7, sp, #0
 8105c22:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8105c24:	687b      	ldr	r3, [r7, #4]
 8105c26:	2b00      	cmp	r3, #0
 8105c28:	d101      	bne.n	8105c2e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8105c2a:	2301      	movs	r3, #1
 8105c2c:	e290      	b.n	8106150 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105c2e:	f7fb fc61 	bl	81014f4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8105c38:	2b01      	cmp	r3, #1
 8105c3a:	d113      	bne.n	8105c64 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	681b      	ldr	r3, [r3, #0]
 8105c40:	4a96      	ldr	r2, [pc, #600]	; (8105e9c <HAL_SAI_Init+0x280>)
 8105c42:	4293      	cmp	r3, r2
 8105c44:	d004      	beq.n	8105c50 <HAL_SAI_Init+0x34>
 8105c46:	687b      	ldr	r3, [r7, #4]
 8105c48:	681b      	ldr	r3, [r3, #0]
 8105c4a:	4a95      	ldr	r2, [pc, #596]	; (8105ea0 <HAL_SAI_Init+0x284>)
 8105c4c:	4293      	cmp	r3, r2
 8105c4e:	d107      	bne.n	8105c60 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105c50:	687b      	ldr	r3, [r7, #4]
 8105c52:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105c54:	2b01      	cmp	r3, #1
 8105c56:	d103      	bne.n	8105c60 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8105c58:	687b      	ldr	r3, [r7, #4]
 8105c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105c5c:	2b00      	cmp	r3, #0
 8105c5e:	d001      	beq.n	8105c64 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8105c60:	2301      	movs	r3, #1
 8105c62:	e275      	b.n	8106150 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	681b      	ldr	r3, [r3, #0]
 8105c68:	4a8c      	ldr	r2, [pc, #560]	; (8105e9c <HAL_SAI_Init+0x280>)
 8105c6a:	4293      	cmp	r3, r2
 8105c6c:	d004      	beq.n	8105c78 <HAL_SAI_Init+0x5c>
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	681b      	ldr	r3, [r3, #0]
 8105c72:	4a8c      	ldr	r2, [pc, #560]	; (8105ea4 <HAL_SAI_Init+0x288>)
 8105c74:	4293      	cmp	r3, r2
 8105c76:	d102      	bne.n	8105c7e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8105c78:	4b8b      	ldr	r3, [pc, #556]	; (8105ea8 <HAL_SAI_Init+0x28c>)
 8105c7a:	61bb      	str	r3, [r7, #24]
 8105c7c:	e028      	b.n	8105cd0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105c7e:	687b      	ldr	r3, [r7, #4]
 8105c80:	681b      	ldr	r3, [r3, #0]
 8105c82:	4a8a      	ldr	r2, [pc, #552]	; (8105eac <HAL_SAI_Init+0x290>)
 8105c84:	4293      	cmp	r3, r2
 8105c86:	d004      	beq.n	8105c92 <HAL_SAI_Init+0x76>
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	4a88      	ldr	r2, [pc, #544]	; (8105eb0 <HAL_SAI_Init+0x294>)
 8105c8e:	4293      	cmp	r3, r2
 8105c90:	d102      	bne.n	8105c98 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8105c92:	4b88      	ldr	r3, [pc, #544]	; (8105eb4 <HAL_SAI_Init+0x298>)
 8105c94:	61bb      	str	r3, [r7, #24]
 8105c96:	e01b      	b.n	8105cd0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	4a86      	ldr	r2, [pc, #536]	; (8105eb8 <HAL_SAI_Init+0x29c>)
 8105c9e:	4293      	cmp	r3, r2
 8105ca0:	d004      	beq.n	8105cac <HAL_SAI_Init+0x90>
 8105ca2:	687b      	ldr	r3, [r7, #4]
 8105ca4:	681b      	ldr	r3, [r3, #0]
 8105ca6:	4a85      	ldr	r2, [pc, #532]	; (8105ebc <HAL_SAI_Init+0x2a0>)
 8105ca8:	4293      	cmp	r3, r2
 8105caa:	d102      	bne.n	8105cb2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8105cac:	4b84      	ldr	r3, [pc, #528]	; (8105ec0 <HAL_SAI_Init+0x2a4>)
 8105cae:	61bb      	str	r3, [r7, #24]
 8105cb0:	e00e      	b.n	8105cd0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	681b      	ldr	r3, [r3, #0]
 8105cb6:	4a7a      	ldr	r2, [pc, #488]	; (8105ea0 <HAL_SAI_Init+0x284>)
 8105cb8:	4293      	cmp	r3, r2
 8105cba:	d004      	beq.n	8105cc6 <HAL_SAI_Init+0xaa>
 8105cbc:	687b      	ldr	r3, [r7, #4]
 8105cbe:	681b      	ldr	r3, [r3, #0]
 8105cc0:	4a80      	ldr	r2, [pc, #512]	; (8105ec4 <HAL_SAI_Init+0x2a8>)
 8105cc2:	4293      	cmp	r3, r2
 8105cc4:	d102      	bne.n	8105ccc <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8105cc6:	4b80      	ldr	r3, [pc, #512]	; (8105ec8 <HAL_SAI_Init+0x2ac>)
 8105cc8:	61bb      	str	r3, [r7, #24]
 8105cca:	e001      	b.n	8105cd0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8105ccc:	2301      	movs	r3, #1
 8105cce:	e23f      	b.n	8106150 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8105cd6:	b2db      	uxtb	r3, r3
 8105cd8:	2b00      	cmp	r3, #0
 8105cda:	d106      	bne.n	8105cea <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8105cdc:	687b      	ldr	r3, [r7, #4]
 8105cde:	2200      	movs	r2, #0
 8105ce0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8105ce4:	6878      	ldr	r0, [r7, #4]
 8105ce6:	f7fb f80f 	bl	8100d08 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8105cea:	6878      	ldr	r0, [r7, #4]
 8105cec:	f000 fa40 	bl	8106170 <SAI_Disable>
 8105cf0:	4603      	mov	r3, r0
 8105cf2:	2b00      	cmp	r3, #0
 8105cf4:	d001      	beq.n	8105cfa <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8105cf6:	2301      	movs	r3, #1
 8105cf8:	e22a      	b.n	8106150 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	2202      	movs	r2, #2
 8105cfe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	68db      	ldr	r3, [r3, #12]
 8105d06:	2b02      	cmp	r3, #2
 8105d08:	d00c      	beq.n	8105d24 <HAL_SAI_Init+0x108>
 8105d0a:	2b02      	cmp	r3, #2
 8105d0c:	d80d      	bhi.n	8105d2a <HAL_SAI_Init+0x10e>
 8105d0e:	2b00      	cmp	r3, #0
 8105d10:	d002      	beq.n	8105d18 <HAL_SAI_Init+0xfc>
 8105d12:	2b01      	cmp	r3, #1
 8105d14:	d003      	beq.n	8105d1e <HAL_SAI_Init+0x102>
 8105d16:	e008      	b.n	8105d2a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8105d18:	2300      	movs	r3, #0
 8105d1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105d1c:	e008      	b.n	8105d30 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8105d1e:	2310      	movs	r3, #16
 8105d20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105d22:	e005      	b.n	8105d30 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8105d24:	2320      	movs	r3, #32
 8105d26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105d28:	e002      	b.n	8105d30 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8105d2a:	2300      	movs	r3, #0
 8105d2c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105d2e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	689b      	ldr	r3, [r3, #8]
 8105d34:	2b05      	cmp	r3, #5
 8105d36:	d832      	bhi.n	8105d9e <HAL_SAI_Init+0x182>
 8105d38:	a201      	add	r2, pc, #4	; (adr r2, 8105d40 <HAL_SAI_Init+0x124>)
 8105d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d3e:	bf00      	nop
 8105d40:	08105d59 	.word	0x08105d59
 8105d44:	08105d5f 	.word	0x08105d5f
 8105d48:	08105d67 	.word	0x08105d67
 8105d4c:	08105d6f 	.word	0x08105d6f
 8105d50:	08105d7f 	.word	0x08105d7f
 8105d54:	08105d8f 	.word	0x08105d8f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8105d58:	2300      	movs	r3, #0
 8105d5a:	61fb      	str	r3, [r7, #28]
      break;
 8105d5c:	e022      	b.n	8105da4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8105d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8105d62:	61fb      	str	r3, [r7, #28]
      break;
 8105d64:	e01e      	b.n	8105da4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8105d6a:	61fb      	str	r3, [r7, #28]
      break;
 8105d6c:	e01a      	b.n	8105da4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105d6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8105d72:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8105d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d76:	f043 0301 	orr.w	r3, r3, #1
 8105d7a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105d7c:	e012      	b.n	8105da4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105d7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8105d82:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8105d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d86:	f043 0302 	orr.w	r3, r3, #2
 8105d8a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105d8c:	e00a      	b.n	8105da4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8105d92:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8105d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d96:	f043 0303 	orr.w	r3, r3, #3
 8105d9a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105d9c:	e002      	b.n	8105da4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8105d9e:	2300      	movs	r3, #0
 8105da0:	61fb      	str	r3, [r7, #28]
      break;
 8105da2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8105da4:	69bb      	ldr	r3, [r7, #24]
 8105da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105da8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	6a1b      	ldr	r3, [r3, #32]
 8105dae:	2b00      	cmp	r3, #0
 8105db0:	f000 80c5 	beq.w	8105f3e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8105db4:	2300      	movs	r3, #0
 8105db6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	4a37      	ldr	r2, [pc, #220]	; (8105e9c <HAL_SAI_Init+0x280>)
 8105dbe:	4293      	cmp	r3, r2
 8105dc0:	d004      	beq.n	8105dcc <HAL_SAI_Init+0x1b0>
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	681b      	ldr	r3, [r3, #0]
 8105dc6:	4a37      	ldr	r2, [pc, #220]	; (8105ea4 <HAL_SAI_Init+0x288>)
 8105dc8:	4293      	cmp	r3, r2
 8105dca:	d106      	bne.n	8105dda <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8105dcc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8105dd0:	f04f 0100 	mov.w	r1, #0
 8105dd4:	f7fe fa36 	bl	8104244 <HAL_RCCEx_GetPeriphCLKFreq>
 8105dd8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105dda:	687b      	ldr	r3, [r7, #4]
 8105ddc:	681b      	ldr	r3, [r3, #0]
 8105dde:	4a33      	ldr	r2, [pc, #204]	; (8105eac <HAL_SAI_Init+0x290>)
 8105de0:	4293      	cmp	r3, r2
 8105de2:	d004      	beq.n	8105dee <HAL_SAI_Init+0x1d2>
 8105de4:	687b      	ldr	r3, [r7, #4]
 8105de6:	681b      	ldr	r3, [r3, #0]
 8105de8:	4a31      	ldr	r2, [pc, #196]	; (8105eb0 <HAL_SAI_Init+0x294>)
 8105dea:	4293      	cmp	r3, r2
 8105dec:	d106      	bne.n	8105dfc <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8105dee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8105df2:	f04f 0100 	mov.w	r1, #0
 8105df6:	f7fe fa25 	bl	8104244 <HAL_RCCEx_GetPeriphCLKFreq>
 8105dfa:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105dfc:	687b      	ldr	r3, [r7, #4]
 8105dfe:	681b      	ldr	r3, [r3, #0]
 8105e00:	4a2d      	ldr	r2, [pc, #180]	; (8105eb8 <HAL_SAI_Init+0x29c>)
 8105e02:	4293      	cmp	r3, r2
 8105e04:	d004      	beq.n	8105e10 <HAL_SAI_Init+0x1f4>
 8105e06:	687b      	ldr	r3, [r7, #4]
 8105e08:	681b      	ldr	r3, [r3, #0]
 8105e0a:	4a2c      	ldr	r2, [pc, #176]	; (8105ebc <HAL_SAI_Init+0x2a0>)
 8105e0c:	4293      	cmp	r3, r2
 8105e0e:	d106      	bne.n	8105e1e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8105e10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8105e14:	f04f 0100 	mov.w	r1, #0
 8105e18:	f7fe fa14 	bl	8104244 <HAL_RCCEx_GetPeriphCLKFreq>
 8105e1c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8105e1e:	687b      	ldr	r3, [r7, #4]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	4a1f      	ldr	r2, [pc, #124]	; (8105ea0 <HAL_SAI_Init+0x284>)
 8105e24:	4293      	cmp	r3, r2
 8105e26:	d106      	bne.n	8105e36 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8105e28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8105e2c:	f04f 0100 	mov.w	r1, #0
 8105e30:	f7fe fa08 	bl	8104244 <HAL_RCCEx_GetPeriphCLKFreq>
 8105e34:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	681b      	ldr	r3, [r3, #0]
 8105e3a:	4a22      	ldr	r2, [pc, #136]	; (8105ec4 <HAL_SAI_Init+0x2a8>)
 8105e3c:	4293      	cmp	r3, r2
 8105e3e:	d106      	bne.n	8105e4e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8105e40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8105e44:	f04f 0100 	mov.w	r1, #0
 8105e48:	f7fe f9fc 	bl	8104244 <HAL_RCCEx_GetPeriphCLKFreq>
 8105e4c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	699b      	ldr	r3, [r3, #24]
 8105e52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8105e56:	d139      	bne.n	8105ecc <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8105e58:	687b      	ldr	r3, [r7, #4]
 8105e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105e5c:	2b04      	cmp	r3, #4
 8105e5e:	d102      	bne.n	8105e66 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8105e60:	2340      	movs	r3, #64	; 0x40
 8105e62:	60fb      	str	r3, [r7, #12]
 8105e64:	e00a      	b.n	8105e7c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105e6a:	2b08      	cmp	r3, #8
 8105e6c:	d103      	bne.n	8105e76 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8105e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8105e72:	60fb      	str	r3, [r7, #12]
 8105e74:	e002      	b.n	8105e7c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105e7a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8105e7c:	697a      	ldr	r2, [r7, #20]
 8105e7e:	4613      	mov	r3, r2
 8105e80:	009b      	lsls	r3, r3, #2
 8105e82:	4413      	add	r3, r2
 8105e84:	005b      	lsls	r3, r3, #1
 8105e86:	4619      	mov	r1, r3
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	6a1b      	ldr	r3, [r3, #32]
 8105e8c:	68fa      	ldr	r2, [r7, #12]
 8105e8e:	fb02 f303 	mul.w	r3, r2, r3
 8105e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8105e96:	613b      	str	r3, [r7, #16]
 8105e98:	e030      	b.n	8105efc <HAL_SAI_Init+0x2e0>
 8105e9a:	bf00      	nop
 8105e9c:	40015804 	.word	0x40015804
 8105ea0:	58005404 	.word	0x58005404
 8105ea4:	40015824 	.word	0x40015824
 8105ea8:	40015800 	.word	0x40015800
 8105eac:	40015c04 	.word	0x40015c04
 8105eb0:	40015c24 	.word	0x40015c24
 8105eb4:	40015c00 	.word	0x40015c00
 8105eb8:	40016004 	.word	0x40016004
 8105ebc:	40016024 	.word	0x40016024
 8105ec0:	40016000 	.word	0x40016000
 8105ec4:	58005424 	.word	0x58005424
 8105ec8:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105ed4:	d101      	bne.n	8105eda <HAL_SAI_Init+0x2be>
 8105ed6:	2302      	movs	r3, #2
 8105ed8:	e000      	b.n	8105edc <HAL_SAI_Init+0x2c0>
 8105eda:	2301      	movs	r3, #1
 8105edc:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8105ede:	697a      	ldr	r2, [r7, #20]
 8105ee0:	4613      	mov	r3, r2
 8105ee2:	009b      	lsls	r3, r3, #2
 8105ee4:	4413      	add	r3, r2
 8105ee6:	005b      	lsls	r3, r3, #1
 8105ee8:	4619      	mov	r1, r3
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	6a1b      	ldr	r3, [r3, #32]
 8105eee:	68ba      	ldr	r2, [r7, #8]
 8105ef0:	fb02 f303 	mul.w	r3, r2, r3
 8105ef4:	021b      	lsls	r3, r3, #8
 8105ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8105efa:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8105efc:	693b      	ldr	r3, [r7, #16]
 8105efe:	4a96      	ldr	r2, [pc, #600]	; (8106158 <HAL_SAI_Init+0x53c>)
 8105f00:	fba2 2303 	umull	r2, r3, r2, r3
 8105f04:	08da      	lsrs	r2, r3, #3
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8105f0a:	6939      	ldr	r1, [r7, #16]
 8105f0c:	4b92      	ldr	r3, [pc, #584]	; (8106158 <HAL_SAI_Init+0x53c>)
 8105f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8105f12:	08da      	lsrs	r2, r3, #3
 8105f14:	4613      	mov	r3, r2
 8105f16:	009b      	lsls	r3, r3, #2
 8105f18:	4413      	add	r3, r2
 8105f1a:	005b      	lsls	r3, r3, #1
 8105f1c:	1aca      	subs	r2, r1, r3
 8105f1e:	2a08      	cmp	r2, #8
 8105f20:	d904      	bls.n	8105f2c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f26:	1c5a      	adds	r2, r3, #1
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8105f2c:	687b      	ldr	r3, [r7, #4]
 8105f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105f30:	2b04      	cmp	r3, #4
 8105f32:	d104      	bne.n	8105f3e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f38:	085a      	lsrs	r2, r3, #1
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	685b      	ldr	r3, [r3, #4]
 8105f42:	2b00      	cmp	r3, #0
 8105f44:	d003      	beq.n	8105f4e <HAL_SAI_Init+0x332>
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	685b      	ldr	r3, [r3, #4]
 8105f4a:	2b02      	cmp	r3, #2
 8105f4c:	d109      	bne.n	8105f62 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8105f4e:	687b      	ldr	r3, [r7, #4]
 8105f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f52:	2b01      	cmp	r3, #1
 8105f54:	d101      	bne.n	8105f5a <HAL_SAI_Init+0x33e>
 8105f56:	2300      	movs	r3, #0
 8105f58:	e001      	b.n	8105f5e <HAL_SAI_Init+0x342>
 8105f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8105f5e:	623b      	str	r3, [r7, #32]
 8105f60:	e008      	b.n	8105f74 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f66:	2b01      	cmp	r3, #1
 8105f68:	d102      	bne.n	8105f70 <HAL_SAI_Init+0x354>
 8105f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8105f6e:	e000      	b.n	8105f72 <HAL_SAI_Init+0x356>
 8105f70:	2300      	movs	r3, #0
 8105f72:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105f74:	f7fb fabe 	bl	81014f4 <HAL_GetREVID>
 8105f78:	4603      	mov	r3, r0
 8105f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105f7e:	d331      	bcc.n	8105fe4 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	6819      	ldr	r1, [r3, #0]
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	681a      	ldr	r2, [r3, #0]
 8105f8a:	4b74      	ldr	r3, [pc, #464]	; (810615c <HAL_SAI_Init+0x540>)
 8105f8c:	400b      	ands	r3, r1
 8105f8e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105f90:	687b      	ldr	r3, [r7, #4]
 8105f92:	681b      	ldr	r3, [r3, #0]
 8105f94:	6819      	ldr	r1, [r3, #0]
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	685a      	ldr	r2, [r3, #4]
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105f9e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105fa4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105faa:	431a      	orrs	r2, r3
 8105fac:	6a3b      	ldr	r3, [r7, #32]
 8105fae:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8105fb0:	69fb      	ldr	r3, [r7, #28]
 8105fb2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8105fb8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	695b      	ldr	r3, [r3, #20]
 8105fbe:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105fc4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105fca:	051b      	lsls	r3, r3, #20
 8105fcc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105fd2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8105fd4:	687b      	ldr	r3, [r7, #4]
 8105fd6:	691b      	ldr	r3, [r3, #16]
 8105fd8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	681b      	ldr	r3, [r3, #0]
 8105fde:	430a      	orrs	r2, r1
 8105fe0:	601a      	str	r2, [r3, #0]
 8105fe2:	e02d      	b.n	8106040 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	681b      	ldr	r3, [r3, #0]
 8105fe8:	6819      	ldr	r1, [r3, #0]
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	681a      	ldr	r2, [r3, #0]
 8105fee:	4b5c      	ldr	r3, [pc, #368]	; (8106160 <HAL_SAI_Init+0x544>)
 8105ff0:	400b      	ands	r3, r1
 8105ff2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	681b      	ldr	r3, [r3, #0]
 8105ff8:	6819      	ldr	r1, [r3, #0]
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	685a      	ldr	r2, [r3, #4]
 8105ffe:	687b      	ldr	r3, [r7, #4]
 8106000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106002:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106008:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810600e:	431a      	orrs	r2, r3
 8106010:	6a3b      	ldr	r3, [r7, #32]
 8106012:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106014:	69fb      	ldr	r3, [r7, #28]
 8106016:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 810601c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	695b      	ldr	r3, [r3, #20]
 8106022:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106028:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810602e:	051b      	lsls	r3, r3, #20
 8106030:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8106032:	687b      	ldr	r3, [r7, #4]
 8106034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106036:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	430a      	orrs	r2, r1
 810603e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	681b      	ldr	r3, [r3, #0]
 8106044:	685b      	ldr	r3, [r3, #4]
 8106046:	687a      	ldr	r2, [r7, #4]
 8106048:	6812      	ldr	r2, [r2, #0]
 810604a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 810604e:	f023 030f 	bic.w	r3, r3, #15
 8106052:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	6859      	ldr	r1, [r3, #4]
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	69da      	ldr	r2, [r3, #28]
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106062:	431a      	orrs	r2, r3
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106068:	431a      	orrs	r2, r3
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	681b      	ldr	r3, [r3, #0]
 810606e:	430a      	orrs	r2, r1
 8106070:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	6899      	ldr	r1, [r3, #8]
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	681a      	ldr	r2, [r3, #0]
 810607c:	4b39      	ldr	r3, [pc, #228]	; (8106164 <HAL_SAI_Init+0x548>)
 810607e:	400b      	ands	r3, r1
 8106080:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	681b      	ldr	r3, [r3, #0]
 8106086:	6899      	ldr	r1, [r3, #8]
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810608c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106092:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8106094:	687b      	ldr	r3, [r7, #4]
 8106096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8106098:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 810609a:	687b      	ldr	r3, [r7, #4]
 810609c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 810609e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81060a4:	3b01      	subs	r3, #1
 81060a6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 81060a8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	681b      	ldr	r3, [r3, #0]
 81060ae:	430a      	orrs	r2, r1
 81060b0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	681b      	ldr	r3, [r3, #0]
 81060b6:	68d9      	ldr	r1, [r3, #12]
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	681a      	ldr	r2, [r3, #0]
 81060bc:	f24f 0320 	movw	r3, #61472	; 0xf020
 81060c0:	400b      	ands	r3, r1
 81060c2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	68d9      	ldr	r1, [r3, #12]
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81060d2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81060d4:	687b      	ldr	r3, [r7, #4]
 81060d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81060d8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81060da:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81060e0:	3b01      	subs	r3, #1
 81060e2:	021b      	lsls	r3, r3, #8
 81060e4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	681b      	ldr	r3, [r3, #0]
 81060ea:	430a      	orrs	r2, r1
 81060ec:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	681b      	ldr	r3, [r3, #0]
 81060f2:	4a1d      	ldr	r2, [pc, #116]	; (8106168 <HAL_SAI_Init+0x54c>)
 81060f4:	4293      	cmp	r3, r2
 81060f6:	d004      	beq.n	8106102 <HAL_SAI_Init+0x4e6>
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	681b      	ldr	r3, [r3, #0]
 81060fc:	4a1b      	ldr	r2, [pc, #108]	; (810616c <HAL_SAI_Init+0x550>)
 81060fe:	4293      	cmp	r3, r2
 8106100:	d119      	bne.n	8106136 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8106102:	69bb      	ldr	r3, [r7, #24]
 8106104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106106:	f023 0201 	bic.w	r2, r3, #1
 810610a:	69bb      	ldr	r3, [r7, #24]
 810610c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8106114:	2b01      	cmp	r3, #1
 8106116:	d10e      	bne.n	8106136 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106120:	3b01      	subs	r3, #1
 8106122:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106124:	431a      	orrs	r2, r3
 8106126:	69bb      	ldr	r3, [r7, #24]
 8106128:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 810612a:	69bb      	ldr	r3, [r7, #24]
 810612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810612e:	f043 0201 	orr.w	r2, r3, #1
 8106132:	69bb      	ldr	r3, [r7, #24]
 8106134:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	2200      	movs	r2, #0
 810613a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	2201      	movs	r2, #1
 8106142:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	2200      	movs	r2, #0
 810614a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 810614e:	2300      	movs	r3, #0
}
 8106150:	4618      	mov	r0, r3
 8106152:	3728      	adds	r7, #40	; 0x28
 8106154:	46bd      	mov	sp, r7
 8106156:	bd80      	pop	{r7, pc}
 8106158:	cccccccd 	.word	0xcccccccd
 810615c:	f005c010 	.word	0xf005c010
 8106160:	f805c010 	.word	0xf805c010
 8106164:	fff88000 	.word	0xfff88000
 8106168:	40015804 	.word	0x40015804
 810616c:	58005404 	.word	0x58005404

08106170 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8106170:	b480      	push	{r7}
 8106172:	b085      	sub	sp, #20
 8106174:	af00      	add	r7, sp, #0
 8106176:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8106178:	4b18      	ldr	r3, [pc, #96]	; (81061dc <SAI_Disable+0x6c>)
 810617a:	681b      	ldr	r3, [r3, #0]
 810617c:	4a18      	ldr	r2, [pc, #96]	; (81061e0 <SAI_Disable+0x70>)
 810617e:	fba2 2303 	umull	r2, r3, r2, r3
 8106182:	0b1b      	lsrs	r3, r3, #12
 8106184:	009b      	lsls	r3, r3, #2
 8106186:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8106188:	2300      	movs	r3, #0
 810618a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	681b      	ldr	r3, [r3, #0]
 8106190:	681a      	ldr	r2, [r3, #0]
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 810619a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 810619c:	68fb      	ldr	r3, [r7, #12]
 810619e:	2b00      	cmp	r3, #0
 81061a0:	d10a      	bne.n	81061b8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81061a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 81061b2:	2303      	movs	r3, #3
 81061b4:	72fb      	strb	r3, [r7, #11]
      break;
 81061b6:	e009      	b.n	81061cc <SAI_Disable+0x5c>
    }
    count--;
 81061b8:	68fb      	ldr	r3, [r7, #12]
 81061ba:	3b01      	subs	r3, #1
 81061bc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	681b      	ldr	r3, [r3, #0]
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81061c8:	2b00      	cmp	r3, #0
 81061ca:	d1e7      	bne.n	810619c <SAI_Disable+0x2c>

  return status;
 81061cc:	7afb      	ldrb	r3, [r7, #11]
}
 81061ce:	4618      	mov	r0, r3
 81061d0:	3714      	adds	r7, #20
 81061d2:	46bd      	mov	sp, r7
 81061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061d8:	4770      	bx	lr
 81061da:	bf00      	nop
 81061dc:	10000000 	.word	0x10000000
 81061e0:	95cbec1b 	.word	0x95cbec1b

081061e4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 81061e4:	b580      	push	{r7, lr}
 81061e6:	b082      	sub	sp, #8
 81061e8:	af00      	add	r7, sp, #0
 81061ea:	6078      	str	r0, [r7, #4]
 81061ec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	2b00      	cmp	r3, #0
 81061f2:	d101      	bne.n	81061f8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 81061f4:	2301      	movs	r3, #1
 81061f6:	e02b      	b.n	8106250 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 81061fe:	b2db      	uxtb	r3, r3
 8106200:	2b00      	cmp	r3, #0
 8106202:	d106      	bne.n	8106212 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	2200      	movs	r2, #0
 8106208:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 810620c:	6878      	ldr	r0, [r7, #4]
 810620e:	f7fa fa95 	bl	810073c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8106212:	687b      	ldr	r3, [r7, #4]
 8106214:	2202      	movs	r2, #2
 8106216:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	681a      	ldr	r2, [r3, #0]
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	3304      	adds	r3, #4
 8106222:	4619      	mov	r1, r3
 8106224:	4610      	mov	r0, r2
 8106226:	f000 f887 	bl	8106338 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	6818      	ldr	r0, [r3, #0]
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	685b      	ldr	r3, [r3, #4]
 8106232:	461a      	mov	r2, r3
 8106234:	6839      	ldr	r1, [r7, #0]
 8106236:	f000 f8dc 	bl	81063f2 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 810623a:	4b07      	ldr	r3, [pc, #28]	; (8106258 <HAL_SDRAM_Init+0x74>)
 810623c:	681b      	ldr	r3, [r3, #0]
 810623e:	4a06      	ldr	r2, [pc, #24]	; (8106258 <HAL_SDRAM_Init+0x74>)
 8106240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8106244:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	2201      	movs	r2, #1
 810624a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810624e:	2300      	movs	r3, #0
}
 8106250:	4618      	mov	r0, r3
 8106252:	3708      	adds	r7, #8
 8106254:	46bd      	mov	sp, r7
 8106256:	bd80      	pop	{r7, pc}
 8106258:	52004000 	.word	0x52004000

0810625c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 810625c:	b580      	push	{r7, lr}
 810625e:	b084      	sub	sp, #16
 8106260:	af00      	add	r7, sp, #0
 8106262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8106264:	687b      	ldr	r3, [r7, #4]
 8106266:	2b00      	cmp	r3, #0
 8106268:	d101      	bne.n	810626e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 810626a:	2301      	movs	r3, #1
 810626c:	e05e      	b.n	810632c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 810626e:	687b      	ldr	r3, [r7, #4]
 8106270:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8106274:	b2db      	uxtb	r3, r3
 8106276:	2b00      	cmp	r3, #0
 8106278:	d106      	bne.n	8106288 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	2200      	movs	r2, #0
 810627e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8106282:	6878      	ldr	r0, [r7, #4]
 8106284:	f7fa fe30 	bl	8100ee8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8106288:	687b      	ldr	r3, [r7, #4]
 810628a:	2202      	movs	r2, #2
 810628c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8106290:	687b      	ldr	r3, [r7, #4]
 8106292:	681b      	ldr	r3, [r3, #0]
 8106294:	681a      	ldr	r2, [r3, #0]
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	681b      	ldr	r3, [r3, #0]
 810629a:	f022 0203 	bic.w	r2, r2, #3
 810629e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 81062a0:	687b      	ldr	r3, [r7, #4]
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	681b      	ldr	r3, [r3, #0]
 81062a6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 81062a8:	68fa      	ldr	r2, [r7, #12]
 81062aa:	4b22      	ldr	r3, [pc, #136]	; (8106334 <HAL_SPDIFRX_Init+0xd8>)
 81062ac:	4013      	ands	r3, r2
 81062ae:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 81062b4:	687b      	ldr	r3, [r7, #4]
 81062b6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 81062b8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 81062ba:	687b      	ldr	r3, [r7, #4]
 81062bc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 81062be:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 81062c4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 81062c6:	687b      	ldr	r3, [r7, #4]
 81062c8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 81062ca:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 81062d0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 81062d6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 81062d8:	687b      	ldr	r3, [r7, #4]
 81062da:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 81062dc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 81062e2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 81062e4:	687b      	ldr	r3, [r7, #4]
 81062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 81062e8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 81062ea:	68fa      	ldr	r2, [r7, #12]
 81062ec:	4313      	orrs	r3, r2
 81062ee:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 81062f6:	2b01      	cmp	r3, #1
 81062f8:	d103      	bne.n	8106302 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 81062fa:	68fb      	ldr	r3, [r7, #12]
 81062fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106300:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8106308:	2b01      	cmp	r3, #1
 810630a:	d103      	bne.n	8106314 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 810630c:	68fb      	ldr	r3, [r7, #12]
 810630e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106312:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	681b      	ldr	r3, [r3, #0]
 8106318:	68fa      	ldr	r2, [r7, #12]
 810631a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	2200      	movs	r2, #0
 8106320:	64da      	str	r2, [r3, #76]	; 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	2201      	movs	r2, #1
 8106326:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 810632a:	2300      	movs	r3, #0
}
 810632c:	4618      	mov	r0, r3
 810632e:	3710      	adds	r7, #16
 8106330:	46bd      	mov	sp, r7
 8106332:	bd80      	pop	{r7, pc}
 8106334:	ffc88407 	.word	0xffc88407

08106338 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8106338:	b480      	push	{r7}
 810633a:	b083      	sub	sp, #12
 810633c:	af00      	add	r7, sp, #0
 810633e:	6078      	str	r0, [r7, #4]
 8106340:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8106342:	683b      	ldr	r3, [r7, #0]
 8106344:	681b      	ldr	r3, [r3, #0]
 8106346:	2b00      	cmp	r3, #0
 8106348:	d123      	bne.n	8106392 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	681b      	ldr	r3, [r3, #0]
 810634e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8106352:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8106356:	683a      	ldr	r2, [r7, #0]
 8106358:	6851      	ldr	r1, [r2, #4]
 810635a:	683a      	ldr	r2, [r7, #0]
 810635c:	6892      	ldr	r2, [r2, #8]
 810635e:	4311      	orrs	r1, r2
 8106360:	683a      	ldr	r2, [r7, #0]
 8106362:	68d2      	ldr	r2, [r2, #12]
 8106364:	4311      	orrs	r1, r2
 8106366:	683a      	ldr	r2, [r7, #0]
 8106368:	6912      	ldr	r2, [r2, #16]
 810636a:	4311      	orrs	r1, r2
 810636c:	683a      	ldr	r2, [r7, #0]
 810636e:	6952      	ldr	r2, [r2, #20]
 8106370:	4311      	orrs	r1, r2
 8106372:	683a      	ldr	r2, [r7, #0]
 8106374:	6992      	ldr	r2, [r2, #24]
 8106376:	4311      	orrs	r1, r2
 8106378:	683a      	ldr	r2, [r7, #0]
 810637a:	69d2      	ldr	r2, [r2, #28]
 810637c:	4311      	orrs	r1, r2
 810637e:	683a      	ldr	r2, [r7, #0]
 8106380:	6a12      	ldr	r2, [r2, #32]
 8106382:	4311      	orrs	r1, r2
 8106384:	683a      	ldr	r2, [r7, #0]
 8106386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8106388:	430a      	orrs	r2, r1
 810638a:	431a      	orrs	r2, r3
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	601a      	str	r2, [r3, #0]
 8106390:	e028      	b.n	81063e4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	681b      	ldr	r3, [r3, #0]
 8106396:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 810639a:	683b      	ldr	r3, [r7, #0]
 810639c:	69d9      	ldr	r1, [r3, #28]
 810639e:	683b      	ldr	r3, [r7, #0]
 81063a0:	6a1b      	ldr	r3, [r3, #32]
 81063a2:	4319      	orrs	r1, r3
 81063a4:	683b      	ldr	r3, [r7, #0]
 81063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81063a8:	430b      	orrs	r3, r1
 81063aa:	431a      	orrs	r2, r3
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 81063b0:	687b      	ldr	r3, [r7, #4]
 81063b2:	685b      	ldr	r3, [r3, #4]
 81063b4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 81063b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 81063bc:	683a      	ldr	r2, [r7, #0]
 81063be:	6851      	ldr	r1, [r2, #4]
 81063c0:	683a      	ldr	r2, [r7, #0]
 81063c2:	6892      	ldr	r2, [r2, #8]
 81063c4:	4311      	orrs	r1, r2
 81063c6:	683a      	ldr	r2, [r7, #0]
 81063c8:	68d2      	ldr	r2, [r2, #12]
 81063ca:	4311      	orrs	r1, r2
 81063cc:	683a      	ldr	r2, [r7, #0]
 81063ce:	6912      	ldr	r2, [r2, #16]
 81063d0:	4311      	orrs	r1, r2
 81063d2:	683a      	ldr	r2, [r7, #0]
 81063d4:	6952      	ldr	r2, [r2, #20]
 81063d6:	4311      	orrs	r1, r2
 81063d8:	683a      	ldr	r2, [r7, #0]
 81063da:	6992      	ldr	r2, [r2, #24]
 81063dc:	430a      	orrs	r2, r1
 81063de:	431a      	orrs	r2, r3
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 81063e4:	2300      	movs	r3, #0
}
 81063e6:	4618      	mov	r0, r3
 81063e8:	370c      	adds	r7, #12
 81063ea:	46bd      	mov	sp, r7
 81063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063f0:	4770      	bx	lr

081063f2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 81063f2:	b480      	push	{r7}
 81063f4:	b085      	sub	sp, #20
 81063f6:	af00      	add	r7, sp, #0
 81063f8:	60f8      	str	r0, [r7, #12]
 81063fa:	60b9      	str	r1, [r7, #8]
 81063fc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	2b00      	cmp	r3, #0
 8106402:	d128      	bne.n	8106456 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8106404:	68fb      	ldr	r3, [r7, #12]
 8106406:	689b      	ldr	r3, [r3, #8]
 8106408:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810640c:	68bb      	ldr	r3, [r7, #8]
 810640e:	681b      	ldr	r3, [r3, #0]
 8106410:	1e59      	subs	r1, r3, #1
 8106412:	68bb      	ldr	r3, [r7, #8]
 8106414:	685b      	ldr	r3, [r3, #4]
 8106416:	3b01      	subs	r3, #1
 8106418:	011b      	lsls	r3, r3, #4
 810641a:	4319      	orrs	r1, r3
 810641c:	68bb      	ldr	r3, [r7, #8]
 810641e:	689b      	ldr	r3, [r3, #8]
 8106420:	3b01      	subs	r3, #1
 8106422:	021b      	lsls	r3, r3, #8
 8106424:	4319      	orrs	r1, r3
 8106426:	68bb      	ldr	r3, [r7, #8]
 8106428:	68db      	ldr	r3, [r3, #12]
 810642a:	3b01      	subs	r3, #1
 810642c:	031b      	lsls	r3, r3, #12
 810642e:	4319      	orrs	r1, r3
 8106430:	68bb      	ldr	r3, [r7, #8]
 8106432:	691b      	ldr	r3, [r3, #16]
 8106434:	3b01      	subs	r3, #1
 8106436:	041b      	lsls	r3, r3, #16
 8106438:	4319      	orrs	r1, r3
 810643a:	68bb      	ldr	r3, [r7, #8]
 810643c:	695b      	ldr	r3, [r3, #20]
 810643e:	3b01      	subs	r3, #1
 8106440:	051b      	lsls	r3, r3, #20
 8106442:	4319      	orrs	r1, r3
 8106444:	68bb      	ldr	r3, [r7, #8]
 8106446:	699b      	ldr	r3, [r3, #24]
 8106448:	3b01      	subs	r3, #1
 810644a:	061b      	lsls	r3, r3, #24
 810644c:	430b      	orrs	r3, r1
 810644e:	431a      	orrs	r2, r3
 8106450:	68fb      	ldr	r3, [r7, #12]
 8106452:	609a      	str	r2, [r3, #8]
 8106454:	e02f      	b.n	81064b6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8106456:	68fb      	ldr	r3, [r7, #12]
 8106458:	689b      	ldr	r3, [r3, #8]
 810645a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810645e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8106462:	68ba      	ldr	r2, [r7, #8]
 8106464:	68d2      	ldr	r2, [r2, #12]
 8106466:	3a01      	subs	r2, #1
 8106468:	0311      	lsls	r1, r2, #12
 810646a:	68ba      	ldr	r2, [r7, #8]
 810646c:	6952      	ldr	r2, [r2, #20]
 810646e:	3a01      	subs	r2, #1
 8106470:	0512      	lsls	r2, r2, #20
 8106472:	430a      	orrs	r2, r1
 8106474:	431a      	orrs	r2, r3
 8106476:	68fb      	ldr	r3, [r7, #12]
 8106478:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810647a:	68fb      	ldr	r3, [r7, #12]
 810647c:	68db      	ldr	r3, [r3, #12]
 810647e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8106482:	68bb      	ldr	r3, [r7, #8]
 8106484:	681b      	ldr	r3, [r3, #0]
 8106486:	1e59      	subs	r1, r3, #1
 8106488:	68bb      	ldr	r3, [r7, #8]
 810648a:	685b      	ldr	r3, [r3, #4]
 810648c:	3b01      	subs	r3, #1
 810648e:	011b      	lsls	r3, r3, #4
 8106490:	4319      	orrs	r1, r3
 8106492:	68bb      	ldr	r3, [r7, #8]
 8106494:	689b      	ldr	r3, [r3, #8]
 8106496:	3b01      	subs	r3, #1
 8106498:	021b      	lsls	r3, r3, #8
 810649a:	4319      	orrs	r1, r3
 810649c:	68bb      	ldr	r3, [r7, #8]
 810649e:	691b      	ldr	r3, [r3, #16]
 81064a0:	3b01      	subs	r3, #1
 81064a2:	041b      	lsls	r3, r3, #16
 81064a4:	4319      	orrs	r1, r3
 81064a6:	68bb      	ldr	r3, [r7, #8]
 81064a8:	699b      	ldr	r3, [r3, #24]
 81064aa:	3b01      	subs	r3, #1
 81064ac:	061b      	lsls	r3, r3, #24
 81064ae:	430b      	orrs	r3, r1
 81064b0:	431a      	orrs	r2, r3
 81064b2:	68fb      	ldr	r3, [r7, #12]
 81064b4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 81064b6:	2300      	movs	r3, #0
}
 81064b8:	4618      	mov	r0, r3
 81064ba:	3714      	adds	r7, #20
 81064bc:	46bd      	mov	sp, r7
 81064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064c2:	4770      	bx	lr

081064c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 81064c4:	b084      	sub	sp, #16
 81064c6:	b580      	push	{r7, lr}
 81064c8:	b084      	sub	sp, #16
 81064ca:	af00      	add	r7, sp, #0
 81064cc:	6078      	str	r0, [r7, #4]
 81064ce:	f107 001c 	add.w	r0, r7, #28
 81064d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 81064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81064d8:	2b01      	cmp	r3, #1
 81064da:	d122      	bne.n	8106522 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81064e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	68db      	ldr	r3, [r3, #12]
 81064ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 81064f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81064f4:	687a      	ldr	r2, [r7, #4]
 81064f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 81064f8:	687b      	ldr	r3, [r7, #4]
 81064fa:	68db      	ldr	r3, [r3, #12]
 81064fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8106504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106506:	2b01      	cmp	r3, #1
 8106508:	d105      	bne.n	8106516 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810650a:	687b      	ldr	r3, [r7, #4]
 810650c:	68db      	ldr	r3, [r3, #12]
 810650e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8106516:	6878      	ldr	r0, [r7, #4]
 8106518:	f000 faaa 	bl	8106a70 <USB_CoreReset>
 810651c:	4603      	mov	r3, r0
 810651e:	73fb      	strb	r3, [r7, #15]
 8106520:	e01a      	b.n	8106558 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	68db      	ldr	r3, [r3, #12]
 8106526:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810652e:	6878      	ldr	r0, [r7, #4]
 8106530:	f000 fa9e 	bl	8106a70 <USB_CoreReset>
 8106534:	4603      	mov	r3, r0
 8106536:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8106538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810653a:	2b00      	cmp	r3, #0
 810653c:	d106      	bne.n	810654c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810653e:	687b      	ldr	r3, [r7, #4]
 8106540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8106546:	687b      	ldr	r3, [r7, #4]
 8106548:	639a      	str	r2, [r3, #56]	; 0x38
 810654a:	e005      	b.n	8106558 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106550:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8106558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810655a:	2b01      	cmp	r3, #1
 810655c:	d118      	bne.n	8106590 <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810655e:	687b      	ldr	r3, [r7, #4]
 8106560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106562:	b29a      	uxth	r2, r3
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810656c:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 8106570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106574:	687a      	ldr	r2, [r7, #4]
 8106576:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	689b      	ldr	r3, [r3, #8]
 810657c:	f043 0206 	orr.w	r2, r3, #6
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8106584:	687b      	ldr	r3, [r7, #4]
 8106586:	689b      	ldr	r3, [r3, #8]
 8106588:	f043 0220 	orr.w	r2, r3, #32
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8106590:	7bfb      	ldrb	r3, [r7, #15]
}
 8106592:	4618      	mov	r0, r3
 8106594:	3710      	adds	r7, #16
 8106596:	46bd      	mov	sp, r7
 8106598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810659c:	b004      	add	sp, #16
 810659e:	4770      	bx	lr

081065a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 81065a0:	b480      	push	{r7}
 81065a2:	b083      	sub	sp, #12
 81065a4:	af00      	add	r7, sp, #0
 81065a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	689b      	ldr	r3, [r3, #8]
 81065ac:	f023 0201 	bic.w	r2, r3, #1
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 81065b4:	2300      	movs	r3, #0
}
 81065b6:	4618      	mov	r0, r3
 81065b8:	370c      	adds	r7, #12
 81065ba:	46bd      	mov	sp, r7
 81065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065c0:	4770      	bx	lr

081065c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 81065c2:	b580      	push	{r7, lr}
 81065c4:	b084      	sub	sp, #16
 81065c6:	af00      	add	r7, sp, #0
 81065c8:	6078      	str	r0, [r7, #4]
 81065ca:	460b      	mov	r3, r1
 81065cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 81065ce:	2300      	movs	r3, #0
 81065d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 81065d2:	687b      	ldr	r3, [r7, #4]
 81065d4:	68db      	ldr	r3, [r3, #12]
 81065d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 81065de:	78fb      	ldrb	r3, [r7, #3]
 81065e0:	2b01      	cmp	r3, #1
 81065e2:	d115      	bne.n	8106610 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	68db      	ldr	r3, [r3, #12]
 81065e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 81065f0:	2001      	movs	r0, #1
 81065f2:	f7fa ff5b 	bl	81014ac <HAL_Delay>
      ms++;
 81065f6:	68fb      	ldr	r3, [r7, #12]
 81065f8:	3301      	adds	r3, #1
 81065fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 81065fc:	6878      	ldr	r0, [r7, #4]
 81065fe:	f000 fa29 	bl	8106a54 <USB_GetMode>
 8106602:	4603      	mov	r3, r0
 8106604:	2b01      	cmp	r3, #1
 8106606:	d01e      	beq.n	8106646 <USB_SetCurrentMode+0x84>
 8106608:	68fb      	ldr	r3, [r7, #12]
 810660a:	2b31      	cmp	r3, #49	; 0x31
 810660c:	d9f0      	bls.n	81065f0 <USB_SetCurrentMode+0x2e>
 810660e:	e01a      	b.n	8106646 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8106610:	78fb      	ldrb	r3, [r7, #3]
 8106612:	2b00      	cmp	r3, #0
 8106614:	d115      	bne.n	8106642 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	68db      	ldr	r3, [r3, #12]
 810661a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8106622:	2001      	movs	r0, #1
 8106624:	f7fa ff42 	bl	81014ac <HAL_Delay>
      ms++;
 8106628:	68fb      	ldr	r3, [r7, #12]
 810662a:	3301      	adds	r3, #1
 810662c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 810662e:	6878      	ldr	r0, [r7, #4]
 8106630:	f000 fa10 	bl	8106a54 <USB_GetMode>
 8106634:	4603      	mov	r3, r0
 8106636:	2b00      	cmp	r3, #0
 8106638:	d005      	beq.n	8106646 <USB_SetCurrentMode+0x84>
 810663a:	68fb      	ldr	r3, [r7, #12]
 810663c:	2b31      	cmp	r3, #49	; 0x31
 810663e:	d9f0      	bls.n	8106622 <USB_SetCurrentMode+0x60>
 8106640:	e001      	b.n	8106646 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8106642:	2301      	movs	r3, #1
 8106644:	e005      	b.n	8106652 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8106646:	68fb      	ldr	r3, [r7, #12]
 8106648:	2b32      	cmp	r3, #50	; 0x32
 810664a:	d101      	bne.n	8106650 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810664c:	2301      	movs	r3, #1
 810664e:	e000      	b.n	8106652 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8106650:	2300      	movs	r3, #0
}
 8106652:	4618      	mov	r0, r3
 8106654:	3710      	adds	r7, #16
 8106656:	46bd      	mov	sp, r7
 8106658:	bd80      	pop	{r7, pc}
	...

0810665c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810665c:	b084      	sub	sp, #16
 810665e:	b580      	push	{r7, lr}
 8106660:	b086      	sub	sp, #24
 8106662:	af00      	add	r7, sp, #0
 8106664:	6078      	str	r0, [r7, #4]
 8106666:	f107 0024 	add.w	r0, r7, #36	; 0x24
 810666a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810666e:	2300      	movs	r3, #0
 8106670:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8106672:	687b      	ldr	r3, [r7, #4]
 8106674:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8106676:	2300      	movs	r3, #0
 8106678:	613b      	str	r3, [r7, #16]
 810667a:	e009      	b.n	8106690 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810667c:	687a      	ldr	r2, [r7, #4]
 810667e:	693b      	ldr	r3, [r7, #16]
 8106680:	3340      	adds	r3, #64	; 0x40
 8106682:	009b      	lsls	r3, r3, #2
 8106684:	4413      	add	r3, r2
 8106686:	2200      	movs	r2, #0
 8106688:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810668a:	693b      	ldr	r3, [r7, #16]
 810668c:	3301      	adds	r3, #1
 810668e:	613b      	str	r3, [r7, #16]
 8106690:	693b      	ldr	r3, [r7, #16]
 8106692:	2b0e      	cmp	r3, #14
 8106694:	d9f2      	bls.n	810667c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8106696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106698:	2b00      	cmp	r3, #0
 810669a:	d11c      	bne.n	81066d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810669c:	68fb      	ldr	r3, [r7, #12]
 810669e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81066a2:	685b      	ldr	r3, [r3, #4]
 81066a4:	68fa      	ldr	r2, [r7, #12]
 81066a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81066aa:	f043 0302 	orr.w	r3, r3, #2
 81066ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 81066b0:	687b      	ldr	r3, [r7, #4]
 81066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81066b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 81066b8:	687b      	ldr	r3, [r7, #4]
 81066ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	681b      	ldr	r3, [r3, #0]
 81066c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	681b      	ldr	r3, [r3, #0]
 81066cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	601a      	str	r2, [r3, #0]
 81066d4:	e005      	b.n	81066e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81066da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 81066e2:	68fb      	ldr	r3, [r7, #12]
 81066e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 81066e8:	461a      	mov	r2, r3
 81066ea:	2300      	movs	r3, #0
 81066ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 81066ee:	68fb      	ldr	r3, [r7, #12]
 81066f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81066f4:	4619      	mov	r1, r3
 81066f6:	68fb      	ldr	r3, [r7, #12]
 81066f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81066fc:	461a      	mov	r2, r3
 81066fe:	680b      	ldr	r3, [r1, #0]
 8106700:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8106702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106704:	2b01      	cmp	r3, #1
 8106706:	d10c      	bne.n	8106722 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8106708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810670a:	2b00      	cmp	r3, #0
 810670c:	d104      	bne.n	8106718 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810670e:	2100      	movs	r1, #0
 8106710:	6878      	ldr	r0, [r7, #4]
 8106712:	f000 f965 	bl	81069e0 <USB_SetDevSpeed>
 8106716:	e008      	b.n	810672a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8106718:	2101      	movs	r1, #1
 810671a:	6878      	ldr	r0, [r7, #4]
 810671c:	f000 f960 	bl	81069e0 <USB_SetDevSpeed>
 8106720:	e003      	b.n	810672a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8106722:	2103      	movs	r1, #3
 8106724:	6878      	ldr	r0, [r7, #4]
 8106726:	f000 f95b 	bl	81069e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810672a:	2110      	movs	r1, #16
 810672c:	6878      	ldr	r0, [r7, #4]
 810672e:	f000 f8f3 	bl	8106918 <USB_FlushTxFifo>
 8106732:	4603      	mov	r3, r0
 8106734:	2b00      	cmp	r3, #0
 8106736:	d001      	beq.n	810673c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8106738:	2301      	movs	r3, #1
 810673a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810673c:	6878      	ldr	r0, [r7, #4]
 810673e:	f000 f91f 	bl	8106980 <USB_FlushRxFifo>
 8106742:	4603      	mov	r3, r0
 8106744:	2b00      	cmp	r3, #0
 8106746:	d001      	beq.n	810674c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8106748:	2301      	movs	r3, #1
 810674a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810674c:	68fb      	ldr	r3, [r7, #12]
 810674e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8106752:	461a      	mov	r2, r3
 8106754:	2300      	movs	r3, #0
 8106756:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8106758:	68fb      	ldr	r3, [r7, #12]
 810675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810675e:	461a      	mov	r2, r3
 8106760:	2300      	movs	r3, #0
 8106762:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8106764:	68fb      	ldr	r3, [r7, #12]
 8106766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810676a:	461a      	mov	r2, r3
 810676c:	2300      	movs	r3, #0
 810676e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8106770:	2300      	movs	r3, #0
 8106772:	613b      	str	r3, [r7, #16]
 8106774:	e043      	b.n	81067fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8106776:	693b      	ldr	r3, [r7, #16]
 8106778:	015a      	lsls	r2, r3, #5
 810677a:	68fb      	ldr	r3, [r7, #12]
 810677c:	4413      	add	r3, r2
 810677e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8106782:	681b      	ldr	r3, [r3, #0]
 8106784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8106788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810678c:	d118      	bne.n	81067c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 810678e:	693b      	ldr	r3, [r7, #16]
 8106790:	2b00      	cmp	r3, #0
 8106792:	d10a      	bne.n	81067aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8106794:	693b      	ldr	r3, [r7, #16]
 8106796:	015a      	lsls	r2, r3, #5
 8106798:	68fb      	ldr	r3, [r7, #12]
 810679a:	4413      	add	r3, r2
 810679c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81067a0:	461a      	mov	r2, r3
 81067a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 81067a6:	6013      	str	r3, [r2, #0]
 81067a8:	e013      	b.n	81067d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 81067aa:	693b      	ldr	r3, [r7, #16]
 81067ac:	015a      	lsls	r2, r3, #5
 81067ae:	68fb      	ldr	r3, [r7, #12]
 81067b0:	4413      	add	r3, r2
 81067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81067b6:	461a      	mov	r2, r3
 81067b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 81067bc:	6013      	str	r3, [r2, #0]
 81067be:	e008      	b.n	81067d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 81067c0:	693b      	ldr	r3, [r7, #16]
 81067c2:	015a      	lsls	r2, r3, #5
 81067c4:	68fb      	ldr	r3, [r7, #12]
 81067c6:	4413      	add	r3, r2
 81067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81067cc:	461a      	mov	r2, r3
 81067ce:	2300      	movs	r3, #0
 81067d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 81067d2:	693b      	ldr	r3, [r7, #16]
 81067d4:	015a      	lsls	r2, r3, #5
 81067d6:	68fb      	ldr	r3, [r7, #12]
 81067d8:	4413      	add	r3, r2
 81067da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81067de:	461a      	mov	r2, r3
 81067e0:	2300      	movs	r3, #0
 81067e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 81067e4:	693b      	ldr	r3, [r7, #16]
 81067e6:	015a      	lsls	r2, r3, #5
 81067e8:	68fb      	ldr	r3, [r7, #12]
 81067ea:	4413      	add	r3, r2
 81067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81067f0:	461a      	mov	r2, r3
 81067f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 81067f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 81067f8:	693b      	ldr	r3, [r7, #16]
 81067fa:	3301      	adds	r3, #1
 81067fc:	613b      	str	r3, [r7, #16]
 81067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106800:	693a      	ldr	r2, [r7, #16]
 8106802:	429a      	cmp	r2, r3
 8106804:	d3b7      	bcc.n	8106776 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8106806:	2300      	movs	r3, #0
 8106808:	613b      	str	r3, [r7, #16]
 810680a:	e043      	b.n	8106894 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810680c:	693b      	ldr	r3, [r7, #16]
 810680e:	015a      	lsls	r2, r3, #5
 8106810:	68fb      	ldr	r3, [r7, #12]
 8106812:	4413      	add	r3, r2
 8106814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8106818:	681b      	ldr	r3, [r3, #0]
 810681a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810681e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8106822:	d118      	bne.n	8106856 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8106824:	693b      	ldr	r3, [r7, #16]
 8106826:	2b00      	cmp	r3, #0
 8106828:	d10a      	bne.n	8106840 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810682a:	693b      	ldr	r3, [r7, #16]
 810682c:	015a      	lsls	r2, r3, #5
 810682e:	68fb      	ldr	r3, [r7, #12]
 8106830:	4413      	add	r3, r2
 8106832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8106836:	461a      	mov	r2, r3
 8106838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810683c:	6013      	str	r3, [r2, #0]
 810683e:	e013      	b.n	8106868 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8106840:	693b      	ldr	r3, [r7, #16]
 8106842:	015a      	lsls	r2, r3, #5
 8106844:	68fb      	ldr	r3, [r7, #12]
 8106846:	4413      	add	r3, r2
 8106848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810684c:	461a      	mov	r2, r3
 810684e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8106852:	6013      	str	r3, [r2, #0]
 8106854:	e008      	b.n	8106868 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8106856:	693b      	ldr	r3, [r7, #16]
 8106858:	015a      	lsls	r2, r3, #5
 810685a:	68fb      	ldr	r3, [r7, #12]
 810685c:	4413      	add	r3, r2
 810685e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8106862:	461a      	mov	r2, r3
 8106864:	2300      	movs	r3, #0
 8106866:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8106868:	693b      	ldr	r3, [r7, #16]
 810686a:	015a      	lsls	r2, r3, #5
 810686c:	68fb      	ldr	r3, [r7, #12]
 810686e:	4413      	add	r3, r2
 8106870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8106874:	461a      	mov	r2, r3
 8106876:	2300      	movs	r3, #0
 8106878:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810687a:	693b      	ldr	r3, [r7, #16]
 810687c:	015a      	lsls	r2, r3, #5
 810687e:	68fb      	ldr	r3, [r7, #12]
 8106880:	4413      	add	r3, r2
 8106882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8106886:	461a      	mov	r2, r3
 8106888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810688c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810688e:	693b      	ldr	r3, [r7, #16]
 8106890:	3301      	adds	r3, #1
 8106892:	613b      	str	r3, [r7, #16]
 8106894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106896:	693a      	ldr	r2, [r7, #16]
 8106898:	429a      	cmp	r2, r3
 810689a:	d3b7      	bcc.n	810680c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810689c:	68fb      	ldr	r3, [r7, #12]
 810689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81068a2:	691b      	ldr	r3, [r3, #16]
 81068a4:	68fa      	ldr	r2, [r7, #12]
 81068a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81068aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81068ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	2200      	movs	r2, #0
 81068b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 81068b6:	687b      	ldr	r3, [r7, #4]
 81068b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 81068bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 81068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81068c0:	2b00      	cmp	r3, #0
 81068c2:	d105      	bne.n	81068d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	699b      	ldr	r3, [r3, #24]
 81068c8:	f043 0210 	orr.w	r2, r3, #16
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	699a      	ldr	r2, [r3, #24]
 81068d4:	4b0f      	ldr	r3, [pc, #60]	; (8106914 <USB_DevInit+0x2b8>)
 81068d6:	4313      	orrs	r3, r2
 81068d8:	687a      	ldr	r2, [r7, #4]
 81068da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 81068dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81068de:	2b00      	cmp	r3, #0
 81068e0:	d005      	beq.n	81068ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 81068e2:	687b      	ldr	r3, [r7, #4]
 81068e4:	699b      	ldr	r3, [r3, #24]
 81068e6:	f043 0208 	orr.w	r2, r3, #8
 81068ea:	687b      	ldr	r3, [r7, #4]
 81068ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 81068ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81068f0:	2b01      	cmp	r3, #1
 81068f2:	d107      	bne.n	8106904 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 81068f4:	687b      	ldr	r3, [r7, #4]
 81068f6:	699b      	ldr	r3, [r3, #24]
 81068f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81068fc:	f043 0304 	orr.w	r3, r3, #4
 8106900:	687a      	ldr	r2, [r7, #4]
 8106902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8106904:	7dfb      	ldrb	r3, [r7, #23]
}
 8106906:	4618      	mov	r0, r3
 8106908:	3718      	adds	r7, #24
 810690a:	46bd      	mov	sp, r7
 810690c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8106910:	b004      	add	sp, #16
 8106912:	4770      	bx	lr
 8106914:	803c3800 	.word	0x803c3800

08106918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8106918:	b480      	push	{r7}
 810691a:	b085      	sub	sp, #20
 810691c:	af00      	add	r7, sp, #0
 810691e:	6078      	str	r0, [r7, #4]
 8106920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8106922:	2300      	movs	r3, #0
 8106924:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8106926:	68fb      	ldr	r3, [r7, #12]
 8106928:	3301      	adds	r3, #1
 810692a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810692c:	68fb      	ldr	r3, [r7, #12]
 810692e:	4a13      	ldr	r2, [pc, #76]	; (810697c <USB_FlushTxFifo+0x64>)
 8106930:	4293      	cmp	r3, r2
 8106932:	d901      	bls.n	8106938 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8106934:	2303      	movs	r3, #3
 8106936:	e01b      	b.n	8106970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	691b      	ldr	r3, [r3, #16]
 810693c:	2b00      	cmp	r3, #0
 810693e:	daf2      	bge.n	8106926 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8106940:	2300      	movs	r3, #0
 8106942:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8106944:	683b      	ldr	r3, [r7, #0]
 8106946:	019b      	lsls	r3, r3, #6
 8106948:	f043 0220 	orr.w	r2, r3, #32
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8106950:	68fb      	ldr	r3, [r7, #12]
 8106952:	3301      	adds	r3, #1
 8106954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8106956:	68fb      	ldr	r3, [r7, #12]
 8106958:	4a08      	ldr	r2, [pc, #32]	; (810697c <USB_FlushTxFifo+0x64>)
 810695a:	4293      	cmp	r3, r2
 810695c:	d901      	bls.n	8106962 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810695e:	2303      	movs	r3, #3
 8106960:	e006      	b.n	8106970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	691b      	ldr	r3, [r3, #16]
 8106966:	f003 0320 	and.w	r3, r3, #32
 810696a:	2b20      	cmp	r3, #32
 810696c:	d0f0      	beq.n	8106950 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810696e:	2300      	movs	r3, #0
}
 8106970:	4618      	mov	r0, r3
 8106972:	3714      	adds	r7, #20
 8106974:	46bd      	mov	sp, r7
 8106976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810697a:	4770      	bx	lr
 810697c:	00030d40 	.word	0x00030d40

08106980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8106980:	b480      	push	{r7}
 8106982:	b085      	sub	sp, #20
 8106984:	af00      	add	r7, sp, #0
 8106986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8106988:	2300      	movs	r3, #0
 810698a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810698c:	68fb      	ldr	r3, [r7, #12]
 810698e:	3301      	adds	r3, #1
 8106990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8106992:	68fb      	ldr	r3, [r7, #12]
 8106994:	4a11      	ldr	r2, [pc, #68]	; (81069dc <USB_FlushRxFifo+0x5c>)
 8106996:	4293      	cmp	r3, r2
 8106998:	d901      	bls.n	810699e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810699a:	2303      	movs	r3, #3
 810699c:	e018      	b.n	81069d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	691b      	ldr	r3, [r3, #16]
 81069a2:	2b00      	cmp	r3, #0
 81069a4:	daf2      	bge.n	810698c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 81069a6:	2300      	movs	r3, #0
 81069a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	2210      	movs	r2, #16
 81069ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81069b0:	68fb      	ldr	r3, [r7, #12]
 81069b2:	3301      	adds	r3, #1
 81069b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81069b6:	68fb      	ldr	r3, [r7, #12]
 81069b8:	4a08      	ldr	r2, [pc, #32]	; (81069dc <USB_FlushRxFifo+0x5c>)
 81069ba:	4293      	cmp	r3, r2
 81069bc:	d901      	bls.n	81069c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 81069be:	2303      	movs	r3, #3
 81069c0:	e006      	b.n	81069d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	691b      	ldr	r3, [r3, #16]
 81069c6:	f003 0310 	and.w	r3, r3, #16
 81069ca:	2b10      	cmp	r3, #16
 81069cc:	d0f0      	beq.n	81069b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 81069ce:	2300      	movs	r3, #0
}
 81069d0:	4618      	mov	r0, r3
 81069d2:	3714      	adds	r7, #20
 81069d4:	46bd      	mov	sp, r7
 81069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069da:	4770      	bx	lr
 81069dc:	00030d40 	.word	0x00030d40

081069e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 81069e0:	b480      	push	{r7}
 81069e2:	b085      	sub	sp, #20
 81069e4:	af00      	add	r7, sp, #0
 81069e6:	6078      	str	r0, [r7, #4]
 81069e8:	460b      	mov	r3, r1
 81069ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81069ec:	687b      	ldr	r3, [r7, #4]
 81069ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 81069f0:	68fb      	ldr	r3, [r7, #12]
 81069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81069f6:	681a      	ldr	r2, [r3, #0]
 81069f8:	78fb      	ldrb	r3, [r7, #3]
 81069fa:	68f9      	ldr	r1, [r7, #12]
 81069fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8106a00:	4313      	orrs	r3, r2
 8106a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8106a04:	2300      	movs	r3, #0
}
 8106a06:	4618      	mov	r0, r3
 8106a08:	3714      	adds	r7, #20
 8106a0a:	46bd      	mov	sp, r7
 8106a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a10:	4770      	bx	lr

08106a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8106a12:	b480      	push	{r7}
 8106a14:	b085      	sub	sp, #20
 8106a16:	af00      	add	r7, sp, #0
 8106a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8106a1a:	687b      	ldr	r3, [r7, #4]
 8106a1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8106a1e:	68fb      	ldr	r3, [r7, #12]
 8106a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8106a24:	681b      	ldr	r3, [r3, #0]
 8106a26:	68fa      	ldr	r2, [r7, #12]
 8106a28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8106a2c:	f023 0303 	bic.w	r3, r3, #3
 8106a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8106a32:	68fb      	ldr	r3, [r7, #12]
 8106a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8106a38:	685b      	ldr	r3, [r3, #4]
 8106a3a:	68fa      	ldr	r2, [r7, #12]
 8106a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8106a40:	f043 0302 	orr.w	r3, r3, #2
 8106a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8106a46:	2300      	movs	r3, #0
}
 8106a48:	4618      	mov	r0, r3
 8106a4a:	3714      	adds	r7, #20
 8106a4c:	46bd      	mov	sp, r7
 8106a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a52:	4770      	bx	lr

08106a54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8106a54:	b480      	push	{r7}
 8106a56:	b083      	sub	sp, #12
 8106a58:	af00      	add	r7, sp, #0
 8106a5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	695b      	ldr	r3, [r3, #20]
 8106a60:	f003 0301 	and.w	r3, r3, #1
}
 8106a64:	4618      	mov	r0, r3
 8106a66:	370c      	adds	r7, #12
 8106a68:	46bd      	mov	sp, r7
 8106a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a6e:	4770      	bx	lr

08106a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8106a70:	b480      	push	{r7}
 8106a72:	b085      	sub	sp, #20
 8106a74:	af00      	add	r7, sp, #0
 8106a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8106a78:	2300      	movs	r3, #0
 8106a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8106a7c:	68fb      	ldr	r3, [r7, #12]
 8106a7e:	3301      	adds	r3, #1
 8106a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8106a82:	68fb      	ldr	r3, [r7, #12]
 8106a84:	4a13      	ldr	r2, [pc, #76]	; (8106ad4 <USB_CoreReset+0x64>)
 8106a86:	4293      	cmp	r3, r2
 8106a88:	d901      	bls.n	8106a8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8106a8a:	2303      	movs	r3, #3
 8106a8c:	e01b      	b.n	8106ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8106a8e:	687b      	ldr	r3, [r7, #4]
 8106a90:	691b      	ldr	r3, [r3, #16]
 8106a92:	2b00      	cmp	r3, #0
 8106a94:	daf2      	bge.n	8106a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8106a96:	2300      	movs	r3, #0
 8106a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	691b      	ldr	r3, [r3, #16]
 8106a9e:	f043 0201 	orr.w	r2, r3, #1
 8106aa2:	687b      	ldr	r3, [r7, #4]
 8106aa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8106aa6:	68fb      	ldr	r3, [r7, #12]
 8106aa8:	3301      	adds	r3, #1
 8106aaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8106aac:	68fb      	ldr	r3, [r7, #12]
 8106aae:	4a09      	ldr	r2, [pc, #36]	; (8106ad4 <USB_CoreReset+0x64>)
 8106ab0:	4293      	cmp	r3, r2
 8106ab2:	d901      	bls.n	8106ab8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8106ab4:	2303      	movs	r3, #3
 8106ab6:	e006      	b.n	8106ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8106ab8:	687b      	ldr	r3, [r7, #4]
 8106aba:	691b      	ldr	r3, [r3, #16]
 8106abc:	f003 0301 	and.w	r3, r3, #1
 8106ac0:	2b01      	cmp	r3, #1
 8106ac2:	d0f0      	beq.n	8106aa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8106ac4:	2300      	movs	r3, #0
}
 8106ac6:	4618      	mov	r0, r3
 8106ac8:	3714      	adds	r7, #20
 8106aca:	46bd      	mov	sp, r7
 8106acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ad0:	4770      	bx	lr
 8106ad2:	bf00      	nop
 8106ad4:	00030d40 	.word	0x00030d40

08106ad8 <__libc_init_array>:
 8106ad8:	b570      	push	{r4, r5, r6, lr}
 8106ada:	4d0d      	ldr	r5, [pc, #52]	; (8106b10 <__libc_init_array+0x38>)
 8106adc:	4c0d      	ldr	r4, [pc, #52]	; (8106b14 <__libc_init_array+0x3c>)
 8106ade:	1b64      	subs	r4, r4, r5
 8106ae0:	10a4      	asrs	r4, r4, #2
 8106ae2:	2600      	movs	r6, #0
 8106ae4:	42a6      	cmp	r6, r4
 8106ae6:	d109      	bne.n	8106afc <__libc_init_array+0x24>
 8106ae8:	4d0b      	ldr	r5, [pc, #44]	; (8106b18 <__libc_init_array+0x40>)
 8106aea:	4c0c      	ldr	r4, [pc, #48]	; (8106b1c <__libc_init_array+0x44>)
 8106aec:	f000 f820 	bl	8106b30 <_init>
 8106af0:	1b64      	subs	r4, r4, r5
 8106af2:	10a4      	asrs	r4, r4, #2
 8106af4:	2600      	movs	r6, #0
 8106af6:	42a6      	cmp	r6, r4
 8106af8:	d105      	bne.n	8106b06 <__libc_init_array+0x2e>
 8106afa:	bd70      	pop	{r4, r5, r6, pc}
 8106afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8106b00:	4798      	blx	r3
 8106b02:	3601      	adds	r6, #1
 8106b04:	e7ee      	b.n	8106ae4 <__libc_init_array+0xc>
 8106b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8106b0a:	4798      	blx	r3
 8106b0c:	3601      	adds	r6, #1
 8106b0e:	e7f2      	b.n	8106af6 <__libc_init_array+0x1e>
 8106b10:	08106b58 	.word	0x08106b58
 8106b14:	08106b58 	.word	0x08106b58
 8106b18:	08106b58 	.word	0x08106b58
 8106b1c:	08106b5c 	.word	0x08106b5c

08106b20 <memset>:
 8106b20:	4402      	add	r2, r0
 8106b22:	4603      	mov	r3, r0
 8106b24:	4293      	cmp	r3, r2
 8106b26:	d100      	bne.n	8106b2a <memset+0xa>
 8106b28:	4770      	bx	lr
 8106b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8106b2e:	e7f9      	b.n	8106b24 <memset+0x4>

08106b30 <_init>:
 8106b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106b32:	bf00      	nop
 8106b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106b36:	bc08      	pop	{r3}
 8106b38:	469e      	mov	lr, r3
 8106b3a:	4770      	bx	lr

08106b3c <_fini>:
 8106b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106b3e:	bf00      	nop
 8106b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106b42:	bc08      	pop	{r3}
 8106b44:	469e      	mov	lr, r3
 8106b46:	4770      	bx	lr
