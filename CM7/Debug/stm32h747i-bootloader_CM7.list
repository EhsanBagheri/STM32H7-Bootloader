
stm32h747i-bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006998  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c68  08006c68  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c70  08006c70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  24000010  08006c88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000110  08006c88  00020110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001360e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255e  00000000  00000000  0003364c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00035bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00036890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f4e1  00000000  00000000  00037488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012012  00000000  00000000  00076969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197481  00000000  00000000  0008897b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021fdfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  0021fe4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006c18 	.word	0x08006c18

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006c18 	.word	0x08006c18

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08e      	sub	sp, #56	; 0x38
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071e:	4b51      	ldr	r3, [pc, #324]	; (8000864 <MX_GPIO_Init+0x15c>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000724:	4a4f      	ldr	r2, [pc, #316]	; (8000864 <MX_GPIO_Init+0x15c>)
 8000726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072e:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <MX_GPIO_Init+0x15c>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073c:	4b49      	ldr	r3, [pc, #292]	; (8000864 <MX_GPIO_Init+0x15c>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000742:	4a48      	ldr	r2, [pc, #288]	; (8000864 <MX_GPIO_Init+0x15c>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074c:	4b45      	ldr	r3, [pc, #276]	; (8000864 <MX_GPIO_Init+0x15c>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <MX_GPIO_Init+0x15c>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	4a40      	ldr	r2, [pc, #256]	; (8000864 <MX_GPIO_Init+0x15c>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <MX_GPIO_Init+0x15c>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000778:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <MX_GPIO_Init+0x15c>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077e:	4a39      	ldr	r2, [pc, #228]	; (8000864 <MX_GPIO_Init+0x15c>)
 8000780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000788:	4b36      	ldr	r3, [pc, #216]	; (8000864 <MX_GPIO_Init+0x15c>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <MX_GPIO_Init+0x15c>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079c:	4a31      	ldr	r2, [pc, #196]	; (8000864 <MX_GPIO_Init+0x15c>)
 800079e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ba:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_GPIO_Init+0x15c>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <MX_GPIO_Init+0x160>)
 8000816:	f001 fcc9 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800081a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_GPIO_Init+0x164>)
 8000838:	f001 f9fe 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800083c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_GPIO_Init+0x160>)
 8000856:	f001 f9ef 	bl	8001c38 <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3738      	adds	r7, #56	; 0x38
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58024400 	.word	0x58024400
 8000868:	58022000 	.word	0x58022000
 800086c:	58020000 	.word	0x58020000

08000870 <boot_main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int boot_main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800087a:	4ba2      	ldr	r3, [pc, #648]	; (8000b04 <boot_main+0x294>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d11b      	bne.n	80008be <boot_main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000886:	f3bf 8f4f 	dsb	sy
}
 800088a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088c:	f3bf 8f6f 	isb	sy
}
 8000890:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000892:	4b9c      	ldr	r3, [pc, #624]	; (8000b04 <boot_main+0x294>)
 8000894:	2200      	movs	r2, #0
 8000896:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800089a:	f3bf 8f4f 	dsb	sy
}
 800089e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
}
 80008a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a6:	4b97      	ldr	r3, [pc, #604]	; (8000b04 <boot_main+0x294>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a96      	ldr	r2, [pc, #600]	; (8000b04 <boot_main+0x294>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
}
 80008b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008b8:	f3bf 8f6f 	isb	sy
}
 80008bc:	e000      	b.n	80008c0 <boot_main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008c0:	4b90      	ldr	r3, [pc, #576]	; (8000b04 <boot_main+0x294>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14e      	bne.n	800096a <boot_main+0xfa>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008cc:	4b8d      	ldr	r3, [pc, #564]	; (8000b04 <boot_main+0x294>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008d4:	f3bf 8f4f 	dsb	sy
}
 80008d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008da:	4b8a      	ldr	r3, [pc, #552]	; (8000b04 <boot_main+0x294>)
 80008dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008e0:	4a89      	ldr	r2, [pc, #548]	; (8000b08 <boot_main+0x298>)
 80008e2:	443a      	add	r2, r7
 80008e4:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008e6:	4b88      	ldr	r3, [pc, #544]	; (8000b08 <boot_main+0x298>)
 80008e8:	443b      	add	r3, r7
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	0b5b      	lsrs	r3, r3, #13
 80008ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008f2:	4a86      	ldr	r2, [pc, #536]	; (8000b0c <boot_main+0x29c>)
 80008f4:	443a      	add	r2, r7
 80008f6:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008f8:	4b83      	ldr	r3, [pc, #524]	; (8000b08 <boot_main+0x298>)
 80008fa:	443b      	add	r3, r7
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	08db      	lsrs	r3, r3, #3
 8000900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000904:	4a82      	ldr	r2, [pc, #520]	; (8000b10 <boot_main+0x2a0>)
 8000906:	443a      	add	r2, r7
 8000908:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800090a:	4b80      	ldr	r3, [pc, #512]	; (8000b0c <boot_main+0x29c>)
 800090c:	443b      	add	r3, r7
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	015a      	lsls	r2, r3, #5
 8000912:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000916:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000918:	4a7d      	ldr	r2, [pc, #500]	; (8000b10 <boot_main+0x2a0>)
 800091a:	443a      	add	r2, r7
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000920:	4978      	ldr	r1, [pc, #480]	; (8000b04 <boot_main+0x294>)
 8000922:	4313      	orrs	r3, r2
 8000924:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000928:	4b79      	ldr	r3, [pc, #484]	; (8000b10 <boot_main+0x2a0>)
 800092a:	443b      	add	r3, r7
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	4977      	ldr	r1, [pc, #476]	; (8000b10 <boot_main+0x2a0>)
 8000932:	4439      	add	r1, r7
 8000934:	600a      	str	r2, [r1, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1e7      	bne.n	800090a <boot_main+0x9a>
    } while(sets-- != 0U);
 800093a:	4b74      	ldr	r3, [pc, #464]	; (8000b0c <boot_main+0x29c>)
 800093c:	443b      	add	r3, r7
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	4972      	ldr	r1, [pc, #456]	; (8000b0c <boot_main+0x29c>)
 8000944:	4439      	add	r1, r7
 8000946:	600a      	str	r2, [r1, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1d5      	bne.n	80008f8 <boot_main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 800094c:	f3bf 8f4f 	dsb	sy
}
 8000950:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000952:	4b6c      	ldr	r3, [pc, #432]	; (8000b04 <boot_main+0x294>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a6b      	ldr	r2, [pc, #428]	; (8000b04 <boot_main+0x294>)
 8000958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800095c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800095e:	f3bf 8f4f 	dsb	sy
}
 8000962:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000964:	f3bf 8f6f 	isb	sy
}
 8000968:	e000      	b.n	800096c <boot_main+0xfc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800096a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800096c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000970:	4a68      	ldr	r2, [pc, #416]	; (8000b14 <boot_main+0x2a4>)
 8000972:	443a      	add	r2, r7
 8000974:	6013      	str	r3, [r2, #0]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000976:	bf00      	nop
 8000978:	4b67      	ldr	r3, [pc, #412]	; (8000b18 <boot_main+0x2a8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000980:	2b00      	cmp	r3, #0
 8000982:	d008      	beq.n	8000996 <boot_main+0x126>
 8000984:	4b63      	ldr	r3, [pc, #396]	; (8000b14 <boot_main+0x2a4>)
 8000986:	443b      	add	r3, r7
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1e5a      	subs	r2, r3, #1
 800098c:	4961      	ldr	r1, [pc, #388]	; (8000b14 <boot_main+0x2a4>)
 800098e:	4439      	add	r1, r7
 8000990:	600a      	str	r2, [r1, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	dcf0      	bgt.n	8000978 <boot_main+0x108>
  if ( timeout < 0 )
 8000996:	4b5f      	ldr	r3, [pc, #380]	; (8000b14 <boot_main+0x2a4>)
 8000998:	443b      	add	r3, r7
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	da01      	bge.n	80009a4 <boot_main+0x134>
  {
  Error_Handler();
 80009a0:	f000 f982 	bl	8000ca8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a4:	f000 ffa2 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a8:	f000 f8f8 	bl	8000b9c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009ac:	4b5a      	ldr	r3, [pc, #360]	; (8000b18 <boot_main+0x2a8>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <boot_main+0x2a8>)
 80009b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b56      	ldr	r3, [pc, #344]	; (8000b18 <boot_main+0x2a8>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009c6:	f107 0218 	add.w	r2, r7, #24
 80009ca:	f842 3c18 	str.w	r3, [r2, #-24]
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	f853 3c18 	ldr.w	r3, [r3, #-24]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f001 fc02 	bl	80021e0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f001 fc18 	bl	8002214 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e8:	4a4a      	ldr	r2, [pc, #296]	; (8000b14 <boot_main+0x2a4>)
 80009ea:	443a      	add	r2, r7
 80009ec:	6013      	str	r3, [r2, #0]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009ee:	bf00      	nop
 80009f0:	4b49      	ldr	r3, [pc, #292]	; (8000b18 <boot_main+0x2a8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d108      	bne.n	8000a0e <boot_main+0x19e>
 80009fc:	4b45      	ldr	r3, [pc, #276]	; (8000b14 <boot_main+0x2a4>)
 80009fe:	443b      	add	r3, r7
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	4943      	ldr	r1, [pc, #268]	; (8000b14 <boot_main+0x2a4>)
 8000a06:	4439      	add	r1, r7
 8000a08:	600a      	str	r2, [r1, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	dcf0      	bgt.n	80009f0 <boot_main+0x180>
if ( timeout < 0 )
 8000a0e:	4b41      	ldr	r3, [pc, #260]	; (8000b14 <boot_main+0x2a4>)
 8000a10:	443b      	add	r3, r7
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	da01      	bge.n	8000a1c <boot_main+0x1ac>
{
Error_Handler();
 8000a18:	f000 f946 	bl	8000ca8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f7ff fe74 	bl	8000708 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a20:	f000 fe84 	bl	800172c <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8000a24:	f000 f946 	bl	8000cb4 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  uint8_t buffer_test[MEMORY_SECTOR_SIZE];
  uint32_t var = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	4a3c      	ldr	r2, [pc, #240]	; (8000b1c <boot_main+0x2ac>)
 8000a2c:	443a      	add	r2, r7
 8000a2e:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a36:	483a      	ldr	r0, [pc, #232]	; (8000b20 <boot_main+0x2b0>)
 8000a38:	f001 fbb8 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	4837      	ldr	r0, [pc, #220]	; (8000b20 <boot_main+0x2b0>)
 8000a44:	f001 fbb2 	bl	80021ac <HAL_GPIO_WritePin>
  CSP_QUADSPI_Init();
 8000a48:	f000 fac4 	bl	8000fd4 <CSP_QUADSPI_Init>

  for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <boot_main+0x2ac>)
 8000a50:	443a      	add	r2, r7
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	e013      	b.n	8000a7e <boot_main+0x20e>
      buffer_test[var] = (var & 0xff);
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <boot_main+0x2ac>)
 8000a58:	443b      	add	r3, r7
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	4619      	mov	r1, r3
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <boot_main+0x2ac>)
 8000a66:	443b      	add	r3, r7
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3b14      	subs	r3, #20
 8000a6e:	701a      	strb	r2, [r3, #0]
  for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <boot_main+0x2ac>)
 8000a72:	443b      	add	r3, r7
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a28      	ldr	r2, [pc, #160]	; (8000b1c <boot_main+0x2ac>)
 8000a7a:	443a      	add	r2, r7
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <boot_main+0x2ac>)
 8000a80:	443b      	add	r3, r7
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a88:	d3e5      	bcc.n	8000a56 <boot_main+0x1e6>
  }

  for (var = 0; var < SECTORS_COUNT; var++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <boot_main+0x2ac>)
 8000a8e:	443a      	add	r2, r7
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e02b      	b.n	8000aec <boot_main+0x27c>

      if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <boot_main+0x2ac>)
 8000a96:	443b      	add	r3, r7
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	041a      	lsls	r2, r3, #16
                               (var + 1) * MEMORY_SECTOR_SIZE - 1) != HAL_OK) {
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <boot_main+0x2ac>)
 8000a9e:	443b      	add	r3, r7
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	041b      	lsls	r3, r3, #16
      if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4610      	mov	r0, r2
 8000aac:	f000 fbe2 	bl	8001274 <CSP_QSPI_EraseSector>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d000      	beq.n	8000ab8 <boot_main+0x248>

          while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <boot_main+0x246>
              ;  //breakpoint - error detected
      }

      if (CSP_QSPI_WriteMemory(buffer_test, var * MEMORY_SECTOR_SIZE, sizeof(buffer_test)) != HAL_OK) {
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <boot_main+0x2ac>)
 8000aba:	443b      	add	r3, r7
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	0419      	lsls	r1, r3, #16
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <boot_main+0x2b4>)
 8000ac2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000ac6:	f103 0318 	add.w	r3, r3, #24
 8000aca:	443b      	add	r3, r7
 8000acc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fc23 	bl	800131c <CSP_QSPI_WriteMemory>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d000      	beq.n	8000ade <boot_main+0x26e>

          while (1)
 8000adc:	e7fe      	b.n	8000adc <boot_main+0x26c>
  for (var = 0; var < SECTORS_COUNT; var++) {
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <boot_main+0x2ac>)
 8000ae0:	443b      	add	r3, r7
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <boot_main+0x2ac>)
 8000ae8:	443a      	add	r2, r7
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <boot_main+0x2ac>)
 8000aee:	443b      	add	r3, r7
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b63      	cmp	r3, #99	; 0x63
 8000af4:	d9ce      	bls.n	8000a94 <boot_main+0x224>
              ;  //breakpoint - error detected
      }

  }

  if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000af6:	f000 fc9f 	bl	8001438 <CSP_QSPI_EnableMemoryMappedMode>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d013      	beq.n	8000b28 <boot_main+0x2b8>

      while (1)
 8000b00:	e7fe      	b.n	8000b00 <boot_main+0x290>
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	0001000c 	.word	0x0001000c
 8000b0c:	00010008 	.word	0x00010008
 8000b10:	00010004 	.word	0x00010004
 8000b14:	00010014 	.word	0x00010014
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	00010010 	.word	0x00010010
 8000b20:	58022000 	.word	0x58022000
 8000b24:	fffeffec 	.word	0xfffeffec
          ; //breakpoint - error detected
  }

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <boot_main+0x320>)
 8000b30:	f001 fb3c 	bl	80021ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3a:	4815      	ldr	r0, [pc, #84]	; (8000b90 <boot_main+0x320>)
 8000b3c:	f001 fb36 	bl	80021ac <HAL_GPIO_WritePin>

  for (var = 0; var < SECTORS_COUNT; var++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <boot_main+0x324>)
 8000b44:	443a      	add	r2, r7
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e01c      	b.n	8000b84 <boot_main+0x314>
      if (memcmp(buffer_test,
                 (uint8_t*) (0x90000000 + var * MEMORY_SECTOR_SIZE),
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <boot_main+0x324>)
 8000b4c:	443b      	add	r3, r7
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000b54:	041b      	lsls	r3, r3, #16
      if (memcmp(buffer_test,
 8000b56:	4619      	mov	r1, r3
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <boot_main+0x328>)
 8000b5a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000b5e:	f103 0318 	add.w	r3, r3, #24
 8000b62:	443b      	add	r3, r7
 8000b64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f006 f83d 	bl	8006be8 <memcmp>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d000      	beq.n	8000b76 <boot_main+0x306>
                 MEMORY_SECTOR_SIZE) != HAL_OK) {
          while (1)
 8000b74:	e7fe      	b.n	8000b74 <boot_main+0x304>
  for (var = 0; var < SECTORS_COUNT; var++) {
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <boot_main+0x324>)
 8000b78:	443b      	add	r3, r7
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <boot_main+0x324>)
 8000b80:	443a      	add	r2, r7
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <boot_main+0x324>)
 8000b86:	443b      	add	r3, r7
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b63      	cmp	r3, #99	; 0x63
 8000b8c:	d9dd      	bls.n	8000b4a <boot_main+0x2da>
//  gotoFirmware(FW_CM7_START_ADD);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <boot_main+0x31e>
 8000b90:	58022000 	.word	0x58022000
 8000b94:	00010010 	.word	0x00010010
 8000b98:	fffeffec 	.word	0xfffeffec

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09c      	sub	sp, #112	; 0x70
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	224c      	movs	r2, #76	; 0x4c
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 f82c 	bl	8006c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f006 f826 	bl	8006c08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bbc:	2004      	movs	r0, #4
 8000bbe:	f001 fb3d 	bl	800223c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemClock_Config+0x104>)
 8000bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bca:	4a35      	ldr	r2, [pc, #212]	; (8000ca0 <SystemClock_Config+0x104>)
 8000bcc:	f023 0301 	bic.w	r3, r3, #1
 8000bd0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bd2:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <SystemClock_Config+0x104>)
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <SystemClock_Config+0x108>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a30      	ldr	r2, [pc, #192]	; (8000ca4 <SystemClock_Config+0x108>)
 8000be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <SystemClock_Config+0x108>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bf4:	bf00      	nop
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <SystemClock_Config+0x108>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c02:	d1f8      	bne.n	8000bf6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000c04:	230b      	movs	r3, #11
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c12:	2340      	movs	r3, #64	; 0x40
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c16:	2301      	movs	r3, #1
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000c26:	2310      	movs	r3, #16
 8000c28:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c36:	230c      	movs	r3, #12
 8000c38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 f818 	bl	8002c7c <HAL_RCC_OscConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c52:	f000 f829 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	233f      	movs	r3, #63	; 0x3f
 8000c58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fc58 	bl	8003530 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000c86:	f000 f80f 	bl	8000ca8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000c8a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f002 fe03 	bl	800389c <HAL_RCC_MCOConfig>
}
 8000c96:	bf00      	nop
 8000c98:	3770      	adds	r7, #112	; 0x70
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	58000400 	.word	0x58000400
 8000ca4:	58024800 	.word	0x58024800

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_QUADSPI_Init+0x48>)
 8000cba:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <MX_QUADSPI_Init+0x4c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_QUADSPI_Init+0x48>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MX_QUADSPI_Init+0x48>)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_QUADSPI_Init+0x48>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_QUADSPI_Init+0x48>)
 8000cd2:	2219      	movs	r2, #25
 8000cd4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_QUADSPI_Init+0x48>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_QUADSPI_Init+0x48>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_QUADSPI_Init+0x48>)
 8000ce4:	2240      	movs	r2, #64	; 0x40
 8000ce6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_QUADSPI_Init+0x48>)
 8000cea:	f001 fb01 	bl	80022f0 <HAL_QSPI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000cf4:	f7ff ffd8 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2400002c 	.word	0x2400002c
 8000d00:	52005000 	.word	0x52005000

08000d04 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0c0      	sub	sp, #256	; 0x100
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	22c8      	movs	r2, #200	; 0xc8
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 ff6f 	bl	8006c08 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a85      	ldr	r2, [pc, #532]	; (8000f44 <HAL_QSPI_MspInit+0x240>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	f040 8102 	bne.w	8000f3a <HAL_QSPI_MspInit+0x236>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 ffe6 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000d56:	f7ff ffa7 	bl	8000ca8 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d5a:	4b7b      	ldr	r3, [pc, #492]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000d5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d60:	4a79      	ldr	r2, [pc, #484]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d66:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d6a:	4b77      	ldr	r3, [pc, #476]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000d6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d78:	4b73      	ldr	r3, [pc, #460]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	4a72      	ldr	r2, [pc, #456]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d88:	4b6f      	ldr	r3, [pc, #444]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d96:	4b6c      	ldr	r3, [pc, #432]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a6a      	ldr	r2, [pc, #424]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000d9e:	f043 0320 	orr.w	r3, r3, #32
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b68      	ldr	r3, [pc, #416]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0320 	and.w	r3, r3, #32
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db4:	4b64      	ldr	r3, [pc, #400]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a63      	ldr	r2, [pc, #396]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b60      	ldr	r3, [pc, #384]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a5b      	ldr	r2, [pc, #364]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b59      	ldr	r3, [pc, #356]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df0:	4b55      	ldr	r3, [pc, #340]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	4a54      	ldr	r2, [pc, #336]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e00:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <HAL_QSPI_MspInit+0x244>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8000e0e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e28:	2309      	movs	r3, #9
 8000e2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e32:	4619      	mov	r1, r3
 8000e34:	4845      	ldr	r0, [pc, #276]	; (8000f4c <HAL_QSPI_MspInit+0x248>)
 8000e36:	f000 feff 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000e3a:	2340      	movs	r3, #64	; 0x40
 8000e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e52:	230a      	movs	r3, #10
 8000e54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	483b      	ldr	r0, [pc, #236]	; (8000f4c <HAL_QSPI_MspInit+0x248>)
 8000e60:	f000 feea 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8000e64:	23c0      	movs	r3, #192	; 0xc0
 8000e66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e7c:	2309      	movs	r3, #9
 8000e7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e82:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e86:	4619      	mov	r1, r3
 8000e88:	4831      	ldr	r0, [pc, #196]	; (8000f50 <HAL_QSPI_MspInit+0x24c>)
 8000e8a:	f000 fed5 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8000e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4826      	ldr	r0, [pc, #152]	; (8000f50 <HAL_QSPI_MspInit+0x24c>)
 8000eb6:	f000 febf 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8000eba:	230c      	movs	r3, #12
 8000ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000edc:	4619      	mov	r1, r3
 8000ede:	481d      	ldr	r0, [pc, #116]	; (8000f54 <HAL_QSPI_MspInit+0x250>)
 8000ee0:	f000 feaa 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000efc:	2309      	movs	r3, #9
 8000efe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f06:	4619      	mov	r1, r3
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <HAL_QSPI_MspInit+0x254>)
 8000f0a:	f000 fe95 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8000f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f28:	2309      	movs	r3, #9
 8000f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f32:	4619      	mov	r1, r3
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <HAL_QSPI_MspInit+0x258>)
 8000f36:	f000 fe7f 	bl	8001c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	52005000 	.word	0x52005000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58021800 	.word	0x58021800
 8000f50:	58021400 	.word	0x58021400
 8000f54:	58021c00 	.word	0x58021c00
 8000f58:	58020400 	.word	0x58020400
 8000f5c:	58020c00 	.word	0x58020c00

08000f60 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_QSPI_MspDeInit+0x58>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d11e      	bne.n	8000fb0 <HAL_QSPI_MspDeInit+0x50>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_QSPI_MspDeInit+0x5c>)
 8000f74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_QSPI_MspDeInit+0x5c>)
 8000f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f7e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin|QSPI_BK1_NCS_Pin);
 8000f82:	f244 2140 	movw	r1, #16960	; 0x4240
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <HAL_QSPI_MspDeInit+0x60>)
 8000f88:	f001 f806 	bl	8001f98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO1_Pin);
 8000f8c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <HAL_QSPI_MspDeInit+0x64>)
 8000f92:	f001 f801 	bl	8001f98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin);
 8000f96:	210c      	movs	r1, #12
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <HAL_QSPI_MspDeInit+0x68>)
 8000f9a:	f000 fffd 	bl	8001f98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin);
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	480a      	ldr	r0, [pc, #40]	; (8000fcc <HAL_QSPI_MspDeInit+0x6c>)
 8000fa2:	f000 fff9 	bl	8001f98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_BK1_IO0_GPIO_Port, QSPI_BK1_IO0_Pin);
 8000fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <HAL_QSPI_MspDeInit+0x70>)
 8000fac:	f000 fff4 	bl	8001f98 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	52005000 	.word	0x52005000
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58021800 	.word	0x58021800
 8000fc4:	58021400 	.word	0x58021400
 8000fc8:	58021c00 	.word	0x58021c00
 8000fcc:	58020400 	.word	0x58020400
 8000fd0:	58020c00 	.word	0x58020c00

08000fd4 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t
CSP_QUADSPI_Init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <CSP_QUADSPI_Init+0x78>)
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <CSP_QUADSPI_Init+0x7c>)
 8000fdc:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000fde:	481b      	ldr	r0, [pc, #108]	; (800104c <CSP_QUADSPI_Init+0x78>)
 8000fe0:	f001 f9fa 	bl	80023d8 <HAL_QSPI_DeInit>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e02c      	b.n	8001048 <CSP_QUADSPI_Init+0x74>
    }

    MX_QUADSPI_Init();
 8000fee:	f7ff fe61 	bl	8000cb4 <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 8000ff2:	f000 fa55 	bl	80014a0 <QSPI_ResetChip>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e023      	b.n	8001048 <CSP_QUADSPI_Init+0x74>
    }

    HAL_Delay(1);
 8001000:	2001      	movs	r0, #1
 8001002:	f000 fd05 	bl	8001a10 <HAL_Delay>

    if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001006:	f241 3088 	movw	r0, #5000	; 0x1388
 800100a:	f000 f823 	bl	8001054 <QSPI_AutoPollingMemReady>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <CSP_QUADSPI_Init+0x44>
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e017      	b.n	8001048 <CSP_QUADSPI_Init+0x74>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8001018:	f000 f856 	bl	80010c8 <QSPI_WriteEnable>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <CSP_QUADSPI_Init+0x52>

        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e010      	b.n	8001048 <CSP_QUADSPI_Init+0x74>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8001026:	f000 f89b 	bl	8001160 <QSPI_Configuration>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <CSP_QUADSPI_Init+0x60>
        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e009      	b.n	8001048 <CSP_QUADSPI_Init+0x74>
    }

    if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001034:	f241 3088 	movw	r0, #5000	; 0x1388
 8001038:	f000 f80c 	bl	8001054 <QSPI_AutoPollingMemReady>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <CSP_QUADSPI_Init+0x72>
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <CSP_QUADSPI_Init+0x74>
    }

    return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2400002c 	.word	0x2400002c
 8001050:	52005000 	.word	0x52005000

08001054 <QSPI_AutoPollingMemReady>:

    return HAL_OK;
}

static uint8_t
QSPI_AutoPollingMemReady(uint32_t Timeout) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b096      	sub	sp, #88	; 0x58
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800105c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001062:	2305      	movs	r3, #5
 8001064:	623b      	str	r3, [r7, #32]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001066:	2300      	movs	r3, #0
 8001068:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.DataMode = QSPI_DATA_1_LINE;
 800106e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001072:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DummyCycles = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800107c:	2300      	movs	r3, #0
 800107e:	653b      	str	r3, [r7, #80]	; 0x50
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001080:	2300      	movs	r3, #0
 8001082:	657b      	str	r3, [r7, #84]	; 0x54

    sConfig.Match = 0x0000;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
    sConfig.Mask = 0x0101;
 8001088:	f240 1301 	movw	r3, #257	; 0x101
 800108c:	60fb      	str	r3, [r7, #12]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
    sConfig.StatusBytesSize = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	617b      	str	r3, [r7, #20]
    sConfig.Interval = 0x10;
 8001096:	2310      	movs	r3, #16
 8001098:	613b      	str	r3, [r7, #16]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800109a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109e:	61fb      	str	r3, [r7, #28]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, Timeout) != HAL_OK) {
 80010a0:	f107 0208 	add.w	r2, r7, #8
 80010a4:	f107 0120 	add.w	r1, r7, #32
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <QSPI_AutoPollingMemReady+0x70>)
 80010ac:	f001 fb41 	bl	8002732 <HAL_QSPI_AutoPolling>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <QSPI_AutoPollingMemReady+0x66>
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <QSPI_AutoPollingMemReady+0x68>
    }

    return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3758      	adds	r7, #88	; 0x58
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400002c 	.word	0x2400002c

080010c8 <QSPI_WriteEnable>:

static uint8_t
QSPI_WriteEnable(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 80010d4:	2306      	movs	r3, #6
 80010d6:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010ec:	2300      	movs	r3, #0
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010f0:	2300      	movs	r3, #0
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4619      	mov	r1, r3
 80010fe:	4817      	ldr	r0, [pc, #92]	; (800115c <QSPI_WriteEnable+0x94>)
 8001100:	f001 f98a 	bl	8002418 <HAL_QSPI_Command>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e021      	b.n	8001152 <QSPI_WriteEnable+0x8a>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x0202;
 800110e:	f240 2302 	movw	r3, #514	; 0x202
 8001112:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x0202;
 8001114:	f240 2302 	movw	r3, #514	; 0x202
 8001118:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8001122:	2310      	movs	r3, #16
 8001124:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800112a:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 800112c:	2305      	movs	r3, #5
 800112e:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001134:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001136:	463a      	mov	r2, r7
 8001138:	f107 0118 	add.w	r1, r7, #24
 800113c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <QSPI_WriteEnable+0x94>)
 8001142:	f001 faf6 	bl	8002732 <HAL_QSPI_AutoPolling>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <QSPI_WriteEnable+0x88>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <QSPI_WriteEnable+0x8a>
    }

    return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3750      	adds	r7, #80	; 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2400002c 	.word	0x2400002c

08001160 <QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
static uint8_t
QSPI_Configuration(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b090      	sub	sp, #64	; 0x40
 8001164:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint16_t reg;


    /*enter 4 byte address*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116a:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = ENTER_4_BYTE_ADD_CMD;
 800116c:	23b7      	movs	r3, #183	; 0xb7
 800116e:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_NONE;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.NbData = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	f241 3288 	movw	r2, #5000	; 0x1388
 8001198:	4619      	mov	r1, r3
 800119a:	4834      	ldr	r0, [pc, #208]	; (800126c <QSPI_Configuration+0x10c>)
 800119c:	f001 f93c 	bl	8002418 <HAL_QSPI_Command>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e05c      	b.n	8001264 <QSPI_Configuration+0x104>
    }


    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 80011b0:	2385      	movs	r3, #133	; 0x85
 80011b2:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80011bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011ce:	2300      	movs	r3, #0
 80011d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.NbData = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
 80011de:	4619      	mov	r1, r3
 80011e0:	4822      	ldr	r0, [pc, #136]	; (800126c <QSPI_Configuration+0x10c>)
 80011e2:	f001 f919 	bl	8002418 <HAL_QSPI_Command>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <QSPI_Configuration+0x90>
        != HAL_OK) {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e039      	b.n	8001264 <QSPI_Configuration+0x104>
    }


    if (HAL_QSPI_Receive(&hqspi, (uint8_t*)(&reg),
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f6:	4619      	mov	r1, r3
 80011f8:	481c      	ldr	r0, [pc, #112]	; (800126c <QSPI_Configuration+0x10c>)
 80011fa:	f001 f9fd 	bl	80025f8 <HAL_QSPI_Receive>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <QSPI_Configuration+0xa8>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e02d      	b.n	8001264 <QSPI_Configuration+0x104>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 8001208:	f7ff ff5e 	bl	80010c8 <QSPI_WriteEnable>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <QSPI_Configuration+0xb6>

        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e026      	b.n	8001264 <QSPI_Configuration+0x104>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0F0, ((DUMMY_CLOCK_CYCLES_READ_QUAD << 4) |
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	b21a      	sxth	r2, r3
 800121a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800121e:	4013      	ands	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <QSPI_Configuration+0x110>)
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	b29b      	uxth	r3, r3
 800122a:	80fb      	strh	r3, [r7, #6]
                             (DUMMY_CLOCK_CYCLES_READ_QUAD << 12)));


    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 800122c:	2381      	movs	r3, #129	; 0x81
 800122e:	60bb      	str	r3, [r7, #8]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4619      	mov	r1, r3
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <QSPI_Configuration+0x10c>)
 800123c:	f001 f8ec 	bl	8002418 <HAL_QSPI_Command>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <QSPI_Configuration+0xea>
        != HAL_OK) {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00c      	b.n	8001264 <QSPI_Configuration+0x104>
    }

    if (HAL_QSPI_Transmit(&hqspi, (uint8_t*)(&reg),
 800124a:	1dbb      	adds	r3, r7, #6
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <QSPI_Configuration+0x10c>)
 8001254:	f001 f93e 	bl	80024d4 <HAL_QSPI_Transmit>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <QSPI_Configuration+0x102>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <QSPI_Configuration+0x104>
    }
    return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3740      	adds	r7, #64	; 0x40
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2400002c 	.word	0x2400002c
 8001270:	ffffa0a0 	.word	0xffffa0a0

08001274 <CSP_QSPI_EraseSector>:

uint8_t
CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b090      	sub	sp, #64	; 0x40
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]

    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <CSP_QSPI_EraseSector+0xa0>)
 8001282:	4013      	ands	r3, r2
 8001284:	607b      	str	r3, [r7, #4]
                        - EraseStartAddress % MEMORY_SECTOR_SIZE;

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128a:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 800128c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001290:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800129a:	2300      	movs	r3, #0
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800129e:	2300      	movs	r3, #0
 80012a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = SECTOR_ERASE_CMD;
 80012a2:	23d8      	movs	r3, #216	; 0xd8
 80012a4:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80012a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24

    sCommand.DataMode = QSPI_DATA_NONE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]

    while (EraseEndAddress >= EraseStartAddress) {
 80012b4:	e024      	b.n	8001300 <CSP_QSPI_EraseSector+0x8c>
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012bc:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != HAL_OK) {
 80012be:	f7ff ff03 	bl	80010c8 <QSPI_WriteEnable>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <CSP_QSPI_EraseSector+0x58>
            return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e01e      	b.n	800130a <CSP_QSPI_EraseSector+0x96>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d4:	4619      	mov	r1, r3
 80012d6:	4810      	ldr	r0, [pc, #64]	; (8001318 <CSP_QSPI_EraseSector+0xa4>)
 80012d8:	f001 f89e 	bl	8002418 <HAL_QSPI_Command>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <CSP_QSPI_EraseSector+0x72>
            != HAL_OK) {
            return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e011      	b.n	800130a <CSP_QSPI_EraseSector+0x96>
        }
        EraseStartAddress += MEMORY_SECTOR_SIZE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012ec:	607b      	str	r3, [r7, #4]

        if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80012ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80012f2:	f7ff feaf 	bl	8001054 <QSPI_AutoPollingMemReady>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <CSP_QSPI_EraseSector+0x8c>
            return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e004      	b.n	800130a <CSP_QSPI_EraseSector+0x96>
    while (EraseEndAddress >= EraseStartAddress) {
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	d2d6      	bcs.n	80012b6 <CSP_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3740      	adds	r7, #64	; 0x40
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	ffff0000 	.word	0xffff0000
 8001318:	2400002c 	.word	0x2400002c

0800131c <CSP_QSPI_WriteMemory>:

uint8_t
CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address, uint32_t buffer_size) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b096      	sub	sp, #88	; 0x58
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]

    QSPI_CommandTypeDef sCommand;
    uint32_t end_addr, current_size, current_addr;

    /* Calculation of the size between the write address and the end of the page */
    current_addr = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	653b      	str	r3, [r7, #80]	; 0x50

    while (current_addr <= address) {
 800132c:	e003      	b.n	8001336 <CSP_QSPI_WriteMemory+0x1a>
        current_addr += MEMORY_PAGE_SIZE;
 800132e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001330:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001334:	653b      	str	r3, [r7, #80]	; 0x50
    while (current_addr <= address) {
 8001336:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	429a      	cmp	r2, r3
 800133c:	d9f7      	bls.n	800132e <CSP_QSPI_WriteMemory+0x12>
    }
    current_size = current_addr - address;
 800133e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	657b      	str	r3, [r7, #84]	; 0x54

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > buffer_size) {
 8001346:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	d901      	bls.n	8001352 <CSP_QSPI_WriteMemory+0x36>
        current_size = buffer_size;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* Initialize the adress variables */
    current_addr = address;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	653b      	str	r3, [r7, #80]	; 0x50
    end_addr = address + buffer_size;
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800135e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 8001364:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001368:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001372:	2300      	movs	r3, #0
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001376:	2300      	movs	r3, #0
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 800137a:	2332      	movs	r3, #50	; 0x32
 800137c:	617b      	str	r3, [r7, #20]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8001384:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = buffer_size;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Address = address;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	61bb      	str	r3, [r7, #24]
    sCommand.DummyCycles = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Perform the write page by page */
    do {
        sCommand.Address = current_addr;
 8001396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001398:	61bb      	str	r3, [r7, #24]
        sCommand.NbData = current_size;
 800139a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (current_size == 0) {
 800139e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <CSP_QSPI_WriteMemory+0x8c>
            return HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e041      	b.n	800142c <CSP_QSPI_WriteMemory+0x110>
        }

        /* Enable write operations */
        if (QSPI_WriteEnable() != HAL_OK) {
 80013a8:	f7ff fe8e 	bl	80010c8 <QSPI_WriteEnable>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <CSP_QSPI_WriteMemory+0x9a>
            return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e03a      	b.n	800142c <CSP_QSPI_WriteMemory+0x110>
        }

        /* Configure the command */
        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80013be:	4619      	mov	r1, r3
 80013c0:	481c      	ldr	r0, [pc, #112]	; (8001434 <CSP_QSPI_WriteMemory+0x118>)
 80013c2:	f001 f829 	bl	8002418 <HAL_QSPI_Command>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <CSP_QSPI_WriteMemory+0xb4>
            != HAL_OK) {
            return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e02d      	b.n	800142c <CSP_QSPI_WriteMemory+0x110>
        }

        /* Transmission of the data */
        if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80013d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d4:	68f9      	ldr	r1, [r7, #12]
 80013d6:	4817      	ldr	r0, [pc, #92]	; (8001434 <CSP_QSPI_WriteMemory+0x118>)
 80013d8:	f001 f87c 	bl	80024d4 <HAL_QSPI_Transmit>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <CSP_QSPI_WriteMemory+0xca>
            return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e022      	b.n	800142c <CSP_QSPI_WriteMemory+0x110>
        }

        /* Configure automatic polling mode to wait for end of program */
        if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80013e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80013ea:	f7ff fe33 	bl	8001054 <QSPI_AutoPollingMemReady>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <CSP_QSPI_WriteMemory+0xdc>
            return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e019      	b.n	800142c <CSP_QSPI_WriteMemory+0x110>
        }

        /* Update the address and size variables for next page programming */
        current_addr += current_size;
 80013f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80013fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fc:	4413      	add	r3, r2
 80013fe:	653b      	str	r3, [r7, #80]	; 0x50
        buffer += current_size;
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001404:	4413      	add	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
        current_size =
            ((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 8001408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800140a:	f503 7380 	add.w	r3, r3, #256	; 0x100
            (end_addr - current_addr) : MEMORY_PAGE_SIZE;
 800140e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001410:	429a      	cmp	r2, r3
 8001412:	d203      	bcs.n	800141c <CSP_QSPI_WriteMemory+0x100>
 8001414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	e001      	b.n	8001420 <CSP_QSPI_WriteMemory+0x104>
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
        current_size =
 8001420:	657b      	str	r3, [r7, #84]	; 0x54
    } while (current_addr <= end_addr);
 8001422:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001426:	429a      	cmp	r2, r3
 8001428:	d9b5      	bls.n	8001396 <CSP_QSPI_WriteMemory+0x7a>

    return HAL_OK;
 800142a:	2300      	movs	r3, #0

}
 800142c:	4618      	mov	r0, r3
 800142e:	3758      	adds	r7, #88	; 0x58
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2400002c 	.word	0x2400002c

08001438 <CSP_QSPI_EnableMemoryMappedMode>:


uint8_t
CSP_QSPI_EnableMemoryMappedMode(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b090      	sub	sp, #64	; 0x40
 800143c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_MemoryMappedTypeDef sMemMappedCfg;

    /* Enable Memory-Mapped mode-------------------------------------------------- */

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001442:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 8001444:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001448:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001452:	2300      	movs	r3, #0
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001456:	2300      	movs	r3, #0
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800145a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8001460:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Address = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
    sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 800146e:	236b      	movs	r3, #107	; 0x6b
 8001470:	60bb      	str	r3, [r7, #8]
    sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 8001472:	230a      	movs	r3, #10
 8001474:	61fb      	str	r3, [r7, #28]

    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]

    if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 800147a:	463a      	mov	r2, r7
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	4619      	mov	r1, r3
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <CSP_QSPI_EnableMemoryMappedMode+0x64>)
 8001484:	f001 f9cc 	bl	8002820 <HAL_QSPI_MemoryMapped>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <CSP_QSPI_EnableMemoryMappedMode+0x5a>
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
    }
    return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3740      	adds	r7, #64	; 0x40
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2400002c 	.word	0x2400002c

080014a0 <QSPI_ResetChip>:

static uint8_t
QSPI_ResetChip() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b090      	sub	sp, #64	; 0x40
 80014a4:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80014aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ae:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014be:	2300      	movs	r3, #0
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 80014c6:	2366      	movs	r3, #102	; 0x66
 80014c8:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4619      	mov	r1, r3
 80014e2:	486f      	ldr	r0, [pc, #444]	; (80016a0 <QSPI_ResetChip+0x200>)
 80014e4:	f000 ff98 	bl	8002418 <HAL_QSPI_Command>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0d2      	b.n	8001698 <QSPI_ResetChip+0x1f8>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 80014f2:	2300      	movs	r3, #0
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014f6:	e003      	b.n	8001500 <QSPI_ResetChip+0x60>
        __NOP();
 80014f8:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 80014fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014fc:	3301      	adds	r3, #1
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001502:	2b2e      	cmp	r3, #46	; 0x2e
 8001504:	d9f8      	bls.n	80014f8 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150a:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001510:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800151e:	2300      	movs	r3, #0
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_EXECUTE_CMD;
 8001522:	2399      	movs	r3, #153	; 0x99
 8001524:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	f241 3288 	movw	r2, #5000	; 0x1388
 800153c:	4619      	mov	r1, r3
 800153e:	4858      	ldr	r0, [pc, #352]	; (80016a0 <QSPI_ResetChip+0x200>)
 8001540:	f000 ff6a 	bl	8002418 <HAL_QSPI_Command>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0a4      	b.n	8001698 <QSPI_ResetChip+0x1f8>
    }

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 800154e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001552:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001558:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001562:	2300      	movs	r3, #0
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001566:	2300      	movs	r3, #0
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 800156a:	2366      	movs	r3, #102	; 0x66
 800156c:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001576:	2300      	movs	r3, #0
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4619      	mov	r1, r3
 8001586:	4846      	ldr	r0, [pc, #280]	; (80016a0 <QSPI_ResetChip+0x200>)
 8001588:	f000 ff46 	bl	8002418 <HAL_QSPI_Command>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <QSPI_ResetChip+0xf6>
        != HAL_OK) {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e080      	b.n	8001698 <QSPI_ResetChip+0x1f8>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 8001596:	2300      	movs	r3, #0
 8001598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800159a:	e003      	b.n	80015a4 <QSPI_ResetChip+0x104>
        __NOP();
 800159c:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 800159e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a0:	3301      	adds	r3, #1
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a6:	2b2e      	cmp	r3, #46	; 0x2e
 80015a8:	d9f8      	bls.n	800159c <QSPI_ResetChip+0xfc>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 80015aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ae:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80015b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b4:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80015be:	2300      	movs	r3, #0
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80015c2:	2300      	movs	r3, #0
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_EXECUTE_CMD;
 80015c6:	2399      	movs	r3, #153	; 0x99
 80015c8:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4619      	mov	r1, r3
 80015e2:	482f      	ldr	r0, [pc, #188]	; (80016a0 <QSPI_ResetChip+0x200>)
 80015e4:	f000 ff18 	bl	8002418 <HAL_QSPI_Command>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <QSPI_ResetChip+0x152>
        != HAL_OK) {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e052      	b.n	8001698 <QSPI_ResetChip+0x1f8>
    }

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80015f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f6:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800160a:	2300      	movs	r3, #0
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 800160e:	2366      	movs	r3, #102	; 0x66
 8001610:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4619      	mov	r1, r3
 800162a:	481d      	ldr	r0, [pc, #116]	; (80016a0 <QSPI_ResetChip+0x200>)
 800162c:	f000 fef4 	bl	8002418 <HAL_QSPI_Command>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <QSPI_ResetChip+0x19a>
        != HAL_OK) {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e02e      	b.n	8001698 <QSPI_ResetChip+0x1f8>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 800163a:	2300      	movs	r3, #0
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800163e:	e003      	b.n	8001648 <QSPI_ResetChip+0x1a8>
        __NOP();
 8001640:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8001642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001644:	3301      	adds	r3, #1
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800164a:	2b2e      	cmp	r3, #46	; 0x2e
 800164c:	d9f8      	bls.n	8001640 <QSPI_ResetChip+0x1a0>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800164e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001652:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001658:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001662:	2300      	movs	r3, #0
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001666:	2300      	movs	r3, #0
 8001668:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_EXECUTE_CMD;
 800166a:	2399      	movs	r3, #153	; 0x99
 800166c:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8001676:	2300      	movs	r3, #0
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <QSPI_ResetChip+0x200>)
 8001688:	f000 fec6 	bl	8002418 <HAL_QSPI_Command>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <QSPI_ResetChip+0x1f6>
        != HAL_OK) {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <QSPI_ResetChip+0x1f8>
    }

    return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3740      	adds	r7, #64	; 0x40
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2400002c 	.word	0x2400002c

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_MspInit+0x30>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x30>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x30>)
 80016bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	58024400 	.word	0x58024400

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <NMI_Handler+0x4>

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 f954 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001732:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <MX_USART1_UART_Init+0x94>)
 8001734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_USART1_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_USART1_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART1_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001774:	4811      	ldr	r0, [pc, #68]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001776:	f004 f93d 	bl	80059f4 <HAL_UART_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001780:	f7ff fa92 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_USART1_UART_Init+0x90>)
 8001788:	f005 f93f 	bl	8006a0a <HAL_UARTEx_SetTxFifoThreshold>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001792:	f7ff fa89 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <MX_USART1_UART_Init+0x90>)
 800179a:	f005 f974 	bl	8006a86 <HAL_UARTEx_SetRxFifoThreshold>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f7ff fa80 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_USART1_UART_Init+0x90>)
 80017aa:	f005 f8f5 	bl	8006998 <HAL_UARTEx_DisableFifoMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f7ff fa78 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	24000078 	.word	0x24000078
 80017c0:	40011000 	.word	0x40011000

080017c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0bc      	sub	sp, #240	; 0xf0
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	22c8      	movs	r2, #200	; 0xc8
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fa0f 	bl	8006c08 <memset>
  if(uartHandle->Instance==USART1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a27      	ldr	r2, [pc, #156]	; (800188c <HAL_UART_MspInit+0xc8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d146      	bne.n	8001882 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017f4:	f04f 0201 	mov.w	r2, #1
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fa86 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001816:	f7ff fa47 	bl	8000ca8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_UART_MspInit+0xcc>)
 800181c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <HAL_UART_MspInit+0xcc>)
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_UART_MspInit+0xcc>)
 800182c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_UART_MspInit+0xcc>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183e:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_UART_MspInit+0xcc>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_UART_MspInit+0xcc>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001856:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800185a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001870:	2307      	movs	r3, #7
 8001872:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_UART_MspInit+0xd0>)
 800187e:	f000 f9db 	bl	8001c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001882:	bf00      	nop
 8001884:	37f0      	adds	r7, #240	; 0xf0
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40011000 	.word	0x40011000
 8001890:	58024400 	.word	0x58024400
 8001894:	58020000 	.word	0x58020000

08001898 <Boot_Reset_Handler>:

    .section  .text.Boot_Reset_Handler
  .weak  Boot_Reset_Handler
  .type  Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800189c:	f7fe fe9e 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018a2:	490d      	ldr	r1, [pc, #52]	; (80018d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b8:	4c0a      	ldr	r4, [pc, #40]	; (80018e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018c6:	f005 f96b 	bl	8006ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  boot_main
 80018ca:	f7fe ffd1 	bl	8000870 <boot_main>
  bx  lr
 80018ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018d8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80018dc:	08006c78 	.word	0x08006c78
  ldr r2, =_sbss
 80018e0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80018e4:	24000110 	.word	0x24000110

080018e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC3_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f2:	2003      	movs	r0, #3
 80018f4:	f000 f96e 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018f8:	f002 f83a 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_Init+0x68>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	4913      	ldr	r1, [pc, #76]	; (8001958 <HAL_Init+0x6c>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_Init+0x68>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_Init+0x6c>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_Init+0x70>)
 800192e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_Init+0x74>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f814 	bl	8001964 <HAL_InitTick>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e002      	b.n	800194c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001946:	f7ff fead 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	58024400 	.word	0x58024400
 8001958:	08006c30 	.word	0x08006c30
 800195c:	24000004 	.word	0x24000004
 8001960:	24000000 	.word	0x24000000

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_InitTick+0x60>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e021      	b.n	80019bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_InitTick+0x64>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_InitTick+0x60>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f945 	bl	8001c1e <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 f91d 	bl	8001bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x68>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2400000c 	.word	0x2400000c
 80019c8:	24000000 	.word	0x24000000
 80019cc:	24000008 	.word	0x24000008

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2400000c 	.word	0x2400000c
 80019f4:	2400010c 	.word	0x2400010c

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	2400010c 	.word	0x2400010c

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2400000c 	.word	0x2400000c

08001a58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_GetREVID+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0c1b      	lsrs	r3, r3, #16
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	5c001000 	.word	0x5c001000

08001a70 <__NVIC_SetPriorityGrouping>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00
 8001ab4:	05fa0000 	.word	0x05fa0000

08001ab8 <__NVIC_GetPriorityGrouping>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	f003 0307 	and.w	r3, r3, #7
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_SetPriority>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f7ff ff8e 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff47 	bl	8001a70 <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff5e 	bl	8001ab8 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff90 	bl	8001b28 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5f 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffb2 	bl	8001b90 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c46:	4b89      	ldr	r3, [pc, #548]	; (8001e6c <HAL_GPIO_Init+0x234>)
 8001c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c4a:	e194      	b.n	8001f76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8186 	beq.w	8001f70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d005      	beq.n	8001c7c <HAL_GPIO_Init+0x44>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d130      	bne.n	8001cde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 0201 	and.w	r2, r3, #1
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d017      	beq.n	8001d1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d123      	bne.n	8001d6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	69b9      	ldr	r1, [r7, #24]
 8001d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0203 	and.w	r2, r3, #3
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80e0 	beq.w	8001f70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db0:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_GPIO_Init+0x238>)
 8001db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001db6:	4a2e      	ldr	r2, [pc, #184]	; (8001e70 <HAL_GPIO_Init+0x238>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_GPIO_Init+0x238>)
 8001dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a29      	ldr	r2, [pc, #164]	; (8001e74 <HAL_GPIO_Init+0x23c>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a20      	ldr	r2, [pc, #128]	; (8001e78 <HAL_GPIO_Init+0x240>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d052      	beq.n	8001ea0 <HAL_GPIO_Init+0x268>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_GPIO_Init+0x244>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d031      	beq.n	8001e66 <HAL_GPIO_Init+0x22e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_GPIO_Init+0x248>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d02b      	beq.n	8001e62 <HAL_GPIO_Init+0x22a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <HAL_GPIO_Init+0x24c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d025      	beq.n	8001e5e <HAL_GPIO_Init+0x226>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <HAL_GPIO_Init+0x250>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01f      	beq.n	8001e5a <HAL_GPIO_Init+0x222>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <HAL_GPIO_Init+0x254>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d019      	beq.n	8001e56 <HAL_GPIO_Init+0x21e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x258>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_GPIO_Init+0x21a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_GPIO_Init+0x25c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00d      	beq.n	8001e4e <HAL_GPIO_Init+0x216>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_GPIO_Init+0x260>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <HAL_GPIO_Init+0x212>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_GPIO_Init+0x264>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d101      	bne.n	8001e46 <HAL_GPIO_Init+0x20e>
 8001e42:	2309      	movs	r3, #9
 8001e44:	e02d      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e46:	230a      	movs	r3, #10
 8001e48:	e02b      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	e029      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e4e:	2307      	movs	r3, #7
 8001e50:	e027      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e52:	2306      	movs	r3, #6
 8001e54:	e025      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e56:	2305      	movs	r3, #5
 8001e58:	e023      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e021      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e01f      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e01d      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e01b      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e6a:	bf00      	nop
 8001e6c:	58000080 	.word	0x58000080
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58000400 	.word	0x58000400
 8001e78:	58020000 	.word	0x58020000
 8001e7c:	58020400 	.word	0x58020400
 8001e80:	58020800 	.word	0x58020800
 8001e84:	58020c00 	.word	0x58020c00
 8001e88:	58021000 	.word	0x58021000
 8001e8c:	58021400 	.word	0x58021400
 8001e90:	58021800 	.word	0x58021800
 8001e94:	58021c00 	.word	0x58021c00
 8001e98:	58022000 	.word	0x58022000
 8001e9c:	58022400 	.word	0x58022400
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	f002 0203 	and.w	r2, r2, #3
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	4093      	lsls	r3, r2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb2:	4938      	ldr	r1, [pc, #224]	; (8001f94 <HAL_GPIO_Init+0x35c>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3301      	adds	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f ae63 	bne.w	8001c4c <HAL_GPIO_Init+0x14>
  }
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	3724      	adds	r7, #36	; 0x24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	58000400 	.word	0x58000400

08001f98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fa6:	4b75      	ldr	r3, [pc, #468]	; (800217c <HAL_GPIO_DeInit+0x1e4>)
 8001fa8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001faa:	e0d9      	b.n	8002160 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001fac:	2201      	movs	r2, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80cc 	beq.w	800215a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001fc2:	4a6f      	ldr	r2, [pc, #444]	; (8002180 <HAL_GPIO_DeInit+0x1e8>)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fce:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a67      	ldr	r2, [pc, #412]	; (8002184 <HAL_GPIO_DeInit+0x1ec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d037      	beq.n	800205c <HAL_GPIO_DeInit+0xc4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a66      	ldr	r2, [pc, #408]	; (8002188 <HAL_GPIO_DeInit+0x1f0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d031      	beq.n	8002058 <HAL_GPIO_DeInit+0xc0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a65      	ldr	r2, [pc, #404]	; (800218c <HAL_GPIO_DeInit+0x1f4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d02b      	beq.n	8002054 <HAL_GPIO_DeInit+0xbc>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a64      	ldr	r2, [pc, #400]	; (8002190 <HAL_GPIO_DeInit+0x1f8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d025      	beq.n	8002050 <HAL_GPIO_DeInit+0xb8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a63      	ldr	r2, [pc, #396]	; (8002194 <HAL_GPIO_DeInit+0x1fc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d01f      	beq.n	800204c <HAL_GPIO_DeInit+0xb4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a62      	ldr	r2, [pc, #392]	; (8002198 <HAL_GPIO_DeInit+0x200>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d019      	beq.n	8002048 <HAL_GPIO_DeInit+0xb0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a61      	ldr	r2, [pc, #388]	; (800219c <HAL_GPIO_DeInit+0x204>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_GPIO_DeInit+0xac>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a60      	ldr	r2, [pc, #384]	; (80021a0 <HAL_GPIO_DeInit+0x208>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00d      	beq.n	8002040 <HAL_GPIO_DeInit+0xa8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a5f      	ldr	r2, [pc, #380]	; (80021a4 <HAL_GPIO_DeInit+0x20c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <HAL_GPIO_DeInit+0xa4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a5e      	ldr	r2, [pc, #376]	; (80021a8 <HAL_GPIO_DeInit+0x210>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_GPIO_DeInit+0xa0>
 8002034:	2309      	movs	r3, #9
 8002036:	e012      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 8002038:	230a      	movs	r3, #10
 800203a:	e010      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 800203c:	2308      	movs	r3, #8
 800203e:	e00e      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 8002040:	2307      	movs	r3, #7
 8002042:	e00c      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 8002044:	2306      	movs	r3, #6
 8002046:	e00a      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 8002048:	2305      	movs	r3, #5
 800204a:	e008      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 800204c:	2304      	movs	r3, #4
 800204e:	e006      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 8002050:	2303      	movs	r3, #3
 8002052:	e004      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 8002054:	2302      	movs	r3, #2
 8002056:	e002      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_GPIO_DeInit+0xc6>
 800205c:	2300      	movs	r3, #0
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	f002 0203 	and.w	r2, r2, #3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4093      	lsls	r3, r2
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d136      	bne.n	80020dc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	401a      	ands	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002098:	4013      	ands	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020aa:	4013      	ands	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80020be:	4a30      	ldr	r2, [pc, #192]	; (8002180 <HAL_GPIO_DeInit+0x1e8>)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	43da      	mvns	r2, r3
 80020ce:	482c      	ldr	r0, [pc, #176]	; (8002180 <HAL_GPIO_DeInit+0x1e8>)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	400a      	ands	r2, r1
 80020d6:	3302      	adds	r3, #2
 80020d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2103      	movs	r1, #3
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	08da      	lsrs	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3208      	adds	r2, #8
 80020f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	08d2      	lsrs	r2, r2, #3
 8002110:	4019      	ands	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2103      	movs	r1, #3
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	401a      	ands	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	2101      	movs	r1, #1
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2103      	movs	r1, #3
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	401a      	ands	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]
    }

    position++;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	f47f af1f 	bne.w	8001fac <HAL_GPIO_DeInit+0x14>
  }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	58000080 	.word	0x58000080
 8002180:	58000400 	.word	0x58000400
 8002184:	58020000 	.word	0x58020000
 8002188:	58020400 	.word	0x58020400
 800218c:	58020800 	.word	0x58020800
 8002190:	58020c00 	.word	0x58020c00
 8002194:	58021000 	.word	0x58021000
 8002198:	58021400 	.word	0x58021400
 800219c:	58021800 	.word	0x58021800
 80021a0:	58021c00 	.word	0x58021c00
 80021a4:	58022000 	.word	0x58022000
 80021a8:	58022400 	.word	0x58022400

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80021e8:	4a08      	ldr	r2, [pc, #32]	; (800220c <HAL_HSEM_FastTake+0x2c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3320      	adds	r3, #32
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_HSEM_FastTake+0x30>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e000      	b.n	80021fe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	58026400 	.word	0x58026400
 8002210:	80000300 	.word	0x80000300

08002214 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800221e:	4906      	ldr	r1, [pc, #24]	; (8002238 <HAL_HSEM_Release+0x24>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	58026400 	.word	0x58026400

0800223c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002244:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	2b06      	cmp	r3, #6
 800224e:	d00a      	beq.n	8002266 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002250:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	429a      	cmp	r2, r3
 800225c:	d001      	beq.n	8002262 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e040      	b.n	80022e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e03e      	b.n	80022e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800226e:	491f      	ldr	r1, [pc, #124]	; (80022ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4313      	orrs	r3, r2
 8002274:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002276:	f7ff fbbf 	bl	80019f8 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800227c:	e009      	b.n	8002292 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800227e:	f7ff fbbb 	bl	80019f8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800228c:	d901      	bls.n	8002292 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e028      	b.n	80022e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229e:	d1ee      	bne.n	800227e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b1e      	cmp	r3, #30
 80022a4:	d008      	beq.n	80022b8 <HAL_PWREx_ConfigSupply+0x7c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b2e      	cmp	r3, #46	; 0x2e
 80022aa:	d005      	beq.n	80022b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b1d      	cmp	r3, #29
 80022b0:	d002      	beq.n	80022b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b2d      	cmp	r3, #45	; 0x2d
 80022b6:	d114      	bne.n	80022e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80022b8:	f7ff fb9e 	bl	80019f8 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022be:	e009      	b.n	80022d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022c0:	f7ff fb9a 	bl	80019f8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ce:	d901      	bls.n	80022d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e007      	b.n	80022e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_PWREx_ConfigSupply+0xb0>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e0:	d1ee      	bne.n	80022c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	58024800 	.word	0x58024800

080022f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff fb7e 	bl	80019f8 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e05f      	b.n	80023c8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7fe fcf5 	bl	8000d04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800231a:	f241 3188 	movw	r1, #5000	; 0x1388
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fae0 	bl	80028e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	3b01      	subs	r3, #1
 8002334:	021a      	lsls	r2, r3, #8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	2120      	movs	r1, #32
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fad8 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002354:	7afb      	ldrb	r3, [r7, #11]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d135      	bne.n	80023c6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_QSPI_Init+0xe0>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6852      	ldr	r2, [r2, #4]
 8002368:	0611      	lsls	r1, r2, #24
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68d2      	ldr	r2, [r2, #12]
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	69d2      	ldr	r2, [r2, #28]
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6a12      	ldr	r2, [r2, #32]
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_QSPI_Init+0xe4>)
 800238c:	4013      	ands	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6912      	ldr	r2, [r2, #16]
 8002392:	0411      	lsls	r1, r2, #16
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6952      	ldr	r2, [r2, #20]
 8002398:	4311      	orrs	r1, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6992      	ldr	r2, [r2, #24]
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80023c6:	7afb      	ldrb	r3, [r7, #11]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	00ffff2f 	.word	0x00ffff2f
 80023d4:	ffe0f8fe 	.word	0xffe0f8fe

080023d8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e012      	b.n	8002410 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fdb0 	bl	8000f60 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af02      	add	r7, sp, #8
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff fae8 	bl	80019f8 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_QSPI_Command+0x22>
 8002436:	2302      	movs	r3, #2
 8002438:	e048      	b.n	80024cc <HAL_QSPI_Command+0xb4>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d137      	bne.n	80024be <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2200      	movs	r2, #0
 8002464:	2120      	movs	r1, #32
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fa4a 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d125      	bne.n	80024c2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002476:	2200      	movs	r2, #0
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fa77 	bl	800296e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d115      	bne.n	80024b4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2201      	movs	r2, #1
 8002490:	2102      	movs	r1, #2
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fa34 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10f      	bne.n	80024c2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2202      	movs	r2, #2
 80024a8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024b2:	e006      	b.n	80024c2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024bc:	e001      	b.n	80024c2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff fa88 	bl	80019f8 <HAL_GetTick>
 80024e8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3320      	adds	r3, #32
 80024f0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_QSPI_Transmit+0x2e>
 80024fe:	2302      	movs	r3, #2
 8002500:	e076      	b.n	80025f0 <HAL_QSPI_Transmit+0x11c>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d165      	bne.n	80025e2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d056      	beq.n	80025d0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2212      	movs	r2, #18
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002556:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002558:	e01b      	b.n	8002592 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2201      	movs	r2, #1
 8002562:	2104      	movs	r1, #4
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f9cb 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800256e:	7ffb      	ldrb	r3, [r7, #31]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d113      	bne.n	800259c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1df      	bne.n	800255a <HAL_QSPI_Transmit+0x86>
 800259a:	e000      	b.n	800259e <HAL_QSPI_Transmit+0xca>
          break;
 800259c:	bf00      	nop
      }

      if (status == HAL_OK)
 800259e:	7ffb      	ldrb	r3, [r7, #31]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d110      	bne.n	80025c6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2201      	movs	r2, #1
 80025ac:	2102      	movs	r1, #2
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f9a6 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80025b8:	7ffb      	ldrb	r3, [r7, #31]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2202      	movs	r2, #2
 80025c4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025ce:	e00a      	b.n	80025e6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	f043 0208 	orr.w	r2, r3, #8
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	77fb      	strb	r3, [r7, #31]
 80025e0:	e001      	b.n	80025e6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80025ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff f9f6 	bl	80019f8 <HAL_GetTick>
 800260c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3320      	adds	r3, #32
 800261c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_QSPI_Receive+0x36>
 800262a:	2302      	movs	r3, #2
 800262c:	e07d      	b.n	800272a <HAL_QSPI_Receive+0x132>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d16c      	bne.n	800271c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d05d      	beq.n	800270a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2222      	movs	r2, #34	; 0x22
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002686:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002690:	e01c      	b.n	80026cc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2201      	movs	r2, #1
 800269a:	2106      	movs	r1, #6
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f92f 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d114      	bne.n	80026d6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1de      	bne.n	8002692 <HAL_QSPI_Receive+0x9a>
 80026d4:	e000      	b.n	80026d8 <HAL_QSPI_Receive+0xe0>
          break;
 80026d6:	bf00      	nop
      }

      if (status == HAL_OK)
 80026d8:	7ffb      	ldrb	r3, [r7, #31]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d110      	bne.n	8002700 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2201      	movs	r2, #1
 80026e6:	2102      	movs	r1, #2
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f909 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80026f2:	7ffb      	ldrb	r3, [r7, #31]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2202      	movs	r2, #2
 80026fe:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002708:	e00a      	b.n	8002720 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f043 0208 	orr.w	r2, r3, #8
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	77fb      	strb	r3, [r7, #31]
 800271a:	e001      	b.n	8002720 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800271c:	2302      	movs	r3, #2
 800271e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002728:	7ffb      	ldrb	r3, [r7, #31]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b088      	sub	sp, #32
 8002736:	af02      	add	r7, sp, #8
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff f95a 	bl	80019f8 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_QSPI_AutoPolling+0x24>
 8002752:	2302      	movs	r3, #2
 8002754:	e060      	b.n	8002818 <HAL_QSPI_AutoPolling+0xe6>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d14f      	bne.n	800280a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2242      	movs	r2, #66	; 0x42
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2200      	movs	r2, #0
 8002780:	2120      	movs	r1, #32
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f8bc 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d13d      	bne.n	800280e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6852      	ldr	r2, [r2, #4]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6892      	ldr	r2, [r2, #8]
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	431a      	orrs	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80027c8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80027d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f8c8 	bl	800296e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2201      	movs	r2, #1
 80027e6:	2108      	movs	r1, #8
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f889 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2208      	movs	r2, #8
 80027fe:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002808:	e001      	b.n	800280e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800280a:	2302      	movs	r3, #2
 800280c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff f8e4 	bl	80019f8 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_QSPI_MemoryMapped+0x22>
 800283e:	2302      	movs	r3, #2
 8002840:	e04c      	b.n	80028dc <HAL_QSPI_MemoryMapped+0xbc>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d13b      	bne.n	80028ce <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2282      	movs	r2, #130	; 0x82
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2200      	movs	r2, #0
 800286e:	2120      	movs	r1, #32
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f845 	bl	8002900 <QSPI_WaitFlagStateUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d128      	bne.n	80028d2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 0108 	bic.w	r1, r3, #8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d110      	bne.n	80028c0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2210      	movs	r2, #16
 80028ae:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028be:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80028c0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f851 	bl	800296e <QSPI_Config>
 80028cc:	e001      	b.n	80028d2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
 80028d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002910:	e01a      	b.n	8002948 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d016      	beq.n	8002948 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7ff f86d 	bl	80019f8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2204      	movs	r2, #4
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e00e      	b.n	8002966 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	429a      	cmp	r2, r3
 8002962:	d1d6      	bne.n	8002912 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <QSPI_Config+0x28>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002988:	d005      	beq.n	8002996 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3a01      	subs	r2, #1
 8002994:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80b9 	beq.w	8002b12 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05f      	beq.n	8002a68 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	6892      	ldr	r2, [r2, #8]
 80029b0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d031      	beq.n	8002a1e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	431a      	orrs	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	431a      	orrs	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	049b      	lsls	r3, r3, #18
 80029d6:	431a      	orrs	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	431a      	orrs	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	ea42 0103 	orr.w	r1, r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002a0e:	f000 812e 	beq.w	8002c6e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	6852      	ldr	r2, [r2, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002a1c:	e127      	b.n	8002c6e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	431a      	orrs	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	049b      	lsls	r3, r3, #18
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	ea42 0103 	orr.w	r1, r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	615a      	str	r2, [r3, #20]
}
 8002a66:	e102      	b.n	8002c6e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d02e      	beq.n	8002ace <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	431a      	orrs	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	049b      	lsls	r3, r3, #18
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	ea42 0103 	orr.w	r1, r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002abe:	f000 80d6 	beq.w	8002c6e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	6852      	ldr	r2, [r2, #4]
 8002aca:	619a      	str	r2, [r3, #24]
}
 8002acc:	e0cf      	b.n	8002c6e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	049b      	lsls	r3, r3, #18
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	ea42 0103 	orr.w	r1, r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	615a      	str	r2, [r3, #20]
}
 8002b10:	e0ad      	b.n	8002c6e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d058      	beq.n	8002bcc <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	6892      	ldr	r2, [r2, #8]
 8002b22:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d02d      	beq.n	8002b88 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	049b      	lsls	r3, r3, #18
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	ea42 0103 	orr.w	r1, r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002b7a:	d078      	beq.n	8002c6e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	6852      	ldr	r2, [r2, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	e072      	b.n	8002c6e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	431a      	orrs	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	049b      	lsls	r3, r3, #18
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	ea42 0103 	orr.w	r1, r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	615a      	str	r2, [r3, #20]
}
 8002bca:	e050      	b.n	8002c6e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d02a      	beq.n	8002c2a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	049b      	lsls	r3, r3, #18
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	ea42 0103 	orr.w	r1, r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002c1c:	d027      	beq.n	8002c6e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	6852      	ldr	r2, [r2, #4]
 8002c26:	619a      	str	r2, [r3, #24]
}
 8002c28:	e021      	b.n	8002c6e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01d      	beq.n	8002c6e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	049b      	lsls	r3, r3, #18
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	ea42 0103 	orr.w	r1, r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	615a      	str	r2, [r3, #20]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08c      	sub	sp, #48	; 0x30
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f000 bc48 	b.w	8003520 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8088 	beq.w	8002dae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9e:	4b99      	ldr	r3, [pc, #612]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ca8:	4b96      	ldr	r3, [pc, #600]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d007      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x48>
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	2b18      	cmp	r3, #24
 8002cb8:	d111      	bne.n	8002cde <HAL_RCC_OscConfig+0x62>
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	4b8f      	ldr	r3, [pc, #572]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d06d      	beq.n	8002dac <HAL_RCC_OscConfig+0x130>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d169      	bne.n	8002dac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f000 bc21 	b.w	8003520 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x7a>
 8002ce8:	4b86      	ldr	r3, [pc, #536]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a85      	ldr	r2, [pc, #532]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	e02e      	b.n	8002d54 <HAL_RCC_OscConfig+0xd8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x9c>
 8002cfe:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b7e      	ldr	r3, [pc, #504]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7d      	ldr	r2, [pc, #500]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xd8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0xc0>
 8002d22:	4b78      	ldr	r3, [pc, #480]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a77      	ldr	r2, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a74      	ldr	r2, [pc, #464]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xd8>
 8002d3c:	4b71      	ldr	r3, [pc, #452]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a70      	ldr	r2, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b6e      	ldr	r3, [pc, #440]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6d      	ldr	r2, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fe4c 	bl	80019f8 <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe fe48 	bl	80019f8 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e3d4      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xe8>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fe38 	bl	80019f8 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fe34 	bl	80019f8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e3c0      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d9e:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x110>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80ca 	beq.w	8002f50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dbc:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dc6:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <HAL_RCC_OscConfig+0x166>
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	2b18      	cmp	r3, #24
 8002dd6:	d156      	bne.n	8002e86 <HAL_RCC_OscConfig+0x20a>
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d151      	bne.n	8002e86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de2:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x17e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e392      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0219 	bic.w	r2, r3, #25
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	493f      	ldr	r1, [pc, #252]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fdf4 	bl	80019f8 <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e14:	f7fe fdf0 	bl	80019f8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e37c      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e26:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	f7fe fe11 	bl	8001a58 <HAL_GetREVID>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d817      	bhi.n	8002e70 <HAL_RCC_OscConfig+0x1f4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b40      	cmp	r3, #64	; 0x40
 8002e46:	d108      	bne.n	8002e5a <HAL_RCC_OscConfig+0x1de>
 8002e48:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e50:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e58:	e07a      	b.n	8002f50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	031b      	lsls	r3, r3, #12
 8002e68:	4926      	ldr	r1, [pc, #152]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6e:	e06f      	b.n	8002f50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	4921      	ldr	r1, [pc, #132]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e84:	e064      	b.n	8002f50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d047      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0219 	bic.w	r2, r3, #25
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	491a      	ldr	r1, [pc, #104]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fdaa 	bl	80019f8 <HAL_GetTick>
 8002ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fda6 	bl	80019f8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e332      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	f7fe fdc7 	bl	8001a58 <HAL_GetREVID>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d819      	bhi.n	8002f08 <HAL_RCC_OscConfig+0x28c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d108      	bne.n	8002eee <HAL_RCC_OscConfig+0x272>
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eea:	6053      	str	r3, [r2, #4]
 8002eec:	e030      	b.n	8002f50 <HAL_RCC_OscConfig+0x2d4>
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	031b      	lsls	r3, r3, #12
 8002efc:	4901      	ldr	r1, [pc, #4]	; (8002f04 <HAL_RCC_OscConfig+0x288>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
 8002f02:	e025      	b.n	8002f50 <HAL_RCC_OscConfig+0x2d4>
 8002f04:	58024400 	.word	0x58024400
 8002f08:	4b9a      	ldr	r3, [pc, #616]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	4997      	ldr	r1, [pc, #604]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b95      	ldr	r3, [pc, #596]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a94      	ldr	r2, [pc, #592]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fd65 	bl	80019f8 <HAL_GetTick>
 8002f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f32:	f7fe fd61 	bl	80019f8 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e2ed      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f44:	4b8b      	ldr	r3, [pc, #556]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a9 	beq.w	80030b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5e:	4b85      	ldr	r3, [pc, #532]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f68:	4b82      	ldr	r3, [pc, #520]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d007      	beq.n	8002f84 <HAL_RCC_OscConfig+0x308>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b18      	cmp	r3, #24
 8002f78:	d13a      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x374>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d135      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f84:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_OscConfig+0x320>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e2c1      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f9c:	f7fe fd5c 	bl	8001a58 <HAL_GetREVID>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d817      	bhi.n	8002fda <HAL_RCC_OscConfig+0x35e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d108      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x348>
 8002fb2:	4b70      	ldr	r3, [pc, #448]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fba:	4a6e      	ldr	r2, [pc, #440]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fc0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fc2:	e075      	b.n	80030b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fc4:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	069b      	lsls	r3, r3, #26
 8002fd2:	4968      	ldr	r1, [pc, #416]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fd8:	e06a      	b.n	80030b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fda:	4b66      	ldr	r3, [pc, #408]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	061b      	lsls	r3, r3, #24
 8002fe8:	4962      	ldr	r1, [pc, #392]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fee:	e05f      	b.n	80030b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d042      	beq.n	800307e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5d      	ldr	r2, [pc, #372]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8002ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fcf8 	bl	80019f8 <HAL_GetTick>
 8003008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800300c:	f7fe fcf4 	bl	80019f8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e280      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800301e:	4b55      	ldr	r3, [pc, #340]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800302a:	f7fe fd15 	bl	8001a58 <HAL_GetREVID>
 800302e:	4603      	mov	r3, r0
 8003030:	f241 0203 	movw	r2, #4099	; 0x1003
 8003034:	4293      	cmp	r3, r2
 8003036:	d817      	bhi.n	8003068 <HAL_RCC_OscConfig+0x3ec>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	2b20      	cmp	r3, #32
 800303e:	d108      	bne.n	8003052 <HAL_RCC_OscConfig+0x3d6>
 8003040:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003048:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 800304a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800304e:	6053      	str	r3, [r2, #4]
 8003050:	e02e      	b.n	80030b0 <HAL_RCC_OscConfig+0x434>
 8003052:	4b48      	ldr	r3, [pc, #288]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	069b      	lsls	r3, r3, #26
 8003060:	4944      	ldr	r1, [pc, #272]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
 8003066:	e023      	b.n	80030b0 <HAL_RCC_OscConfig+0x434>
 8003068:	4b42      	ldr	r3, [pc, #264]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	061b      	lsls	r3, r3, #24
 8003076:	493f      	ldr	r1, [pc, #252]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003078:	4313      	orrs	r3, r2
 800307a:	60cb      	str	r3, [r1, #12]
 800307c:	e018      	b.n	80030b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800307e:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a3c      	ldr	r2, [pc, #240]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe fcb5 	bl	80019f8 <HAL_GetTick>
 800308e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003092:	f7fe fcb1 	bl	80019f8 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e23d      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d036      	beq.n	800312a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d019      	beq.n	80030f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c8:	4a2a      	ldr	r2, [pc, #168]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe fc92 	bl	80019f8 <HAL_GetTick>
 80030d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d8:	f7fe fc8e 	bl	80019f8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e21a      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x45c>
 80030f6:	e018      	b.n	800312a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe fc78 	bl	80019f8 <HAL_GetTick>
 8003108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310c:	f7fe fc74 	bl	80019f8 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e200      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d039      	beq.n	80031aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01c      	beq.n	8003178 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003148:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800314a:	f7fe fc55 	bl	80019f8 <HAL_GetTick>
 800314e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003152:	f7fe fc51 	bl	80019f8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e1dd      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_OscConfig+0x4f8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x4d6>
 8003170:	e01b      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
 8003172:	bf00      	nop
 8003174:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003178:	4b9b      	ldr	r3, [pc, #620]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a9a      	ldr	r2, [pc, #616]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800317e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003182:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003184:	f7fe fc38 	bl	80019f8 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800318c:	f7fe fc34 	bl	80019f8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1c0      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800319e:	4b92      	ldr	r3, [pc, #584]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8081 	beq.w	80032ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031b8:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <HAL_RCC_OscConfig+0x770>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a8b      	ldr	r2, [pc, #556]	; (80033ec <HAL_RCC_OscConfig+0x770>)
 80031be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031c4:	f7fe fc18 	bl	80019f8 <HAL_GetTick>
 80031c8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031cc:	f7fe fc14 	bl	80019f8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1a0      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031de:	4b83      	ldr	r3, [pc, #524]	; (80033ec <HAL_RCC_OscConfig+0x770>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d106      	bne.n	8003200 <HAL_RCC_OscConfig+0x584>
 80031f2:	4b7d      	ldr	r3, [pc, #500]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a7c      	ldr	r2, [pc, #496]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	e02d      	b.n	800325c <HAL_RCC_OscConfig+0x5e0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_OscConfig+0x5a6>
 8003208:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a76      	ldr	r2, [pc, #472]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	4b74      	ldr	r3, [pc, #464]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a73      	ldr	r2, [pc, #460]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800321a:	f023 0304 	bic.w	r3, r3, #4
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	e01c      	b.n	800325c <HAL_RCC_OscConfig+0x5e0>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x5c8>
 800322a:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a6e      	ldr	r2, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	4b6c      	ldr	r3, [pc, #432]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a6b      	ldr	r2, [pc, #428]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0x5e0>
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a64      	ldr	r2, [pc, #400]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003256:	f023 0304 	bic.w	r3, r3, #4
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d015      	beq.n	8003290 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fe fbc8 	bl	80019f8 <HAL_GetTick>
 8003268:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe fbc4 	bl	80019f8 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e14e      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003282:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ee      	beq.n	800326c <HAL_RCC_OscConfig+0x5f0>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fe fbb2 	bl	80019f8 <HAL_GetTick>
 8003294:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003296:	e00a      	b.n	80032ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fe fbae 	bl	80019f8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e138      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032ae:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ee      	bne.n	8003298 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 812d 	beq.w	800351e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032c4:	4b48      	ldr	r3, [pc, #288]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032cc:	2b18      	cmp	r3, #24
 80032ce:	f000 80bd 	beq.w	800344c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	f040 809e 	bne.w	8003418 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032dc:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a41      	ldr	r2, [pc, #260]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80032e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe fb86 	bl	80019f8 <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fe fb82 	bl	80019f8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e10e      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003302:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800330e:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003312:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <HAL_RCC_OscConfig+0x774>)
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	430a      	orrs	r2, r1
 8003322:	4931      	ldr	r1, [pc, #196]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	628b      	str	r3, [r1, #40]	; 0x28
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	3b01      	subs	r3, #1
 800332e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003336:	3b01      	subs	r3, #1
 8003338:	025b      	lsls	r3, r3, #9
 800333a:	b29b      	uxth	r3, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	3b01      	subs	r3, #1
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	3b01      	subs	r3, #1
 8003352:	061b      	lsls	r3, r3, #24
 8003354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003358:	4923      	ldr	r1, [pc, #140]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800335a:	4313      	orrs	r3, r2
 800335c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	4a21      	ldr	r2, [pc, #132]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800336a:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800336c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336e:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003370:	4013      	ands	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003376:	00d2      	lsls	r2, r2, #3
 8003378:	491b      	ldr	r1, [pc, #108]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800337e:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	f023 020c 	bic.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4917      	ldr	r1, [pc, #92]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800338c:	4313      	orrs	r3, r2
 800338e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	f023 0202 	bic.w	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	4912      	ldr	r1, [pc, #72]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033a2:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_RCC_OscConfig+0x76c>)
 80033d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fe fb0b 	bl	80019f8 <HAL_GetTick>
 80033e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033e4:	e011      	b.n	800340a <HAL_RCC_OscConfig+0x78e>
 80033e6:	bf00      	nop
 80033e8:	58024400 	.word	0x58024400
 80033ec:	58024800 	.word	0x58024800
 80033f0:	fffffc0c 	.word	0xfffffc0c
 80033f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe fafe 	bl	80019f8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e08a      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800340a:	4b47      	ldr	r3, [pc, #284]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x77c>
 8003416:	e082      	b.n	800351e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003418:	4b43      	ldr	r3, [pc, #268]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a42      	ldr	r2, [pc, #264]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 800341e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fae8 	bl	80019f8 <HAL_GetTick>
 8003428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe fae4 	bl	80019f8 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e070      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x7b0>
 800344a:	e068      	b.n	800351e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800344c:	4b36      	ldr	r3, [pc, #216]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003452:	4b35      	ldr	r3, [pc, #212]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b01      	cmp	r3, #1
 800345e:	d031      	beq.n	80034c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f003 0203 	and.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d12a      	bne.n	80034c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d122      	bne.n	80034c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d11a      	bne.n	80034c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0a5b      	lsrs	r3, r3, #9
 8003492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d111      	bne.n	80034c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	0c1b      	lsrs	r3, r3, #16
 80034a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d108      	bne.n	80034c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	0e1b      	lsrs	r3, r3, #24
 80034b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e02b      	b.n	8003520 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80034c8:	4b17      	ldr	r3, [pc, #92]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	08db      	lsrs	r3, r3, #3
 80034ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d01f      	beq.n	800351e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	4a11      	ldr	r2, [pc, #68]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ea:	f7fe fa85 	bl	80019f8 <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034f0:	bf00      	nop
 80034f2:	f7fe fa81 	bl	80019f8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d0f9      	beq.n	80034f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 8003500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_RCC_OscConfig+0x8b0>)
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800350a:	00d2      	lsls	r2, r2, #3
 800350c:	4906      	ldr	r1, [pc, #24]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 800350e:	4313      	orrs	r3, r2
 8003510:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_RCC_OscConfig+0x8ac>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3730      	adds	r7, #48	; 0x30
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58024400 	.word	0x58024400
 800352c:	ffff0007 	.word	0xffff0007

08003530 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e19c      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b8a      	ldr	r3, [pc, #552]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d910      	bls.n	8003574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b87      	ldr	r3, [pc, #540]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 020f 	bic.w	r2, r3, #15
 800355a:	4985      	ldr	r1, [pc, #532]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b83      	ldr	r3, [pc, #524]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e184      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	4b7b      	ldr	r3, [pc, #492]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800358c:	429a      	cmp	r2, r3
 800358e:	d908      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003590:	4b78      	ldr	r3, [pc, #480]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	4975      	ldr	r1, [pc, #468]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d908      	bls.n	80035d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035be:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	496a      	ldr	r1, [pc, #424]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	4b64      	ldr	r3, [pc, #400]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d908      	bls.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035ec:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	495e      	ldr	r1, [pc, #376]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d010      	beq.n	800362c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003616:	429a      	cmp	r2, r3
 8003618:	d908      	bls.n	800362c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800361a:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4953      	ldr	r1, [pc, #332]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003628:	4313      	orrs	r3, r2
 800362a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	429a      	cmp	r2, r3
 8003646:	d908      	bls.n	800365a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f023 020f 	bic.w	r2, r3, #15
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4947      	ldr	r1, [pc, #284]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003656:	4313      	orrs	r3, r2
 8003658:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d055      	beq.n	8003712 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003666:	4b43      	ldr	r3, [pc, #268]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4940      	ldr	r1, [pc, #256]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003674:	4313      	orrs	r3, r2
 8003676:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d107      	bne.n	8003690 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003680:	4b3c      	ldr	r3, [pc, #240]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d121      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0f6      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003698:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d115      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0ea      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0de      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c0:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0d6      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f023 0207 	bic.w	r2, r3, #7
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4925      	ldr	r1, [pc, #148]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e2:	f7fe f989 	bl	80019f8 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ea:	f7fe f985 	bl	80019f8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0be      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	429a      	cmp	r2, r3
 8003710:	d1eb      	bne.n	80036ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	429a      	cmp	r2, r3
 800372c:	d208      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f023 020f 	bic.w	r2, r3, #15
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	490e      	ldr	r1, [pc, #56]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800373c:	4313      	orrs	r3, r2
 800373e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d214      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 020f 	bic.w	r2, r3, #15
 8003756:	4906      	ldr	r1, [pc, #24]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e086      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
 8003770:	52002000 	.word	0x52002000
 8003774:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003790:	429a      	cmp	r2, r3
 8003792:	d208      	bcs.n	80037a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	4939      	ldr	r1, [pc, #228]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d010      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	4b34      	ldr	r3, [pc, #208]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037be:	429a      	cmp	r2, r3
 80037c0:	d208      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	492e      	ldr	r1, [pc, #184]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d010      	beq.n	8003802 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d208      	bcs.n	8003802 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	4922      	ldr	r1, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d010      	beq.n	8003830 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800381a:	429a      	cmp	r2, r3
 800381c:	d208      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800381e:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	4917      	ldr	r1, [pc, #92]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 800382c:	4313      	orrs	r3, r2
 800382e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003830:	f000 f89e 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	4912      	ldr	r1, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x35c>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
 800384c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	4a0d      	ldr	r2, [pc, #52]	; (800388c <HAL_RCC_ClockConfig+0x35c>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x360>)
 8003866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003868:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <HAL_RCC_ClockConfig+0x364>)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x368>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe f876 	bl	8001964 <HAL_InitTick>
 8003878:	4603      	mov	r3, r0
 800387a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	58024400 	.word	0x58024400
 800388c:	08006c30 	.word	0x08006c30
 8003890:	24000004 	.word	0x24000004
 8003894:	24000000 	.word	0x24000000
 8003898:	24000008 	.word	0x24000008

0800389c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d12a      	bne.n	8003904 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 80038b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b4:	4a2b      	ldr	r2, [pc, #172]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038be:	4b29      	ldr	r3, [pc, #164]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 80038c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80038cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d6:	2303      	movs	r3, #3
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80038e2:	f107 031c 	add.w	r3, r7, #28
 80038e6:	4619      	mov	r1, r3
 80038e8:	481f      	ldr	r0, [pc, #124]	; (8003968 <HAL_RCC_MCOConfig+0xcc>)
 80038ea:	f7fe f9a5 	bl	8001c38 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	430b      	orrs	r3, r1
 80038fc:	4919      	ldr	r1, [pc, #100]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003902:	e02a      	b.n	800395a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 8003906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800390a:	4a16      	ldr	r2, [pc, #88]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 8003916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392c:	2303      	movs	r3, #3
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003934:	2300      	movs	r3, #0
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003938:	f107 031c 	add.w	r3, r7, #28
 800393c:	4619      	mov	r1, r3
 800393e:	480b      	ldr	r0, [pc, #44]	; (800396c <HAL_RCC_MCOConfig+0xd0>)
 8003940:	f7fe f97a 	bl	8001c38 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	01d9      	lsls	r1, r3, #7
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	430b      	orrs	r3, r1
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCC_MCOConfig+0xc8>)
 8003956:	4313      	orrs	r3, r2
 8003958:	610b      	str	r3, [r1, #16]
}
 800395a:	bf00      	nop
 800395c:	3730      	adds	r7, #48	; 0x30
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	58024400 	.word	0x58024400
 8003968:	58020000 	.word	0x58020000
 800396c:	58020800 	.word	0x58020800

08003970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	; 0x24
 8003974:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003976:	4bb3      	ldr	r3, [pc, #716]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800397e:	2b18      	cmp	r3, #24
 8003980:	f200 8155 	bhi.w	8003c2e <HAL_RCC_GetSysClockFreq+0x2be>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039f1 	.word	0x080039f1
 8003990:	08003c2f 	.word	0x08003c2f
 8003994:	08003c2f 	.word	0x08003c2f
 8003998:	08003c2f 	.word	0x08003c2f
 800399c:	08003c2f 	.word	0x08003c2f
 80039a0:	08003c2f 	.word	0x08003c2f
 80039a4:	08003c2f 	.word	0x08003c2f
 80039a8:	08003c2f 	.word	0x08003c2f
 80039ac:	08003a17 	.word	0x08003a17
 80039b0:	08003c2f 	.word	0x08003c2f
 80039b4:	08003c2f 	.word	0x08003c2f
 80039b8:	08003c2f 	.word	0x08003c2f
 80039bc:	08003c2f 	.word	0x08003c2f
 80039c0:	08003c2f 	.word	0x08003c2f
 80039c4:	08003c2f 	.word	0x08003c2f
 80039c8:	08003c2f 	.word	0x08003c2f
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003c2f 	.word	0x08003c2f
 80039d4:	08003c2f 	.word	0x08003c2f
 80039d8:	08003c2f 	.word	0x08003c2f
 80039dc:	08003c2f 	.word	0x08003c2f
 80039e0:	08003c2f 	.word	0x08003c2f
 80039e4:	08003c2f 	.word	0x08003c2f
 80039e8:	08003c2f 	.word	0x08003c2f
 80039ec:	08003a23 	.word	0x08003a23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039f0:	4b94      	ldr	r3, [pc, #592]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039fc:	4b91      	ldr	r3, [pc, #580]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	08db      	lsrs	r3, r3, #3
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	4a90      	ldr	r2, [pc, #576]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a0e:	e111      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a10:	4b8d      	ldr	r3, [pc, #564]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a12:	61bb      	str	r3, [r7, #24]
      break;
 8003a14:	e10e      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a16:	4b8d      	ldr	r3, [pc, #564]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a18:	61bb      	str	r3, [r7, #24]
      break;
 8003a1a:	e10b      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a1c:	4b8c      	ldr	r3, [pc, #560]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a1e:	61bb      	str	r3, [r7, #24]
      break;
 8003a20:	e108      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a22:	4b88      	ldr	r3, [pc, #544]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a2c:	4b85      	ldr	r3, [pc, #532]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a38:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a42:	4b80      	ldr	r3, [pc, #512]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80e1 	beq.w	8003c28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	f000 8083 	beq.w	8003b74 <HAL_RCC_GetSysClockFreq+0x204>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f200 80a1 	bhi.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x114>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d056      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a82:	e099      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a84:	4b6f      	ldr	r3, [pc, #444]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d02d      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a90:	4b6c      	ldr	r3, [pc, #432]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	4a6b      	ldr	r2, [pc, #428]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b62      	ldr	r3, [pc, #392]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ace:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003aea:	e087      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b2e:	e065      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b72:	e043      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bb6:	e021      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bde:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bfa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	0a5b      	lsrs	r3, r3, #9
 8003c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c06:	3301      	adds	r3, #1
 8003c08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c20:	ee17 3a90 	vmov	r3, s15
 8003c24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c26:	e005      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
      break;
 8003c2c:	e002      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c30:	61bb      	str	r3, [r7, #24]
      break;
 8003c32:	bf00      	nop
  }

  return sysclockfreq;
 8003c34:	69bb      	ldr	r3, [r7, #24]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	58024400 	.word	0x58024400
 8003c48:	03d09000 	.word	0x03d09000
 8003c4c:	003d0900 	.word	0x003d0900
 8003c50:	017d7840 	.word	0x017d7840
 8003c54:	46000000 	.word	0x46000000
 8003c58:	4c742400 	.word	0x4c742400
 8003c5c:	4a742400 	.word	0x4a742400
 8003c60:	4bbebc20 	.word	0x4bbebc20

08003c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c6a:	f7ff fe81 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	490f      	ldr	r1, [pc, #60]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c7c:	5ccb      	ldrb	r3, [r1, r3]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003ca0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ca2:	4a07      	ldr	r2, [pc, #28]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	58024400 	.word	0x58024400
 8003cb8:	08006c30 	.word	0x08006c30
 8003cbc:	24000004 	.word	0x24000004
 8003cc0:	24000000 	.word	0x24000000

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003cc8:	f7ff ffcc 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4904      	ldr	r1, [pc, #16]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	08006c30 	.word	0x08006c30

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003cf4:	f7ff ffb6 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4904      	ldr	r1, [pc, #16]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	58024400 	.word	0x58024400
 8003d18:	08006c30 	.word	0x08006c30

08003d1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d20:	b0cc      	sub	sp, #304	; 0x130
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003d40:	2500      	movs	r5, #0
 8003d42:	ea54 0305 	orrs.w	r3, r4, r5
 8003d46:	d049      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d52:	d02f      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d58:	d828      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5e:	d01a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d64:	d822      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d6e:	d007      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d70:	e01c      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d72:	4bb8      	ldr	r3, [pc, #736]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4ab7      	ldr	r2, [pc, #732]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d7e:	e01a      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d84:	3308      	adds	r3, #8
 8003d86:	2102      	movs	r1, #2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fccf 	bl	800572c <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d94:	e00f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d9a:	3328      	adds	r3, #40	; 0x28
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 fd76 	bl	8005890 <RCCEx_PLL3_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003daa:	e004      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dbe:	4ba5      	ldr	r3, [pc, #660]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dcc:	4aa1      	ldr	r2, [pc, #644]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6513      	str	r3, [r2, #80]	; 0x50
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dd8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003de8:	f04f 0900 	mov.w	r9, #0
 8003dec:	ea58 0309 	orrs.w	r3, r8, r9
 8003df0:	d047      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d82a      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e19 	.word	0x08003e19
 8003e08:	08003e27 	.word	0x08003e27
 8003e0c:	08003e3d 	.word	0x08003e3d
 8003e10:	08003e5b 	.word	0x08003e5b
 8003e14:	08003e5b 	.word	0x08003e5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e18:	4b8e      	ldr	r3, [pc, #568]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4a8d      	ldr	r2, [pc, #564]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e24:	e01a      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fc7c 	bl	800572c <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e3a:	e00f      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e40:	3328      	adds	r3, #40	; 0x28
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 fd23 	bl	8005890 <RCCEx_PLL3_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e50:	e004      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e64:	4b7b      	ldr	r3, [pc, #492]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	f023 0107 	bic.w	r1, r3, #7
 8003e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	4a78      	ldr	r2, [pc, #480]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6513      	str	r3, [r2, #80]	; 0x50
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e7e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003e8e:	f04f 0b00 	mov.w	fp, #0
 8003e92:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e96:	d04c      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	d030      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea8:	d829      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8003eac:	d02d      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003eae:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb0:	d825      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d018      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d821      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d007      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003ec2:	e01c      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec4:	4b63      	ldr	r3, [pc, #396]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a62      	ldr	r2, [pc, #392]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ed0:	e01c      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 fc26 	bl	800572c <RCCEx_PLL2_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ee6:	e011      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eec:	3328      	adds	r3, #40	; 0x28
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 fccd 	bl	8005890 <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003efc:	e006      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003f04:	e002      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f18:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f22:	4a4c      	ldr	r2, [pc, #304]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6513      	str	r3, [r2, #80]	; 0x50
 8003f28:	e003      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f2e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003f3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f48:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	d053      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f5e:	d035      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f64:	d82e      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f6a:	d031      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f70:	d828      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f76:	d01a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7c:	d822      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003f82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f86:	d007      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003f88:	e01c      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8a:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	4a31      	ldr	r2, [pc, #196]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f96:	e01c      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 fbc3 	bl	800572c <RCCEx_PLL2_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fac:	e011      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fb2:	3328      	adds	r3, #40	; 0x28
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 fc6a 	bl	8005890 <RCCEx_PLL3_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e006      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003fca:	e002      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003fcc:	bf00      	nop
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003fda:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fea:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff0:	e003      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ff6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004006:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004010:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004014:	460b      	mov	r3, r1
 8004016:	4313      	orrs	r3, r2
 8004018:	d056      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800401a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800401e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004026:	d038      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800402c:	d831      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800402e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004032:	d034      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004034:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004038:	d82b      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800403a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800403e:	d01d      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004044:	d825      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800404a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004050:	e01f      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004052:	bf00      	nop
 8004054:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004058:	4ba2      	ldr	r3, [pc, #648]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	4aa1      	ldr	r2, [pc, #644]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800405e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004064:	e01c      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004066:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800406a:	3308      	adds	r3, #8
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fb5c 	bl	800572c <RCCEx_PLL2_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800407a:	e011      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800407c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004080:	3328      	adds	r3, #40	; 0x28
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f001 fc03 	bl	8005890 <RCCEx_PLL3_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800409e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040a8:	4b8e      	ldr	r3, [pc, #568]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80040b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040b8:	4a8a      	ldr	r2, [pc, #552]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6593      	str	r3, [r2, #88]	; 0x58
 80040be:	e003      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040c4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80040c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80040d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040de:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	d03a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80040e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ee:	2b30      	cmp	r3, #48	; 0x30
 80040f0:	d01f      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80040f2:	2b30      	cmp	r3, #48	; 0x30
 80040f4:	d819      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d00c      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d815      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d019      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004102:	2b10      	cmp	r3, #16
 8004104:	d111      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004106:	4b77      	ldr	r3, [pc, #476]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	4a76      	ldr	r2, [pc, #472]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800410c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004112:	e011      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004114:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004118:	3308      	adds	r3, #8
 800411a:	2102      	movs	r1, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f001 fb05 	bl	800572c <RCCEx_PLL2_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004130:	e002      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004138:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004140:	4b68      	ldr	r3, [pc, #416]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004148:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800414c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414e:	4a65      	ldr	r2, [pc, #404]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004150:	430b      	orrs	r3, r1
 8004152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004154:	e003      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004156:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800415a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800415e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800416a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004174:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004178:	460b      	mov	r3, r1
 800417a:	4313      	orrs	r3, r2
 800417c:	d051      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800417e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004188:	d035      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800418a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418e:	d82e      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004194:	d031      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800419a:	d828      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800419c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a0:	d01a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a6:	d822      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d007      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80041b2:	e01c      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b4:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	4a4a      	ldr	r2, [pc, #296]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041c0:	e01c      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041c6:	3308      	adds	r3, #8
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 faae 	bl	800572c <RCCEx_PLL2_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041d6:	e011      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041dc:	3328      	adds	r3, #40	; 0x28
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 fb55 	bl	8005890 <RCCEx_PLL3_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041ec:	e006      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80041f4:	e002      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80041fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004204:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004208:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800420c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004212:	4a34      	ldr	r2, [pc, #208]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004214:	430b      	orrs	r3, r1
 8004216:	6513      	str	r3, [r2, #80]	; 0x50
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800421e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004222:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800422e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004232:	2300      	movs	r3, #0
 8004234:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004238:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800423c:	460b      	mov	r3, r1
 800423e:	4313      	orrs	r3, r2
 8004240:	d056      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004242:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800424c:	d033      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800424e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004252:	d82c      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004258:	d02f      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800425a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800425e:	d826      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004260:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004264:	d02b      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004266:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800426a:	d820      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800426c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004270:	d012      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004276:	d81a      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d022      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d115      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004282:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004286:	3308      	adds	r3, #8
 8004288:	2101      	movs	r1, #1
 800428a:	4618      	mov	r0, r3
 800428c:	f001 fa4e 	bl	800572c <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004296:	e015      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004298:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800429c:	3328      	adds	r3, #40	; 0x28
 800429e:	2101      	movs	r1, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 faf5 	bl	8005890 <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042ac:	e00a      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042b6:	bf00      	nop
 80042b8:	e004      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042ba:	bf00      	nop
 80042bc:	e002      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80042d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042da:	4a02      	ldr	r2, [pc, #8]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042dc:	430b      	orrs	r3, r1
 80042de:	6513      	str	r3, [r2, #80]	; 0x50
 80042e0:	e006      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80042e2:	bf00      	nop
 80042e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80042ec:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80042fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004306:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800430a:	460b      	mov	r3, r1
 800430c:	4313      	orrs	r3, r2
 800430e:	d055      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004310:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800431c:	d033      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800431e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004322:	d82c      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004328:	d02f      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d826      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004330:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004334:	d02b      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004336:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800433a:	d820      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800433c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004340:	d012      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004346:	d81a      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d022      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800434c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004350:	d115      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004352:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004356:	3308      	adds	r3, #8
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f9e6 	bl	800572c <RCCEx_PLL2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004366:	e015      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004368:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800436c:	3328      	adds	r3, #40	; 0x28
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f001 fa8d 	bl	8005890 <RCCEx_PLL3_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800437c:	e00a      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004384:	e006      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004386:	bf00      	nop
 8004388:	e004      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800438a:	bf00      	nop
 800438c:	e002      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800438e:	bf00      	nop
 8004390:	e000      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004394:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10b      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800439c:	4bb6      	ldr	r3, [pc, #728]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043ac:	4ab2      	ldr	r2, [pc, #712]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80043ae:	430b      	orrs	r3, r1
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
 80043b2:	e003      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80043b8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80043bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80043c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043cc:	2300      	movs	r3, #0
 80043ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d02a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80043dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ea:	d10a      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043f0:	3308      	adds	r3, #8
 80043f2:	2101      	movs	r1, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 f999 	bl	800572c <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8004400:	e004      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004408:	e000      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800440a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10a      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004414:	4b98      	ldr	r3, [pc, #608]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004418:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800441c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004422:	4a95      	ldr	r2, [pc, #596]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004424:	430b      	orrs	r3, r1
 8004426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004428:	e003      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800442e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004432:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800443e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004442:	2300      	movs	r3, #0
 8004444:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004448:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800444c:	460b      	mov	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	d037      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004452:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445c:	d00e      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800445e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004462:	d816      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d018      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800446c:	d111      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446e:	4b82      	ldr	r3, [pc, #520]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	4a81      	ldr	r2, [pc, #516]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800447a:	e00f      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800447c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004480:	3308      	adds	r3, #8
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f001 f951 	bl	800572c <RCCEx_PLL2_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004490:	e004      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800449a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044a4:	4b74      	ldr	r3, [pc, #464]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80044a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80044ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	4a71      	ldr	r2, [pc, #452]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6513      	str	r3, [r2, #80]	; 0x50
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80044be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80044ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80044d8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d03a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d81d      	bhi.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004531 	.word	0x08004531
 80044f8:	08004505 	.word	0x08004505
 80044fc:	08004513 	.word	0x08004513
 8004500:	08004531 	.word	0x08004531
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004504:	4b5c      	ldr	r3, [pc, #368]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	4a5b      	ldr	r2, [pc, #364]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800450a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004510:	e00f      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004516:	3308      	adds	r3, #8
 8004518:	2102      	movs	r1, #2
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f906 	bl	800572c <RCCEx_PLL2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004526:	e004      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800452e:	e000      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004532:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800453a:	4b4f      	ldr	r3, [pc, #316]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	f023 0103 	bic.w	r1, r3, #3
 8004542:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	4a4b      	ldr	r2, [pc, #300]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800454a:	430b      	orrs	r3, r1
 800454c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800454e:	e003      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004554:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004564:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004568:	2300      	movs	r3, #0
 800456a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800456e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004572:	460b      	mov	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	f000 80a0 	beq.w	80046ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800457a:	4b40      	ldr	r3, [pc, #256]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3f      	ldr	r2, [pc, #252]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004586:	f7fd fa37 	bl	80019f8 <HAL_GetTick>
 800458a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800458e:	e00b      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004590:	f7fd fa32 	bl	80019f8 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b64      	cmp	r3, #100	; 0x64
 800459e:	d903      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80045a6:	e005      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045a8:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ed      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80045b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d17a      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045bc:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045c8:	4053      	eors	r3, r2
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d015      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045d2:	4b29      	ldr	r3, [pc, #164]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a25      	ldr	r2, [pc, #148]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a22      	ldr	r2, [pc, #136]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045f6:	4a20      	ldr	r2, [pc, #128]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004602:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460a:	d118      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd f9f4 	bl	80019f8 <HAL_GetTick>
 8004610:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004614:	e00d      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fd f9ef 	bl	80019f8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004620:	1ad2      	subs	r2, r2, r3
 8004622:	f241 3388 	movw	r3, #5000	; 0x1388
 8004626:	429a      	cmp	r2, r3
 8004628:	d903      	bls.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8004630:	e005      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0eb      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800463e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004642:	2b00      	cmp	r3, #0
 8004644:	d130      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004646:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800464a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800464e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004656:	d115      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004658:	4b07      	ldr	r3, [pc, #28]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004660:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004664:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004668:	091a      	lsrs	r2, r3, #4
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800466c:	4013      	ands	r3, r2
 800466e:	4a02      	ldr	r2, [pc, #8]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004670:	430b      	orrs	r3, r1
 8004672:	6113      	str	r3, [r2, #16]
 8004674:	e00c      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004676:	bf00      	nop
 8004678:	58024400 	.word	0x58024400
 800467c:	58024800 	.word	0x58024800
 8004680:	00ffffcf 	.word	0x00ffffcf
 8004684:	4bd4      	ldr	r3, [pc, #848]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	4ad3      	ldr	r2, [pc, #844]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800468a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800468e:	6113      	str	r3, [r2, #16]
 8004690:	4bd1      	ldr	r3, [pc, #836]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004692:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004694:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004698:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800469c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a0:	4acd      	ldr	r2, [pc, #820]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80046a2:	430b      	orrs	r3, r1
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	e008      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046ac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80046b0:	e003      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f002 0301 	and.w	r3, r2, #1
 80046c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046ca:	2300      	movs	r3, #0
 80046cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f000 808b 	beq.w	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80046dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e4:	2b28      	cmp	r3, #40	; 0x28
 80046e6:	d86b      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	080047c9 	.word	0x080047c9
 80046f4:	080047c1 	.word	0x080047c1
 80046f8:	080047c1 	.word	0x080047c1
 80046fc:	080047c1 	.word	0x080047c1
 8004700:	080047c1 	.word	0x080047c1
 8004704:	080047c1 	.word	0x080047c1
 8004708:	080047c1 	.word	0x080047c1
 800470c:	080047c1 	.word	0x080047c1
 8004710:	08004795 	.word	0x08004795
 8004714:	080047c1 	.word	0x080047c1
 8004718:	080047c1 	.word	0x080047c1
 800471c:	080047c1 	.word	0x080047c1
 8004720:	080047c1 	.word	0x080047c1
 8004724:	080047c1 	.word	0x080047c1
 8004728:	080047c1 	.word	0x080047c1
 800472c:	080047c1 	.word	0x080047c1
 8004730:	080047ab 	.word	0x080047ab
 8004734:	080047c1 	.word	0x080047c1
 8004738:	080047c1 	.word	0x080047c1
 800473c:	080047c1 	.word	0x080047c1
 8004740:	080047c1 	.word	0x080047c1
 8004744:	080047c1 	.word	0x080047c1
 8004748:	080047c1 	.word	0x080047c1
 800474c:	080047c1 	.word	0x080047c1
 8004750:	080047c9 	.word	0x080047c9
 8004754:	080047c1 	.word	0x080047c1
 8004758:	080047c1 	.word	0x080047c1
 800475c:	080047c1 	.word	0x080047c1
 8004760:	080047c1 	.word	0x080047c1
 8004764:	080047c1 	.word	0x080047c1
 8004768:	080047c1 	.word	0x080047c1
 800476c:	080047c1 	.word	0x080047c1
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047c1 	.word	0x080047c1
 8004778:	080047c1 	.word	0x080047c1
 800477c:	080047c1 	.word	0x080047c1
 8004780:	080047c1 	.word	0x080047c1
 8004784:	080047c1 	.word	0x080047c1
 8004788:	080047c1 	.word	0x080047c1
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047c9 	.word	0x080047c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004798:	3308      	adds	r3, #8
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f000 ffc5 	bl	800572c <RCCEx_PLL2_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047a8:	e00f      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047ae:	3328      	adds	r3, #40	; 0x28
 80047b0:	2101      	movs	r1, #1
 80047b2:	4618      	mov	r0, r3
 80047b4:	f001 f86c 	bl	8005890 <RCCEx_PLL3_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047be:	e004      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80047c6:	e000      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80047c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10b      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047d2:	4b81      	ldr	r3, [pc, #516]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80047da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e2:	4a7d      	ldr	r2, [pc, #500]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6553      	str	r3, [r2, #84]	; 0x54
 80047e8:	e003      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fa:	f002 0302 	and.w	r3, r2, #2
 80047fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004802:	2300      	movs	r3, #0
 8004804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004808:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d042      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004812:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004818:	2b05      	cmp	r3, #5
 800481a:	d825      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004871 	.word	0x08004871
 8004828:	0800483d 	.word	0x0800483d
 800482c:	08004853 	.word	0x08004853
 8004830:	08004871 	.word	0x08004871
 8004834:	08004871 	.word	0x08004871
 8004838:	08004871 	.word	0x08004871
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800483c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004840:	3308      	adds	r3, #8
 8004842:	2101      	movs	r1, #1
 8004844:	4618      	mov	r0, r3
 8004846:	f000 ff71 	bl	800572c <RCCEx_PLL2_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004850:	e00f      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004852:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004856:	3328      	adds	r3, #40	; 0x28
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f001 f818 	bl	8005890 <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004866:	e004      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004872:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800487a:	4b57      	ldr	r3, [pc, #348]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f023 0107 	bic.w	r1, r3, #7
 8004882:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004888:	4a53      	ldr	r2, [pc, #332]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800488a:	430b      	orrs	r3, r1
 800488c:	6553      	str	r3, [r2, #84]	; 0x54
 800488e:	e003      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004894:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004898:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f002 0304 	and.w	r3, r2, #4
 80048a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4313      	orrs	r3, r2
 80048b6:	d044      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80048b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048c0:	2b05      	cmp	r3, #5
 80048c2:	d825      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	08004919 	.word	0x08004919
 80048d0:	080048e5 	.word	0x080048e5
 80048d4:	080048fb 	.word	0x080048fb
 80048d8:	08004919 	.word	0x08004919
 80048dc:	08004919 	.word	0x08004919
 80048e0:	08004919 	.word	0x08004919
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048e8:	3308      	adds	r3, #8
 80048ea:	2101      	movs	r1, #1
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 ff1d 	bl	800572c <RCCEx_PLL2_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048f8:	e00f      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048fe:	3328      	adds	r3, #40	; 0x28
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f000 ffc4 	bl	8005890 <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800490e:	e004      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004916:	e000      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004922:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	f023 0107 	bic.w	r1, r3, #7
 800492a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800492e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004932:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004934:	430b      	orrs	r3, r1
 8004936:	6593      	str	r3, [r2, #88]	; 0x58
 8004938:	e003      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800493e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004942:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f002 0320 	and.w	r3, r2, #32
 800494e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800495c:	460b      	mov	r3, r1
 800495e:	4313      	orrs	r3, r2
 8004960:	d057      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800496e:	d035      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004974:	d82c      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d031      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004980:	d826      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004986:	d02d      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800498c:	d820      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800498e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004992:	d012      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004998:	d81a      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d024      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800499e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a2:	d115      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049a8:	3308      	adds	r3, #8
 80049aa:	2100      	movs	r1, #0
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 febd 	bl	800572c <RCCEx_PLL2_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049b8:	e017      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049be:	3328      	adds	r3, #40	; 0x28
 80049c0:	2102      	movs	r1, #2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 ff64 	bl	8005890 <RCCEx_PLL3_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049ce:	e00c      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80049d6:	e008      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80049d8:	58024400 	.word	0x58024400
        break;
 80049dc:	bf00      	nop
 80049de:	e004      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80049e0:	bf00      	nop
 80049e2:	e002      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80049e4:	bf00      	nop
 80049e6:	e000      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80049e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f2:	4bc2      	ldr	r3, [pc, #776]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80049fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	4abe      	ldr	r2, [pc, #760]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6553      	str	r3, [r2, #84]	; 0x54
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a0e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d055      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a3e:	d033      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004a40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a44:	d82c      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	d02f      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a50:	d826      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a56:	d02b      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a5c:	d820      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a62:	d012      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a68:	d81a      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d022      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d115      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a78:	3308      	adds	r3, #8
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fe55 	bl	800572c <RCCEx_PLL2_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a88:	e015      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a8e:	3328      	adds	r3, #40	; 0x28
 8004a90:	2102      	movs	r1, #2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fefc 	bl	8005890 <RCCEx_PLL3_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004aa6:	e006      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004aa8:	bf00      	nop
 8004aaa:	e004      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004aac:	bf00      	nop
 8004aae:	e002      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004abe:	4b8f      	ldr	r3, [pc, #572]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ace:	4a8b      	ldr	r2, [pc, #556]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad4:	e003      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ada:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004aea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004af4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d055      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b0a:	d033      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004b0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b10:	d82c      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b16:	d02f      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1c:	d826      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004b1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b22:	d02b      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004b24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b28:	d820      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b2e:	d012      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b34:	d81a      	bhi.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d022      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3e:	d115      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b44:	3308      	adds	r3, #8
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fdef 	bl	800572c <RCCEx_PLL2_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b54:	e015      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b5a:	3328      	adds	r3, #40	; 0x28
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fe96 	bl	8005890 <RCCEx_PLL3_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004b72:	e006      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004b74:	bf00      	nop
 8004b76:	e004      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004b78:	bf00      	nop
 8004b7a:	e002      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004b7c:	bf00      	nop
 8004b7e:	e000      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10b      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b9a:	4a58      	ldr	r2, [pc, #352]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004ba0:	e003      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ba6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f002 0308 	and.w	r3, r2, #8
 8004bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bc0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d01e      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bdc:	3328      	adds	r3, #40	; 0x28
 8004bde:	2102      	movs	r1, #2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fe55 	bl	8005890 <RCCEx_PLL3_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004bf2:	4b42      	ldr	r3, [pc, #264]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	4a3e      	ldr	r2, [pc, #248]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f002 0310 	and.w	r3, r2, #16
 8004c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004c22:	460b      	mov	r3, r1
 8004c24:	4313      	orrs	r3, r2
 8004c26:	d01e      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c3a:	3328      	adds	r3, #40	; 0x28
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fe26 	bl	8005890 <RCCEx_PLL3_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c50:	4b2a      	ldr	r3, [pc, #168]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c60:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c62:	430b      	orrs	r3, r1
 8004c64:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004c72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c76:	2300      	movs	r3, #0
 8004c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004c80:	460b      	mov	r3, r1
 8004c82:	4313      	orrs	r3, r2
 8004c84:	d040      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c92:	d022      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c98:	d81b      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca2:	d00b      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004ca4:	e015      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004caa:	3308      	adds	r3, #8
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fd3c 	bl	800572c <RCCEx_PLL2_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004cba:	e00f      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cc0:	3328      	adds	r3, #40	; 0x28
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fde3 	bl	8005890 <RCCEx_PLL3_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004cd0:	e004      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004cd8:	e000      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8004cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10d      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cf4:	4a01      	ldr	r2, [pc, #4]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8004cfa:	e005      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d04:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d16:	2300      	movs	r3, #0
 8004d18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4313      	orrs	r3, r2
 8004d22:	d03b      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d30:	d01f      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004d32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d36:	d818      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3c:	d003      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8004d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d42:	d007      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004d44:	e011      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d46:	4b64      	ldr	r3, [pc, #400]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	4a63      	ldr	r2, [pc, #396]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d52:	e00f      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d58:	3328      	adds	r3, #40	; 0x28
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fd97 	bl	8005890 <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d68:	e004      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004d70:	e000      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d7c:	4b56      	ldr	r3, [pc, #344]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d8c:	4a52      	ldr	r2, [pc, #328]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	6553      	str	r3, [r2, #84]	; 0x54
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d98:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004da8:	673b      	str	r3, [r7, #112]	; 0x70
 8004daa:	2300      	movs	r3, #0
 8004dac:	677b      	str	r3, [r7, #116]	; 0x74
 8004dae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004db2:	460b      	mov	r3, r1
 8004db4:	4313      	orrs	r3, r2
 8004db6:	d031      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc6:	d007      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004dc8:	e011      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dca:	4b43      	ldr	r3, [pc, #268]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	4a42      	ldr	r2, [pc, #264]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004dd6:	e00e      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ddc:	3308      	adds	r3, #8
 8004dde:	2102      	movs	r1, #2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fca3 	bl	800572c <RCCEx_PLL2_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004dec:	e003      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004dfe:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	4a32      	ldr	r2, [pc, #200]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e12:	e003      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004e18:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004e32:	460b      	mov	r3, r1
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d00c      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e3c:	3328      	adds	r3, #40	; 0x28
 8004e3e:	2102      	movs	r1, #2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fd25 	bl	8005890 <RCCEx_PLL3_Config>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e60:	2300      	movs	r3, #0
 8004e62:	667b      	str	r3, [r7, #100]	; 0x64
 8004e64:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	d03a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e7a:	d018      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e80:	d811      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e86:	d014      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8c:	d80b      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d011      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e98:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004eac:	e004      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e002      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10d      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	4a01      	ldr	r2, [pc, #4]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	6553      	str	r3, [r2, #84]	; 0x54
 8004ed6:	e005      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ee0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004ef0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004efa:	460b      	mov	r3, r1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f00:	4baa      	ldr	r3, [pc, #680]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f0e:	4aa7      	ldr	r2, [pc, #668]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004f20:	653b      	str	r3, [r7, #80]	; 0x50
 8004f22:	2300      	movs	r3, #0
 8004f24:	657b      	str	r3, [r7, #84]	; 0x54
 8004f26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f30:	4b9e      	ldr	r3, [pc, #632]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f40:	4a9a      	ldr	r2, [pc, #616]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f54:	2300      	movs	r3, #0
 8004f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f58:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f62:	4b92      	ldr	r3, [pc, #584]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f66:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	4a8e      	ldr	r2, [pc, #568]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f72:	430b      	orrs	r3, r1
 8004f74:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40
 8004f84:	2300      	movs	r3, #0
 8004f86:	647b      	str	r3, [r7, #68]	; 0x44
 8004f88:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f92:	4b86      	ldr	r3, [pc, #536]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	4a85      	ldr	r2, [pc, #532]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f9c:	6113      	str	r3, [r2, #16]
 8004f9e:	4b83      	ldr	r3, [pc, #524]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004fa0:	6919      	ldr	r1, [r3, #16]
 8004fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fa6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004faa:	4a80      	ldr	r2, [pc, #512]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	d009      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004fcc:	4b77      	ldr	r3, [pc, #476]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	4a74      	ldr	r2, [pc, #464]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004fec:	633b      	str	r3, [r7, #48]	; 0x30
 8004fee:	2300      	movs	r3, #0
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ffc:	4b6b      	ldr	r3, [pc, #428]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005000:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005004:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	4a67      	ldr	r2, [pc, #412]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800500e:	430b      	orrs	r3, r1
 8005010:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005012:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	2100      	movs	r1, #0
 800501c:	62b9      	str	r1, [r7, #40]	; 0x28
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005024:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005028:	460b      	mov	r3, r1
 800502a:	4313      	orrs	r3, r2
 800502c:	d011      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800502e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005032:	3308      	adds	r3, #8
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fb78 	bl	800572c <RCCEx_PLL2_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005042:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800504e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005052:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	2100      	movs	r1, #0
 800505c:	6239      	str	r1, [r7, #32]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
 8005064:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005068:	460b      	mov	r3, r1
 800506a:	4313      	orrs	r3, r2
 800506c:	d011      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800506e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005072:	3308      	adds	r3, #8
 8005074:	2101      	movs	r1, #1
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fb58 	bl	800572c <RCCEx_PLL2_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005082:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800508e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	2100      	movs	r1, #0
 800509c:	61b9      	str	r1, [r7, #24]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80050a8:	460b      	mov	r3, r1
 80050aa:	4313      	orrs	r3, r2
 80050ac:	d011      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050b2:	3308      	adds	r3, #8
 80050b4:	2102      	movs	r1, #2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fb38 	bl	800572c <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80050c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80050d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	2100      	movs	r1, #0
 80050dc:	6139      	str	r1, [r7, #16]
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80050e8:	460b      	mov	r3, r1
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d011      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050f2:	3328      	adds	r3, #40	; 0x28
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fbca 	bl	8005890 <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8005102:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800510e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005112:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	2100      	movs	r1, #0
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005128:	460b      	mov	r3, r1
 800512a:	4313      	orrs	r3, r2
 800512c:	d011      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800512e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005132:	3328      	adds	r3, #40	; 0x28
 8005134:	2101      	movs	r1, #1
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fbaa 	bl	8005890 <RCCEx_PLL3_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005142:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800514e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005152:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	2100      	movs	r1, #0
 800515c:	6039      	str	r1, [r7, #0]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	607b      	str	r3, [r7, #4]
 8005164:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005168:	460b      	mov	r3, r1
 800516a:	4313      	orrs	r3, r2
 800516c:	d011      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800516e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005172:	3328      	adds	r3, #40	; 0x28
 8005174:	2102      	movs	r1, #2
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fb8a 	bl	8005890 <RCCEx_PLL3_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005182:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800518e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8005192:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e000      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80051a6:	46bd      	mov	sp, r7
 80051a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ac:	58024400 	.word	0x58024400

080051b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80051b4:	f7fe fd56 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4904      	ldr	r1, [pc, #16]	; (80051d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	58024400 	.word	0x58024400
 80051d8:	08006c30 	.word	0x08006c30

080051dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	; 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051e4:	4ba1      	ldr	r3, [pc, #644]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80051ee:	4b9f      	ldr	r3, [pc, #636]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	0b1b      	lsrs	r3, r3, #12
 80051f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051fa:	4b9c      	ldr	r3, [pc, #624]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005206:	4b99      	ldr	r3, [pc, #612]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	08db      	lsrs	r3, r3, #3
 800520c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8111 	beq.w	800544c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b02      	cmp	r3, #2
 800522e:	f000 8083 	beq.w	8005338 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b02      	cmp	r3, #2
 8005236:	f200 80a1 	bhi.w	800537c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d056      	beq.n	80052f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005246:	e099      	b.n	800537c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005248:	4b88      	ldr	r3, [pc, #544]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02d      	beq.n	80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005254:	4b85      	ldr	r3, [pc, #532]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	4a84      	ldr	r2, [pc, #528]	; (8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
 8005264:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	ee07 3a90 	vmov	s15, r3
 800526c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527e:	4b7b      	ldr	r3, [pc, #492]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005292:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80052ae:	e087      	b.n	80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005478 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80052be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c2:	4b6a      	ldr	r3, [pc, #424]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052f2:	e065      	b.n	80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b59      	ldr	r3, [pc, #356]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a03 	vldr	s12, [r7, #12]
 800531a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005336:	e043      	b.n	80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534a:	4b48      	ldr	r3, [pc, #288]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535a:	ed97 6a03 	vldr	s12, [r7, #12]
 800535e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800537a:	e021      	b.n	80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800547c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b37      	ldr	r3, [pc, #220]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80053c0:	4b2a      	ldr	r3, [pc, #168]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	0a5b      	lsrs	r3, r3, #9
 80053c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053da:	edd7 6a07 	vldr	s13, [r7, #28]
 80053de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e6:	ee17 2a90 	vmov	r2, s15
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80053ee:	4b1f      	ldr	r3, [pc, #124]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	0c1b      	lsrs	r3, r3, #16
 80053f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f8:	ee07 3a90 	vmov	s15, r3
 80053fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005408:	edd7 6a07 	vldr	s13, [r7, #28]
 800540c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005414:	ee17 2a90 	vmov	r2, s15
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800541c:	4b13      	ldr	r3, [pc, #76]	; (800546c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	0e1b      	lsrs	r3, r3, #24
 8005422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005436:	edd7 6a07 	vldr	s13, [r7, #28]
 800543a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800543e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005442:	ee17 2a90 	vmov	r2, s15
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800544a:	e008      	b.n	800545e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	609a      	str	r2, [r3, #8]
}
 800545e:	bf00      	nop
 8005460:	3724      	adds	r7, #36	; 0x24
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	58024400 	.word	0x58024400
 8005470:	03d09000 	.word	0x03d09000
 8005474:	46000000 	.word	0x46000000
 8005478:	4c742400 	.word	0x4c742400
 800547c:	4a742400 	.word	0x4a742400
 8005480:	4bbebc20 	.word	0x4bbebc20

08005484 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005484:	b480      	push	{r7}
 8005486:	b089      	sub	sp, #36	; 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800548c:	4ba1      	ldr	r3, [pc, #644]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005496:	4b9f      	ldr	r3, [pc, #636]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	0d1b      	lsrs	r3, r3, #20
 800549c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80054a2:	4b9c      	ldr	r3, [pc, #624]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80054ae:	4b99      	ldr	r3, [pc, #612]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	08db      	lsrs	r3, r3, #3
 80054b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8111 	beq.w	80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	f000 8083 	beq.w	80055e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	f200 80a1 	bhi.w	8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d056      	beq.n	800559c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80054ee:	e099      	b.n	8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f0:	4b88      	ldr	r3, [pc, #544]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02d      	beq.n	8005558 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054fc:	4b85      	ldr	r3, [pc, #532]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	08db      	lsrs	r3, r3, #3
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	4a84      	ldr	r2, [pc, #528]	; (8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
 800550c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005526:	4b7b      	ldr	r3, [pc, #492]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005536:	ed97 6a03 	vldr	s12, [r7, #12]
 800553a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800571c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800553e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800554a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005552:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005556:	e087      	b.n	8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005562:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005720 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556a:	4b6a      	ldr	r3, [pc, #424]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557a:	ed97 6a03 	vldr	s12, [r7, #12]
 800557e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800571c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800558e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800559a:	e065      	b.n	8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ae:	4b59      	ldr	r3, [pc, #356]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055be:	ed97 6a03 	vldr	s12, [r7, #12]
 80055c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800571c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055de:	e043      	b.n	8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80055ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f2:	4b48      	ldr	r3, [pc, #288]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005602:	ed97 6a03 	vldr	s12, [r7, #12]
 8005606:	eddf 5a45 	vldr	s11, [pc, #276]	; 800571c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800560a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005622:	e021      	b.n	8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b37      	ldr	r3, [pc, #220]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a03 	vldr	s12, [r7, #12]
 800564a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800571c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005666:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005668:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	0a5b      	lsrs	r3, r3, #9
 800566e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800567e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005682:	edd7 6a07 	vldr	s13, [r7, #28]
 8005686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800568a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568e:	ee17 2a90 	vmov	r2, s15
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005696:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	0c1b      	lsrs	r3, r3, #16
 800569c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80056b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056bc:	ee17 2a90 	vmov	r2, s15
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80056c4:	4b13      	ldr	r3, [pc, #76]	; (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	0e1b      	lsrs	r3, r3, #24
 80056ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056de:	edd7 6a07 	vldr	s13, [r7, #28]
 80056e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ea:	ee17 2a90 	vmov	r2, s15
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056f2:	e008      	b.n	8005706 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	bf00      	nop
 8005708:	3724      	adds	r7, #36	; 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	58024400 	.word	0x58024400
 8005718:	03d09000 	.word	0x03d09000
 800571c:	46000000 	.word	0x46000000
 8005720:	4c742400 	.word	0x4c742400
 8005724:	4a742400 	.word	0x4a742400
 8005728:	4bbebc20 	.word	0x4bbebc20

0800572c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800573a:	4b53      	ldr	r3, [pc, #332]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b03      	cmp	r3, #3
 8005744:	d101      	bne.n	800574a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e099      	b.n	800587e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800574a:	4b4f      	ldr	r3, [pc, #316]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a4e      	ldr	r2, [pc, #312]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005750:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005756:	f7fc f94f 	bl	80019f8 <HAL_GetTick>
 800575a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800575c:	e008      	b.n	8005770 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800575e:	f7fc f94b 	bl	80019f8 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e086      	b.n	800587e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005770:	4b45      	ldr	r3, [pc, #276]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f0      	bne.n	800575e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800577c:	4b42      	ldr	r3, [pc, #264]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	031b      	lsls	r3, r3, #12
 800578a:	493f      	ldr	r1, [pc, #252]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 800578c:	4313      	orrs	r3, r2
 800578e:	628b      	str	r3, [r1, #40]	; 0x28
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	3b01      	subs	r3, #1
 8005796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	3b01      	subs	r3, #1
 80057a0:	025b      	lsls	r3, r3, #9
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	061b      	lsls	r3, r3, #24
 80057bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057c0:	4931      	ldr	r1, [pc, #196]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80057c6:	4b30      	ldr	r3, [pc, #192]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	492d      	ldr	r1, [pc, #180]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	f023 0220 	bic.w	r2, r3, #32
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	4928      	ldr	r1, [pc, #160]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80057ea:	4b27      	ldr	r3, [pc, #156]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	4a26      	ldr	r2, [pc, #152]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 80057f0:	f023 0310 	bic.w	r3, r3, #16
 80057f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <RCCEx_PLL2_Config+0x160>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	69d2      	ldr	r2, [r2, #28]
 8005802:	00d2      	lsls	r2, r2, #3
 8005804:	4920      	ldr	r1, [pc, #128]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005806:	4313      	orrs	r3, r2
 8005808:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800580a:	4b1f      	ldr	r3, [pc, #124]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	4a1e      	ldr	r2, [pc, #120]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005810:	f043 0310 	orr.w	r3, r3, #16
 8005814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800581c:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4a19      	ldr	r2, [pc, #100]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005828:	e00f      	b.n	800584a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d106      	bne.n	800583e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005830:	4b15      	ldr	r3, [pc, #84]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	4a14      	ldr	r2, [pc, #80]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800583a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800583c:	e005      	b.n	800584a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800583e:	4b12      	ldr	r3, [pc, #72]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	4a11      	ldr	r2, [pc, #68]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005848:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a0e      	ldr	r2, [pc, #56]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005850:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005856:	f7fc f8cf 	bl	80019f8 <HAL_GetTick>
 800585a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800585c:	e008      	b.n	8005870 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800585e:	f7fc f8cb 	bl	80019f8 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e006      	b.n	800587e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <RCCEx_PLL2_Config+0x15c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	58024400 	.word	0x58024400
 800588c:	ffff0007 	.word	0xffff0007

08005890 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800589e:	4b53      	ldr	r3, [pc, #332]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d101      	bne.n	80058ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e099      	b.n	80059e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80058ae:	4b4f      	ldr	r3, [pc, #316]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a4e      	ldr	r2, [pc, #312]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80058b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ba:	f7fc f89d 	bl	80019f8 <HAL_GetTick>
 80058be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058c0:	e008      	b.n	80058d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80058c2:	f7fc f899 	bl	80019f8 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e086      	b.n	80059e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058d4:	4b45      	ldr	r3, [pc, #276]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f0      	bne.n	80058c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80058e0:	4b42      	ldr	r3, [pc, #264]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	051b      	lsls	r3, r3, #20
 80058ee:	493f      	ldr	r1, [pc, #252]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	628b      	str	r3, [r1, #40]	; 0x28
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	3b01      	subs	r3, #1
 8005904:	025b      	lsls	r3, r3, #9
 8005906:	b29b      	uxth	r3, r3
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	3b01      	subs	r3, #1
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	3b01      	subs	r3, #1
 800591e:	061b      	lsls	r3, r3, #24
 8005920:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005924:	4931      	ldr	r1, [pc, #196]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 8005926:	4313      	orrs	r3, r2
 8005928:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800592a:	4b30      	ldr	r3, [pc, #192]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	492d      	ldr	r1, [pc, #180]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 8005938:	4313      	orrs	r3, r2
 800593a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800593c:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	4928      	ldr	r1, [pc, #160]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 800594a:	4313      	orrs	r3, r2
 800594c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800594e:	4b27      	ldr	r3, [pc, #156]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	4a26      	ldr	r2, [pc, #152]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 8005954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800595a:	4b24      	ldr	r3, [pc, #144]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 800595c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800595e:	4b24      	ldr	r3, [pc, #144]	; (80059f0 <RCCEx_PLL3_Config+0x160>)
 8005960:	4013      	ands	r3, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	69d2      	ldr	r2, [r2, #28]
 8005966:	00d2      	lsls	r2, r2, #3
 8005968:	4920      	ldr	r1, [pc, #128]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 800596a:	4313      	orrs	r3, r2
 800596c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800596e:	4b1f      	ldr	r3, [pc, #124]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	4a1e      	ldr	r2, [pc, #120]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 8005974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005980:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	4a19      	ldr	r2, [pc, #100]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 8005986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800598a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800598c:	e00f      	b.n	80059ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d106      	bne.n	80059a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005994:	4b15      	ldr	r3, [pc, #84]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	4a14      	ldr	r2, [pc, #80]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 800599a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800599e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059a0:	e005      	b.n	80059ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	4a11      	ldr	r2, [pc, #68]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80059a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80059ae:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a0e      	ldr	r2, [pc, #56]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80059b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ba:	f7fc f81d 	bl	80019f8 <HAL_GetTick>
 80059be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059c0:	e008      	b.n	80059d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059c2:	f7fc f819 	bl	80019f8 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e006      	b.n	80059e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <RCCEx_PLL3_Config+0x15c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0f0      	beq.n	80059c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	58024400 	.word	0x58024400
 80059f0:	ffff0007 	.word	0xffff0007

080059f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e042      	b.n	8005a8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7fb fed3 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2224      	movs	r2, #36	; 0x24
 8005a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0201 	bic.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f82c 	bl	8005a94 <UART_SetConfig>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e022      	b.n	8005a8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fd88 	bl	8006564 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fe0f 	bl	80066a8 <UART_CheckIdleState>
 8005a8a:	4603      	mov	r3, r0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a98:	b092      	sub	sp, #72	; 0x48
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4bbe      	ldr	r3, [pc, #760]	; (8005dbc <UART_SetConfig+0x328>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4ab3      	ldr	r2, [pc, #716]	; (8005dc0 <UART_SetConfig+0x32c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afc:	4313      	orrs	r3, r2
 8005afe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	4baf      	ldr	r3, [pc, #700]	; (8005dc4 <UART_SetConfig+0x330>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	f023 010f 	bic.w	r1, r3, #15
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4aa6      	ldr	r2, [pc, #664]	; (8005dc8 <UART_SetConfig+0x334>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d177      	bne.n	8005c24 <UART_SetConfig+0x190>
 8005b34:	4ba5      	ldr	r3, [pc, #660]	; (8005dcc <UART_SetConfig+0x338>)
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b3c:	2b28      	cmp	r3, #40	; 0x28
 8005b3e:	d86d      	bhi.n	8005c1c <UART_SetConfig+0x188>
 8005b40:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <UART_SetConfig+0xb4>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005bed 	.word	0x08005bed
 8005b4c:	08005c1d 	.word	0x08005c1d
 8005b50:	08005c1d 	.word	0x08005c1d
 8005b54:	08005c1d 	.word	0x08005c1d
 8005b58:	08005c1d 	.word	0x08005c1d
 8005b5c:	08005c1d 	.word	0x08005c1d
 8005b60:	08005c1d 	.word	0x08005c1d
 8005b64:	08005c1d 	.word	0x08005c1d
 8005b68:	08005bf5 	.word	0x08005bf5
 8005b6c:	08005c1d 	.word	0x08005c1d
 8005b70:	08005c1d 	.word	0x08005c1d
 8005b74:	08005c1d 	.word	0x08005c1d
 8005b78:	08005c1d 	.word	0x08005c1d
 8005b7c:	08005c1d 	.word	0x08005c1d
 8005b80:	08005c1d 	.word	0x08005c1d
 8005b84:	08005c1d 	.word	0x08005c1d
 8005b88:	08005bfd 	.word	0x08005bfd
 8005b8c:	08005c1d 	.word	0x08005c1d
 8005b90:	08005c1d 	.word	0x08005c1d
 8005b94:	08005c1d 	.word	0x08005c1d
 8005b98:	08005c1d 	.word	0x08005c1d
 8005b9c:	08005c1d 	.word	0x08005c1d
 8005ba0:	08005c1d 	.word	0x08005c1d
 8005ba4:	08005c1d 	.word	0x08005c1d
 8005ba8:	08005c05 	.word	0x08005c05
 8005bac:	08005c1d 	.word	0x08005c1d
 8005bb0:	08005c1d 	.word	0x08005c1d
 8005bb4:	08005c1d 	.word	0x08005c1d
 8005bb8:	08005c1d 	.word	0x08005c1d
 8005bbc:	08005c1d 	.word	0x08005c1d
 8005bc0:	08005c1d 	.word	0x08005c1d
 8005bc4:	08005c1d 	.word	0x08005c1d
 8005bc8:	08005c0d 	.word	0x08005c0d
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	08005c1d 	.word	0x08005c1d
 8005bd4:	08005c1d 	.word	0x08005c1d
 8005bd8:	08005c1d 	.word	0x08005c1d
 8005bdc:	08005c1d 	.word	0x08005c1d
 8005be0:	08005c1d 	.word	0x08005c1d
 8005be4:	08005c1d 	.word	0x08005c1d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf2:	e222      	b.n	800603a <UART_SetConfig+0x5a6>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e21e      	b.n	800603a <UART_SetConfig+0x5a6>
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e21a      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c04:	2310      	movs	r3, #16
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e216      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c0c:	2320      	movs	r3, #32
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e212      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c14:	2340      	movs	r3, #64	; 0x40
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e20e      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e20a      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a69      	ldr	r2, [pc, #420]	; (8005dd0 <UART_SetConfig+0x33c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d130      	bne.n	8005c90 <UART_SetConfig+0x1fc>
 8005c2e:	4b67      	ldr	r3, [pc, #412]	; (8005dcc <UART_SetConfig+0x338>)
 8005c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	2b05      	cmp	r3, #5
 8005c38:	d826      	bhi.n	8005c88 <UART_SetConfig+0x1f4>
 8005c3a:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <UART_SetConfig+0x1ac>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c59 	.word	0x08005c59
 8005c44:	08005c61 	.word	0x08005c61
 8005c48:	08005c69 	.word	0x08005c69
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5e:	e1ec      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c60:	2304      	movs	r3, #4
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e1e8      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c68:	2308      	movs	r3, #8
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e1e4      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c70:	2310      	movs	r3, #16
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e1e0      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c78:	2320      	movs	r3, #32
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e1dc      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c80:	2340      	movs	r3, #64	; 0x40
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e1d8      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8e:	e1d4      	b.n	800603a <UART_SetConfig+0x5a6>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a4f      	ldr	r2, [pc, #316]	; (8005dd4 <UART_SetConfig+0x340>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d130      	bne.n	8005cfc <UART_SetConfig+0x268>
 8005c9a:	4b4c      	ldr	r3, [pc, #304]	; (8005dcc <UART_SetConfig+0x338>)
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	d826      	bhi.n	8005cf4 <UART_SetConfig+0x260>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <UART_SetConfig+0x218>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cc5 	.word	0x08005cc5
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	08005cd5 	.word	0x08005cd5
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005ce5 	.word	0x08005ce5
 8005cc0:	08005ced 	.word	0x08005ced
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cca:	e1b6      	b.n	800603a <UART_SetConfig+0x5a6>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e1b2      	b.n	800603a <UART_SetConfig+0x5a6>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e1ae      	b.n	800603a <UART_SetConfig+0x5a6>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e1aa      	b.n	800603a <UART_SetConfig+0x5a6>
 8005ce4:	2320      	movs	r3, #32
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e1a6      	b.n	800603a <UART_SetConfig+0x5a6>
 8005cec:	2340      	movs	r3, #64	; 0x40
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e1a2      	b.n	800603a <UART_SetConfig+0x5a6>
 8005cf4:	2380      	movs	r3, #128	; 0x80
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e19e      	b.n	800603a <UART_SetConfig+0x5a6>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a35      	ldr	r2, [pc, #212]	; (8005dd8 <UART_SetConfig+0x344>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d130      	bne.n	8005d68 <UART_SetConfig+0x2d4>
 8005d06:	4b31      	ldr	r3, [pc, #196]	; (8005dcc <UART_SetConfig+0x338>)
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	d826      	bhi.n	8005d60 <UART_SetConfig+0x2cc>
 8005d12:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <UART_SetConfig+0x284>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d31 	.word	0x08005d31
 8005d1c:	08005d39 	.word	0x08005d39
 8005d20:	08005d41 	.word	0x08005d41
 8005d24:	08005d49 	.word	0x08005d49
 8005d28:	08005d51 	.word	0x08005d51
 8005d2c:	08005d59 	.word	0x08005d59
 8005d30:	2300      	movs	r3, #0
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e180      	b.n	800603a <UART_SetConfig+0x5a6>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e17c      	b.n	800603a <UART_SetConfig+0x5a6>
 8005d40:	2308      	movs	r3, #8
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e178      	b.n	800603a <UART_SetConfig+0x5a6>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e174      	b.n	800603a <UART_SetConfig+0x5a6>
 8005d50:	2320      	movs	r3, #32
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e170      	b.n	800603a <UART_SetConfig+0x5a6>
 8005d58:	2340      	movs	r3, #64	; 0x40
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e16c      	b.n	800603a <UART_SetConfig+0x5a6>
 8005d60:	2380      	movs	r3, #128	; 0x80
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e168      	b.n	800603a <UART_SetConfig+0x5a6>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <UART_SetConfig+0x348>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d142      	bne.n	8005df8 <UART_SetConfig+0x364>
 8005d72:	4b16      	ldr	r3, [pc, #88]	; (8005dcc <UART_SetConfig+0x338>)
 8005d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	2b05      	cmp	r3, #5
 8005d7c:	d838      	bhi.n	8005df0 <UART_SetConfig+0x35c>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <UART_SetConfig+0x2f0>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005d9d 	.word	0x08005d9d
 8005d88:	08005da5 	.word	0x08005da5
 8005d8c:	08005dad 	.word	0x08005dad
 8005d90:	08005db5 	.word	0x08005db5
 8005d94:	08005de1 	.word	0x08005de1
 8005d98:	08005de9 	.word	0x08005de9
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e14a      	b.n	800603a <UART_SetConfig+0x5a6>
 8005da4:	2304      	movs	r3, #4
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e146      	b.n	800603a <UART_SetConfig+0x5a6>
 8005dac:	2308      	movs	r3, #8
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db2:	e142      	b.n	800603a <UART_SetConfig+0x5a6>
 8005db4:	2310      	movs	r3, #16
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e13e      	b.n	800603a <UART_SetConfig+0x5a6>
 8005dbc:	cfff69f3 	.word	0xcfff69f3
 8005dc0:	58000c00 	.word	0x58000c00
 8005dc4:	11fff4ff 	.word	0x11fff4ff
 8005dc8:	40011000 	.word	0x40011000
 8005dcc:	58024400 	.word	0x58024400
 8005dd0:	40004400 	.word	0x40004400
 8005dd4:	40004800 	.word	0x40004800
 8005dd8:	40004c00 	.word	0x40004c00
 8005ddc:	40005000 	.word	0x40005000
 8005de0:	2320      	movs	r3, #32
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e128      	b.n	800603a <UART_SetConfig+0x5a6>
 8005de8:	2340      	movs	r3, #64	; 0x40
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dee:	e124      	b.n	800603a <UART_SetConfig+0x5a6>
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e120      	b.n	800603a <UART_SetConfig+0x5a6>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4acb      	ldr	r2, [pc, #812]	; (800612c <UART_SetConfig+0x698>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d176      	bne.n	8005ef0 <UART_SetConfig+0x45c>
 8005e02:	4bcb      	ldr	r3, [pc, #812]	; (8006130 <UART_SetConfig+0x69c>)
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e0a:	2b28      	cmp	r3, #40	; 0x28
 8005e0c:	d86c      	bhi.n	8005ee8 <UART_SetConfig+0x454>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <UART_SetConfig+0x380>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005eb9 	.word	0x08005eb9
 8005e18:	08005ee9 	.word	0x08005ee9
 8005e1c:	08005ee9 	.word	0x08005ee9
 8005e20:	08005ee9 	.word	0x08005ee9
 8005e24:	08005ee9 	.word	0x08005ee9
 8005e28:	08005ee9 	.word	0x08005ee9
 8005e2c:	08005ee9 	.word	0x08005ee9
 8005e30:	08005ee9 	.word	0x08005ee9
 8005e34:	08005ec1 	.word	0x08005ec1
 8005e38:	08005ee9 	.word	0x08005ee9
 8005e3c:	08005ee9 	.word	0x08005ee9
 8005e40:	08005ee9 	.word	0x08005ee9
 8005e44:	08005ee9 	.word	0x08005ee9
 8005e48:	08005ee9 	.word	0x08005ee9
 8005e4c:	08005ee9 	.word	0x08005ee9
 8005e50:	08005ee9 	.word	0x08005ee9
 8005e54:	08005ec9 	.word	0x08005ec9
 8005e58:	08005ee9 	.word	0x08005ee9
 8005e5c:	08005ee9 	.word	0x08005ee9
 8005e60:	08005ee9 	.word	0x08005ee9
 8005e64:	08005ee9 	.word	0x08005ee9
 8005e68:	08005ee9 	.word	0x08005ee9
 8005e6c:	08005ee9 	.word	0x08005ee9
 8005e70:	08005ee9 	.word	0x08005ee9
 8005e74:	08005ed1 	.word	0x08005ed1
 8005e78:	08005ee9 	.word	0x08005ee9
 8005e7c:	08005ee9 	.word	0x08005ee9
 8005e80:	08005ee9 	.word	0x08005ee9
 8005e84:	08005ee9 	.word	0x08005ee9
 8005e88:	08005ee9 	.word	0x08005ee9
 8005e8c:	08005ee9 	.word	0x08005ee9
 8005e90:	08005ee9 	.word	0x08005ee9
 8005e94:	08005ed9 	.word	0x08005ed9
 8005e98:	08005ee9 	.word	0x08005ee9
 8005e9c:	08005ee9 	.word	0x08005ee9
 8005ea0:	08005ee9 	.word	0x08005ee9
 8005ea4:	08005ee9 	.word	0x08005ee9
 8005ea8:	08005ee9 	.word	0x08005ee9
 8005eac:	08005ee9 	.word	0x08005ee9
 8005eb0:	08005ee9 	.word	0x08005ee9
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ebe:	e0bc      	b.n	800603a <UART_SetConfig+0x5a6>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec6:	e0b8      	b.n	800603a <UART_SetConfig+0x5a6>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ece:	e0b4      	b.n	800603a <UART_SetConfig+0x5a6>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed6:	e0b0      	b.n	800603a <UART_SetConfig+0x5a6>
 8005ed8:	2320      	movs	r3, #32
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e0ac      	b.n	800603a <UART_SetConfig+0x5a6>
 8005ee0:	2340      	movs	r3, #64	; 0x40
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e0a8      	b.n	800603a <UART_SetConfig+0x5a6>
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e0a4      	b.n	800603a <UART_SetConfig+0x5a6>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a8f      	ldr	r2, [pc, #572]	; (8006134 <UART_SetConfig+0x6a0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d130      	bne.n	8005f5c <UART_SetConfig+0x4c8>
 8005efa:	4b8d      	ldr	r3, [pc, #564]	; (8006130 <UART_SetConfig+0x69c>)
 8005efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d826      	bhi.n	8005f54 <UART_SetConfig+0x4c0>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <UART_SetConfig+0x478>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f25 	.word	0x08005f25
 8005f10:	08005f2d 	.word	0x08005f2d
 8005f14:	08005f35 	.word	0x08005f35
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e086      	b.n	800603a <UART_SetConfig+0x5a6>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e082      	b.n	800603a <UART_SetConfig+0x5a6>
 8005f34:	2308      	movs	r3, #8
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3a:	e07e      	b.n	800603a <UART_SetConfig+0x5a6>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e07a      	b.n	800603a <UART_SetConfig+0x5a6>
 8005f44:	2320      	movs	r3, #32
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e076      	b.n	800603a <UART_SetConfig+0x5a6>
 8005f4c:	2340      	movs	r3, #64	; 0x40
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e072      	b.n	800603a <UART_SetConfig+0x5a6>
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5a:	e06e      	b.n	800603a <UART_SetConfig+0x5a6>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a75      	ldr	r2, [pc, #468]	; (8006138 <UART_SetConfig+0x6a4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d130      	bne.n	8005fc8 <UART_SetConfig+0x534>
 8005f66:	4b72      	ldr	r3, [pc, #456]	; (8006130 <UART_SetConfig+0x69c>)
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d826      	bhi.n	8005fc0 <UART_SetConfig+0x52c>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0x4e4>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f91 	.word	0x08005f91
 8005f7c:	08005f99 	.word	0x08005f99
 8005f80:	08005fa1 	.word	0x08005fa1
 8005f84:	08005fa9 	.word	0x08005fa9
 8005f88:	08005fb1 	.word	0x08005fb1
 8005f8c:	08005fb9 	.word	0x08005fb9
 8005f90:	2300      	movs	r3, #0
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e050      	b.n	800603a <UART_SetConfig+0x5a6>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e04c      	b.n	800603a <UART_SetConfig+0x5a6>
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e048      	b.n	800603a <UART_SetConfig+0x5a6>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e044      	b.n	800603a <UART_SetConfig+0x5a6>
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e040      	b.n	800603a <UART_SetConfig+0x5a6>
 8005fb8:	2340      	movs	r3, #64	; 0x40
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e03c      	b.n	800603a <UART_SetConfig+0x5a6>
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc6:	e038      	b.n	800603a <UART_SetConfig+0x5a6>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a5b      	ldr	r2, [pc, #364]	; (800613c <UART_SetConfig+0x6a8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d130      	bne.n	8006034 <UART_SetConfig+0x5a0>
 8005fd2:	4b57      	ldr	r3, [pc, #348]	; (8006130 <UART_SetConfig+0x69c>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b05      	cmp	r3, #5
 8005fdc:	d826      	bhi.n	800602c <UART_SetConfig+0x598>
 8005fde:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <UART_SetConfig+0x550>)
 8005fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe4:	08005ffd 	.word	0x08005ffd
 8005fe8:	08006005 	.word	0x08006005
 8005fec:	0800600d 	.word	0x0800600d
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	0800601d 	.word	0x0800601d
 8005ff8:	08006025 	.word	0x08006025
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e01a      	b.n	800603a <UART_SetConfig+0x5a6>
 8006004:	2304      	movs	r3, #4
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e016      	b.n	800603a <UART_SetConfig+0x5a6>
 800600c:	2308      	movs	r3, #8
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e012      	b.n	800603a <UART_SetConfig+0x5a6>
 8006014:	2310      	movs	r3, #16
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601a:	e00e      	b.n	800603a <UART_SetConfig+0x5a6>
 800601c:	2320      	movs	r3, #32
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e00a      	b.n	800603a <UART_SetConfig+0x5a6>
 8006024:	2340      	movs	r3, #64	; 0x40
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e006      	b.n	800603a <UART_SetConfig+0x5a6>
 800602c:	2380      	movs	r3, #128	; 0x80
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006032:	e002      	b.n	800603a <UART_SetConfig+0x5a6>
 8006034:	2380      	movs	r3, #128	; 0x80
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a3f      	ldr	r2, [pc, #252]	; (800613c <UART_SetConfig+0x6a8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	f040 80f8 	bne.w	8006236 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006046:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800604a:	2b20      	cmp	r3, #32
 800604c:	dc46      	bgt.n	80060dc <UART_SetConfig+0x648>
 800604e:	2b02      	cmp	r3, #2
 8006050:	f2c0 8082 	blt.w	8006158 <UART_SetConfig+0x6c4>
 8006054:	3b02      	subs	r3, #2
 8006056:	2b1e      	cmp	r3, #30
 8006058:	d87e      	bhi.n	8006158 <UART_SetConfig+0x6c4>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x5cc>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	080060e3 	.word	0x080060e3
 8006064:	08006159 	.word	0x08006159
 8006068:	080060eb 	.word	0x080060eb
 800606c:	08006159 	.word	0x08006159
 8006070:	08006159 	.word	0x08006159
 8006074:	08006159 	.word	0x08006159
 8006078:	080060fb 	.word	0x080060fb
 800607c:	08006159 	.word	0x08006159
 8006080:	08006159 	.word	0x08006159
 8006084:	08006159 	.word	0x08006159
 8006088:	08006159 	.word	0x08006159
 800608c:	08006159 	.word	0x08006159
 8006090:	08006159 	.word	0x08006159
 8006094:	08006159 	.word	0x08006159
 8006098:	0800610b 	.word	0x0800610b
 800609c:	08006159 	.word	0x08006159
 80060a0:	08006159 	.word	0x08006159
 80060a4:	08006159 	.word	0x08006159
 80060a8:	08006159 	.word	0x08006159
 80060ac:	08006159 	.word	0x08006159
 80060b0:	08006159 	.word	0x08006159
 80060b4:	08006159 	.word	0x08006159
 80060b8:	08006159 	.word	0x08006159
 80060bc:	08006159 	.word	0x08006159
 80060c0:	08006159 	.word	0x08006159
 80060c4:	08006159 	.word	0x08006159
 80060c8:	08006159 	.word	0x08006159
 80060cc:	08006159 	.word	0x08006159
 80060d0:	08006159 	.word	0x08006159
 80060d4:	08006159 	.word	0x08006159
 80060d8:	0800614b 	.word	0x0800614b
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d037      	beq.n	8006150 <UART_SetConfig+0x6bc>
 80060e0:	e03a      	b.n	8006158 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80060e2:	f7ff f865 	bl	80051b0 <HAL_RCCEx_GetD3PCLK1Freq>
 80060e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060e8:	e03c      	b.n	8006164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff f874 	bl	80051dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f8:	e034      	b.n	8006164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060fa:	f107 0318 	add.w	r3, r7, #24
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff f9c0 	bl	8005484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006108:	e02c      	b.n	8006164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <UART_SetConfig+0x69c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d016      	beq.n	8006144 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <UART_SetConfig+0x69c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	08db      	lsrs	r3, r3, #3
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	4a07      	ldr	r2, [pc, #28]	; (8006140 <UART_SetConfig+0x6ac>)
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006128:	e01c      	b.n	8006164 <UART_SetConfig+0x6d0>
 800612a:	bf00      	nop
 800612c:	40011400 	.word	0x40011400
 8006130:	58024400 	.word	0x58024400
 8006134:	40007800 	.word	0x40007800
 8006138:	40007c00 	.word	0x40007c00
 800613c:	58000c00 	.word	0x58000c00
 8006140:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006144:	4b9d      	ldr	r3, [pc, #628]	; (80063bc <UART_SetConfig+0x928>)
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006148:	e00c      	b.n	8006164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800614a:	4b9d      	ldr	r3, [pc, #628]	; (80063c0 <UART_SetConfig+0x92c>)
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800614e:	e009      	b.n	8006164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006156:	e005      	b.n	8006164 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006162:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 81de 	beq.w	8006528 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	4a94      	ldr	r2, [pc, #592]	; (80063c4 <UART_SetConfig+0x930>)
 8006172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006176:	461a      	mov	r2, r3
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	fbb3 f3f2 	udiv	r3, r3, r2
 800617e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618c:	429a      	cmp	r2, r3
 800618e:	d305      	bcc.n	800619c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006198:	429a      	cmp	r2, r3
 800619a:	d903      	bls.n	80061a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061a2:	e1c1      	b.n	8006528 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a6:	2200      	movs	r2, #0
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	60fa      	str	r2, [r7, #12]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	4a84      	ldr	r2, [pc, #528]	; (80063c4 <UART_SetConfig+0x930>)
 80061b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2200      	movs	r2, #0
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061c6:	f7fa f887 	bl	80002d8 <__aeabi_uldivmod>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	020b      	lsls	r3, r1, #8
 80061dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061e0:	0202      	lsls	r2, r0, #8
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	6849      	ldr	r1, [r1, #4]
 80061e6:	0849      	lsrs	r1, r1, #1
 80061e8:	2000      	movs	r0, #0
 80061ea:	460c      	mov	r4, r1
 80061ec:	4605      	mov	r5, r0
 80061ee:	eb12 0804 	adds.w	r8, r2, r4
 80061f2:	eb43 0905 	adc.w	r9, r3, r5
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	469a      	mov	sl, r3
 80061fe:	4693      	mov	fp, r2
 8006200:	4652      	mov	r2, sl
 8006202:	465b      	mov	r3, fp
 8006204:	4640      	mov	r0, r8
 8006206:	4649      	mov	r1, r9
 8006208:	f7fa f866 	bl	80002d8 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800621a:	d308      	bcc.n	800622e <UART_SetConfig+0x79a>
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006222:	d204      	bcs.n	800622e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800622a:	60da      	str	r2, [r3, #12]
 800622c:	e17c      	b.n	8006528 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006234:	e178      	b.n	8006528 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623e:	f040 80c5 	bne.w	80063cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006242:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006246:	2b20      	cmp	r3, #32
 8006248:	dc48      	bgt.n	80062dc <UART_SetConfig+0x848>
 800624a:	2b00      	cmp	r3, #0
 800624c:	db7b      	blt.n	8006346 <UART_SetConfig+0x8b2>
 800624e:	2b20      	cmp	r3, #32
 8006250:	d879      	bhi.n	8006346 <UART_SetConfig+0x8b2>
 8006252:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <UART_SetConfig+0x7c4>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	080062e3 	.word	0x080062e3
 800625c:	080062eb 	.word	0x080062eb
 8006260:	08006347 	.word	0x08006347
 8006264:	08006347 	.word	0x08006347
 8006268:	080062f3 	.word	0x080062f3
 800626c:	08006347 	.word	0x08006347
 8006270:	08006347 	.word	0x08006347
 8006274:	08006347 	.word	0x08006347
 8006278:	08006303 	.word	0x08006303
 800627c:	08006347 	.word	0x08006347
 8006280:	08006347 	.word	0x08006347
 8006284:	08006347 	.word	0x08006347
 8006288:	08006347 	.word	0x08006347
 800628c:	08006347 	.word	0x08006347
 8006290:	08006347 	.word	0x08006347
 8006294:	08006347 	.word	0x08006347
 8006298:	08006313 	.word	0x08006313
 800629c:	08006347 	.word	0x08006347
 80062a0:	08006347 	.word	0x08006347
 80062a4:	08006347 	.word	0x08006347
 80062a8:	08006347 	.word	0x08006347
 80062ac:	08006347 	.word	0x08006347
 80062b0:	08006347 	.word	0x08006347
 80062b4:	08006347 	.word	0x08006347
 80062b8:	08006347 	.word	0x08006347
 80062bc:	08006347 	.word	0x08006347
 80062c0:	08006347 	.word	0x08006347
 80062c4:	08006347 	.word	0x08006347
 80062c8:	08006347 	.word	0x08006347
 80062cc:	08006347 	.word	0x08006347
 80062d0:	08006347 	.word	0x08006347
 80062d4:	08006347 	.word	0x08006347
 80062d8:	08006339 	.word	0x08006339
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d02e      	beq.n	800633e <UART_SetConfig+0x8aa>
 80062e0:	e031      	b.n	8006346 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e2:	f7fd fcef 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 80062e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062e8:	e033      	b.n	8006352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062ea:	f7fd fd01 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 80062ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062f0:	e02f      	b.n	8006352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe ff70 	bl	80051dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006300:	e027      	b.n	8006352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006302:	f107 0318 	add.w	r3, r7, #24
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff f8bc 	bl	8005484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006310:	e01f      	b.n	8006352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006312:	4b2d      	ldr	r3, [pc, #180]	; (80063c8 <UART_SetConfig+0x934>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800631e:	4b2a      	ldr	r3, [pc, #168]	; (80063c8 <UART_SetConfig+0x934>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	08db      	lsrs	r3, r3, #3
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	4a24      	ldr	r2, [pc, #144]	; (80063bc <UART_SetConfig+0x928>)
 800632a:	fa22 f303 	lsr.w	r3, r2, r3
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006330:	e00f      	b.n	8006352 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006332:	4b22      	ldr	r3, [pc, #136]	; (80063bc <UART_SetConfig+0x928>)
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006336:	e00c      	b.n	8006352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006338:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <UART_SetConfig+0x92c>)
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800633c:	e009      	b.n	8006352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006344:	e005      	b.n	8006352 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80e7 	beq.w	8006528 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	4a19      	ldr	r2, [pc, #100]	; (80063c4 <UART_SetConfig+0x930>)
 8006360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006364:	461a      	mov	r2, r3
 8006366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006368:	fbb3 f3f2 	udiv	r3, r3, r2
 800636c:	005a      	lsls	r2, r3, #1
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	441a      	add	r2, r3
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	2b0f      	cmp	r3, #15
 8006384:	d916      	bls.n	80063b4 <UART_SetConfig+0x920>
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638c:	d212      	bcs.n	80063b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	b29b      	uxth	r3, r3
 8006392:	f023 030f 	bic.w	r3, r3, #15
 8006396:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	085b      	lsrs	r3, r3, #1
 800639c:	b29b      	uxth	r3, r3
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063a6:	4313      	orrs	r3, r2
 80063a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80063b0:	60da      	str	r2, [r3, #12]
 80063b2:	e0b9      	b.n	8006528 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80063ba:	e0b5      	b.n	8006528 <UART_SetConfig+0xa94>
 80063bc:	03d09000 	.word	0x03d09000
 80063c0:	003d0900 	.word	0x003d0900
 80063c4:	08006c40 	.word	0x08006c40
 80063c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80063cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	dc49      	bgt.n	8006468 <UART_SetConfig+0x9d4>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	db7c      	blt.n	80064d2 <UART_SetConfig+0xa3e>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d87a      	bhi.n	80064d2 <UART_SetConfig+0xa3e>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <UART_SetConfig+0x950>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	0800646f 	.word	0x0800646f
 80063e8:	08006477 	.word	0x08006477
 80063ec:	080064d3 	.word	0x080064d3
 80063f0:	080064d3 	.word	0x080064d3
 80063f4:	0800647f 	.word	0x0800647f
 80063f8:	080064d3 	.word	0x080064d3
 80063fc:	080064d3 	.word	0x080064d3
 8006400:	080064d3 	.word	0x080064d3
 8006404:	0800648f 	.word	0x0800648f
 8006408:	080064d3 	.word	0x080064d3
 800640c:	080064d3 	.word	0x080064d3
 8006410:	080064d3 	.word	0x080064d3
 8006414:	080064d3 	.word	0x080064d3
 8006418:	080064d3 	.word	0x080064d3
 800641c:	080064d3 	.word	0x080064d3
 8006420:	080064d3 	.word	0x080064d3
 8006424:	0800649f 	.word	0x0800649f
 8006428:	080064d3 	.word	0x080064d3
 800642c:	080064d3 	.word	0x080064d3
 8006430:	080064d3 	.word	0x080064d3
 8006434:	080064d3 	.word	0x080064d3
 8006438:	080064d3 	.word	0x080064d3
 800643c:	080064d3 	.word	0x080064d3
 8006440:	080064d3 	.word	0x080064d3
 8006444:	080064d3 	.word	0x080064d3
 8006448:	080064d3 	.word	0x080064d3
 800644c:	080064d3 	.word	0x080064d3
 8006450:	080064d3 	.word	0x080064d3
 8006454:	080064d3 	.word	0x080064d3
 8006458:	080064d3 	.word	0x080064d3
 800645c:	080064d3 	.word	0x080064d3
 8006460:	080064d3 	.word	0x080064d3
 8006464:	080064c5 	.word	0x080064c5
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	d02e      	beq.n	80064ca <UART_SetConfig+0xa36>
 800646c:	e031      	b.n	80064d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800646e:	f7fd fc29 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8006472:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006474:	e033      	b.n	80064de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006476:	f7fd fc3b 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 800647a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800647c:	e02f      	b.n	80064de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800647e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe feaa 	bl	80051dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800648c:	e027      	b.n	80064de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800648e:	f107 0318 	add.w	r3, r7, #24
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fff6 	bl	8005484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800649c:	e01f      	b.n	80064de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800649e:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <UART_SetConfig+0xac0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064aa:	4b2a      	ldr	r3, [pc, #168]	; (8006554 <UART_SetConfig+0xac0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	08db      	lsrs	r3, r3, #3
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	4a28      	ldr	r2, [pc, #160]	; (8006558 <UART_SetConfig+0xac4>)
 80064b6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064bc:	e00f      	b.n	80064de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80064be:	4b26      	ldr	r3, [pc, #152]	; (8006558 <UART_SetConfig+0xac4>)
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064c2:	e00c      	b.n	80064de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064c4:	4b25      	ldr	r3, [pc, #148]	; (800655c <UART_SetConfig+0xac8>)
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064c8:	e009      	b.n	80064de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d0:	e005      	b.n	80064de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80064dc:	bf00      	nop
    }

    if (pclk != 0U)
 80064de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d021      	beq.n	8006528 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <UART_SetConfig+0xacc>)
 80064ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ee:	461a      	mov	r2, r3
 80064f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	441a      	add	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	fbb2 f3f3 	udiv	r3, r2, r3
 8006506:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	2b0f      	cmp	r3, #15
 800650c:	d909      	bls.n	8006522 <UART_SetConfig+0xa8e>
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006514:	d205      	bcs.n	8006522 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	b29a      	uxth	r2, r3
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60da      	str	r2, [r3, #12]
 8006520:	e002      	b.n	8006528 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2201      	movs	r2, #1
 800652c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2201      	movs	r2, #1
 8006534:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006544:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006548:	4618      	mov	r0, r3
 800654a:	3748      	adds	r7, #72	; 0x48
 800654c:	46bd      	mov	sp, r7
 800654e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006552:	bf00      	nop
 8006554:	58024400 	.word	0x58024400
 8006558:	03d09000 	.word	0x03d09000
 800655c:	003d0900 	.word	0x003d0900
 8006560:	08006c40 	.word	0x08006c40

08006564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01a      	beq.n	800667a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006662:	d10a      	bne.n	800667a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	605a      	str	r2, [r3, #4]
  }
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b098      	sub	sp, #96	; 0x60
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066b8:	f7fb f99e 	bl	80019f8 <HAL_GetTick>
 80066bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d12f      	bne.n	800672c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d4:	2200      	movs	r2, #0
 80066d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f88e 	bl	80067fc <UART_WaitOnFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d022      	beq.n	800672c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fa:	653b      	str	r3, [r7, #80]	; 0x50
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006704:	647b      	str	r3, [r7, #68]	; 0x44
 8006706:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800670a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e063      	b.n	80067f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b04      	cmp	r3, #4
 8006738:	d149      	bne.n	80067ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800673a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006742:	2200      	movs	r2, #0
 8006744:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f857 	bl	80067fc <UART_WaitOnFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d03c      	beq.n	80067ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	623b      	str	r3, [r7, #32]
   return(result);
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006772:	633b      	str	r3, [r7, #48]	; 0x30
 8006774:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e6      	bne.n	8006754 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	60fb      	str	r3, [r7, #12]
   return(result);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	64bb      	str	r3, [r7, #72]	; 0x48
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067a6:	61fa      	str	r2, [r7, #28]
 80067a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	69b9      	ldr	r1, [r7, #24]
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	617b      	str	r3, [r7, #20]
   return(result);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e5      	bne.n	8006786 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e012      	b.n	80067f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3758      	adds	r7, #88	; 0x58
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680c:	e049      	b.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d045      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006816:	f7fb f8ef 	bl	80019f8 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <UART_WaitOnFlagUntilTimeout+0x30>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e048      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	d031      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b08      	cmp	r3, #8
 800684a:	d110      	bne.n	800686e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2208      	movs	r2, #8
 8006852:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f839 	bl	80068cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2208      	movs	r2, #8
 800685e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e029      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800687c:	d111      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f81f 	bl	80068cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e00f      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4013      	ands	r3, r2
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d0a6      	beq.n	800680e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b095      	sub	sp, #84	; 0x54
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f2:	643b      	str	r3, [r7, #64]	; 0x40
 80068f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e6      	bne.n	80068d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	61fb      	str	r3, [r7, #28]
   return(result);
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	4b1e      	ldr	r3, [pc, #120]	; (8006994 <UART_EndRxTransfer+0xc8>)
 800691a:	4013      	ands	r3, r2
 800691c:	64bb      	str	r3, [r7, #72]	; 0x48
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006928:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800692c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e5      	bne.n	8006906 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693e:	2b01      	cmp	r3, #1
 8006940:	d118      	bne.n	8006974 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f023 0310 	bic.w	r3, r3, #16
 8006956:	647b      	str	r3, [r7, #68]	; 0x44
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6979      	ldr	r1, [r7, #20]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	613b      	str	r3, [r7, #16]
   return(result);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006988:	bf00      	nop
 800698a:	3754      	adds	r7, #84	; 0x54
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	effffffe 	.word	0xeffffffe

08006998 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_UARTEx_DisableFifoMode+0x16>
 80069aa:	2302      	movs	r3, #2
 80069ac:	e027      	b.n	80069fe <HAL_UARTEx_DisableFifoMode+0x66>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2224      	movs	r2, #36	; 0x24
 80069ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e02d      	b.n	8006a7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2224      	movs	r2, #36	; 0x24
 8006a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f850 	bl	8006b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e02d      	b.n	8006afa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2224      	movs	r2, #36	; 0x24
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f812 	bl	8006b04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d108      	bne.n	8006b26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b24:	e031      	b.n	8006b8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b26:	2310      	movs	r3, #16
 8006b28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b2a:	2310      	movs	r3, #16
 8006b2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	0e5b      	lsrs	r3, r3, #25
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	0f5b      	lsrs	r3, r3, #29
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	7b3a      	ldrb	r2, [r7, #12]
 8006b52:	4911      	ldr	r1, [pc, #68]	; (8006b98 <UARTEx_SetNbDataToProcess+0x94>)
 8006b54:	5c8a      	ldrb	r2, [r1, r2]
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b5a:	7b3a      	ldrb	r2, [r7, #12]
 8006b5c:	490f      	ldr	r1, [pc, #60]	; (8006b9c <UARTEx_SetNbDataToProcess+0x98>)
 8006b5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b60:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	7b7a      	ldrb	r2, [r7, #13]
 8006b70:	4909      	ldr	r1, [pc, #36]	; (8006b98 <UARTEx_SetNbDataToProcess+0x94>)
 8006b72:	5c8a      	ldrb	r2, [r1, r2]
 8006b74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b78:	7b7a      	ldrb	r2, [r7, #13]
 8006b7a:	4908      	ldr	r1, [pc, #32]	; (8006b9c <UARTEx_SetNbDataToProcess+0x98>)
 8006b7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	08006c58 	.word	0x08006c58
 8006b9c:	08006c60 	.word	0x08006c60

08006ba0 <__libc_init_array>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	4d0d      	ldr	r5, [pc, #52]	; (8006bd8 <__libc_init_array+0x38>)
 8006ba4:	4c0d      	ldr	r4, [pc, #52]	; (8006bdc <__libc_init_array+0x3c>)
 8006ba6:	1b64      	subs	r4, r4, r5
 8006ba8:	10a4      	asrs	r4, r4, #2
 8006baa:	2600      	movs	r6, #0
 8006bac:	42a6      	cmp	r6, r4
 8006bae:	d109      	bne.n	8006bc4 <__libc_init_array+0x24>
 8006bb0:	4d0b      	ldr	r5, [pc, #44]	; (8006be0 <__libc_init_array+0x40>)
 8006bb2:	4c0c      	ldr	r4, [pc, #48]	; (8006be4 <__libc_init_array+0x44>)
 8006bb4:	f000 f830 	bl	8006c18 <_init>
 8006bb8:	1b64      	subs	r4, r4, r5
 8006bba:	10a4      	asrs	r4, r4, #2
 8006bbc:	2600      	movs	r6, #0
 8006bbe:	42a6      	cmp	r6, r4
 8006bc0:	d105      	bne.n	8006bce <__libc_init_array+0x2e>
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc8:	4798      	blx	r3
 8006bca:	3601      	adds	r6, #1
 8006bcc:	e7ee      	b.n	8006bac <__libc_init_array+0xc>
 8006bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd2:	4798      	blx	r3
 8006bd4:	3601      	adds	r6, #1
 8006bd6:	e7f2      	b.n	8006bbe <__libc_init_array+0x1e>
 8006bd8:	08006c70 	.word	0x08006c70
 8006bdc:	08006c70 	.word	0x08006c70
 8006be0:	08006c70 	.word	0x08006c70
 8006be4:	08006c74 	.word	0x08006c74

08006be8 <memcmp>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	3901      	subs	r1, #1
 8006bec:	4402      	add	r2, r0
 8006bee:	4290      	cmp	r0, r2
 8006bf0:	d101      	bne.n	8006bf6 <memcmp+0xe>
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	e005      	b.n	8006c02 <memcmp+0x1a>
 8006bf6:	7803      	ldrb	r3, [r0, #0]
 8006bf8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	d001      	beq.n	8006c04 <memcmp+0x1c>
 8006c00:	1b18      	subs	r0, r3, r4
 8006c02:	bd10      	pop	{r4, pc}
 8006c04:	3001      	adds	r0, #1
 8006c06:	e7f2      	b.n	8006bee <memcmp+0x6>

08006c08 <memset>:
 8006c08:	4402      	add	r2, r0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d100      	bne.n	8006c12 <memset+0xa>
 8006c10:	4770      	bx	lr
 8006c12:	f803 1b01 	strb.w	r1, [r3], #1
 8006c16:	e7f9      	b.n	8006c0c <memset+0x4>

08006c18 <_init>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr

08006c24 <_fini>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr
