
stm32h747i-bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc28  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800dec8  0800dec8  0001dec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e044  0800e044  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800e044  0800e044  0001e044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e04c  0800e04c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e04c  0800e04c  0001e04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e050  0800e050  0001e050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800e054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  24000074  0800e0c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000268  0800e0c8  00020268  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020047  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004286  00000000  00000000  000400e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00044370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  00045b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004431d  00000000  00000000  000470c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b78  00000000  00000000  0008b3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a21aa  00000000  00000000  000adf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00250107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b8  00000000  00000000  00250158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800deb0 	.word	0x0800deb0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800deb0 	.word	0x0800deb0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <erase_app_memory>:
#include "flash.h"

HAL_StatusTypeDef erase_app_memory(uint32_t bank, uint32_t sector, uint32_t NbSectors){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	
	HAL_StatusTypeDef ret;
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	
	HAL_FLASH_Unlock();
 80007bc:	f002 f820 	bl	8002800 <HAL_FLASH_Unlock>
	
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Banks = bank;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Sector = sector;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbSectors = NbSectors;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80007d0:	2320      	movs	r3, #32
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80007d4:	f107 0214 	add.w	r2, r7, #20
 80007d8:	f107 0318 	add.w	r3, r7, #24
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 f90e 	bl	8002a00 <HAL_FLASHEx_Erase>
 80007e4:	4603      	mov	r3, r0
 80007e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	HAL_FLASH_Lock();
 80007ea:	f002 f843 	bl	8002874 <HAL_FLASH_Lock>
	return ret;
 80007ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <Flash_write32B>:


HAL_StatusTypeDef Flash_write32B(uint8_t const *src, uint32_t dst){
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b084      	sub	sp, #16
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	6039      	str	r1, [r7, #0]
    uint32_t FlashAddress = dst;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	60fb      	str	r3, [r7, #12]

    if (FlashAddress & (32-1)) {
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <Flash_write32B+0x1c>
        return HAL_ERROR; // bad alignment
 8000812:	2301      	movs	r3, #1
 8000814:	e00c      	b.n	8000830 <Flash_write32B+0x36>
    }
	
	HAL_StatusTypeDef ret;
	
	HAL_FLASH_Unlock();
 8000816:	f001 fff3 	bl	8002800 <HAL_FLASH_Unlock>
	
	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FlashAddress, (uint32_t)src);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	461a      	mov	r2, r3
 800081e:	68f9      	ldr	r1, [r7, #12]
 8000820:	2001      	movs	r0, #1
 8000822:	f001 ff5b 	bl	80026dc <HAL_FLASH_Program>
 8000826:	4603      	mov	r3, r0
 8000828:	72fb      	strb	r3, [r7, #11]

	HAL_FLASH_Lock();
 800082a:	f002 f823 	bl	8002874 <HAL_FLASH_Lock>

	return ret;
 800082e:	7afb      	ldrb	r3, [r7, #11]
	
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	; 0x38
 800083c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	4b57      	ldr	r3, [pc, #348]	; (80009ac <MX_GPIO_Init+0x174>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a55      	ldr	r2, [pc, #340]	; (80009ac <MX_GPIO_Init+0x174>)
 8000856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b53      	ldr	r3, [pc, #332]	; (80009ac <MX_GPIO_Init+0x174>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000868:	623b      	str	r3, [r7, #32]
 800086a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086c:	4b4f      	ldr	r3, [pc, #316]	; (80009ac <MX_GPIO_Init+0x174>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a4e      	ldr	r2, [pc, #312]	; (80009ac <MX_GPIO_Init+0x174>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b4b      	ldr	r3, [pc, #300]	; (80009ac <MX_GPIO_Init+0x174>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	4b48      	ldr	r3, [pc, #288]	; (80009ac <MX_GPIO_Init+0x174>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a46      	ldr	r2, [pc, #280]	; (80009ac <MX_GPIO_Init+0x174>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b44      	ldr	r3, [pc, #272]	; (80009ac <MX_GPIO_Init+0x174>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_GPIO_Init+0x174>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a3f      	ldr	r2, [pc, #252]	; (80009ac <MX_GPIO_Init+0x174>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <MX_GPIO_Init+0x174>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008c6:	4b39      	ldr	r3, [pc, #228]	; (80009ac <MX_GPIO_Init+0x174>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a37      	ldr	r2, [pc, #220]	; (80009ac <MX_GPIO_Init+0x174>)
 80008ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <MX_GPIO_Init+0x174>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <MX_GPIO_Init+0x174>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a30      	ldr	r2, [pc, #192]	; (80009ac <MX_GPIO_Init+0x174>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <MX_GPIO_Init+0x174>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_GPIO_Init+0x174>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a28      	ldr	r2, [pc, #160]	; (80009ac <MX_GPIO_Init+0x174>)
 800090a:	f043 0320 	orr.w	r3, r3, #32
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <MX_GPIO_Init+0x174>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0320 	and.w	r3, r3, #32
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_GPIO_Init+0x174>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <MX_GPIO_Init+0x174>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_GPIO_Init+0x174>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <MX_GPIO_Init+0x178>)
 8000946:	f002 fc9f 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x178>)
 8000960:	f002 f9c0 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000976:	2300      	movs	r3, #0
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_GPIO_Init+0x17c>)
 8000982:	f002 f9af 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000986:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_GPIO_Init+0x178>)
 80009a0:	f002 f9a0 	bl	8002ce4 <HAL_GPIO_Init>

}
 80009a4:	bf00      	nop
 80009a6:	3738      	adds	r7, #56	; 0x38
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	58024400 	.word	0x58024400
 80009b0:	58022000 	.word	0x58022000
 80009b4:	58020000 	.word	0x58020000

080009b8 <gotoFirmware>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void gotoFirmware(uint32_t fwFlashStartAdd)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
//	app_reset_handler();

	pFunction appEntry;
	uint32_t appStack;

	appStack = (uint32_t) *((__IO uint32_t*)fwFlashStartAdd);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	617b      	str	r3, [r7, #20]
	appEntry = (pFunction) *(__IO uint32_t*) (fwFlashStartAdd + 4);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3304      	adds	r3, #4
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	613b      	str	r3, [r7, #16]
//	__DMB();
	SCB->VTOR = fwFlashStartAdd;
 80009ce:	4a07      	ldr	r2, [pc, #28]	; (80009ec <gotoFirmware+0x34>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6093      	str	r3, [r2, #8]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f383 8808 	msr	MSP, r3
}
 80009de:	bf00      	nop
//	__DSB();
//	SysTick->CTRL = 0x0;
//	HAL_DeInit();
	__set_MSP(appStack);
	appEntry();
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4798      	blx	r3
}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <updateFirmware>:


bool updateFirmware(const TCHAR* fwPath, uint32_t flashBank, uint32_t flashSector, uint32_t NbSectors, uint32_t fwFlashStartAdd)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	f507 6491 	add.w	r4, r7, #1160	; 0x488
 80009fc:	f2a4 447c 	subw	r4, r4, #1148	; 0x47c
 8000a00:	6020      	str	r0, [r4, #0]
 8000a02:	f507 6091 	add.w	r0, r7, #1160	; 0x488
 8000a06:	f5a0 6090 	sub.w	r0, r0, #1152	; 0x480
 8000a0a:	6001      	str	r1, [r0, #0]
 8000a0c:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8000a10:	f2a1 4184 	subw	r1, r1, #1156	; 0x484
 8000a14:	600a      	str	r2, [r1, #0]
 8000a16:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8000a1a:	f5a2 6291 	sub.w	r2, r2, #1160	; 0x488
 8000a1e:	6013      	str	r3, [r2, #0]
	UINT bytesRead;
	FSIZE_t file_size;
	FIL file;
	uint32_t flashAdd, addCNTR;

	if (f_open(&file, fwPath, FA_READ) == FR_OK) {
 8000a20:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a24:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000a28:	f107 0010 	add.w	r0, r7, #16
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6819      	ldr	r1, [r3, #0]
 8000a30:	f00c f99c 	bl	800cd6c <f_open>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d16f      	bne.n	8000b1a <updateFirmware+0x12a>

		file_size = f_size(&file);
 8000a3a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a3e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c

		sprintf(binFileRes, ".bin Size: %lu bytes \n\r", file_size);
 8000a48:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8000a4c:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8000a50:	4935      	ldr	r1, [pc, #212]	; (8000b28 <updateFirmware+0x138>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00c fdbe 	bl	800d5d4 <siprintf>
		HAL_UART_Transmit(&huart1, binFileRes, 20, 100);
 8000a58:	f207 4144 	addw	r1, r7, #1092	; 0x444
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	2214      	movs	r2, #20
 8000a60:	4832      	ldr	r0, [pc, #200]	; (8000b2c <updateFirmware+0x13c>)
 8000a62:	f008 fb7b 	bl	800915c <HAL_UART_Transmit>

		erase_app_memory(flashBank, flashSector, NbSectors);
 8000a66:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a6a:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 8000a6e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a72:	f2a3 4184 	subw	r1, r3, #1156	; 0x484
 8000a76:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a7a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	6809      	ldr	r1, [r1, #0]
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	f7ff fe94 	bl	80007b0 <erase_app_memory>

		flashAdd = fwFlashStartAdd;
 8000a88:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8000a8c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		addCNTR  = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000a96:	e027      	b.n	8000ae8 <updateFirmware+0xf8>
			// Process the read data here
			for(uint32_t i=0; i<16; i++){
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000a9e:	e017      	b.n	8000ad0 <updateFirmware+0xe0>
				Flash_write32B(readBytes+(i*32), flashAdd+addCNTR);
 8000aa0:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000aa4:	015b      	lsls	r3, r3, #5
 8000aa6:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8000aaa:	18d0      	adds	r0, r2, r3
 8000aac:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8000ab0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f7ff fe9f 	bl	80007fa <Flash_write32B>
				addCNTR += 32;
 8000abc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000ac0:	3320      	adds	r3, #32
 8000ac2:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
			for(uint32_t i=0; i<16; i++){
 8000ac6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000aca:	3301      	adds	r3, #1
 8000acc:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000ad0:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d9e3      	bls.n	8000aa0 <updateFirmware+0xb0>
			}
			memset(readBytes, 0xFF, sizeof(readBytes));
 8000ad8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8000adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae0:	21ff      	movs	r1, #255	; 0xff
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f00c fd6e 	bl	800d5c4 <memset>
		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000ae8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000aec:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8000af0:	f107 0010 	add.w	r0, r7, #16
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	f00c faf6 	bl	800d0e8 <f_read>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d106      	bne.n	8000b10 <updateFirmware+0x120>
 8000b02:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000b06:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1c3      	bne.n	8000a98 <updateFirmware+0xa8>
		}
		f_close(&file);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00c fca4 	bl	800d462 <f_close>
	}

	return true;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f207 478c 	addw	r7, r7, #1164	; 0x48c
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	bf00      	nop
 8000b28:	0800dec8 	.word	0x0800dec8
 8000b2c:	24000168 	.word	0x24000168

08000b30 <updateExternalFlash>:


bool updateExternalFlash(const TCHAR* fwPath)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000b3c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000b40:	6018      	str	r0, [r3, #0]
	UINT bytesRead;
	FSIZE_t file_size;
	FIL file;
	uint32_t addCNTR;

	if (f_open(&file, fwPath, FA_READ) == FR_OK) {
 8000b42:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000b46:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000b4a:	f107 0008 	add.w	r0, r7, #8
 8000b4e:	2201      	movs	r2, #1
 8000b50:	6819      	ldr	r1, [r3, #0]
 8000b52:	f00c f90b 	bl	800cd6c <f_open>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d155      	bne.n	8000c08 <updateExternalFlash+0xd8>

		file_size = f_size(&file);
 8000b5c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000b60:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470

		sprintf(binFileRes, ".bin Size: %lu bytes \n\r", file_size);
 8000b6a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8000b6e:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8000b72:	4928      	ldr	r1, [pc, #160]	; (8000c14 <updateExternalFlash+0xe4>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00c fd2d 	bl	800d5d4 <siprintf>
		HAL_UART_Transmit(&huart1, binFileRes, 20, 100);
 8000b7a:	f207 413c 	addw	r1, r7, #1084	; 0x43c
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	2214      	movs	r2, #20
 8000b82:	4825      	ldr	r0, [pc, #148]	; (8000c18 <updateExternalFlash+0xe8>)
 8000b84:	f008 faea 	bl	800915c <HAL_UART_Transmit>

		if (CSP_QSPI_Erase_Chip() != HAL_OK)
 8000b88:	f001 f9ce 	bl	8001f28 <CSP_QSPI_Erase_Chip>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <updateExternalFlash+0x66>
		{
			Error_Handler();
 8000b92:	f000 f9e1 	bl	8000f58 <Error_Handler>
		}

		addCNTR  = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000b9c:	e01b      	b.n	8000bd6 <updateExternalFlash+0xa6>
			// Process the read data here

			if (CSP_QSPI_WriteMemory(readBytes, addCNTR, sizeof(readBytes)) != HAL_OK)
 8000b9e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba6:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 f9c5 	bl	8001f3a <CSP_QSPI_WriteMemory>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <updateExternalFlash+0x8a>
			{
				Error_Handler();
 8000bb6:	f000 f9cf 	bl	8000f58 <Error_Handler>
			}

			addCNTR += BUFFER_SIZE;
 8000bba:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8000bbe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc2:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
			memset(readBytes, 0xFF, sizeof(readBytes));
 8000bc6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bce:	21ff      	movs	r1, #255	; 0xff
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00c fcf7 	bl	800d5c4 <memset>
		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000bd6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000bda:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8000bde:	f107 0008 	add.w	r0, r7, #8
 8000be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be6:	f00c fa7f 	bl	800d0e8 <f_read>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d106      	bne.n	8000bfe <updateExternalFlash+0xce>
 8000bf0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000bf4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1cf      	bne.n	8000b9e <updateExternalFlash+0x6e>
		}
		f_close(&file);
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00c fc2d 	bl	800d462 <f_close>
	}

	return true;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f507 678f 	add.w	r7, r7, #1144	; 0x478
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	0800dec8 	.word	0x0800dec8
 8000c18:	24000168 	.word	0x24000168

08000c1c <boot_main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int boot_main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8000c22:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c24:	4b80      	ldr	r3, [pc, #512]	; (8000e28 <boot_main+0x20c>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d11b      	bne.n	8000c68 <boot_main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c30:	f3bf 8f4f 	dsb	sy
}
 8000c34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c36:	f3bf 8f6f 	isb	sy
}
 8000c3a:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c3c:	4b7a      	ldr	r3, [pc, #488]	; (8000e28 <boot_main+0x20c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c44:	f3bf 8f4f 	dsb	sy
}
 8000c48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c4a:	f3bf 8f6f 	isb	sy
}
 8000c4e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c50:	4b75      	ldr	r3, [pc, #468]	; (8000e28 <boot_main+0x20c>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	4a74      	ldr	r2, [pc, #464]	; (8000e28 <boot_main+0x20c>)
 8000c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5c:	f3bf 8f4f 	dsb	sy
}
 8000c60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c62:	f3bf 8f6f 	isb	sy
}
 8000c66:	e000      	b.n	8000c6a <boot_main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c68:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c6a:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <boot_main+0x20c>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d143      	bne.n	8000cfe <boot_main+0xe2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c76:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <boot_main+0x20c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c7e:	f3bf 8f4f 	dsb	sy
}
 8000c82:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c84:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <boot_main+0x20c>)
 8000c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c8a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000c92:	0b5b      	lsrs	r3, r3, #13
 8000c94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c98:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c9c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ca6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000caa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000cae:	015a      	lsls	r2, r3, #5
 8000cb0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000cb4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cb6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8000cba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cbc:	495a      	ldr	r1, [pc, #360]	; (8000e28 <boot_main+0x20c>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cc4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1eb      	bne.n	8000caa <boot_main+0x8e>
    } while(sets-- != 0U);
 8000cd2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1dd      	bne.n	8000c9c <boot_main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce0:	f3bf 8f4f 	dsb	sy
}
 8000ce4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ce6:	4b50      	ldr	r3, [pc, #320]	; (8000e28 <boot_main+0x20c>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a4f      	ldr	r2, [pc, #316]	; (8000e28 <boot_main+0x20c>)
 8000cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf2:	f3bf 8f4f 	dsb	sy
}
 8000cf6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cf8:	f3bf 8f6f 	isb	sy
}
 8000cfc:	e000      	b.n	8000d00 <boot_main+0xe4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000cfe:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d04:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d08:	bf00      	nop
 8000d0a:	4b48      	ldr	r3, [pc, #288]	; (8000e2c <boot_main+0x210>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <boot_main+0x108>
 8000d16:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d1a:	1e5a      	subs	r2, r3, #1
 8000d1c:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	dcf2      	bgt.n	8000d0a <boot_main+0xee>
  if ( timeout < 0 )
 8000d24:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da01      	bge.n	8000d30 <boot_main+0x114>
  {
  	Error_Handler();
 8000d2c:	f000 f914 	bl	8000f58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d30:	f001 fb2e 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d34:	f000 f888 	bl	8000e48 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d38:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <boot_main+0x210>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a3b      	ldr	r2, [pc, #236]	; (8000e2c <boot_main+0x210>)
 8000d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <boot_main+0x210>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000d52:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000d56:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000d60:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000d64:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f002 faa8 	bl	80032bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f002 fabe 	bl	80032f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d78:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d7c:	bf00      	nop
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <boot_main+0x210>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d106      	bne.n	8000d98 <boot_main+0x17c>
 8000d8a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d8e:	1e5a      	subs	r2, r3, #1
 8000d90:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	dcf2      	bgt.n	8000d7e <boot_main+0x162>
if ( timeout < 0 )
 8000d98:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da01      	bge.n	8000da4 <boot_main+0x188>
{
	Error_Handler();
 8000da0:	f000 f8da 	bl	8000f58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da4:	f7ff fd48 	bl	8000838 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000da8:	f001 fa12 	bl	80021d0 <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8000dac:	f000 fb8e 	bl	80014cc <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 8000db0:	f001 f8d6 	bl	8001f60 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000db4:	f00a f8b0 	bl	800af18 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

//	HAL_Delay(5000);

	if (CSP_QUADSPI_Init() != HAL_OK)
 8000db8:	f001 f88e 	bl	8001ed8 <CSP_QUADSPI_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <boot_main+0x1aa>
	{
		Error_Handler();
 8000dc2:	f000 f8c9 	bl	8000f58 <Error_Handler>

  // Mount the SD card
  FATFS fs;
  uint8_t mountRes;

  mountRes = f_mount(&fs, SD_CARD_PATH, 1);
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4919      	ldr	r1, [pc, #100]	; (8000e30 <boot_main+0x214>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00b ff87 	bl	800cce0 <f_mount>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
  if (mountRes == FR_OK) {
 8000dd8:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d113      	bne.n	8000e08 <boot_main+0x1ec>

  	// UPDATE CM7 FLASH REGION
	  updateFirmware(FILE_NAME, FLASH_BANK_1, FLASH_SECTOR_1, 7, FW_CM7_START_ADD);
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <boot_main+0x218>)
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2307      	movs	r3, #7
 8000de6:	2201      	movs	r2, #1
 8000de8:	2101      	movs	r1, #1
 8000dea:	4813      	ldr	r0, [pc, #76]	; (8000e38 <boot_main+0x21c>)
 8000dec:	f7ff fe00 	bl	80009f0 <updateFirmware>

	  // UPDATE CM4 FLASH REGION
	  updateFirmware(FILE_NAME_2, FLASH_BANK_2, FLASH_SECTOR_0, 8, FW_CM4_START_ADD);
 8000df0:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2308      	movs	r3, #8
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <boot_main+0x220>)
 8000dfe:	f7ff fdf7 	bl	80009f0 <updateFirmware>

	  // UPDATE QSPI
	  updateExternalFlash(FILE_NAME_3);
 8000e02:	480f      	ldr	r0, [pc, #60]	; (8000e40 <boot_main+0x224>)
 8000e04:	f7ff fe94 	bl	8000b30 <updateExternalFlash>
  }
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <boot_main+0x228>)
 8000e10:	f002 fa3a 	bl	8003288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	480a      	ldr	r0, [pc, #40]	; (8000e44 <boot_main+0x228>)
 8000e1c:	f002 fa34 	bl	8003288 <HAL_GPIO_WritePin>

	// JUMP TO THE NEW APPLICATON
  gotoFirmware(FW_CM7_START_ADD);
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <boot_main+0x218>)
 8000e22:	f7ff fdc9 	bl	80009b8 <gotoFirmware>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <boot_main+0x20a>
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	0800dee0 	.word	0x0800dee0
 8000e34:	08020000 	.word	0x08020000
 8000e38:	0800dee4 	.word	0x0800dee4
 8000e3c:	0800deec 	.word	0x0800deec
 8000e40:	0800def4 	.word	0x0800def4
 8000e44:	58022000 	.word	0x58022000

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09c      	sub	sp, #112	; 0x70
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	224c      	movs	r2, #76	; 0x4c
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f00c fbb4 	bl	800d5c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2220      	movs	r2, #32
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00c fbae 	bl	800d5c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f002 fab1 	bl	80033d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <SystemClock_Config+0x108>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	4a36      	ldr	r2, [pc, #216]	; (8000f50 <SystemClock_Config+0x108>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e7e:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <SystemClock_Config+0x108>)
 8000e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <SystemClock_Config+0x10c>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a31      	ldr	r2, [pc, #196]	; (8000f54 <SystemClock_Config+0x10c>)
 8000e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <SystemClock_Config+0x10c>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea0:	bf00      	nop
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <SystemClock_Config+0x10c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eae:	d1f8      	bne.n	8000ea2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000eb0:	232b      	movs	r3, #43	; 0x2b
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebe:	2340      	movs	r3, #64	; 0x40
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 ffa0 	bl	8003e3c <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000f02:	f000 f829 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	233f      	movs	r3, #63	; 0x3f
 8000f08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f12:	2308      	movs	r3, #8
 8000f14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f1a:	2340      	movs	r3, #64	; 0x40
 8000f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f24:	2340      	movs	r3, #64	; 0x40
 8000f26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fbdf 	bl	80046f0 <HAL_RCC_ClockConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000f38:	f000 f80e 	bl	8000f58 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000f3c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f40:	2100      	movs	r1, #0
 8000f42:	2000      	movs	r0, #0
 8000f44:	f003 fd8a 	bl	8004a5c <HAL_RCC_MCOConfig>
}
 8000f48:	bf00      	nop
 8000f4a:	3770      	adds	r7, #112	; 0x70
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	58000400 	.word	0x58000400
 8000f54:	58024800 	.word	0x58024800

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>

08000f62 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b090      	sub	sp, #64	; 0x40
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d102      	bne.n	8000f7a <MT25TL01G_Enter4BytesAddressMode+0x18>
 8000f74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f78:	e001      	b.n	8000f7e <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8000f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8000f80:	23b7      	movs	r3, #183	; 0xb7
 8000f82:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f860 	bl	800106a <MT25TL01G_WriteEnable>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000fb0:	f06f 0301 	mvn.w	r3, #1
 8000fb4:	e019      	b.n	8000fea <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f002 faf3 	bl	80035ac <HAL_QSPI_Command>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000fcc:	f06f 0301 	mvn.w	r3, #1
 8000fd0:	e00b      	b.n	8000fea <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f80b 	bl	8000ff2 <MT25TL01G_AutoPollingMemReady>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000fe2:	f06f 0301 	mvn.w	r3, #1
 8000fe6:	e000      	b.n	8000fea <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3740      	adds	r7, #64	; 0x40
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b096      	sub	sp, #88	; 0x58
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000ffe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8001004:	2305      	movs	r3, #5
 8001006:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001010:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001014:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800101e:	2300      	movs	r3, #0
 8001020:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001022:	2300      	movs	r3, #0
 8001024:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800102e:	2310      	movs	r3, #16
 8001030:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001032:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001036:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8001038:	f240 1301 	movw	r3, #257	; 0x101
 800103c:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800103e:	2302      	movs	r3, #2
 8001040:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001042:	f107 0208 	add.w	r2, r7, #8
 8001046:	f107 0120 	add.w	r1, r7, #32
 800104a:	f241 3388 	movw	r3, #5000	; 0x1388
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f002 fc39 	bl	80038c6 <HAL_QSPI_AutoPolling>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800105a:	f06f 0304 	mvn.w	r3, #4
 800105e:	e000      	b.n	8001062 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8001060:	2300      	movs	r3, #0

}
 8001062:	4618      	mov	r0, r3
 8001064:	3758      	adds	r7, #88	; 0x58
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b096      	sub	sp, #88	; 0x58
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d102      	bne.n	8001082 <MT25TL01G_WriteEnable+0x18>
 800107c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001080:	e001      	b.n	8001086 <MT25TL01G_WriteEnable+0x1c>
 8001082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8001088:	2306      	movs	r3, #6
 800108a:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800108c:	2300      	movs	r3, #0
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80010a0:	2300      	movs	r3, #0
 80010a2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80010a4:	2300      	movs	r3, #0
 80010a6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b0:	4619      	mov	r1, r3
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f002 fa7a 	bl	80035ac <HAL_QSPI_Command>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80010be:	f06f 0301 	mvn.w	r3, #1
 80010c2:	e029      	b.n	8001118 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80010c4:	f240 2302 	movw	r3, #514	; 0x202
 80010c8:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80010ca:	f240 2302 	movw	r3, #514	; 0x202
 80010ce:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80010d8:	2310      	movs	r3, #16
 80010da:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80010dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e0:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80010e2:	2305      	movs	r3, #5
 80010e4:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d102      	bne.n	80010f2 <MT25TL01G_WriteEnable+0x88>
 80010ec:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80010f0:	e001      	b.n	80010f6 <MT25TL01G_WriteEnable+0x8c>
 80010f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010f8:	f107 0208 	add.w	r2, r7, #8
 80010fc:	f107 0120 	add.w	r1, r7, #32
 8001100:	f241 3388 	movw	r3, #5000	; 0x1388
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f002 fbde 	bl	80038c6 <HAL_QSPI_AutoPolling>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8001110:	f06f 0304 	mvn.w	r3, #4
 8001114:	e000      	b.n	8001118 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3758      	adds	r7, #88	; 0x58
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <MT25TL01G_PageProgram>:
  * @param  Size Size of data to write. Range 1 ~ 256
  * @retval QSPI memory status
  */

int32_t MT25TL01G_PageProgram(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b092      	sub	sp, #72	; 0x48
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	460b      	mov	r3, r1
 800112e:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 8001130:	7afb      	ldrb	r3, [r7, #11]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d83a      	bhi.n	80011ac <MT25TL01G_PageProgram+0x8c>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <MT25TL01G_PageProgram+0x1c>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800114d 	.word	0x0800114d
 8001140:	08001165 	.word	0x08001165
 8001144:	0800117d 	.word	0x0800117d
 8001148:	08001195 	.word	0x08001195
  {

  case MT25TL01G_SPI_MODE :                   /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800114c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_PAGE_PROG_CMD;
 8001152:	2302      	movs	r3, #2
 8001154:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8001156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_1_LINE;
 800115c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8001162:	e023      	b.n	80011ac <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_2IO_MODE :               /*  1-2-2 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_EXT_DUAL_IN_FAST_PROG_CMD;
 800116a:	23d2      	movs	r3, #210	; 0xd2
 800116c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_2_LINES;
 800116e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8001174:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800117a:	e017      	b.n	80011ac <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_4IO_MODE :               /* 1-4-4 program commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800117c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_EXT_QUAD_IN_FAST_PROG_CMD;
 8001182:	2338      	movs	r3, #56	; 0x38
 8001184:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8001186:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 800118c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8001192:	e00b      	b.n	80011ac <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_QPI_MODE :                   /* 4-4-4 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001194:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_QUAD_IN_FAST_PROG_4_BYTE_ADDR_CMD;
 800119a:	2334      	movs	r3, #52	; 0x34
 800119c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 800119e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 80011a4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80011aa:	bf00      	nop

  }

  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80011ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011b0:	61fb      	str	r3, [r7, #28]
  s_command.Address           = WriteAddr;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	617b      	str	r3, [r7, #20]
  s_command.NbData            = Size;
 80011b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80011c6:	2300      	movs	r3, #0
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80011ca:	2300      	movs	r3, #0
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d6:	4619      	mov	r1, r3
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f002 f9e7 	bl	80035ac <HAL_QSPI_Command>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <MT25TL01G_PageProgram+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 80011e4:	f06f 0301 	mvn.w	r3, #1
 80011e8:	e00c      	b.n	8001204 <MT25TL01G_PageProgram+0xe4>
  }
  if (HAL_QSPI_Transmit(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f002 fa39 	bl	8003668 <HAL_QSPI_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <MT25TL01G_PageProgram+0xe2>
  {
    return MT25TL01G_ERROR_TRANSMIT;
 80011fc:	f06f 0302 	mvn.w	r3, #2
 8001200:	e000      	b.n	8001204 <MT25TL01G_PageProgram+0xe4>
  }
  return MT25TL01G_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3748      	adds	r7, #72	; 0x48
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <MT25TL01G_ReadSTR>:
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ReadSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b092      	sub	sp, #72	; 0x48
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	460b      	mov	r3, r1
 800121a:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 800121c:	7afb      	ldrb	r3, [r7, #11]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d83a      	bhi.n	8001298 <MT25TL01G_ReadSTR+0x8c>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <MT25TL01G_ReadSTR+0x1c>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001239 	.word	0x08001239
 800122c:	08001251 	.word	0x08001251
 8001230:	08001269 	.word	0x08001269
 8001234:	08001281 	.word	0x08001281
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800123e:	230c      	movs	r3, #12
 8001240:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800124c:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800124e:	e023      	b.n	8001298 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8001256:	23bc      	movs	r3, #188	; 0xbc
 8001258:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800125a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8001260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001264:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001266:	e017      	b.n	8001298 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800126e:	23ec      	movs	r3, #236	; 0xec
 8001270:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001272:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001278:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800127c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800127e:	e00b      	b.n	8001298 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001280:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8001286:	23eb      	movs	r3, #235	; 0xeb
 8001288:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800128a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001290:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001294:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001296:	bf00      	nop
  }
  /* Initialize the read command */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8001298:	2308      	movs	r3, #8
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800129c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012a0:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.NbData            = Size;
 80012aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012b2:	2300      	movs	r3, #0
 80012b4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012b6:	2300      	movs	r3, #0
 80012b8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4619      	mov	r1, r3
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f002 f971 	bl	80035ac <HAL_QSPI_Command>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <MT25TL01G_ReadSTR+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 80012d0:	f06f 0301 	mvn.w	r3, #1
 80012d4:	e00c      	b.n	80012f0 <MT25TL01G_ReadSTR+0xe4>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f002 fa55 	bl	800378c <HAL_QSPI_Receive>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <MT25TL01G_ReadSTR+0xe2>
  {
    return MT25TL01G_ERROR_RECEIVE;
 80012e8:	f06f 0303 	mvn.w	r3, #3
 80012ec:	e000      	b.n	80012f0 <MT25TL01G_ReadSTR+0xe4>
  }


  return MT25TL01G_OK;
 80012ee:	2300      	movs	r3, #0

}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3748      	adds	r7, #72	; 0x48
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <MT25TL01G_ChipErase>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ChipErase(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b090      	sub	sp, #64	; 0x40
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d102      	bne.n	8001310 <MT25TL01G_ChipErase+0x18>
 800130a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130e:	e001      	b.n	8001314 <MT25TL01G_ChipErase+0x1c>
 8001310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001314:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_DIE_ERASE_CMD;
 8001316:	23c7      	movs	r3, #199	; 0xc7
 8001318:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800132e:	2300      	movs	r3, #0
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001332:	2300      	movs	r3, #0
 8001334:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	f241 3288 	movw	r2, #5000	; 0x1388
 800133e:	4619      	mov	r1, r3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f002 f933 	bl	80035ac <HAL_QSPI_Command>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <MT25TL01G_ChipErase+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800134c:	f06f 0301 	mvn.w	r3, #1
 8001350:	e000      	b.n	8001354 <MT25TL01G_ChipErase+0x5c>
  }

  return MT25TL01G_OK;
 8001352:	2300      	movs	r3, #0

}
 8001354:	4618      	mov	r0, r3
 8001356:	3740      	adds	r7, #64	; 0x40
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b090      	sub	sp, #64	; 0x40
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001368:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800136a:	2335      	movs	r3, #53	; 0x35
 800136c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001382:	2300      	movs	r3, #0
 8001384:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001386:	2300      	movs	r3, #0
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f002 f909 	bl	80035ac <HAL_QSPI_Command>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80013a0:	f06f 0301 	mvn.w	r3, #1
 80013a4:	e000      	b.n	80013a8 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3740      	adds	r7, #64	; 0x40
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b090      	sub	sp, #64	; 0x40
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80013b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013bc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80013be:	23f5      	movs	r3, #245	; 0xf5
 80013c0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013da:	2300      	movs	r3, #0
 80013dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4619      	mov	r1, r3
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f002 f8df 	bl	80035ac <HAL_QSPI_Command>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80013f4:	f06f 0301 	mvn.w	r3, #1
 80013f8:	e000      	b.n	80013fc <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3740      	adds	r7, #64	; 0x40
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b090      	sub	sp, #64	; 0x40
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d102      	bne.n	800141c <MT25TL01G_ResetEnable+0x18>
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	e001      	b.n	8001420 <MT25TL01G_ResetEnable+0x1c>
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8001422:	2366      	movs	r3, #102	; 0x66
 8001424:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800143a:	2300      	movs	r3, #0
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800143e:	2300      	movs	r3, #0
 8001440:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4619      	mov	r1, r3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f002 f8ad 	bl	80035ac <HAL_QSPI_Command>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001458:	f06f 0301 	mvn.w	r3, #1
 800145c:	e000      	b.n	8001460 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3740      	adds	r7, #64	; 0x40
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b090      	sub	sp, #64	; 0x40
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d102      	bne.n	8001480 <MT25TL01G_ResetMemory+0x18>
 800147a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147e:	e001      	b.n	8001484 <MT25TL01G_ResetMemory+0x1c>
 8001480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001484:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8001486:	2399      	movs	r3, #153	; 0x99
 8001488:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800149e:	2300      	movs	r3, #0
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4619      	mov	r1, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f002 f87b 	bl	80035ac <HAL_QSPI_Command>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80014bc:	f06f 0301 	mvn.w	r3, #1
 80014c0:	e000      	b.n	80014c4 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3740      	adds	r7, #64	; 0x40
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_QUADSPI_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_QUADSPI_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_QUADSPI_Init+0x4c>)
 80014d8:	2201      	movs	r2, #1
 80014da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_QUADSPI_Init+0x4c>)
 80014de:	2204      	movs	r2, #4
 80014e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <MX_QUADSPI_Init+0x4c>)
 80014e4:	2210      	movs	r2, #16
 80014e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_QUADSPI_Init+0x4c>)
 80014ea:	2219      	movs	r2, #25
 80014ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_QUADSPI_Init+0x4c>)
 80014f0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80014f4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_QUADSPI_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_QUADSPI_Init+0x4c>)
 80014fe:	2240      	movs	r2, #64	; 0x40
 8001500:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_QUADSPI_Init+0x4c>)
 8001504:	f001 ffbe 	bl	8003484 <HAL_QSPI_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 800150e:	f7ff fd23 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	24000090 	.word	0x24000090
 800151c:	52005000 	.word	0x52005000

08001520 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0c0      	sub	sp, #256	; 0x100
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001538:	f107 0320 	add.w	r3, r7, #32
 800153c:	22c8      	movs	r2, #200	; 0xc8
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f00c f83f 	bl	800d5c4 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a85      	ldr	r2, [pc, #532]	; (8001760 <HAL_QSPI_MspInit+0x240>)
 800154c:	4293      	cmp	r3, r2
 800154e:	f040 8102 	bne.w	8001756 <HAL_QSPI_MspInit+0x236>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800155e:	2300      	movs	r3, #0
 8001560:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fcb8 	bl	8004edc <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001572:	f7ff fcf1 	bl	8000f58 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001576:	4b7b      	ldr	r3, [pc, #492]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 8001578:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800157c:	4a79      	ldr	r2, [pc, #484]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 800157e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001582:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001586:	4b77      	ldr	r3, [pc, #476]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 8001588:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800158c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001594:	4b73      	ldr	r3, [pc, #460]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	4a72      	ldr	r2, [pc, #456]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 800159c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a4:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b2:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	4a6a      	ldr	r2, [pc, #424]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 80015ba:	f043 0320 	orr.w	r3, r3, #32
 80015be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c2:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e0:	4b60      	ldr	r3, [pc, #384]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	4a5b      	ldr	r2, [pc, #364]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fe:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800160c:	4b55      	ldr	r3, [pc, #340]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001612:	4a54      	ldr	r2, [pc, #336]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161c:	4b51      	ldr	r3, [pc, #324]	; (8001764 <HAL_QSPI_MspInit+0x244>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 800162a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800162e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001644:	2309      	movs	r3, #9
 8001646:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800164e:	4619      	mov	r1, r3
 8001650:	4845      	ldr	r0, [pc, #276]	; (8001768 <HAL_QSPI_MspInit+0x248>)
 8001652:	f001 fb47 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800166e:	230a      	movs	r3, #10
 8001670:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001678:	4619      	mov	r1, r3
 800167a:	483b      	ldr	r0, [pc, #236]	; (8001768 <HAL_QSPI_MspInit+0x248>)
 800167c:	f001 fb32 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8001680:	23c0      	movs	r3, #192	; 0xc0
 8001682:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001698:	2309      	movs	r3, #9
 800169a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800169e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016a2:	4619      	mov	r1, r3
 80016a4:	4831      	ldr	r0, [pc, #196]	; (800176c <HAL_QSPI_MspInit+0x24c>)
 80016a6:	f001 fb1d 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 80016aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016c4:	230a      	movs	r3, #10
 80016c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016ce:	4619      	mov	r1, r3
 80016d0:	4826      	ldr	r0, [pc, #152]	; (800176c <HAL_QSPI_MspInit+0x24c>)
 80016d2:	f001 fb07 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 80016d6:	230c      	movs	r3, #12
 80016d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ee:	2309      	movs	r3, #9
 80016f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016f8:	4619      	mov	r1, r3
 80016fa:	481d      	ldr	r0, [pc, #116]	; (8001770 <HAL_QSPI_MspInit+0x250>)
 80016fc:	f001 faf2 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001700:	2304      	movs	r3, #4
 8001702:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001718:	2309      	movs	r3, #9
 800171a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001722:	4619      	mov	r1, r3
 8001724:	4813      	ldr	r0, [pc, #76]	; (8001774 <HAL_QSPI_MspInit+0x254>)
 8001726:	f001 fadd 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 800172a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001744:	2309      	movs	r3, #9
 8001746:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800174e:	4619      	mov	r1, r3
 8001750:	4809      	ldr	r0, [pc, #36]	; (8001778 <HAL_QSPI_MspInit+0x258>)
 8001752:	f001 fac7 	bl	8002ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001756:	bf00      	nop
 8001758:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	52005000 	.word	0x52005000
 8001764:	58024400 	.word	0x58024400
 8001768:	58021800 	.word	0x58021800
 800176c:	58021400 	.word	0x58021400
 8001770:	58021c00 	.word	0x58021c00
 8001774:	58020400 	.word	0x58020400
 8001778:	58020c00 	.word	0x58020c00

0800177c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_QSPI_MspDeInit+0x58>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d11e      	bne.n	80017cc <HAL_QSPI_MspDeInit+0x50>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_QSPI_MspDeInit+0x5c>)
 8001790:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_QSPI_MspDeInit+0x5c>)
 8001796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800179a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin|QSPI_BK1_NCS_Pin);
 800179e:	f244 2140 	movw	r1, #16960	; 0x4240
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <HAL_QSPI_MspDeInit+0x60>)
 80017a4:	f001 fc4e 	bl	8003044 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO1_Pin);
 80017a8:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <HAL_QSPI_MspDeInit+0x64>)
 80017ae:	f001 fc49 	bl	8003044 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin);
 80017b2:	210c      	movs	r1, #12
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <HAL_QSPI_MspDeInit+0x68>)
 80017b6:	f001 fc45 	bl	8003044 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin);
 80017ba:	2104      	movs	r1, #4
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <HAL_QSPI_MspDeInit+0x6c>)
 80017be:	f001 fc41 	bl	8003044 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_BK1_IO0_GPIO_Port, QSPI_BK1_IO0_Pin);
 80017c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <HAL_QSPI_MspDeInit+0x70>)
 80017c8:	f001 fc3c 	bl	8003044 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	52005000 	.word	0x52005000
 80017d8:	58024400 	.word	0x58024400
 80017dc:	58021800 	.word	0x58021800
 80017e0:	58021400 	.word	0x58021400
 80017e4:	58021c00 	.word	0x58021c00
 80017e8:	58020400 	.word	0x58020400
 80017ec:	58020c00 	.word	0x58020c00

080017f0 <QSPI_Init>:

static int32_t QSPI_ResetMemory(uint32_t Instance);
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance, QSPI_Interface_t Mode);

int32_t QSPI_Init(uint32_t Instance, QSPI_Init_t *Init)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  int32_t ret = HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  */

//  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <QSPI_Init+0x1a>
  {
    ret = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e060      	b.n	80018cc <QSPI_Init+0xdc>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800180a:	4933      	ldr	r1, [pc, #204]	; (80018d8 <QSPI_Init+0xe8>)
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d156      	bne.n	80018cc <QSPI_Init+0xdc>
    {
      /* Msp QSPI initialization */
    	HAL_QSPI_MspInit(&hqspi);
 800181e:	482f      	ldr	r0, [pc, #188]	; (80018dc <QSPI_Init+0xec>)
 8001820:	f7ff fe7e 	bl	8001520 <HAL_QSPI_MspInit>

      if(ret == HAL_OK)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d150      	bne.n	80018cc <QSPI_Init+0xdc>
//        if(PMX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
//        {
//          ret = HAL_ERROR;
//        }

    	MX_QUADSPI_Init ();
 800182a:	f7ff fe4f 	bl	80014cc <MX_QUADSPI_Init>

        /* QSPI memory reset */
        if(QSPI_ResetMemory(Instance) != HAL_OK)
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fa6c 	bl	8001d0c <QSPI_ResetMemory>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <QSPI_Init+0x50>
        {
          ret = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e045      	b.n	80018cc <QSPI_Init+0xdc>
        }

        /* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001840:	4925      	ldr	r1, [pc, #148]	; (80018d8 <QSPI_Init+0xe8>)
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	3301      	adds	r3, #1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	4821      	ldr	r0, [pc, #132]	; (80018dc <QSPI_Init+0xec>)
 8001856:	f7ff fb84 	bl	8000f62 <MT25TL01G_Enter4BytesAddressMode>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <QSPI_Init+0x76>
        {
          ret = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e032      	b.n	80018cc <QSPI_Init+0xdc>
        }

      	/* Configuration of the dummy cycles on QSPI memory side */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001866:	491c      	ldr	r1, [pc, #112]	; (80018d8 <QSPI_Init+0xe8>)
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	3301      	adds	r3, #1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4818      	ldr	r0, [pc, #96]	; (80018dc <QSPI_Init+0xec>)
 800187c:	f7ff fbb9 	bl	8000ff2 <MT25TL01G_AutoPollingMemReady>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <QSPI_Init+0x9c>
        {
          ret = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	e01f      	b.n	80018cc <QSPI_Init+0xdc>
        }

        else if(QSPI_DummyCyclesCfg(Instance, QSPI_Ctx[Instance].InterfaceMode) != HAL_OK)
 800188c:	4912      	ldr	r1, [pc, #72]	; (80018d8 <QSPI_Init+0xe8>)
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3301      	adds	r3, #1
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4619      	mov	r1, r3
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fa9b 	bl	8001ddc <QSPI_DummyCyclesCfg>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <QSPI_Init+0xc2>
        {
          ret = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e00c      	b.n	80018cc <QSPI_Init+0xdc>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != HAL_OK)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	7819      	ldrb	r1, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	461a      	mov	r2, r3
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f9a7 	bl	8001c10 <QSPI_ConfigFlash>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <QSPI_Init+0xdc>
          {
            ret = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80018cc:	68fb      	ldr	r3, [r7, #12]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	240000dc 	.word	0x240000dc
 80018dc:	24000090 	.word	0x24000090

080018e0 <QSPI_DeInit>:

int32_t QSPI_DeInit(uint32_t Instance)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  int32_t ret = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <QSPI_DeInit+0x18>
  {
    ret = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e046      	b.n	8001986 <QSPI_DeInit+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80018f8:	4925      	ldr	r1, [pc, #148]	; (8001990 <QSPI_DeInit+0xb0>)
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d107      	bne.n	800191c <QSPI_DeInit+0x3c>
    {
      if(QSPI_DisableMemoryMappedMode(Instance) != HAL_OK)
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f927 	bl	8001b60 <QSPI_DisableMemoryMappedMode>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <QSPI_DeInit+0x3c>
      {
        ret = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == HAL_OK)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d131      	bne.n	8001986 <QSPI_DeInit+0xa6>
    {
      /* Set default QSPI_Ctx values */
      QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_NONE;
 8001922:	491b      	ldr	r1, [pc, #108]	; (8001990 <QSPI_DeInit+0xb0>)
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
      QSPI_Ctx[Instance].InterfaceMode = QSPI_SPI_MODE;
 8001934:	4916      	ldr	r1, [pc, #88]	; (8001990 <QSPI_DeInit+0xb0>)
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3301      	adds	r3, #1
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
      QSPI_Ctx[Instance].TransferRate  = QSPI_STR_TRANSFER;
 8001948:	4911      	ldr	r1, [pc, #68]	; (8001990 <QSPI_DeInit+0xb0>)
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3302      	adds	r3, #2
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
      QSPI_Ctx[Instance].DualFlashMode = QSPI_DUALFLASH_ENABLE;
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <QSPI_DeInit+0xb0>)
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	3304      	adds	r3, #4
 800196c:	2240      	movs	r2, #64	; 0x40
 800196e:	601a      	str	r2, [r3, #0]

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 0)
      HAL_QSPI_MspDeInit(&hqspi);
 8001970:	4808      	ldr	r0, [pc, #32]	; (8001994 <QSPI_DeInit+0xb4>)
 8001972:	f7ff ff03 	bl	800177c <HAL_QSPI_MspDeInit>
#endif /* (USE_HAL_QSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_QSPI_DeInit(&hqspi) != HAL_OK)
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <QSPI_DeInit+0xb4>)
 8001978:	f001 fdf8 	bl	800356c <HAL_QSPI_DeInit>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <QSPI_DeInit+0xa6>
      {
        ret = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	240000dc 	.word	0x240000dc
 8001994:	24000090 	.word	0x24000090

08001998 <QSPI_Write>:
  * @param  WriteAddr  Write start address
  * @param  Size       Size of data to write
  * @retval BSP status
  */
int32_t QSPI_Write(uint32_t Instance, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af02      	add	r7, sp, #8
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  int32_t ret = HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t end_addr, current_size, current_addr;
  uint8_t *write_data;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <QSPI_Write+0x1e>
  {
    ret = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
 80019b4:	e07d      	b.n	8001ab2 <QSPI_Write+0x11a>
  }
  else
  {
    /* Calculation of the size between the write address and the end of the page */
    current_size = MT25TL01G_PAGE_SIZE - (WriteAddr % MT25TL01G_PAGE_SIZE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019be:	623b      	str	r3, [r7, #32]

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > Size)
 80019c0:	6a3a      	ldr	r2, [r7, #32]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d901      	bls.n	80019cc <QSPI_Write+0x34>
    {
      current_size = Size;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	623b      	str	r3, [r7, #32]
    }

    /* Initialize the address variables */
    current_addr = WriteAddr;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	61fb      	str	r3, [r7, #28]
    end_addr = WriteAddr + Size;
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
    write_data = pData;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	61bb      	str	r3, [r7, #24]

    /* Perform the write page by page */
    do
    {
      /* Check if Flash busy ? */
      if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80019dc:	4937      	ldr	r1, [pc, #220]	; (8001abc <QSPI_Write+0x124>)
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3301      	adds	r3, #1
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4833      	ldr	r0, [pc, #204]	; (8001ac0 <QSPI_Write+0x128>)
 80019f2:	f7ff fafe 	bl	8000ff2 <MT25TL01G_AutoPollingMemReady>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <QSPI_Write+0x6a>
      {
        ret = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001a00:	e050      	b.n	8001aa4 <QSPI_Write+0x10c>
      }/* Enable write operations */
      else if(MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a02:	492e      	ldr	r1, [pc, #184]	; (8001abc <QSPI_Write+0x124>)
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	3301      	adds	r3, #1
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <QSPI_Write+0x128>)
 8001a18:	f7ff fb27 	bl	800106a <MT25TL01G_WriteEnable>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <QSPI_Write+0x90>
      {
        ret = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e03d      	b.n	8001aa4 <QSPI_Write+0x10c>
      }/* Issue page program command */
      else if(MT25TL01G_PageProgram(&hqspi, QSPI_Ctx[Instance].InterfaceMode, write_data, current_addr, current_size) != MT25TL01G_OK)
 8001a28:	4924      	ldr	r1, [pc, #144]	; (8001abc <QSPI_Write+0x124>)
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	3301      	adds	r3, #1
 8001a38:	7819      	ldrb	r1, [r3, #0]
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	481f      	ldr	r0, [pc, #124]	; (8001ac0 <QSPI_Write+0x128>)
 8001a44:	f7ff fb6c 	bl	8001120 <MT25TL01G_PageProgram>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <QSPI_Write+0xbc>
      {
        ret = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e027      	b.n	8001aa4 <QSPI_Write+0x10c>
      }/* Configure automatic polling mode to wait for end of program */
      else if (MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a54:	4919      	ldr	r1, [pc, #100]	; (8001abc <QSPI_Write+0x124>)
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	3301      	adds	r3, #1
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4815      	ldr	r0, [pc, #84]	; (8001ac0 <QSPI_Write+0x128>)
 8001a6a:	f7ff fac2 	bl	8000ff2 <MT25TL01G_AutoPollingMemReady>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <QSPI_Write+0xe2>
      {
        ret = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	e014      	b.n	8001aa4 <QSPI_Write+0x10c>
      }
      else
      {
        /* Update the address and size variables for next page programming */
        current_addr += current_size;
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	4413      	add	r3, r2
 8001a80:	61fb      	str	r3, [r7, #28]
        write_data += current_size;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	4413      	add	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        current_size = ((current_addr + MT25TL01G_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MT25TL01G_PAGE_SIZE;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d203      	bcs.n	8001a9e <QSPI_Write+0x106>
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	e001      	b.n	8001aa2 <QSPI_Write+0x10a>
 8001a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa2:	623b      	str	r3, [r7, #32]
      }
    } while ((current_addr < end_addr) && (ret == HAL_OK));
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d202      	bcs.n	8001ab2 <QSPI_Write+0x11a>
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d094      	beq.n	80019dc <QSPI_Write+0x44>
  }

  /* Return BSP status */
  return ret;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	240000dc 	.word	0x240000dc
 8001ac0:	24000090 	.word	0x24000090

08001ac4 <QSPI_EraseChip>:
  * @brief  Erases the entire QSPI memory.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t QSPI_EraseChip(uint32_t Instance)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  int32_t ret = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <QSPI_EraseChip+0x18>
  {
    ret = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e037      	b.n	8001b4c <QSPI_EraseChip+0x88>
  }
  else
  {
    /* Check Flash busy ? */
    if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001adc:	491e      	ldr	r1, [pc, #120]	; (8001b58 <QSPI_EraseChip+0x94>)
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3301      	adds	r3, #1
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	481a      	ldr	r0, [pc, #104]	; (8001b5c <QSPI_EraseChip+0x98>)
 8001af2:	f7ff fa7e 	bl	8000ff2 <MT25TL01G_AutoPollingMemReady>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <QSPI_EraseChip+0x3e>
    {
      ret = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e024      	b.n	8001b4c <QSPI_EraseChip+0x88>
    }/* Enable write operations */
    else if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001b02:	4915      	ldr	r1, [pc, #84]	; (8001b58 <QSPI_EraseChip+0x94>)
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	3301      	adds	r3, #1
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4811      	ldr	r0, [pc, #68]	; (8001b5c <QSPI_EraseChip+0x98>)
 8001b18:	f7ff faa7 	bl	800106a <MT25TL01G_WriteEnable>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <QSPI_EraseChip+0x64>
    {
      ret = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e011      	b.n	8001b4c <QSPI_EraseChip+0x88>
    }
    else
    {
      /* Issue Chip erase command */
      if(MT25TL01G_ChipErase(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001b28:	490b      	ldr	r1, [pc, #44]	; (8001b58 <QSPI_EraseChip+0x94>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	3301      	adds	r3, #1
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4807      	ldr	r0, [pc, #28]	; (8001b5c <QSPI_EraseChip+0x98>)
 8001b3e:	f7ff fbdb 	bl	80012f8 <MT25TL01G_ChipErase>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <QSPI_EraseChip+0x88>
      {
        ret = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	240000dc 	.word	0x240000dc
 8001b5c:	24000090 	.word	0x24000090

08001b60 <QSPI_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t QSPI_DisableMemoryMappedMode(uint32_t Instance)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	6078      	str	r0, [r7, #4]
  uint8_t Dummy;
  int32_t ret = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <QSPI_DisableMemoryMappedMode+0x18>
  {
    ret = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	e041      	b.n	8001bfc <QSPI_DisableMemoryMappedMode+0x9c>
  }
  else
  {
    if(QSPI_Ctx[Instance].IsInitialized != QSPI_ACCESS_MMP)
 8001b78:	4923      	ldr	r1, [pc, #140]	; (8001c08 <QSPI_DisableMemoryMappedMode+0xa8>)
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d002      	beq.n	8001b92 <QSPI_DisableMemoryMappedMode+0x32>
    {
      ret = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e034      	b.n	8001bfc <QSPI_DisableMemoryMappedMode+0x9c>
    }/* Abort MMP back to indirect mode */
    else if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
 8001b92:	481e      	ldr	r0, [pc, #120]	; (8001c0c <QSPI_DisableMemoryMappedMode+0xac>)
 8001b94:	f001 ff0e 	bl	80039b4 <HAL_QSPI_Abort>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <QSPI_DisableMemoryMappedMode+0x44>
    {
      ret = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e02b      	b.n	8001bfc <QSPI_DisableMemoryMappedMode+0x9c>
    }
    else
    {
      /* Force QSPI interface Sampling Shift to half cycle */
      hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <QSPI_DisableMemoryMappedMode+0xac>)
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	60da      	str	r2, [r3, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001baa:	4818      	ldr	r0, [pc, #96]	; (8001c0c <QSPI_DisableMemoryMappedMode+0xac>)
 8001bac:	f001 fc6a 	bl	8003484 <HAL_QSPI_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <QSPI_DisableMemoryMappedMode+0x5c>
      {
        ret = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	e01f      	b.n	8001bfc <QSPI_DisableMemoryMappedMode+0x9c>
      }
      /* Dummy read for exit from Performance Enhance mode */
      else if(MT25TL01G_ReadSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode, &Dummy, 0, 1) != MT25TL01G_OK)
 8001bbc:	4912      	ldr	r1, [pc, #72]	; (8001c08 <QSPI_DisableMemoryMappedMode+0xa8>)
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	3301      	adds	r3, #1
 8001bcc:	7819      	ldrb	r1, [r3, #0]
 8001bce:	f107 020b 	add.w	r2, r7, #11
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <QSPI_DisableMemoryMappedMode+0xac>)
 8001bda:	f7ff fb17 	bl	800120c <MT25TL01G_ReadSTR>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <QSPI_DisableMemoryMappedMode+0x8a>
      {
        ret = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	e008      	b.n	8001bfc <QSPI_DisableMemoryMappedMode+0x9c>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001bea:	4907      	ldr	r1, [pc, #28]	; (8001c08 <QSPI_DisableMemoryMappedMode+0xa8>)
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* Return BSP status */
  return ret;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	240000dc 	.word	0x240000dc
 8001c0c:	24000090 	.word	0x24000090

08001c10 <QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t QSPI_ConfigFlash(uint32_t Instance, QSPI_Interface_t Mode, QSPI_Transfer_t Rate)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <QSPI_ConfigFlash+0x20>
  {
    ret = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e063      	b.n	8001cf8 <QSPI_ConfigFlash+0xe8>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8001c30:	4934      	ldr	r1, [pc, #208]	; (8001d04 <QSPI_ConfigFlash+0xf4>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d102      	bne.n	8001c4a <QSPI_ConfigFlash+0x3a>
    {
      ret = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e056      	b.n	8001cf8 <QSPI_ConfigFlash+0xe8>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001c4a:	78bb      	ldrb	r3, [r7, #2]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <QSPI_ConfigFlash+0x44>
 8001c50:	2310      	movs	r3, #16
 8001c52:	e000      	b.n	8001c56 <QSPI_ConfigFlash+0x46>
 8001c54:	2300      	movs	r3, #0
 8001c56:	4a2c      	ldr	r2, [pc, #176]	; (8001d08 <QSPI_ConfigFlash+0xf8>)
 8001c58:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001c5a:	482b      	ldr	r0, [pc, #172]	; (8001d08 <QSPI_ConfigFlash+0xf8>)
 8001c5c:	f001 fc12 	bl	8003484 <HAL_QSPI_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <QSPI_ConfigFlash+0x5c>
      {
        ret = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e045      	b.n	8001cf8 <QSPI_ConfigFlash+0xe8>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8001c6c:	4925      	ldr	r1, [pc, #148]	; (8001d04 <QSPI_ConfigFlash+0xf4>)
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d10b      	bne.n	8001c9a <QSPI_ConfigFlash+0x8a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d014      	beq.n	8001cb2 <QSPI_ConfigFlash+0xa2>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8001c88:	481f      	ldr	r0, [pc, #124]	; (8001d08 <QSPI_ConfigFlash+0xf8>)
 8001c8a:	f7ff fb91 	bl	80013b0 <MT25TL01G_ExitQPIMode>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00e      	beq.n	8001cb2 <QSPI_ConfigFlash+0xa2>
            {
              ret = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001c98:	e00b      	b.n	8001cb2 <QSPI_ConfigFlash+0xa2>

        case QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d10a      	bne.n	8001cb6 <QSPI_ConfigFlash+0xa6>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8001ca0:	4819      	ldr	r0, [pc, #100]	; (8001d08 <QSPI_ConfigFlash+0xf8>)
 8001ca2:	f7ff fb5b 	bl	800135c <MT25TL01G_EnterQPIMode>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <QSPI_ConfigFlash+0xa6>
            {
              ret = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001cb0:	e001      	b.n	8001cb6 <QSPI_ConfigFlash+0xa6>
          break;
 8001cb2:	bf00      	nop
 8001cb4:	e000      	b.n	8001cb8 <QSPI_ConfigFlash+0xa8>
          break;
 8001cb6:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == HAL_OK)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d11c      	bne.n	8001cf8 <QSPI_ConfigFlash+0xe8>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001cbe:	4911      	ldr	r1, [pc, #68]	; (8001d04 <QSPI_ConfigFlash+0xf4>)
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <QSPI_ConfigFlash+0xf4>)
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3301      	adds	r3, #1
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <QSPI_ConfigFlash+0xf4>)
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	78ba      	ldrb	r2, [r7, #2]
 8001cf6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	240000dc 	.word	0x240000dc
 8001d08:	24000090 	.word	0x24000090

08001d0c <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  int32_t ret = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001d18:	2103      	movs	r1, #3
 8001d1a:	482e      	ldr	r0, [pc, #184]	; (8001dd4 <QSPI_ResetMemory+0xc8>)
 8001d1c:	f7ff fb72 	bl	8001404 <MT25TL01G_ResetEnable>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <QSPI_ResetMemory+0x20>
  {
    ret =HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	e04d      	b.n	8001dc8 <QSPI_ResetMemory+0xbc>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	4829      	ldr	r0, [pc, #164]	; (8001dd4 <QSPI_ResetMemory+0xc8>)
 8001d30:	f7ff fb9a 	bl	8001468 <MT25TL01G_ResetMemory>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <QSPI_ResetMemory+0x34>
  {
    ret = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	e043      	b.n	8001dc8 <QSPI_ResetMemory+0xbc>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001d40:	4925      	ldr	r1, [pc, #148]	; (8001dd8 <QSPI_ResetMemory+0xcc>)
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3301      	adds	r3, #1
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	4619      	mov	r1, r3
 8001d54:	481f      	ldr	r0, [pc, #124]	; (8001dd4 <QSPI_ResetMemory+0xc8>)
 8001d56:	f7ff f94c 	bl	8000ff2 <MT25TL01G_AutoPollingMemReady>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <QSPI_ResetMemory+0x5a>
  {
    ret = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e030      	b.n	8001dc8 <QSPI_ResetMemory+0xbc>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, QSPI_SPI_MODE) != MT25TL01G_OK)
 8001d66:	2100      	movs	r1, #0
 8001d68:	481a      	ldr	r0, [pc, #104]	; (8001dd4 <QSPI_ResetMemory+0xc8>)
 8001d6a:	f7ff fb4b 	bl	8001404 <MT25TL01G_ResetEnable>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <QSPI_ResetMemory+0x6e>
  {
    ret = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e026      	b.n	8001dc8 <QSPI_ResetMemory+0xbc>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, QSPI_SPI_MODE) != MT25TL01G_OK)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4815      	ldr	r0, [pc, #84]	; (8001dd4 <QSPI_ResetMemory+0xc8>)
 8001d7e:	f7ff fb73 	bl	8001468 <MT25TL01G_ResetMemory>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <QSPI_ResetMemory+0x82>
  {
    ret = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	e01c      	b.n	8001dc8 <QSPI_ResetMemory+0xbc>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8001d8e:	4912      	ldr	r1, [pc, #72]	; (8001dd8 <QSPI_ResetMemory+0xcc>)
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8001da0:	490d      	ldr	r1, [pc, #52]	; (8001dd8 <QSPI_ResetMemory+0xcc>)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	3301      	adds	r3, #1
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8001db4:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <QSPI_ResetMemory+0xcc>)
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	24000090 	.word	0x24000090
 8001dd8:	240000dc 	.word	0x240000dc

08001ddc <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance, QSPI_Interface_t Mode)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b092      	sub	sp, #72	; 0x48
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
    int32_t ret= HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d102      	bne.n	8001dfc <QSPI_DummyCyclesCfg+0x20>
 8001df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfa:	e001      	b.n	8001e00 <QSPI_DummyCyclesCfg+0x24>
 8001dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8001e02:	2385      	movs	r3, #133	; 0x85
 8001e04:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d102      	bne.n	8001e1a <QSPI_DummyCyclesCfg+0x3e>
 8001e14:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001e18:	e001      	b.n	8001e1e <QSPI_DummyCyclesCfg+0x42>
 8001e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001e30:	2300      	movs	r3, #0
 8001e32:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4824      	ldr	r0, [pc, #144]	; (8001ed0 <QSPI_DummyCyclesCfg+0xf4>)
 8001e40:	f001 fbb4 	bl	80035ac <HAL_QSPI_Command>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <QSPI_DummyCyclesCfg+0x72>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e03c      	b.n	8001ec8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e4e:	f107 030a 	add.w	r3, r7, #10
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4619      	mov	r1, r3
 8001e58:	481d      	ldr	r0, [pc, #116]	; (8001ed0 <QSPI_DummyCyclesCfg+0xf4>)
 8001e5a:	f001 fc97 	bl	800378c <HAL_QSPI_Receive>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <QSPI_DummyCyclesCfg+0x8c>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e02f      	b.n	8001ec8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, Mode) != MT25TL01G_OK)
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <QSPI_DummyCyclesCfg+0xf4>)
 8001e6e:	f7ff f8fc 	bl	800106a <MT25TL01G_WriteEnable>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <QSPI_DummyCyclesCfg+0xa0>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e025      	b.n	8001ec8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8001e7c:	2381      	movs	r3, #129	; 0x81
 8001e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8001e80:	897a      	ldrh	r2, [r7, #10]
 8001e82:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001e86:	4013      	ands	r3, r2
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <QSPI_DummyCyclesCfg+0xf8>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <QSPI_DummyCyclesCfg+0xf4>)
 8001e9e:	f001 fb85 	bl	80035ac <HAL_QSPI_Command>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <QSPI_DummyCyclesCfg+0xd0>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e00d      	b.n	8001ec8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001eac:	f107 030a 	add.w	r3, r7, #10
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <QSPI_DummyCyclesCfg+0xf4>)
 8001eb8:	f001 fbd6 	bl	8003668 <HAL_QSPI_Transmit>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <QSPI_DummyCyclesCfg+0xea>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Return BSP status */
  return ret;
 8001ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3748      	adds	r7, #72	; 0x48
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	24000090 	.word	0x24000090
 8001ed4:	ffff8080 	.word	0xffff8080

08001ed8 <CSP_QUADSPI_Init>:
  * @}
  */


uint8_t CSP_QUADSPI_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
	hqspi.Instance = QUADSPI;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <CSP_QUADSPI_Init+0x48>)
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <CSP_QUADSPI_Init+0x4c>)
 8001ee2:	601a      	str	r2, [r3, #0]
    if (QSPI_DeInit(0) != HAL_OK) {
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fcfb 	bl	80018e0 <QSPI_DeInit>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <CSP_QUADSPI_Init+0x1c>
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e010      	b.n	8001f16 <CSP_QUADSPI_Init+0x3e>
    }

    QSPI_Init_t qspi_Init;

    qspi_Init.InterfaceMode = QSPI_QPI_MODE;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	713b      	strb	r3, [r7, #4]
    qspi_Init.TransferRate = QSPI_STR_TRANSFER;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	717b      	strb	r3, [r7, #5]
    qspi_Init.DualFlashMode = QSPI_DUALFLASH_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	71bb      	strb	r3, [r7, #6]

    if (QSPI_Init(0, &qspi_Init) != HAL_OK)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff fc73 	bl	80017f0 <QSPI_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <CSP_QUADSPI_Init+0x3c>
    {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <CSP_QUADSPI_Init+0x3e>
    }

    return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	24000090 	.word	0x24000090
 8001f24:	52005000 	.word	0x52005000

08001f28 <CSP_QSPI_Erase_Chip>:

uint8_t CSP_QSPI_Erase_Chip(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	return QSPI_EraseChip(0);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff fdc9 	bl	8001ac4 <QSPI_EraseChip>
 8001f32:	4603      	mov	r3, r0
 8001f34:	b2db      	uxtb	r3, r3
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address, uint32_t buffer_size)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
	return QSPI_Write(0, buffer, address, buffer_size);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	68f9      	ldr	r1, [r7, #12]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff fd23 	bl	8001998 <QSPI_Write>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b2db      	uxtb	r3, r3
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_SDMMC1_SD_Init+0x34>)
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <MX_SDMMC1_SD_Init+0x38>)
 8001f68:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <MX_SDMMC1_SD_Init+0x34>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_SDMMC1_SD_Init+0x34>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <MX_SDMMC1_SD_Init+0x34>)
 8001f78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f7c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <MX_SDMMC1_SD_Init+0x34>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <MX_SDMMC1_SD_Init+0x34>)
 8001f86:	2208      	movs	r2, #8
 8001f88:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001f8a:	4802      	ldr	r0, [pc, #8]	; (8001f94 <MX_SDMMC1_SD_Init+0x34>)
 8001f8c:	f005 fce4 	bl	8007958 <HAL_SD_Init>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	240000e8 	.word	0x240000e8
 8001f98:	52007000 	.word	0x52007000

08001f9c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0be      	sub	sp, #248	; 0xf8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb4:	f107 0318 	add.w	r3, r7, #24
 8001fb8:	22c8      	movs	r2, #200	; 0xc8
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f00b fb01 	bl	800d5c4 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a41      	ldr	r2, [pc, #260]	; (80020cc <HAL_SD_MspInit+0x130>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d17a      	bne.n	80020c2 <HAL_SD_MspInit+0x126>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001fcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001fd8:	2319      	movs	r3, #25
 8001fda:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 150;
 8001fdc:	2396      	movs	r3, #150	; 0x96
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffe:	f107 0318 	add.w	r3, r7, #24
 8002002:	4618      	mov	r0, r3
 8002004:	f002 ff6a 	bl	8004edc <HAL_RCCEx_PeriphCLKConfig>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_SD_MspInit+0x76>
    {
      Error_Handler();
 800200e:	f7fe ffa3 	bl	8000f58 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_SD_MspInit+0x134>)
 8002014:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002018:	4a2d      	ldr	r2, [pc, #180]	; (80020d0 <HAL_SD_MspInit+0x134>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002022:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_SD_MspInit+0x134>)
 8002024:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_SD_MspInit+0x134>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <HAL_SD_MspInit+0x134>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_SD_MspInit+0x134>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_SD_MspInit+0x134>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <HAL_SD_MspInit+0x134>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_SD_MspInit+0x134>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 800206c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002070:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002086:	230c      	movs	r3, #12
 8002088:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002090:	4619      	mov	r1, r3
 8002092:	4810      	ldr	r0, [pc, #64]	; (80020d4 <HAL_SD_MspInit+0x138>)
 8002094:	f000 fe26 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8002098:	2304      	movs	r3, #4
 800209a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80020b0:	230c      	movs	r3, #12
 80020b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80020b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020ba:	4619      	mov	r1, r3
 80020bc:	4806      	ldr	r0, [pc, #24]	; (80020d8 <HAL_SD_MspInit+0x13c>)
 80020be:	f000 fe11 	bl	8002ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80020c2:	bf00      	nop
 80020c4:	37f8      	adds	r7, #248	; 0xf8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	52007000 	.word	0x52007000
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58020800 	.word	0x58020800
 80020d8:	58020c00 	.word	0x58020c00

080020dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_MspInit+0x30>)
 80020e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020e8:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_MspInit+0x30>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_MspInit+0x30>)
 80020f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	58024400 	.word	0x58024400

08002110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <NMI_Handler+0x4>

08002116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <MemManage_Handler+0x4>

08002122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <BusFault_Handler+0x4>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <UsageFault_Handler+0x4>

0800212e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215c:	f000 f98a 	bl	8002474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f00b f9ec 	bl	800d570 <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	24080000 	.word	0x24080000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	24000164 	.word	0x24000164
 80021cc:	24000268 	.word	0x24000268

080021d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021d4:	4b22      	ldr	r3, [pc, #136]	; (8002260 <MX_USART1_UART_Init+0x90>)
 80021d6:	4a23      	ldr	r2, [pc, #140]	; (8002264 <MX_USART1_UART_Init+0x94>)
 80021d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <MX_USART1_UART_Init+0x90>)
 80021dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021e2:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <MX_USART1_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <MX_USART1_UART_Init+0x90>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <MX_USART1_UART_Init+0x90>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <MX_USART1_UART_Init+0x90>)
 80021f6:	220c      	movs	r2, #12
 80021f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <MX_USART1_UART_Init+0x90>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <MX_USART1_UART_Init+0x90>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <MX_USART1_UART_Init+0x90>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <MX_USART1_UART_Init+0x90>)
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <MX_USART1_UART_Init+0x90>)
 8002214:	2200      	movs	r2, #0
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002218:	4811      	ldr	r0, [pc, #68]	; (8002260 <MX_USART1_UART_Init+0x90>)
 800221a:	f006 ff4f 	bl	80090bc <HAL_UART_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002224:	f7fe fe98 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002228:	2100      	movs	r1, #0
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <MX_USART1_UART_Init+0x90>)
 800222c:	f007 ffdf 	bl	800a1ee <HAL_UARTEx_SetTxFifoThreshold>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002236:	f7fe fe8f 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800223a:	2100      	movs	r1, #0
 800223c:	4808      	ldr	r0, [pc, #32]	; (8002260 <MX_USART1_UART_Init+0x90>)
 800223e:	f008 f814 	bl	800a26a <HAL_UARTEx_SetRxFifoThreshold>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002248:	f7fe fe86 	bl	8000f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800224c:	4804      	ldr	r0, [pc, #16]	; (8002260 <MX_USART1_UART_Init+0x90>)
 800224e:	f007 ff95 	bl	800a17c <HAL_UARTEx_DisableFifoMode>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002258:	f7fe fe7e 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	24000168 	.word	0x24000168
 8002264:	40011000 	.word	0x40011000

08002268 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0bc      	sub	sp, #240	; 0xf0
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	22c8      	movs	r2, #200	; 0xc8
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f00b f99b 	bl	800d5c4 <memset>
  if(uartHandle->Instance==USART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_UART_MspInit+0xc8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d146      	bne.n	8002326 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002298:	f04f 0201 	mov.w	r2, #1
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022aa:	f107 0310 	add.w	r3, r7, #16
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fe14 	bl	8004edc <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022ba:	f7fe fe4d 	bl	8000f58 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_UART_MspInit+0xcc>)
 80022c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_UART_MspInit+0xcc>)
 80022c6:	f043 0310 	orr.w	r3, r3, #16
 80022ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_UART_MspInit+0xcc>)
 80022d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_UART_MspInit+0xcc>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_UART_MspInit+0xcc>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_UART_MspInit+0xcc>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80022fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002314:	2307      	movs	r3, #7
 8002316:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800231e:	4619      	mov	r1, r3
 8002320:	4805      	ldr	r0, [pc, #20]	; (8002338 <HAL_UART_MspInit+0xd0>)
 8002322:	f000 fcdf 	bl	8002ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002326:	bf00      	nop
 8002328:	37f0      	adds	r7, #240	; 0xf0
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40011000 	.word	0x40011000
 8002334:	58024400 	.word	0x58024400
 8002338:	58020000 	.word	0x58020000

0800233c <Boot_Reset_Handler>:

    .section  .text.Boot_Reset_Handler
  .weak  Boot_Reset_Handler
  .type  Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800233c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002374 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002340:	f7fe f9a0 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002346:	490d      	ldr	r1, [pc, #52]	; (800237c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800234c:	e002      	b.n	8002354 <LoopCopyDataInit>

0800234e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002352:	3304      	adds	r3, #4

08002354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002358:	d3f9      	bcc.n	800234e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800235c:	4c0a      	ldr	r4, [pc, #40]	; (8002388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002360:	e001      	b.n	8002366 <LoopFillZerobss>

08002362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002364:	3204      	adds	r2, #4

08002366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002368:	d3fb      	bcc.n	8002362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800236a:	f00b f907 	bl	800d57c <__libc_init_array>
/* Call the application's entry point.*/
  bl  boot_main
 800236e:	f7fe fc55 	bl	8000c1c <boot_main>
  bx  lr
 8002372:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002374:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002378:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800237c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002380:	0800e054 	.word	0x0800e054
  ldr r2, =_sbss
 8002384:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8002388:	24000268 	.word	0x24000268

0800238c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800238c:	e7fe      	b.n	800238c <ADC3_IRQHandler>
	...

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002396:	2003      	movs	r0, #3
 8002398:	f000 f96e 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800239c:	f002 fbc8 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_Init+0x68>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	4913      	ldr	r1, [pc, #76]	; (80023fc <HAL_Init+0x6c>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_Init+0x68>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_Init+0x6c>)
 80023c4:	5cd3      	ldrb	r3, [r2, r3]
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <HAL_Init+0x70>)
 80023d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <HAL_Init+0x74>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023da:	2000      	movs	r0, #0
 80023dc:	f000 f814 	bl	8002408 <HAL_InitTick>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e002      	b.n	80023f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023ea:	f7ff fe77 	bl	80020dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	58024400 	.word	0x58024400
 80023fc:	0800df44 	.word	0x0800df44
 8002400:	24000004 	.word	0x24000004
 8002404:	24000000 	.word	0x24000000

08002408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_InitTick+0x60>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e021      	b.n	8002460 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_InitTick+0x64>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_InitTick+0x60>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	fbb3 f3f1 	udiv	r3, r3, r1
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f945 	bl	80026c2 <HAL_SYSTICK_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e00e      	b.n	8002460 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d80a      	bhi.n	800245e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002448:	2200      	movs	r2, #0
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f000 f91d 	bl	800268e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_InitTick+0x68>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2400000c 	.word	0x2400000c
 800246c:	24000000 	.word	0x24000000
 8002470:	24000008 	.word	0x24000008

08002474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x20>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x24>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_IncTick+0x24>)
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	2400000c 	.word	0x2400000c
 8002498:	240001fc 	.word	0x240001fc

0800249c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return uwTick;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_GetTick+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	240001fc 	.word	0x240001fc

080024b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff ffee 	bl	800249c <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d005      	beq.n	80024da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_Delay+0x44>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024da:	bf00      	nop
 80024dc:	f7ff ffde 	bl	800249c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d8f7      	bhi.n	80024dc <HAL_Delay+0x28>
  {
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2400000c 	.word	0x2400000c

080024fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetREVID+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0c1b      	lsrs	r3, r3, #16
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	5c001000 	.word	0x5c001000

08002514 <__NVIC_SetPriorityGrouping>:
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <__NVIC_SetPriorityGrouping+0x40>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	4313      	orrs	r3, r2
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	; (8002554 <__NVIC_SetPriorityGrouping+0x40>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00
 8002558:	05fa0000 	.word	0x05fa0000

0800255c <__NVIC_GetPriorityGrouping>:
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_SetPriority>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	; (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f7ff ff8e 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff47 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff5e 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff90 	bl	80025cc <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5f 	bl	8002578 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffb2 	bl	8002634 <SysTick_Config>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80026f0:	2308      	movs	r3, #8
 80026f2:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026f4:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <HAL_FLASH_Program+0x11c>)
 80026f6:	7d1b      	ldrb	r3, [r3, #20]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_FLASH_Program+0x24>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e076      	b.n	80027ee <HAL_FLASH_Program+0x112>
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_FLASH_Program+0x11c>)
 8002702:	2201      	movs	r2, #1
 8002704:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270c:	d306      	bcc.n	800271c <HAL_FLASH_Program+0x40>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8002714:	d202      	bcs.n	800271c <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8002716:	2301      	movs	r3, #1
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	e00c      	b.n	8002736 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8002722:	d306      	bcc.n	8002732 <HAL_FLASH_Program+0x56>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800272a:	d202      	bcs.n	8002732 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800272c:	2302      	movs	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	e001      	b.n	8002736 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e05b      	b.n	80027ee <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_FLASH_Program+0x11c>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800273c:	69b9      	ldr	r1, [r7, #24]
 800273e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002742:	f000 f8c1 	bl	80028c8 <FLASH_WaitForLastOperation>
 8002746:	4603      	mov	r3, r0
 8002748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800274c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002750:	2b00      	cmp	r3, #0
 8002752:	d147      	bne.n	80027e4 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d106      	bne.n	8002768 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_FLASH_Program+0x120>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4a27      	ldr	r2, [pc, #156]	; (80027fc <HAL_FLASH_Program+0x120>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	60d3      	str	r3, [r2, #12]
 8002766:	e007      	b.n	8002778 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_FLASH_Program+0x120>)
 800276a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800276e:	4a23      	ldr	r2, [pc, #140]	; (80027fc <HAL_FLASH_Program+0x120>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8002778:	f3bf 8f6f 	isb	sy
}
 800277c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800277e:	f3bf 8f4f 	dsb	sy
}
 8002782:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	3304      	adds	r3, #4
 8002790:	623b      	str	r3, [r7, #32]
        src_addr++;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	61fb      	str	r3, [r7, #28]
        row_index--;
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	3b01      	subs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ef      	bne.n	8002784 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 80027a4:	f3bf 8f6f 	isb	sy
}
 80027a8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80027aa:	f3bf 8f4f 	dsb	sy
}
 80027ae:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80027b0:	69b9      	ldr	r1, [r7, #24]
 80027b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027b6:	f000 f887 	bl	80028c8 <FLASH_WaitForLastOperation>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d106      	bne.n	80027d4 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_FLASH_Program+0x120>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_FLASH_Program+0x120>)
 80027cc:	f023 0302 	bic.w	r3, r3, #2
 80027d0:	60d3      	str	r3, [r2, #12]
 80027d2:	e007      	b.n	80027e4 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_FLASH_Program+0x120>)
 80027d6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <HAL_FLASH_Program+0x120>)
 80027dc:	f023 0302 	bic.w	r3, r3, #2
 80027e0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_FLASH_Program+0x11c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	751a      	strb	r2, [r3, #20]

  return status;
 80027ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3728      	adds	r7, #40	; 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	24000200 	.word	0x24000200
 80027fc:	52002000 	.word	0x52002000

08002800 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_FLASH_Unlock+0x68>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00d      	beq.n	800282c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_FLASH_Unlock+0x68>)
 8002812:	4a16      	ldr	r2, [pc, #88]	; (800286c <HAL_FLASH_Unlock+0x6c>)
 8002814:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_FLASH_Unlock+0x68>)
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <HAL_FLASH_Unlock+0x70>)
 800281a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_FLASH_Unlock+0x68>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e018      	b.n	800285e <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_FLASH_Unlock+0x68>)
 800282e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d010      	beq.n	800285c <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_FLASH_Unlock+0x68>)
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_FLASH_Unlock+0x6c>)
 800283e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_FLASH_Unlock+0x68>)
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_FLASH_Unlock+0x70>)
 8002846:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <HAL_FLASH_Unlock+0x68>)
 800284c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	52002000 	.word	0x52002000
 800286c:	45670123 	.word	0x45670123
 8002870:	cdef89ab 	.word	0xcdef89ab

08002874 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_FLASH_Lock+0x50>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <HAL_FLASH_Lock+0x50>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_FLASH_Lock+0x50>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e011      	b.n	80028b8 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_FLASH_Lock+0x50>)
 8002896:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_FLASH_Lock+0x50>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_FLASH_Lock+0x50>)
 80028a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	52002000 	.word	0x52002000

080028c8 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80028d2:	2304      	movs	r3, #4
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 80028da:	f7ff fddf 	bl	800249c <HAL_GetTick>
 80028de:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d113      	bne.n	800290e <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 80028e6:	4b41      	ldr	r3, [pc, #260]	; (80029ec <FLASH_WaitForLastOperation+0x124>)
 80028e8:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80028ea:	e010      	b.n	800290e <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d00c      	beq.n	800290e <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7ff fdd2 	bl	800249c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <FLASH_WaitForLastOperation+0x42>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e06a      	b.n	80029e4 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <FLASH_WaitForLastOperation+0x128>)
 8002912:	4013      	ands	r3, r2
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	429a      	cmp	r2, r3
 8002918:	d10a      	bne.n	8002930 <FLASH_WaitForLastOperation+0x68>
 800291a:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	4013      	ands	r3, r2
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e00c      	b.n	800294a <FLASH_WaitForLastOperation+0x82>
 8002930:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 8002932:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002936:	43da      	mvns	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4013      	ands	r3, r2
 800293c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ce      	bne.n	80028ec <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <FLASH_WaitForLastOperation+0x130>)
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	e007      	b.n	8002970 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 8002962:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <FLASH_WaitForLastOperation+0x130>)
 8002968:	4013      	ands	r3, r2
 800296a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800296e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d017      	beq.n	80029aa <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <FLASH_WaitForLastOperation+0x134>)
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <FLASH_WaitForLastOperation+0x134>)
 8002984:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <FLASH_WaitForLastOperation+0x128>)
 800298a:	4013      	ands	r3, r2
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	429a      	cmp	r2, r3
 8002990:	d103      	bne.n	800299a <FLASH_WaitForLastOperation+0xd2>
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	6153      	str	r3, [r2, #20]
 8002998:	e005      	b.n	80029a6 <FLASH_WaitForLastOperation+0xde>
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029a2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e01c      	b.n	80029e4 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10b      	bne.n	80029c8 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d111      	bne.n	80029e2 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 80029c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029c4:	615a      	str	r2, [r3, #20]
 80029c6:	e00c      	b.n	80029e2 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 80029ca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80029ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d6:	d104      	bne.n	80029e2 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <FLASH_WaitForLastOperation+0x12c>)
 80029da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029de:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	80000004 	.word	0x80000004
 80029f0:	1fef000f 	.word	0x1fef000f
 80029f4:	52002000 	.word	0x52002000
 80029f8:	17ee0000 	.word	0x17ee0000
 80029fc:	24000200 	.word	0x24000200

08002a00 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a0e:	4b5e      	ldr	r3, [pc, #376]	; (8002b88 <HAL_FLASHEx_Erase+0x188>)
 8002a10:	7d1b      	ldrb	r3, [r3, #20]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_FLASHEx_Erase+0x1a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e0b2      	b.n	8002b80 <HAL_FLASHEx_Erase+0x180>
 8002a1a:	4b5b      	ldr	r3, [pc, #364]	; (8002b88 <HAL_FLASHEx_Erase+0x188>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_FLASHEx_Erase+0x188>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8002a32:	2101      	movs	r1, #1
 8002a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a38:	f7ff ff46 	bl	80028c8 <FLASH_WaitForLastOperation>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002a52:	2102      	movs	r1, #2
 8002a54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a58:	f7ff ff36 	bl	80028c8 <FLASH_WaitForLastOperation>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 8085 	bne.w	8002b78 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d136      	bne.n	8002ae4 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f000 f887 	bl	8002b94 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00f      	beq.n	8002ab2 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8002a92:	2101      	movs	r1, #1
 8002a94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a98:	f7ff ff16 	bl	80028c8 <FLASH_WaitForLastOperation>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_FLASHEx_Erase+0x18c>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <HAL_FLASHEx_Erase+0x18c>)
 8002aac:	f023 0308 	bic.w	r3, r3, #8
 8002ab0:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d05c      	beq.n	8002b78 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002abe:	2102      	movs	r1, #2
 8002ac0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ac4:	f7ff ff00 	bl	80028c8 <FLASH_WaitForLastOperation>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_FLASHEx_Erase+0x18c>)
 8002ad4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <HAL_FLASHEx_Erase+0x18c>)
 8002ada:	f023 0308 	bic.w	r3, r3, #8
 8002ade:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8002ae2:	e049      	b.n	8002b78 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aea:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	e039      	b.n	8002b68 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	461a      	mov	r2, r3
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	f000 f8b2 	bl	8002c68 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00c      	beq.n	8002b2a <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8002b10:	2101      	movs	r1, #1
 8002b12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b16:	f7ff fed7 	bl	80028c8 <FLASH_WaitForLastOperation>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_FLASHEx_Erase+0x18c>)
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	491a      	ldr	r1, [pc, #104]	; (8002b8c <HAL_FLASHEx_Erase+0x18c>)
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_FLASHEx_Erase+0x190>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00e      	beq.n	8002b54 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8002b36:	2102      	movs	r1, #2
 8002b38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b3c:	f7ff fec4 	bl	80028c8 <FLASH_WaitForLastOperation>
 8002b40:	4603      	mov	r3, r0
 8002b42:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_FLASHEx_Erase+0x18c>)
 8002b46:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002b4a:	4910      	ldr	r1, [pc, #64]	; (8002b8c <HAL_FLASHEx_Erase+0x18c>)
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_FLASHEx_Erase+0x190>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	601a      	str	r2, [r3, #0]
          break;
 8002b60:	e00a      	b.n	8002b78 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3301      	adds	r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4413      	add	r3, r2
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3bd      	bcc.n	8002af4 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_FLASHEx_Erase+0x188>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	751a      	strb	r2, [r3, #20]

  return status;
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	24000200 	.word	0x24000200
 8002b8c:	52002000 	.word	0x52002000
 8002b90:	fffff8fb 	.word	0xfffff8fb

08002b94 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d122      	bne.n	8002bee <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002bae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bb2:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002bb6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002bba:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002bbc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bc0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4926      	ldr	r1, [pc, #152]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002bd2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002bd6:	4923      	ldr	r1, [pc, #140]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002be6:	f043 0310 	orr.w	r3, r3, #16
 8002bea:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8002bec:	e033      	b.n	8002c56 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d011      	beq.n	8002c1c <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002bfe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c02:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4916      	ldr	r1, [pc, #88]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c16:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002c1a:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d017      	beq.n	8002c56 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c28:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c32:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c38:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002c3c:	4909      	ldr	r1, [pc, #36]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c48:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002c4c:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <FLASH_MassErase+0xd0>)
 8002c4e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002c52:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	52002000 	.word	0x52002000

08002c68 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d010      	beq.n	8002ca0 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <FLASH_Erase_Sector+0x78>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <FLASH_Erase_Sector+0x78>)
 8002c84:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8002c88:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <FLASH_Erase_Sector+0x78>)
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	0219      	lsls	r1, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	4313      	orrs	r3, r2
 8002c98:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <FLASH_Erase_Sector+0x78>)
 8002c9a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8002c9e:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d014      	beq.n	8002cd4 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <FLASH_Erase_Sector+0x78>)
 8002cac:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002cb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <FLASH_Erase_Sector+0x78>)
 8002cb2:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8002cb6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <FLASH_Erase_Sector+0x78>)
 8002cbc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	0219      	lsls	r1, r3, #8
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <FLASH_Erase_Sector+0x78>)
 8002ccc:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8002cd0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	52002000 	.word	0x52002000

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cf2:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_GPIO_Init+0x234>)
 8002cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cf6:	e194      	b.n	8003022 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8186 	beq.w	800301c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d005      	beq.n	8002d28 <HAL_GPIO_Init+0x44>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d130      	bne.n	8002d8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d5e:	2201      	movs	r2, #1
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 0201 	and.w	r2, r3, #1
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d017      	beq.n	8002dc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d123      	bne.n	8002e1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	08da      	lsrs	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3208      	adds	r2, #8
 8002dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	220f      	movs	r2, #15
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	69b9      	ldr	r1, [r7, #24]
 8002e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0203 	and.w	r2, r3, #3
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80e0 	beq.w	800301c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <HAL_GPIO_Init+0x238>)
 8002e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e62:	4a2e      	ldr	r2, [pc, #184]	; (8002f1c <HAL_GPIO_Init+0x238>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_GPIO_Init+0x238>)
 8002e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7a:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <HAL_GPIO_Init+0x23c>)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <HAL_GPIO_Init+0x240>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d052      	beq.n	8002f4c <HAL_GPIO_Init+0x268>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <HAL_GPIO_Init+0x244>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d031      	beq.n	8002f12 <HAL_GPIO_Init+0x22e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <HAL_GPIO_Init+0x248>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02b      	beq.n	8002f0e <HAL_GPIO_Init+0x22a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <HAL_GPIO_Init+0x24c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d025      	beq.n	8002f0a <HAL_GPIO_Init+0x226>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <HAL_GPIO_Init+0x250>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01f      	beq.n	8002f06 <HAL_GPIO_Init+0x222>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_GPIO_Init+0x254>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d019      	beq.n	8002f02 <HAL_GPIO_Init+0x21e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <HAL_GPIO_Init+0x258>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0x21a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a19      	ldr	r2, [pc, #100]	; (8002f40 <HAL_GPIO_Init+0x25c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00d      	beq.n	8002efa <HAL_GPIO_Init+0x216>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <HAL_GPIO_Init+0x260>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_Init+0x212>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_GPIO_Init+0x264>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_GPIO_Init+0x20e>
 8002eee:	2309      	movs	r3, #9
 8002ef0:	e02d      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002ef2:	230a      	movs	r3, #10
 8002ef4:	e02b      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	e029      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002efa:	2307      	movs	r3, #7
 8002efc:	e027      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002efe:	2306      	movs	r3, #6
 8002f00:	e025      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002f02:	2305      	movs	r3, #5
 8002f04:	e023      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002f06:	2304      	movs	r3, #4
 8002f08:	e021      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e01f      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e01d      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e01b      	b.n	8002f4e <HAL_GPIO_Init+0x26a>
 8002f16:	bf00      	nop
 8002f18:	58000080 	.word	0x58000080
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	58000400 	.word	0x58000400
 8002f24:	58020000 	.word	0x58020000
 8002f28:	58020400 	.word	0x58020400
 8002f2c:	58020800 	.word	0x58020800
 8002f30:	58020c00 	.word	0x58020c00
 8002f34:	58021000 	.word	0x58021000
 8002f38:	58021400 	.word	0x58021400
 8002f3c:	58021800 	.word	0x58021800
 8002f40:	58021c00 	.word	0x58021c00
 8002f44:	58022000 	.word	0x58022000
 8002f48:	58022400 	.word	0x58022400
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	f002 0203 	and.w	r2, r2, #3
 8002f54:	0092      	lsls	r2, r2, #2
 8002f56:	4093      	lsls	r3, r2
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5e:	4938      	ldr	r1, [pc, #224]	; (8003040 <HAL_GPIO_Init+0x35c>)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	3302      	adds	r3, #2
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	3301      	adds	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	f47f ae63 	bne.w	8002cf8 <HAL_GPIO_Init+0x14>
  }
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	3724      	adds	r7, #36	; 0x24
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	58000400 	.word	0x58000400

08003044 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003052:	4b75      	ldr	r3, [pc, #468]	; (8003228 <HAL_GPIO_DeInit+0x1e4>)
 8003054:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8003056:	e0d9      	b.n	800320c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80cc 	beq.w	8003206 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800306e:	4a6f      	ldr	r2, [pc, #444]	; (800322c <HAL_GPIO_DeInit+0x1e8>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	220f      	movs	r2, #15
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a67      	ldr	r2, [pc, #412]	; (8003230 <HAL_GPIO_DeInit+0x1ec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d037      	beq.n	8003108 <HAL_GPIO_DeInit+0xc4>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a66      	ldr	r2, [pc, #408]	; (8003234 <HAL_GPIO_DeInit+0x1f0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d031      	beq.n	8003104 <HAL_GPIO_DeInit+0xc0>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a65      	ldr	r2, [pc, #404]	; (8003238 <HAL_GPIO_DeInit+0x1f4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d02b      	beq.n	8003100 <HAL_GPIO_DeInit+0xbc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a64      	ldr	r2, [pc, #400]	; (800323c <HAL_GPIO_DeInit+0x1f8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d025      	beq.n	80030fc <HAL_GPIO_DeInit+0xb8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a63      	ldr	r2, [pc, #396]	; (8003240 <HAL_GPIO_DeInit+0x1fc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d01f      	beq.n	80030f8 <HAL_GPIO_DeInit+0xb4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a62      	ldr	r2, [pc, #392]	; (8003244 <HAL_GPIO_DeInit+0x200>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d019      	beq.n	80030f4 <HAL_GPIO_DeInit+0xb0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a61      	ldr	r2, [pc, #388]	; (8003248 <HAL_GPIO_DeInit+0x204>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <HAL_GPIO_DeInit+0xac>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a60      	ldr	r2, [pc, #384]	; (800324c <HAL_GPIO_DeInit+0x208>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00d      	beq.n	80030ec <HAL_GPIO_DeInit+0xa8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a5f      	ldr	r2, [pc, #380]	; (8003250 <HAL_GPIO_DeInit+0x20c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <HAL_GPIO_DeInit+0xa4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a5e      	ldr	r2, [pc, #376]	; (8003254 <HAL_GPIO_DeInit+0x210>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_GPIO_DeInit+0xa0>
 80030e0:	2309      	movs	r3, #9
 80030e2:	e012      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 80030e4:	230a      	movs	r3, #10
 80030e6:	e010      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 80030e8:	2308      	movs	r3, #8
 80030ea:	e00e      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 80030ec:	2307      	movs	r3, #7
 80030ee:	e00c      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 80030f0:	2306      	movs	r3, #6
 80030f2:	e00a      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 80030f4:	2305      	movs	r3, #5
 80030f6:	e008      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 80030f8:	2304      	movs	r3, #4
 80030fa:	e006      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 80030fc:	2303      	movs	r3, #3
 80030fe:	e004      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 8003100:	2302      	movs	r3, #2
 8003102:	e002      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_GPIO_DeInit+0xc6>
 8003108:	2300      	movs	r3, #0
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	f002 0203 	and.w	r2, r2, #3
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	4093      	lsls	r3, r2
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d136      	bne.n	8003188 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43db      	mvns	r3, r3
 8003130:	401a      	ands	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	43db      	mvns	r3, r3
 8003140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003144:	4013      	ands	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003156:	4013      	ands	r3, r2
 8003158:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	220f      	movs	r2, #15
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800316a:	4a30      	ldr	r2, [pc, #192]	; (800322c <HAL_GPIO_DeInit+0x1e8>)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	43da      	mvns	r2, r3
 800317a:	482c      	ldr	r0, [pc, #176]	; (800322c <HAL_GPIO_DeInit+0x1e8>)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	400a      	ands	r2, r1
 8003182:	3302      	adds	r3, #2
 8003184:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2103      	movs	r1, #3
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	08da      	lsrs	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3208      	adds	r2, #8
 80031a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	220f      	movs	r2, #15
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	08d2      	lsrs	r2, r2, #3
 80031bc:	4019      	ands	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3208      	adds	r2, #8
 80031c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2103      	movs	r1, #3
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	401a      	ands	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	2101      	movs	r1, #1
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	401a      	ands	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2103      	movs	r1, #3
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	401a      	ands	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3301      	adds	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	f47f af1f 	bne.w	8003058 <HAL_GPIO_DeInit+0x14>
  }
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	58000080 	.word	0x58000080
 800322c:	58000400 	.word	0x58000400
 8003230:	58020000 	.word	0x58020000
 8003234:	58020400 	.word	0x58020400
 8003238:	58020800 	.word	0x58020800
 800323c:	58020c00 	.word	0x58020c00
 8003240:	58021000 	.word	0x58021000
 8003244:	58021400 	.word	0x58021400
 8003248:	58021800 	.word	0x58021800
 800324c:	58021c00 	.word	0x58021c00
 8003250:	58022000 	.word	0x58022000
 8003254:	58022400 	.word	0x58022400

08003258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e001      	b.n	800327a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
 8003294:	4613      	mov	r3, r2
 8003296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032a4:	e003      	b.n	80032ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	041a      	lsls	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80032c4:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <HAL_HSEM_FastTake+0x2c>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3320      	adds	r3, #32
 80032ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_HSEM_FastTake+0x30>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	58026400 	.word	0x58026400
 80032ec:	80000300 	.word	0x80000300

080032f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80032fa:	4906      	ldr	r1, [pc, #24]	; (8003314 <HAL_HSEM_Release+0x24>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	58026400 	.word	0x58026400

08003318 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 8003320:	f7ff f8bc 	bl	800249c <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e04a      	b.n	80033c6 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d008      	beq.n	800334e <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e03b      	b.n	80033c6 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800335c:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800336e:	e016      	b.n	800339e <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003370:	f7ff f894 	bl	800249c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b05      	cmp	r3, #5
 800337c:	d90f      	bls.n	800339e <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e013      	b.n	80033c6 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e1      	bne.n	8003370 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	221f      	movs	r2, #31
 80033b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80033d8:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_PWREx_ConfigSupply+0xb0>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	2b06      	cmp	r3, #6
 80033e2:	d00a      	beq.n	80033fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033e4:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_PWREx_ConfigSupply+0xb0>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e040      	b.n	8003478 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e03e      	b.n	8003478 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80033fa:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_PWREx_ConfigSupply+0xb0>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003402:	491f      	ldr	r1, [pc, #124]	; (8003480 <HAL_PWREx_ConfigSupply+0xb0>)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4313      	orrs	r3, r2
 8003408:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800340a:	f7ff f847 	bl	800249c <HAL_GetTick>
 800340e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003410:	e009      	b.n	8003426 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003412:	f7ff f843 	bl	800249c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003420:	d901      	bls.n	8003426 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e028      	b.n	8003478 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003426:	4b16      	ldr	r3, [pc, #88]	; (8003480 <HAL_PWREx_ConfigSupply+0xb0>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800342e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003432:	d1ee      	bne.n	8003412 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b1e      	cmp	r3, #30
 8003438:	d008      	beq.n	800344c <HAL_PWREx_ConfigSupply+0x7c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b2e      	cmp	r3, #46	; 0x2e
 800343e:	d005      	beq.n	800344c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b1d      	cmp	r3, #29
 8003444:	d002      	beq.n	800344c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b2d      	cmp	r3, #45	; 0x2d
 800344a:	d114      	bne.n	8003476 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800344c:	f7ff f826 	bl	800249c <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003452:	e009      	b.n	8003468 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003454:	f7ff f822 	bl	800249c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003462:	d901      	bls.n	8003468 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e007      	b.n	8003478 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_PWREx_ConfigSupply+0xb0>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d1ee      	bne.n	8003454 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	58024800 	.word	0x58024800

08003484 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af02      	add	r7, sp, #8
 800348a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff f806 	bl	800249c <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e05f      	b.n	800355c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fe f839 	bl	8001520 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80034ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 faf7 	bl	8003aa6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	021a      	lsls	r2, r3, #8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	2120      	movs	r1, #32
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 faef 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80034e8:	7afb      	ldrb	r3, [r7, #11]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d135      	bne.n	800355a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_QSPI_Init+0xe0>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6852      	ldr	r2, [r2, #4]
 80034fc:	0611      	lsls	r1, r2, #24
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68d2      	ldr	r2, [r2, #12]
 8003502:	4311      	orrs	r1, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	69d2      	ldr	r2, [r2, #28]
 8003508:	4311      	orrs	r1, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6a12      	ldr	r2, [r2, #32]
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	430b      	orrs	r3, r1
 8003516:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_QSPI_Init+0xe4>)
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6912      	ldr	r2, [r2, #16]
 8003526:	0411      	lsls	r1, r2, #16
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6952      	ldr	r2, [r2, #20]
 800352c:	4311      	orrs	r1, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6992      	ldr	r2, [r2, #24]
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	430b      	orrs	r3, r1
 800353a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800355a:	7afb      	ldrb	r3, [r7, #11]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	00ffff2f 	.word	0x00ffff2f
 8003568:	ffe0f8fe 	.word	0xffe0f8fe

0800356c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e012      	b.n	80035a4 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe f8f4 	bl	800177c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80035b8:	f7fe ff70 	bl	800249c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_QSPI_Command+0x22>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e048      	b.n	8003660 <HAL_QSPI_Command+0xb4>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d137      	bne.n	8003652 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2120      	movs	r1, #32
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fa61 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d125      	bne.n	8003656 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800360a:	2200      	movs	r2, #0
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fa8e 	bl	8003b30 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	2b00      	cmp	r3, #0
 800361a:	d115      	bne.n	8003648 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2201      	movs	r2, #1
 8003624:	2102      	movs	r1, #2
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fa4b 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2202      	movs	r2, #2
 800363c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003646:	e006      	b.n	8003656 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003650:	e001      	b.n	8003656 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	; 0x28
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003678:	f7fe ff10 	bl	800249c <HAL_GetTick>
 800367c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3320      	adds	r3, #32
 8003684:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_QSPI_Transmit+0x2e>
 8003692:	2302      	movs	r3, #2
 8003694:	e076      	b.n	8003784 <HAL_QSPI_Transmit+0x11c>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d165      	bne.n	8003776 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d056      	beq.n	8003764 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2212      	movs	r2, #18
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80036ea:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80036ec:	e01b      	b.n	8003726 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2201      	movs	r2, #1
 80036f6:	2104      	movs	r1, #4
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f9e2 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d113      	bne.n	8003730 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	1e5a      	subs	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1df      	bne.n	80036ee <HAL_QSPI_Transmit+0x86>
 800372e:	e000      	b.n	8003732 <HAL_QSPI_Transmit+0xca>
          break;
 8003730:	bf00      	nop
      }

      if (status == HAL_OK)
 8003732:	7ffb      	ldrb	r3, [r7, #31]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d110      	bne.n	800375a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2201      	movs	r2, #1
 8003740:	2102      	movs	r1, #2
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f9bd 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800374c:	7ffb      	ldrb	r3, [r7, #31]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2202      	movs	r2, #2
 8003758:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003762:	e00a      	b.n	800377a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	f043 0208 	orr.w	r2, r3, #8
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e001      	b.n	800377a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003782:	7ffb      	ldrb	r3, [r7, #31]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7fe fe7e 	bl	800249c <HAL_GetTick>
 80037a0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3320      	adds	r3, #32
 80037b0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_QSPI_Receive+0x36>
 80037be:	2302      	movs	r3, #2
 80037c0:	e07d      	b.n	80038be <HAL_QSPI_Receive+0x132>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d16c      	bne.n	80038b0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d05d      	beq.n	800389e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2222      	movs	r2, #34	; 0x22
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800381a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003824:	e01c      	b.n	8003860 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2201      	movs	r2, #1
 800382e:	2106      	movs	r1, #6
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f946 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800383a:	7ffb      	ldrb	r3, [r7, #31]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d114      	bne.n	800386a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	7812      	ldrb	r2, [r2, #0]
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	1e5a      	subs	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1de      	bne.n	8003826 <HAL_QSPI_Receive+0x9a>
 8003868:	e000      	b.n	800386c <HAL_QSPI_Receive+0xe0>
          break;
 800386a:	bf00      	nop
      }

      if (status == HAL_OK)
 800386c:	7ffb      	ldrb	r3, [r7, #31]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d110      	bne.n	8003894 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2201      	movs	r2, #1
 800387a:	2102      	movs	r1, #2
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f920 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003886:	7ffb      	ldrb	r3, [r7, #31]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d103      	bne.n	8003894 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2202      	movs	r2, #2
 8003892:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800389c:	e00a      	b.n	80038b4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f043 0208 	orr.w	r2, r3, #8
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	77fb      	strb	r3, [r7, #31]
 80038ae:	e001      	b.n	80038b4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80038bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b088      	sub	sp, #32
 80038ca:	af02      	add	r7, sp, #8
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80038d4:	f7fe fde2 	bl	800249c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_QSPI_AutoPolling+0x24>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e060      	b.n	80039ac <HAL_QSPI_AutoPolling+0xe6>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d14f      	bne.n	800399e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2242      	movs	r2, #66	; 0x42
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2200      	movs	r2, #0
 8003914:	2120      	movs	r1, #32
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f8d3 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d13d      	bne.n	80039a2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6852      	ldr	r2, [r2, #4]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6892      	ldr	r2, [r2, #8]
 8003942:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	431a      	orrs	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800395c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f8df 	bl	8003b30 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2201      	movs	r2, #1
 800397a:	2108      	movs	r1, #8
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f8a0 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2208      	movs	r2, #8
 8003992:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800399c:	e001      	b.n	80039a2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7fe fd6c 	bl	800249c <HAL_GetTick>
 80039c4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d062      	beq.n	8003a9c <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d017      	beq.n	8003a1c <HAL_QSPI_Abort+0x68>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	601a      	str	r2, [r3, #0]

      /* Abort MDMA */
      status = HAL_MDMA_Abort(hqspi->hmdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fc89 	bl	8003318 <HAL_MDMA_Abort>
 8003a06:	4603      	mov	r3, r0
 8003a08:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	f043 0204 	orr.w	r2, r3, #4
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d034      	beq.n	8003a94 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0202 	orr.w	r2, r2, #2
 8003a38:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2201      	movs	r2, #1
 8003a44:	2102      	movs	r1, #2
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f83b 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10e      	bne.n	8003a74 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2200      	movs	r2, #0
 8003a68:	2120      	movs	r1, #32
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f829 	bl	8003ac2 <QSPI_WaitFlagStateUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d110      	bne.n	8003a9c <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003a88:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a92:	e003      	b.n	8003a9c <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ad2:	e01a      	b.n	8003b0a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d016      	beq.n	8003b0a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003adc:	f7fe fcde 	bl	800249c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d302      	bcc.n	8003af2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2204      	movs	r2, #4
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f043 0201 	orr.w	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e00e      	b.n	8003b28 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d1d6      	bne.n	8003ad4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d009      	beq.n	8003b58 <QSPI_Config+0x28>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b4a:	d005      	beq.n	8003b58 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3a01      	subs	r2, #1
 8003b56:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80b9 	beq.w	8003cd4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d05f      	beq.n	8003c2a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d031      	beq.n	8003be0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	431a      	orrs	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	049b      	lsls	r3, r3, #18
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	ea42 0103 	orr.w	r1, r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bd0:	f000 812e 	beq.w	8003e30 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	6852      	ldr	r2, [r2, #4]
 8003bdc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003bde:	e127      	b.n	8003e30 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	049b      	lsls	r3, r3, #18
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	ea42 0103 	orr.w	r1, r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	615a      	str	r2, [r3, #20]
}
 8003c28:	e102      	b.n	8003e30 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d02e      	beq.n	8003c90 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	431a      	orrs	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	049b      	lsls	r3, r3, #18
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	ea42 0103 	orr.w	r1, r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c80:	f000 80d6 	beq.w	8003e30 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	6852      	ldr	r2, [r2, #4]
 8003c8c:	619a      	str	r2, [r3, #24]
}
 8003c8e:	e0cf      	b.n	8003e30 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	049b      	lsls	r3, r3, #18
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	ea42 0103 	orr.w	r1, r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	615a      	str	r2, [r3, #20]
}
 8003cd2:	e0ad      	b.n	8003e30 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d058      	beq.n	8003d8e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	6892      	ldr	r2, [r2, #8]
 8003ce4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02d      	beq.n	8003d4a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	049b      	lsls	r3, r3, #18
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	ea42 0103 	orr.w	r1, r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d3c:	d078      	beq.n	8003e30 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	6852      	ldr	r2, [r2, #4]
 8003d46:	619a      	str	r2, [r3, #24]
}
 8003d48:	e072      	b.n	8003e30 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	049b      	lsls	r3, r3, #18
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	ea42 0103 	orr.w	r1, r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	615a      	str	r2, [r3, #20]
}
 8003d8c:	e050      	b.n	8003e30 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d02a      	beq.n	8003dec <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	049b      	lsls	r3, r3, #18
 8003db2:	431a      	orrs	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	ea42 0103 	orr.w	r1, r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dde:	d027      	beq.n	8003e30 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	6852      	ldr	r2, [r2, #4]
 8003de8:	619a      	str	r2, [r3, #24]
}
 8003dea:	e021      	b.n	8003e30 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01d      	beq.n	8003e30 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	431a      	orrs	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	049b      	lsls	r3, r3, #18
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	ea42 0103 	orr.w	r1, r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	615a      	str	r2, [r3, #20]
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08c      	sub	sp, #48	; 0x30
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f000 bc48 	b.w	80046e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8088 	beq.w	8003f6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5e:	4b99      	ldr	r3, [pc, #612]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e68:	4b96      	ldr	r3, [pc, #600]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d007      	beq.n	8003e84 <HAL_RCC_OscConfig+0x48>
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	2b18      	cmp	r3, #24
 8003e78:	d111      	bne.n	8003e9e <HAL_RCC_OscConfig+0x62>
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d10c      	bne.n	8003e9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	4b8f      	ldr	r3, [pc, #572]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d06d      	beq.n	8003f6c <HAL_RCC_OscConfig+0x130>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d169      	bne.n	8003f6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f000 bc21 	b.w	80046e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x7a>
 8003ea8:	4b86      	ldr	r3, [pc, #536]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a85      	ldr	r2, [pc, #532]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	e02e      	b.n	8003f14 <HAL_RCC_OscConfig+0xd8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x9c>
 8003ebe:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a80      	ldr	r2, [pc, #512]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b7e      	ldr	r3, [pc, #504]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a7d      	ldr	r2, [pc, #500]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e01d      	b.n	8003f14 <HAL_RCC_OscConfig+0xd8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0xc0>
 8003ee2:	4b78      	ldr	r3, [pc, #480]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a77      	ldr	r2, [pc, #476]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b75      	ldr	r3, [pc, #468]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a74      	ldr	r2, [pc, #464]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e00b      	b.n	8003f14 <HAL_RCC_OscConfig+0xd8>
 8003efc:	4b71      	ldr	r3, [pc, #452]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a70      	ldr	r2, [pc, #448]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b6e      	ldr	r3, [pc, #440]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a6d      	ldr	r2, [pc, #436]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fe fabe 	bl	800249c <HAL_GetTick>
 8003f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fe faba 	bl	800249c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e3d4      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f36:	4b63      	ldr	r3, [pc, #396]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0xe8>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe faaa 	bl	800249c <HAL_GetTick>
 8003f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe faa6 	bl	800249c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e3c0      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f5e:	4b59      	ldr	r3, [pc, #356]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x110>
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80ca 	beq.w	8004110 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7c:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f86:	4b4f      	ldr	r3, [pc, #316]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x166>
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	2b18      	cmp	r3, #24
 8003f96:	d156      	bne.n	8004046 <HAL_RCC_OscConfig+0x20a>
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d151      	bne.n	8004046 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa2:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_RCC_OscConfig+0x17e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e392      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fba:	4b42      	ldr	r3, [pc, #264]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 0219 	bic.w	r2, r3, #25
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	493f      	ldr	r1, [pc, #252]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fa66 	bl	800249c <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd4:	f7fe fa62 	bl	800249c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e37c      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fe6:	4b37      	ldr	r3, [pc, #220]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	f7fe fa83 	bl	80024fc <HAL_GetREVID>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d817      	bhi.n	8004030 <HAL_RCC_OscConfig+0x1f4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d108      	bne.n	800401a <HAL_RCC_OscConfig+0x1de>
 8004008:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004010:	4a2c      	ldr	r2, [pc, #176]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8004012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004016:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004018:	e07a      	b.n	8004110 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b2a      	ldr	r3, [pc, #168]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	031b      	lsls	r3, r3, #12
 8004028:	4926      	ldr	r1, [pc, #152]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800402e:	e06f      	b.n	8004110 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004030:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	061b      	lsls	r3, r3, #24
 800403e:	4921      	ldr	r1, [pc, #132]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004044:	e064      	b.n	8004110 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d047      	beq.n	80040de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 0219 	bic.w	r2, r3, #25
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	491a      	ldr	r1, [pc, #104]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fe fa1c 	bl	800249c <HAL_GetTick>
 8004064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004068:	f7fe fa18 	bl	800249c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e332      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004086:	f7fe fa39 	bl	80024fc <HAL_GetREVID>
 800408a:	4603      	mov	r3, r0
 800408c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004090:	4293      	cmp	r3, r2
 8004092:	d819      	bhi.n	80040c8 <HAL_RCC_OscConfig+0x28c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b40      	cmp	r3, #64	; 0x40
 800409a:	d108      	bne.n	80040ae <HAL_RCC_OscConfig+0x272>
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040a4:	4a07      	ldr	r2, [pc, #28]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 80040a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040aa:	6053      	str	r3, [r2, #4]
 80040ac:	e030      	b.n	8004110 <HAL_RCC_OscConfig+0x2d4>
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	031b      	lsls	r3, r3, #12
 80040bc:	4901      	ldr	r1, [pc, #4]	; (80040c4 <HAL_RCC_OscConfig+0x288>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	604b      	str	r3, [r1, #4]
 80040c2:	e025      	b.n	8004110 <HAL_RCC_OscConfig+0x2d4>
 80040c4:	58024400 	.word	0x58024400
 80040c8:	4b9a      	ldr	r3, [pc, #616]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	4997      	ldr	r1, [pc, #604]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
 80040dc:	e018      	b.n	8004110 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040de:	4b95      	ldr	r3, [pc, #596]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a94      	ldr	r2, [pc, #592]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fe f9d7 	bl	800249c <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fe f9d3 	bl	800249c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e2ed      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004104:	4b8b      	ldr	r3, [pc, #556]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a9 	beq.w	8004270 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411e:	4b85      	ldr	r3, [pc, #532]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004126:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004128:	4b82      	ldr	r3, [pc, #520]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d007      	beq.n	8004144 <HAL_RCC_OscConfig+0x308>
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b18      	cmp	r3, #24
 8004138:	d13a      	bne.n	80041b0 <HAL_RCC_OscConfig+0x374>
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d135      	bne.n	80041b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004144:	4b7b      	ldr	r3, [pc, #492]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_OscConfig+0x320>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d001      	beq.n	800415c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e2c1      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800415c:	f7fe f9ce 	bl	80024fc <HAL_GetREVID>
 8004160:	4603      	mov	r3, r0
 8004162:	f241 0203 	movw	r2, #4099	; 0x1003
 8004166:	4293      	cmp	r3, r2
 8004168:	d817      	bhi.n	800419a <HAL_RCC_OscConfig+0x35e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	2b20      	cmp	r3, #32
 8004170:	d108      	bne.n	8004184 <HAL_RCC_OscConfig+0x348>
 8004172:	4b70      	ldr	r3, [pc, #448]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800417a:	4a6e      	ldr	r2, [pc, #440]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 800417c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004180:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004182:	e075      	b.n	8004270 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004184:	4b6b      	ldr	r3, [pc, #428]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	069b      	lsls	r3, r3, #26
 8004192:	4968      	ldr	r1, [pc, #416]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004198:	e06a      	b.n	8004270 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800419a:	4b66      	ldr	r3, [pc, #408]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	061b      	lsls	r3, r3, #24
 80041a8:	4962      	ldr	r1, [pc, #392]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ae:	e05f      	b.n	8004270 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d042      	beq.n	800423e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041b8:	4b5e      	ldr	r3, [pc, #376]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5d      	ldr	r2, [pc, #372]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80041be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fe f96a 	bl	800249c <HAL_GetTick>
 80041c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041cc:	f7fe f966 	bl	800249c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e280      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041de:	4b55      	ldr	r3, [pc, #340]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041ea:	f7fe f987 	bl	80024fc <HAL_GetREVID>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d817      	bhi.n	8004228 <HAL_RCC_OscConfig+0x3ec>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d108      	bne.n	8004212 <HAL_RCC_OscConfig+0x3d6>
 8004200:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004208:	4a4a      	ldr	r2, [pc, #296]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 800420a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800420e:	6053      	str	r3, [r2, #4]
 8004210:	e02e      	b.n	8004270 <HAL_RCC_OscConfig+0x434>
 8004212:	4b48      	ldr	r3, [pc, #288]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	069b      	lsls	r3, r3, #26
 8004220:	4944      	ldr	r1, [pc, #272]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]
 8004226:	e023      	b.n	8004270 <HAL_RCC_OscConfig+0x434>
 8004228:	4b42      	ldr	r3, [pc, #264]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	061b      	lsls	r3, r3, #24
 8004236:	493f      	ldr	r1, [pc, #252]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004238:	4313      	orrs	r3, r2
 800423a:	60cb      	str	r3, [r1, #12]
 800423c:	e018      	b.n	8004270 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800423e:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a3c      	ldr	r2, [pc, #240]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424a:	f7fe f927 	bl	800249c <HAL_GetTick>
 800424e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004252:	f7fe f923 	bl	800249c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e23d      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004264:	4b33      	ldr	r3, [pc, #204]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f0      	bne.n	8004252 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d036      	beq.n	80042ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d019      	beq.n	80042b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004284:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004288:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fe f904 	bl	800249c <HAL_GetTick>
 8004294:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004298:	f7fe f900 	bl	800249c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e21a      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042aa:	4b22      	ldr	r3, [pc, #136]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80042ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x45c>
 80042b6:	e018      	b.n	80042ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fe f8ea 	bl	800249c <HAL_GetTick>
 80042c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042cc:	f7fe f8e6 	bl	800249c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e200      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80042e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d039      	beq.n	800436a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01c      	beq.n	8004338 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004304:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004308:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800430a:	f7fe f8c7 	bl	800249c <HAL_GetTick>
 800430e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004312:	f7fe f8c3 	bl	800249c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e1dd      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x4d6>
 8004330:	e01b      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004338:	4b9b      	ldr	r3, [pc, #620]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a9a      	ldr	r2, [pc, #616]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800433e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004342:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004344:	f7fe f8aa 	bl	800249c <HAL_GetTick>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800434c:	f7fe f8a6 	bl	800249c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1c0      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800435e:	4b92      	ldr	r3, [pc, #584]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8081 	beq.w	800447a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004378:	4b8c      	ldr	r3, [pc, #560]	; (80045ac <HAL_RCC_OscConfig+0x770>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a8b      	ldr	r2, [pc, #556]	; (80045ac <HAL_RCC_OscConfig+0x770>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004384:	f7fe f88a 	bl	800249c <HAL_GetTick>
 8004388:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fe f886 	bl	800249c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	; 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e1a0      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800439e:	4b83      	ldr	r3, [pc, #524]	; (80045ac <HAL_RCC_OscConfig+0x770>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x584>
 80043b2:	4b7d      	ldr	r3, [pc, #500]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a7c      	ldr	r2, [pc, #496]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
 80043be:	e02d      	b.n	800441c <HAL_RCC_OscConfig+0x5e0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x5a6>
 80043c8:	4b77      	ldr	r3, [pc, #476]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a76      	ldr	r2, [pc, #472]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	4b74      	ldr	r3, [pc, #464]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a73      	ldr	r2, [pc, #460]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043da:	f023 0304 	bic.w	r3, r3, #4
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	e01c      	b.n	800441c <HAL_RCC_OscConfig+0x5e0>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d10c      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c8>
 80043ea:	4b6f      	ldr	r3, [pc, #444]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a6e      	ldr	r2, [pc, #440]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043f0:	f043 0304 	orr.w	r3, r3, #4
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
 80043f6:	4b6c      	ldr	r3, [pc, #432]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	4a6b      	ldr	r2, [pc, #428]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6713      	str	r3, [r2, #112]	; 0x70
 8004402:	e00b      	b.n	800441c <HAL_RCC_OscConfig+0x5e0>
 8004404:	4b68      	ldr	r3, [pc, #416]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	4a67      	ldr	r2, [pc, #412]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	6713      	str	r3, [r2, #112]	; 0x70
 8004410:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	4a64      	ldr	r2, [pc, #400]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004416:	f023 0304 	bic.w	r3, r3, #4
 800441a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d015      	beq.n	8004450 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004424:	f7fe f83a 	bl	800249c <HAL_GetTick>
 8004428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800442a:	e00a      	b.n	8004442 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442c:	f7fe f836 	bl	800249c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	; 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e14e      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004442:	4b59      	ldr	r3, [pc, #356]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ee      	beq.n	800442c <HAL_RCC_OscConfig+0x5f0>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fe f824 	bl	800249c <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004456:	e00a      	b.n	800446e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fe f820 	bl	800249c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e138      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800446e:	4b4e      	ldr	r3, [pc, #312]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ee      	bne.n	8004458 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 812d 	beq.w	80046de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004484:	4b48      	ldr	r3, [pc, #288]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448c:	2b18      	cmp	r3, #24
 800448e:	f000 80bd 	beq.w	800460c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	2b02      	cmp	r3, #2
 8004498:	f040 809e 	bne.w	80045d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449c:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a41      	ldr	r2, [pc, #260]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80044a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd fff8 	bl	800249c <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fd fff4 	bl	800249c <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e10e      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044c2:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ce:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80044d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCC_OscConfig+0x774>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044de:	0112      	lsls	r2, r2, #4
 80044e0:	430a      	orrs	r2, r1
 80044e2:	4931      	ldr	r1, [pc, #196]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	628b      	str	r3, [r1, #40]	; 0x28
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	3b01      	subs	r3, #1
 80044ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f6:	3b01      	subs	r3, #1
 80044f8:	025b      	lsls	r3, r3, #9
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	3b01      	subs	r3, #1
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	3b01      	subs	r3, #1
 8004512:	061b      	lsls	r3, r3, #24
 8004514:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004518:	4923      	ldr	r1, [pc, #140]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800451a:	4313      	orrs	r3, r2
 800451c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800451e:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800452a:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800452c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800452e:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <HAL_RCC_OscConfig+0x778>)
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004536:	00d2      	lsls	r2, r2, #3
 8004538:	491b      	ldr	r1, [pc, #108]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800453e:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	f023 020c 	bic.w	r2, r3, #12
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4917      	ldr	r1, [pc, #92]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004550:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	f023 0202 	bic.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	4912      	ldr	r1, [pc, #72]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	4a10      	ldr	r2, [pc, #64]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456e:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	4a0d      	ldr	r2, [pc, #52]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004584:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	4a07      	ldr	r2, [pc, #28]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <HAL_RCC_OscConfig+0x76c>)
 8004598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fd ff7d 	bl	800249c <HAL_GetTick>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045a4:	e011      	b.n	80045ca <HAL_RCC_OscConfig+0x78e>
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400
 80045ac:	58024800 	.word	0x58024800
 80045b0:	fffffc0c 	.word	0xfffffc0c
 80045b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd ff70 	bl	800249c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e08a      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x77c>
 80045d6:	e082      	b.n	80046de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d8:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a42      	ldr	r2, [pc, #264]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 80045de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd ff5a 	bl	800249c <HAL_GetTick>
 80045e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd ff56 	bl	800249c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e070      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045fe:	4b3a      	ldr	r3, [pc, #232]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x7b0>
 800460a:	e068      	b.n	80046de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800460c:	4b36      	ldr	r3, [pc, #216]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004612:	4b35      	ldr	r3, [pc, #212]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	2b01      	cmp	r3, #1
 800461e:	d031      	beq.n	8004684 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f003 0203 	and.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d12a      	bne.n	8004684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d122      	bne.n	8004684 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d11a      	bne.n	8004684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	0a5b      	lsrs	r3, r3, #9
 8004652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d111      	bne.n	8004684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d108      	bne.n	8004684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	0e1b      	lsrs	r3, r3, #24
 8004676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e02b      	b.n	80046e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004688:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	08db      	lsrs	r3, r3, #3
 800468e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004692:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	429a      	cmp	r2, r3
 800469c:	d01f      	beq.n	80046de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046aa:	f7fd fef7 	bl	800249c <HAL_GetTick>
 80046ae:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80046b0:	bf00      	nop
 80046b2:	f7fd fef3 	bl	800249c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d0f9      	beq.n	80046b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 80046c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_RCC_OscConfig+0x8b0>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046ca:	00d2      	lsls	r2, r2, #3
 80046cc:	4906      	ldr	r1, [pc, #24]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <HAL_RCC_OscConfig+0x8ac>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3730      	adds	r7, #48	; 0x30
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	58024400 	.word	0x58024400
 80046ec:	ffff0007 	.word	0xffff0007

080046f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e19c      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004704:	4b8a      	ldr	r3, [pc, #552]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d910      	bls.n	8004734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b87      	ldr	r3, [pc, #540]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 020f 	bic.w	r2, r3, #15
 800471a:	4985      	ldr	r1, [pc, #532]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b83      	ldr	r3, [pc, #524]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e184      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d010      	beq.n	8004762 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800474c:	429a      	cmp	r2, r3
 800474e:	d908      	bls.n	8004762 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004750:	4b78      	ldr	r3, [pc, #480]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	4975      	ldr	r1, [pc, #468]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800475e:	4313      	orrs	r3, r2
 8004760:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d010      	beq.n	8004790 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	4b70      	ldr	r3, [pc, #448]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800477a:	429a      	cmp	r2, r3
 800477c:	d908      	bls.n	8004790 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800477e:	4b6d      	ldr	r3, [pc, #436]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	496a      	ldr	r1, [pc, #424]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800478c:	4313      	orrs	r3, r2
 800478e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699a      	ldr	r2, [r3, #24]
 80047a0:	4b64      	ldr	r3, [pc, #400]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d908      	bls.n	80047be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047ac:	4b61      	ldr	r3, [pc, #388]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	495e      	ldr	r1, [pc, #376]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	4b59      	ldr	r3, [pc, #356]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d908      	bls.n	80047ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047da:	4b56      	ldr	r3, [pc, #344]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4953      	ldr	r1, [pc, #332]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	4b4d      	ldr	r3, [pc, #308]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	429a      	cmp	r2, r3
 8004806:	d908      	bls.n	800481a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b4a      	ldr	r3, [pc, #296]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f023 020f 	bic.w	r2, r3, #15
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4947      	ldr	r1, [pc, #284]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004816:	4313      	orrs	r3, r2
 8004818:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d055      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004826:	4b43      	ldr	r3, [pc, #268]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	4940      	ldr	r1, [pc, #256]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004834:	4313      	orrs	r3, r2
 8004836:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d107      	bne.n	8004850 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004840:	4b3c      	ldr	r3, [pc, #240]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d121      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0f6      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d107      	bne.n	8004868 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004858:	4b36      	ldr	r3, [pc, #216]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d115      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0ea      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d107      	bne.n	8004880 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004870:	4b30      	ldr	r3, [pc, #192]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0de      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004880:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0d6      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004890:	4b28      	ldr	r3, [pc, #160]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f023 0207 	bic.w	r2, r3, #7
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4925      	ldr	r1, [pc, #148]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a2:	f7fd fdfb 	bl	800249c <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048aa:	f7fd fdf7 	bl	800249c <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0be      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c0:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d1eb      	bne.n	80048aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	4b14      	ldr	r3, [pc, #80]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d208      	bcs.n	8004900 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f023 020f 	bic.w	r2, r3, #15
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	490e      	ldr	r1, [pc, #56]	; (8004934 <HAL_RCC_ClockConfig+0x244>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d214      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 020f 	bic.w	r2, r3, #15
 8004916:	4906      	ldr	r1, [pc, #24]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <HAL_RCC_ClockConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e086      	b.n	8004a3e <HAL_RCC_ClockConfig+0x34e>
 8004930:	52002000 	.word	0x52002000
 8004934:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d010      	beq.n	8004966 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004950:	429a      	cmp	r2, r3
 8004952:	d208      	bcs.n	8004966 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004954:	4b3c      	ldr	r3, [pc, #240]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	4939      	ldr	r1, [pc, #228]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004962:	4313      	orrs	r3, r2
 8004964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d010      	beq.n	8004994 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	4b34      	ldr	r3, [pc, #208]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800497e:	429a      	cmp	r2, r3
 8004980:	d208      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004982:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	492e      	ldr	r1, [pc, #184]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004990:	4313      	orrs	r3, r2
 8004992:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d208      	bcs.n	80049c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049b0:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	4922      	ldr	r1, [pc, #136]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d010      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049da:	429a      	cmp	r2, r3
 80049dc:	d208      	bcs.n	80049f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	4917      	ldr	r1, [pc, #92]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049f0:	f000 f89e 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	4912      	ldr	r1, [pc, #72]	; (8004a4c <HAL_RCC_ClockConfig+0x35c>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_RCC_ClockConfig+0x358>)
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <HAL_RCC_ClockConfig+0x35c>)
 8004a18:	5cd3      	ldrb	r3, [r2, r3]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
 8004a24:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <HAL_RCC_ClockConfig+0x360>)
 8004a26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x364>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <HAL_RCC_ClockConfig+0x368>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd fce8 	bl	8002408 <HAL_InitTick>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	58024400 	.word	0x58024400
 8004a4c:	0800df44 	.word	0x0800df44
 8004a50:	24000004 	.word	0x24000004
 8004a54:	24000000 	.word	0x24000000
 8004a58:	24000008 	.word	0x24000008

08004a5c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08c      	sub	sp, #48	; 0x30
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d12a      	bne.n	8004ac4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a74:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a7e:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	2302      	movs	r3, #2
 8004a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a96:	2303      	movs	r3, #3
 8004a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004aa2:	f107 031c 	add.w	r3, r7, #28
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	481f      	ldr	r0, [pc, #124]	; (8004b28 <HAL_RCC_MCOConfig+0xcc>)
 8004aaa:	f7fe f91b 	bl	8002ce4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	430b      	orrs	r3, r1
 8004abc:	4919      	ldr	r1, [pc, #100]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004ac2:	e02a      	b.n	8004b1a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aca:	4a16      	ldr	r2, [pc, #88]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aec:	2303      	movs	r3, #3
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004af8:	f107 031c 	add.w	r3, r7, #28
 8004afc:	4619      	mov	r1, r3
 8004afe:	480b      	ldr	r0, [pc, #44]	; (8004b2c <HAL_RCC_MCOConfig+0xd0>)
 8004b00:	f7fe f8f0 	bl	8002ce4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004b04:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	01d9      	lsls	r1, r3, #7
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	430b      	orrs	r3, r1
 8004b14:	4903      	ldr	r1, [pc, #12]	; (8004b24 <HAL_RCC_MCOConfig+0xc8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
}
 8004b1a:	bf00      	nop
 8004b1c:	3730      	adds	r7, #48	; 0x30
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
 8004b28:	58020000 	.word	0x58020000
 8004b2c:	58020800 	.word	0x58020800

08004b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b089      	sub	sp, #36	; 0x24
 8004b34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b36:	4bb3      	ldr	r3, [pc, #716]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b3e:	2b18      	cmp	r3, #24
 8004b40:	f200 8155 	bhi.w	8004dee <HAL_RCC_GetSysClockFreq+0x2be>
 8004b44:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004bb1 	.word	0x08004bb1
 8004b50:	08004def 	.word	0x08004def
 8004b54:	08004def 	.word	0x08004def
 8004b58:	08004def 	.word	0x08004def
 8004b5c:	08004def 	.word	0x08004def
 8004b60:	08004def 	.word	0x08004def
 8004b64:	08004def 	.word	0x08004def
 8004b68:	08004def 	.word	0x08004def
 8004b6c:	08004bd7 	.word	0x08004bd7
 8004b70:	08004def 	.word	0x08004def
 8004b74:	08004def 	.word	0x08004def
 8004b78:	08004def 	.word	0x08004def
 8004b7c:	08004def 	.word	0x08004def
 8004b80:	08004def 	.word	0x08004def
 8004b84:	08004def 	.word	0x08004def
 8004b88:	08004def 	.word	0x08004def
 8004b8c:	08004bdd 	.word	0x08004bdd
 8004b90:	08004def 	.word	0x08004def
 8004b94:	08004def 	.word	0x08004def
 8004b98:	08004def 	.word	0x08004def
 8004b9c:	08004def 	.word	0x08004def
 8004ba0:	08004def 	.word	0x08004def
 8004ba4:	08004def 	.word	0x08004def
 8004ba8:	08004def 	.word	0x08004def
 8004bac:	08004be3 	.word	0x08004be3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bb0:	4b94      	ldr	r3, [pc, #592]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bbc:	4b91      	ldr	r3, [pc, #580]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	08db      	lsrs	r3, r3, #3
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	4a90      	ldr	r2, [pc, #576]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004bce:	e111      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004bd0:	4b8d      	ldr	r3, [pc, #564]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bd2:	61bb      	str	r3, [r7, #24]
      break;
 8004bd4:	e10e      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004bd6:	4b8d      	ldr	r3, [pc, #564]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bd8:	61bb      	str	r3, [r7, #24]
      break;
 8004bda:	e10b      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004bdc:	4b8c      	ldr	r3, [pc, #560]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004bde:	61bb      	str	r3, [r7, #24]
      break;
 8004be0:	e108      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004be2:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004bec:	4b85      	ldr	r3, [pc, #532]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004bf8:	4b82      	ldr	r3, [pc, #520]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c02:	4b80      	ldr	r3, [pc, #512]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	08db      	lsrs	r3, r3, #3
 8004c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80e1 	beq.w	8004de8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	f000 8083 	beq.w	8004d34 <HAL_RCC_GetSysClockFreq+0x204>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f200 80a1 	bhi.w	8004d78 <HAL_RCC_GetSysClockFreq+0x248>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0x114>
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d056      	beq.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004c42:	e099      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c44:	4b6f      	ldr	r3, [pc, #444]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02d      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c50:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	4a6b      	ldr	r2, [pc, #428]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7a:	4b62      	ldr	r3, [pc, #392]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004caa:	e087      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004e18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbe:	4b51      	ldr	r3, [pc, #324]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cd2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cee:	e065      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004e1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d02:	4b40      	ldr	r3, [pc, #256]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d32:	e043      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004e20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d76:	e021      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004e1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8a:	4b1e      	ldr	r3, [pc, #120]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004dbc:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	0a5b      	lsrs	r3, r3, #9
 8004dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de0:	ee17 3a90 	vmov	r3, s15
 8004de4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004de6:	e005      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61bb      	str	r3, [r7, #24]
      break;
 8004dec:	e002      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004dee:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004df0:	61bb      	str	r3, [r7, #24]
      break;
 8004df2:	bf00      	nop
  }

  return sysclockfreq;
 8004df4:	69bb      	ldr	r3, [r7, #24]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3724      	adds	r7, #36	; 0x24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	58024400 	.word	0x58024400
 8004e08:	03d09000 	.word	0x03d09000
 8004e0c:	003d0900 	.word	0x003d0900
 8004e10:	017d7840 	.word	0x017d7840
 8004e14:	46000000 	.word	0x46000000
 8004e18:	4c742400 	.word	0x4c742400
 8004e1c:	4a742400 	.word	0x4a742400
 8004e20:	4bbebc20 	.word	0x4bbebc20

08004e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e2a:	f7ff fe81 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	0a1b      	lsrs	r3, r3, #8
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	490f      	ldr	r1, [pc, #60]	; (8004e78 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e3c:	5ccb      	ldrb	r3, [r1, r3]
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	fa22 f303 	lsr.w	r3, r2, r3
 8004e46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5e:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x58>)
 8004e60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e62:	4a07      	ldr	r2, [pc, #28]	; (8004e80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x58>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	58024400 	.word	0x58024400
 8004e78:	0800df44 	.word	0x0800df44
 8004e7c:	24000004 	.word	0x24000004
 8004e80:	24000000 	.word	0x24000000

08004e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e88:	f7ff ffcc 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	4904      	ldr	r1, [pc, #16]	; (8004eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	0800df44 	.word	0x0800df44

08004eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004eb4:	f7ff ffb6 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	4904      	ldr	r1, [pc, #16]	; (8004ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	0800df44 	.word	0x0800df44

08004edc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee0:	b0cc      	sub	sp, #304	; 0x130
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004f00:	2500      	movs	r5, #0
 8004f02:	ea54 0305 	orrs.w	r3, r4, r5
 8004f06:	d049      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f12:	d02f      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004f14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f18:	d828      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f1e:	d01a      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f24:	d822      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f2e:	d007      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f30:	e01c      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f32:	4bb8      	ldr	r3, [pc, #736]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	4ab7      	ldr	r2, [pc, #732]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f3e:	e01a      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f44:	3308      	adds	r3, #8
 8004f46:	2102      	movs	r1, #2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f002 fba1 	bl	8007690 <RCCEx_PLL2_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f54:	e00f      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f5a:	3328      	adds	r3, #40	; 0x28
 8004f5c:	2102      	movs	r1, #2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f002 fc48 	bl	80077f4 <RCCEx_PLL3_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f6a:	e004      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004f72:	e000      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f76:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f7e:	4ba5      	ldr	r3, [pc, #660]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8c:	4aa1      	ldr	r2, [pc, #644]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6513      	str	r3, [r2, #80]	; 0x50
 8004f92:	e003      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f98:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004fa8:	f04f 0900 	mov.w	r9, #0
 8004fac:	ea58 0309 	orrs.w	r3, r8, r9
 8004fb0:	d047      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004fb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d82a      	bhi.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fd9 	.word	0x08004fd9
 8004fc8:	08004fe7 	.word	0x08004fe7
 8004fcc:	08004ffd 	.word	0x08004ffd
 8004fd0:	0800501b 	.word	0x0800501b
 8004fd4:	0800501b 	.word	0x0800501b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd8:	4b8e      	ldr	r3, [pc, #568]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	4a8d      	ldr	r2, [pc, #564]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fe4:	e01a      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fea:	3308      	adds	r3, #8
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f002 fb4e 	bl	8007690 <RCCEx_PLL2_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ffa:	e00f      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005000:	3328      	adds	r3, #40	; 0x28
 8005002:	2100      	movs	r1, #0
 8005004:	4618      	mov	r0, r3
 8005006:	f002 fbf5 	bl	80077f4 <RCCEx_PLL3_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005010:	e004      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005018:	e000      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800501a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005024:	4b7b      	ldr	r3, [pc, #492]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	f023 0107 	bic.w	r1, r3, #7
 800502c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005032:	4a78      	ldr	r2, [pc, #480]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005034:	430b      	orrs	r3, r1
 8005036:	6513      	str	r3, [r2, #80]	; 0x50
 8005038:	e003      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800503e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005042:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800504e:	f04f 0b00 	mov.w	fp, #0
 8005052:	ea5a 030b 	orrs.w	r3, sl, fp
 8005056:	d04c      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005058:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800505c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005062:	d030      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005068:	d829      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800506a:	2bc0      	cmp	r3, #192	; 0xc0
 800506c:	d02d      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800506e:	2bc0      	cmp	r3, #192	; 0xc0
 8005070:	d825      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d018      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d821      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d007      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005082:	e01c      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005084:	4b63      	ldr	r3, [pc, #396]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4a62      	ldr	r2, [pc, #392]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800508a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800508e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005090:	e01c      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005096:	3308      	adds	r3, #8
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f002 faf8 	bl	8007690 <RCCEx_PLL2_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80050a6:	e011      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050ac:	3328      	adds	r3, #40	; 0x28
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f002 fb9f 	bl	80077f4 <RCCEx_PLL3_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80050c4:	e002      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80050ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80050d4:	4b4f      	ldr	r3, [pc, #316]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80050dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e2:	4a4c      	ldr	r2, [pc, #304]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6513      	str	r3, [r2, #80]	; 0x50
 80050e8:	e003      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80050fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005108:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800510c:	460b      	mov	r3, r1
 800510e:	4313      	orrs	r3, r2
 8005110:	d053      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005112:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005116:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800511a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800511e:	d035      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005124:	d82e      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005126:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800512a:	d031      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800512c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005130:	d828      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005136:	d01a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800513c:	d822      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005146:	d007      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005148:	e01c      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514a:	4b32      	ldr	r3, [pc, #200]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	4a31      	ldr	r2, [pc, #196]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005156:	e01c      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005158:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800515c:	3308      	adds	r3, #8
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f002 fa95 	bl	8007690 <RCCEx_PLL2_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800516c:	e011      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800516e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005172:	3328      	adds	r3, #40	; 0x28
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f002 fb3c 	bl	80077f4 <RCCEx_PLL3_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005182:	e006      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800518a:	e002      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005192:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800519a:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80051a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051aa:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6593      	str	r3, [r2, #88]	; 0x58
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80051ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80051c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d056      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80051da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051e6:	d038      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80051e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ec:	d831      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051f2:	d034      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80051f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051f8:	d82b      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051fe:	d01d      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005204:	d825      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800520a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005210:	e01f      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005212:	bf00      	nop
 8005214:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005218:	4ba2      	ldr	r3, [pc, #648]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	4aa1      	ldr	r2, [pc, #644]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800521e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005224:	e01c      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005226:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800522a:	3308      	adds	r3, #8
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f002 fa2e 	bl	8007690 <RCCEx_PLL2_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800523a:	e011      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800523c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005240:	3328      	adds	r3, #40	; 0x28
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f002 fad5 	bl	80077f4 <RCCEx_PLL3_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005250:	e006      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005258:	e002      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800525e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005260:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005268:	4b8e      	ldr	r3, [pc, #568]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005270:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005274:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005278:	4a8a      	ldr	r2, [pc, #552]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800527a:	430b      	orrs	r3, r1
 800527c:	6593      	str	r3, [r2, #88]	; 0x58
 800527e:	e003      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005284:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005294:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800529e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80052a2:	460b      	mov	r3, r1
 80052a4:	4313      	orrs	r3, r2
 80052a6:	d03a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80052a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	2b30      	cmp	r3, #48	; 0x30
 80052b0:	d01f      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80052b2:	2b30      	cmp	r3, #48	; 0x30
 80052b4:	d819      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d00c      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d815      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d019      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d111      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c6:	4b77      	ldr	r3, [pc, #476]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	4a76      	ldr	r2, [pc, #472]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80052d2:	e011      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052d8:	3308      	adds	r3, #8
 80052da:	2102      	movs	r1, #2
 80052dc:	4618      	mov	r0, r3
 80052de:	f002 f9d7 	bl	8007690 <RCCEx_PLL2_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80052e8:	e006      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80052f0:	e002      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80052f2:	bf00      	nop
 80052f4:	e000      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80052f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005300:	4b68      	ldr	r3, [pc, #416]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005304:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005308:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	4a65      	ldr	r2, [pc, #404]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005310:	430b      	orrs	r3, r1
 8005312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005314:	e003      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005316:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800531a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800531e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800532a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800532e:	2300      	movs	r3, #0
 8005330:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005334:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005338:	460b      	mov	r3, r1
 800533a:	4313      	orrs	r3, r2
 800533c:	d051      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800533e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005348:	d035      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800534a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800534e:	d82e      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005354:	d031      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005356:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800535a:	d828      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d01a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005366:	d822      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005370:	d007      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005372:	e01c      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005374:	4b4b      	ldr	r3, [pc, #300]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4a4a      	ldr	r2, [pc, #296]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800537a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005380:	e01c      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005382:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005386:	3308      	adds	r3, #8
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f002 f980 	bl	8007690 <RCCEx_PLL2_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005396:	e011      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005398:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800539c:	3328      	adds	r3, #40	; 0x28
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f002 fa27 	bl	80077f4 <RCCEx_PLL3_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80053b4:	e002      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80053b6:	bf00      	nop
 80053b8:	e000      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80053ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053c4:	4b37      	ldr	r3, [pc, #220]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80053cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d2:	4a34      	ldr	r2, [pc, #208]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6513      	str	r3, [r2, #80]	; 0x50
 80053d8:	e003      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80053e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80053ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053f2:	2300      	movs	r3, #0
 80053f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4313      	orrs	r3, r2
 8005400:	d056      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005402:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800540c:	d033      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800540e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005412:	d82c      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005414:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005418:	d02f      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800541a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800541e:	d826      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005420:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005424:	d02b      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005426:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800542a:	d820      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800542c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005430:	d012      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005436:	d81a      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005438:	2b00      	cmp	r3, #0
 800543a:	d022      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d115      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005442:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005446:	3308      	adds	r3, #8
 8005448:	2101      	movs	r1, #1
 800544a:	4618      	mov	r0, r3
 800544c:	f002 f920 	bl	8007690 <RCCEx_PLL2_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005456:	e015      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005458:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800545c:	3328      	adds	r3, #40	; 0x28
 800545e:	2101      	movs	r1, #1
 8005460:	4618      	mov	r0, r3
 8005462:	f002 f9c7 	bl	80077f4 <RCCEx_PLL3_Config>
 8005466:	4603      	mov	r3, r0
 8005468:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800546c:	e00a      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005474:	e006      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005476:	bf00      	nop
 8005478:	e004      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800547a:	bf00      	nop
 800547c:	e002      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800547e:	bf00      	nop
 8005480:	e000      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005484:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10d      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005494:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549a:	4a02      	ldr	r2, [pc, #8]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800549c:	430b      	orrs	r3, r1
 800549e:	6513      	str	r3, [r2, #80]	; 0x50
 80054a0:	e006      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80054a2:	bf00      	nop
 80054a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80054ac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80054bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054c6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80054ca:	460b      	mov	r3, r1
 80054cc:	4313      	orrs	r3, r2
 80054ce:	d055      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80054d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054dc:	d033      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80054de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054e2:	d82c      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d02f      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ee:	d826      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054f4:	d02b      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80054f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054fa:	d820      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005500:	d012      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005506:	d81a      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d022      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800550c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005510:	d115      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005516:	3308      	adds	r3, #8
 8005518:	2101      	movs	r1, #1
 800551a:	4618      	mov	r0, r3
 800551c:	f002 f8b8 	bl	8007690 <RCCEx_PLL2_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005526:	e015      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800552c:	3328      	adds	r3, #40	; 0x28
 800552e:	2101      	movs	r1, #1
 8005530:	4618      	mov	r0, r3
 8005532:	f002 f95f 	bl	80077f4 <RCCEx_PLL3_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800553c:	e00a      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005544:	e006      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005546:	bf00      	nop
 8005548:	e004      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005554:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800555c:	4bb6      	ldr	r3, [pc, #728]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800555e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005560:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005564:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005568:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800556c:	4ab2      	ldr	r2, [pc, #712]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800556e:	430b      	orrs	r3, r1
 8005570:	6593      	str	r3, [r2, #88]	; 0x58
 8005572:	e003      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005574:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005578:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800557c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005584:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800558c:	2300      	movs	r3, #0
 800558e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005592:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005596:	460b      	mov	r3, r1
 8005598:	4313      	orrs	r3, r2
 800559a:	d02a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800559c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d011      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80055a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055aa:	d10a      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055b0:	3308      	adds	r3, #8
 80055b2:	2101      	movs	r1, #1
 80055b4:	4618      	mov	r0, r3
 80055b6:	f002 f86b 	bl	8007690 <RCCEx_PLL2_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80055c0:	e004      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80055c8:	e000      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80055ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80055d4:	4b98      	ldr	r3, [pc, #608]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80055dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e2:	4a95      	ldr	r2, [pc, #596]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055e4:	430b      	orrs	r3, r1
 80055e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055e8:	e003      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80055fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005602:	2300      	movs	r3, #0
 8005604:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005608:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800560c:	460b      	mov	r3, r1
 800560e:	4313      	orrs	r3, r2
 8005610:	d037      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005612:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561c:	d00e      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800561e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005622:	d816      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d018      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562c:	d111      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562e:	4b82      	ldr	r3, [pc, #520]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	4a81      	ldr	r2, [pc, #516]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800563a:	e00f      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800563c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005640:	3308      	adds	r3, #8
 8005642:	2101      	movs	r1, #1
 8005644:	4618      	mov	r0, r3
 8005646:	f002 f823 	bl	8007690 <RCCEx_PLL2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005650:	e004      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005658:	e000      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800565a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005664:	4b74      	ldr	r3, [pc, #464]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800566c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005672:	4a71      	ldr	r2, [pc, #452]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005674:	430b      	orrs	r3, r1
 8005676:	6513      	str	r3, [r2, #80]	; 0x50
 8005678:	e003      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800567e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005682:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800568e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005692:	2300      	movs	r3, #0
 8005694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005698:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800569c:	460b      	mov	r3, r1
 800569e:	4313      	orrs	r3, r2
 80056a0:	d03a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80056a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d81d      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056f1 	.word	0x080056f1
 80056b8:	080056c5 	.word	0x080056c5
 80056bc:	080056d3 	.word	0x080056d3
 80056c0:	080056f1 	.word	0x080056f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c4:	4b5c      	ldr	r3, [pc, #368]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	4a5b      	ldr	r2, [pc, #364]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056d0:	e00f      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056d6:	3308      	adds	r3, #8
 80056d8:	2102      	movs	r1, #2
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 ffd8 	bl	8007690 <RCCEx_PLL2_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056e6:	e004      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80056ee:	e000      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80056f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056fa:	4b4f      	ldr	r3, [pc, #316]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fe:	f023 0103 	bic.w	r1, r3, #3
 8005702:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005708:	4a4b      	ldr	r2, [pc, #300]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800570a:	430b      	orrs	r3, r1
 800570c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800570e:	e003      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005714:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005718:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800572e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005732:	460b      	mov	r3, r1
 8005734:	4313      	orrs	r3, r2
 8005736:	f000 80a0 	beq.w	800587a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800573a:	4b40      	ldr	r3, [pc, #256]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a3f      	ldr	r2, [pc, #252]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005744:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005746:	f7fc fea9 	bl	800249c <HAL_GetTick>
 800574a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800574e:	e00b      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005750:	f7fc fea4 	bl	800249c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b64      	cmp	r3, #100	; 0x64
 800575e:	d903      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005766:	e005      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005768:	4b34      	ldr	r3, [pc, #208]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ed      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005774:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005778:	2b00      	cmp	r3, #0
 800577a:	d17a      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800577c:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800577e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005780:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005784:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005788:	4053      	eors	r3, r2
 800578a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578e:	2b00      	cmp	r3, #0
 8005790:	d015      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005792:	4b29      	ldr	r3, [pc, #164]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800579e:	4b26      	ldr	r3, [pc, #152]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	4a25      	ldr	r2, [pc, #148]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057aa:	4b23      	ldr	r3, [pc, #140]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	4a22      	ldr	r2, [pc, #136]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80057b6:	4a20      	ldr	r2, [pc, #128]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80057bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80057be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ca:	d118      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fc fe66 	bl	800249c <HAL_GetTick>
 80057d0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057d4:	e00d      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d6:	f7fc fe61 	bl	800249c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057e0:	1ad2      	subs	r2, r2, r3
 80057e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d903      	bls.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 80057f0:	e005      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057f2:	4b11      	ldr	r3, [pc, #68]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0eb      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80057fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005802:	2b00      	cmp	r3, #0
 8005804:	d130      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005806:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800580a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800580e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005816:	d115      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005818:	4b07      	ldr	r3, [pc, #28]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005820:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005824:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005828:	091a      	lsrs	r2, r3, #4
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800582c:	4013      	ands	r3, r2
 800582e:	4a02      	ldr	r2, [pc, #8]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005830:	430b      	orrs	r3, r1
 8005832:	6113      	str	r3, [r2, #16]
 8005834:	e00c      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
 800583c:	58024800 	.word	0x58024800
 8005840:	00ffffcf 	.word	0x00ffffcf
 8005844:	4bd4      	ldr	r3, [pc, #848]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	4ad3      	ldr	r2, [pc, #844]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800584a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800584e:	6113      	str	r3, [r2, #16]
 8005850:	4bd1      	ldr	r3, [pc, #836]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005852:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005854:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005858:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800585c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005860:	4acd      	ldr	r2, [pc, #820]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005862:	430b      	orrs	r3, r1
 8005864:	6713      	str	r3, [r2, #112]	; 0x70
 8005866:	e008      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005868:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800586c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005870:	e003      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005872:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005876:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800587a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	f002 0301 	and.w	r3, r2, #1
 8005886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800588a:	2300      	movs	r3, #0
 800588c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005894:	460b      	mov	r3, r1
 8005896:	4313      	orrs	r3, r2
 8005898:	f000 808b 	beq.w	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800589c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a4:	2b28      	cmp	r3, #40	; 0x28
 80058a6:	d86b      	bhi.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	08005989 	.word	0x08005989
 80058b4:	08005981 	.word	0x08005981
 80058b8:	08005981 	.word	0x08005981
 80058bc:	08005981 	.word	0x08005981
 80058c0:	08005981 	.word	0x08005981
 80058c4:	08005981 	.word	0x08005981
 80058c8:	08005981 	.word	0x08005981
 80058cc:	08005981 	.word	0x08005981
 80058d0:	08005955 	.word	0x08005955
 80058d4:	08005981 	.word	0x08005981
 80058d8:	08005981 	.word	0x08005981
 80058dc:	08005981 	.word	0x08005981
 80058e0:	08005981 	.word	0x08005981
 80058e4:	08005981 	.word	0x08005981
 80058e8:	08005981 	.word	0x08005981
 80058ec:	08005981 	.word	0x08005981
 80058f0:	0800596b 	.word	0x0800596b
 80058f4:	08005981 	.word	0x08005981
 80058f8:	08005981 	.word	0x08005981
 80058fc:	08005981 	.word	0x08005981
 8005900:	08005981 	.word	0x08005981
 8005904:	08005981 	.word	0x08005981
 8005908:	08005981 	.word	0x08005981
 800590c:	08005981 	.word	0x08005981
 8005910:	08005989 	.word	0x08005989
 8005914:	08005981 	.word	0x08005981
 8005918:	08005981 	.word	0x08005981
 800591c:	08005981 	.word	0x08005981
 8005920:	08005981 	.word	0x08005981
 8005924:	08005981 	.word	0x08005981
 8005928:	08005981 	.word	0x08005981
 800592c:	08005981 	.word	0x08005981
 8005930:	08005989 	.word	0x08005989
 8005934:	08005981 	.word	0x08005981
 8005938:	08005981 	.word	0x08005981
 800593c:	08005981 	.word	0x08005981
 8005940:	08005981 	.word	0x08005981
 8005944:	08005981 	.word	0x08005981
 8005948:	08005981 	.word	0x08005981
 800594c:	08005981 	.word	0x08005981
 8005950:	08005989 	.word	0x08005989
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005954:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005958:	3308      	adds	r3, #8
 800595a:	2101      	movs	r1, #1
 800595c:	4618      	mov	r0, r3
 800595e:	f001 fe97 	bl	8007690 <RCCEx_PLL2_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005968:	e00f      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800596a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800596e:	3328      	adds	r3, #40	; 0x28
 8005970:	2101      	movs	r1, #1
 8005972:	4618      	mov	r0, r3
 8005974:	f001 ff3e 	bl	80077f4 <RCCEx_PLL3_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800597e:	e004      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005986:	e000      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10b      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005992:	4b81      	ldr	r3, [pc, #516]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800599a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800599e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a2:	4a7d      	ldr	r2, [pc, #500]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6553      	str	r3, [r2, #84]	; 0x54
 80059a8:	e003      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059ae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f002 0302 	and.w	r3, r2, #2
 80059be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059c8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d042      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80059d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d8:	2b05      	cmp	r3, #5
 80059da:	d825      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80059dc:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e2:	bf00      	nop
 80059e4:	08005a31 	.word	0x08005a31
 80059e8:	080059fd 	.word	0x080059fd
 80059ec:	08005a13 	.word	0x08005a13
 80059f0:	08005a31 	.word	0x08005a31
 80059f4:	08005a31 	.word	0x08005a31
 80059f8:	08005a31 	.word	0x08005a31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a00:	3308      	adds	r3, #8
 8005a02:	2101      	movs	r1, #1
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 fe43 	bl	8007690 <RCCEx_PLL2_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a10:	e00f      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a16:	3328      	adds	r3, #40	; 0x28
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 feea 	bl	80077f4 <RCCEx_PLL3_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a26:	e004      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005a2e:	e000      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a3a:	4b57      	ldr	r3, [pc, #348]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f023 0107 	bic.w	r1, r3, #7
 8005a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a48:	4a53      	ldr	r2, [pc, #332]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6553      	str	r3, [r2, #84]	; 0x54
 8005a4e:	e003      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a54:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f002 0304 	and.w	r3, r2, #4
 8005a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4313      	orrs	r3, r2
 8005a76:	d044      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a80:	2b05      	cmp	r3, #5
 8005a82:	d825      	bhi.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005a84:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005ad9 	.word	0x08005ad9
 8005a90:	08005aa5 	.word	0x08005aa5
 8005a94:	08005abb 	.word	0x08005abb
 8005a98:	08005ad9 	.word	0x08005ad9
 8005a9c:	08005ad9 	.word	0x08005ad9
 8005aa0:	08005ad9 	.word	0x08005ad9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	2101      	movs	r1, #1
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fdef 	bl	8007690 <RCCEx_PLL2_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ab8:	e00f      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005abe:	3328      	adds	r3, #40	; 0x28
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 fe96 	bl	80077f4 <RCCEx_PLL3_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ace:	e004      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005ad6:	e000      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ada:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	f023 0107 	bic.w	r1, r3, #7
 8005aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005af2:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6593      	str	r3, [r2, #88]	; 0x58
 8005af8:	e003      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005afe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f002 0320 	and.w	r3, r2, #32
 8005b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b12:	2300      	movs	r3, #0
 8005b14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	d057      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b2e:	d035      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b34:	d82c      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3a:	d031      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b40:	d826      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b46:	d02d      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005b48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b4c:	d820      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b52:	d012      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b58:	d81a      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d024      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b62:	d115      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b68:	3308      	adds	r3, #8
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 fd8f 	bl	8007690 <RCCEx_PLL2_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b78:	e017      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b7e:	3328      	adds	r3, #40	; 0x28
 8005b80:	2102      	movs	r1, #2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 fe36 	bl	80077f4 <RCCEx_PLL3_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b8e:	e00c      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005b96:	e008      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005b98:	58024400 	.word	0x58024400
        break;
 8005b9c:	bf00      	nop
 8005b9e:	e004      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ba0:	bf00      	nop
 8005ba2:	e002      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ba4:	bf00      	nop
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005baa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bb2:	4bc2      	ldr	r3, [pc, #776]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc2:	4abe      	ldr	r2, [pc, #760]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6553      	str	r3, [r2, #84]	; 0x54
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005bce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005be2:	2300      	movs	r3, #0
 8005be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005be8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	d055      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005bf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005bfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bfe:	d033      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005c00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c04:	d82c      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	d02f      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c10:	d826      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005c12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c16:	d02b      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c1c:	d820      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c22:	d012      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c28:	d81a      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d022      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c32:	d115      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c38:	3308      	adds	r3, #8
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f001 fd27 	bl	8007690 <RCCEx_PLL2_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c48:	e015      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c4e:	3328      	adds	r3, #40	; 0x28
 8005c50:	2102      	movs	r1, #2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 fdce 	bl	80077f4 <RCCEx_PLL3_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005c66:	e006      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005c68:	bf00      	nop
 8005c6a:	e004      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005c6c:	bf00      	nop
 8005c6e:	e002      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005c70:	bf00      	nop
 8005c72:	e000      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c76:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c7e:	4b8f      	ldr	r3, [pc, #572]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c8e:	4a8b      	ldr	r2, [pc, #556]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6593      	str	r3, [r2, #88]	; 0x58
 8005c94:	e003      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c96:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c9a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005caa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cb4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	d055      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cca:	d033      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005ccc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cd0:	d82c      	bhi.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd6:	d02f      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cdc:	d826      	bhi.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005cde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ce2:	d02b      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005ce4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ce8:	d820      	bhi.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005cea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cee:	d012      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf4:	d81a      	bhi.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d022      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfe:	d115      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d04:	3308      	adds	r3, #8
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fcc1 	bl	8007690 <RCCEx_PLL2_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d14:	e015      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d1a:	3328      	adds	r3, #40	; 0x28
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 fd68 	bl	80077f4 <RCCEx_PLL3_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005d32:	e006      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005d34:	bf00      	nop
 8005d36:	e004      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005d38:	bf00      	nop
 8005d3a:	e002      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d42:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10b      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d4a:	4b5c      	ldr	r3, [pc, #368]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d5a:	4a58      	ldr	r2, [pc, #352]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8005d60:	e003      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d62:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	f002 0308 	and.w	r3, r2, #8
 8005d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d80:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005d84:	460b      	mov	r3, r1
 8005d86:	4313      	orrs	r3, r2
 8005d88:	d01e      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	d10c      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d9c:	3328      	adds	r3, #40	; 0x28
 8005d9e:	2102      	movs	r1, #2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 fd27 	bl	80077f4 <RCCEx_PLL3_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005db2:	4b42      	ldr	r3, [pc, #264]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc2:	4a3e      	ldr	r2, [pc, #248]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f002 0310 	and.w	r3, r2, #16
 8005dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005dde:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005de2:	460b      	mov	r3, r1
 8005de4:	4313      	orrs	r3, r2
 8005de6:	d01e      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dfa:	3328      	adds	r3, #40	; 0x28
 8005dfc:	2102      	movs	r1, #2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 fcf8 	bl	80077f4 <RCCEx_PLL3_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e10:	4b2a      	ldr	r3, [pc, #168]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e14:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e20:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e22:	430b      	orrs	r3, r1
 8005e24:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005e32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e36:	2300      	movs	r3, #0
 8005e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e3c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005e40:	460b      	mov	r3, r1
 8005e42:	4313      	orrs	r3, r2
 8005e44:	d040      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e52:	d022      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e58:	d81b      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e62:	d00b      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005e64:	e015      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fc0e 	bl	8007690 <RCCEx_PLL2_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e7a:	e00f      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e80:	3328      	adds	r3, #40	; 0x28
 8005e82:	2102      	movs	r1, #2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 fcb5 	bl	80077f4 <RCCEx_PLL3_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e90:	e004      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005e98:	e000      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10d      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005eac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005eb4:	4a01      	ldr	r2, [pc, #4]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8005eba:	e005      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005ebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ec4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005eda:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	d03b      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ef0:	d01f      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ef6:	d818      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005efc:	d003      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f02:	d007      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005f04:	e011      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f06:	4b64      	ldr	r3, [pc, #400]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	4a63      	ldr	r2, [pc, #396]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f12:	e00f      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f18:	3328      	adds	r3, #40	; 0x28
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 fc69 	bl	80077f4 <RCCEx_PLL3_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f28:	e004      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005f30:	e000      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f3c:	4b56      	ldr	r3, [pc, #344]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f40:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f4c:	4a52      	ldr	r2, [pc, #328]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	6553      	str	r3, [r2, #84]	; 0x54
 8005f52:	e003      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f58:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005f68:	673b      	str	r3, [r7, #112]	; 0x70
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	677b      	str	r3, [r7, #116]	; 0x74
 8005f6e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005f72:	460b      	mov	r3, r1
 8005f74:	4313      	orrs	r3, r2
 8005f76:	d031      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f86:	d007      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005f88:	e011      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f8a:	4b43      	ldr	r3, [pc, #268]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	4a42      	ldr	r2, [pc, #264]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f96:	e00e      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f001 fb75 	bl	8007690 <RCCEx_PLL2_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005fac:	e003      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005fbe:	4b36      	ldr	r3, [pc, #216]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fcc:	4a32      	ldr	r2, [pc, #200]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fd2:	e003      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fd8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fea:	2300      	movs	r3, #0
 8005fec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d00c      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ffc:	3328      	adds	r3, #40	; 0x28
 8005ffe:	2102      	movs	r1, #2
 8006000:	4618      	mov	r0, r3
 8006002:	f001 fbf7 	bl	80077f4 <RCCEx_PLL3_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006012:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800601e:	663b      	str	r3, [r7, #96]	; 0x60
 8006020:	2300      	movs	r3, #0
 8006022:	667b      	str	r3, [r7, #100]	; 0x64
 8006024:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006028:	460b      	mov	r3, r1
 800602a:	4313      	orrs	r3, r2
 800602c:	d03a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800602e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603a:	d018      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800603c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006040:	d811      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006046:	d014      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604c:	d80b      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d011      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d106      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006058:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	4a0e      	ldr	r2, [pc, #56]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800605e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006064:	e008      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800606c:	e004      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800606e:	bf00      	nop
 8006070:	e002      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006072:	bf00      	nop
 8006074:	e000      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006078:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10d      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006080:	4b05      	ldr	r3, [pc, #20]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006084:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006088:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800608c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006090:	4a01      	ldr	r2, [pc, #4]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006092:	430b      	orrs	r3, r1
 8006094:	6553      	str	r3, [r2, #84]	; 0x54
 8006096:	e005      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006098:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80060b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80060b2:	2300      	movs	r3, #0
 80060b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060c0:	4baa      	ldr	r3, [pc, #680]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ce:	4aa7      	ldr	r2, [pc, #668]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80060d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80060e0:	653b      	str	r3, [r7, #80]	; 0x50
 80060e2:	2300      	movs	r3, #0
 80060e4:	657b      	str	r3, [r7, #84]	; 0x54
 80060e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80060ea:	460b      	mov	r3, r1
 80060ec:	4313      	orrs	r3, r2
 80060ee:	d00a      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80060f0:	4b9e      	ldr	r3, [pc, #632]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80060f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006100:	4a9a      	ldr	r2, [pc, #616]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006102:	430b      	orrs	r3, r1
 8006104:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006106:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006112:	64bb      	str	r3, [r7, #72]	; 0x48
 8006114:	2300      	movs	r3, #0
 8006116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006118:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800611c:	460b      	mov	r3, r1
 800611e:	4313      	orrs	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006122:	4b92      	ldr	r3, [pc, #584]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006126:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800612a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006130:	4a8e      	ldr	r2, [pc, #568]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006132:	430b      	orrs	r3, r1
 8006134:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006136:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006142:	643b      	str	r3, [r7, #64]	; 0x40
 8006144:	2300      	movs	r3, #0
 8006146:	647b      	str	r3, [r7, #68]	; 0x44
 8006148:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800614c:	460b      	mov	r3, r1
 800614e:	4313      	orrs	r3, r2
 8006150:	d00e      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006152:	4b86      	ldr	r3, [pc, #536]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	4a85      	ldr	r2, [pc, #532]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006158:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800615c:	6113      	str	r3, [r2, #16]
 800615e:	4b83      	ldr	r3, [pc, #524]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006160:	6919      	ldr	r1, [r3, #16]
 8006162:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006166:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800616a:	4a80      	ldr	r2, [pc, #512]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800616c:	430b      	orrs	r3, r1
 800616e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006170:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800617c:	63bb      	str	r3, [r7, #56]	; 0x38
 800617e:	2300      	movs	r3, #0
 8006180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006182:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006186:	460b      	mov	r3, r1
 8006188:	4313      	orrs	r3, r2
 800618a:	d009      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800618c:	4b77      	ldr	r3, [pc, #476]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800618e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006190:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006194:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619a:	4a74      	ldr	r2, [pc, #464]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800619c:	430b      	orrs	r3, r1
 800619e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80061ac:	633b      	str	r3, [r7, #48]	; 0x30
 80061ae:	2300      	movs	r3, #0
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80061b6:	460b      	mov	r3, r1
 80061b8:	4313      	orrs	r3, r2
 80061ba:	d00a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061bc:	4b6b      	ldr	r3, [pc, #428]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80061c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	4a67      	ldr	r2, [pc, #412]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061ce:	430b      	orrs	r3, r1
 80061d0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80061d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	2100      	movs	r1, #0
 80061dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80061e8:	460b      	mov	r3, r1
 80061ea:	4313      	orrs	r3, r2
 80061ec:	d011      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061f2:	3308      	adds	r3, #8
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 fa4a 	bl	8007690 <RCCEx_PLL2_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006202:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800620e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006212:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	2100      	movs	r1, #0
 800621c:	6239      	str	r1, [r7, #32]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
 8006224:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006228:	460b      	mov	r3, r1
 800622a:	4313      	orrs	r3, r2
 800622c:	d011      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800622e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006232:	3308      	adds	r3, #8
 8006234:	2101      	movs	r1, #1
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fa2a 	bl	8007690 <RCCEx_PLL2_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006242:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800624e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006252:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	2100      	movs	r1, #0
 800625c:	61b9      	str	r1, [r7, #24]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006268:	460b      	mov	r3, r1
 800626a:	4313      	orrs	r3, r2
 800626c:	d011      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800626e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006272:	3308      	adds	r3, #8
 8006274:	2102      	movs	r1, #2
 8006276:	4618      	mov	r0, r3
 8006278:	f001 fa0a 	bl	8007690 <RCCEx_PLL2_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006282:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800628e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	2100      	movs	r1, #0
 800629c:	6139      	str	r1, [r7, #16]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062a8:	460b      	mov	r3, r1
 80062aa:	4313      	orrs	r3, r2
 80062ac:	d011      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062b2:	3328      	adds	r3, #40	; 0x28
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fa9c 	bl	80077f4 <RCCEx_PLL3_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80062c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80062d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	2100      	movs	r1, #0
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062e8:	460b      	mov	r3, r1
 80062ea:	4313      	orrs	r3, r2
 80062ec:	d011      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062f2:	3328      	adds	r3, #40	; 0x28
 80062f4:	2101      	movs	r1, #1
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 fa7c 	bl	80077f4 <RCCEx_PLL3_Config>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006302:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800630e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006312:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	2100      	movs	r1, #0
 800631c:	6039      	str	r1, [r7, #0]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006328:	460b      	mov	r3, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	d011      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800632e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006332:	3328      	adds	r3, #40	; 0x28
 8006334:	2102      	movs	r1, #2
 8006336:	4618      	mov	r0, r3
 8006338:	f001 fa5c 	bl	80077f4 <RCCEx_PLL3_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006342:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800634e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8006352:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
}
 8006360:	4618      	mov	r0, r3
 8006362:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006366:	46bd      	mov	sp, r7
 8006368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800636c:	58024400 	.word	0x58024400

08006370 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b090      	sub	sp, #64	; 0x40
 8006374:	af00      	add	r7, sp, #0
 8006376:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800637a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800637e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006382:	430b      	orrs	r3, r1
 8006384:	f040 8094 	bne.w	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006388:	4b9e      	ldr	r3, [pc, #632]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	2b04      	cmp	r3, #4
 8006396:	f200 8087 	bhi.w	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800639a:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	080063b5 	.word	0x080063b5
 80063a4:	080063dd 	.word	0x080063dd
 80063a8:	08006405 	.word	0x08006405
 80063ac:	080064a1 	.word	0x080064a1
 80063b0:	0800642d 	.word	0x0800642d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063b4:	4b93      	ldr	r3, [pc, #588]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063c0:	d108      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f810 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063d0:	f000 bd45 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d8:	f000 bd41 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063dc:	4b89      	ldr	r3, [pc, #548]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063e8:	d108      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ea:	f107 0318 	add.w	r3, r7, #24
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fd54 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063f8:	f000 bd31 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006400:	f000 bd2d 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006404:	4b7f      	ldr	r3, [pc, #508]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800640c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006410:	d108      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006412:	f107 030c 	add.w	r3, r7, #12
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fe94 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006420:	f000 bd1d 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006428:	f000 bd19 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800642c:	4b75      	ldr	r3, [pc, #468]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800642e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006430:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006434:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006436:	4b73      	ldr	r3, [pc, #460]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b04      	cmp	r3, #4
 8006440:	d10c      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006448:	4b6e      	ldr	r3, [pc, #440]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	08db      	lsrs	r3, r3, #3
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	4a6d      	ldr	r2, [pc, #436]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645a:	e01f      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800645c:	4b69      	ldr	r3, [pc, #420]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006468:	d106      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006470:	d102      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006472:	4b66      	ldr	r3, [pc, #408]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006476:	e011      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006478:	4b62      	ldr	r3, [pc, #392]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006484:	d106      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800648c:	d102      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800648e:	4b60      	ldr	r3, [pc, #384]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006492:	e003      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006498:	f000 bce1 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800649c:	f000 bcdf 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80064a0:	4b5c      	ldr	r3, [pc, #368]	; (8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80064a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064a4:	f000 bcdb 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064ac:	f000 bcd7 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80064b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80064b8:	430b      	orrs	r3, r1
 80064ba:	f040 80ad 	bne.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80064be:	4b51      	ldr	r3, [pc, #324]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80064c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ce:	d056      	beq.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d6:	f200 8090 	bhi.w	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	2bc0      	cmp	r3, #192	; 0xc0
 80064de:	f000 8088 	beq.w	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	2bc0      	cmp	r3, #192	; 0xc0
 80064e6:	f200 8088 	bhi.w	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d032      	beq.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	f200 8081 	bhi.w	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d014      	beq.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006504:	e079      	b.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006506:	4b3f      	ldr	r3, [pc, #252]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006512:	d108      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006518:	4618      	mov	r0, r3
 800651a:	f000 ff67 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006522:	f000 bc9c 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800652a:	f000 bc98 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800652e:	4b35      	ldr	r3, [pc, #212]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800653a:	d108      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800653c:	f107 0318 	add.w	r3, r7, #24
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fcab 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800654a:	f000 bc88 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006552:	f000 bc84 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006556:	4b2b      	ldr	r3, [pc, #172]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800655e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006562:	d108      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006564:	f107 030c 	add.w	r3, r7, #12
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fdeb 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006572:	f000 bc74 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800657a:	f000 bc70 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006586:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006588:	4b1e      	ldr	r3, [pc, #120]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d10c      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800659a:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	08db      	lsrs	r3, r3, #3
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065a6:	fa22 f303 	lsr.w	r3, r2, r3
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ac:	e01f      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065ae:	4b15      	ldr	r3, [pc, #84]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ba:	d106      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80065bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065c2:	d102      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c8:	e011      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065ca:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065d6:	d106      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80065d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065de:	d102      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065e4:	e003      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80065ea:	f000 bc38 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065ee:	f000 bc36 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065f2:	4b08      	ldr	r3, [pc, #32]	; (8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f6:	f000 bc32 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065fe:	f000 bc2e 	b.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006602:	bf00      	nop
 8006604:	58024400 	.word	0x58024400
 8006608:	03d09000 	.word	0x03d09000
 800660c:	003d0900 	.word	0x003d0900
 8006610:	017d7840 	.word	0x017d7840
 8006614:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006620:	430b      	orrs	r3, r1
 8006622:	f040 809c 	bne.w	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006626:	4b9e      	ldr	r3, [pc, #632]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800662e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006636:	d054      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800663e:	f200 808b 	bhi.w	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006648:	f000 8083 	beq.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006652:	f200 8081 	bhi.w	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800665c:	d02f      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006664:	d878      	bhi.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006672:	d012      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006674:	e070      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006676:	4b8a      	ldr	r3, [pc, #552]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006682:	d107      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006688:	4618      	mov	r0, r3
 800668a:	f000 feaf 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006692:	e3e4      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006698:	e3e1      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800669a:	4b81      	ldr	r3, [pc, #516]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066a6:	d107      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066a8:	f107 0318 	add.w	r3, r7, #24
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fbf5 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066b6:	e3d2      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066bc:	e3cf      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066be:	4b78      	ldr	r3, [pc, #480]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ca:	d107      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066cc:	f107 030c 	add.w	r3, r7, #12
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fd37 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066da:	e3c0      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066e0:	e3bd      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066e2:	4b6f      	ldr	r3, [pc, #444]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066ec:	4b6c      	ldr	r3, [pc, #432]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d10c      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80066f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d109      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066fe:	4b68      	ldr	r3, [pc, #416]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	08db      	lsrs	r3, r3, #3
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	4a66      	ldr	r2, [pc, #408]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800670a:	fa22 f303 	lsr.w	r3, r2, r3
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006710:	e01e      	b.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006712:	4b63      	ldr	r3, [pc, #396]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671e:	d106      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006726:	d102      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006728:	4b5f      	ldr	r3, [pc, #380]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672c:	e010      	b.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800672e:	4b5c      	ldr	r3, [pc, #368]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800673a:	d106      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006742:	d102      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006744:	4b59      	ldr	r3, [pc, #356]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006748:	e002      	b.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800674e:	e386      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006750:	e385      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006752:	4b57      	ldr	r3, [pc, #348]	; (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006756:	e382      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800675c:	e37f      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800675e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006762:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006766:	430b      	orrs	r3, r1
 8006768:	f040 80a7 	bne.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800676c:	4b4c      	ldr	r3, [pc, #304]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800676e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006770:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006774:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800677c:	d055      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006784:	f200 8096 	bhi.w	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800678e:	f000 8084 	beq.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006798:	f200 808c 	bhi.w	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067a2:	d030      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067aa:	f200 8083 	bhi.w	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d004      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ba:	d012      	beq.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80067bc:	e07a      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067be:	4b38      	ldr	r3, [pc, #224]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ca:	d107      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fe0b 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067da:	e340      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e0:	e33d      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067e2:	4b2f      	ldr	r3, [pc, #188]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ee:	d107      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067f0:	f107 0318 	add.w	r3, r7, #24
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fb51 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067fe:	e32e      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006804:	e32b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006806:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800680e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006812:	d107      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006814:	f107 030c 	add.w	r3, r7, #12
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fc93 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006822:	e31c      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006828:	e319      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800682a:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800682c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006832:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006834:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b04      	cmp	r3, #4
 800683e:	d10c      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006846:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	08db      	lsrs	r3, r3, #3
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006852:	fa22 f303 	lsr.w	r3, r2, r3
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006858:	e01e      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006866:	d106      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686e:	d102      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006874:	e010      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006876:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006882:	d106      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688a:	d102      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800688c:	4b07      	ldr	r3, [pc, #28]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006890:	e002      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006896:	e2e2      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006898:	e2e1      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800689e:	e2de      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068a0:	58024400 	.word	0x58024400
 80068a4:	03d09000 	.word	0x03d09000
 80068a8:	003d0900 	.word	0x003d0900
 80068ac:	017d7840 	.word	0x017d7840
 80068b0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b8:	e2d1      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80068ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068be:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80068c2:	430b      	orrs	r3, r1
 80068c4:	f040 809c 	bne.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80068c8:	4b93      	ldr	r3, [pc, #588]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068cc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80068d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068d8:	d054      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068e0:	f200 808b 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068ea:	f000 8083 	beq.w	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068f4:	f200 8081 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068fe:	d02f      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006906:	d878      	bhi.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006914:	d012      	beq.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006916:	e070      	b.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006918:	4b7f      	ldr	r3, [pc, #508]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006924:	d107      	bne.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fd5e 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006934:	e293      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800693a:	e290      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800693c:	4b76      	ldr	r3, [pc, #472]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006948:	d107      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800694a:	f107 0318 	add.w	r3, r7, #24
 800694e:	4618      	mov	r0, r3
 8006950:	f000 faa4 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006958:	e281      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800695e:	e27e      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006960:	4b6d      	ldr	r3, [pc, #436]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800696c:	d107      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800696e:	f107 030c 	add.w	r3, r7, #12
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fbe6 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800697c:	e26f      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006982:	e26c      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006984:	4b64      	ldr	r3, [pc, #400]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800698c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800698e:	4b62      	ldr	r3, [pc, #392]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d10c      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d109      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a0:	4b5d      	ldr	r3, [pc, #372]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	08db      	lsrs	r3, r3, #3
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	4a5c      	ldr	r2, [pc, #368]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b2:	e01e      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069b4:	4b58      	ldr	r3, [pc, #352]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c0:	d106      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80069c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069c8:	d102      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069ca:	4b55      	ldr	r3, [pc, #340]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ce:	e010      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069d0:	4b51      	ldr	r3, [pc, #324]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069dc:	d106      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e4:	d102      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069e6:	4b4f      	ldr	r3, [pc, #316]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ea:	e002      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069f0:	e235      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069f2:	e234      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069f4:	4b4c      	ldr	r3, [pc, #304]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f8:	e231      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fe:	e22e      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a04:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	f040 808f 	bne.w	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006a0e:	4b42      	ldr	r3, [pc, #264]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a12:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006a16:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a1e:	d06b      	beq.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a26:	d874      	bhi.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a2e:	d056      	beq.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a36:	d86c      	bhi.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a3e:	d03b      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a46:	d864      	bhi.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a4e:	d021      	beq.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a56:	d85c      	bhi.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a64:	d004      	beq.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006a66:	e054      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006a68:	f7fe fa0c 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8006a6c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a6e:	e1f6      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a70:	4b29      	ldr	r3, [pc, #164]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a7c:	d107      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a7e:	f107 0318 	add.w	r3, r7, #24
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fa0a 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a8c:	e1e7      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a92:	e1e4      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a94:	4b20      	ldr	r3, [pc, #128]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa0:	d107      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aa2:	f107 030c 	add.w	r3, r7, #12
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fb4c 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ab0:	e1d5      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab6:	e1d2      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ab8:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d109      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ac4:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	08db      	lsrs	r3, r3, #3
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad6:	e1c2      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006adc:	e1bf      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ade:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	d102      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006aec:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af0:	e1b5      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af6:	e1b2      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b04:	d102      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b0a:	e1a8      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b10:	e1a5      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b16:	e1a2      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	03d09000 	.word	0x03d09000
 8006b20:	003d0900 	.word	0x003d0900
 8006b24:	017d7840 	.word	0x017d7840
 8006b28:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b30:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006b34:	430b      	orrs	r3, r1
 8006b36:	d173      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006b38:	4b9c      	ldr	r3, [pc, #624]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b40:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b48:	d02f      	beq.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b50:	d863      	bhi.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d004      	beq.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5e:	d012      	beq.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006b60:	e05b      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b62:	4b92      	ldr	r3, [pc, #584]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b6e:	d107      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b70:	f107 0318 	add.w	r3, r7, #24
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 f991 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b7e:	e16e      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b84:	e16b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b86:	4b89      	ldr	r3, [pc, #548]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b94:	f107 030c 	add.w	r3, r7, #12
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fad3 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ba2:	e15c      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba8:	e159      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006baa:	4b80      	ldr	r3, [pc, #512]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bb2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bb4:	4b7d      	ldr	r3, [pc, #500]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d10c      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d109      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bc6:	4b79      	ldr	r3, [pc, #484]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	4a77      	ldr	r2, [pc, #476]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd8:	e01e      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bda:	4b74      	ldr	r3, [pc, #464]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be6:	d106      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bee:	d102      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bf0:	4b70      	ldr	r3, [pc, #448]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf4:	e010      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bf6:	4b6d      	ldr	r3, [pc, #436]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c02:	d106      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c0a:	d102      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c0c:	4b6a      	ldr	r3, [pc, #424]	; (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c10:	e002      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c16:	e122      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c18:	e121      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c1e:	e11e      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c24:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	d133      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006c2c:	4b5f      	ldr	r3, [pc, #380]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c42:	d012      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006c44:	e023      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c46:	4b59      	ldr	r3, [pc, #356]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c52:	d107      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fbc7 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c62:	e0fc      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c68:	e0f9      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c6a:	4b50      	ldr	r3, [pc, #320]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c76:	d107      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c78:	f107 0318 	add.w	r3, r7, #24
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 f90d 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c86:	e0ea      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c8c:	e0e7      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c92:	e0e4      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c98:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	f040 808d 	bne.w	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006ca2:	4b42      	ldr	r3, [pc, #264]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb2:	d06b      	beq.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cba:	d874      	bhi.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc2:	d056      	beq.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cca:	d86c      	bhi.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cd2:	d03b      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cda:	d864      	bhi.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce2:	d021      	beq.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cea:	d85c      	bhi.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf8:	d004      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006cfa:	e054      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006cfc:	f000 f8b8 	bl	8006e70 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d00:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d02:	e0ac      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d04:	4b29      	ldr	r3, [pc, #164]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d10:	d107      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d12:	f107 0318 	add.w	r3, r7, #24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 f8c0 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d20:	e09d      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d26:	e09a      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d28:	4b20      	ldr	r3, [pc, #128]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d34:	d107      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fa02 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d44:	e08b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d4a:	e088      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d4c:	4b17      	ldr	r3, [pc, #92]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d109      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d58:	4b14      	ldr	r3, [pc, #80]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	08db      	lsrs	r3, r3, #3
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	4a13      	ldr	r2, [pc, #76]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d6a:	e078      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d70:	e075      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d72:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7e:	d102      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006d80:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d84:	e06b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d8a:	e068      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d8c:	4b07      	ldr	r3, [pc, #28]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d98:	d102      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006d9a:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d9e:	e05e      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da4:	e05b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006daa:	e058      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006dac:	58024400 	.word	0x58024400
 8006db0:	03d09000 	.word	0x03d09000
 8006db4:	003d0900 	.word	0x003d0900
 8006db8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	d148      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006dc8:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dd0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd8:	d02a      	beq.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de0:	d838      	bhi.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d004      	beq.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dee:	d00d      	beq.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006df0:	e030      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006df2:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dfe:	d102      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006e00:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e04:	e02b      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e0a:	e028      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e0c:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e18:	d107      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fae4 	bl	80073ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e28:	e019      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e2e:	e016      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e3c:	d107      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e3e:	f107 0318 	add.w	r3, r7, #24
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f82a 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e4c:	e007      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e52:	e004      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e58:	e001      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3740      	adds	r7, #64	; 0x40
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	58024400 	.word	0x58024400
 8006e6c:	017d7840 	.word	0x017d7840

08006e70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e74:	f7fd ffd6 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	091b      	lsrs	r3, r3, #4
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	4904      	ldr	r1, [pc, #16]	; (8006e98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e86:	5ccb      	ldrb	r3, [r1, r3]
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	58024400 	.word	0x58024400
 8006e98:	0800df44 	.word	0x0800df44

08006e9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b089      	sub	sp, #36	; 0x24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ea4:	4ba1      	ldr	r3, [pc, #644]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f003 0303 	and.w	r3, r3, #3
 8006eac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006eae:	4b9f      	ldr	r3, [pc, #636]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	0b1b      	lsrs	r3, r3, #12
 8006eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006eba:	4b9c      	ldr	r3, [pc, #624]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	091b      	lsrs	r3, r3, #4
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006ec6:	4b99      	ldr	r3, [pc, #612]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	08db      	lsrs	r3, r3, #3
 8006ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ede:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8111 	beq.w	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	f000 8083 	beq.w	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	f200 80a1 	bhi.w	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d056      	beq.n	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f06:	e099      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f08:	4b88      	ldr	r3, [pc, #544]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d02d      	beq.n	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f14:	4b85      	ldr	r3, [pc, #532]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	08db      	lsrs	r3, r3, #3
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	4a84      	ldr	r2, [pc, #528]	; (8007130 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	ee07 3a90 	vmov	s15, r3
 8006f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b7b      	ldr	r3, [pc, #492]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f6e:	e087      	b.n	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007138 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b6a      	ldr	r3, [pc, #424]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb2:	e065      	b.n	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800713c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b59      	ldr	r3, [pc, #356]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff6:	e043      	b.n	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b48      	ldr	r3, [pc, #288]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800703a:	e021      	b.n	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800713c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800704a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704e:	4b37      	ldr	r3, [pc, #220]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007062:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800707e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007080:	4b2a      	ldr	r3, [pc, #168]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	0a5b      	lsrs	r3, r3, #9
 8007086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800709a:	edd7 6a07 	vldr	s13, [r7, #28]
 800709e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a6:	ee17 2a90 	vmov	r2, s15
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80070ae:	4b1f      	ldr	r3, [pc, #124]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	0c1b      	lsrs	r3, r3, #16
 80070b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b8:	ee07 3a90 	vmov	s15, r3
 80070bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80070cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070d4:	ee17 2a90 	vmov	r2, s15
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80070dc:	4b13      	ldr	r3, [pc, #76]	; (800712c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	0e1b      	lsrs	r3, r3, #24
 80070e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007102:	ee17 2a90 	vmov	r2, s15
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800710a:	e008      	b.n	800711e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	609a      	str	r2, [r3, #8]
}
 800711e:	bf00      	nop
 8007120:	3724      	adds	r7, #36	; 0x24
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	58024400 	.word	0x58024400
 8007130:	03d09000 	.word	0x03d09000
 8007134:	46000000 	.word	0x46000000
 8007138:	4c742400 	.word	0x4c742400
 800713c:	4a742400 	.word	0x4a742400
 8007140:	4bbebc20 	.word	0x4bbebc20

08007144 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007144:	b480      	push	{r7}
 8007146:	b089      	sub	sp, #36	; 0x24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800714c:	4ba1      	ldr	r3, [pc, #644]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007156:	4b9f      	ldr	r3, [pc, #636]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	0d1b      	lsrs	r3, r3, #20
 800715c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007160:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007162:	4b9c      	ldr	r3, [pc, #624]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	0a1b      	lsrs	r3, r3, #8
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800716e:	4b99      	ldr	r3, [pc, #612]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	08db      	lsrs	r3, r3, #3
 8007174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8111 	beq.w	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b02      	cmp	r3, #2
 8007196:	f000 8083 	beq.w	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b02      	cmp	r3, #2
 800719e:	f200 80a1 	bhi.w	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d056      	beq.n	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80071ae:	e099      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071b0:	4b88      	ldr	r3, [pc, #544]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d02d      	beq.n	8007218 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071bc:	4b85      	ldr	r3, [pc, #532]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	08db      	lsrs	r3, r3, #3
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	4a84      	ldr	r2, [pc, #528]	; (80073d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b7b      	ldr	r3, [pc, #492]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007216:	e087      	b.n	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b6a      	ldr	r3, [pc, #424]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725a:	e065      	b.n	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b59      	ldr	r3, [pc, #356]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729e:	e043      	b.n	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b48      	ldr	r3, [pc, #288]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e2:	e021      	b.n	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b37      	ldr	r3, [pc, #220]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a03 	vldr	s12, [r7, #12]
 800730a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007326:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007328:	4b2a      	ldr	r3, [pc, #168]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	0a5b      	lsrs	r3, r3, #9
 800732e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800733e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007342:	edd7 6a07 	vldr	s13, [r7, #28]
 8007346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734e:	ee17 2a90 	vmov	r2, s15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007356:	4b1f      	ldr	r3, [pc, #124]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800736c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007370:	edd7 6a07 	vldr	s13, [r7, #28]
 8007374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737c:	ee17 2a90 	vmov	r2, s15
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007384:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	0e1b      	lsrs	r3, r3, #24
 800738a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800739a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800739e:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073aa:	ee17 2a90 	vmov	r2, s15
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073b2:	e008      	b.n	80073c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	609a      	str	r2, [r3, #8]
}
 80073c6:	bf00      	nop
 80073c8:	3724      	adds	r7, #36	; 0x24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	58024400 	.word	0x58024400
 80073d8:	03d09000 	.word	0x03d09000
 80073dc:	46000000 	.word	0x46000000
 80073e0:	4c742400 	.word	0x4c742400
 80073e4:	4a742400 	.word	0x4a742400
 80073e8:	4bbebc20 	.word	0x4bbebc20

080073ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073f4:	4ba0      	ldr	r3, [pc, #640]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80073fe:	4b9e      	ldr	r3, [pc, #632]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	091b      	lsrs	r3, r3, #4
 8007404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007408:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800740a:	4b9b      	ldr	r3, [pc, #620]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007414:	4b98      	ldr	r3, [pc, #608]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007418:	08db      	lsrs	r3, r3, #3
 800741a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	ee07 3a90 	vmov	s15, r3
 8007428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8111 	beq.w	800765a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	2b02      	cmp	r3, #2
 800743c:	f000 8083 	beq.w	8007546 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b02      	cmp	r3, #2
 8007444:	f200 80a1 	bhi.w	800758a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d056      	beq.n	8007502 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007454:	e099      	b.n	800758a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007456:	4b88      	ldr	r3, [pc, #544]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d02d      	beq.n	80074be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007462:	4b85      	ldr	r3, [pc, #532]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	08db      	lsrs	r3, r3, #3
 8007468:	f003 0303 	and.w	r3, r3, #3
 800746c:	4a83      	ldr	r2, [pc, #524]	; (800767c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800746e:	fa22 f303 	lsr.w	r3, r2, r3
 8007472:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748c:	4b7a      	ldr	r3, [pc, #488]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749c:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074bc:	e087      	b.n	80075ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	ee07 3a90 	vmov	s15, r3
 80074c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007684 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80074cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d0:	4b69      	ldr	r3, [pc, #420]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007500:	e065      	b.n	80075ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	ee07 3a90 	vmov	s15, r3
 8007508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007688 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007514:	4b58      	ldr	r3, [pc, #352]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007524:	ed97 6a03 	vldr	s12, [r7, #12]
 8007528:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800752c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007540:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007544:	e043      	b.n	80075ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	ee07 3a90 	vmov	s15, r3
 800754c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007550:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800768c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007558:	4b47      	ldr	r3, [pc, #284]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007568:	ed97 6a03 	vldr	s12, [r7, #12]
 800756c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007584:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007588:	e021      	b.n	80075ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007594:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007684 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759c:	4b36      	ldr	r3, [pc, #216]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a4:	ee07 3a90 	vmov	s15, r3
 80075a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80075ce:	4b2a      	ldr	r3, [pc, #168]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d2:	0a5b      	lsrs	r3, r3, #9
 80075d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f4:	ee17 2a90 	vmov	r2, s15
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80075fc:	4b1e      	ldr	r3, [pc, #120]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007616:	edd7 6a07 	vldr	s13, [r7, #28]
 800761a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007622:	ee17 2a90 	vmov	r2, s15
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	0e1b      	lsrs	r3, r3, #24
 8007630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007640:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007644:	edd7 6a07 	vldr	s13, [r7, #28]
 8007648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007650:	ee17 2a90 	vmov	r2, s15
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007658:	e008      	b.n	800766c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	609a      	str	r2, [r3, #8]
}
 800766c:	bf00      	nop
 800766e:	3724      	adds	r7, #36	; 0x24
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	58024400 	.word	0x58024400
 800767c:	03d09000 	.word	0x03d09000
 8007680:	46000000 	.word	0x46000000
 8007684:	4c742400 	.word	0x4c742400
 8007688:	4a742400 	.word	0x4a742400
 800768c:	4bbebc20 	.word	0x4bbebc20

08007690 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800769e:	4b53      	ldr	r3, [pc, #332]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d101      	bne.n	80076ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e099      	b.n	80077e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076ae:	4b4f      	ldr	r3, [pc, #316]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a4e      	ldr	r2, [pc, #312]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ba:	f7fa feef 	bl	800249c <HAL_GetTick>
 80076be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076c0:	e008      	b.n	80076d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076c2:	f7fa feeb 	bl	800249c <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e086      	b.n	80077e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076d4:	4b45      	ldr	r3, [pc, #276]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f0      	bne.n	80076c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076e0:	4b42      	ldr	r3, [pc, #264]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	031b      	lsls	r3, r3, #12
 80076ee:	493f      	ldr	r1, [pc, #252]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	628b      	str	r3, [r1, #40]	; 0x28
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	3b01      	subs	r3, #1
 8007704:	025b      	lsls	r3, r3, #9
 8007706:	b29b      	uxth	r3, r3
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	3b01      	subs	r3, #1
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	3b01      	subs	r3, #1
 800771e:	061b      	lsls	r3, r3, #24
 8007720:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007724:	4931      	ldr	r1, [pc, #196]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800772a:	4b30      	ldr	r3, [pc, #192]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	492d      	ldr	r1, [pc, #180]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007738:	4313      	orrs	r3, r2
 800773a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800773c:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	f023 0220 	bic.w	r2, r3, #32
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	4928      	ldr	r1, [pc, #160]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800774e:	4b27      	ldr	r3, [pc, #156]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	4a26      	ldr	r2, [pc, #152]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007754:	f023 0310 	bic.w	r3, r3, #16
 8007758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800775a:	4b24      	ldr	r3, [pc, #144]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800775c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775e:	4b24      	ldr	r3, [pc, #144]	; (80077f0 <RCCEx_PLL2_Config+0x160>)
 8007760:	4013      	ands	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	69d2      	ldr	r2, [r2, #28]
 8007766:	00d2      	lsls	r2, r2, #3
 8007768:	4920      	ldr	r1, [pc, #128]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800776a:	4313      	orrs	r3, r2
 800776c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800776e:	4b1f      	ldr	r3, [pc, #124]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	4a1e      	ldr	r2, [pc, #120]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007774:	f043 0310 	orr.w	r3, r3, #16
 8007778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007780:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	4a19      	ldr	r2, [pc, #100]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800778a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800778c:	e00f      	b.n	80077ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d106      	bne.n	80077a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007794:	4b15      	ldr	r3, [pc, #84]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	4a14      	ldr	r2, [pc, #80]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800779a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077a0:	e005      	b.n	80077ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077a2:	4b12      	ldr	r3, [pc, #72]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	4a11      	ldr	r2, [pc, #68]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077ae:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a0e      	ldr	r2, [pc, #56]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ba:	f7fa fe6f 	bl	800249c <HAL_GetTick>
 80077be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077c0:	e008      	b.n	80077d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077c2:	f7fa fe6b 	bl	800249c <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e006      	b.n	80077e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0f0      	beq.n	80077c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	58024400 	.word	0x58024400
 80077f0:	ffff0007 	.word	0xffff0007

080077f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007802:	4b53      	ldr	r3, [pc, #332]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b03      	cmp	r3, #3
 800780c:	d101      	bne.n	8007812 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e099      	b.n	8007946 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007812:	4b4f      	ldr	r3, [pc, #316]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a4e      	ldr	r2, [pc, #312]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800781c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781e:	f7fa fe3d 	bl	800249c <HAL_GetTick>
 8007822:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007824:	e008      	b.n	8007838 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007826:	f7fa fe39 	bl	800249c <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d901      	bls.n	8007838 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e086      	b.n	8007946 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007838:	4b45      	ldr	r3, [pc, #276]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1f0      	bne.n	8007826 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007844:	4b42      	ldr	r3, [pc, #264]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	051b      	lsls	r3, r3, #20
 8007852:	493f      	ldr	r1, [pc, #252]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007854:	4313      	orrs	r3, r2
 8007856:	628b      	str	r3, [r1, #40]	; 0x28
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	3b01      	subs	r3, #1
 800785e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	3b01      	subs	r3, #1
 8007868:	025b      	lsls	r3, r3, #9
 800786a:	b29b      	uxth	r3, r3
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	3b01      	subs	r3, #1
 8007874:	041b      	lsls	r3, r3, #16
 8007876:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	3b01      	subs	r3, #1
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007888:	4931      	ldr	r1, [pc, #196]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800788e:	4b30      	ldr	r3, [pc, #192]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	492d      	ldr	r1, [pc, #180]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800789c:	4313      	orrs	r3, r2
 800789e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078a0:	4b2b      	ldr	r3, [pc, #172]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	4928      	ldr	r1, [pc, #160]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078b2:	4b27      	ldr	r3, [pc, #156]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	4a26      	ldr	r2, [pc, #152]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078be:	4b24      	ldr	r3, [pc, #144]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078c2:	4b24      	ldr	r3, [pc, #144]	; (8007954 <RCCEx_PLL3_Config+0x160>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	69d2      	ldr	r2, [r2, #28]
 80078ca:	00d2      	lsls	r2, r2, #3
 80078cc:	4920      	ldr	r1, [pc, #128]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078d2:	4b1f      	ldr	r3, [pc, #124]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	4a1e      	ldr	r2, [pc, #120]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078e4:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4a19      	ldr	r2, [pc, #100]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078f0:	e00f      	b.n	8007912 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d106      	bne.n	8007906 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	4a14      	ldr	r2, [pc, #80]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007904:	e005      	b.n	8007912 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007906:	4b12      	ldr	r3, [pc, #72]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	4a11      	ldr	r2, [pc, #68]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800790c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007910:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007912:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800791c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791e:	f7fa fdbd 	bl	800249c <HAL_GetTick>
 8007922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007924:	e008      	b.n	8007938 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007926:	f7fa fdb9 	bl	800249c <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d901      	bls.n	8007938 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e006      	b.n	8007946 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0f0      	beq.n	8007926 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	58024400 	.word	0x58024400
 8007954:	ffff0007 	.word	0xffff0007

08007958 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e075      	b.n	8007a56 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d105      	bne.n	8007982 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7fa fb0d 	bl	8001f9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2204      	movs	r2, #4
 8007986:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f868 	bl	8007a60 <HAL_SD_InitCard>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e05d      	b.n	8007a56 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fdb5 	bl	8008510 <HAL_SD_GetCardStatus>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e052      	b.n	8007a56 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80079b0:	7e3b      	ldrb	r3, [r7, #24]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80079b6:	7e7b      	ldrb	r3, [r7, #25]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d10a      	bne.n	80079da <HAL_SD_Init+0x82>
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d102      	bne.n	80079d0 <HAL_SD_Init+0x78>
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079d6:	659a      	str	r2, [r3, #88]	; 0x58
 80079d8:	e00b      	b.n	80079f2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d104      	bne.n	80079ec <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079e8:	659a      	str	r2, [r3, #88]	; 0x58
 80079ea:	e002      	b.n	80079f2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fe73 	bl	80086e4 <HAL_SD_ConfigWideBusOperation>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e026      	b.n	8007a56 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007a08:	f7fa fd48 	bl	800249c <HAL_GetTick>
 8007a0c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007a0e:	e011      	b.n	8007a34 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007a10:	f7fa fd44 	bl	800249c <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	d109      	bne.n	8007a34 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a26:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e010      	b.n	8007a56 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 ff67 	bl	8008908 <HAL_SD_GetCardState>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d1e7      	bne.n	8007a10 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3728      	adds	r7, #40	; 0x28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a60:	b590      	push	{r4, r7, lr}
 8007a62:	b08d      	sub	sp, #52	; 0x34
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a78:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007a7c:	f04f 0100 	mov.w	r1, #0
 8007a80:	f7fe fc76 	bl	8006370 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a84:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a9a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e070      	b.n	8007b82 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	4a39      	ldr	r2, [pc, #228]	; (8007b8c <HAL_SD_InitCard+0x12c>)
 8007aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aaa:	091b      	lsrs	r3, r3, #4
 8007aac:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681c      	ldr	r4, [r3, #0]
 8007ab2:	466a      	mov	r2, sp
 8007ab4:	f107 0318 	add.w	r3, r7, #24
 8007ab8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007abc:	e882 0003 	stmia.w	r2, {r0, r1}
 8007ac0:	f107 030c 	add.w	r3, r7, #12
 8007ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f002 fc5c 	bl	800a384 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f002 fc9f 	bl	800a414 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007aee:	4a28      	ldr	r2, [pc, #160]	; (8007b90 <HAL_SD_InitCard+0x130>)
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	3301      	adds	r3, #1
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fa fcdb 	bl	80024b4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fff0 	bl	8008ae4 <SD_PowerON>
 8007b04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e02e      	b.n	8007b82 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 ff0f 	bl	8008948 <SD_InitCard>
 8007b2a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e01b      	b.n	8007b82 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b52:	4618      	mov	r0, r3
 8007b54:	f002 fcf4 	bl	800a540 <SDMMC_CmdBlockLength>
 8007b58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00f      	beq.n	8007b80 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a0b      	ldr	r2, [pc, #44]	; (8007b94 <HAL_SD_InitCard+0x134>)
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e000      	b.n	8007b82 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	372c      	adds	r7, #44	; 0x2c
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd90      	pop	{r4, r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	014f8b59 	.word	0x014f8b59
 8007b90:	00012110 	.word	0x00012110
 8007b94:	1fe00fff 	.word	0x1fe00fff

08007b98 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b092      	sub	sp, #72	; 0x48
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ba6:	f7fa fc79 	bl	800249c <HAL_GetTick>
 8007baa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d107      	bne.n	8007bca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e167      	b.n	8007e9a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	f040 815a 	bne.w	8007e8c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	441a      	add	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d907      	bls.n	8007bfc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e14e      	b.n	8007e9a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2203      	movs	r2, #3
 8007c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d002      	beq.n	8007c1a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	025b      	lsls	r3, r3, #9
 8007c18:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	025b      	lsls	r3, r3, #9
 8007c24:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007c26:	2390      	movs	r3, #144	; 0x90
 8007c28:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f107 0214 	add.w	r2, r7, #20
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f002 fc51 	bl	800a4e8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c54:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d90a      	bls.n	8007c72 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 fcaf 	bl	800a5cc <SDMMC_CmdReadMultiBlock>
 8007c6e:	6478      	str	r0, [r7, #68]	; 0x44
 8007c70:	e009      	b.n	8007c86 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f002 fc81 	bl	800a586 <SDMMC_CmdReadSingleBlock>
 8007c84:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d012      	beq.n	8007cb2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a84      	ldr	r2, [pc, #528]	; (8007ea4 <HAL_SD_ReadBlocks+0x30c>)
 8007c92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e0f3      	b.n	8007e9a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007cb6:	e058      	b.n	8007d6a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d033      	beq.n	8007d2e <HAL_SD_ReadBlocks+0x196>
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc8:	2b1f      	cmp	r3, #31
 8007cca:	d930      	bls.n	8007d2e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	643b      	str	r3, [r7, #64]	; 0x40
 8007cd0:	e027      	b.n	8007d22 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f002 fb7e 	bl	800a3d8 <SDMMC_ReadFIFO>
 8007cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce8:	3301      	adds	r3, #1
 8007cea:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	0c1b      	lsrs	r3, r3, #16
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d08:	3301      	adds	r3, #1
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	0e1b      	lsrs	r3, r3, #24
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d18:	3301      	adds	r3, #1
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8007d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1e:	3301      	adds	r3, #1
 8007d20:	643b      	str	r3, [r7, #64]	; 0x40
 8007d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d24:	2b07      	cmp	r3, #7
 8007d26:	d9d4      	bls.n	8007cd2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2a:	3b20      	subs	r3, #32
 8007d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007d2e:	f7fa fbb5 	bl	800249c <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d902      	bls.n	8007d44 <HAL_SD_ReadBlocks+0x1ac>
 8007d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d112      	bne.n	8007d6a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a56      	ldr	r2, [pc, #344]	; (8007ea4 <HAL_SD_ReadBlocks+0x30c>)
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e097      	b.n	8007e9a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d70:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d09f      	beq.n	8007cb8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d86:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d022      	beq.n	8007ddc <HAL_SD_ReadBlocks+0x244>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d91f      	bls.n	8007ddc <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d01b      	beq.n	8007ddc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f002 fc79 	bl	800a6a0 <SDMMC_CmdStopTransfer>
 8007dae:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d012      	beq.n	8007ddc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a3a      	ldr	r2, [pc, #232]	; (8007ea4 <HAL_SD_ReadBlocks+0x30c>)
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e05e      	b.n	8007e9a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d012      	beq.n	8007e10 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a2d      	ldr	r2, [pc, #180]	; (8007ea4 <HAL_SD_ReadBlocks+0x30c>)
 8007df0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df6:	f043 0208 	orr.w	r2, r3, #8
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e044      	b.n	8007e9a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d012      	beq.n	8007e44 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a20      	ldr	r2, [pc, #128]	; (8007ea4 <HAL_SD_ReadBlocks+0x30c>)
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2a:	f043 0202 	orr.w	r2, r3, #2
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e02a      	b.n	8007e9a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d012      	beq.n	8007e78 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <HAL_SD_ReadBlocks+0x30c>)
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5e:	f043 0220 	orr.w	r2, r3, #32
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e010      	b.n	8007e9a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <HAL_SD_ReadBlocks+0x310>)
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	e006      	b.n	8007e9a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
  }
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3748      	adds	r7, #72	; 0x48
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	1fe00fff 	.word	0x1fe00fff
 8007ea8:	18000f3a 	.word	0x18000f3a

08007eac <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b092      	sub	sp, #72	; 0x48
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007eba:	f7fa faef 	bl	800249c <HAL_GetTick>
 8007ebe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d107      	bne.n	8007ede <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e16b      	b.n	80081b6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	f040 815e 	bne.w	80081a8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	441a      	add	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d907      	bls.n	8007f10 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f04:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e152      	b.n	80081b6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2203      	movs	r2, #3
 8007f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d002      	beq.n	8007f2e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2a:	025b      	lsls	r3, r3, #9
 8007f2c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f32:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	025b      	lsls	r3, r3, #9
 8007f38:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f3a:	2390      	movs	r3, #144	; 0x90
 8007f3c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f107 0218 	add.w	r2, r7, #24
 8007f52:	4611      	mov	r1, r2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 fac7 	bl	800a4e8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f68:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d90a      	bls.n	8007f86 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2220      	movs	r2, #32
 8007f74:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f002 fb6b 	bl	800a658 <SDMMC_CmdWriteMultiBlock>
 8007f82:	6478      	str	r0, [r7, #68]	; 0x44
 8007f84:	e009      	b.n	8007f9a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2210      	movs	r2, #16
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f92:	4618      	mov	r0, r3
 8007f94:	f002 fb3d 	bl	800a612 <SDMMC_CmdWriteSingleBlock>
 8007f98:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d012      	beq.n	8007fc6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a86      	ldr	r2, [pc, #536]	; (80081c0 <HAL_SD_WriteBlocks+0x314>)
 8007fa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e0f7      	b.n	80081b6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007fca:	e05c      	b.n	8008086 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d037      	beq.n	800804a <HAL_SD_WriteBlocks+0x19e>
 8007fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fdc:	2b1f      	cmp	r3, #31
 8007fde:	d934      	bls.n	800804a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fe4:	e02b      	b.n	800803e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fee:	3301      	adds	r3, #1
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	021a      	lsls	r2, r3, #8
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008000:	3301      	adds	r3, #1
 8008002:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	041a      	lsls	r2, r3, #16
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	4313      	orrs	r3, r2
 800800e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008012:	3301      	adds	r3, #1
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	061a      	lsls	r2, r3, #24
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008024:	3301      	adds	r3, #1
 8008026:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f107 0214 	add.w	r2, r7, #20
 8008030:	4611      	mov	r1, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f002 f9dd 	bl	800a3f2 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800803a:	3301      	adds	r3, #1
 800803c:	643b      	str	r3, [r7, #64]	; 0x40
 800803e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008040:	2b07      	cmp	r3, #7
 8008042:	d9d0      	bls.n	8007fe6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008046:	3b20      	subs	r3, #32
 8008048:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800804a:	f7fa fa27 	bl	800249c <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008056:	429a      	cmp	r2, r3
 8008058:	d902      	bls.n	8008060 <HAL_SD_WriteBlocks+0x1b4>
 800805a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800805c:	2b00      	cmp	r3, #0
 800805e:	d112      	bne.n	8008086 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a56      	ldr	r2, [pc, #344]	; (80081c0 <HAL_SD_WriteBlocks+0x314>)
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800806c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800806e:	431a      	orrs	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e097      	b.n	80081b6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008090:	2b00      	cmp	r3, #0
 8008092:	d09b      	beq.n	8007fcc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d022      	beq.n	80080f8 <HAL_SD_WriteBlocks+0x24c>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d91f      	bls.n	80080f8 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d01b      	beq.n	80080f8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f002 faeb 	bl	800a6a0 <SDMMC_CmdStopTransfer>
 80080ca:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80080cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d012      	beq.n	80080f8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a3a      	ldr	r2, [pc, #232]	; (80081c0 <HAL_SD_WriteBlocks+0x314>)
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e0:	431a      	orrs	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e05e      	b.n	80081b6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d012      	beq.n	800812c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a2d      	ldr	r2, [pc, #180]	; (80081c0 <HAL_SD_WriteBlocks+0x314>)
 800810c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008112:	f043 0208 	orr.w	r2, r3, #8
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e044      	b.n	80081b6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d012      	beq.n	8008160 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a20      	ldr	r2, [pc, #128]	; (80081c0 <HAL_SD_WriteBlocks+0x314>)
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008146:	f043 0202 	orr.w	r2, r3, #2
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e02a      	b.n	80081b6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008166:	f003 0310 	and.w	r3, r3, #16
 800816a:	2b00      	cmp	r3, #0
 800816c:	d012      	beq.n	8008194 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a13      	ldr	r2, [pc, #76]	; (80081c0 <HAL_SD_WriteBlocks+0x314>)
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	f043 0210 	orr.w	r2, r3, #16
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e010      	b.n	80081b6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a0a      	ldr	r2, [pc, #40]	; (80081c4 <HAL_SD_WriteBlocks+0x318>)
 800819a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e006      	b.n	80081b6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
  }
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3748      	adds	r7, #72	; 0x48
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	1fe00fff 	.word	0x1fe00fff
 80081c4:	18000f3a 	.word	0x18000f3a

080081c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d6:	0f9b      	lsrs	r3, r3, #30
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e2:	0e9b      	lsrs	r3, r3, #26
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f4:	0e1b      	lsrs	r3, r3, #24
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008206:	0c1b      	lsrs	r3, r3, #16
 8008208:	b2da      	uxtb	r2, r3
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008212:	0a1b      	lsrs	r3, r3, #8
 8008214:	b2da      	uxtb	r2, r3
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800821e:	b2da      	uxtb	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008228:	0d1b      	lsrs	r3, r3, #20
 800822a:	b29a      	uxth	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008234:	0c1b      	lsrs	r3, r3, #16
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 030f 	and.w	r3, r3, #15
 800823c:	b2da      	uxtb	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008246:	0bdb      	lsrs	r3, r3, #15
 8008248:	b2db      	uxtb	r3, r3
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	b2da      	uxtb	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008258:	0b9b      	lsrs	r3, r3, #14
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	b2da      	uxtb	r2, r3
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800826a:	0b5b      	lsrs	r3, r3, #13
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827c:	0b1b      	lsrs	r3, r3, #12
 800827e:	b2db      	uxtb	r3, r3
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	b2da      	uxtb	r2, r3
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2200      	movs	r2, #0
 800828e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	2b00      	cmp	r3, #0
 8008296:	d163      	bne.n	8008360 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800829c:	009a      	lsls	r2, r3, #2
 800829e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80082a2:	4013      	ands	r3, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80082a8:	0f92      	lsrs	r2, r2, #30
 80082aa:	431a      	orrs	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b4:	0edb      	lsrs	r3, r3, #27
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c6:	0e1b      	lsrs	r3, r3, #24
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d8:	0d5b      	lsrs	r3, r3, #21
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ea:	0c9b      	lsrs	r3, r3, #18
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082fc:	0bdb      	lsrs	r3, r3, #15
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	f003 0307 	and.w	r3, r3, #7
 8008304:	b2da      	uxtb	r2, r3
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	7e1b      	ldrb	r3, [r3, #24]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	3302      	adds	r3, #2
 8008320:	2201      	movs	r2, #1
 8008322:	fa02 f303 	lsl.w	r3, r2, r3
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800832a:	fb03 f202 	mul.w	r2, r3, r2
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	7a1b      	ldrb	r3, [r3, #8]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	f003 030f 	and.w	r3, r3, #15
 800833c:	2201      	movs	r2, #1
 800833e:	409a      	lsls	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800834c:	0a52      	lsrs	r2, r2, #9
 800834e:	fb03 f202 	mul.w	r2, r3, r2
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800835c:	655a      	str	r2, [r3, #84]	; 0x54
 800835e:	e031      	b.n	80083c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	2b01      	cmp	r3, #1
 8008366:	d11d      	bne.n	80083a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836c:	041b      	lsls	r3, r3, #16
 800836e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	431a      	orrs	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	3301      	adds	r3, #1
 8008384:	029a      	lsls	r2, r3, #10
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008398:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	655a      	str	r2, [r3, #84]	; 0x54
 80083a2:	e00f      	b.n	80083c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a58      	ldr	r2, [pc, #352]	; (800850c <HAL_SD_GetCardCSD+0x344>)
 80083aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e09d      	b.n	8008500 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083c8:	0b9b      	lsrs	r3, r3, #14
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083da:	09db      	lsrs	r3, r3, #7
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083fc:	0fdb      	lsrs	r3, r3, #31
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008408:	0f5b      	lsrs	r3, r3, #29
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 0303 	and.w	r3, r3, #3
 8008410:	b2da      	uxtb	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800841a:	0e9b      	lsrs	r3, r3, #26
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	b2da      	uxtb	r2, r3
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800842c:	0d9b      	lsrs	r3, r3, #22
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	b2da      	uxtb	r2, r3
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800843e:	0d5b      	lsrs	r3, r3, #21
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	b2da      	uxtb	r2, r3
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800845a:	0c1b      	lsrs	r3, r3, #16
 800845c:	b2db      	uxtb	r3, r3
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	b2da      	uxtb	r2, r3
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800846e:	0bdb      	lsrs	r3, r3, #15
 8008470:	b2db      	uxtb	r3, r3
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	b2da      	uxtb	r2, r3
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008482:	0b9b      	lsrs	r3, r3, #14
 8008484:	b2db      	uxtb	r3, r3
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	b2da      	uxtb	r2, r3
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008496:	0b5b      	lsrs	r3, r3, #13
 8008498:	b2db      	uxtb	r3, r3
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084aa:	0b1b      	lsrs	r3, r3, #12
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084be:	0a9b      	lsrs	r3, r3, #10
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e6:	085b      	lsrs	r3, r3, #1
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	1fe00fff 	.word	0x1fe00fff

08008510 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b094      	sub	sp, #80	; 0x50
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b03      	cmp	r3, #3
 800852a:	d101      	bne.n	8008530 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e0a7      	b.n	8008680 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008530:	f107 0308 	add.w	r3, r7, #8
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fb62 	bl	8008c00 <SD_SendSDStatus>
 800853c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800853e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008540:	2b00      	cmp	r3, #0
 8008542:	d011      	beq.n	8008568 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a4f      	ldr	r2, [pc, #316]	; (8008688 <HAL_SD_GetCardStatus+0x178>)
 800854a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008552:	431a      	orrs	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008566:	e070      	b.n	800864a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	099b      	lsrs	r3, r3, #6
 800856c:	b2db      	uxtb	r3, r3
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	b2da      	uxtb	r2, r3
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	b2da      	uxtb	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	0a1b      	lsrs	r3, r3, #8
 800858c:	b29b      	uxth	r3, r3
 800858e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008592:	b29a      	uxth	r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	0e1b      	lsrs	r3, r3, #24
 8008598:	b29b      	uxth	r3, r3
 800859a:	4313      	orrs	r3, r2
 800859c:	b29a      	uxth	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	061a      	lsls	r2, r3, #24
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085ae:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80085b8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	0e1b      	lsrs	r3, r3, #24
 80085be:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	0a1b      	lsrs	r3, r3, #8
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	0d1b      	lsrs	r3, r3, #20
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 030f 	and.w	r3, r3, #15
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	0c1b      	lsrs	r3, r3, #16
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4313      	orrs	r3, r2
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	0a9b      	lsrs	r3, r3, #10
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800860c:	b2da      	uxtb	r2, r3
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	0a1b      	lsrs	r3, r3, #8
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	b2da      	uxtb	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	091b      	lsrs	r3, r3, #4
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f003 030f 	and.w	r3, r3, #15
 800862c:	b2da      	uxtb	r2, r3
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 030f 	and.w	r3, r3, #15
 800863a:	b2da      	uxtb	r2, r3
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	0e1b      	lsrs	r3, r3, #24
 8008644:	b2da      	uxtb	r2, r3
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008652:	4618      	mov	r0, r3
 8008654:	f001 ff74 	bl	800a540 <SDMMC_CmdBlockLength>
 8008658:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800865a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00d      	beq.n	800867c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a08      	ldr	r2, [pc, #32]	; (8008688 <HAL_SD_GetCardStatus+0x178>)
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800866c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800867c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008680:	4618      	mov	r0, r3
 8008682:	3750      	adds	r7, #80	; 0x50
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	1fe00fff 	.word	0x1fe00fff

0800868c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80086e4:	b590      	push	{r4, r7, lr}
 80086e6:	b08d      	sub	sp, #52	; 0x34
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2203      	movs	r2, #3
 80086f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008700:	2b03      	cmp	r3, #3
 8008702:	d02e      	beq.n	8008762 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800870a:	d106      	bne.n	800871a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008710:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	635a      	str	r2, [r3, #52]	; 0x34
 8008718:	e029      	b.n	800876e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008720:	d10a      	bne.n	8008738 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fb64 	bl	8008df0 <SD_WideBus_Enable>
 8008728:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	635a      	str	r2, [r3, #52]	; 0x34
 8008736:	e01a      	b.n	800876e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10a      	bne.n	8008754 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fba1 	bl	8008e86 <SD_WideBus_Disable>
 8008744:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	431a      	orrs	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	635a      	str	r2, [r3, #52]	; 0x34
 8008752:	e00c      	b.n	800876e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008758:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	635a      	str	r2, [r3, #52]	; 0x34
 8008760:	e005      	b.n	800876e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008766:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	2b00      	cmp	r3, #0
 8008774:	d007      	beq.n	8008786 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a5f      	ldr	r2, [pc, #380]	; (80088f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800877c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008784:	e096      	b.n	80088b4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008786:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800878a:	f04f 0100 	mov.w	r1, #0
 800878e:	f7fd fdef 	bl	8006370 <HAL_RCCEx_GetPeriphCLKFreq>
 8008792:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 8083 	beq.w	80088a2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	695a      	ldr	r2, [r3, #20]
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4950      	ldr	r1, [pc, #320]	; (80088fc <HAL_SD_ConfigWideBusOperation+0x218>)
 80087ba:	fba1 1303 	umull	r1, r3, r1, r3
 80087be:	0e1b      	lsrs	r3, r3, #24
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d303      	bcc.n	80087cc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	61bb      	str	r3, [r7, #24]
 80087ca:	e05a      	b.n	8008882 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d4:	d103      	bne.n	80087de <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	61bb      	str	r3, [r7, #24]
 80087dc:	e051      	b.n	8008882 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e6:	d126      	bne.n	8008836 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10e      	bne.n	800880e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	4a43      	ldr	r2, [pc, #268]	; (8008900 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d906      	bls.n	8008806 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	4a40      	ldr	r2, [pc, #256]	; (80088fc <HAL_SD_ConfigWideBusOperation+0x218>)
 80087fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008800:	0e5b      	lsrs	r3, r3, #25
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	e03d      	b.n	8008882 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	61bb      	str	r3, [r7, #24]
 800880c:	e039      	b.n	8008882 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	69fa      	ldr	r2, [r7, #28]
 8008816:	fbb2 f3f3 	udiv	r3, r2, r3
 800881a:	4a39      	ldr	r2, [pc, #228]	; (8008900 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d906      	bls.n	800882e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	4a36      	ldr	r2, [pc, #216]	; (80088fc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008824:	fba2 2303 	umull	r2, r3, r2, r3
 8008828:	0e5b      	lsrs	r3, r3, #25
 800882a:	61bb      	str	r3, [r7, #24]
 800882c:	e029      	b.n	8008882 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	61bb      	str	r3, [r7, #24]
 8008834:	e025      	b.n	8008882 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10e      	bne.n	800885c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4a30      	ldr	r2, [pc, #192]	; (8008904 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d906      	bls.n	8008854 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	4a2c      	ldr	r2, [pc, #176]	; (80088fc <HAL_SD_ConfigWideBusOperation+0x218>)
 800884a:	fba2 2303 	umull	r2, r3, r2, r3
 800884e:	0e1b      	lsrs	r3, r3, #24
 8008850:	61bb      	str	r3, [r7, #24]
 8008852:	e016      	b.n	8008882 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	e012      	b.n	8008882 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	005b      	lsls	r3, r3, #1
 8008862:	69fa      	ldr	r2, [r7, #28]
 8008864:	fbb2 f3f3 	udiv	r3, r2, r3
 8008868:	4a26      	ldr	r2, [pc, #152]	; (8008904 <HAL_SD_ConfigWideBusOperation+0x220>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d906      	bls.n	800887c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	4a22      	ldr	r2, [pc, #136]	; (80088fc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008872:	fba2 2303 	umull	r2, r3, r2, r3
 8008876:	0e1b      	lsrs	r3, r3, #24
 8008878:	61bb      	str	r3, [r7, #24]
 800887a:	e002      	b.n	8008882 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681c      	ldr	r4, [r3, #0]
 8008886:	466a      	mov	r2, sp
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008890:	e882 0003 	stmia.w	r2, {r0, r1}
 8008894:	f107 0308 	add.w	r3, r7, #8
 8008898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800889a:	4620      	mov	r0, r4
 800889c:	f001 fd72 	bl	800a384 <SDMMC_Init>
 80088a0:	e008      	b.n	80088b4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fe3f 	bl	800a540 <SDMMC_CmdBlockLength>
 80088c2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00c      	beq.n	80088e4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a0a      	ldr	r2, [pc, #40]	; (80088f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 80088d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80088ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	372c      	adds	r7, #44	; 0x2c
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd90      	pop	{r4, r7, pc}
 80088f8:	1fe00fff 	.word	0x1fe00fff
 80088fc:	55e63b89 	.word	0x55e63b89
 8008900:	02faf080 	.word	0x02faf080
 8008904:	017d7840 	.word	0x017d7840

08008908 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008914:	f107 030c 	add.w	r3, r7, #12
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fa40 	bl	8008da0 <SD_SendStatus>
 8008920:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d005      	beq.n	8008934 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	0a5b      	lsrs	r3, r3, #9
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800893e:	693b      	ldr	r3, [r7, #16]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b090      	sub	sp, #64	; 0x40
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008954:	f7f9 fda2 	bl	800249c <HAL_GetTick>
 8008958:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f001 fd69 	bl	800a436 <SDMMC_GetPowerState>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d102      	bne.n	8008970 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800896a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800896e:	e0b5      	b.n	8008adc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	2b03      	cmp	r3, #3
 8008976:	d02e      	beq.n	80089d6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f001 ffb4 	bl	800a8ea <SDMMC_CmdSendCID>
 8008982:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <SD_InitCard+0x46>
    {
      return errorstate;
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	e0a6      	b.n	8008adc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f001 fd94 	bl	800a4c2 <SDMMC_GetResponse>
 800899a:	4602      	mov	r2, r0
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2104      	movs	r1, #4
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 fd8b 	bl	800a4c2 <SDMMC_GetResponse>
 80089ac:	4602      	mov	r2, r0
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2108      	movs	r1, #8
 80089b8:	4618      	mov	r0, r3
 80089ba:	f001 fd82 	bl	800a4c2 <SDMMC_GetResponse>
 80089be:	4602      	mov	r2, r0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	210c      	movs	r1, #12
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 fd79 	bl	800a4c2 <SDMMC_GetResponse>
 80089d0:	4602      	mov	r2, r0
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d01d      	beq.n	8008a1a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80089de:	e019      	b.n	8008a14 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f107 020a 	add.w	r2, r7, #10
 80089e8:	4611      	mov	r1, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f001 ffbc 	bl	800a968 <SDMMC_CmdSetRelAdd>
 80089f0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80089f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <SD_InitCard+0xb4>
      {
        return errorstate;
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fa:	e06f      	b.n	8008adc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80089fc:	f7f9 fd4e 	bl	800249c <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	f241 3287 	movw	r2, #4999	; 0x1387
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d902      	bls.n	8008a14 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008a0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a12:	e063      	b.n	8008adc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008a14:	897b      	ldrh	r3, [r7, #10]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0e2      	beq.n	80089e0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d036      	beq.n	8008a90 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008a22:	897b      	ldrh	r3, [r7, #10]
 8008a24:	461a      	mov	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a32:	041b      	lsls	r3, r3, #16
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f001 ff76 	bl	800a928 <SDMMC_CmdSendCSD>
 8008a3c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <SD_InitCard+0x100>
    {
      return errorstate;
 8008a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a46:	e049      	b.n	8008adc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 fd37 	bl	800a4c2 <SDMMC_GetResponse>
 8008a54:	4602      	mov	r2, r0
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2104      	movs	r1, #4
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 fd2e 	bl	800a4c2 <SDMMC_GetResponse>
 8008a66:	4602      	mov	r2, r0
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2108      	movs	r1, #8
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 fd25 	bl	800a4c2 <SDMMC_GetResponse>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	210c      	movs	r1, #12
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 fd1c 	bl	800a4c2 <SDMMC_GetResponse>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2104      	movs	r1, #4
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 fd13 	bl	800a4c2 <SDMMC_GetResponse>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	0d1a      	lsrs	r2, r3, #20
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fb8c 	bl	80081c8 <HAL_SD_GetCardCSD>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ab6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008aba:	e00f      	b.n	8008adc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac4:	041b      	lsls	r3, r3, #16
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f001 fe25 	bl	800a718 <SDMMC_CmdSelDesel>
 8008ace:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <SD_InitCard+0x192>
  {
    return errorstate;
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	e000      	b.n	8008adc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3740      	adds	r7, #64	; 0x40
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 fe2e 	bl	800a75e <SDMMC_CmdGoIdleState>
 8008b02:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <SD_PowerON+0x2a>
  {
    return errorstate;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	e072      	b.n	8008bf4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 fe41 	bl	800a79a <SDMMC_CmdOperCond>
 8008b18:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b20:	d10d      	bne.n	8008b3e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fe16 	bl	800a75e <SDMMC_CmdGoIdleState>
 8008b32:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d004      	beq.n	8008b44 <SD_PowerON+0x60>
    {
      return errorstate;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	e05a      	b.n	8008bf4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d137      	bne.n	8008bbc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2100      	movs	r1, #0
 8008b52:	4618      	mov	r0, r3
 8008b54:	f001 fe41 	bl	800a7da <SDMMC_CmdAppCommand>
 8008b58:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d02d      	beq.n	8008bbc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b64:	e046      	b.n	8008bf4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 fe34 	bl	800a7da <SDMMC_CmdAppCommand>
 8008b72:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <SD_PowerON+0x9a>
    {
      return errorstate;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	e03a      	b.n	8008bf4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	491e      	ldr	r1, [pc, #120]	; (8008bfc <SD_PowerON+0x118>)
 8008b84:	4618      	mov	r0, r3
 8008b86:	f001 fe4b 	bl	800a820 <SDMMC_CmdAppOperCommand>
 8008b8a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b96:	e02d      	b.n	8008bf4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 fc8f 	bl	800a4c2 <SDMMC_GetResponse>
 8008ba4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	0fdb      	lsrs	r3, r3, #31
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <SD_PowerON+0xce>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <SD_PowerON+0xd0>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	613b      	str	r3, [r7, #16]

    count++;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d802      	bhi.n	8008bcc <SD_PowerON+0xe8>
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0cc      	beq.n	8008b66 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d902      	bls.n	8008bdc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bda:	e00b      	b.n	8008bf4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	c1100000 	.word	0xc1100000

08008c00 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08c      	sub	sp, #48	; 0x30
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c0a:	f7f9 fc47 	bl	800249c <HAL_GetTick>
 8008c0e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 fc51 	bl	800a4c2 <SDMMC_GetResponse>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c2a:	d102      	bne.n	8008c32 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c30:	e0b0      	b.n	8008d94 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2140      	movs	r1, #64	; 0x40
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 fc81 	bl	800a540 <SDMMC_CmdBlockLength>
 8008c3e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d005      	beq.n	8008c52 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	e0a0      	b.n	8008d94 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5a:	041b      	lsls	r3, r3, #16
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	f001 fdbb 	bl	800a7da <SDMMC_CmdAppCommand>
 8008c64:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	e08d      	b.n	8008d94 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c78:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008c7e:	2340      	movs	r3, #64	; 0x40
 8008c80:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008c82:	2360      	movs	r3, #96	; 0x60
 8008c84:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c86:	2302      	movs	r3, #2
 8008c88:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f107 0208 	add.w	r2, r7, #8
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 fc23 	bl	800a4e8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 fea3 	bl	800a9f2 <SDMMC_CmdStatusRegister>
 8008cac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d02b      	beq.n	8008d0c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	e069      	b.n	8008d94 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d013      	beq.n	8008cf6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008cce:	2300      	movs	r3, #0
 8008cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cd2:	e00d      	b.n	8008cf0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f001 fb7d 	bl	800a3d8 <SDMMC_ReadFIFO>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	601a      	str	r2, [r3, #0]
        pData++;
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	3301      	adds	r3, #1
 8008cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	2b07      	cmp	r3, #7
 8008cf4:	d9ee      	bls.n	8008cd4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cf6:	f7f9 fbd1 	bl	800249c <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d04:	d102      	bne.n	8008d0c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d0a:	e043      	b.n	8008d94 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d12:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0d2      	beq.n	8008cc0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d28:	2308      	movs	r3, #8
 8008d2a:	e033      	b.n	8008d94 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e02a      	b.n	8008d94 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	f003 0320 	and.w	r3, r3, #32
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d017      	beq.n	8008d7c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	e021      	b.n	8008d94 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f001 fb3f 	bl	800a3d8 <SDMMC_ReadFIFO>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	601a      	str	r2, [r3, #0]
    pData++;
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	3304      	adds	r3, #4
 8008d64:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d66:	f7f9 fb99 	bl	800249c <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d74:	d102      	bne.n	8008d7c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d7a:	e00b      	b.n	8008d94 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e2      	bne.n	8008d50 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a03      	ldr	r2, [pc, #12]	; (8008d9c <SD_SendSDStatus+0x19c>)
 8008d90:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3730      	adds	r7, #48	; 0x30
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	18000f3a 	.word	0x18000f3a

08008da0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008db0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008db4:	e018      	b.n	8008de8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbe:	041b      	lsls	r3, r3, #16
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	f001 fdf2 	bl	800a9ac <SDMMC_CmdSendStatus>
 8008dc8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	e009      	b.n	8008de8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 fb71 	bl	800a4c2 <SDMMC_GetResponse>
 8008de0:	4602      	mov	r2, r0
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008df8:	2300      	movs	r3, #0
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 fb5b 	bl	800a4c2 <SDMMC_GetResponse>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e16:	d102      	bne.n	8008e1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e1c:	e02f      	b.n	8008e7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e1e:	f107 030c 	add.w	r3, r7, #12
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f879 	bl	8008f1c <SD_FindSCR>
 8008e2a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	e023      	b.n	8008e7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01c      	beq.n	8008e7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e48:	041b      	lsls	r3, r3, #16
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f001 fcc4 	bl	800a7da <SDMMC_CmdAppCommand>
 8008e52:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	e00f      	b.n	8008e7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2102      	movs	r1, #2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 fcfb 	bl	800a860 <SDMMC_CmdBusWidth>
 8008e6a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	e003      	b.n	8008e7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e76:	2300      	movs	r3, #0
 8008e78:	e001      	b.n	8008e7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 fb10 	bl	800a4c2 <SDMMC_GetResponse>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eac:	d102      	bne.n	8008eb4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008eae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eb2:	e02f      	b.n	8008f14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008eb4:	f107 030c 	add.w	r3, r7, #12
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f82e 	bl	8008f1c <SD_FindSCR>
 8008ec0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	e023      	b.n	8008f14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d01c      	beq.n	8008f10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f001 fc79 	bl	800a7da <SDMMC_CmdAppCommand>
 8008ee8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	e00f      	b.n	8008f14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2100      	movs	r1, #0
 8008efa:	4618      	mov	r0, r3
 8008efc:	f001 fcb0 	bl	800a860 <SDMMC_CmdBusWidth>
 8008f00:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	e003      	b.n	8008f14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e001      	b.n	8008f14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08e      	sub	sp, #56	; 0x38
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f26:	f7f9 fab9 	bl	800249c <HAL_GetTick>
 8008f2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008f30:	2300      	movs	r3, #0
 8008f32:	60bb      	str	r3, [r7, #8]
 8008f34:	2300      	movs	r3, #0
 8008f36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2108      	movs	r1, #8
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 fafc 	bl	800a540 <SDMMC_CmdBlockLength>
 8008f48:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	e0ad      	b.n	80090b0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5c:	041b      	lsls	r3, r3, #16
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4610      	mov	r0, r2
 8008f62:	f001 fc3a 	bl	800a7da <SDMMC_CmdAppCommand>
 8008f66:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	e09e      	b.n	80090b0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f72:	f04f 33ff 	mov.w	r3, #4294967295
 8008f76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008f78:	2308      	movs	r3, #8
 8008f7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008f7c:	2330      	movs	r3, #48	; 0x30
 8008f7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f80:	2302      	movs	r3, #2
 8008f82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f107 0210 	add.w	r2, r7, #16
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 faa6 	bl	800a4e8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 fc80 	bl	800a8a6 <SDMMC_CmdSendSCR>
 8008fa6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d027      	beq.n	8008ffe <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	e07e      	b.n	80090b0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d113      	bne.n	8008fe8 <SD_FindSCR+0xcc>
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d110      	bne.n	8008fe8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fa04 	bl	800a3d8 <SDMMC_ReadFIFO>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 f9fd 	bl	800a3d8 <SDMMC_ReadFIFO>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	60fb      	str	r3, [r7, #12]
      index++;
 8008fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fe8:	f7f9 fa58 	bl	800249c <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff6:	d102      	bne.n	8008ffe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ffc:	e058      	b.n	80090b0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009004:	f240 532a 	movw	r3, #1322	; 0x52a
 8009008:	4013      	ands	r3, r2
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0d1      	beq.n	8008fb2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b00      	cmp	r3, #0
 800901a:	d005      	beq.n	8009028 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2208      	movs	r2, #8
 8009022:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009024:	2308      	movs	r3, #8
 8009026:	e043      	b.n	80090b0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d005      	beq.n	8009042 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2202      	movs	r2, #2
 800903c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800903e:	2302      	movs	r3, #2
 8009040:	e036      	b.n	80090b0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2220      	movs	r2, #32
 8009056:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009058:	2320      	movs	r3, #32
 800905a:	e029      	b.n	80090b0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <SD_FindSCR+0x19c>)
 8009062:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	061a      	lsls	r2, r3, #24
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	021b      	lsls	r3, r3, #8
 800906c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009070:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	0a1b      	lsrs	r3, r3, #8
 8009076:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800907a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	0e1b      	lsrs	r3, r3, #24
 8009080:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	601a      	str	r2, [r3, #0]
    scr++;
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	3304      	adds	r3, #4
 800908a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	061a      	lsls	r2, r3, #24
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	021b      	lsls	r3, r3, #8
 8009094:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009098:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	0a1b      	lsrs	r3, r3, #8
 800909e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80090a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	0e1b      	lsrs	r3, r3, #24
 80090a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80090aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3738      	adds	r7, #56	; 0x38
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	18000f3a 	.word	0x18000f3a

080090bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e042      	b.n	8009154 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d106      	bne.n	80090e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7f9 f8c1 	bl	8002268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2224      	movs	r2, #36	; 0x24
 80090ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0201 	bic.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f8ba 	bl	8009278 <UART_SetConfig>
 8009104:	4603      	mov	r3, r0
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e022      	b.n	8009154 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fe16 	bl	8009d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800912a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800913a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fe9d 	bl	8009e8c <UART_CheckIdleState>
 8009152:	4603      	mov	r3, r0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	; 0x28
 8009160:	af02      	add	r7, sp, #8
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	4613      	mov	r3, r2
 800916a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009172:	2b20      	cmp	r3, #32
 8009174:	d17b      	bne.n	800926e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <HAL_UART_Transmit+0x26>
 800917c:	88fb      	ldrh	r3, [r7, #6]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e074      	b.n	8009270 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2221      	movs	r2, #33	; 0x21
 8009192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009196:	f7f9 f981 	bl	800249c <HAL_GetTick>
 800919a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	88fa      	ldrh	r2, [r7, #6]
 80091a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	88fa      	ldrh	r2, [r7, #6]
 80091a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b4:	d108      	bne.n	80091c8 <HAL_UART_Transmit+0x6c>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d104      	bne.n	80091c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	61bb      	str	r3, [r7, #24]
 80091c6:	e003      	b.n	80091d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091d0:	e030      	b.n	8009234 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2200      	movs	r2, #0
 80091da:	2180      	movs	r1, #128	; 0x80
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 feff 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e03d      	b.n	8009270 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10b      	bne.n	8009212 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009208:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	3302      	adds	r3, #2
 800920e:	61bb      	str	r3, [r7, #24]
 8009210:	e007      	b.n	8009222 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	781a      	ldrb	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	3301      	adds	r3, #1
 8009220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009228:	b29b      	uxth	r3, r3
 800922a:	3b01      	subs	r3, #1
 800922c:	b29a      	uxth	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800923a:	b29b      	uxth	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1c8      	bne.n	80091d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2200      	movs	r2, #0
 8009248:	2140      	movs	r1, #64	; 0x40
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 fec8 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2220      	movs	r2, #32
 800925a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e006      	b.n	8009270 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2220      	movs	r2, #32
 8009266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	e000      	b.n	8009270 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800926e:	2302      	movs	r3, #2
  }
}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800927c:	b092      	sub	sp, #72	; 0x48
 800927e:	af00      	add	r7, sp, #0
 8009280:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	431a      	orrs	r2, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	431a      	orrs	r2, r3
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	4313      	orrs	r3, r2
 800929e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	4bbe      	ldr	r3, [pc, #760]	; (80095a0 <UART_SetConfig+0x328>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	6812      	ldr	r2, [r2, #0]
 80092ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092b0:	430b      	orrs	r3, r1
 80092b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4ab3      	ldr	r2, [pc, #716]	; (80095a4 <UART_SetConfig+0x32c>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d004      	beq.n	80092e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092e0:	4313      	orrs	r3, r2
 80092e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689a      	ldr	r2, [r3, #8]
 80092ea:	4baf      	ldr	r3, [pc, #700]	; (80095a8 <UART_SetConfig+0x330>)
 80092ec:	4013      	ands	r3, r2
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	6812      	ldr	r2, [r2, #0]
 80092f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092f4:	430b      	orrs	r3, r1
 80092f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	f023 010f 	bic.w	r1, r3, #15
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4aa6      	ldr	r2, [pc, #664]	; (80095ac <UART_SetConfig+0x334>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d177      	bne.n	8009408 <UART_SetConfig+0x190>
 8009318:	4ba5      	ldr	r3, [pc, #660]	; (80095b0 <UART_SetConfig+0x338>)
 800931a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009320:	2b28      	cmp	r3, #40	; 0x28
 8009322:	d86d      	bhi.n	8009400 <UART_SetConfig+0x188>
 8009324:	a201      	add	r2, pc, #4	; (adr r2, 800932c <UART_SetConfig+0xb4>)
 8009326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932a:	bf00      	nop
 800932c:	080093d1 	.word	0x080093d1
 8009330:	08009401 	.word	0x08009401
 8009334:	08009401 	.word	0x08009401
 8009338:	08009401 	.word	0x08009401
 800933c:	08009401 	.word	0x08009401
 8009340:	08009401 	.word	0x08009401
 8009344:	08009401 	.word	0x08009401
 8009348:	08009401 	.word	0x08009401
 800934c:	080093d9 	.word	0x080093d9
 8009350:	08009401 	.word	0x08009401
 8009354:	08009401 	.word	0x08009401
 8009358:	08009401 	.word	0x08009401
 800935c:	08009401 	.word	0x08009401
 8009360:	08009401 	.word	0x08009401
 8009364:	08009401 	.word	0x08009401
 8009368:	08009401 	.word	0x08009401
 800936c:	080093e1 	.word	0x080093e1
 8009370:	08009401 	.word	0x08009401
 8009374:	08009401 	.word	0x08009401
 8009378:	08009401 	.word	0x08009401
 800937c:	08009401 	.word	0x08009401
 8009380:	08009401 	.word	0x08009401
 8009384:	08009401 	.word	0x08009401
 8009388:	08009401 	.word	0x08009401
 800938c:	080093e9 	.word	0x080093e9
 8009390:	08009401 	.word	0x08009401
 8009394:	08009401 	.word	0x08009401
 8009398:	08009401 	.word	0x08009401
 800939c:	08009401 	.word	0x08009401
 80093a0:	08009401 	.word	0x08009401
 80093a4:	08009401 	.word	0x08009401
 80093a8:	08009401 	.word	0x08009401
 80093ac:	080093f1 	.word	0x080093f1
 80093b0:	08009401 	.word	0x08009401
 80093b4:	08009401 	.word	0x08009401
 80093b8:	08009401 	.word	0x08009401
 80093bc:	08009401 	.word	0x08009401
 80093c0:	08009401 	.word	0x08009401
 80093c4:	08009401 	.word	0x08009401
 80093c8:	08009401 	.word	0x08009401
 80093cc:	080093f9 	.word	0x080093f9
 80093d0:	2301      	movs	r3, #1
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093d6:	e222      	b.n	800981e <UART_SetConfig+0x5a6>
 80093d8:	2304      	movs	r3, #4
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e21e      	b.n	800981e <UART_SetConfig+0x5a6>
 80093e0:	2308      	movs	r3, #8
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093e6:	e21a      	b.n	800981e <UART_SetConfig+0x5a6>
 80093e8:	2310      	movs	r3, #16
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ee:	e216      	b.n	800981e <UART_SetConfig+0x5a6>
 80093f0:	2320      	movs	r3, #32
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093f6:	e212      	b.n	800981e <UART_SetConfig+0x5a6>
 80093f8:	2340      	movs	r3, #64	; 0x40
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093fe:	e20e      	b.n	800981e <UART_SetConfig+0x5a6>
 8009400:	2380      	movs	r3, #128	; 0x80
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009406:	e20a      	b.n	800981e <UART_SetConfig+0x5a6>
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a69      	ldr	r2, [pc, #420]	; (80095b4 <UART_SetConfig+0x33c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d130      	bne.n	8009474 <UART_SetConfig+0x1fc>
 8009412:	4b67      	ldr	r3, [pc, #412]	; (80095b0 <UART_SetConfig+0x338>)
 8009414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	2b05      	cmp	r3, #5
 800941c:	d826      	bhi.n	800946c <UART_SetConfig+0x1f4>
 800941e:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <UART_SetConfig+0x1ac>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	0800943d 	.word	0x0800943d
 8009428:	08009445 	.word	0x08009445
 800942c:	0800944d 	.word	0x0800944d
 8009430:	08009455 	.word	0x08009455
 8009434:	0800945d 	.word	0x0800945d
 8009438:	08009465 	.word	0x08009465
 800943c:	2300      	movs	r3, #0
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009442:	e1ec      	b.n	800981e <UART_SetConfig+0x5a6>
 8009444:	2304      	movs	r3, #4
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800944a:	e1e8      	b.n	800981e <UART_SetConfig+0x5a6>
 800944c:	2308      	movs	r3, #8
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009452:	e1e4      	b.n	800981e <UART_SetConfig+0x5a6>
 8009454:	2310      	movs	r3, #16
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800945a:	e1e0      	b.n	800981e <UART_SetConfig+0x5a6>
 800945c:	2320      	movs	r3, #32
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009462:	e1dc      	b.n	800981e <UART_SetConfig+0x5a6>
 8009464:	2340      	movs	r3, #64	; 0x40
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946a:	e1d8      	b.n	800981e <UART_SetConfig+0x5a6>
 800946c:	2380      	movs	r3, #128	; 0x80
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009472:	e1d4      	b.n	800981e <UART_SetConfig+0x5a6>
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a4f      	ldr	r2, [pc, #316]	; (80095b8 <UART_SetConfig+0x340>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d130      	bne.n	80094e0 <UART_SetConfig+0x268>
 800947e:	4b4c      	ldr	r3, [pc, #304]	; (80095b0 <UART_SetConfig+0x338>)
 8009480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009482:	f003 0307 	and.w	r3, r3, #7
 8009486:	2b05      	cmp	r3, #5
 8009488:	d826      	bhi.n	80094d8 <UART_SetConfig+0x260>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <UART_SetConfig+0x218>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094a9 	.word	0x080094a9
 8009494:	080094b1 	.word	0x080094b1
 8009498:	080094b9 	.word	0x080094b9
 800949c:	080094c1 	.word	0x080094c1
 80094a0:	080094c9 	.word	0x080094c9
 80094a4:	080094d1 	.word	0x080094d1
 80094a8:	2300      	movs	r3, #0
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ae:	e1b6      	b.n	800981e <UART_SetConfig+0x5a6>
 80094b0:	2304      	movs	r3, #4
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094b6:	e1b2      	b.n	800981e <UART_SetConfig+0x5a6>
 80094b8:	2308      	movs	r3, #8
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094be:	e1ae      	b.n	800981e <UART_SetConfig+0x5a6>
 80094c0:	2310      	movs	r3, #16
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c6:	e1aa      	b.n	800981e <UART_SetConfig+0x5a6>
 80094c8:	2320      	movs	r3, #32
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ce:	e1a6      	b.n	800981e <UART_SetConfig+0x5a6>
 80094d0:	2340      	movs	r3, #64	; 0x40
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d6:	e1a2      	b.n	800981e <UART_SetConfig+0x5a6>
 80094d8:	2380      	movs	r3, #128	; 0x80
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094de:	e19e      	b.n	800981e <UART_SetConfig+0x5a6>
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a35      	ldr	r2, [pc, #212]	; (80095bc <UART_SetConfig+0x344>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d130      	bne.n	800954c <UART_SetConfig+0x2d4>
 80094ea:	4b31      	ldr	r3, [pc, #196]	; (80095b0 <UART_SetConfig+0x338>)
 80094ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	2b05      	cmp	r3, #5
 80094f4:	d826      	bhi.n	8009544 <UART_SetConfig+0x2cc>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <UART_SetConfig+0x284>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	08009515 	.word	0x08009515
 8009500:	0800951d 	.word	0x0800951d
 8009504:	08009525 	.word	0x08009525
 8009508:	0800952d 	.word	0x0800952d
 800950c:	08009535 	.word	0x08009535
 8009510:	0800953d 	.word	0x0800953d
 8009514:	2300      	movs	r3, #0
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951a:	e180      	b.n	800981e <UART_SetConfig+0x5a6>
 800951c:	2304      	movs	r3, #4
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009522:	e17c      	b.n	800981e <UART_SetConfig+0x5a6>
 8009524:	2308      	movs	r3, #8
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800952a:	e178      	b.n	800981e <UART_SetConfig+0x5a6>
 800952c:	2310      	movs	r3, #16
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009532:	e174      	b.n	800981e <UART_SetConfig+0x5a6>
 8009534:	2320      	movs	r3, #32
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800953a:	e170      	b.n	800981e <UART_SetConfig+0x5a6>
 800953c:	2340      	movs	r3, #64	; 0x40
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009542:	e16c      	b.n	800981e <UART_SetConfig+0x5a6>
 8009544:	2380      	movs	r3, #128	; 0x80
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954a:	e168      	b.n	800981e <UART_SetConfig+0x5a6>
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a1b      	ldr	r2, [pc, #108]	; (80095c0 <UART_SetConfig+0x348>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d142      	bne.n	80095dc <UART_SetConfig+0x364>
 8009556:	4b16      	ldr	r3, [pc, #88]	; (80095b0 <UART_SetConfig+0x338>)
 8009558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955a:	f003 0307 	and.w	r3, r3, #7
 800955e:	2b05      	cmp	r3, #5
 8009560:	d838      	bhi.n	80095d4 <UART_SetConfig+0x35c>
 8009562:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <UART_SetConfig+0x2f0>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	08009581 	.word	0x08009581
 800956c:	08009589 	.word	0x08009589
 8009570:	08009591 	.word	0x08009591
 8009574:	08009599 	.word	0x08009599
 8009578:	080095c5 	.word	0x080095c5
 800957c:	080095cd 	.word	0x080095cd
 8009580:	2300      	movs	r3, #0
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009586:	e14a      	b.n	800981e <UART_SetConfig+0x5a6>
 8009588:	2304      	movs	r3, #4
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958e:	e146      	b.n	800981e <UART_SetConfig+0x5a6>
 8009590:	2308      	movs	r3, #8
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009596:	e142      	b.n	800981e <UART_SetConfig+0x5a6>
 8009598:	2310      	movs	r3, #16
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800959e:	e13e      	b.n	800981e <UART_SetConfig+0x5a6>
 80095a0:	cfff69f3 	.word	0xcfff69f3
 80095a4:	58000c00 	.word	0x58000c00
 80095a8:	11fff4ff 	.word	0x11fff4ff
 80095ac:	40011000 	.word	0x40011000
 80095b0:	58024400 	.word	0x58024400
 80095b4:	40004400 	.word	0x40004400
 80095b8:	40004800 	.word	0x40004800
 80095bc:	40004c00 	.word	0x40004c00
 80095c0:	40005000 	.word	0x40005000
 80095c4:	2320      	movs	r3, #32
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ca:	e128      	b.n	800981e <UART_SetConfig+0x5a6>
 80095cc:	2340      	movs	r3, #64	; 0x40
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d2:	e124      	b.n	800981e <UART_SetConfig+0x5a6>
 80095d4:	2380      	movs	r3, #128	; 0x80
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095da:	e120      	b.n	800981e <UART_SetConfig+0x5a6>
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4acb      	ldr	r2, [pc, #812]	; (8009910 <UART_SetConfig+0x698>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d176      	bne.n	80096d4 <UART_SetConfig+0x45c>
 80095e6:	4bcb      	ldr	r3, [pc, #812]	; (8009914 <UART_SetConfig+0x69c>)
 80095e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095ee:	2b28      	cmp	r3, #40	; 0x28
 80095f0:	d86c      	bhi.n	80096cc <UART_SetConfig+0x454>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <UART_SetConfig+0x380>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	0800969d 	.word	0x0800969d
 80095fc:	080096cd 	.word	0x080096cd
 8009600:	080096cd 	.word	0x080096cd
 8009604:	080096cd 	.word	0x080096cd
 8009608:	080096cd 	.word	0x080096cd
 800960c:	080096cd 	.word	0x080096cd
 8009610:	080096cd 	.word	0x080096cd
 8009614:	080096cd 	.word	0x080096cd
 8009618:	080096a5 	.word	0x080096a5
 800961c:	080096cd 	.word	0x080096cd
 8009620:	080096cd 	.word	0x080096cd
 8009624:	080096cd 	.word	0x080096cd
 8009628:	080096cd 	.word	0x080096cd
 800962c:	080096cd 	.word	0x080096cd
 8009630:	080096cd 	.word	0x080096cd
 8009634:	080096cd 	.word	0x080096cd
 8009638:	080096ad 	.word	0x080096ad
 800963c:	080096cd 	.word	0x080096cd
 8009640:	080096cd 	.word	0x080096cd
 8009644:	080096cd 	.word	0x080096cd
 8009648:	080096cd 	.word	0x080096cd
 800964c:	080096cd 	.word	0x080096cd
 8009650:	080096cd 	.word	0x080096cd
 8009654:	080096cd 	.word	0x080096cd
 8009658:	080096b5 	.word	0x080096b5
 800965c:	080096cd 	.word	0x080096cd
 8009660:	080096cd 	.word	0x080096cd
 8009664:	080096cd 	.word	0x080096cd
 8009668:	080096cd 	.word	0x080096cd
 800966c:	080096cd 	.word	0x080096cd
 8009670:	080096cd 	.word	0x080096cd
 8009674:	080096cd 	.word	0x080096cd
 8009678:	080096bd 	.word	0x080096bd
 800967c:	080096cd 	.word	0x080096cd
 8009680:	080096cd 	.word	0x080096cd
 8009684:	080096cd 	.word	0x080096cd
 8009688:	080096cd 	.word	0x080096cd
 800968c:	080096cd 	.word	0x080096cd
 8009690:	080096cd 	.word	0x080096cd
 8009694:	080096cd 	.word	0x080096cd
 8009698:	080096c5 	.word	0x080096c5
 800969c:	2301      	movs	r3, #1
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a2:	e0bc      	b.n	800981e <UART_SetConfig+0x5a6>
 80096a4:	2304      	movs	r3, #4
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096aa:	e0b8      	b.n	800981e <UART_SetConfig+0x5a6>
 80096ac:	2308      	movs	r3, #8
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b2:	e0b4      	b.n	800981e <UART_SetConfig+0x5a6>
 80096b4:	2310      	movs	r3, #16
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ba:	e0b0      	b.n	800981e <UART_SetConfig+0x5a6>
 80096bc:	2320      	movs	r3, #32
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c2:	e0ac      	b.n	800981e <UART_SetConfig+0x5a6>
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ca:	e0a8      	b.n	800981e <UART_SetConfig+0x5a6>
 80096cc:	2380      	movs	r3, #128	; 0x80
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d2:	e0a4      	b.n	800981e <UART_SetConfig+0x5a6>
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a8f      	ldr	r2, [pc, #572]	; (8009918 <UART_SetConfig+0x6a0>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d130      	bne.n	8009740 <UART_SetConfig+0x4c8>
 80096de:	4b8d      	ldr	r3, [pc, #564]	; (8009914 <UART_SetConfig+0x69c>)
 80096e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	2b05      	cmp	r3, #5
 80096e8:	d826      	bhi.n	8009738 <UART_SetConfig+0x4c0>
 80096ea:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <UART_SetConfig+0x478>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009709 	.word	0x08009709
 80096f4:	08009711 	.word	0x08009711
 80096f8:	08009719 	.word	0x08009719
 80096fc:	08009721 	.word	0x08009721
 8009700:	08009729 	.word	0x08009729
 8009704:	08009731 	.word	0x08009731
 8009708:	2300      	movs	r3, #0
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970e:	e086      	b.n	800981e <UART_SetConfig+0x5a6>
 8009710:	2304      	movs	r3, #4
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009716:	e082      	b.n	800981e <UART_SetConfig+0x5a6>
 8009718:	2308      	movs	r3, #8
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971e:	e07e      	b.n	800981e <UART_SetConfig+0x5a6>
 8009720:	2310      	movs	r3, #16
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009726:	e07a      	b.n	800981e <UART_SetConfig+0x5a6>
 8009728:	2320      	movs	r3, #32
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972e:	e076      	b.n	800981e <UART_SetConfig+0x5a6>
 8009730:	2340      	movs	r3, #64	; 0x40
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009736:	e072      	b.n	800981e <UART_SetConfig+0x5a6>
 8009738:	2380      	movs	r3, #128	; 0x80
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973e:	e06e      	b.n	800981e <UART_SetConfig+0x5a6>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a75      	ldr	r2, [pc, #468]	; (800991c <UART_SetConfig+0x6a4>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d130      	bne.n	80097ac <UART_SetConfig+0x534>
 800974a:	4b72      	ldr	r3, [pc, #456]	; (8009914 <UART_SetConfig+0x69c>)
 800974c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	2b05      	cmp	r3, #5
 8009754:	d826      	bhi.n	80097a4 <UART_SetConfig+0x52c>
 8009756:	a201      	add	r2, pc, #4	; (adr r2, 800975c <UART_SetConfig+0x4e4>)
 8009758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975c:	08009775 	.word	0x08009775
 8009760:	0800977d 	.word	0x0800977d
 8009764:	08009785 	.word	0x08009785
 8009768:	0800978d 	.word	0x0800978d
 800976c:	08009795 	.word	0x08009795
 8009770:	0800979d 	.word	0x0800979d
 8009774:	2300      	movs	r3, #0
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977a:	e050      	b.n	800981e <UART_SetConfig+0x5a6>
 800977c:	2304      	movs	r3, #4
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009782:	e04c      	b.n	800981e <UART_SetConfig+0x5a6>
 8009784:	2308      	movs	r3, #8
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978a:	e048      	b.n	800981e <UART_SetConfig+0x5a6>
 800978c:	2310      	movs	r3, #16
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009792:	e044      	b.n	800981e <UART_SetConfig+0x5a6>
 8009794:	2320      	movs	r3, #32
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979a:	e040      	b.n	800981e <UART_SetConfig+0x5a6>
 800979c:	2340      	movs	r3, #64	; 0x40
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a2:	e03c      	b.n	800981e <UART_SetConfig+0x5a6>
 80097a4:	2380      	movs	r3, #128	; 0x80
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097aa:	e038      	b.n	800981e <UART_SetConfig+0x5a6>
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a5b      	ldr	r2, [pc, #364]	; (8009920 <UART_SetConfig+0x6a8>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d130      	bne.n	8009818 <UART_SetConfig+0x5a0>
 80097b6:	4b57      	ldr	r3, [pc, #348]	; (8009914 <UART_SetConfig+0x69c>)
 80097b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	2b05      	cmp	r3, #5
 80097c0:	d826      	bhi.n	8009810 <UART_SetConfig+0x598>
 80097c2:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <UART_SetConfig+0x550>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	080097e1 	.word	0x080097e1
 80097cc:	080097e9 	.word	0x080097e9
 80097d0:	080097f1 	.word	0x080097f1
 80097d4:	080097f9 	.word	0x080097f9
 80097d8:	08009801 	.word	0x08009801
 80097dc:	08009809 	.word	0x08009809
 80097e0:	2302      	movs	r3, #2
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e6:	e01a      	b.n	800981e <UART_SetConfig+0x5a6>
 80097e8:	2304      	movs	r3, #4
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ee:	e016      	b.n	800981e <UART_SetConfig+0x5a6>
 80097f0:	2308      	movs	r3, #8
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f6:	e012      	b.n	800981e <UART_SetConfig+0x5a6>
 80097f8:	2310      	movs	r3, #16
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fe:	e00e      	b.n	800981e <UART_SetConfig+0x5a6>
 8009800:	2320      	movs	r3, #32
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009806:	e00a      	b.n	800981e <UART_SetConfig+0x5a6>
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980e:	e006      	b.n	800981e <UART_SetConfig+0x5a6>
 8009810:	2380      	movs	r3, #128	; 0x80
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009816:	e002      	b.n	800981e <UART_SetConfig+0x5a6>
 8009818:	2380      	movs	r3, #128	; 0x80
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a3f      	ldr	r2, [pc, #252]	; (8009920 <UART_SetConfig+0x6a8>)
 8009824:	4293      	cmp	r3, r2
 8009826:	f040 80f8 	bne.w	8009a1a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800982a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800982e:	2b20      	cmp	r3, #32
 8009830:	dc46      	bgt.n	80098c0 <UART_SetConfig+0x648>
 8009832:	2b02      	cmp	r3, #2
 8009834:	f2c0 8082 	blt.w	800993c <UART_SetConfig+0x6c4>
 8009838:	3b02      	subs	r3, #2
 800983a:	2b1e      	cmp	r3, #30
 800983c:	d87e      	bhi.n	800993c <UART_SetConfig+0x6c4>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <UART_SetConfig+0x5cc>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	080098c7 	.word	0x080098c7
 8009848:	0800993d 	.word	0x0800993d
 800984c:	080098cf 	.word	0x080098cf
 8009850:	0800993d 	.word	0x0800993d
 8009854:	0800993d 	.word	0x0800993d
 8009858:	0800993d 	.word	0x0800993d
 800985c:	080098df 	.word	0x080098df
 8009860:	0800993d 	.word	0x0800993d
 8009864:	0800993d 	.word	0x0800993d
 8009868:	0800993d 	.word	0x0800993d
 800986c:	0800993d 	.word	0x0800993d
 8009870:	0800993d 	.word	0x0800993d
 8009874:	0800993d 	.word	0x0800993d
 8009878:	0800993d 	.word	0x0800993d
 800987c:	080098ef 	.word	0x080098ef
 8009880:	0800993d 	.word	0x0800993d
 8009884:	0800993d 	.word	0x0800993d
 8009888:	0800993d 	.word	0x0800993d
 800988c:	0800993d 	.word	0x0800993d
 8009890:	0800993d 	.word	0x0800993d
 8009894:	0800993d 	.word	0x0800993d
 8009898:	0800993d 	.word	0x0800993d
 800989c:	0800993d 	.word	0x0800993d
 80098a0:	0800993d 	.word	0x0800993d
 80098a4:	0800993d 	.word	0x0800993d
 80098a8:	0800993d 	.word	0x0800993d
 80098ac:	0800993d 	.word	0x0800993d
 80098b0:	0800993d 	.word	0x0800993d
 80098b4:	0800993d 	.word	0x0800993d
 80098b8:	0800993d 	.word	0x0800993d
 80098bc:	0800992f 	.word	0x0800992f
 80098c0:	2b40      	cmp	r3, #64	; 0x40
 80098c2:	d037      	beq.n	8009934 <UART_SetConfig+0x6bc>
 80098c4:	e03a      	b.n	800993c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098c6:	f7fd fad3 	bl	8006e70 <HAL_RCCEx_GetD3PCLK1Freq>
 80098ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80098cc:	e03c      	b.n	8009948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fd fae2 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098dc:	e034      	b.n	8009948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098de:	f107 0318 	add.w	r3, r7, #24
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fd fc2e 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ec:	e02c      	b.n	8009948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098ee:	4b09      	ldr	r3, [pc, #36]	; (8009914 <UART_SetConfig+0x69c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d016      	beq.n	8009928 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098fa:	4b06      	ldr	r3, [pc, #24]	; (8009914 <UART_SetConfig+0x69c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	08db      	lsrs	r3, r3, #3
 8009900:	f003 0303 	and.w	r3, r3, #3
 8009904:	4a07      	ldr	r2, [pc, #28]	; (8009924 <UART_SetConfig+0x6ac>)
 8009906:	fa22 f303 	lsr.w	r3, r2, r3
 800990a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800990c:	e01c      	b.n	8009948 <UART_SetConfig+0x6d0>
 800990e:	bf00      	nop
 8009910:	40011400 	.word	0x40011400
 8009914:	58024400 	.word	0x58024400
 8009918:	40007800 	.word	0x40007800
 800991c:	40007c00 	.word	0x40007c00
 8009920:	58000c00 	.word	0x58000c00
 8009924:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009928:	4b9d      	ldr	r3, [pc, #628]	; (8009ba0 <UART_SetConfig+0x928>)
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800992c:	e00c      	b.n	8009948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800992e:	4b9d      	ldr	r3, [pc, #628]	; (8009ba4 <UART_SetConfig+0x92c>)
 8009930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009932:	e009      	b.n	8009948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800993a:	e005      	b.n	8009948 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009946:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 81de 	beq.w	8009d0c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	4a94      	ldr	r2, [pc, #592]	; (8009ba8 <UART_SetConfig+0x930>)
 8009956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800995a:	461a      	mov	r2, r3
 800995c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009962:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	4613      	mov	r3, r2
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	4413      	add	r3, r2
 800996e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009970:	429a      	cmp	r2, r3
 8009972:	d305      	bcc.n	8009980 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800997a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997c:	429a      	cmp	r2, r3
 800997e:	d903      	bls.n	8009988 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009986:	e1c1      	b.n	8009d0c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998a:	2200      	movs	r2, #0
 800998c:	60bb      	str	r3, [r7, #8]
 800998e:	60fa      	str	r2, [r7, #12]
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	4a84      	ldr	r2, [pc, #528]	; (8009ba8 <UART_SetConfig+0x930>)
 8009996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800999a:	b29b      	uxth	r3, r3
 800999c:	2200      	movs	r2, #0
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	607a      	str	r2, [r7, #4]
 80099a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099aa:	f7f6 fce9 	bl	8000380 <__aeabi_uldivmod>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4610      	mov	r0, r2
 80099b4:	4619      	mov	r1, r3
 80099b6:	f04f 0200 	mov.w	r2, #0
 80099ba:	f04f 0300 	mov.w	r3, #0
 80099be:	020b      	lsls	r3, r1, #8
 80099c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099c4:	0202      	lsls	r2, r0, #8
 80099c6:	6979      	ldr	r1, [r7, #20]
 80099c8:	6849      	ldr	r1, [r1, #4]
 80099ca:	0849      	lsrs	r1, r1, #1
 80099cc:	2000      	movs	r0, #0
 80099ce:	460c      	mov	r4, r1
 80099d0:	4605      	mov	r5, r0
 80099d2:	eb12 0804 	adds.w	r8, r2, r4
 80099d6:	eb43 0905 	adc.w	r9, r3, r5
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	469a      	mov	sl, r3
 80099e2:	4693      	mov	fp, r2
 80099e4:	4652      	mov	r2, sl
 80099e6:	465b      	mov	r3, fp
 80099e8:	4640      	mov	r0, r8
 80099ea:	4649      	mov	r1, r9
 80099ec:	f7f6 fcc8 	bl	8000380 <__aeabi_uldivmod>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4613      	mov	r3, r2
 80099f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099fe:	d308      	bcc.n	8009a12 <UART_SetConfig+0x79a>
 8009a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a06:	d204      	bcs.n	8009a12 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a0e:	60da      	str	r2, [r3, #12]
 8009a10:	e17c      	b.n	8009d0c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a18:	e178      	b.n	8009d0c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a22:	f040 80c5 	bne.w	8009bb0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009a26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	dc48      	bgt.n	8009ac0 <UART_SetConfig+0x848>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	db7b      	blt.n	8009b2a <UART_SetConfig+0x8b2>
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	d879      	bhi.n	8009b2a <UART_SetConfig+0x8b2>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <UART_SetConfig+0x7c4>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009ac7 	.word	0x08009ac7
 8009a40:	08009acf 	.word	0x08009acf
 8009a44:	08009b2b 	.word	0x08009b2b
 8009a48:	08009b2b 	.word	0x08009b2b
 8009a4c:	08009ad7 	.word	0x08009ad7
 8009a50:	08009b2b 	.word	0x08009b2b
 8009a54:	08009b2b 	.word	0x08009b2b
 8009a58:	08009b2b 	.word	0x08009b2b
 8009a5c:	08009ae7 	.word	0x08009ae7
 8009a60:	08009b2b 	.word	0x08009b2b
 8009a64:	08009b2b 	.word	0x08009b2b
 8009a68:	08009b2b 	.word	0x08009b2b
 8009a6c:	08009b2b 	.word	0x08009b2b
 8009a70:	08009b2b 	.word	0x08009b2b
 8009a74:	08009b2b 	.word	0x08009b2b
 8009a78:	08009b2b 	.word	0x08009b2b
 8009a7c:	08009af7 	.word	0x08009af7
 8009a80:	08009b2b 	.word	0x08009b2b
 8009a84:	08009b2b 	.word	0x08009b2b
 8009a88:	08009b2b 	.word	0x08009b2b
 8009a8c:	08009b2b 	.word	0x08009b2b
 8009a90:	08009b2b 	.word	0x08009b2b
 8009a94:	08009b2b 	.word	0x08009b2b
 8009a98:	08009b2b 	.word	0x08009b2b
 8009a9c:	08009b2b 	.word	0x08009b2b
 8009aa0:	08009b2b 	.word	0x08009b2b
 8009aa4:	08009b2b 	.word	0x08009b2b
 8009aa8:	08009b2b 	.word	0x08009b2b
 8009aac:	08009b2b 	.word	0x08009b2b
 8009ab0:	08009b2b 	.word	0x08009b2b
 8009ab4:	08009b2b 	.word	0x08009b2b
 8009ab8:	08009b2b 	.word	0x08009b2b
 8009abc:	08009b1d 	.word	0x08009b1d
 8009ac0:	2b40      	cmp	r3, #64	; 0x40
 8009ac2:	d02e      	beq.n	8009b22 <UART_SetConfig+0x8aa>
 8009ac4:	e031      	b.n	8009b2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ac6:	f7fb f9dd 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8009aca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009acc:	e033      	b.n	8009b36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ace:	f7fb f9ef 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 8009ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ad4:	e02f      	b.n	8009b36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fd f9de 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ae4:	e027      	b.n	8009b36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ae6:	f107 0318 	add.w	r3, r7, #24
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fd fb2a 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009af4:	e01f      	b.n	8009b36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009af6:	4b2d      	ldr	r3, [pc, #180]	; (8009bac <UART_SetConfig+0x934>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0320 	and.w	r3, r3, #32
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d009      	beq.n	8009b16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b02:	4b2a      	ldr	r3, [pc, #168]	; (8009bac <UART_SetConfig+0x934>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	08db      	lsrs	r3, r3, #3
 8009b08:	f003 0303 	and.w	r3, r3, #3
 8009b0c:	4a24      	ldr	r2, [pc, #144]	; (8009ba0 <UART_SetConfig+0x928>)
 8009b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b14:	e00f      	b.n	8009b36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b16:	4b22      	ldr	r3, [pc, #136]	; (8009ba0 <UART_SetConfig+0x928>)
 8009b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b1a:	e00c      	b.n	8009b36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b1c:	4b21      	ldr	r3, [pc, #132]	; (8009ba4 <UART_SetConfig+0x92c>)
 8009b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b20:	e009      	b.n	8009b36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b28:	e005      	b.n	8009b36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009b34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 80e7 	beq.w	8009d0c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	4a19      	ldr	r2, [pc, #100]	; (8009ba8 <UART_SetConfig+0x930>)
 8009b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b50:	005a      	lsls	r2, r3, #1
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	085b      	lsrs	r3, r3, #1
 8009b58:	441a      	add	r2, r3
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b66:	2b0f      	cmp	r3, #15
 8009b68:	d916      	bls.n	8009b98 <UART_SetConfig+0x920>
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b70:	d212      	bcs.n	8009b98 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	f023 030f 	bic.w	r3, r3, #15
 8009b7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7e:	085b      	lsrs	r3, r3, #1
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009b94:	60da      	str	r2, [r3, #12]
 8009b96:	e0b9      	b.n	8009d0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009b9e:	e0b5      	b.n	8009d0c <UART_SetConfig+0xa94>
 8009ba0:	03d09000 	.word	0x03d09000
 8009ba4:	003d0900 	.word	0x003d0900
 8009ba8:	0800df54 	.word	0x0800df54
 8009bac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009bb4:	2b20      	cmp	r3, #32
 8009bb6:	dc49      	bgt.n	8009c4c <UART_SetConfig+0x9d4>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	db7c      	blt.n	8009cb6 <UART_SetConfig+0xa3e>
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d87a      	bhi.n	8009cb6 <UART_SetConfig+0xa3e>
 8009bc0:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <UART_SetConfig+0x950>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009c53 	.word	0x08009c53
 8009bcc:	08009c5b 	.word	0x08009c5b
 8009bd0:	08009cb7 	.word	0x08009cb7
 8009bd4:	08009cb7 	.word	0x08009cb7
 8009bd8:	08009c63 	.word	0x08009c63
 8009bdc:	08009cb7 	.word	0x08009cb7
 8009be0:	08009cb7 	.word	0x08009cb7
 8009be4:	08009cb7 	.word	0x08009cb7
 8009be8:	08009c73 	.word	0x08009c73
 8009bec:	08009cb7 	.word	0x08009cb7
 8009bf0:	08009cb7 	.word	0x08009cb7
 8009bf4:	08009cb7 	.word	0x08009cb7
 8009bf8:	08009cb7 	.word	0x08009cb7
 8009bfc:	08009cb7 	.word	0x08009cb7
 8009c00:	08009cb7 	.word	0x08009cb7
 8009c04:	08009cb7 	.word	0x08009cb7
 8009c08:	08009c83 	.word	0x08009c83
 8009c0c:	08009cb7 	.word	0x08009cb7
 8009c10:	08009cb7 	.word	0x08009cb7
 8009c14:	08009cb7 	.word	0x08009cb7
 8009c18:	08009cb7 	.word	0x08009cb7
 8009c1c:	08009cb7 	.word	0x08009cb7
 8009c20:	08009cb7 	.word	0x08009cb7
 8009c24:	08009cb7 	.word	0x08009cb7
 8009c28:	08009cb7 	.word	0x08009cb7
 8009c2c:	08009cb7 	.word	0x08009cb7
 8009c30:	08009cb7 	.word	0x08009cb7
 8009c34:	08009cb7 	.word	0x08009cb7
 8009c38:	08009cb7 	.word	0x08009cb7
 8009c3c:	08009cb7 	.word	0x08009cb7
 8009c40:	08009cb7 	.word	0x08009cb7
 8009c44:	08009cb7 	.word	0x08009cb7
 8009c48:	08009ca9 	.word	0x08009ca9
 8009c4c:	2b40      	cmp	r3, #64	; 0x40
 8009c4e:	d02e      	beq.n	8009cae <UART_SetConfig+0xa36>
 8009c50:	e031      	b.n	8009cb6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c52:	f7fb f917 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8009c56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c58:	e033      	b.n	8009cc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c5a:	f7fb f929 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 8009c5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c60:	e02f      	b.n	8009cc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fd f918 	bl	8006e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c70:	e027      	b.n	8009cc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c72:	f107 0318 	add.w	r3, r7, #24
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd fa64 	bl	8007144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c80:	e01f      	b.n	8009cc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c82:	4b2d      	ldr	r3, [pc, #180]	; (8009d38 <UART_SetConfig+0xac0>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0320 	and.w	r3, r3, #32
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c8e:	4b2a      	ldr	r3, [pc, #168]	; (8009d38 <UART_SetConfig+0xac0>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	08db      	lsrs	r3, r3, #3
 8009c94:	f003 0303 	and.w	r3, r3, #3
 8009c98:	4a28      	ldr	r2, [pc, #160]	; (8009d3c <UART_SetConfig+0xac4>)
 8009c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ca0:	e00f      	b.n	8009cc2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009ca2:	4b26      	ldr	r3, [pc, #152]	; (8009d3c <UART_SetConfig+0xac4>)
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca6:	e00c      	b.n	8009cc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ca8:	4b25      	ldr	r3, [pc, #148]	; (8009d40 <UART_SetConfig+0xac8>)
 8009caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cac:	e009      	b.n	8009cc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cb4:	e005      	b.n	8009cc2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009cc0:	bf00      	nop
    }

    if (pclk != 0U)
 8009cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d021      	beq.n	8009d0c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	4a1d      	ldr	r2, [pc, #116]	; (8009d44 <UART_SetConfig+0xacc>)
 8009cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	441a      	add	r2, r3
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	2b0f      	cmp	r3, #15
 8009cf0:	d909      	bls.n	8009d06 <UART_SetConfig+0xa8e>
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cf8:	d205      	bcs.n	8009d06 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60da      	str	r2, [r3, #12]
 8009d04:	e002      	b.n	8009d0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2200      	movs	r2, #0
 8009d26:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009d28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3748      	adds	r7, #72	; 0x48
 8009d30:	46bd      	mov	sp, r7
 8009d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d36:	bf00      	nop
 8009d38:	58024400 	.word	0x58024400
 8009d3c:	03d09000 	.word	0x03d09000
 8009d40:	003d0900 	.word	0x003d0900
 8009d44:	0800df54 	.word	0x0800df54

08009d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	f003 0308 	and.w	r3, r3, #8
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	f003 0310 	and.w	r3, r3, #16
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01a      	beq.n	8009e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e46:	d10a      	bne.n	8009e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	605a      	str	r2, [r3, #4]
  }
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b098      	sub	sp, #96	; 0x60
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e9c:	f7f8 fafe 	bl	800249c <HAL_GetTick>
 8009ea0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0308 	and.w	r3, r3, #8
 8009eac:	2b08      	cmp	r3, #8
 8009eae:	d12f      	bne.n	8009f10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f88e 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d022      	beq.n	8009f10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed2:	e853 3f00 	ldrex	r3, [r3]
 8009ed6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ede:	653b      	str	r3, [r7, #80]	; 0x50
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8009eea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ef0:	e841 2300 	strex	r3, r2, [r1]
 8009ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1e6      	bne.n	8009eca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e063      	b.n	8009fd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0304 	and.w	r3, r3, #4
 8009f1a:	2b04      	cmp	r3, #4
 8009f1c:	d149      	bne.n	8009fb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f26:	2200      	movs	r2, #0
 8009f28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f857 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d03c      	beq.n	8009fb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	623b      	str	r3, [r7, #32]
   return(result);
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f56:	633b      	str	r3, [r7, #48]	; 0x30
 8009f58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e6      	bne.n	8009f38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	e853 3f00 	ldrex	r3, [r3]
 8009f78:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f023 0301 	bic.w	r3, r3, #1
 8009f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f8a:	61fa      	str	r2, [r7, #28]
 8009f8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8e:	69b9      	ldr	r1, [r7, #24]
 8009f90:	69fa      	ldr	r2, [r7, #28]
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	617b      	str	r3, [r7, #20]
   return(result);
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e5      	bne.n	8009f6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e012      	b.n	8009fd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2220      	movs	r2, #32
 8009fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3758      	adds	r7, #88	; 0x58
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	4613      	mov	r3, r2
 8009fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff0:	e049      	b.n	800a086 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff8:	d045      	beq.n	800a086 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ffa:	f7f8 fa4f 	bl	800249c <HAL_GetTick>
 8009ffe:	4602      	mov	r2, r0
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	429a      	cmp	r2, r3
 800a008:	d302      	bcc.n	800a010 <UART_WaitOnFlagUntilTimeout+0x30>
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e048      	b.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0304 	and.w	r3, r3, #4
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d031      	beq.n	800a086 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d110      	bne.n	800a052 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2208      	movs	r2, #8
 800a036:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 f839 	bl	800a0b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2208      	movs	r2, #8
 800a042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e029      	b.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69db      	ldr	r3, [r3, #28]
 800a058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a05c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a060:	d111      	bne.n	800a086 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a06a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 f81f 	bl	800a0b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2220      	movs	r2, #32
 800a076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e00f      	b.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69da      	ldr	r2, [r3, #28]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	4013      	ands	r3, r2
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	bf0c      	ite	eq
 800a096:	2301      	moveq	r3, #1
 800a098:	2300      	movne	r3, #0
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	79fb      	ldrb	r3, [r7, #7]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d0a6      	beq.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b095      	sub	sp, #84	; 0x54
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c0:	e853 3f00 	ldrex	r3, [r3]
 800a0c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a0d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0de:	e841 2300 	strex	r3, r2, [r1]
 800a0e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1e6      	bne.n	800a0b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	4b1e      	ldr	r3, [pc, #120]	; (800a178 <UART_EndRxTransfer+0xc8>)
 800a0fe:	4013      	ands	r3, r2
 800a100:	64bb      	str	r3, [r7, #72]	; 0x48
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3308      	adds	r3, #8
 800a108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a10a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a10c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e5      	bne.n	800a0ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a122:	2b01      	cmp	r3, #1
 800a124:	d118      	bne.n	800a158 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	e853 3f00 	ldrex	r3, [r3]
 800a132:	60bb      	str	r3, [r7, #8]
   return(result);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f023 0310 	bic.w	r3, r3, #16
 800a13a:	647b      	str	r3, [r7, #68]	; 0x44
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	461a      	mov	r2, r3
 800a142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a144:	61bb      	str	r3, [r7, #24]
 800a146:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a148:	6979      	ldr	r1, [r7, #20]
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	e841 2300 	strex	r3, r2, [r1]
 800a150:	613b      	str	r3, [r7, #16]
   return(result);
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e6      	bne.n	800a126 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2220      	movs	r2, #32
 800a15c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a16c:	bf00      	nop
 800a16e:	3754      	adds	r7, #84	; 0x54
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	effffffe 	.word	0xeffffffe

0800a17c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d101      	bne.n	800a192 <HAL_UARTEx_DisableFifoMode+0x16>
 800a18e:	2302      	movs	r3, #2
 800a190:	e027      	b.n	800a1e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2224      	movs	r2, #36	; 0x24
 800a19e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 0201 	bic.w	r2, r2, #1
 800a1b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a1c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a202:	2302      	movs	r3, #2
 800a204:	e02d      	b.n	800a262 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2224      	movs	r2, #36	; 0x24
 800a212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 0201 	bic.w	r2, r2, #1
 800a22c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f850 	bl	800a2e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b084      	sub	sp, #16
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d101      	bne.n	800a282 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a27e:	2302      	movs	r3, #2
 800a280:	e02d      	b.n	800a2de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2224      	movs	r2, #36	; 0x24
 800a28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f022 0201 	bic.w	r2, r2, #1
 800a2a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f812 	bl	800a2e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d108      	bne.n	800a30a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a308:	e031      	b.n	800a36e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a30a:	2310      	movs	r3, #16
 800a30c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a30e:	2310      	movs	r3, #16
 800a310:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	0e5b      	lsrs	r3, r3, #25
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f003 0307 	and.w	r3, r3, #7
 800a320:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	0f5b      	lsrs	r3, r3, #29
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	f003 0307 	and.w	r3, r3, #7
 800a330:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a332:	7bbb      	ldrb	r3, [r7, #14]
 800a334:	7b3a      	ldrb	r2, [r7, #12]
 800a336:	4911      	ldr	r1, [pc, #68]	; (800a37c <UARTEx_SetNbDataToProcess+0x94>)
 800a338:	5c8a      	ldrb	r2, [r1, r2]
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a33e:	7b3a      	ldrb	r2, [r7, #12]
 800a340:	490f      	ldr	r1, [pc, #60]	; (800a380 <UARTEx_SetNbDataToProcess+0x98>)
 800a342:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a344:	fb93 f3f2 	sdiv	r3, r3, r2
 800a348:	b29a      	uxth	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	7b7a      	ldrb	r2, [r7, #13]
 800a354:	4909      	ldr	r1, [pc, #36]	; (800a37c <UARTEx_SetNbDataToProcess+0x94>)
 800a356:	5c8a      	ldrb	r2, [r1, r2]
 800a358:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a35c:	7b7a      	ldrb	r2, [r7, #13]
 800a35e:	4908      	ldr	r1, [pc, #32]	; (800a380 <UARTEx_SetNbDataToProcess+0x98>)
 800a360:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a362:	fb93 f3f2 	sdiv	r3, r3, r2
 800a366:	b29a      	uxth	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a36e:	bf00      	nop
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	0800df6c 	.word	0x0800df6c
 800a380:	0800df74 	.word	0x0800df74

0800a384 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a384:	b084      	sub	sp, #16
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	f107 001c 	add.w	r0, r7, #28
 800a392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a39a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a39c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a39e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a3a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a3a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a3aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <SDMMC_Init+0x50>)
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	b004      	add	sp, #16
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	ffc02c00 	.word	0xffc02c00

0800a3d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f043 0203 	orr.w	r2, r3, #3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 0303 	and.w	r3, r3, #3
}
 800a446:	4618      	mov	r0, r3
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
	...

0800a454 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a472:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a478:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a47e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4313      	orrs	r3, r2
 800a484:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <SDMMC_SendCommand+0x50>)
 800a48c:	4013      	ands	r3, r2
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	431a      	orrs	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	fffee0c0 	.word	0xfffee0c0

0800a4a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	b2db      	uxtb	r3, r3
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3314      	adds	r3, #20
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a50e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a514:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a51a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	4313      	orrs	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a526:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	431a      	orrs	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a532:	2300      	movs	r3, #0

}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a54e:	2310      	movs	r3, #16
 800a550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a552:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a558:	2300      	movs	r3, #0
 800a55a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a55c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a560:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a562:	f107 0308 	add.w	r3, r7, #8
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff ff73 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a56e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a572:	2110      	movs	r1, #16
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fa5f 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a57a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a57c:	69fb      	ldr	r3, [r7, #28]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3720      	adds	r7, #32
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b088      	sub	sp, #32
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a594:	2311      	movs	r3, #17
 800a596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a59c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5a8:	f107 0308 	add.w	r3, r7, #8
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7ff ff50 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a5b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5b8:	2111      	movs	r1, #17
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fa3c 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a5c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5c2:	69fb      	ldr	r3, [r7, #28]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3720      	adds	r7, #32
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b088      	sub	sp, #32
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a5da:	2312      	movs	r3, #18
 800a5dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5ee:	f107 0308 	add.w	r3, r7, #8
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff ff2d 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a5fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5fe:	2112      	movs	r1, #18
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fa19 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a608:	69fb      	ldr	r3, [r7, #28]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3720      	adds	r7, #32
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b088      	sub	sp, #32
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a620:	2318      	movs	r3, #24
 800a622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a624:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a62a:	2300      	movs	r3, #0
 800a62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a62e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a634:	f107 0308 	add.w	r3, r7, #8
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7ff ff0a 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a640:	f241 3288 	movw	r2, #5000	; 0x1388
 800a644:	2118      	movs	r1, #24
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f9f6 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a64c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a64e:	69fb      	ldr	r3, [r7, #28]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3720      	adds	r7, #32
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a666:	2319      	movs	r3, #25
 800a668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a66a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a66e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a670:	2300      	movs	r3, #0
 800a672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a678:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a67a:	f107 0308 	add.w	r3, r7, #8
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff fee7 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a686:	f241 3288 	movw	r2, #5000	; 0x1388
 800a68a:	2119      	movs	r1, #25
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f9d3 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a694:	69fb      	ldr	r3, [r7, #28]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3720      	adds	r7, #32
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a6ac:	230c      	movs	r3, #12
 800a6ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6be:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6d8:	f107 0308 	add.w	r3, r7, #8
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff feb8 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a6e4:	4a0b      	ldr	r2, [pc, #44]	; (800a714 <SDMMC_CmdStopTransfer+0x74>)
 800a6e6:	210c      	movs	r1, #12
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f9a5 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a6ee:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a702:	d101      	bne.n	800a708 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a704:	2300      	movs	r3, #0
 800a706:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a708:	69fb      	ldr	r3, [r7, #28]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3720      	adds	r7, #32
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	05f5e100 	.word	0x05f5e100

0800a718 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a726:	2307      	movs	r3, #7
 800a728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a72a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a72e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a730:	2300      	movs	r3, #0
 800a732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a738:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a73a:	f107 0308 	add.w	r3, r7, #8
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff fe87 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a746:	f241 3288 	movw	r2, #5000	; 0x1388
 800a74a:	2107      	movs	r1, #7
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f973 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a754:	69fb      	ldr	r3, [r7, #28]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3720      	adds	r7, #32
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b088      	sub	sp, #32
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a76a:	2300      	movs	r3, #0
 800a76c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a76e:	2300      	movs	r3, #0
 800a770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a772:	2300      	movs	r3, #0
 800a774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a77a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a77c:	f107 0308 	add.w	r3, r7, #8
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fe66 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fb97 	bl	800aebc <SDMMC_GetCmdError>
 800a78e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a790:	69fb      	ldr	r3, [r7, #28]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3720      	adds	r7, #32
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b088      	sub	sp, #32
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a7a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a7a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a7a8:	2308      	movs	r3, #8
 800a7aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7bc:	f107 0308 	add.w	r3, r7, #8
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7ff fe46 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fb29 	bl	800ae20 <SDMMC_GetCmdResp7>
 800a7ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3720      	adds	r7, #32
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b088      	sub	sp, #32
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a7e8:	2337      	movs	r3, #55	; 0x37
 800a7ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7fc:	f107 0308 	add.w	r3, r7, #8
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff fe26 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a808:	f241 3288 	movw	r2, #5000	; 0x1388
 800a80c:	2137      	movs	r1, #55	; 0x37
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f912 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a816:	69fb      	ldr	r3, [r7, #28]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3720      	adds	r7, #32
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b088      	sub	sp, #32
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a82e:	2329      	movs	r3, #41	; 0x29
 800a830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a832:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a838:	2300      	movs	r3, #0
 800a83a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a83c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a840:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7ff fe03 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa2e 	bl	800acb0 <SDMMC_GetCmdResp3>
 800a854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a856:	69fb      	ldr	r3, [r7, #28]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3720      	adds	r7, #32
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a86e:	2306      	movs	r3, #6
 800a870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a872:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a878:	2300      	movs	r3, #0
 800a87a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a87c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a880:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff fde3 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a88e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a892:	2106      	movs	r1, #6
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f8cf 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a89a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a89c:	69fb      	ldr	r3, [r7, #28]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b088      	sub	sp, #32
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a8b2:	2333      	movs	r3, #51	; 0x33
 800a8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c6:	f107 0308 	add.w	r3, r7, #8
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff fdc1 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a8d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d6:	2133      	movs	r1, #51	; 0x33
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f8ad 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a8de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8e0:	69fb      	ldr	r3, [r7, #28]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3720      	adds	r7, #32
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b088      	sub	sp, #32
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a8fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a8fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a908:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff fd9f 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f980 	bl	800ac1c <SDMMC_GetCmdResp2>
 800a91c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a91e:	69fb      	ldr	r3, [r7, #28]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a936:	2309      	movs	r3, #9
 800a938:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a93a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a93e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a948:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a94a:	f107 0308 	add.w	r3, r7, #8
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7ff fd7f 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f960 	bl	800ac1c <SDMMC_GetCmdResp2>
 800a95c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a95e:	69fb      	ldr	r3, [r7, #28]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a972:	2300      	movs	r3, #0
 800a974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a976:	2303      	movs	r3, #3
 800a978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a97a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a97e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a980:	2300      	movs	r3, #0
 800a982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a988:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fd5f 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	2103      	movs	r1, #3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f9c8 	bl	800ad30 <SDMMC_GetCmdResp6>
 800a9a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9a2:	69fb      	ldr	r3, [r7, #28]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3720      	adds	r7, #32
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b088      	sub	sp, #32
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a9ba:	230d      	movs	r3, #13
 800a9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff fd3d 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9de:	210d      	movs	r1, #13
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f829 	bl	800aa38 <SDMMC_GetCmdResp1>
 800a9e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3720      	adds	r7, #32
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b088      	sub	sp, #32
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a9fe:	230d      	movs	r3, #13
 800aa00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa12:	f107 0308 	add.w	r3, r7, #8
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff fd1b 	bl	800a454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800aa1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa22:	210d      	movs	r1, #13
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f807 	bl	800aa38 <SDMMC_GetCmdResp1>
 800aa2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	460b      	mov	r3, r1
 800aa42:	607a      	str	r2, [r7, #4]
 800aa44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800aa46:	4b70      	ldr	r3, [pc, #448]	; (800ac08 <SDMMC_GetCmdResp1+0x1d0>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a70      	ldr	r2, [pc, #448]	; (800ac0c <SDMMC_GetCmdResp1+0x1d4>)
 800aa4c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa50:	0a5a      	lsrs	r2, r3, #9
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	fb02 f303 	mul.w	r3, r2, r3
 800aa58:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	1e5a      	subs	r2, r3, #1
 800aa5e:	61fa      	str	r2, [r7, #28]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d102      	bne.n	800aa6a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa68:	e0c9      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa6e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	4b67      	ldr	r3, [pc, #412]	; (800ac10 <SDMMC_GetCmdResp1+0x1d8>)
 800aa74:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0ef      	beq.n	800aa5a <SDMMC_GetCmdResp1+0x22>
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1ea      	bne.n	800aa5a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d004      	beq.n	800aa9a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2204      	movs	r2, #4
 800aa94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa96:	2304      	movs	r3, #4
 800aa98:	e0b1      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d004      	beq.n	800aab0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e0a6      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4a58      	ldr	r2, [pc, #352]	; (800ac14 <SDMMC_GetCmdResp1+0x1dc>)
 800aab4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff fcf6 	bl	800a4a8 <SDMMC_GetCommandResponse>
 800aabc:	4603      	mov	r3, r0
 800aabe:	461a      	mov	r2, r3
 800aac0:	7afb      	ldrb	r3, [r7, #11]
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d001      	beq.n	800aaca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e099      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aaca:	2100      	movs	r1, #0
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f7ff fcf8 	bl	800a4c2 <SDMMC_GetResponse>
 800aad2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	4b50      	ldr	r3, [pc, #320]	; (800ac18 <SDMMC_GetCmdResp1+0x1e0>)
 800aad8:	4013      	ands	r3, r2
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aade:	2300      	movs	r3, #0
 800aae0:	e08d      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	da02      	bge.n	800aaee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aaec:	e087      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aaf8:	2340      	movs	r3, #64	; 0x40
 800aafa:	e080      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ab06:	2380      	movs	r3, #128	; 0x80
 800ab08:	e079      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ab14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab18:	e071      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ab24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab28:	e069      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ab34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab38:	e061      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ab44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab48:	e059      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab58:	e051      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d002      	beq.n	800ab6a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab68:	e049      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab78:	e041      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab88:	e039      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab98:	e031      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aba8:	e029      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800abb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800abb8:	e021      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800abc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800abc8:	e019      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d002      	beq.n	800abda <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800abd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800abd8:	e011      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d002      	beq.n	800abea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800abe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abe8:	e009      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f003 0308 	and.w	r3, r3, #8
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800abf4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abf8:	e001      	b.n	800abfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3720      	adds	r7, #32
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	24000000 	.word	0x24000000
 800ac0c:	10624dd3 	.word	0x10624dd3
 800ac10:	00200045 	.word	0x00200045
 800ac14:	002000c5 	.word	0x002000c5
 800ac18:	fdffe008 	.word	0xfdffe008

0800ac1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac24:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <SDMMC_GetCmdResp2+0x88>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a1f      	ldr	r2, [pc, #124]	; (800aca8 <SDMMC_GetCmdResp2+0x8c>)
 800ac2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac2e:	0a5b      	lsrs	r3, r3, #9
 800ac30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac34:	fb02 f303 	mul.w	r3, r2, r3
 800ac38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	1e5a      	subs	r2, r3, #1
 800ac3e:	60fa      	str	r2, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac48:	e026      	b.n	800ac98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d0ef      	beq.n	800ac3a <SDMMC_GetCmdResp2+0x1e>
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1ea      	bne.n	800ac3a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d004      	beq.n	800ac7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2204      	movs	r2, #4
 800ac74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac76:	2304      	movs	r3, #4
 800ac78:	e00e      	b.n	800ac98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e003      	b.n	800ac98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a06      	ldr	r2, [pc, #24]	; (800acac <SDMMC_GetCmdResp2+0x90>)
 800ac94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
 800aca4:	24000000 	.word	0x24000000
 800aca8:	10624dd3 	.word	0x10624dd3
 800acac:	002000c5 	.word	0x002000c5

0800acb0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800acb8:	4b1a      	ldr	r3, [pc, #104]	; (800ad24 <SDMMC_GetCmdResp3+0x74>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a1a      	ldr	r2, [pc, #104]	; (800ad28 <SDMMC_GetCmdResp3+0x78>)
 800acbe:	fba2 2303 	umull	r2, r3, r2, r3
 800acc2:	0a5b      	lsrs	r3, r3, #9
 800acc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc8:	fb02 f303 	mul.w	r3, r2, r3
 800accc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	1e5a      	subs	r2, r3, #1
 800acd2:	60fa      	str	r2, [r7, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d102      	bne.n	800acde <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acdc:	e01b      	b.n	800ad16 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800acea:	2b00      	cmp	r3, #0
 800acec:	d0ef      	beq.n	800acce <SDMMC_GetCmdResp3+0x1e>
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1ea      	bne.n	800acce <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d004      	beq.n	800ad0e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2204      	movs	r2, #4
 800ad08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad0a:	2304      	movs	r3, #4
 800ad0c:	e003      	b.n	800ad16 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a06      	ldr	r2, [pc, #24]	; (800ad2c <SDMMC_GetCmdResp3+0x7c>)
 800ad12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	24000000 	.word	0x24000000
 800ad28:	10624dd3 	.word	0x10624dd3
 800ad2c:	002000c5 	.word	0x002000c5

0800ad30 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ad3e:	4b35      	ldr	r3, [pc, #212]	; (800ae14 <SDMMC_GetCmdResp6+0xe4>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a35      	ldr	r2, [pc, #212]	; (800ae18 <SDMMC_GetCmdResp6+0xe8>)
 800ad44:	fba2 2303 	umull	r2, r3, r2, r3
 800ad48:	0a5b      	lsrs	r3, r3, #9
 800ad4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad4e:	fb02 f303 	mul.w	r3, r2, r3
 800ad52:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	1e5a      	subs	r2, r3, #1
 800ad58:	61fa      	str	r2, [r7, #28]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d102      	bne.n	800ad64 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad62:	e052      	b.n	800ae0a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad68:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d0ef      	beq.n	800ad54 <SDMMC_GetCmdResp6+0x24>
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1ea      	bne.n	800ad54 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad82:	f003 0304 	and.w	r3, r3, #4
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d004      	beq.n	800ad94 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2204      	movs	r2, #4
 800ad8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad90:	2304      	movs	r3, #4
 800ad92:	e03a      	b.n	800ae0a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d004      	beq.n	800adaa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2201      	movs	r2, #1
 800ada4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e02f      	b.n	800ae0a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f7ff fb7c 	bl	800a4a8 <SDMMC_GetCommandResponse>
 800adb0:	4603      	mov	r3, r0
 800adb2:	461a      	mov	r2, r3
 800adb4:	7afb      	ldrb	r3, [r7, #11]
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d001      	beq.n	800adbe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adba:	2301      	movs	r3, #1
 800adbc:	e025      	b.n	800ae0a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4a16      	ldr	r2, [pc, #88]	; (800ae1c <SDMMC_GetCmdResp6+0xec>)
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800adc4:	2100      	movs	r1, #0
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f7ff fb7b 	bl	800a4c2 <SDMMC_GetResponse>
 800adcc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d106      	bne.n	800ade6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	0c1b      	lsrs	r3, r3, #16
 800addc:	b29a      	uxth	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ade2:	2300      	movs	r3, #0
 800ade4:	e011      	b.n	800ae0a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800adf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adf4:	e009      	b.n	800ae0a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae04:	e001      	b.n	800ae0a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3720      	adds	r7, #32
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	24000000 	.word	0x24000000
 800ae18:	10624dd3 	.word	0x10624dd3
 800ae1c:	002000c5 	.word	0x002000c5

0800ae20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae28:	4b22      	ldr	r3, [pc, #136]	; (800aeb4 <SDMMC_GetCmdResp7+0x94>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a22      	ldr	r2, [pc, #136]	; (800aeb8 <SDMMC_GetCmdResp7+0x98>)
 800ae2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae32:	0a5b      	lsrs	r3, r3, #9
 800ae34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae38:	fb02 f303 	mul.w	r3, r2, r3
 800ae3c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	1e5a      	subs	r2, r3, #1
 800ae42:	60fa      	str	r2, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d102      	bne.n	800ae4e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae4c:	e02c      	b.n	800aea8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae52:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d0ef      	beq.n	800ae3e <SDMMC_GetCmdResp7+0x1e>
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1ea      	bne.n	800ae3e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae6c:	f003 0304 	and.w	r3, r3, #4
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d004      	beq.n	800ae7e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2204      	movs	r2, #4
 800ae78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae7a:	2304      	movs	r3, #4
 800ae7c:	e014      	b.n	800aea8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d004      	beq.n	800ae94 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e009      	b.n	800aea8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2240      	movs	r2, #64	; 0x40
 800aea4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aea6:	2300      	movs	r3, #0

}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	24000000 	.word	0x24000000
 800aeb8:	10624dd3 	.word	0x10624dd3

0800aebc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aec4:	4b11      	ldr	r3, [pc, #68]	; (800af0c <SDMMC_GetCmdError+0x50>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a11      	ldr	r2, [pc, #68]	; (800af10 <SDMMC_GetCmdError+0x54>)
 800aeca:	fba2 2303 	umull	r2, r3, r2, r3
 800aece:	0a5b      	lsrs	r3, r3, #9
 800aed0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed4:	fb02 f303 	mul.w	r3, r2, r3
 800aed8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	1e5a      	subs	r2, r3, #1
 800aede:	60fa      	str	r2, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aee4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aee8:	e009      	b.n	800aefe <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0f1      	beq.n	800aeda <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a06      	ldr	r2, [pc, #24]	; (800af14 <SDMMC_GetCmdError+0x58>)
 800aefa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	24000000 	.word	0x24000000
 800af10:	10624dd3 	.word	0x10624dd3
 800af14:	002000c5 	.word	0x002000c5

0800af18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800af1c:	4904      	ldr	r1, [pc, #16]	; (800af30 <MX_FATFS_Init+0x18>)
 800af1e:	4805      	ldr	r0, [pc, #20]	; (800af34 <MX_FATFS_Init+0x1c>)
 800af20:	f002 fb16 	bl	800d550 <FATFS_LinkDriver>
 800af24:	4603      	mov	r3, r0
 800af26:	461a      	mov	r2, r3
 800af28:	4b03      	ldr	r3, [pc, #12]	; (800af38 <MX_FATFS_Init+0x20>)
 800af2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af2c:	bf00      	nop
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	24000220 	.word	0x24000220
 800af34:	0800df7c 	.word	0x0800df7c
 800af38:	2400021c 	.word	0x2400021c

0800af3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af42:	4618      	mov	r0, r3
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af56:	f000 f879 	bl	800b04c <BSP_SD_IsDetected>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d001      	beq.n	800af64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800af60:	2302      	movs	r3, #2
 800af62:	e012      	b.n	800af8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800af64:	480b      	ldr	r0, [pc, #44]	; (800af94 <BSP_SD_Init+0x48>)
 800af66:	f7fc fcf7 	bl	8007958 <HAL_SD_Init>
 800af6a:	4603      	mov	r3, r0
 800af6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af6e:	79fb      	ldrb	r3, [r7, #7]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d109      	bne.n	800af88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800af74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800af78:	4806      	ldr	r0, [pc, #24]	; (800af94 <BSP_SD_Init+0x48>)
 800af7a:	f7fd fbb3 	bl	80086e4 <HAL_SD_ConfigWideBusOperation>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af88:	79fb      	ldrb	r3, [r7, #7]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	240000e8 	.word	0x240000e8

0800af98 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af02      	add	r7, sp, #8
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	68f9      	ldr	r1, [r7, #12]
 800afb4:	4806      	ldr	r0, [pc, #24]	; (800afd0 <BSP_SD_ReadBlocks+0x38>)
 800afb6:	f7fc fdef 	bl	8007b98 <HAL_SD_ReadBlocks>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	240000e8 	.word	0x240000e8

0800afd4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af02      	add	r7, sp, #8
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	4806      	ldr	r0, [pc, #24]	; (800b00c <BSP_SD_WriteBlocks+0x38>)
 800aff2:	f7fc ff5b 	bl	8007eac <HAL_SD_WriteBlocks>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b000:	7dfb      	ldrb	r3, [r7, #23]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	240000e8 	.word	0x240000e8

0800b010 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b014:	4805      	ldr	r0, [pc, #20]	; (800b02c <BSP_SD_GetCardState+0x1c>)
 800b016:	f7fd fc77 	bl	8008908 <HAL_SD_GetCardState>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b04      	cmp	r3, #4
 800b01e:	bf14      	ite	ne
 800b020:	2301      	movne	r3, #1
 800b022:	2300      	moveq	r3, #0
 800b024:	b2db      	uxtb	r3, r3
}
 800b026:	4618      	mov	r0, r3
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	240000e8 	.word	0x240000e8

0800b030 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b038:	6879      	ldr	r1, [r7, #4]
 800b03a:	4803      	ldr	r0, [pc, #12]	; (800b048 <BSP_SD_GetCardInfo+0x18>)
 800b03c:	f7fd fb26 	bl	800868c <HAL_SD_GetCardInfo>
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	240000e8 	.word	0x240000e8

0800b04c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b052:	2301      	movs	r3, #1
 800b054:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b056:	f000 f80b 	bl	800b070 <BSP_PlatformIsDetected>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b060:	2300      	movs	r3, #0
 800b062:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b064:	79fb      	ldrb	r3, [r7, #7]
 800b066:	b2db      	uxtb	r3, r3
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b076:	2301      	movs	r3, #1
 800b078:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b07a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b07e:	4806      	ldr	r0, [pc, #24]	; (800b098 <BSP_PlatformIsDetected+0x28>)
 800b080:	f7f8 f8ea 	bl	8003258 <HAL_GPIO_ReadPin>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b08a:	2300      	movs	r3, #0
 800b08c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b08e:	79fb      	ldrb	r3, [r7, #7]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	58022000 	.word	0x58022000

0800b09c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b0a6:	4b0b      	ldr	r3, [pc, #44]	; (800b0d4 <SD_CheckStatus+0x38>)
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b0ac:	f7ff ffb0 	bl	800b010 <BSP_SD_GetCardState>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d107      	bne.n	800b0c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b0b6:	4b07      	ldr	r3, [pc, #28]	; (800b0d4 <SD_CheckStatus+0x38>)
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	f023 0301 	bic.w	r3, r3, #1
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <SD_CheckStatus+0x38>)
 800b0c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b0c6:	4b03      	ldr	r3, [pc, #12]	; (800b0d4 <SD_CheckStatus+0x38>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	b2db      	uxtb	r3, r3
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	2400000d 	.word	0x2400000d

0800b0d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b0e2:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <SD_initialize+0x38>)
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b0e8:	f7ff ff30 	bl	800af4c <BSP_SD_Init>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d107      	bne.n	800b102 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b0f2:	79fb      	ldrb	r3, [r7, #7]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff ffd1 	bl	800b09c <SD_CheckStatus>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	4b04      	ldr	r3, [pc, #16]	; (800b110 <SD_initialize+0x38>)
 800b100:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b102:	4b03      	ldr	r3, [pc, #12]	; (800b110 <SD_initialize+0x38>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	b2db      	uxtb	r3, r3
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	2400000d 	.word	0x2400000d

0800b114 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff ffbb 	bl	800b09c <SD_CheckStatus>
 800b126:	4603      	mov	r3, r0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	607a      	str	r2, [r7, #4]
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	4603      	mov	r3, r0
 800b13e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b144:	f04f 33ff 	mov.w	r3, #4294967295
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	6879      	ldr	r1, [r7, #4]
 800b14c:	68b8      	ldr	r0, [r7, #8]
 800b14e:	f7ff ff23 	bl	800af98 <BSP_SD_ReadBlocks>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d107      	bne.n	800b168 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b158:	bf00      	nop
 800b15a:	f7ff ff59 	bl	800b010 <BSP_SD_GetCardState>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1fa      	bne.n	800b15a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b168:	7dfb      	ldrb	r3, [r7, #23]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b086      	sub	sp, #24
 800b176:	af00      	add	r7, sp, #0
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
 800b17e:	4603      	mov	r3, r0
 800b180:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b186:	f04f 33ff 	mov.w	r3, #4294967295
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	6879      	ldr	r1, [r7, #4]
 800b18e:	68b8      	ldr	r0, [r7, #8]
 800b190:	f7ff ff20 	bl	800afd4 <BSP_SD_WriteBlocks>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d107      	bne.n	800b1aa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b19a:	bf00      	nop
 800b19c:	f7ff ff38 	bl	800b010 <BSP_SD_GetCardState>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1fa      	bne.n	800b19c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08c      	sub	sp, #48	; 0x30
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	603a      	str	r2, [r7, #0]
 800b1be:	71fb      	strb	r3, [r7, #7]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b1ca:	4b25      	ldr	r3, [pc, #148]	; (800b260 <SD_ioctl+0xac>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <SD_ioctl+0x28>
 800b1d8:	2303      	movs	r3, #3
 800b1da:	e03c      	b.n	800b256 <SD_ioctl+0xa2>

  switch (cmd)
 800b1dc:	79bb      	ldrb	r3, [r7, #6]
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d834      	bhi.n	800b24c <SD_ioctl+0x98>
 800b1e2:	a201      	add	r2, pc, #4	; (adr r2, 800b1e8 <SD_ioctl+0x34>)
 800b1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e8:	0800b1f9 	.word	0x0800b1f9
 800b1ec:	0800b201 	.word	0x0800b201
 800b1f0:	0800b219 	.word	0x0800b219
 800b1f4:	0800b233 	.word	0x0800b233
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1fe:	e028      	b.n	800b252 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b200:	f107 0308 	add.w	r3, r7, #8
 800b204:	4618      	mov	r0, r3
 800b206:	f7ff ff13 	bl	800b030 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b20a:	6a3a      	ldr	r2, [r7, #32]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b216:	e01c      	b.n	800b252 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b218:	f107 0308 	add.w	r3, r7, #8
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7ff ff07 	bl	800b030 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	b29a      	uxth	r2, r3
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b230:	e00f      	b.n	800b252 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b232:	f107 0308 	add.w	r3, r7, #8
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff fefa 	bl	800b030 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	0a5a      	lsrs	r2, r3, #9
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b24a:	e002      	b.n	800b252 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b24c:	2304      	movs	r3, #4
 800b24e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b256:	4618      	mov	r0, r3
 800b258:	3730      	adds	r7, #48	; 0x30
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	2400000d 	.word	0x2400000d

0800b264 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	4603      	mov	r3, r0
 800b26c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b26e:	79fb      	ldrb	r3, [r7, #7]
 800b270:	4a08      	ldr	r2, [pc, #32]	; (800b294 <disk_status+0x30>)
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	79fa      	ldrb	r2, [r7, #7]
 800b27c:	4905      	ldr	r1, [pc, #20]	; (800b294 <disk_status+0x30>)
 800b27e:	440a      	add	r2, r1
 800b280:	7a12      	ldrb	r2, [r2, #8]
 800b282:	4610      	mov	r0, r2
 800b284:	4798      	blx	r3
 800b286:	4603      	mov	r3, r0
 800b288:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	2400024c 	.word	0x2400024c

0800b298 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b2a6:	79fb      	ldrb	r3, [r7, #7]
 800b2a8:	4a0d      	ldr	r2, [pc, #52]	; (800b2e0 <disk_initialize+0x48>)
 800b2aa:	5cd3      	ldrb	r3, [r2, r3]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d111      	bne.n	800b2d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b2b0:	79fb      	ldrb	r3, [r7, #7]
 800b2b2:	4a0b      	ldr	r2, [pc, #44]	; (800b2e0 <disk_initialize+0x48>)
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b2b8:	79fb      	ldrb	r3, [r7, #7]
 800b2ba:	4a09      	ldr	r2, [pc, #36]	; (800b2e0 <disk_initialize+0x48>)
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	79fa      	ldrb	r2, [r7, #7]
 800b2c6:	4906      	ldr	r1, [pc, #24]	; (800b2e0 <disk_initialize+0x48>)
 800b2c8:	440a      	add	r2, r1
 800b2ca:	7a12      	ldrb	r2, [r2, #8]
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	4798      	blx	r3
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	2400024c 	.word	0x2400024c

0800b2e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b2e4:	b590      	push	{r4, r7, lr}
 800b2e6:	b087      	sub	sp, #28
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60b9      	str	r1, [r7, #8]
 800b2ec:	607a      	str	r2, [r7, #4]
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	4a0a      	ldr	r2, [pc, #40]	; (800b320 <disk_read+0x3c>)
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	689c      	ldr	r4, [r3, #8]
 800b300:	7bfb      	ldrb	r3, [r7, #15]
 800b302:	4a07      	ldr	r2, [pc, #28]	; (800b320 <disk_read+0x3c>)
 800b304:	4413      	add	r3, r2
 800b306:	7a18      	ldrb	r0, [r3, #8]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	68b9      	ldr	r1, [r7, #8]
 800b30e:	47a0      	blx	r4
 800b310:	4603      	mov	r3, r0
 800b312:	75fb      	strb	r3, [r7, #23]
  return res;
 800b314:	7dfb      	ldrb	r3, [r7, #23]
}
 800b316:	4618      	mov	r0, r3
 800b318:	371c      	adds	r7, #28
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd90      	pop	{r4, r7, pc}
 800b31e:	bf00      	nop
 800b320:	2400024c 	.word	0x2400024c

0800b324 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b324:	b590      	push	{r4, r7, lr}
 800b326:	b087      	sub	sp, #28
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60b9      	str	r1, [r7, #8]
 800b32c:	607a      	str	r2, [r7, #4]
 800b32e:	603b      	str	r3, [r7, #0]
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	4a0a      	ldr	r2, [pc, #40]	; (800b360 <disk_write+0x3c>)
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	4413      	add	r3, r2
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	68dc      	ldr	r4, [r3, #12]
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	4a07      	ldr	r2, [pc, #28]	; (800b360 <disk_write+0x3c>)
 800b344:	4413      	add	r3, r2
 800b346:	7a18      	ldrb	r0, [r3, #8]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	47a0      	blx	r4
 800b350:	4603      	mov	r3, r0
 800b352:	75fb      	strb	r3, [r7, #23]
  return res;
 800b354:	7dfb      	ldrb	r3, [r7, #23]
}
 800b356:	4618      	mov	r0, r3
 800b358:	371c      	adds	r7, #28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd90      	pop	{r4, r7, pc}
 800b35e:	bf00      	nop
 800b360:	2400024c 	.word	0x2400024c

0800b364 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	603a      	str	r2, [r7, #0]
 800b36e:	71fb      	strb	r3, [r7, #7]
 800b370:	460b      	mov	r3, r1
 800b372:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	4a09      	ldr	r2, [pc, #36]	; (800b39c <disk_ioctl+0x38>)
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	79fa      	ldrb	r2, [r7, #7]
 800b382:	4906      	ldr	r1, [pc, #24]	; (800b39c <disk_ioctl+0x38>)
 800b384:	440a      	add	r2, r1
 800b386:	7a10      	ldrb	r0, [r2, #8]
 800b388:	79b9      	ldrb	r1, [r7, #6]
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	4798      	blx	r3
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]
  return res;
 800b392:	7bfb      	ldrb	r3, [r7, #15]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	2400024c 	.word	0x2400024c

0800b3a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b3b0:	89fb      	ldrh	r3, [r7, #14]
 800b3b2:	021b      	lsls	r3, r3, #8
 800b3b4:	b21a      	sxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	b21b      	sxth	r3, r3
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	b21b      	sxth	r3, r3
 800b3c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b3c2:	89fb      	ldrh	r3, [r7, #14]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3303      	adds	r3, #3
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	021b      	lsls	r3, r3, #8
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	3202      	adds	r2, #2
 800b3e8:	7812      	ldrb	r2, [r2, #0]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	021b      	lsls	r3, r3, #8
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	3201      	adds	r2, #1
 800b3f6:	7812      	ldrb	r2, [r2, #0]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	021b      	lsls	r3, r3, #8
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	7812      	ldrb	r2, [r2, #0]
 800b404:	4313      	orrs	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]
	return rv;
 800b408:	68fb      	ldr	r3, [r7, #12]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3714      	adds	r7, #20
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	460b      	mov	r3, r1
 800b420:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	887a      	ldrh	r2, [r7, #2]
 800b42a:	b2d2      	uxtb	r2, r2
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	887b      	ldrh	r3, [r7, #2]
 800b430:	0a1b      	lsrs	r3, r3, #8
 800b432:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	1c5a      	adds	r2, r3, #1
 800b438:	607a      	str	r2, [r7, #4]
 800b43a:	887a      	ldrh	r2, [r7, #2]
 800b43c:	b2d2      	uxtb	r2, r2
 800b43e:	701a      	strb	r2, [r3, #0]
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	607a      	str	r2, [r7, #4]
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	b2d2      	uxtb	r2, r2
 800b460:	701a      	strb	r2, [r3, #0]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	0a1b      	lsrs	r3, r3, #8
 800b466:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	607a      	str	r2, [r7, #4]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	701a      	strb	r2, [r3, #0]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	0a1b      	lsrs	r3, r3, #8
 800b478:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	607a      	str	r2, [r7, #4]
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	b2d2      	uxtb	r2, r2
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	0a1b      	lsrs	r3, r3, #8
 800b48a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	1c5a      	adds	r2, r3, #1
 800b490:	607a      	str	r2, [r7, #4]
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	b2d2      	uxtb	r2, r2
 800b496:	701a      	strb	r2, [r3, #0]
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00d      	beq.n	800b4da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	1c53      	adds	r3, r2, #1
 800b4c2:	613b      	str	r3, [r7, #16]
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	1c59      	adds	r1, r3, #1
 800b4c8:	6179      	str	r1, [r7, #20]
 800b4ca:	7812      	ldrb	r2, [r2, #0]
 800b4cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	607b      	str	r3, [r7, #4]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1f1      	bne.n	800b4be <mem_cpy+0x1a>
	}
}
 800b4da:	bf00      	nop
 800b4dc:	371c      	adds	r7, #28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b4e6:	b480      	push	{r7}
 800b4e8:	b087      	sub	sp, #28
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	60f8      	str	r0, [r7, #12]
 800b4ee:	60b9      	str	r1, [r7, #8]
 800b4f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	617a      	str	r2, [r7, #20]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	b2d2      	uxtb	r2, r2
 800b500:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3b01      	subs	r3, #1
 800b506:	607b      	str	r3, [r7, #4]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1f3      	bne.n	800b4f6 <mem_set+0x10>
}
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	371c      	adds	r7, #28
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b51c:	b480      	push	{r7}
 800b51e:	b089      	sub	sp, #36	; 0x24
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	61fb      	str	r3, [r7, #28]
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	61fa      	str	r2, [r7, #28]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	4619      	mov	r1, r3
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	1c5a      	adds	r2, r3, #1
 800b542:	61ba      	str	r2, [r7, #24]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	1acb      	subs	r3, r1, r3
 800b548:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	607b      	str	r3, [r7, #4]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <mem_cmp+0x40>
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0eb      	beq.n	800b534 <mem_cmp+0x18>

	return r;
 800b55c:	697b      	ldr	r3, [r7, #20]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3724      	adds	r7, #36	; 0x24
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr

0800b56a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b56a:	b480      	push	{r7}
 800b56c:	b083      	sub	sp, #12
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b574:	e002      	b.n	800b57c <chk_chr+0x12>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3301      	adds	r3, #1
 800b57a:	607b      	str	r3, [r7, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d005      	beq.n	800b590 <chk_chr+0x26>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	461a      	mov	r2, r3
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d1f2      	bne.n	800b576 <chk_chr+0xc>
	return *str;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	781b      	ldrb	r3, [r3, #0]
}
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	60bb      	str	r3, [r7, #8]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	60fb      	str	r3, [r7, #12]
 800b5b2:	e029      	b.n	800b608 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b5b4:	4a27      	ldr	r2, [pc, #156]	; (800b654 <chk_lock+0xb4>)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	4413      	add	r3, r2
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d01d      	beq.n	800b5fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b5c2:	4a24      	ldr	r2, [pc, #144]	; (800b654 <chk_lock+0xb4>)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	011b      	lsls	r3, r3, #4
 800b5c8:	4413      	add	r3, r2
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d116      	bne.n	800b602 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b5d4:	4a1f      	ldr	r2, [pc, #124]	; (800b654 <chk_lock+0xb4>)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	011b      	lsls	r3, r3, #4
 800b5da:	4413      	add	r3, r2
 800b5dc:	3304      	adds	r3, #4
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d10c      	bne.n	800b602 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b5e8:	4a1a      	ldr	r2, [pc, #104]	; (800b654 <chk_lock+0xb4>)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	4413      	add	r3, r2
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d102      	bne.n	800b602 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b5fc:	e007      	b.n	800b60e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b5fe:	2301      	movs	r3, #1
 800b600:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3301      	adds	r3, #1
 800b606:	60fb      	str	r3, [r7, #12]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d9d2      	bls.n	800b5b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2b02      	cmp	r3, #2
 800b612:	d109      	bne.n	800b628 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d102      	bne.n	800b620 <chk_lock+0x80>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	d101      	bne.n	800b624 <chk_lock+0x84>
 800b620:	2300      	movs	r3, #0
 800b622:	e010      	b.n	800b646 <chk_lock+0xa6>
 800b624:	2312      	movs	r3, #18
 800b626:	e00e      	b.n	800b646 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d108      	bne.n	800b640 <chk_lock+0xa0>
 800b62e:	4a09      	ldr	r2, [pc, #36]	; (800b654 <chk_lock+0xb4>)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	011b      	lsls	r3, r3, #4
 800b634:	4413      	add	r3, r2
 800b636:	330c      	adds	r3, #12
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b63e:	d101      	bne.n	800b644 <chk_lock+0xa4>
 800b640:	2310      	movs	r3, #16
 800b642:	e000      	b.n	800b646 <chk_lock+0xa6>
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	2400022c 	.word	0x2400022c

0800b658 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b65e:	2300      	movs	r3, #0
 800b660:	607b      	str	r3, [r7, #4]
 800b662:	e002      	b.n	800b66a <enq_lock+0x12>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3301      	adds	r3, #1
 800b668:	607b      	str	r3, [r7, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d806      	bhi.n	800b67e <enq_lock+0x26>
 800b670:	4a09      	ldr	r2, [pc, #36]	; (800b698 <enq_lock+0x40>)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	011b      	lsls	r3, r3, #4
 800b676:	4413      	add	r3, r2
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1f2      	bne.n	800b664 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b02      	cmp	r3, #2
 800b682:	bf14      	ite	ne
 800b684:	2301      	movne	r3, #1
 800b686:	2300      	moveq	r3, #0
 800b688:	b2db      	uxtb	r3, r3
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	2400022c 	.word	0x2400022c

0800b69c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60fb      	str	r3, [r7, #12]
 800b6aa:	e01f      	b.n	800b6ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b6ac:	4a41      	ldr	r2, [pc, #260]	; (800b7b4 <inc_lock+0x118>)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	011b      	lsls	r3, r3, #4
 800b6b2:	4413      	add	r3, r2
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d113      	bne.n	800b6e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b6be:	4a3d      	ldr	r2, [pc, #244]	; (800b7b4 <inc_lock+0x118>)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	011b      	lsls	r3, r3, #4
 800b6c4:	4413      	add	r3, r2
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d109      	bne.n	800b6e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b6d2:	4a38      	ldr	r2, [pc, #224]	; (800b7b4 <inc_lock+0x118>)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	4413      	add	r3, r2
 800b6da:	3308      	adds	r3, #8
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d006      	beq.n	800b6f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d9dc      	bls.n	800b6ac <inc_lock+0x10>
 800b6f2:	e000      	b.n	800b6f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b6f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d132      	bne.n	800b762 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	60fb      	str	r3, [r7, #12]
 800b700:	e002      	b.n	800b708 <inc_lock+0x6c>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3301      	adds	r3, #1
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d806      	bhi.n	800b71c <inc_lock+0x80>
 800b70e:	4a29      	ldr	r2, [pc, #164]	; (800b7b4 <inc_lock+0x118>)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	4413      	add	r3, r2
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1f2      	bne.n	800b702 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d101      	bne.n	800b726 <inc_lock+0x8a>
 800b722:	2300      	movs	r3, #0
 800b724:	e040      	b.n	800b7a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	4922      	ldr	r1, [pc, #136]	; (800b7b4 <inc_lock+0x118>)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	011b      	lsls	r3, r3, #4
 800b730:	440b      	add	r3, r1
 800b732:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	689a      	ldr	r2, [r3, #8]
 800b738:	491e      	ldr	r1, [pc, #120]	; (800b7b4 <inc_lock+0x118>)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	440b      	add	r3, r1
 800b740:	3304      	adds	r3, #4
 800b742:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	695a      	ldr	r2, [r3, #20]
 800b748:	491a      	ldr	r1, [pc, #104]	; (800b7b4 <inc_lock+0x118>)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	011b      	lsls	r3, r3, #4
 800b74e:	440b      	add	r3, r1
 800b750:	3308      	adds	r3, #8
 800b752:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b754:	4a17      	ldr	r2, [pc, #92]	; (800b7b4 <inc_lock+0x118>)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	4413      	add	r3, r2
 800b75c:	330c      	adds	r3, #12
 800b75e:	2200      	movs	r2, #0
 800b760:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d009      	beq.n	800b77c <inc_lock+0xe0>
 800b768:	4a12      	ldr	r2, [pc, #72]	; (800b7b4 <inc_lock+0x118>)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	011b      	lsls	r3, r3, #4
 800b76e:	4413      	add	r3, r2
 800b770:	330c      	adds	r3, #12
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <inc_lock+0xe0>
 800b778:	2300      	movs	r3, #0
 800b77a:	e015      	b.n	800b7a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d108      	bne.n	800b794 <inc_lock+0xf8>
 800b782:	4a0c      	ldr	r2, [pc, #48]	; (800b7b4 <inc_lock+0x118>)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	011b      	lsls	r3, r3, #4
 800b788:	4413      	add	r3, r2
 800b78a:	330c      	adds	r3, #12
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	3301      	adds	r3, #1
 800b790:	b29a      	uxth	r2, r3
 800b792:	e001      	b.n	800b798 <inc_lock+0xfc>
 800b794:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b798:	4906      	ldr	r1, [pc, #24]	; (800b7b4 <inc_lock+0x118>)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	011b      	lsls	r3, r3, #4
 800b79e:	440b      	add	r3, r1
 800b7a0:	330c      	adds	r3, #12
 800b7a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	3301      	adds	r3, #1
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	2400022c 	.word	0x2400022c

0800b7b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	607b      	str	r3, [r7, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d825      	bhi.n	800b818 <dec_lock+0x60>
		n = Files[i].ctr;
 800b7cc:	4a17      	ldr	r2, [pc, #92]	; (800b82c <dec_lock+0x74>)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	011b      	lsls	r3, r3, #4
 800b7d2:	4413      	add	r3, r2
 800b7d4:	330c      	adds	r3, #12
 800b7d6:	881b      	ldrh	r3, [r3, #0]
 800b7d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b7da:	89fb      	ldrh	r3, [r7, #14]
 800b7dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7e0:	d101      	bne.n	800b7e6 <dec_lock+0x2e>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b7e6:	89fb      	ldrh	r3, [r7, #14]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <dec_lock+0x3a>
 800b7ec:	89fb      	ldrh	r3, [r7, #14]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b7f2:	4a0e      	ldr	r2, [pc, #56]	; (800b82c <dec_lock+0x74>)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	011b      	lsls	r3, r3, #4
 800b7f8:	4413      	add	r3, r2
 800b7fa:	330c      	adds	r3, #12
 800b7fc:	89fa      	ldrh	r2, [r7, #14]
 800b7fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b800:	89fb      	ldrh	r3, [r7, #14]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d105      	bne.n	800b812 <dec_lock+0x5a>
 800b806:	4a09      	ldr	r2, [pc, #36]	; (800b82c <dec_lock+0x74>)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	4413      	add	r3, r2
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	737b      	strb	r3, [r7, #13]
 800b816:	e001      	b.n	800b81c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b818:	2302      	movs	r3, #2
 800b81a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b81c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	2400022c 	.word	0x2400022c

0800b830 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b838:	2300      	movs	r3, #0
 800b83a:	60fb      	str	r3, [r7, #12]
 800b83c:	e010      	b.n	800b860 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b83e:	4a0d      	ldr	r2, [pc, #52]	; (800b874 <clear_lock+0x44>)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	011b      	lsls	r3, r3, #4
 800b844:	4413      	add	r3, r2
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d105      	bne.n	800b85a <clear_lock+0x2a>
 800b84e:	4a09      	ldr	r2, [pc, #36]	; (800b874 <clear_lock+0x44>)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	011b      	lsls	r3, r3, #4
 800b854:	4413      	add	r3, r2
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d9eb      	bls.n	800b83e <clear_lock+0xe>
	}
}
 800b866:	bf00      	nop
 800b868:	bf00      	nop
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr
 800b874:	2400022c 	.word	0x2400022c

0800b878 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	78db      	ldrb	r3, [r3, #3]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d034      	beq.n	800b8f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	7858      	ldrb	r0, [r3, #1]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b89c:	2301      	movs	r3, #1
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	f7ff fd40 	bl	800b324 <disk_write>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	73fb      	strb	r3, [r7, #15]
 800b8ae:	e022      	b.n	800b8f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a1b      	ldr	r3, [r3, #32]
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	1ad2      	subs	r2, r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d217      	bcs.n	800b8f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	789b      	ldrb	r3, [r3, #2]
 800b8ca:	613b      	str	r3, [r7, #16]
 800b8cc:	e010      	b.n	800b8f0 <sync_window+0x78>
					wsect += fs->fsize;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	7858      	ldrb	r0, [r3, #1]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	697a      	ldr	r2, [r7, #20]
 800b8e6:	f7ff fd1d 	bl	800b324 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	613b      	str	r3, [r7, #16]
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d8eb      	bhi.n	800b8ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d01b      	beq.n	800b950 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff ffad 	bl	800b878 <sync_window>
 800b91e:	4603      	mov	r3, r0
 800b920:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b922:	7bfb      	ldrb	r3, [r7, #15]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d113      	bne.n	800b950 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	7858      	ldrb	r0, [r3, #1]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b932:	2301      	movs	r3, #1
 800b934:	683a      	ldr	r2, [r7, #0]
 800b936:	f7ff fcd5 	bl	800b2e4 <disk_read>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b940:	f04f 33ff 	mov.w	r3, #4294967295
 800b944:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b946:	2301      	movs	r3, #1
 800b948:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
	...

0800b95c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff ff87 	bl	800b878 <sync_window>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d158      	bne.n	800ba26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	2b03      	cmp	r3, #3
 800b97a:	d148      	bne.n	800ba0e <sync_fs+0xb2>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	791b      	ldrb	r3, [r3, #4]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d144      	bne.n	800ba0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3330      	adds	r3, #48	; 0x30
 800b988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b98c:	2100      	movs	r1, #0
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff fda9 	bl	800b4e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3330      	adds	r3, #48	; 0x30
 800b998:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b99c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7ff fd38 	bl	800b416 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3330      	adds	r3, #48	; 0x30
 800b9aa:	4921      	ldr	r1, [pc, #132]	; (800ba30 <sync_fs+0xd4>)
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff fd4d 	bl	800b44c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3330      	adds	r3, #48	; 0x30
 800b9b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b9ba:	491e      	ldr	r1, [pc, #120]	; (800ba34 <sync_fs+0xd8>)
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7ff fd45 	bl	800b44c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	3330      	adds	r3, #48	; 0x30
 800b9c6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	f7ff fd3b 	bl	800b44c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	3330      	adds	r3, #48	; 0x30
 800b9da:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	f7ff fd31 	bl	800b44c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	7858      	ldrb	r0, [r3, #1]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba02:	2301      	movs	r3, #1
 800ba04:	f7ff fc8e 	bl	800b324 <disk_write>
			fs->fsi_flag = 0;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	785b      	ldrb	r3, [r3, #1]
 800ba12:	2200      	movs	r2, #0
 800ba14:	2100      	movs	r1, #0
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff fca4 	bl	800b364 <disk_ioctl>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d001      	beq.n	800ba26 <sync_fs+0xca>
 800ba22:	2301      	movs	r3, #1
 800ba24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	41615252 	.word	0x41615252
 800ba34:	61417272 	.word	0x61417272

0800ba38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	3b02      	subs	r3, #2
 800ba46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	695b      	ldr	r3, [r3, #20]
 800ba4c:	3b02      	subs	r3, #2
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d301      	bcc.n	800ba58 <clust2sect+0x20>
 800ba54:	2300      	movs	r3, #0
 800ba56:	e008      	b.n	800ba6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	895b      	ldrh	r3, [r3, #10]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	fb03 f202 	mul.w	r2, r3, r2
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba68:	4413      	add	r3, r2
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b086      	sub	sp, #24
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d904      	bls.n	800ba96 <get_fat+0x20>
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	695b      	ldr	r3, [r3, #20]
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d302      	bcc.n	800ba9c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ba96:	2301      	movs	r3, #1
 800ba98:	617b      	str	r3, [r7, #20]
 800ba9a:	e08f      	b.n	800bbbc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ba9c:	f04f 33ff 	mov.w	r3, #4294967295
 800baa0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d062      	beq.n	800bb70 <get_fat+0xfa>
 800baaa:	2b03      	cmp	r3, #3
 800baac:	dc7c      	bgt.n	800bba8 <get_fat+0x132>
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d002      	beq.n	800bab8 <get_fat+0x42>
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d042      	beq.n	800bb3c <get_fat+0xc6>
 800bab6:	e077      	b.n	800bba8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	60fb      	str	r3, [r7, #12]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	085b      	lsrs	r3, r3, #1
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	4413      	add	r3, r2
 800bac4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	6a1a      	ldr	r2, [r3, #32]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	0a5b      	lsrs	r3, r3, #9
 800bace:	4413      	add	r3, r2
 800bad0:	4619      	mov	r1, r3
 800bad2:	6938      	ldr	r0, [r7, #16]
 800bad4:	f7ff ff14 	bl	800b900 <move_window>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d167      	bne.n	800bbae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	60fa      	str	r2, [r7, #12]
 800bae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	4413      	add	r3, r2
 800baec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800baf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	6a1a      	ldr	r2, [r3, #32]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	0a5b      	lsrs	r3, r3, #9
 800bafa:	4413      	add	r3, r2
 800bafc:	4619      	mov	r1, r3
 800bafe:	6938      	ldr	r0, [r7, #16]
 800bb00:	f7ff fefe 	bl	800b900 <move_window>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d153      	bne.n	800bbb2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	4413      	add	r3, r2
 800bb14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb18:	021b      	lsls	r3, r3, #8
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <get_fat+0xbc>
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	091b      	lsrs	r3, r3, #4
 800bb30:	e002      	b.n	800bb38 <get_fat+0xc2>
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb38:	617b      	str	r3, [r7, #20]
			break;
 800bb3a:	e03f      	b.n	800bbbc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	6a1a      	ldr	r2, [r3, #32]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	0a1b      	lsrs	r3, r3, #8
 800bb44:	4413      	add	r3, r2
 800bb46:	4619      	mov	r1, r3
 800bb48:	6938      	ldr	r0, [r7, #16]
 800bb4a:	f7ff fed9 	bl	800b900 <move_window>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d130      	bne.n	800bbb6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	005b      	lsls	r3, r3, #1
 800bb5e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bb62:	4413      	add	r3, r2
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff fc1b 	bl	800b3a0 <ld_word>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	617b      	str	r3, [r7, #20]
			break;
 800bb6e:	e025      	b.n	800bbbc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	6a1a      	ldr	r2, [r3, #32]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	09db      	lsrs	r3, r3, #7
 800bb78:	4413      	add	r3, r2
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6938      	ldr	r0, [r7, #16]
 800bb7e:	f7ff febf 	bl	800b900 <move_window>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d118      	bne.n	800bbba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bb96:	4413      	add	r3, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7ff fc19 	bl	800b3d0 <ld_dword>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bba4:	617b      	str	r3, [r7, #20]
			break;
 800bba6:	e009      	b.n	800bbbc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bba8:	2301      	movs	r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	e006      	b.n	800bbbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbae:	bf00      	nop
 800bbb0:	e004      	b.n	800bbbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbb2:	bf00      	nop
 800bbb4:	e002      	b.n	800bbbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbb6:	bf00      	nop
 800bbb8:	e000      	b.n	800bbbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbba:	bf00      	nop
		}
	}

	return val;
 800bbbc:	697b      	ldr	r3, [r7, #20]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bbc6:	b590      	push	{r4, r7, lr}
 800bbc8:	b089      	sub	sp, #36	; 0x24
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	60f8      	str	r0, [r7, #12]
 800bbce:	60b9      	str	r1, [r7, #8]
 800bbd0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bbd2:	2302      	movs	r3, #2
 800bbd4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	f240 80d2 	bls.w	800bd82 <put_fat+0x1bc>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	f080 80cc 	bcs.w	800bd82 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	f000 8096 	beq.w	800bd20 <put_fat+0x15a>
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	f300 80cd 	bgt.w	800bd94 <put_fat+0x1ce>
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d002      	beq.n	800bc04 <put_fat+0x3e>
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d06e      	beq.n	800bce0 <put_fat+0x11a>
 800bc02:	e0c7      	b.n	800bd94 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	61bb      	str	r3, [r7, #24]
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	085b      	lsrs	r3, r3, #1
 800bc0c:	69ba      	ldr	r2, [r7, #24]
 800bc0e:	4413      	add	r3, r2
 800bc10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6a1a      	ldr	r2, [r3, #32]
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	0a5b      	lsrs	r3, r3, #9
 800bc1a:	4413      	add	r3, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f7ff fe6e 	bl	800b900 <move_window>
 800bc24:	4603      	mov	r3, r0
 800bc26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc28:	7ffb      	ldrb	r3, [r7, #31]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f040 80ab 	bne.w	800bd86 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	1c59      	adds	r1, r3, #1
 800bc3a:	61b9      	str	r1, [r7, #24]
 800bc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc40:	4413      	add	r3, r2
 800bc42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f003 0301 	and.w	r3, r3, #1
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00d      	beq.n	800bc6a <put_fat+0xa4>
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	b25b      	sxtb	r3, r3
 800bc54:	f003 030f 	and.w	r3, r3, #15
 800bc58:	b25a      	sxtb	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	011b      	lsls	r3, r3, #4
 800bc60:	b25b      	sxtb	r3, r3
 800bc62:	4313      	orrs	r3, r2
 800bc64:	b25b      	sxtb	r3, r3
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	e001      	b.n	800bc6e <put_fat+0xa8>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2201      	movs	r2, #1
 800bc76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6a1a      	ldr	r2, [r3, #32]
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	0a5b      	lsrs	r3, r3, #9
 800bc80:	4413      	add	r3, r2
 800bc82:	4619      	mov	r1, r3
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f7ff fe3b 	bl	800b900 <move_window>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc8e:	7ffb      	ldrb	r3, [r7, #31]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d17a      	bne.n	800bd8a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca0:	4413      	add	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f003 0301 	and.w	r3, r3, #1
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d003      	beq.n	800bcb6 <put_fat+0xf0>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	091b      	lsrs	r3, r3, #4
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	e00e      	b.n	800bcd4 <put_fat+0x10e>
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	b25b      	sxtb	r3, r3
 800bcbc:	f023 030f 	bic.w	r3, r3, #15
 800bcc0:	b25a      	sxtb	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	0a1b      	lsrs	r3, r3, #8
 800bcc6:	b25b      	sxtb	r3, r3
 800bcc8:	f003 030f 	and.w	r3, r3, #15
 800bccc:	b25b      	sxtb	r3, r3
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	b25b      	sxtb	r3, r3
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	70da      	strb	r2, [r3, #3]
			break;
 800bcde:	e059      	b.n	800bd94 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6a1a      	ldr	r2, [r3, #32]
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	0a1b      	lsrs	r3, r3, #8
 800bce8:	4413      	add	r3, r2
 800bcea:	4619      	mov	r1, r3
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f7ff fe07 	bl	800b900 <move_window>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcf6:	7ffb      	ldrb	r3, [r7, #31]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d148      	bne.n	800bd8e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bd0a:	4413      	add	r3, r2
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	b292      	uxth	r2, r2
 800bd10:	4611      	mov	r1, r2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff fb7f 	bl	800b416 <st_word>
			fs->wflag = 1;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	70da      	strb	r2, [r3, #3]
			break;
 800bd1e:	e039      	b.n	800bd94 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6a1a      	ldr	r2, [r3, #32]
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	09db      	lsrs	r3, r3, #7
 800bd28:	4413      	add	r3, r2
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7ff fde7 	bl	800b900 <move_window>
 800bd32:	4603      	mov	r3, r0
 800bd34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd36:	7ffb      	ldrb	r3, [r7, #31]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d12a      	bne.n	800bd92 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bd50:	4413      	add	r3, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff fb3c 	bl	800b3d0 <ld_dword>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bd5e:	4323      	orrs	r3, r4
 800bd60:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bd70:	4413      	add	r3, r2
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7ff fb69 	bl	800b44c <st_dword>
			fs->wflag = 1;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	70da      	strb	r2, [r3, #3]
			break;
 800bd80:	e008      	b.n	800bd94 <put_fat+0x1ce>
		}
	}
 800bd82:	bf00      	nop
 800bd84:	e006      	b.n	800bd94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bd86:	bf00      	nop
 800bd88:	e004      	b.n	800bd94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bd8a:	bf00      	nop
 800bd8c:	e002      	b.n	800bd94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bd8e:	bf00      	nop
 800bd90:	e000      	b.n	800bd94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bd92:	bf00      	nop
	return res;
 800bd94:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3724      	adds	r7, #36	; 0x24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd90      	pop	{r4, r7, pc}

0800bd9e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b088      	sub	sp, #32
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	60f8      	str	r0, [r7, #12]
 800bda6:	60b9      	str	r1, [r7, #8]
 800bda8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d904      	bls.n	800bdc4 <remove_chain+0x26>
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d301      	bcc.n	800bdc8 <remove_chain+0x2a>
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	e04b      	b.n	800be60 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00c      	beq.n	800bde8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bdce:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	69b8      	ldr	r0, [r7, #24]
 800bdd6:	f7ff fef6 	bl	800bbc6 <put_fat>
 800bdda:	4603      	mov	r3, r0
 800bddc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bdde:	7ffb      	ldrb	r3, [r7, #31]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d001      	beq.n	800bde8 <remove_chain+0x4a>
 800bde4:	7ffb      	ldrb	r3, [r7, #31]
 800bde6:	e03b      	b.n	800be60 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bde8:	68b9      	ldr	r1, [r7, #8]
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f7ff fe43 	bl	800ba76 <get_fat>
 800bdf0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d031      	beq.n	800be5c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d101      	bne.n	800be02 <remove_chain+0x64>
 800bdfe:	2302      	movs	r3, #2
 800be00:	e02e      	b.n	800be60 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be08:	d101      	bne.n	800be0e <remove_chain+0x70>
 800be0a:	2301      	movs	r3, #1
 800be0c:	e028      	b.n	800be60 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be0e:	2200      	movs	r2, #0
 800be10:	68b9      	ldr	r1, [r7, #8]
 800be12:	69b8      	ldr	r0, [r7, #24]
 800be14:	f7ff fed7 	bl	800bbc6 <put_fat>
 800be18:	4603      	mov	r3, r0
 800be1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800be1c:	7ffb      	ldrb	r3, [r7, #31]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <remove_chain+0x88>
 800be22:	7ffb      	ldrb	r3, [r7, #31]
 800be24:	e01c      	b.n	800be60 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	691a      	ldr	r2, [r3, #16]
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	3b02      	subs	r3, #2
 800be30:	429a      	cmp	r2, r3
 800be32:	d20b      	bcs.n	800be4c <remove_chain+0xae>
			fs->free_clst++;
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	1c5a      	adds	r2, r3, #1
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	791b      	ldrb	r3, [r3, #4]
 800be42:	f043 0301 	orr.w	r3, r3, #1
 800be46:	b2da      	uxtb	r2, r3
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	429a      	cmp	r2, r3
 800be58:	d3c6      	bcc.n	800bde8 <remove_chain+0x4a>
 800be5a:	e000      	b.n	800be5e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800be5c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3720      	adds	r7, #32
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b088      	sub	sp, #32
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10d      	bne.n	800be9a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d004      	beq.n	800be94 <create_chain+0x2c>
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	695b      	ldr	r3, [r3, #20]
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	429a      	cmp	r2, r3
 800be92:	d31b      	bcc.n	800becc <create_chain+0x64>
 800be94:	2301      	movs	r3, #1
 800be96:	61bb      	str	r3, [r7, #24]
 800be98:	e018      	b.n	800becc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff fdea 	bl	800ba76 <get_fat>
 800bea2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d801      	bhi.n	800beae <create_chain+0x46>
 800beaa:	2301      	movs	r3, #1
 800beac:	e070      	b.n	800bf90 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb4:	d101      	bne.n	800beba <create_chain+0x52>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	e06a      	b.n	800bf90 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d201      	bcs.n	800bec8 <create_chain+0x60>
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	e063      	b.n	800bf90 <create_chain+0x128>
		scl = clst;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	3301      	adds	r3, #1
 800bed4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	69fa      	ldr	r2, [r7, #28]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d307      	bcc.n	800bef0 <create_chain+0x88>
				ncl = 2;
 800bee0:	2302      	movs	r3, #2
 800bee2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bee4:	69fa      	ldr	r2, [r7, #28]
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d901      	bls.n	800bef0 <create_chain+0x88>
 800beec:	2300      	movs	r3, #0
 800beee:	e04f      	b.n	800bf90 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bef0:	69f9      	ldr	r1, [r7, #28]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7ff fdbf 	bl	800ba76 <get_fat>
 800bef8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00e      	beq.n	800bf1e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d003      	beq.n	800bf0e <create_chain+0xa6>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0c:	d101      	bne.n	800bf12 <create_chain+0xaa>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	e03e      	b.n	800bf90 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bf12:	69fa      	ldr	r2, [r7, #28]
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d1da      	bne.n	800bed0 <create_chain+0x68>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	e038      	b.n	800bf90 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bf1e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bf20:	f04f 32ff 	mov.w	r2, #4294967295
 800bf24:	69f9      	ldr	r1, [r7, #28]
 800bf26:	6938      	ldr	r0, [r7, #16]
 800bf28:	f7ff fe4d 	bl	800bbc6 <put_fat>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d109      	bne.n	800bf4a <create_chain+0xe2>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d006      	beq.n	800bf4a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bf3c:	69fa      	ldr	r2, [r7, #28]
 800bf3e:	6839      	ldr	r1, [r7, #0]
 800bf40:	6938      	ldr	r0, [r7, #16]
 800bf42:	f7ff fe40 	bl	800bbc6 <put_fat>
 800bf46:	4603      	mov	r3, r0
 800bf48:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d116      	bne.n	800bf7e <create_chain+0x116>
		fs->last_clst = ncl;
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	69fa      	ldr	r2, [r7, #28]
 800bf54:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	691a      	ldr	r2, [r3, #16]
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	3b02      	subs	r3, #2
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d804      	bhi.n	800bf6e <create_chain+0x106>
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	691b      	ldr	r3, [r3, #16]
 800bf68:	1e5a      	subs	r2, r3, #1
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	791b      	ldrb	r3, [r3, #4]
 800bf72:	f043 0301 	orr.w	r3, r3, #1
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	711a      	strb	r2, [r3, #4]
 800bf7c:	e007      	b.n	800bf8e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bf7e:	7dfb      	ldrb	r3, [r7, #23]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d102      	bne.n	800bf8a <create_chain+0x122>
 800bf84:	f04f 33ff 	mov.w	r3, #4294967295
 800bf88:	e000      	b.n	800bf8c <create_chain+0x124>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bf8e:	69fb      	ldr	r3, [r7, #28]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3720      	adds	r7, #32
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b087      	sub	sp, #28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfac:	3304      	adds	r3, #4
 800bfae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	0a5b      	lsrs	r3, r3, #9
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	8952      	ldrh	r2, [r2, #10]
 800bfb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfbc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	1d1a      	adds	r2, r3, #4
 800bfc2:	613a      	str	r2, [r7, #16]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <clmt_clust+0x3a>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e010      	b.n	800bff4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d307      	bcc.n	800bfea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	617b      	str	r3, [r7, #20]
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bfe8:	e7e9      	b.n	800bfbe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bfea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	4413      	add	r3, r2
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	371c      	adds	r7, #28
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c016:	d204      	bcs.n	800c022 <dir_sdi+0x22>
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	f003 031f 	and.w	r3, r3, #31
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c022:	2302      	movs	r3, #2
 800c024:	e063      	b.n	800c0ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d106      	bne.n	800c046 <dir_sdi+0x46>
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d902      	bls.n	800c046 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10c      	bne.n	800c066 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	095b      	lsrs	r3, r3, #5
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	8912      	ldrh	r2, [r2, #8]
 800c054:	4293      	cmp	r3, r2
 800c056:	d301      	bcc.n	800c05c <dir_sdi+0x5c>
 800c058:	2302      	movs	r3, #2
 800c05a:	e048      	b.n	800c0ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	61da      	str	r2, [r3, #28]
 800c064:	e029      	b.n	800c0ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	895b      	ldrh	r3, [r3, #10]
 800c06a:	025b      	lsls	r3, r3, #9
 800c06c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c06e:	e019      	b.n	800c0a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6979      	ldr	r1, [r7, #20]
 800c074:	4618      	mov	r0, r3
 800c076:	f7ff fcfe 	bl	800ba76 <get_fat>
 800c07a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c082:	d101      	bne.n	800c088 <dir_sdi+0x88>
 800c084:	2301      	movs	r3, #1
 800c086:	e032      	b.n	800c0ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d904      	bls.n	800c098 <dir_sdi+0x98>
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	429a      	cmp	r2, r3
 800c096:	d301      	bcc.n	800c09c <dir_sdi+0x9c>
 800c098:	2302      	movs	r3, #2
 800c09a:	e028      	b.n	800c0ee <dir_sdi+0xee>
			ofs -= csz;
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d2e1      	bcs.n	800c070 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c0ac:	6979      	ldr	r1, [r7, #20]
 800c0ae:	6938      	ldr	r0, [r7, #16]
 800c0b0:	f7ff fcc2 	bl	800ba38 <clust2sect>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	697a      	ldr	r2, [r7, #20]
 800c0be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	69db      	ldr	r3, [r3, #28]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <dir_sdi+0xcc>
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	e010      	b.n	800c0ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	69da      	ldr	r2, [r3, #28]
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	0a5b      	lsrs	r3, r3, #9
 800c0d4:	441a      	add	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0e6:	441a      	add	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b086      	sub	sp, #24
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	3320      	adds	r3, #32
 800c10c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	69db      	ldr	r3, [r3, #28]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <dir_next+0x28>
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c11c:	d301      	bcc.n	800c122 <dir_next+0x2c>
 800c11e:	2304      	movs	r3, #4
 800c120:	e0aa      	b.n	800c278 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f040 8098 	bne.w	800c25e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	69db      	ldr	r3, [r3, #28]
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10b      	bne.n	800c158 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	095b      	lsrs	r3, r3, #5
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	8912      	ldrh	r2, [r2, #8]
 800c148:	4293      	cmp	r3, r2
 800c14a:	f0c0 8088 	bcc.w	800c25e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	61da      	str	r2, [r3, #28]
 800c154:	2304      	movs	r3, #4
 800c156:	e08f      	b.n	800c278 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	0a5b      	lsrs	r3, r3, #9
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	8952      	ldrh	r2, [r2, #10]
 800c160:	3a01      	subs	r2, #1
 800c162:	4013      	ands	r3, r2
 800c164:	2b00      	cmp	r3, #0
 800c166:	d17a      	bne.n	800c25e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	699b      	ldr	r3, [r3, #24]
 800c16e:	4619      	mov	r1, r3
 800c170:	4610      	mov	r0, r2
 800c172:	f7ff fc80 	bl	800ba76 <get_fat>
 800c176:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d801      	bhi.n	800c182 <dir_next+0x8c>
 800c17e:	2302      	movs	r3, #2
 800c180:	e07a      	b.n	800c278 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c188:	d101      	bne.n	800c18e <dir_next+0x98>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e074      	b.n	800c278 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	695b      	ldr	r3, [r3, #20]
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	429a      	cmp	r2, r3
 800c196:	d358      	bcc.n	800c24a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d104      	bne.n	800c1a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	61da      	str	r2, [r3, #28]
 800c1a4:	2304      	movs	r3, #4
 800c1a6:	e067      	b.n	800c278 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	f7ff fe59 	bl	800be68 <create_chain>
 800c1b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <dir_next+0xcc>
 800c1be:	2307      	movs	r3, #7
 800c1c0:	e05a      	b.n	800c278 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d101      	bne.n	800c1cc <dir_next+0xd6>
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	e055      	b.n	800c278 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d2:	d101      	bne.n	800c1d8 <dir_next+0xe2>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e04f      	b.n	800c278 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f7ff fb4d 	bl	800b878 <sync_window>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d001      	beq.n	800c1e8 <dir_next+0xf2>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e047      	b.n	800c278 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	3330      	adds	r3, #48	; 0x30
 800c1ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff f977 	bl	800b4e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	613b      	str	r3, [r7, #16]
 800c1fc:	6979      	ldr	r1, [r7, #20]
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f7ff fc1a 	bl	800ba38 <clust2sect>
 800c204:	4602      	mov	r2, r0
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	62da      	str	r2, [r3, #44]	; 0x2c
 800c20a:	e012      	b.n	800c232 <dir_next+0x13c>
						fs->wflag = 1;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2201      	movs	r2, #1
 800c210:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f7ff fb30 	bl	800b878 <sync_window>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <dir_next+0x12c>
 800c21e:	2301      	movs	r3, #1
 800c220:	e02a      	b.n	800c278 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	3301      	adds	r3, #1
 800c226:	613b      	str	r3, [r7, #16]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	1c5a      	adds	r2, r3, #1
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	62da      	str	r2, [r3, #44]	; 0x2c
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	895b      	ldrh	r3, [r3, #10]
 800c236:	461a      	mov	r2, r3
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d3e6      	bcc.n	800c20c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	1ad2      	subs	r2, r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	697a      	ldr	r2, [r7, #20]
 800c24e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c250:	6979      	ldr	r1, [r7, #20]
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7ff fbf0 	bl	800ba38 <clust2sect>
 800c258:	4602      	mov	r2, r0
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68ba      	ldr	r2, [r7, #8]
 800c262:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c270:	441a      	add	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3718      	adds	r7, #24
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b086      	sub	sp, #24
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c290:	2100      	movs	r1, #0
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff feb4 	bl	800c000 <dir_sdi>
 800c298:	4603      	mov	r3, r0
 800c29a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d12b      	bne.n	800c2fa <dir_alloc+0x7a>
		n = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	69db      	ldr	r3, [r3, #28]
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f7ff fb27 	bl	800b900 <move_window>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d11d      	bne.n	800c2f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a1b      	ldr	r3, [r3, #32]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	2be5      	cmp	r3, #229	; 0xe5
 800c2c4:	d004      	beq.n	800c2d0 <dir_alloc+0x50>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d107      	bne.n	800c2e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	613b      	str	r3, [r7, #16]
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d102      	bne.n	800c2e4 <dir_alloc+0x64>
 800c2de:	e00c      	b.n	800c2fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c2e4:	2101      	movs	r1, #1
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff ff05 	bl	800c0f6 <dir_next>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d0d7      	beq.n	800c2a6 <dir_alloc+0x26>
 800c2f6:	e000      	b.n	800c2fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c2f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	2b04      	cmp	r3, #4
 800c2fe:	d101      	bne.n	800c304 <dir_alloc+0x84>
 800c300:	2307      	movs	r3, #7
 800c302:	75fb      	strb	r3, [r7, #23]
	return res;
 800c304:	7dfb      	ldrb	r3, [r7, #23]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3718      	adds	r7, #24
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	331a      	adds	r3, #26
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff f83f 	bl	800b3a0 <ld_word>
 800c322:	4603      	mov	r3, r0
 800c324:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	d109      	bne.n	800c342 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	3314      	adds	r3, #20
 800c332:	4618      	mov	r0, r3
 800c334:	f7ff f834 	bl	800b3a0 <ld_word>
 800c338:	4603      	mov	r3, r0
 800c33a:	041b      	lsls	r3, r3, #16
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	4313      	orrs	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c342:	68fb      	ldr	r3, [r7, #12]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	331a      	adds	r3, #26
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	b292      	uxth	r2, r2
 800c360:	4611      	mov	r1, r2
 800c362:	4618      	mov	r0, r3
 800c364:	f7ff f857 	bl	800b416 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d109      	bne.n	800c384 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	f103 0214 	add.w	r2, r3, #20
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	0c1b      	lsrs	r3, r3, #16
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	4619      	mov	r1, r3
 800c37e:	4610      	mov	r0, r2
 800c380:	f7ff f849 	bl	800b416 <st_word>
	}
}
 800c384:	bf00      	nop
 800c386:	3710      	adds	r7, #16
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c39a:	2100      	movs	r1, #0
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff fe2f 	bl	800c000 <dir_sdi>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c3a6:	7dfb      	ldrb	r3, [r7, #23]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d001      	beq.n	800c3b0 <dir_find+0x24>
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
 800c3ae:	e03e      	b.n	800c42e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	69db      	ldr	r3, [r3, #28]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6938      	ldr	r0, [r7, #16]
 800c3b8:	f7ff faa2 	bl	800b900 <move_window>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d12f      	bne.n	800c426 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <dir_find+0x4e>
 800c3d4:	2304      	movs	r3, #4
 800c3d6:	75fb      	strb	r3, [r7, #23]
 800c3d8:	e028      	b.n	800c42c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	330b      	adds	r3, #11
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6a1b      	ldr	r3, [r3, #32]
 800c3f0:	330b      	adds	r3, #11
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	f003 0308 	and.w	r3, r3, #8
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10a      	bne.n	800c412 <dir_find+0x86>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a18      	ldr	r0, [r3, #32]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3324      	adds	r3, #36	; 0x24
 800c404:	220b      	movs	r2, #11
 800c406:	4619      	mov	r1, r3
 800c408:	f7ff f888 	bl	800b51c <mem_cmp>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00b      	beq.n	800c42a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c412:	2100      	movs	r1, #0
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff fe6e 	bl	800c0f6 <dir_next>
 800c41a:	4603      	mov	r3, r0
 800c41c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d0c5      	beq.n	800c3b0 <dir_find+0x24>
 800c424:	e002      	b.n	800c42c <dir_find+0xa0>
		if (res != FR_OK) break;
 800c426:	bf00      	nop
 800c428:	e000      	b.n	800c42c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c42a:	bf00      	nop

	return res;
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b084      	sub	sp, #16
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c444:	2101      	movs	r1, #1
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff ff1a 	bl	800c280 <dir_alloc>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c450:	7bfb      	ldrb	r3, [r7, #15]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d11c      	bne.n	800c490 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	69db      	ldr	r3, [r3, #28]
 800c45a:	4619      	mov	r1, r3
 800c45c:	68b8      	ldr	r0, [r7, #8]
 800c45e:	f7ff fa4f 	bl	800b900 <move_window>
 800c462:	4603      	mov	r3, r0
 800c464:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d111      	bne.n	800c490 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a1b      	ldr	r3, [r3, #32]
 800c470:	2220      	movs	r2, #32
 800c472:	2100      	movs	r1, #0
 800c474:	4618      	mov	r0, r3
 800c476:	f7ff f836 	bl	800b4e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a18      	ldr	r0, [r3, #32]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	3324      	adds	r3, #36	; 0x24
 800c482:	220b      	movs	r2, #11
 800c484:	4619      	mov	r1, r3
 800c486:	f7ff f80d 	bl	800b4a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2201      	movs	r2, #1
 800c48e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c490:	7bfb      	ldrb	r3, [r7, #15]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
	...

0800c49c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b088      	sub	sp, #32
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3324      	adds	r3, #36	; 0x24
 800c4b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c4b2:	220b      	movs	r2, #11
 800c4b4:	2120      	movs	r1, #32
 800c4b6:	68b8      	ldr	r0, [r7, #8]
 800c4b8:	f7ff f815 	bl	800b4e6 <mem_set>
	si = i = 0; ni = 8;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	613b      	str	r3, [r7, #16]
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	61fb      	str	r3, [r7, #28]
 800c4c4:	2308      	movs	r3, #8
 800c4c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	61fa      	str	r2, [r7, #28]
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c4d6:	7efb      	ldrb	r3, [r7, #27]
 800c4d8:	2b20      	cmp	r3, #32
 800c4da:	d94e      	bls.n	800c57a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c4dc:	7efb      	ldrb	r3, [r7, #27]
 800c4de:	2b2f      	cmp	r3, #47	; 0x2f
 800c4e0:	d006      	beq.n	800c4f0 <create_name+0x54>
 800c4e2:	7efb      	ldrb	r3, [r7, #27]
 800c4e4:	2b5c      	cmp	r3, #92	; 0x5c
 800c4e6:	d110      	bne.n	800c50a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c4e8:	e002      	b.n	800c4f0 <create_name+0x54>
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	61fb      	str	r3, [r7, #28]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	2b2f      	cmp	r3, #47	; 0x2f
 800c4fa:	d0f6      	beq.n	800c4ea <create_name+0x4e>
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	4413      	add	r3, r2
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b5c      	cmp	r3, #92	; 0x5c
 800c506:	d0f0      	beq.n	800c4ea <create_name+0x4e>
			break;
 800c508:	e038      	b.n	800c57c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c50a:	7efb      	ldrb	r3, [r7, #27]
 800c50c:	2b2e      	cmp	r3, #46	; 0x2e
 800c50e:	d003      	beq.n	800c518 <create_name+0x7c>
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	429a      	cmp	r2, r3
 800c516:	d30c      	bcc.n	800c532 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	2b0b      	cmp	r3, #11
 800c51c:	d002      	beq.n	800c524 <create_name+0x88>
 800c51e:	7efb      	ldrb	r3, [r7, #27]
 800c520:	2b2e      	cmp	r3, #46	; 0x2e
 800c522:	d001      	beq.n	800c528 <create_name+0x8c>
 800c524:	2306      	movs	r3, #6
 800c526:	e044      	b.n	800c5b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c528:	2308      	movs	r3, #8
 800c52a:	613b      	str	r3, [r7, #16]
 800c52c:	230b      	movs	r3, #11
 800c52e:	617b      	str	r3, [r7, #20]
			continue;
 800c530:	e022      	b.n	800c578 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c532:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c536:	2b00      	cmp	r3, #0
 800c538:	da04      	bge.n	800c544 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c53a:	7efb      	ldrb	r3, [r7, #27]
 800c53c:	3b80      	subs	r3, #128	; 0x80
 800c53e:	4a1f      	ldr	r2, [pc, #124]	; (800c5bc <create_name+0x120>)
 800c540:	5cd3      	ldrb	r3, [r2, r3]
 800c542:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c544:	7efb      	ldrb	r3, [r7, #27]
 800c546:	4619      	mov	r1, r3
 800c548:	481d      	ldr	r0, [pc, #116]	; (800c5c0 <create_name+0x124>)
 800c54a:	f7ff f80e 	bl	800b56a <chk_chr>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d001      	beq.n	800c558 <create_name+0xbc>
 800c554:	2306      	movs	r3, #6
 800c556:	e02c      	b.n	800c5b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c558:	7efb      	ldrb	r3, [r7, #27]
 800c55a:	2b60      	cmp	r3, #96	; 0x60
 800c55c:	d905      	bls.n	800c56a <create_name+0xce>
 800c55e:	7efb      	ldrb	r3, [r7, #27]
 800c560:	2b7a      	cmp	r3, #122	; 0x7a
 800c562:	d802      	bhi.n	800c56a <create_name+0xce>
 800c564:	7efb      	ldrb	r3, [r7, #27]
 800c566:	3b20      	subs	r3, #32
 800c568:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	1c5a      	adds	r2, r3, #1
 800c56e:	613a      	str	r2, [r7, #16]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	4413      	add	r3, r2
 800c574:	7efa      	ldrb	r2, [r7, #27]
 800c576:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c578:	e7a6      	b.n	800c4c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c57a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	441a      	add	r2, r3
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d101      	bne.n	800c590 <create_name+0xf4>
 800c58c:	2306      	movs	r3, #6
 800c58e:	e010      	b.n	800c5b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2be5      	cmp	r3, #229	; 0xe5
 800c596:	d102      	bne.n	800c59e <create_name+0x102>
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2205      	movs	r2, #5
 800c59c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c59e:	7efb      	ldrb	r3, [r7, #27]
 800c5a0:	2b20      	cmp	r3, #32
 800c5a2:	d801      	bhi.n	800c5a8 <create_name+0x10c>
 800c5a4:	2204      	movs	r2, #4
 800c5a6:	e000      	b.n	800c5aa <create_name+0x10e>
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	330b      	adds	r3, #11
 800c5ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c5b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3720      	adds	r7, #32
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	0800df90 	.word	0x0800df90
 800c5c0:	0800df00 	.word	0x0800df00

0800c5c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c5d8:	e002      	b.n	800c5e0 <follow_path+0x1c>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b2f      	cmp	r3, #47	; 0x2f
 800c5e6:	d0f8      	beq.n	800c5da <follow_path+0x16>
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b5c      	cmp	r3, #92	; 0x5c
 800c5ee:	d0f4      	beq.n	800c5da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	2b1f      	cmp	r3, #31
 800c5fc:	d80a      	bhi.n	800c614 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2280      	movs	r2, #128	; 0x80
 800c602:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c606:	2100      	movs	r1, #0
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7ff fcf9 	bl	800c000 <dir_sdi>
 800c60e:	4603      	mov	r3, r0
 800c610:	75fb      	strb	r3, [r7, #23]
 800c612:	e043      	b.n	800c69c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c614:	463b      	mov	r3, r7
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f7ff ff3f 	bl	800c49c <create_name>
 800c61e:	4603      	mov	r3, r0
 800c620:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c622:	7dfb      	ldrb	r3, [r7, #23]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d134      	bne.n	800c692 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff feaf 	bl	800c38c <dir_find>
 800c62e:	4603      	mov	r3, r0
 800c630:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c638:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00a      	beq.n	800c656 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c640:	7dfb      	ldrb	r3, [r7, #23]
 800c642:	2b04      	cmp	r3, #4
 800c644:	d127      	bne.n	800c696 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c646:	7afb      	ldrb	r3, [r7, #11]
 800c648:	f003 0304 	and.w	r3, r3, #4
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d122      	bne.n	800c696 <follow_path+0xd2>
 800c650:	2305      	movs	r3, #5
 800c652:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c654:	e01f      	b.n	800c696 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c656:	7afb      	ldrb	r3, [r7, #11]
 800c658:	f003 0304 	and.w	r3, r3, #4
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d11c      	bne.n	800c69a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	799b      	ldrb	r3, [r3, #6]
 800c664:	f003 0310 	and.w	r3, r3, #16
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d102      	bne.n	800c672 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c66c:	2305      	movs	r3, #5
 800c66e:	75fb      	strb	r3, [r7, #23]
 800c670:	e014      	b.n	800c69c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	695b      	ldr	r3, [r3, #20]
 800c67c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c680:	4413      	add	r3, r2
 800c682:	4619      	mov	r1, r3
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f7ff fe42 	bl	800c30e <ld_clust>
 800c68a:	4602      	mov	r2, r0
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c690:	e7c0      	b.n	800c614 <follow_path+0x50>
			if (res != FR_OK) break;
 800c692:	bf00      	nop
 800c694:	e002      	b.n	800c69c <follow_path+0xd8>
				break;
 800c696:	bf00      	nop
 800c698:	e000      	b.n	800c69c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c69a:	bf00      	nop
			}
		}
	}

	return res;
 800c69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b087      	sub	sp, #28
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d031      	beq.n	800c720 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	617b      	str	r3, [r7, #20]
 800c6c2:	e002      	b.n	800c6ca <get_ldnumber+0x24>
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	617b      	str	r3, [r7, #20]
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	2b20      	cmp	r3, #32
 800c6d0:	d903      	bls.n	800c6da <get_ldnumber+0x34>
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	2b3a      	cmp	r3, #58	; 0x3a
 800c6d8:	d1f4      	bne.n	800c6c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b3a      	cmp	r3, #58	; 0x3a
 800c6e0:	d11c      	bne.n	800c71c <get_ldnumber+0x76>
			tp = *path;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	60fa      	str	r2, [r7, #12]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	3b30      	subs	r3, #48	; 0x30
 800c6f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2b09      	cmp	r3, #9
 800c6f8:	d80e      	bhi.n	800c718 <get_ldnumber+0x72>
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d10a      	bne.n	800c718 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d107      	bne.n	800c718 <get_ldnumber+0x72>
					vol = (int)i;
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	3301      	adds	r3, #1
 800c710:	617b      	str	r3, [r7, #20]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	e002      	b.n	800c722 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c71c:	2300      	movs	r3, #0
 800c71e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c720:	693b      	ldr	r3, [r7, #16]
}
 800c722:	4618      	mov	r0, r3
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
	...

0800c730 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	70da      	strb	r2, [r3, #3]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f04f 32ff 	mov.w	r2, #4294967295
 800c746:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff f8d8 	bl	800b900 <move_window>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <check_fs+0x2a>
 800c756:	2304      	movs	r3, #4
 800c758:	e038      	b.n	800c7cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	3330      	adds	r3, #48	; 0x30
 800c75e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c762:	4618      	mov	r0, r3
 800c764:	f7fe fe1c 	bl	800b3a0 <ld_word>
 800c768:	4603      	mov	r3, r0
 800c76a:	461a      	mov	r2, r3
 800c76c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c770:	429a      	cmp	r2, r3
 800c772:	d001      	beq.n	800c778 <check_fs+0x48>
 800c774:	2303      	movs	r3, #3
 800c776:	e029      	b.n	800c7cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c77e:	2be9      	cmp	r3, #233	; 0xe9
 800c780:	d009      	beq.n	800c796 <check_fs+0x66>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c788:	2beb      	cmp	r3, #235	; 0xeb
 800c78a:	d11e      	bne.n	800c7ca <check_fs+0x9a>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c792:	2b90      	cmp	r3, #144	; 0x90
 800c794:	d119      	bne.n	800c7ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3330      	adds	r3, #48	; 0x30
 800c79a:	3336      	adds	r3, #54	; 0x36
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fe fe17 	bl	800b3d0 <ld_dword>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7a8:	4a0a      	ldr	r2, [pc, #40]	; (800c7d4 <check_fs+0xa4>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d101      	bne.n	800c7b2 <check_fs+0x82>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	e00c      	b.n	800c7cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	3330      	adds	r3, #48	; 0x30
 800c7b6:	3352      	adds	r3, #82	; 0x52
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fe09 	bl	800b3d0 <ld_dword>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	4a05      	ldr	r2, [pc, #20]	; (800c7d8 <check_fs+0xa8>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d101      	bne.n	800c7ca <check_fs+0x9a>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e000      	b.n	800c7cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c7ca:	2302      	movs	r3, #2
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	00544146 	.word	0x00544146
 800c7d8:	33544146 	.word	0x33544146

0800c7dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b096      	sub	sp, #88	; 0x58
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f7ff ff58 	bl	800c6a6 <get_ldnumber>
 800c7f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	da01      	bge.n	800c802 <find_volume+0x26>
 800c7fe:	230b      	movs	r3, #11
 800c800:	e22d      	b.n	800cc5e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c802:	4aa1      	ldr	r2, [pc, #644]	; (800ca88 <find_volume+0x2ac>)
 800c804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c80a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <find_volume+0x3a>
 800c812:	230c      	movs	r3, #12
 800c814:	e223      	b.n	800cc5e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c81a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c81c:	79fb      	ldrb	r3, [r7, #7]
 800c81e:	f023 0301 	bic.w	r3, r3, #1
 800c822:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d01a      	beq.n	800c862 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82e:	785b      	ldrb	r3, [r3, #1]
 800c830:	4618      	mov	r0, r3
 800c832:	f7fe fd17 	bl	800b264 <disk_status>
 800c836:	4603      	mov	r3, r0
 800c838:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c83c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10c      	bne.n	800c862 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d007      	beq.n	800c85e <find_volume+0x82>
 800c84e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c852:	f003 0304 	and.w	r3, r3, #4
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c85a:	230a      	movs	r3, #10
 800c85c:	e1ff      	b.n	800cc5e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c85e:	2300      	movs	r3, #0
 800c860:	e1fd      	b.n	800cc5e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c864:	2200      	movs	r2, #0
 800c866:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c872:	785b      	ldrb	r3, [r3, #1]
 800c874:	4618      	mov	r0, r3
 800c876:	f7fe fd0f 	bl	800b298 <disk_initialize>
 800c87a:	4603      	mov	r3, r0
 800c87c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c880:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c884:	f003 0301 	and.w	r3, r3, #1
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c88c:	2303      	movs	r3, #3
 800c88e:	e1e6      	b.n	800cc5e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c890:	79fb      	ldrb	r3, [r7, #7]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d007      	beq.n	800c8a6 <find_volume+0xca>
 800c896:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c89a:	f003 0304 	and.w	r3, r3, #4
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c8a2:	230a      	movs	r3, #10
 800c8a4:	e1db      	b.n	800cc5e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c8aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8ae:	f7ff ff3f 	bl	800c730 <check_fs>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c8b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d149      	bne.n	800c954 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	643b      	str	r3, [r7, #64]	; 0x40
 800c8c4:	e01e      	b.n	800c904 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ce:	011b      	lsls	r3, r3, #4
 800c8d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c8d4:	4413      	add	r3, r2
 800c8d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8da:	3304      	adds	r3, #4
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d006      	beq.n	800c8f0 <find_volume+0x114>
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe fd72 	bl	800b3d0 <ld_dword>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	e000      	b.n	800c8f2 <find_volume+0x116>
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	3358      	adds	r3, #88	; 0x58
 800c8f8:	443b      	add	r3, r7
 800c8fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c900:	3301      	adds	r3, #1
 800c902:	643b      	str	r3, [r7, #64]	; 0x40
 800c904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c906:	2b03      	cmp	r3, #3
 800c908:	d9dd      	bls.n	800c8c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c90a:	2300      	movs	r3, #0
 800c90c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <find_volume+0x13e>
 800c914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c916:	3b01      	subs	r3, #1
 800c918:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	3358      	adds	r3, #88	; 0x58
 800c920:	443b      	add	r3, r7
 800c922:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c926:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d005      	beq.n	800c93a <find_volume+0x15e>
 800c92e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c930:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c932:	f7ff fefd 	bl	800c730 <check_fs>
 800c936:	4603      	mov	r3, r0
 800c938:	e000      	b.n	800c93c <find_volume+0x160>
 800c93a:	2303      	movs	r3, #3
 800c93c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c944:	2b01      	cmp	r3, #1
 800c946:	d905      	bls.n	800c954 <find_volume+0x178>
 800c948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c94a:	3301      	adds	r3, #1
 800c94c:	643b      	str	r3, [r7, #64]	; 0x40
 800c94e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c950:	2b03      	cmp	r3, #3
 800c952:	d9e2      	bls.n	800c91a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c954:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c958:	2b04      	cmp	r3, #4
 800c95a:	d101      	bne.n	800c960 <find_volume+0x184>
 800c95c:	2301      	movs	r3, #1
 800c95e:	e17e      	b.n	800cc5e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c964:	2b01      	cmp	r3, #1
 800c966:	d901      	bls.n	800c96c <find_volume+0x190>
 800c968:	230d      	movs	r3, #13
 800c96a:	e178      	b.n	800cc5e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96e:	3330      	adds	r3, #48	; 0x30
 800c970:	330b      	adds	r3, #11
 800c972:	4618      	mov	r0, r3
 800c974:	f7fe fd14 	bl	800b3a0 <ld_word>
 800c978:	4603      	mov	r3, r0
 800c97a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c97e:	d001      	beq.n	800c984 <find_volume+0x1a8>
 800c980:	230d      	movs	r3, #13
 800c982:	e16c      	b.n	800cc5e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	3330      	adds	r3, #48	; 0x30
 800c988:	3316      	adds	r3, #22
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fe fd08 	bl	800b3a0 <ld_word>
 800c990:	4603      	mov	r3, r0
 800c992:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c996:	2b00      	cmp	r3, #0
 800c998:	d106      	bne.n	800c9a8 <find_volume+0x1cc>
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	3330      	adds	r3, #48	; 0x30
 800c99e:	3324      	adds	r3, #36	; 0x24
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fe fd15 	bl	800b3d0 <ld_dword>
 800c9a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	789b      	ldrb	r3, [r3, #2]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d005      	beq.n	800c9cc <find_volume+0x1f0>
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	789b      	ldrb	r3, [r3, #2]
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d001      	beq.n	800c9cc <find_volume+0x1f0>
 800c9c8:	230d      	movs	r3, #13
 800c9ca:	e148      	b.n	800cc5e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	789b      	ldrb	r3, [r3, #2]
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9d4:	fb02 f303 	mul.w	r3, r2, r3
 800c9d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	895b      	ldrh	r3, [r3, #10]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d008      	beq.n	800ca00 <find_volume+0x224>
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f0:	895b      	ldrh	r3, [r3, #10]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	895b      	ldrh	r3, [r3, #10]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <find_volume+0x228>
 800ca00:	230d      	movs	r3, #13
 800ca02:	e12c      	b.n	800cc5e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca06:	3330      	adds	r3, #48	; 0x30
 800ca08:	3311      	adds	r3, #17
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fe fcc8 	bl	800b3a0 <ld_word>
 800ca10:	4603      	mov	r3, r0
 800ca12:	461a      	mov	r2, r3
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	891b      	ldrh	r3, [r3, #8]
 800ca1c:	f003 030f 	and.w	r3, r3, #15
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <find_volume+0x24e>
 800ca26:	230d      	movs	r3, #13
 800ca28:	e119      	b.n	800cc5e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2c:	3330      	adds	r3, #48	; 0x30
 800ca2e:	3313      	adds	r3, #19
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fe fcb5 	bl	800b3a0 <ld_word>
 800ca36:	4603      	mov	r3, r0
 800ca38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ca3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d106      	bne.n	800ca4e <find_volume+0x272>
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	3330      	adds	r3, #48	; 0x30
 800ca44:	3320      	adds	r3, #32
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fe fcc2 	bl	800b3d0 <ld_dword>
 800ca4c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	3330      	adds	r3, #48	; 0x30
 800ca52:	330e      	adds	r3, #14
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fe fca3 	bl	800b3a0 <ld_word>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d101      	bne.n	800ca68 <find_volume+0x28c>
 800ca64:	230d      	movs	r3, #13
 800ca66:	e0fa      	b.n	800cc5e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ca68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca6c:	4413      	add	r3, r2
 800ca6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca70:	8912      	ldrh	r2, [r2, #8]
 800ca72:	0912      	lsrs	r2, r2, #4
 800ca74:	b292      	uxth	r2, r2
 800ca76:	4413      	add	r3, r2
 800ca78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ca7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d204      	bcs.n	800ca8c <find_volume+0x2b0>
 800ca82:	230d      	movs	r3, #13
 800ca84:	e0eb      	b.n	800cc5e <find_volume+0x482>
 800ca86:	bf00      	nop
 800ca88:	24000224 	.word	0x24000224
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ca8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca94:	8952      	ldrh	r2, [r2, #10]
 800ca96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <find_volume+0x2ca>
 800caa2:	230d      	movs	r3, #13
 800caa4:	e0db      	b.n	800cc5e <find_volume+0x482>
		fmt = FS_FAT32;
 800caa6:	2303      	movs	r3, #3
 800caa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d802      	bhi.n	800cabc <find_volume+0x2e0>
 800cab6:	2302      	movs	r3, #2
 800cab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabe:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d802      	bhi.n	800cacc <find_volume+0x2f0>
 800cac6:	2301      	movs	r3, #1
 800cac8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	1c9a      	adds	r2, r3, #2
 800cad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cad8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cada:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cadc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cade:	441a      	add	r2, r3
 800cae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	441a      	add	r2, r3
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800caee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caf2:	2b03      	cmp	r3, #3
 800caf4:	d11e      	bne.n	800cb34 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	3330      	adds	r3, #48	; 0x30
 800cafa:	332a      	adds	r3, #42	; 0x2a
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fe fc4f 	bl	800b3a0 <ld_word>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d001      	beq.n	800cb0c <find_volume+0x330>
 800cb08:	230d      	movs	r3, #13
 800cb0a:	e0a8      	b.n	800cc5e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	891b      	ldrh	r3, [r3, #8]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d001      	beq.n	800cb18 <find_volume+0x33c>
 800cb14:	230d      	movs	r3, #13
 800cb16:	e0a2      	b.n	800cc5e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	3330      	adds	r3, #48	; 0x30
 800cb1c:	332c      	adds	r3, #44	; 0x2c
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7fe fc56 	bl	800b3d0 <ld_dword>
 800cb24:	4602      	mov	r2, r0
 800cb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb28:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2c:	695b      	ldr	r3, [r3, #20]
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	647b      	str	r3, [r7, #68]	; 0x44
 800cb32:	e01f      	b.n	800cb74 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	891b      	ldrh	r3, [r3, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <find_volume+0x364>
 800cb3c:	230d      	movs	r3, #13
 800cb3e:	e08e      	b.n	800cc5e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	6a1a      	ldr	r2, [r3, #32]
 800cb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb46:	441a      	add	r2, r3
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d103      	bne.n	800cb5c <find_volume+0x380>
 800cb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	e00a      	b.n	800cb72 <find_volume+0x396>
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5e:	695a      	ldr	r2, [r3, #20]
 800cb60:	4613      	mov	r3, r2
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	4413      	add	r3, r2
 800cb66:	085a      	lsrs	r2, r3, #1
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cb72:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	699a      	ldr	r2, [r3, #24]
 800cb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb7e:	0a5b      	lsrs	r3, r3, #9
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d201      	bcs.n	800cb88 <find_volume+0x3ac>
 800cb84:	230d      	movs	r3, #13
 800cb86:	e06a      	b.n	800cc5e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8e:	611a      	str	r2, [r3, #16]
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	691a      	ldr	r2, [r3, #16]
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	2280      	movs	r2, #128	; 0x80
 800cb9c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cb9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d149      	bne.n	800cc3a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	3330      	adds	r3, #48	; 0x30
 800cbaa:	3330      	adds	r3, #48	; 0x30
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7fe fbf7 	bl	800b3a0 <ld_word>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d140      	bne.n	800cc3a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbba:	3301      	adds	r3, #1
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbc0:	f7fe fe9e 	bl	800b900 <move_window>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d137      	bne.n	800cc3a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	2200      	movs	r2, #0
 800cbce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	3330      	adds	r3, #48	; 0x30
 800cbd4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fe fbe1 	bl	800b3a0 <ld_word>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d127      	bne.n	800cc3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbec:	3330      	adds	r3, #48	; 0x30
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fe fbee 	bl	800b3d0 <ld_dword>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	4a1c      	ldr	r2, [pc, #112]	; (800cc68 <find_volume+0x48c>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d11e      	bne.n	800cc3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfe:	3330      	adds	r3, #48	; 0x30
 800cc00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fe fbe3 	bl	800b3d0 <ld_dword>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	4a17      	ldr	r2, [pc, #92]	; (800cc6c <find_volume+0x490>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d113      	bne.n	800cc3a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	3330      	adds	r3, #48	; 0x30
 800cc16:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fe fbd8 	bl	800b3d0 <ld_dword>
 800cc20:	4602      	mov	r2, r0
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc28:	3330      	adds	r3, #48	; 0x30
 800cc2a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe fbce 	bl	800b3d0 <ld_dword>
 800cc34:	4602      	mov	r2, r0
 800cc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc38:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cc40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc42:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <find_volume+0x494>)
 800cc44:	881b      	ldrh	r3, [r3, #0]
 800cc46:	3301      	adds	r3, #1
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	4b09      	ldr	r3, [pc, #36]	; (800cc70 <find_volume+0x494>)
 800cc4c:	801a      	strh	r2, [r3, #0]
 800cc4e:	4b08      	ldr	r3, [pc, #32]	; (800cc70 <find_volume+0x494>)
 800cc50:	881a      	ldrh	r2, [r3, #0]
 800cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc54:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc58:	f7fe fdea 	bl	800b830 <clear_lock>
#endif
	return FR_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3758      	adds	r7, #88	; 0x58
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	41615252 	.word	0x41615252
 800cc6c:	61417272 	.word	0x61417272
 800cc70:	24000228 	.word	0x24000228

0800cc74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cc7e:	2309      	movs	r3, #9
 800cc80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d01c      	beq.n	800ccc2 <validate+0x4e>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d018      	beq.n	800ccc2 <validate+0x4e>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d013      	beq.n	800ccc2 <validate+0x4e>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	889a      	ldrh	r2, [r3, #4]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	88db      	ldrh	r3, [r3, #6]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d10c      	bne.n	800ccc2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	785b      	ldrb	r3, [r3, #1]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe fad8 	bl	800b264 <disk_status>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d101      	bne.n	800ccc2 <validate+0x4e>
			res = FR_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <validate+0x5a>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	e000      	b.n	800ccd0 <validate+0x5c>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	6013      	str	r3, [r2, #0]
	return res;
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	4613      	mov	r3, r2
 800ccec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ccf2:	f107 0310 	add.w	r3, r7, #16
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff fcd5 	bl	800c6a6 <get_ldnumber>
 800ccfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	da01      	bge.n	800cd08 <f_mount+0x28>
 800cd04:	230b      	movs	r3, #11
 800cd06:	e02b      	b.n	800cd60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd08:	4a17      	ldr	r2, [pc, #92]	; (800cd68 <f_mount+0x88>)
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d005      	beq.n	800cd24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd18:	69b8      	ldr	r0, [r7, #24]
 800cd1a:	f7fe fd89 	bl	800b830 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	2200      	movs	r2, #0
 800cd22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	490d      	ldr	r1, [pc, #52]	; (800cd68 <f_mount+0x88>)
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <f_mount+0x66>
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d001      	beq.n	800cd4a <f_mount+0x6a>
 800cd46:	2300      	movs	r3, #0
 800cd48:	e00a      	b.n	800cd60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd4a:	f107 010c 	add.w	r1, r7, #12
 800cd4e:	f107 0308 	add.w	r3, r7, #8
 800cd52:	2200      	movs	r2, #0
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7ff fd41 	bl	800c7dc <find_volume>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3720      	adds	r7, #32
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	24000224 	.word	0x24000224

0800cd6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b098      	sub	sp, #96	; 0x60
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	4613      	mov	r3, r2
 800cd78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <f_open+0x18>
 800cd80:	2309      	movs	r3, #9
 800cd82:	e1ad      	b.n	800d0e0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cd8c:	79fa      	ldrb	r2, [r7, #7]
 800cd8e:	f107 0110 	add.w	r1, r7, #16
 800cd92:	f107 0308 	add.w	r3, r7, #8
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7ff fd20 	bl	800c7dc <find_volume>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cda2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f040 8191 	bne.w	800d0ce <f_open+0x362>
		dj.obj.fs = fs;
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	f107 0314 	add.w	r3, r7, #20
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7ff fc03 	bl	800c5c4 <follow_path>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cdc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d11a      	bne.n	800ce02 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cdcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cdd0:	b25b      	sxtb	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	da03      	bge.n	800cdde <f_open+0x72>
				res = FR_INVALID_NAME;
 800cdd6:	2306      	movs	r3, #6
 800cdd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cddc:	e011      	b.n	800ce02 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	f023 0301 	bic.w	r3, r3, #1
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	bf14      	ite	ne
 800cde8:	2301      	movne	r3, #1
 800cdea:	2300      	moveq	r3, #0
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	461a      	mov	r2, r3
 800cdf0:	f107 0314 	add.w	r3, r7, #20
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fe fbd2 	bl	800b5a0 <chk_lock>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce02:	79fb      	ldrb	r3, [r7, #7]
 800ce04:	f003 031c 	and.w	r3, r3, #28
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d07f      	beq.n	800cf0c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ce0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d017      	beq.n	800ce44 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce18:	2b04      	cmp	r3, #4
 800ce1a:	d10e      	bne.n	800ce3a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ce1c:	f7fe fc1c 	bl	800b658 <enq_lock>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d006      	beq.n	800ce34 <f_open+0xc8>
 800ce26:	f107 0314 	add.w	r3, r7, #20
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7ff fb03 	bl	800c436 <dir_register>
 800ce30:	4603      	mov	r3, r0
 800ce32:	e000      	b.n	800ce36 <f_open+0xca>
 800ce34:	2312      	movs	r3, #18
 800ce36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	f043 0308 	orr.w	r3, r3, #8
 800ce40:	71fb      	strb	r3, [r7, #7]
 800ce42:	e010      	b.n	800ce66 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ce44:	7ebb      	ldrb	r3, [r7, #26]
 800ce46:	f003 0311 	and.w	r3, r3, #17
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d003      	beq.n	800ce56 <f_open+0xea>
					res = FR_DENIED;
 800ce4e:	2307      	movs	r3, #7
 800ce50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce54:	e007      	b.n	800ce66 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	f003 0304 	and.w	r3, r3, #4
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <f_open+0xfa>
 800ce60:	2308      	movs	r3, #8
 800ce62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ce66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d168      	bne.n	800cf40 <f_open+0x1d4>
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	f003 0308 	and.w	r3, r3, #8
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d063      	beq.n	800cf40 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ce78:	f7fe f860 	bl	800af3c <get_fattime>
 800ce7c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ce7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce80:	330e      	adds	r3, #14
 800ce82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe fae1 	bl	800b44c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ce8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8c:	3316      	adds	r3, #22
 800ce8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fe fadb 	bl	800b44c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ce96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce98:	330b      	adds	r3, #11
 800ce9a:	2220      	movs	r2, #32
 800ce9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cea2:	4611      	mov	r1, r2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7ff fa32 	bl	800c30e <ld_clust>
 800ceaa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff fa4a 	bl	800c34c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ceb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceba:	331c      	adds	r3, #28
 800cebc:	2100      	movs	r1, #0
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fe fac4 	bl	800b44c <st_dword>
					fs->wflag = 1;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	2201      	movs	r2, #1
 800cec8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ceca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d037      	beq.n	800cf40 <f_open+0x1d4>
						dw = fs->winsect;
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ced6:	f107 0314 	add.w	r3, r7, #20
 800ceda:	2200      	movs	r2, #0
 800cedc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe ff5d 	bl	800bd9e <remove_chain>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ceea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d126      	bne.n	800cf40 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fd02 	bl	800b900 <move_window>
 800cefc:	4603      	mov	r3, r0
 800cefe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf06:	3a01      	subs	r2, #1
 800cf08:	60da      	str	r2, [r3, #12]
 800cf0a:	e019      	b.n	800cf40 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d115      	bne.n	800cf40 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf14:	7ebb      	ldrb	r3, [r7, #26]
 800cf16:	f003 0310 	and.w	r3, r3, #16
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d003      	beq.n	800cf26 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cf1e:	2304      	movs	r3, #4
 800cf20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf24:	e00c      	b.n	800cf40 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	f003 0302 	and.w	r3, r3, #2
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <f_open+0x1d4>
 800cf30:	7ebb      	ldrb	r3, [r7, #26]
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d002      	beq.n	800cf40 <f_open+0x1d4>
						res = FR_DENIED;
 800cf3a:	2307      	movs	r3, #7
 800cf3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cf40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d128      	bne.n	800cf9a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf48:	79fb      	ldrb	r3, [r7, #7]
 800cf4a:	f003 0308 	and.w	r3, r3, #8
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cf62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	f023 0301 	bic.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	bf14      	ite	ne
 800cf72:	2301      	movne	r3, #1
 800cf74:	2300      	moveq	r3, #0
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	461a      	mov	r2, r3
 800cf7a:	f107 0314 	add.w	r3, r7, #20
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fe fb8b 	bl	800b69c <inc_lock>
 800cf86:	4602      	mov	r2, r0
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d102      	bne.n	800cf9a <f_open+0x22e>
 800cf94:	2302      	movs	r3, #2
 800cf96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cf9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f040 8095 	bne.w	800d0ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7ff f9af 	bl	800c30e <ld_clust>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb8:	331c      	adds	r3, #28
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fe fa08 	bl	800b3d0 <ld_dword>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	88da      	ldrh	r2, [r3, #6]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	79fa      	ldrb	r2, [r7, #7]
 800cfde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2200      	movs	r2, #0
 800cff0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	3330      	adds	r3, #48	; 0x30
 800cff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cffa:	2100      	movs	r1, #0
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fe fa72 	bl	800b4e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	f003 0320 	and.w	r3, r3, #32
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d060      	beq.n	800d0ce <f_open+0x362>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d05c      	beq.n	800d0ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	68da      	ldr	r2, [r3, #12]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	895b      	ldrh	r3, [r3, #10]
 800d020:	025b      	lsls	r3, r3, #9
 800d022:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	657b      	str	r3, [r7, #84]	; 0x54
 800d030:	e016      	b.n	800d060 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe fd1d 	bl	800ba76 <get_fat>
 800d03c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d03e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d040:	2b01      	cmp	r3, #1
 800d042:	d802      	bhi.n	800d04a <f_open+0x2de>
 800d044:	2302      	movs	r3, #2
 800d046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d04a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d050:	d102      	bne.n	800d058 <f_open+0x2ec>
 800d052:	2301      	movs	r3, #1
 800d054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	657b      	str	r3, [r7, #84]	; 0x54
 800d060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d064:	2b00      	cmp	r3, #0
 800d066:	d103      	bne.n	800d070 <f_open+0x304>
 800d068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d8e0      	bhi.n	800d032 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d074:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d127      	bne.n	800d0ce <f_open+0x362>
 800d07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d084:	2b00      	cmp	r3, #0
 800d086:	d022      	beq.n	800d0ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe fcd3 	bl	800ba38 <clust2sect>
 800d092:	6478      	str	r0, [r7, #68]	; 0x44
 800d094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d096:	2b00      	cmp	r3, #0
 800d098:	d103      	bne.n	800d0a2 <f_open+0x336>
						res = FR_INT_ERR;
 800d09a:	2302      	movs	r3, #2
 800d09c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d0a0:	e015      	b.n	800d0ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d0a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0a4:	0a5a      	lsrs	r2, r3, #9
 800d0a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0a8:	441a      	add	r2, r3
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	7858      	ldrb	r0, [r3, #1]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6a1a      	ldr	r2, [r3, #32]
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f7fe f911 	bl	800b2e4 <disk_read>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d002      	beq.n	800d0ce <f_open+0x362>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d0ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <f_open+0x370>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d0dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3760      	adds	r7, #96	; 0x60
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b08e      	sub	sp, #56	; 0x38
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
 800d0f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f107 0214 	add.w	r2, r7, #20
 800d106:	4611      	mov	r1, r2
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff fdb3 	bl	800cc74 <validate>
 800d10e:	4603      	mov	r3, r0
 800d110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d107      	bne.n	800d12c <f_read+0x44>
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	7d5b      	ldrb	r3, [r3, #21]
 800d120:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <f_read+0x4a>
 800d12c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d130:	e115      	b.n	800d35e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	7d1b      	ldrb	r3, [r3, #20]
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <f_read+0x5a>
 800d13e:	2307      	movs	r3, #7
 800d140:	e10d      	b.n	800d35e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	68da      	ldr	r2, [r3, #12]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	699b      	ldr	r3, [r3, #24]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	429a      	cmp	r2, r3
 800d154:	f240 80fe 	bls.w	800d354 <f_read+0x26c>
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d15c:	e0fa      	b.n	800d354 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	699b      	ldr	r3, [r3, #24]
 800d162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d166:	2b00      	cmp	r3, #0
 800d168:	f040 80c6 	bne.w	800d2f8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	699b      	ldr	r3, [r3, #24]
 800d170:	0a5b      	lsrs	r3, r3, #9
 800d172:	697a      	ldr	r2, [r7, #20]
 800d174:	8952      	ldrh	r2, [r2, #10]
 800d176:	3a01      	subs	r2, #1
 800d178:	4013      	ands	r3, r2
 800d17a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d12f      	bne.n	800d1e2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d103      	bne.n	800d192 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	633b      	str	r3, [r7, #48]	; 0x30
 800d190:	e013      	b.n	800d1ba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d196:	2b00      	cmp	r3, #0
 800d198:	d007      	beq.n	800d1aa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	699b      	ldr	r3, [r3, #24]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7fe fef9 	bl	800bf98 <clmt_clust>
 800d1a6:	6338      	str	r0, [r7, #48]	; 0x30
 800d1a8:	e007      	b.n	800d1ba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	69db      	ldr	r3, [r3, #28]
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	4610      	mov	r0, r2
 800d1b4:	f7fe fc5f 	bl	800ba76 <get_fat>
 800d1b8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d804      	bhi.n	800d1ca <f_read+0xe2>
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	755a      	strb	r2, [r3, #21]
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	e0c9      	b.n	800d35e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d0:	d104      	bne.n	800d1dc <f_read+0xf4>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	755a      	strb	r2, [r3, #21]
 800d1d8:	2301      	movs	r3, #1
 800d1da:	e0c0      	b.n	800d35e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1e0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	69db      	ldr	r3, [r3, #28]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	4610      	mov	r0, r2
 800d1ec:	f7fe fc24 	bl	800ba38 <clust2sect>
 800d1f0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d104      	bne.n	800d202 <f_read+0x11a>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2202      	movs	r2, #2
 800d1fc:	755a      	strb	r2, [r3, #21]
 800d1fe:	2302      	movs	r3, #2
 800d200:	e0ad      	b.n	800d35e <f_read+0x276>
			sect += csect;
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	4413      	add	r3, r2
 800d208:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	0a5b      	lsrs	r3, r3, #9
 800d20e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	2b00      	cmp	r3, #0
 800d214:	d039      	beq.n	800d28a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d216:	69fa      	ldr	r2, [r7, #28]
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	4413      	add	r3, r2
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	8952      	ldrh	r2, [r2, #10]
 800d220:	4293      	cmp	r3, r2
 800d222:	d905      	bls.n	800d230 <f_read+0x148>
					cc = fs->csize - csect;
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	895b      	ldrh	r3, [r3, #10]
 800d228:	461a      	mov	r2, r3
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	7858      	ldrb	r0, [r3, #1]
 800d234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d236:	69ba      	ldr	r2, [r7, #24]
 800d238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d23a:	f7fe f853 	bl	800b2e4 <disk_read>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d004      	beq.n	800d24e <f_read+0x166>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2201      	movs	r2, #1
 800d248:	755a      	strb	r2, [r3, #21]
 800d24a:	2301      	movs	r3, #1
 800d24c:	e087      	b.n	800d35e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	7d1b      	ldrb	r3, [r3, #20]
 800d252:	b25b      	sxtb	r3, r3
 800d254:	2b00      	cmp	r3, #0
 800d256:	da14      	bge.n	800d282 <f_read+0x19a>
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6a1a      	ldr	r2, [r3, #32]
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	1ad3      	subs	r3, r2, r3
 800d260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d262:	429a      	cmp	r2, r3
 800d264:	d90d      	bls.n	800d282 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6a1a      	ldr	r2, [r3, #32]
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	025b      	lsls	r3, r3, #9
 800d270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d272:	18d0      	adds	r0, r2, r3
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	3330      	adds	r3, #48	; 0x30
 800d278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d27c:	4619      	mov	r1, r3
 800d27e:	f7fe f911 	bl	800b4a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d284:	025b      	lsls	r3, r3, #9
 800d286:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d288:	e050      	b.n	800d32c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6a1b      	ldr	r3, [r3, #32]
 800d28e:	69ba      	ldr	r2, [r7, #24]
 800d290:	429a      	cmp	r2, r3
 800d292:	d02e      	beq.n	800d2f2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	7d1b      	ldrb	r3, [r3, #20]
 800d298:	b25b      	sxtb	r3, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	da18      	bge.n	800d2d0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	7858      	ldrb	r0, [r3, #1]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6a1a      	ldr	r2, [r3, #32]
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	f7fe f839 	bl	800b324 <disk_write>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d004      	beq.n	800d2c2 <f_read+0x1da>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	755a      	strb	r2, [r3, #21]
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e04d      	b.n	800d35e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	7d1b      	ldrb	r3, [r3, #20]
 800d2c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	7858      	ldrb	r0, [r3, #1]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2da:	2301      	movs	r3, #1
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	f7fe f801 	bl	800b2e4 <disk_read>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d004      	beq.n	800d2f2 <f_read+0x20a>
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	755a      	strb	r2, [r3, #21]
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e035      	b.n	800d35e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	69ba      	ldr	r2, [r7, #24]
 800d2f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d300:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d304:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d901      	bls.n	800d312 <f_read+0x22a>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	699b      	ldr	r3, [r3, #24]
 800d31c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d320:	4413      	add	r3, r2
 800d322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d324:	4619      	mov	r1, r3
 800d326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d328:	f7fe f8bc 	bl	800b4a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	4413      	add	r3, r2
 800d332:	627b      	str	r3, [r7, #36]	; 0x24
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	699a      	ldr	r2, [r3, #24]
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	441a      	add	r2, r3
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	619a      	str	r2, [r3, #24]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	441a      	add	r2, r3
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	601a      	str	r2, [r3, #0]
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	f47f af01 	bne.w	800d15e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3738      	adds	r7, #56	; 0x38
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d366:	b580      	push	{r7, lr}
 800d368:	b086      	sub	sp, #24
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f107 0208 	add.w	r2, r7, #8
 800d374:	4611      	mov	r1, r2
 800d376:	4618      	mov	r0, r3
 800d378:	f7ff fc7c 	bl	800cc74 <validate>
 800d37c:	4603      	mov	r3, r0
 800d37e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d380:	7dfb      	ldrb	r3, [r7, #23]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d168      	bne.n	800d458 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	7d1b      	ldrb	r3, [r3, #20]
 800d38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d062      	beq.n	800d458 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	7d1b      	ldrb	r3, [r3, #20]
 800d396:	b25b      	sxtb	r3, r3
 800d398:	2b00      	cmp	r3, #0
 800d39a:	da15      	bge.n	800d3c8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	7858      	ldrb	r0, [r3, #1]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a1a      	ldr	r2, [r3, #32]
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	f7fd ffba 	bl	800b324 <disk_write>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <f_sync+0x54>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e04f      	b.n	800d45a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	7d1b      	ldrb	r3, [r3, #20]
 800d3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d3c8:	f7fd fdb8 	bl	800af3c <get_fattime>
 800d3cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	4610      	mov	r0, r2
 800d3d8:	f7fe fa92 	bl	800b900 <move_window>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d138      	bne.n	800d458 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	330b      	adds	r3, #11
 800d3f0:	781a      	ldrb	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	330b      	adds	r3, #11
 800d3f6:	f042 0220 	orr.w	r2, r2, #32
 800d3fa:	b2d2      	uxtb	r2, r2
 800d3fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6818      	ldr	r0, [r3, #0]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	461a      	mov	r2, r3
 800d408:	68f9      	ldr	r1, [r7, #12]
 800d40a:	f7fe ff9f 	bl	800c34c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f103 021c 	add.w	r2, r3, #28
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	4619      	mov	r1, r3
 800d41a:	4610      	mov	r0, r2
 800d41c:	f7fe f816 	bl	800b44c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	3316      	adds	r3, #22
 800d424:	6939      	ldr	r1, [r7, #16]
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe f810 	bl	800b44c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	3312      	adds	r3, #18
 800d430:	2100      	movs	r1, #0
 800d432:	4618      	mov	r0, r3
 800d434:	f7fd ffef 	bl	800b416 <st_word>
					fs->wflag = 1;
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	2201      	movs	r2, #1
 800d43c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe fa8b 	bl	800b95c <sync_fs>
 800d446:	4603      	mov	r3, r0
 800d448:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	7d1b      	ldrb	r3, [r3, #20]
 800d44e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d452:	b2da      	uxtb	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d458:	7dfb      	ldrb	r3, [r7, #23]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f7ff ff7b 	bl	800d366 <f_sync>
 800d470:	4603      	mov	r3, r0
 800d472:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d474:	7bfb      	ldrb	r3, [r7, #15]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d118      	bne.n	800d4ac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f107 0208 	add.w	r2, r7, #8
 800d480:	4611      	mov	r1, r2
 800d482:	4618      	mov	r0, r3
 800d484:	f7ff fbf6 	bl	800cc74 <validate>
 800d488:	4603      	mov	r3, r0
 800d48a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d48c:	7bfb      	ldrb	r3, [r7, #15]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10c      	bne.n	800d4ac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	4618      	mov	r0, r3
 800d498:	f7fe f98e 	bl	800b7b8 <dec_lock>
 800d49c:	4603      	mov	r3, r0
 800d49e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d4a0:	7bfb      	ldrb	r3, [r7, #15]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d102      	bne.n	800d4ac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
	...

0800d4b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b087      	sub	sp, #28
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d4ce:	4b1f      	ldr	r3, [pc, #124]	; (800d54c <FATFS_LinkDriverEx+0x94>)
 800d4d0:	7a5b      	ldrb	r3, [r3, #9]
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d131      	bne.n	800d53c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d4d8:	4b1c      	ldr	r3, [pc, #112]	; (800d54c <FATFS_LinkDriverEx+0x94>)
 800d4da:	7a5b      	ldrb	r3, [r3, #9]
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	461a      	mov	r2, r3
 800d4e0:	4b1a      	ldr	r3, [pc, #104]	; (800d54c <FATFS_LinkDriverEx+0x94>)
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d4e6:	4b19      	ldr	r3, [pc, #100]	; (800d54c <FATFS_LinkDriverEx+0x94>)
 800d4e8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	4a17      	ldr	r2, [pc, #92]	; (800d54c <FATFS_LinkDriverEx+0x94>)
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4f6:	4b15      	ldr	r3, [pc, #84]	; (800d54c <FATFS_LinkDriverEx+0x94>)
 800d4f8:	7a5b      	ldrb	r3, [r3, #9]
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	4b13      	ldr	r3, [pc, #76]	; (800d54c <FATFS_LinkDriverEx+0x94>)
 800d500:	4413      	add	r3, r2
 800d502:	79fa      	ldrb	r2, [r7, #7]
 800d504:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d506:	4b11      	ldr	r3, [pc, #68]	; (800d54c <FATFS_LinkDriverEx+0x94>)
 800d508:	7a5b      	ldrb	r3, [r3, #9]
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	b2d1      	uxtb	r1, r2
 800d510:	4a0e      	ldr	r2, [pc, #56]	; (800d54c <FATFS_LinkDriverEx+0x94>)
 800d512:	7251      	strb	r1, [r2, #9]
 800d514:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d516:	7dbb      	ldrb	r3, [r7, #22]
 800d518:	3330      	adds	r3, #48	; 0x30
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	3301      	adds	r3, #1
 800d524:	223a      	movs	r2, #58	; 0x3a
 800d526:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	3302      	adds	r3, #2
 800d52c:	222f      	movs	r2, #47	; 0x2f
 800d52e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	3303      	adds	r3, #3
 800d534:	2200      	movs	r2, #0
 800d536:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d53c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	371c      	adds	r7, #28
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	2400024c 	.word	0x2400024c

0800d550 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d55a:	2200      	movs	r2, #0
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff ffaa 	bl	800d4b8 <FATFS_LinkDriverEx>
 800d564:	4603      	mov	r3, r0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <__errno>:
 800d570:	4b01      	ldr	r3, [pc, #4]	; (800d578 <__errno+0x8>)
 800d572:	6818      	ldr	r0, [r3, #0]
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	24000010 	.word	0x24000010

0800d57c <__libc_init_array>:
 800d57c:	b570      	push	{r4, r5, r6, lr}
 800d57e:	4d0d      	ldr	r5, [pc, #52]	; (800d5b4 <__libc_init_array+0x38>)
 800d580:	4c0d      	ldr	r4, [pc, #52]	; (800d5b8 <__libc_init_array+0x3c>)
 800d582:	1b64      	subs	r4, r4, r5
 800d584:	10a4      	asrs	r4, r4, #2
 800d586:	2600      	movs	r6, #0
 800d588:	42a6      	cmp	r6, r4
 800d58a:	d109      	bne.n	800d5a0 <__libc_init_array+0x24>
 800d58c:	4d0b      	ldr	r5, [pc, #44]	; (800d5bc <__libc_init_array+0x40>)
 800d58e:	4c0c      	ldr	r4, [pc, #48]	; (800d5c0 <__libc_init_array+0x44>)
 800d590:	f000 fc8e 	bl	800deb0 <_init>
 800d594:	1b64      	subs	r4, r4, r5
 800d596:	10a4      	asrs	r4, r4, #2
 800d598:	2600      	movs	r6, #0
 800d59a:	42a6      	cmp	r6, r4
 800d59c:	d105      	bne.n	800d5aa <__libc_init_array+0x2e>
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5a4:	4798      	blx	r3
 800d5a6:	3601      	adds	r6, #1
 800d5a8:	e7ee      	b.n	800d588 <__libc_init_array+0xc>
 800d5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5ae:	4798      	blx	r3
 800d5b0:	3601      	adds	r6, #1
 800d5b2:	e7f2      	b.n	800d59a <__libc_init_array+0x1e>
 800d5b4:	0800e04c 	.word	0x0800e04c
 800d5b8:	0800e04c 	.word	0x0800e04c
 800d5bc:	0800e04c 	.word	0x0800e04c
 800d5c0:	0800e050 	.word	0x0800e050

0800d5c4 <memset>:
 800d5c4:	4402      	add	r2, r0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d100      	bne.n	800d5ce <memset+0xa>
 800d5cc:	4770      	bx	lr
 800d5ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d5d2:	e7f9      	b.n	800d5c8 <memset+0x4>

0800d5d4 <siprintf>:
 800d5d4:	b40e      	push	{r1, r2, r3}
 800d5d6:	b500      	push	{lr}
 800d5d8:	b09c      	sub	sp, #112	; 0x70
 800d5da:	ab1d      	add	r3, sp, #116	; 0x74
 800d5dc:	9002      	str	r0, [sp, #8]
 800d5de:	9006      	str	r0, [sp, #24]
 800d5e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5e4:	4809      	ldr	r0, [pc, #36]	; (800d60c <siprintf+0x38>)
 800d5e6:	9107      	str	r1, [sp, #28]
 800d5e8:	9104      	str	r1, [sp, #16]
 800d5ea:	4909      	ldr	r1, [pc, #36]	; (800d610 <siprintf+0x3c>)
 800d5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5f0:	9105      	str	r1, [sp, #20]
 800d5f2:	6800      	ldr	r0, [r0, #0]
 800d5f4:	9301      	str	r3, [sp, #4]
 800d5f6:	a902      	add	r1, sp, #8
 800d5f8:	f000 f868 	bl	800d6cc <_svfiprintf_r>
 800d5fc:	9b02      	ldr	r3, [sp, #8]
 800d5fe:	2200      	movs	r2, #0
 800d600:	701a      	strb	r2, [r3, #0]
 800d602:	b01c      	add	sp, #112	; 0x70
 800d604:	f85d eb04 	ldr.w	lr, [sp], #4
 800d608:	b003      	add	sp, #12
 800d60a:	4770      	bx	lr
 800d60c:	24000010 	.word	0x24000010
 800d610:	ffff0208 	.word	0xffff0208

0800d614 <__ssputs_r>:
 800d614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d618:	688e      	ldr	r6, [r1, #8]
 800d61a:	429e      	cmp	r6, r3
 800d61c:	4682      	mov	sl, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	4690      	mov	r8, r2
 800d622:	461f      	mov	r7, r3
 800d624:	d838      	bhi.n	800d698 <__ssputs_r+0x84>
 800d626:	898a      	ldrh	r2, [r1, #12]
 800d628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d62c:	d032      	beq.n	800d694 <__ssputs_r+0x80>
 800d62e:	6825      	ldr	r5, [r4, #0]
 800d630:	6909      	ldr	r1, [r1, #16]
 800d632:	eba5 0901 	sub.w	r9, r5, r1
 800d636:	6965      	ldr	r5, [r4, #20]
 800d638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d63c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d640:	3301      	adds	r3, #1
 800d642:	444b      	add	r3, r9
 800d644:	106d      	asrs	r5, r5, #1
 800d646:	429d      	cmp	r5, r3
 800d648:	bf38      	it	cc
 800d64a:	461d      	movcc	r5, r3
 800d64c:	0553      	lsls	r3, r2, #21
 800d64e:	d531      	bpl.n	800d6b4 <__ssputs_r+0xa0>
 800d650:	4629      	mov	r1, r5
 800d652:	f000 fb63 	bl	800dd1c <_malloc_r>
 800d656:	4606      	mov	r6, r0
 800d658:	b950      	cbnz	r0, 800d670 <__ssputs_r+0x5c>
 800d65a:	230c      	movs	r3, #12
 800d65c:	f8ca 3000 	str.w	r3, [sl]
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d666:	81a3      	strh	r3, [r4, #12]
 800d668:	f04f 30ff 	mov.w	r0, #4294967295
 800d66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d670:	6921      	ldr	r1, [r4, #16]
 800d672:	464a      	mov	r2, r9
 800d674:	f000 fabe 	bl	800dbf4 <memcpy>
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d682:	81a3      	strh	r3, [r4, #12]
 800d684:	6126      	str	r6, [r4, #16]
 800d686:	6165      	str	r5, [r4, #20]
 800d688:	444e      	add	r6, r9
 800d68a:	eba5 0509 	sub.w	r5, r5, r9
 800d68e:	6026      	str	r6, [r4, #0]
 800d690:	60a5      	str	r5, [r4, #8]
 800d692:	463e      	mov	r6, r7
 800d694:	42be      	cmp	r6, r7
 800d696:	d900      	bls.n	800d69a <__ssputs_r+0x86>
 800d698:	463e      	mov	r6, r7
 800d69a:	6820      	ldr	r0, [r4, #0]
 800d69c:	4632      	mov	r2, r6
 800d69e:	4641      	mov	r1, r8
 800d6a0:	f000 fab6 	bl	800dc10 <memmove>
 800d6a4:	68a3      	ldr	r3, [r4, #8]
 800d6a6:	1b9b      	subs	r3, r3, r6
 800d6a8:	60a3      	str	r3, [r4, #8]
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	4433      	add	r3, r6
 800d6ae:	6023      	str	r3, [r4, #0]
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	e7db      	b.n	800d66c <__ssputs_r+0x58>
 800d6b4:	462a      	mov	r2, r5
 800d6b6:	f000 fba5 	bl	800de04 <_realloc_r>
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d1e1      	bne.n	800d684 <__ssputs_r+0x70>
 800d6c0:	6921      	ldr	r1, [r4, #16]
 800d6c2:	4650      	mov	r0, sl
 800d6c4:	f000 fabe 	bl	800dc44 <_free_r>
 800d6c8:	e7c7      	b.n	800d65a <__ssputs_r+0x46>
	...

0800d6cc <_svfiprintf_r>:
 800d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	4698      	mov	r8, r3
 800d6d2:	898b      	ldrh	r3, [r1, #12]
 800d6d4:	061b      	lsls	r3, r3, #24
 800d6d6:	b09d      	sub	sp, #116	; 0x74
 800d6d8:	4607      	mov	r7, r0
 800d6da:	460d      	mov	r5, r1
 800d6dc:	4614      	mov	r4, r2
 800d6de:	d50e      	bpl.n	800d6fe <_svfiprintf_r+0x32>
 800d6e0:	690b      	ldr	r3, [r1, #16]
 800d6e2:	b963      	cbnz	r3, 800d6fe <_svfiprintf_r+0x32>
 800d6e4:	2140      	movs	r1, #64	; 0x40
 800d6e6:	f000 fb19 	bl	800dd1c <_malloc_r>
 800d6ea:	6028      	str	r0, [r5, #0]
 800d6ec:	6128      	str	r0, [r5, #16]
 800d6ee:	b920      	cbnz	r0, 800d6fa <_svfiprintf_r+0x2e>
 800d6f0:	230c      	movs	r3, #12
 800d6f2:	603b      	str	r3, [r7, #0]
 800d6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f8:	e0d1      	b.n	800d89e <_svfiprintf_r+0x1d2>
 800d6fa:	2340      	movs	r3, #64	; 0x40
 800d6fc:	616b      	str	r3, [r5, #20]
 800d6fe:	2300      	movs	r3, #0
 800d700:	9309      	str	r3, [sp, #36]	; 0x24
 800d702:	2320      	movs	r3, #32
 800d704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d708:	f8cd 800c 	str.w	r8, [sp, #12]
 800d70c:	2330      	movs	r3, #48	; 0x30
 800d70e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d8b8 <_svfiprintf_r+0x1ec>
 800d712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d716:	f04f 0901 	mov.w	r9, #1
 800d71a:	4623      	mov	r3, r4
 800d71c:	469a      	mov	sl, r3
 800d71e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d722:	b10a      	cbz	r2, 800d728 <_svfiprintf_r+0x5c>
 800d724:	2a25      	cmp	r2, #37	; 0x25
 800d726:	d1f9      	bne.n	800d71c <_svfiprintf_r+0x50>
 800d728:	ebba 0b04 	subs.w	fp, sl, r4
 800d72c:	d00b      	beq.n	800d746 <_svfiprintf_r+0x7a>
 800d72e:	465b      	mov	r3, fp
 800d730:	4622      	mov	r2, r4
 800d732:	4629      	mov	r1, r5
 800d734:	4638      	mov	r0, r7
 800d736:	f7ff ff6d 	bl	800d614 <__ssputs_r>
 800d73a:	3001      	adds	r0, #1
 800d73c:	f000 80aa 	beq.w	800d894 <_svfiprintf_r+0x1c8>
 800d740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d742:	445a      	add	r2, fp
 800d744:	9209      	str	r2, [sp, #36]	; 0x24
 800d746:	f89a 3000 	ldrb.w	r3, [sl]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f000 80a2 	beq.w	800d894 <_svfiprintf_r+0x1c8>
 800d750:	2300      	movs	r3, #0
 800d752:	f04f 32ff 	mov.w	r2, #4294967295
 800d756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d75a:	f10a 0a01 	add.w	sl, sl, #1
 800d75e:	9304      	str	r3, [sp, #16]
 800d760:	9307      	str	r3, [sp, #28]
 800d762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d766:	931a      	str	r3, [sp, #104]	; 0x68
 800d768:	4654      	mov	r4, sl
 800d76a:	2205      	movs	r2, #5
 800d76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d770:	4851      	ldr	r0, [pc, #324]	; (800d8b8 <_svfiprintf_r+0x1ec>)
 800d772:	f7f2 fdb5 	bl	80002e0 <memchr>
 800d776:	9a04      	ldr	r2, [sp, #16]
 800d778:	b9d8      	cbnz	r0, 800d7b2 <_svfiprintf_r+0xe6>
 800d77a:	06d0      	lsls	r0, r2, #27
 800d77c:	bf44      	itt	mi
 800d77e:	2320      	movmi	r3, #32
 800d780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d784:	0711      	lsls	r1, r2, #28
 800d786:	bf44      	itt	mi
 800d788:	232b      	movmi	r3, #43	; 0x2b
 800d78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d78e:	f89a 3000 	ldrb.w	r3, [sl]
 800d792:	2b2a      	cmp	r3, #42	; 0x2a
 800d794:	d015      	beq.n	800d7c2 <_svfiprintf_r+0xf6>
 800d796:	9a07      	ldr	r2, [sp, #28]
 800d798:	4654      	mov	r4, sl
 800d79a:	2000      	movs	r0, #0
 800d79c:	f04f 0c0a 	mov.w	ip, #10
 800d7a0:	4621      	mov	r1, r4
 800d7a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7a6:	3b30      	subs	r3, #48	; 0x30
 800d7a8:	2b09      	cmp	r3, #9
 800d7aa:	d94e      	bls.n	800d84a <_svfiprintf_r+0x17e>
 800d7ac:	b1b0      	cbz	r0, 800d7dc <_svfiprintf_r+0x110>
 800d7ae:	9207      	str	r2, [sp, #28]
 800d7b0:	e014      	b.n	800d7dc <_svfiprintf_r+0x110>
 800d7b2:	eba0 0308 	sub.w	r3, r0, r8
 800d7b6:	fa09 f303 	lsl.w	r3, r9, r3
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	9304      	str	r3, [sp, #16]
 800d7be:	46a2      	mov	sl, r4
 800d7c0:	e7d2      	b.n	800d768 <_svfiprintf_r+0x9c>
 800d7c2:	9b03      	ldr	r3, [sp, #12]
 800d7c4:	1d19      	adds	r1, r3, #4
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	9103      	str	r1, [sp, #12]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	bfbb      	ittet	lt
 800d7ce:	425b      	neglt	r3, r3
 800d7d0:	f042 0202 	orrlt.w	r2, r2, #2
 800d7d4:	9307      	strge	r3, [sp, #28]
 800d7d6:	9307      	strlt	r3, [sp, #28]
 800d7d8:	bfb8      	it	lt
 800d7da:	9204      	strlt	r2, [sp, #16]
 800d7dc:	7823      	ldrb	r3, [r4, #0]
 800d7de:	2b2e      	cmp	r3, #46	; 0x2e
 800d7e0:	d10c      	bne.n	800d7fc <_svfiprintf_r+0x130>
 800d7e2:	7863      	ldrb	r3, [r4, #1]
 800d7e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e6:	d135      	bne.n	800d854 <_svfiprintf_r+0x188>
 800d7e8:	9b03      	ldr	r3, [sp, #12]
 800d7ea:	1d1a      	adds	r2, r3, #4
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	9203      	str	r2, [sp, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	bfb8      	it	lt
 800d7f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7f8:	3402      	adds	r4, #2
 800d7fa:	9305      	str	r3, [sp, #20]
 800d7fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d8c8 <_svfiprintf_r+0x1fc>
 800d800:	7821      	ldrb	r1, [r4, #0]
 800d802:	2203      	movs	r2, #3
 800d804:	4650      	mov	r0, sl
 800d806:	f7f2 fd6b 	bl	80002e0 <memchr>
 800d80a:	b140      	cbz	r0, 800d81e <_svfiprintf_r+0x152>
 800d80c:	2340      	movs	r3, #64	; 0x40
 800d80e:	eba0 000a 	sub.w	r0, r0, sl
 800d812:	fa03 f000 	lsl.w	r0, r3, r0
 800d816:	9b04      	ldr	r3, [sp, #16]
 800d818:	4303      	orrs	r3, r0
 800d81a:	3401      	adds	r4, #1
 800d81c:	9304      	str	r3, [sp, #16]
 800d81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d822:	4826      	ldr	r0, [pc, #152]	; (800d8bc <_svfiprintf_r+0x1f0>)
 800d824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d828:	2206      	movs	r2, #6
 800d82a:	f7f2 fd59 	bl	80002e0 <memchr>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d038      	beq.n	800d8a4 <_svfiprintf_r+0x1d8>
 800d832:	4b23      	ldr	r3, [pc, #140]	; (800d8c0 <_svfiprintf_r+0x1f4>)
 800d834:	bb1b      	cbnz	r3, 800d87e <_svfiprintf_r+0x1b2>
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	3307      	adds	r3, #7
 800d83a:	f023 0307 	bic.w	r3, r3, #7
 800d83e:	3308      	adds	r3, #8
 800d840:	9303      	str	r3, [sp, #12]
 800d842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d844:	4433      	add	r3, r6
 800d846:	9309      	str	r3, [sp, #36]	; 0x24
 800d848:	e767      	b.n	800d71a <_svfiprintf_r+0x4e>
 800d84a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d84e:	460c      	mov	r4, r1
 800d850:	2001      	movs	r0, #1
 800d852:	e7a5      	b.n	800d7a0 <_svfiprintf_r+0xd4>
 800d854:	2300      	movs	r3, #0
 800d856:	3401      	adds	r4, #1
 800d858:	9305      	str	r3, [sp, #20]
 800d85a:	4619      	mov	r1, r3
 800d85c:	f04f 0c0a 	mov.w	ip, #10
 800d860:	4620      	mov	r0, r4
 800d862:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d866:	3a30      	subs	r2, #48	; 0x30
 800d868:	2a09      	cmp	r2, #9
 800d86a:	d903      	bls.n	800d874 <_svfiprintf_r+0x1a8>
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d0c5      	beq.n	800d7fc <_svfiprintf_r+0x130>
 800d870:	9105      	str	r1, [sp, #20]
 800d872:	e7c3      	b.n	800d7fc <_svfiprintf_r+0x130>
 800d874:	fb0c 2101 	mla	r1, ip, r1, r2
 800d878:	4604      	mov	r4, r0
 800d87a:	2301      	movs	r3, #1
 800d87c:	e7f0      	b.n	800d860 <_svfiprintf_r+0x194>
 800d87e:	ab03      	add	r3, sp, #12
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	462a      	mov	r2, r5
 800d884:	4b0f      	ldr	r3, [pc, #60]	; (800d8c4 <_svfiprintf_r+0x1f8>)
 800d886:	a904      	add	r1, sp, #16
 800d888:	4638      	mov	r0, r7
 800d88a:	f3af 8000 	nop.w
 800d88e:	1c42      	adds	r2, r0, #1
 800d890:	4606      	mov	r6, r0
 800d892:	d1d6      	bne.n	800d842 <_svfiprintf_r+0x176>
 800d894:	89ab      	ldrh	r3, [r5, #12]
 800d896:	065b      	lsls	r3, r3, #25
 800d898:	f53f af2c 	bmi.w	800d6f4 <_svfiprintf_r+0x28>
 800d89c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d89e:	b01d      	add	sp, #116	; 0x74
 800d8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a4:	ab03      	add	r3, sp, #12
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	462a      	mov	r2, r5
 800d8aa:	4b06      	ldr	r3, [pc, #24]	; (800d8c4 <_svfiprintf_r+0x1f8>)
 800d8ac:	a904      	add	r1, sp, #16
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	f000 f87a 	bl	800d9a8 <_printf_i>
 800d8b4:	e7eb      	b.n	800d88e <_svfiprintf_r+0x1c2>
 800d8b6:	bf00      	nop
 800d8b8:	0800e010 	.word	0x0800e010
 800d8bc:	0800e01a 	.word	0x0800e01a
 800d8c0:	00000000 	.word	0x00000000
 800d8c4:	0800d615 	.word	0x0800d615
 800d8c8:	0800e016 	.word	0x0800e016

0800d8cc <_printf_common>:
 800d8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d0:	4616      	mov	r6, r2
 800d8d2:	4699      	mov	r9, r3
 800d8d4:	688a      	ldr	r2, [r1, #8]
 800d8d6:	690b      	ldr	r3, [r1, #16]
 800d8d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	bfb8      	it	lt
 800d8e0:	4613      	movlt	r3, r2
 800d8e2:	6033      	str	r3, [r6, #0]
 800d8e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8e8:	4607      	mov	r7, r0
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	b10a      	cbz	r2, 800d8f2 <_printf_common+0x26>
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	6033      	str	r3, [r6, #0]
 800d8f2:	6823      	ldr	r3, [r4, #0]
 800d8f4:	0699      	lsls	r1, r3, #26
 800d8f6:	bf42      	ittt	mi
 800d8f8:	6833      	ldrmi	r3, [r6, #0]
 800d8fa:	3302      	addmi	r3, #2
 800d8fc:	6033      	strmi	r3, [r6, #0]
 800d8fe:	6825      	ldr	r5, [r4, #0]
 800d900:	f015 0506 	ands.w	r5, r5, #6
 800d904:	d106      	bne.n	800d914 <_printf_common+0x48>
 800d906:	f104 0a19 	add.w	sl, r4, #25
 800d90a:	68e3      	ldr	r3, [r4, #12]
 800d90c:	6832      	ldr	r2, [r6, #0]
 800d90e:	1a9b      	subs	r3, r3, r2
 800d910:	42ab      	cmp	r3, r5
 800d912:	dc26      	bgt.n	800d962 <_printf_common+0x96>
 800d914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d918:	1e13      	subs	r3, r2, #0
 800d91a:	6822      	ldr	r2, [r4, #0]
 800d91c:	bf18      	it	ne
 800d91e:	2301      	movne	r3, #1
 800d920:	0692      	lsls	r2, r2, #26
 800d922:	d42b      	bmi.n	800d97c <_printf_common+0xb0>
 800d924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d928:	4649      	mov	r1, r9
 800d92a:	4638      	mov	r0, r7
 800d92c:	47c0      	blx	r8
 800d92e:	3001      	adds	r0, #1
 800d930:	d01e      	beq.n	800d970 <_printf_common+0xa4>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	68e5      	ldr	r5, [r4, #12]
 800d936:	6832      	ldr	r2, [r6, #0]
 800d938:	f003 0306 	and.w	r3, r3, #6
 800d93c:	2b04      	cmp	r3, #4
 800d93e:	bf08      	it	eq
 800d940:	1aad      	subeq	r5, r5, r2
 800d942:	68a3      	ldr	r3, [r4, #8]
 800d944:	6922      	ldr	r2, [r4, #16]
 800d946:	bf0c      	ite	eq
 800d948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d94c:	2500      	movne	r5, #0
 800d94e:	4293      	cmp	r3, r2
 800d950:	bfc4      	itt	gt
 800d952:	1a9b      	subgt	r3, r3, r2
 800d954:	18ed      	addgt	r5, r5, r3
 800d956:	2600      	movs	r6, #0
 800d958:	341a      	adds	r4, #26
 800d95a:	42b5      	cmp	r5, r6
 800d95c:	d11a      	bne.n	800d994 <_printf_common+0xc8>
 800d95e:	2000      	movs	r0, #0
 800d960:	e008      	b.n	800d974 <_printf_common+0xa8>
 800d962:	2301      	movs	r3, #1
 800d964:	4652      	mov	r2, sl
 800d966:	4649      	mov	r1, r9
 800d968:	4638      	mov	r0, r7
 800d96a:	47c0      	blx	r8
 800d96c:	3001      	adds	r0, #1
 800d96e:	d103      	bne.n	800d978 <_printf_common+0xac>
 800d970:	f04f 30ff 	mov.w	r0, #4294967295
 800d974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d978:	3501      	adds	r5, #1
 800d97a:	e7c6      	b.n	800d90a <_printf_common+0x3e>
 800d97c:	18e1      	adds	r1, r4, r3
 800d97e:	1c5a      	adds	r2, r3, #1
 800d980:	2030      	movs	r0, #48	; 0x30
 800d982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d986:	4422      	add	r2, r4
 800d988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d98c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d990:	3302      	adds	r3, #2
 800d992:	e7c7      	b.n	800d924 <_printf_common+0x58>
 800d994:	2301      	movs	r3, #1
 800d996:	4622      	mov	r2, r4
 800d998:	4649      	mov	r1, r9
 800d99a:	4638      	mov	r0, r7
 800d99c:	47c0      	blx	r8
 800d99e:	3001      	adds	r0, #1
 800d9a0:	d0e6      	beq.n	800d970 <_printf_common+0xa4>
 800d9a2:	3601      	adds	r6, #1
 800d9a4:	e7d9      	b.n	800d95a <_printf_common+0x8e>
	...

0800d9a8 <_printf_i>:
 800d9a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ac:	7e0f      	ldrb	r7, [r1, #24]
 800d9ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9b0:	2f78      	cmp	r7, #120	; 0x78
 800d9b2:	4691      	mov	r9, r2
 800d9b4:	4680      	mov	r8, r0
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	469a      	mov	sl, r3
 800d9ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d9be:	d807      	bhi.n	800d9d0 <_printf_i+0x28>
 800d9c0:	2f62      	cmp	r7, #98	; 0x62
 800d9c2:	d80a      	bhi.n	800d9da <_printf_i+0x32>
 800d9c4:	2f00      	cmp	r7, #0
 800d9c6:	f000 80d8 	beq.w	800db7a <_printf_i+0x1d2>
 800d9ca:	2f58      	cmp	r7, #88	; 0x58
 800d9cc:	f000 80a3 	beq.w	800db16 <_printf_i+0x16e>
 800d9d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9d8:	e03a      	b.n	800da50 <_printf_i+0xa8>
 800d9da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9de:	2b15      	cmp	r3, #21
 800d9e0:	d8f6      	bhi.n	800d9d0 <_printf_i+0x28>
 800d9e2:	a101      	add	r1, pc, #4	; (adr r1, 800d9e8 <_printf_i+0x40>)
 800d9e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9e8:	0800da41 	.word	0x0800da41
 800d9ec:	0800da55 	.word	0x0800da55
 800d9f0:	0800d9d1 	.word	0x0800d9d1
 800d9f4:	0800d9d1 	.word	0x0800d9d1
 800d9f8:	0800d9d1 	.word	0x0800d9d1
 800d9fc:	0800d9d1 	.word	0x0800d9d1
 800da00:	0800da55 	.word	0x0800da55
 800da04:	0800d9d1 	.word	0x0800d9d1
 800da08:	0800d9d1 	.word	0x0800d9d1
 800da0c:	0800d9d1 	.word	0x0800d9d1
 800da10:	0800d9d1 	.word	0x0800d9d1
 800da14:	0800db61 	.word	0x0800db61
 800da18:	0800da85 	.word	0x0800da85
 800da1c:	0800db43 	.word	0x0800db43
 800da20:	0800d9d1 	.word	0x0800d9d1
 800da24:	0800d9d1 	.word	0x0800d9d1
 800da28:	0800db83 	.word	0x0800db83
 800da2c:	0800d9d1 	.word	0x0800d9d1
 800da30:	0800da85 	.word	0x0800da85
 800da34:	0800d9d1 	.word	0x0800d9d1
 800da38:	0800d9d1 	.word	0x0800d9d1
 800da3c:	0800db4b 	.word	0x0800db4b
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	1d1a      	adds	r2, r3, #4
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	602a      	str	r2, [r5, #0]
 800da48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da50:	2301      	movs	r3, #1
 800da52:	e0a3      	b.n	800db9c <_printf_i+0x1f4>
 800da54:	6820      	ldr	r0, [r4, #0]
 800da56:	6829      	ldr	r1, [r5, #0]
 800da58:	0606      	lsls	r6, r0, #24
 800da5a:	f101 0304 	add.w	r3, r1, #4
 800da5e:	d50a      	bpl.n	800da76 <_printf_i+0xce>
 800da60:	680e      	ldr	r6, [r1, #0]
 800da62:	602b      	str	r3, [r5, #0]
 800da64:	2e00      	cmp	r6, #0
 800da66:	da03      	bge.n	800da70 <_printf_i+0xc8>
 800da68:	232d      	movs	r3, #45	; 0x2d
 800da6a:	4276      	negs	r6, r6
 800da6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da70:	485e      	ldr	r0, [pc, #376]	; (800dbec <_printf_i+0x244>)
 800da72:	230a      	movs	r3, #10
 800da74:	e019      	b.n	800daaa <_printf_i+0x102>
 800da76:	680e      	ldr	r6, [r1, #0]
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da7e:	bf18      	it	ne
 800da80:	b236      	sxthne	r6, r6
 800da82:	e7ef      	b.n	800da64 <_printf_i+0xbc>
 800da84:	682b      	ldr	r3, [r5, #0]
 800da86:	6820      	ldr	r0, [r4, #0]
 800da88:	1d19      	adds	r1, r3, #4
 800da8a:	6029      	str	r1, [r5, #0]
 800da8c:	0601      	lsls	r1, r0, #24
 800da8e:	d501      	bpl.n	800da94 <_printf_i+0xec>
 800da90:	681e      	ldr	r6, [r3, #0]
 800da92:	e002      	b.n	800da9a <_printf_i+0xf2>
 800da94:	0646      	lsls	r6, r0, #25
 800da96:	d5fb      	bpl.n	800da90 <_printf_i+0xe8>
 800da98:	881e      	ldrh	r6, [r3, #0]
 800da9a:	4854      	ldr	r0, [pc, #336]	; (800dbec <_printf_i+0x244>)
 800da9c:	2f6f      	cmp	r7, #111	; 0x6f
 800da9e:	bf0c      	ite	eq
 800daa0:	2308      	moveq	r3, #8
 800daa2:	230a      	movne	r3, #10
 800daa4:	2100      	movs	r1, #0
 800daa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800daaa:	6865      	ldr	r5, [r4, #4]
 800daac:	60a5      	str	r5, [r4, #8]
 800daae:	2d00      	cmp	r5, #0
 800dab0:	bfa2      	ittt	ge
 800dab2:	6821      	ldrge	r1, [r4, #0]
 800dab4:	f021 0104 	bicge.w	r1, r1, #4
 800dab8:	6021      	strge	r1, [r4, #0]
 800daba:	b90e      	cbnz	r6, 800dac0 <_printf_i+0x118>
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	d04d      	beq.n	800db5c <_printf_i+0x1b4>
 800dac0:	4615      	mov	r5, r2
 800dac2:	fbb6 f1f3 	udiv	r1, r6, r3
 800dac6:	fb03 6711 	mls	r7, r3, r1, r6
 800daca:	5dc7      	ldrb	r7, [r0, r7]
 800dacc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dad0:	4637      	mov	r7, r6
 800dad2:	42bb      	cmp	r3, r7
 800dad4:	460e      	mov	r6, r1
 800dad6:	d9f4      	bls.n	800dac2 <_printf_i+0x11a>
 800dad8:	2b08      	cmp	r3, #8
 800dada:	d10b      	bne.n	800daf4 <_printf_i+0x14c>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	07de      	lsls	r6, r3, #31
 800dae0:	d508      	bpl.n	800daf4 <_printf_i+0x14c>
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	6861      	ldr	r1, [r4, #4]
 800dae6:	4299      	cmp	r1, r3
 800dae8:	bfde      	ittt	le
 800daea:	2330      	movle	r3, #48	; 0x30
 800daec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800daf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800daf4:	1b52      	subs	r2, r2, r5
 800daf6:	6122      	str	r2, [r4, #16]
 800daf8:	f8cd a000 	str.w	sl, [sp]
 800dafc:	464b      	mov	r3, r9
 800dafe:	aa03      	add	r2, sp, #12
 800db00:	4621      	mov	r1, r4
 800db02:	4640      	mov	r0, r8
 800db04:	f7ff fee2 	bl	800d8cc <_printf_common>
 800db08:	3001      	adds	r0, #1
 800db0a:	d14c      	bne.n	800dba6 <_printf_i+0x1fe>
 800db0c:	f04f 30ff 	mov.w	r0, #4294967295
 800db10:	b004      	add	sp, #16
 800db12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db16:	4835      	ldr	r0, [pc, #212]	; (800dbec <_printf_i+0x244>)
 800db18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db1c:	6829      	ldr	r1, [r5, #0]
 800db1e:	6823      	ldr	r3, [r4, #0]
 800db20:	f851 6b04 	ldr.w	r6, [r1], #4
 800db24:	6029      	str	r1, [r5, #0]
 800db26:	061d      	lsls	r5, r3, #24
 800db28:	d514      	bpl.n	800db54 <_printf_i+0x1ac>
 800db2a:	07df      	lsls	r7, r3, #31
 800db2c:	bf44      	itt	mi
 800db2e:	f043 0320 	orrmi.w	r3, r3, #32
 800db32:	6023      	strmi	r3, [r4, #0]
 800db34:	b91e      	cbnz	r6, 800db3e <_printf_i+0x196>
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	f023 0320 	bic.w	r3, r3, #32
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	2310      	movs	r3, #16
 800db40:	e7b0      	b.n	800daa4 <_printf_i+0xfc>
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	f043 0320 	orr.w	r3, r3, #32
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	2378      	movs	r3, #120	; 0x78
 800db4c:	4828      	ldr	r0, [pc, #160]	; (800dbf0 <_printf_i+0x248>)
 800db4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db52:	e7e3      	b.n	800db1c <_printf_i+0x174>
 800db54:	0659      	lsls	r1, r3, #25
 800db56:	bf48      	it	mi
 800db58:	b2b6      	uxthmi	r6, r6
 800db5a:	e7e6      	b.n	800db2a <_printf_i+0x182>
 800db5c:	4615      	mov	r5, r2
 800db5e:	e7bb      	b.n	800dad8 <_printf_i+0x130>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	6826      	ldr	r6, [r4, #0]
 800db64:	6961      	ldr	r1, [r4, #20]
 800db66:	1d18      	adds	r0, r3, #4
 800db68:	6028      	str	r0, [r5, #0]
 800db6a:	0635      	lsls	r5, r6, #24
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	d501      	bpl.n	800db74 <_printf_i+0x1cc>
 800db70:	6019      	str	r1, [r3, #0]
 800db72:	e002      	b.n	800db7a <_printf_i+0x1d2>
 800db74:	0670      	lsls	r0, r6, #25
 800db76:	d5fb      	bpl.n	800db70 <_printf_i+0x1c8>
 800db78:	8019      	strh	r1, [r3, #0]
 800db7a:	2300      	movs	r3, #0
 800db7c:	6123      	str	r3, [r4, #16]
 800db7e:	4615      	mov	r5, r2
 800db80:	e7ba      	b.n	800daf8 <_printf_i+0x150>
 800db82:	682b      	ldr	r3, [r5, #0]
 800db84:	1d1a      	adds	r2, r3, #4
 800db86:	602a      	str	r2, [r5, #0]
 800db88:	681d      	ldr	r5, [r3, #0]
 800db8a:	6862      	ldr	r2, [r4, #4]
 800db8c:	2100      	movs	r1, #0
 800db8e:	4628      	mov	r0, r5
 800db90:	f7f2 fba6 	bl	80002e0 <memchr>
 800db94:	b108      	cbz	r0, 800db9a <_printf_i+0x1f2>
 800db96:	1b40      	subs	r0, r0, r5
 800db98:	6060      	str	r0, [r4, #4]
 800db9a:	6863      	ldr	r3, [r4, #4]
 800db9c:	6123      	str	r3, [r4, #16]
 800db9e:	2300      	movs	r3, #0
 800dba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dba4:	e7a8      	b.n	800daf8 <_printf_i+0x150>
 800dba6:	6923      	ldr	r3, [r4, #16]
 800dba8:	462a      	mov	r2, r5
 800dbaa:	4649      	mov	r1, r9
 800dbac:	4640      	mov	r0, r8
 800dbae:	47d0      	blx	sl
 800dbb0:	3001      	adds	r0, #1
 800dbb2:	d0ab      	beq.n	800db0c <_printf_i+0x164>
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	079b      	lsls	r3, r3, #30
 800dbb8:	d413      	bmi.n	800dbe2 <_printf_i+0x23a>
 800dbba:	68e0      	ldr	r0, [r4, #12]
 800dbbc:	9b03      	ldr	r3, [sp, #12]
 800dbbe:	4298      	cmp	r0, r3
 800dbc0:	bfb8      	it	lt
 800dbc2:	4618      	movlt	r0, r3
 800dbc4:	e7a4      	b.n	800db10 <_printf_i+0x168>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	4632      	mov	r2, r6
 800dbca:	4649      	mov	r1, r9
 800dbcc:	4640      	mov	r0, r8
 800dbce:	47d0      	blx	sl
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	d09b      	beq.n	800db0c <_printf_i+0x164>
 800dbd4:	3501      	adds	r5, #1
 800dbd6:	68e3      	ldr	r3, [r4, #12]
 800dbd8:	9903      	ldr	r1, [sp, #12]
 800dbda:	1a5b      	subs	r3, r3, r1
 800dbdc:	42ab      	cmp	r3, r5
 800dbde:	dcf2      	bgt.n	800dbc6 <_printf_i+0x21e>
 800dbe0:	e7eb      	b.n	800dbba <_printf_i+0x212>
 800dbe2:	2500      	movs	r5, #0
 800dbe4:	f104 0619 	add.w	r6, r4, #25
 800dbe8:	e7f5      	b.n	800dbd6 <_printf_i+0x22e>
 800dbea:	bf00      	nop
 800dbec:	0800e021 	.word	0x0800e021
 800dbf0:	0800e032 	.word	0x0800e032

0800dbf4 <memcpy>:
 800dbf4:	440a      	add	r2, r1
 800dbf6:	4291      	cmp	r1, r2
 800dbf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbfc:	d100      	bne.n	800dc00 <memcpy+0xc>
 800dbfe:	4770      	bx	lr
 800dc00:	b510      	push	{r4, lr}
 800dc02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc0a:	4291      	cmp	r1, r2
 800dc0c:	d1f9      	bne.n	800dc02 <memcpy+0xe>
 800dc0e:	bd10      	pop	{r4, pc}

0800dc10 <memmove>:
 800dc10:	4288      	cmp	r0, r1
 800dc12:	b510      	push	{r4, lr}
 800dc14:	eb01 0402 	add.w	r4, r1, r2
 800dc18:	d902      	bls.n	800dc20 <memmove+0x10>
 800dc1a:	4284      	cmp	r4, r0
 800dc1c:	4623      	mov	r3, r4
 800dc1e:	d807      	bhi.n	800dc30 <memmove+0x20>
 800dc20:	1e43      	subs	r3, r0, #1
 800dc22:	42a1      	cmp	r1, r4
 800dc24:	d008      	beq.n	800dc38 <memmove+0x28>
 800dc26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc2e:	e7f8      	b.n	800dc22 <memmove+0x12>
 800dc30:	4402      	add	r2, r0
 800dc32:	4601      	mov	r1, r0
 800dc34:	428a      	cmp	r2, r1
 800dc36:	d100      	bne.n	800dc3a <memmove+0x2a>
 800dc38:	bd10      	pop	{r4, pc}
 800dc3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc42:	e7f7      	b.n	800dc34 <memmove+0x24>

0800dc44 <_free_r>:
 800dc44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc46:	2900      	cmp	r1, #0
 800dc48:	d044      	beq.n	800dcd4 <_free_r+0x90>
 800dc4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc4e:	9001      	str	r0, [sp, #4]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f1a1 0404 	sub.w	r4, r1, #4
 800dc56:	bfb8      	it	lt
 800dc58:	18e4      	addlt	r4, r4, r3
 800dc5a:	f000 f913 	bl	800de84 <__malloc_lock>
 800dc5e:	4a1e      	ldr	r2, [pc, #120]	; (800dcd8 <_free_r+0x94>)
 800dc60:	9801      	ldr	r0, [sp, #4]
 800dc62:	6813      	ldr	r3, [r2, #0]
 800dc64:	b933      	cbnz	r3, 800dc74 <_free_r+0x30>
 800dc66:	6063      	str	r3, [r4, #4]
 800dc68:	6014      	str	r4, [r2, #0]
 800dc6a:	b003      	add	sp, #12
 800dc6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc70:	f000 b90e 	b.w	800de90 <__malloc_unlock>
 800dc74:	42a3      	cmp	r3, r4
 800dc76:	d908      	bls.n	800dc8a <_free_r+0x46>
 800dc78:	6825      	ldr	r5, [r4, #0]
 800dc7a:	1961      	adds	r1, r4, r5
 800dc7c:	428b      	cmp	r3, r1
 800dc7e:	bf01      	itttt	eq
 800dc80:	6819      	ldreq	r1, [r3, #0]
 800dc82:	685b      	ldreq	r3, [r3, #4]
 800dc84:	1949      	addeq	r1, r1, r5
 800dc86:	6021      	streq	r1, [r4, #0]
 800dc88:	e7ed      	b.n	800dc66 <_free_r+0x22>
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	b10b      	cbz	r3, 800dc94 <_free_r+0x50>
 800dc90:	42a3      	cmp	r3, r4
 800dc92:	d9fa      	bls.n	800dc8a <_free_r+0x46>
 800dc94:	6811      	ldr	r1, [r2, #0]
 800dc96:	1855      	adds	r5, r2, r1
 800dc98:	42a5      	cmp	r5, r4
 800dc9a:	d10b      	bne.n	800dcb4 <_free_r+0x70>
 800dc9c:	6824      	ldr	r4, [r4, #0]
 800dc9e:	4421      	add	r1, r4
 800dca0:	1854      	adds	r4, r2, r1
 800dca2:	42a3      	cmp	r3, r4
 800dca4:	6011      	str	r1, [r2, #0]
 800dca6:	d1e0      	bne.n	800dc6a <_free_r+0x26>
 800dca8:	681c      	ldr	r4, [r3, #0]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	6053      	str	r3, [r2, #4]
 800dcae:	4421      	add	r1, r4
 800dcb0:	6011      	str	r1, [r2, #0]
 800dcb2:	e7da      	b.n	800dc6a <_free_r+0x26>
 800dcb4:	d902      	bls.n	800dcbc <_free_r+0x78>
 800dcb6:	230c      	movs	r3, #12
 800dcb8:	6003      	str	r3, [r0, #0]
 800dcba:	e7d6      	b.n	800dc6a <_free_r+0x26>
 800dcbc:	6825      	ldr	r5, [r4, #0]
 800dcbe:	1961      	adds	r1, r4, r5
 800dcc0:	428b      	cmp	r3, r1
 800dcc2:	bf04      	itt	eq
 800dcc4:	6819      	ldreq	r1, [r3, #0]
 800dcc6:	685b      	ldreq	r3, [r3, #4]
 800dcc8:	6063      	str	r3, [r4, #4]
 800dcca:	bf04      	itt	eq
 800dccc:	1949      	addeq	r1, r1, r5
 800dcce:	6021      	streq	r1, [r4, #0]
 800dcd0:	6054      	str	r4, [r2, #4]
 800dcd2:	e7ca      	b.n	800dc6a <_free_r+0x26>
 800dcd4:	b003      	add	sp, #12
 800dcd6:	bd30      	pop	{r4, r5, pc}
 800dcd8:	24000258 	.word	0x24000258

0800dcdc <sbrk_aligned>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	4e0e      	ldr	r6, [pc, #56]	; (800dd18 <sbrk_aligned+0x3c>)
 800dce0:	460c      	mov	r4, r1
 800dce2:	6831      	ldr	r1, [r6, #0]
 800dce4:	4605      	mov	r5, r0
 800dce6:	b911      	cbnz	r1, 800dcee <sbrk_aligned+0x12>
 800dce8:	f000 f8bc 	bl	800de64 <_sbrk_r>
 800dcec:	6030      	str	r0, [r6, #0]
 800dcee:	4621      	mov	r1, r4
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	f000 f8b7 	bl	800de64 <_sbrk_r>
 800dcf6:	1c43      	adds	r3, r0, #1
 800dcf8:	d00a      	beq.n	800dd10 <sbrk_aligned+0x34>
 800dcfa:	1cc4      	adds	r4, r0, #3
 800dcfc:	f024 0403 	bic.w	r4, r4, #3
 800dd00:	42a0      	cmp	r0, r4
 800dd02:	d007      	beq.n	800dd14 <sbrk_aligned+0x38>
 800dd04:	1a21      	subs	r1, r4, r0
 800dd06:	4628      	mov	r0, r5
 800dd08:	f000 f8ac 	bl	800de64 <_sbrk_r>
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	d101      	bne.n	800dd14 <sbrk_aligned+0x38>
 800dd10:	f04f 34ff 	mov.w	r4, #4294967295
 800dd14:	4620      	mov	r0, r4
 800dd16:	bd70      	pop	{r4, r5, r6, pc}
 800dd18:	2400025c 	.word	0x2400025c

0800dd1c <_malloc_r>:
 800dd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd20:	1ccd      	adds	r5, r1, #3
 800dd22:	f025 0503 	bic.w	r5, r5, #3
 800dd26:	3508      	adds	r5, #8
 800dd28:	2d0c      	cmp	r5, #12
 800dd2a:	bf38      	it	cc
 800dd2c:	250c      	movcc	r5, #12
 800dd2e:	2d00      	cmp	r5, #0
 800dd30:	4607      	mov	r7, r0
 800dd32:	db01      	blt.n	800dd38 <_malloc_r+0x1c>
 800dd34:	42a9      	cmp	r1, r5
 800dd36:	d905      	bls.n	800dd44 <_malloc_r+0x28>
 800dd38:	230c      	movs	r3, #12
 800dd3a:	603b      	str	r3, [r7, #0]
 800dd3c:	2600      	movs	r6, #0
 800dd3e:	4630      	mov	r0, r6
 800dd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd44:	4e2e      	ldr	r6, [pc, #184]	; (800de00 <_malloc_r+0xe4>)
 800dd46:	f000 f89d 	bl	800de84 <__malloc_lock>
 800dd4a:	6833      	ldr	r3, [r6, #0]
 800dd4c:	461c      	mov	r4, r3
 800dd4e:	bb34      	cbnz	r4, 800dd9e <_malloc_r+0x82>
 800dd50:	4629      	mov	r1, r5
 800dd52:	4638      	mov	r0, r7
 800dd54:	f7ff ffc2 	bl	800dcdc <sbrk_aligned>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	d14d      	bne.n	800ddfa <_malloc_r+0xde>
 800dd5e:	6834      	ldr	r4, [r6, #0]
 800dd60:	4626      	mov	r6, r4
 800dd62:	2e00      	cmp	r6, #0
 800dd64:	d140      	bne.n	800dde8 <_malloc_r+0xcc>
 800dd66:	6823      	ldr	r3, [r4, #0]
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4638      	mov	r0, r7
 800dd6c:	eb04 0803 	add.w	r8, r4, r3
 800dd70:	f000 f878 	bl	800de64 <_sbrk_r>
 800dd74:	4580      	cmp	r8, r0
 800dd76:	d13a      	bne.n	800ddee <_malloc_r+0xd2>
 800dd78:	6821      	ldr	r1, [r4, #0]
 800dd7a:	3503      	adds	r5, #3
 800dd7c:	1a6d      	subs	r5, r5, r1
 800dd7e:	f025 0503 	bic.w	r5, r5, #3
 800dd82:	3508      	adds	r5, #8
 800dd84:	2d0c      	cmp	r5, #12
 800dd86:	bf38      	it	cc
 800dd88:	250c      	movcc	r5, #12
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	f7ff ffa5 	bl	800dcdc <sbrk_aligned>
 800dd92:	3001      	adds	r0, #1
 800dd94:	d02b      	beq.n	800ddee <_malloc_r+0xd2>
 800dd96:	6823      	ldr	r3, [r4, #0]
 800dd98:	442b      	add	r3, r5
 800dd9a:	6023      	str	r3, [r4, #0]
 800dd9c:	e00e      	b.n	800ddbc <_malloc_r+0xa0>
 800dd9e:	6822      	ldr	r2, [r4, #0]
 800dda0:	1b52      	subs	r2, r2, r5
 800dda2:	d41e      	bmi.n	800dde2 <_malloc_r+0xc6>
 800dda4:	2a0b      	cmp	r2, #11
 800dda6:	d916      	bls.n	800ddd6 <_malloc_r+0xba>
 800dda8:	1961      	adds	r1, r4, r5
 800ddaa:	42a3      	cmp	r3, r4
 800ddac:	6025      	str	r5, [r4, #0]
 800ddae:	bf18      	it	ne
 800ddb0:	6059      	strne	r1, [r3, #4]
 800ddb2:	6863      	ldr	r3, [r4, #4]
 800ddb4:	bf08      	it	eq
 800ddb6:	6031      	streq	r1, [r6, #0]
 800ddb8:	5162      	str	r2, [r4, r5]
 800ddba:	604b      	str	r3, [r1, #4]
 800ddbc:	4638      	mov	r0, r7
 800ddbe:	f104 060b 	add.w	r6, r4, #11
 800ddc2:	f000 f865 	bl	800de90 <__malloc_unlock>
 800ddc6:	f026 0607 	bic.w	r6, r6, #7
 800ddca:	1d23      	adds	r3, r4, #4
 800ddcc:	1af2      	subs	r2, r6, r3
 800ddce:	d0b6      	beq.n	800dd3e <_malloc_r+0x22>
 800ddd0:	1b9b      	subs	r3, r3, r6
 800ddd2:	50a3      	str	r3, [r4, r2]
 800ddd4:	e7b3      	b.n	800dd3e <_malloc_r+0x22>
 800ddd6:	6862      	ldr	r2, [r4, #4]
 800ddd8:	42a3      	cmp	r3, r4
 800ddda:	bf0c      	ite	eq
 800dddc:	6032      	streq	r2, [r6, #0]
 800ddde:	605a      	strne	r2, [r3, #4]
 800dde0:	e7ec      	b.n	800ddbc <_malloc_r+0xa0>
 800dde2:	4623      	mov	r3, r4
 800dde4:	6864      	ldr	r4, [r4, #4]
 800dde6:	e7b2      	b.n	800dd4e <_malloc_r+0x32>
 800dde8:	4634      	mov	r4, r6
 800ddea:	6876      	ldr	r6, [r6, #4]
 800ddec:	e7b9      	b.n	800dd62 <_malloc_r+0x46>
 800ddee:	230c      	movs	r3, #12
 800ddf0:	603b      	str	r3, [r7, #0]
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	f000 f84c 	bl	800de90 <__malloc_unlock>
 800ddf8:	e7a1      	b.n	800dd3e <_malloc_r+0x22>
 800ddfa:	6025      	str	r5, [r4, #0]
 800ddfc:	e7de      	b.n	800ddbc <_malloc_r+0xa0>
 800ddfe:	bf00      	nop
 800de00:	24000258 	.word	0x24000258

0800de04 <_realloc_r>:
 800de04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de08:	4680      	mov	r8, r0
 800de0a:	4614      	mov	r4, r2
 800de0c:	460e      	mov	r6, r1
 800de0e:	b921      	cbnz	r1, 800de1a <_realloc_r+0x16>
 800de10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de14:	4611      	mov	r1, r2
 800de16:	f7ff bf81 	b.w	800dd1c <_malloc_r>
 800de1a:	b92a      	cbnz	r2, 800de28 <_realloc_r+0x24>
 800de1c:	f7ff ff12 	bl	800dc44 <_free_r>
 800de20:	4625      	mov	r5, r4
 800de22:	4628      	mov	r0, r5
 800de24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de28:	f000 f838 	bl	800de9c <_malloc_usable_size_r>
 800de2c:	4284      	cmp	r4, r0
 800de2e:	4607      	mov	r7, r0
 800de30:	d802      	bhi.n	800de38 <_realloc_r+0x34>
 800de32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de36:	d812      	bhi.n	800de5e <_realloc_r+0x5a>
 800de38:	4621      	mov	r1, r4
 800de3a:	4640      	mov	r0, r8
 800de3c:	f7ff ff6e 	bl	800dd1c <_malloc_r>
 800de40:	4605      	mov	r5, r0
 800de42:	2800      	cmp	r0, #0
 800de44:	d0ed      	beq.n	800de22 <_realloc_r+0x1e>
 800de46:	42bc      	cmp	r4, r7
 800de48:	4622      	mov	r2, r4
 800de4a:	4631      	mov	r1, r6
 800de4c:	bf28      	it	cs
 800de4e:	463a      	movcs	r2, r7
 800de50:	f7ff fed0 	bl	800dbf4 <memcpy>
 800de54:	4631      	mov	r1, r6
 800de56:	4640      	mov	r0, r8
 800de58:	f7ff fef4 	bl	800dc44 <_free_r>
 800de5c:	e7e1      	b.n	800de22 <_realloc_r+0x1e>
 800de5e:	4635      	mov	r5, r6
 800de60:	e7df      	b.n	800de22 <_realloc_r+0x1e>
	...

0800de64 <_sbrk_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4d06      	ldr	r5, [pc, #24]	; (800de80 <_sbrk_r+0x1c>)
 800de68:	2300      	movs	r3, #0
 800de6a:	4604      	mov	r4, r0
 800de6c:	4608      	mov	r0, r1
 800de6e:	602b      	str	r3, [r5, #0]
 800de70:	f7f4 f978 	bl	8002164 <_sbrk>
 800de74:	1c43      	adds	r3, r0, #1
 800de76:	d102      	bne.n	800de7e <_sbrk_r+0x1a>
 800de78:	682b      	ldr	r3, [r5, #0]
 800de7a:	b103      	cbz	r3, 800de7e <_sbrk_r+0x1a>
 800de7c:	6023      	str	r3, [r4, #0]
 800de7e:	bd38      	pop	{r3, r4, r5, pc}
 800de80:	24000260 	.word	0x24000260

0800de84 <__malloc_lock>:
 800de84:	4801      	ldr	r0, [pc, #4]	; (800de8c <__malloc_lock+0x8>)
 800de86:	f000 b811 	b.w	800deac <__retarget_lock_acquire_recursive>
 800de8a:	bf00      	nop
 800de8c:	24000264 	.word	0x24000264

0800de90 <__malloc_unlock>:
 800de90:	4801      	ldr	r0, [pc, #4]	; (800de98 <__malloc_unlock+0x8>)
 800de92:	f000 b80c 	b.w	800deae <__retarget_lock_release_recursive>
 800de96:	bf00      	nop
 800de98:	24000264 	.word	0x24000264

0800de9c <_malloc_usable_size_r>:
 800de9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dea0:	1f18      	subs	r0, r3, #4
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	bfbc      	itt	lt
 800dea6:	580b      	ldrlt	r3, [r1, r0]
 800dea8:	18c0      	addlt	r0, r0, r3
 800deaa:	4770      	bx	lr

0800deac <__retarget_lock_acquire_recursive>:
 800deac:	4770      	bx	lr

0800deae <__retarget_lock_release_recursive>:
 800deae:	4770      	bx	lr

0800deb0 <_init>:
 800deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb2:	bf00      	nop
 800deb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deb6:	bc08      	pop	{r3}
 800deb8:	469e      	mov	lr, r3
 800deba:	4770      	bx	lr

0800debc <_fini>:
 800debc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800debe:	bf00      	nop
 800dec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dec2:	bc08      	pop	{r3}
 800dec4:	469e      	mov	lr, r3
 800dec6:	4770      	bx	lr
