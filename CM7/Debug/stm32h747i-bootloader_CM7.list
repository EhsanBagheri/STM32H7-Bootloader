
stm32h747i-bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd30  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800dfd0  0800dfd0  0001dfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e148  0800e148  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800e148  0800e148  0001e148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e150  0800e150  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e150  0800e150  0001e150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e154  0800e154  0001e154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  0800e158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  24000090  0800e1e8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002e8  0800e1e8  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200a5  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ac  00000000  00000000  00040163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00044410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  00045ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004431d  00000000  00000000  00047158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b2e  00000000  00000000  0008b475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a21b4  00000000  00000000  000adfa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00250157  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006490  00000000  00000000  002501a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dfb8 	.word	0x0800dfb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0800dfb8 	.word	0x0800dfb8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <erase_app_memory>:
#include "flash.h"

HAL_StatusTypeDef erase_app_memory(uint32_t bank, uint32_t sector, uint32_t NbSectors){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	
	HAL_StatusTypeDef ret;
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	
	HAL_FLASH_Unlock();
 80007cc:	f002 f89c 	bl	8002908 <HAL_FLASH_Unlock>
	
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Banks = bank;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Sector = sector;
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbSectors = NbSectors;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80007e0:	2320      	movs	r3, #32
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80007e4:	f107 0214 	add.w	r2, r7, #20
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 f98a 	bl	8002b08 <HAL_FLASHEx_Erase>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	HAL_FLASH_Lock();
 80007fa:	f002 f8bf 	bl	800297c <HAL_FLASH_Lock>
	return ret;
 80007fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000802:	4618      	mov	r0, r3
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <Flash_write32B>:


HAL_StatusTypeDef Flash_write32B(uint8_t const *src, uint32_t dst){
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
    uint32_t FlashAddress = dst;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	60fb      	str	r3, [r7, #12]

    if (FlashAddress & (32-1)) {
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <Flash_write32B+0x1c>
        return HAL_ERROR; // bad alignment
 8000822:	2301      	movs	r3, #1
 8000824:	e00c      	b.n	8000840 <Flash_write32B+0x36>
    }
	
	HAL_StatusTypeDef ret;
	
	HAL_FLASH_Unlock();
 8000826:	f002 f86f 	bl	8002908 <HAL_FLASH_Unlock>
	
	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FlashAddress, (uint32_t)src);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	461a      	mov	r2, r3
 800082e:	68f9      	ldr	r1, [r7, #12]
 8000830:	2001      	movs	r0, #1
 8000832:	f001 ffd7 	bl	80027e4 <HAL_FLASH_Program>
 8000836:	4603      	mov	r3, r0
 8000838:	72fb      	strb	r3, [r7, #11]

	HAL_FLASH_Lock();
 800083a:	f002 f89f 	bl	800297c <HAL_FLASH_Lock>

	return ret;
 800083e:	7afb      	ldrb	r3, [r7, #11]
	
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	; 0x38
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	4b57      	ldr	r3, [pc, #348]	; (80009bc <MX_GPIO_Init+0x174>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	4a55      	ldr	r2, [pc, #340]	; (80009bc <MX_GPIO_Init+0x174>)
 8000866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086e:	4b53      	ldr	r3, [pc, #332]	; (80009bc <MX_GPIO_Init+0x174>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000878:	623b      	str	r3, [r7, #32]
 800087a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087c:	4b4f      	ldr	r3, [pc, #316]	; (80009bc <MX_GPIO_Init+0x174>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	4a4e      	ldr	r2, [pc, #312]	; (80009bc <MX_GPIO_Init+0x174>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088c:	4b4b      	ldr	r3, [pc, #300]	; (80009bc <MX_GPIO_Init+0x174>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	4b48      	ldr	r3, [pc, #288]	; (80009bc <MX_GPIO_Init+0x174>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	4a46      	ldr	r2, [pc, #280]	; (80009bc <MX_GPIO_Init+0x174>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008aa:	4b44      	ldr	r3, [pc, #272]	; (80009bc <MX_GPIO_Init+0x174>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	f003 0308 	and.w	r3, r3, #8
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b40      	ldr	r3, [pc, #256]	; (80009bc <MX_GPIO_Init+0x174>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	4a3f      	ldr	r2, [pc, #252]	; (80009bc <MX_GPIO_Init+0x174>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c8:	4b3c      	ldr	r3, [pc, #240]	; (80009bc <MX_GPIO_Init+0x174>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <MX_GPIO_Init+0x174>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	4a37      	ldr	r2, [pc, #220]	; (80009bc <MX_GPIO_Init+0x174>)
 80008de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <MX_GPIO_Init+0x174>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <MX_GPIO_Init+0x174>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	4a30      	ldr	r2, [pc, #192]	; (80009bc <MX_GPIO_Init+0x174>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000904:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_GPIO_Init+0x174>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <MX_GPIO_Init+0x174>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	4a28      	ldr	r2, [pc, #160]	; (80009bc <MX_GPIO_Init+0x174>)
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0x174>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_GPIO_Init+0x174>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000936:	4a21      	ldr	r2, [pc, #132]	; (80009bc <MX_GPIO_Init+0x174>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_GPIO_Init+0x174>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000954:	481a      	ldr	r0, [pc, #104]	; (80009c0 <MX_GPIO_Init+0x178>)
 8000956:	f002 fd1b 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800095a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4814      	ldr	r0, [pc, #80]	; (80009c0 <MX_GPIO_Init+0x178>)
 8000970:	f002 fa3c 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_GPIO_Init+0x17c>)
 8000992:	f002 fa2b 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000996:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x178>)
 80009b0:	f002 fa1c 	bl	8002dec <HAL_GPIO_Init>

}
 80009b4:	bf00      	nop
 80009b6:	3738      	adds	r7, #56	; 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	58024400 	.word	0x58024400
 80009c0:	58022000 	.word	0x58022000
 80009c4:	58020000 	.word	0x58020000

080009c8 <gotoFirmware>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void gotoFirmware(uint32_t fwFlashStartAdd)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
//	app_reset_handler();

	pFunction appEntry;
	uint32_t appStack;

	appStack = (uint32_t) *((__IO uint32_t*)fwFlashStartAdd);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	617b      	str	r3, [r7, #20]
	appEntry = (pFunction) *(__IO uint32_t*) (fwFlashStartAdd + 4);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3304      	adds	r3, #4
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	613b      	str	r3, [r7, #16]
//	__DMB();
	SCB->VTOR = fwFlashStartAdd;
 80009de:	4a07      	ldr	r2, [pc, #28]	; (80009fc <gotoFirmware+0x34>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6093      	str	r3, [r2, #8]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f383 8808 	msr	MSP, r3
}
 80009ee:	bf00      	nop
//	__DSB();
//	SysTick->CTRL = 0x0;
//	HAL_DeInit();
	__set_MSP(appStack);
	appEntry();
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4798      	blx	r3
}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <updateFirmware>:


bool updateFirmware(const TCHAR* fwPath, uint32_t flashBank, uint32_t flashSector, uint32_t NbSectors, uint32_t fwFlashStartAdd)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	f507 6491 	add.w	r4, r7, #1160	; 0x488
 8000a0c:	f2a4 447c 	subw	r4, r4, #1148	; 0x47c
 8000a10:	6020      	str	r0, [r4, #0]
 8000a12:	f507 6091 	add.w	r0, r7, #1160	; 0x488
 8000a16:	f5a0 6090 	sub.w	r0, r0, #1152	; 0x480
 8000a1a:	6001      	str	r1, [r0, #0]
 8000a1c:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8000a20:	f2a1 4184 	subw	r1, r1, #1156	; 0x484
 8000a24:	600a      	str	r2, [r1, #0]
 8000a26:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8000a2a:	f5a2 6291 	sub.w	r2, r2, #1160	; 0x488
 8000a2e:	6013      	str	r3, [r2, #0]
	UINT bytesRead;
	FSIZE_t file_size;
	FIL file;
	uint32_t flashAdd, addCNTR;

	if (f_open(&file, fwPath, FA_READ) == FR_OK) {
 8000a30:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a34:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000a38:	f107 0010 	add.w	r0, r7, #16
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	f00c fa18 	bl	800ce74 <f_open>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d16f      	bne.n	8000b2a <updateFirmware+0x12a>

		file_size = f_size(&file);
 8000a4a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a4e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c

		sprintf(binFileRes, ".bin Size: %lu bytes \n\r", file_size);
 8000a58:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8000a5c:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8000a60:	4935      	ldr	r1, [pc, #212]	; (8000b38 <updateFirmware+0x138>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00c fe3a 	bl	800d6dc <siprintf>
		HAL_UART_Transmit(&huart1, binFileRes, 20, 100);
 8000a68:	f207 4144 	addw	r1, r7, #1092	; 0x444
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	2214      	movs	r2, #20
 8000a70:	4832      	ldr	r0, [pc, #200]	; (8000b3c <updateFirmware+0x13c>)
 8000a72:	f008 fbf7 	bl	8009264 <HAL_UART_Transmit>

		erase_app_memory(flashBank, flashSector, NbSectors);
 8000a76:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a7a:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 8000a7e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a82:	f2a3 4184 	subw	r1, r3, #1156	; 0x484
 8000a86:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a8a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	6809      	ldr	r1, [r1, #0]
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	f7ff fe94 	bl	80007c0 <erase_app_memory>

		flashAdd = fwFlashStartAdd;
 8000a98:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8000a9c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		addCNTR  = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000aa6:	e027      	b.n	8000af8 <updateFirmware+0xf8>
			// Process the read data here
			for(uint32_t i=0; i<16; i++){
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000aae:	e017      	b.n	8000ae0 <updateFirmware+0xe0>
				Flash_write32B(readBytes+(i*32), flashAdd+addCNTR);
 8000ab0:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000ab4:	015b      	lsls	r3, r3, #5
 8000ab6:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8000aba:	18d0      	adds	r0, r2, r3
 8000abc:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8000ac0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f7ff fe9f 	bl	800080a <Flash_write32B>
				addCNTR += 32;
 8000acc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
			for(uint32_t i=0; i<16; i++){
 8000ad6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000ada:	3301      	adds	r3, #1
 8000adc:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000ae0:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d9e3      	bls.n	8000ab0 <updateFirmware+0xb0>
			}
			memset(readBytes, 0xFF, sizeof(readBytes));
 8000ae8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8000aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af0:	21ff      	movs	r1, #255	; 0xff
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00c fdea 	bl	800d6cc <memset>
		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000af8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000afc:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8000b00:	f107 0010 	add.w	r0, r7, #16
 8000b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b08:	f00c fb72 	bl	800d1f0 <f_read>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d106      	bne.n	8000b20 <updateFirmware+0x120>
 8000b12:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000b16:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1c3      	bne.n	8000aa8 <updateFirmware+0xa8>
		}
		f_close(&file);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4618      	mov	r0, r3
 8000b26:	f00c fd20 	bl	800d56a <f_close>
	}

	return true;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f207 478c 	addw	r7, r7, #1164	; 0x48c
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	0800dfd0 	.word	0x0800dfd0
 8000b3c:	240001e8 	.word	0x240001e8

08000b40 <boot_main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int boot_main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8000b46:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b48:	4b96      	ldr	r3, [pc, #600]	; (8000da4 <boot_main+0x264>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d11b      	bne.n	8000b8c <boot_main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b54:	f3bf 8f4f 	dsb	sy
}
 8000b58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b5a:	f3bf 8f6f 	isb	sy
}
 8000b5e:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b60:	4b90      	ldr	r3, [pc, #576]	; (8000da4 <boot_main+0x264>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b68:	f3bf 8f4f 	dsb	sy
}
 8000b6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b6e:	f3bf 8f6f 	isb	sy
}
 8000b72:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b74:	4b8b      	ldr	r3, [pc, #556]	; (8000da4 <boot_main+0x264>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a8a      	ldr	r2, [pc, #552]	; (8000da4 <boot_main+0x264>)
 8000b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b80:	f3bf 8f4f 	dsb	sy
}
 8000b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b86:	f3bf 8f6f 	isb	sy
}
 8000b8a:	e000      	b.n	8000b8e <boot_main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b8c:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b8e:	4b85      	ldr	r3, [pc, #532]	; (8000da4 <boot_main+0x264>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d143      	bne.n	8000c22 <boot_main+0xe2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b9a:	4b82      	ldr	r3, [pc, #520]	; (8000da4 <boot_main+0x264>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba2:	f3bf 8f4f 	dsb	sy
}
 8000ba6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ba8:	4b7e      	ldr	r3, [pc, #504]	; (8000da4 <boot_main+0x264>)
 8000baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bae:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bb2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000bb6:	0b5b      	lsrs	r3, r3, #13
 8000bb8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bbc:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bc0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bca:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bce:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000bd2:	015a      	lsls	r2, r3, #5
 8000bd4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bd8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bda:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8000bde:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000be0:	4970      	ldr	r1, [pc, #448]	; (8000da4 <boot_main+0x264>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000be8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000bec:	1e5a      	subs	r2, r3, #1
 8000bee:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1eb      	bne.n	8000bce <boot_main+0x8e>
    } while(sets-- != 0U);
 8000bf6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000bfa:	1e5a      	subs	r2, r3, #1
 8000bfc:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1dd      	bne.n	8000bc0 <boot_main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c04:	f3bf 8f4f 	dsb	sy
}
 8000c08:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c0a:	4b66      	ldr	r3, [pc, #408]	; (8000da4 <boot_main+0x264>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a65      	ldr	r2, [pc, #404]	; (8000da4 <boot_main+0x264>)
 8000c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c14:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c16:	f3bf 8f4f 	dsb	sy
}
 8000c1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c1c:	f3bf 8f6f 	isb	sy
}
 8000c20:	e000      	b.n	8000c24 <boot_main+0xe4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c22:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c28:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c2c:	bf00      	nop
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	; (8000da8 <boot_main+0x268>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d006      	beq.n	8000c48 <boot_main+0x108>
 8000c3a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000c3e:	1e5a      	subs	r2, r3, #1
 8000c40:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	dcf2      	bgt.n	8000c2e <boot_main+0xee>
  if ( timeout < 0 )
 8000c48:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	da01      	bge.n	8000c54 <boot_main+0x114>
  {
  	Error_Handler();
 8000c50:	f000 f940 	bl	8000ed4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f001 fc20 	bl	8002498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f8b6 	bl	8000dc8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c5c:	4b52      	ldr	r3, [pc, #328]	; (8000da8 <boot_main+0x268>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a51      	ldr	r2, [pc, #324]	; (8000da8 <boot_main+0x268>)
 8000c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <boot_main+0x268>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000c76:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000c7a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000c84:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000c88:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f002 fb9a 	bl	80033c4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c90:	2100      	movs	r1, #0
 8000c92:	2000      	movs	r0, #0
 8000c94:	f002 fbb0 	bl	80033f8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ca0:	bf00      	nop
 8000ca2:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <boot_main+0x268>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d106      	bne.n	8000cbc <boot_main+0x17c>
 8000cae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000cb2:	1e5a      	subs	r2, r3, #1
 8000cb4:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	dcf2      	bgt.n	8000ca2 <boot_main+0x162>
if ( timeout < 0 )
 8000cbc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	da01      	bge.n	8000cc8 <boot_main+0x188>
{
	Error_Handler();
 8000cc4:	f000 f906 	bl	8000ed4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc8:	f7ff fdbe 	bl	8000848 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ccc:	f001 fb04 	bl	80022d8 <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8000cd0:	f000 fc32 	bl	8001538 <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 8000cd4:	f001 f9da 	bl	800208c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000cd8:	f00a f9a2 	bl	800b020 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(3000);
 8000cdc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ce0:	f001 fc6c 	bl	80025bc <HAL_Delay>

	if (CSP_QUADSPI_Init() != HAL_OK)
 8000ce4:	f001 f97c 	bl	8001fe0 <CSP_QUADSPI_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <boot_main+0x1b2>
	{
		Error_Handler();
 8000cee:	f000 f8f1 	bl	8000ed4 <Error_Handler>
	}

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf8:	482c      	ldr	r0, [pc, #176]	; (8000dac <boot_main+0x26c>)
 8000cfa:	f002 fb49 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d04:	4829      	ldr	r0, [pc, #164]	; (8000dac <boot_main+0x26c>)
 8000d06:	f002 fb43 	bl	8003390 <HAL_GPIO_WritePin>
	/****************** FOR SIMPLE WRITE READ ********************/
	// Comment out these if you are using the EXT MEM BOOT

	if (CSP_QSPI_Erase_Chip() != HAL_OK)
 8000d0a:	f001 f991 	bl	8002030 <CSP_QSPI_Erase_Chip>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <boot_main+0x1d8>
	{
		Error_Handler();
 8000d14:	f000 f8de 	bl	8000ed4 <Error_Handler>
	}

	if (CSP_QSPI_WriteMemory(writebuf, 0, strlen (writebuf)) != HAL_OK)
 8000d18:	4825      	ldr	r0, [pc, #148]	; (8000db0 <boot_main+0x270>)
 8000d1a:	f7ff fae1 	bl	80002e0 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	4822      	ldr	r0, [pc, #136]	; (8000db0 <boot_main+0x270>)
 8000d26:	f001 f98c 	bl	8002042 <CSP_QSPI_WriteMemory>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <boot_main+0x1f4>
	{
		Error_Handler();
 8000d30:	f000 f8d0 	bl	8000ed4 <Error_Handler>
	}


	if (CSP_QSPI_Read(readbuf, 0, 100) != HAL_OK)
 8000d34:	2264      	movs	r2, #100	; 0x64
 8000d36:	2100      	movs	r1, #0
 8000d38:	481e      	ldr	r0, [pc, #120]	; (8000db4 <boot_main+0x274>)
 8000d3a:	f001 f994 	bl	8002066 <CSP_QSPI_Read>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <boot_main+0x208>
	{
		Error_Handler();
 8000d44:	f000 f8c6 	bl	8000ed4 <Error_Handler>
	}

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <boot_main+0x26c>)
 8000d50:	f002 fb1e 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	4814      	ldr	r0, [pc, #80]	; (8000dac <boot_main+0x26c>)
 8000d5c:	f002 fb18 	bl	8003390 <HAL_GPIO_WritePin>

  // Mount the SD card
  FATFS fs;
  uint8_t mountRes;

  mountRes = f_mount(&fs, SD_CARD_PATH, 1);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2201      	movs	r2, #1
 8000d64:	4914      	ldr	r1, [pc, #80]	; (8000db8 <boot_main+0x278>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f00c f83e 	bl	800cde8 <f_mount>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
  if (mountRes == FR_OK) {
 8000d72:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d110      	bne.n	8000d9c <boot_main+0x25c>

	  updateFirmware(FILE_NAME_2, FLASH_BANK_1, FLASH_SECTOR_1, 7, FW_CM7_START_ADD);
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <boot_main+0x27c>)
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2307      	movs	r3, #7
 8000d80:	2201      	movs	r2, #1
 8000d82:	2101      	movs	r1, #1
 8000d84:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <boot_main+0x280>)
 8000d86:	f7ff fe3b 	bl	8000a00 <updateFirmware>

	  updateFirmware(FILE_NAME_3, FLASH_BANK_2, FLASH_SECTOR_0, 8, FW_CM4_START_ADD);
 8000d8a:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2308      	movs	r3, #8
 8000d92:	2200      	movs	r2, #0
 8000d94:	2102      	movs	r1, #2
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <boot_main+0x284>)
 8000d98:	f7ff fe32 	bl	8000a00 <updateFirmware>
  }
  gotoFirmware(FW_CM7_START_ADD);
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <boot_main+0x27c>)
 8000d9e:	f7ff fe13 	bl	80009c8 <gotoFirmware>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <boot_main+0x262>
 8000da4:	e000ed00 	.word	0xe000ed00
 8000da8:	58024400 	.word	0x58024400
 8000dac:	58022000 	.word	0x58022000
 8000db0:	24000008 	.word	0x24000008
 8000db4:	240000ac 	.word	0x240000ac
 8000db8:	0800dfe8 	.word	0x0800dfe8
 8000dbc:	08020000 	.word	0x08020000
 8000dc0:	0800dfec 	.word	0x0800dfec
 8000dc4:	0800dff8 	.word	0x0800dff8

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09c      	sub	sp, #112	; 0x70
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	224c      	movs	r2, #76	; 0x4c
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f00c fc78 	bl	800d6cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2220      	movs	r2, #32
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00c fc72 	bl	800d6cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000de8:	2004      	movs	r0, #4
 8000dea:	f002 fb75 	bl	80034d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <SystemClock_Config+0x104>)
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <SystemClock_Config+0x104>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <SystemClock_Config+0x104>)
 8000e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <SystemClock_Config+0x108>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a30      	ldr	r2, [pc, #192]	; (8000ed0 <SystemClock_Config+0x108>)
 8000e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <SystemClock_Config+0x108>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e20:	bf00      	nop
 8000e22:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <SystemClock_Config+0x108>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e2e:	d1f8      	bne.n	8000e22 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e30:	230b      	movs	r3, #11
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e42:	2301      	movs	r3, #1
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000e52:	2310      	movs	r3, #16
 8000e54:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e62:	230c      	movs	r3, #12
 8000e64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 f866 	bl	8003f44 <HAL_RCC_OscConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e7e:	f000 f829 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	233f      	movs	r3, #63	; 0x3f
 8000e84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	2303      	movs	r3, #3
 8000e88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 fca6 	bl	80047f8 <HAL_RCC_ClockConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000eb2:	f000 f80f 	bl	8000ed4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000eb6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f003 fe51 	bl	8004b64 <HAL_RCC_MCOConfig>
}
 8000ec2:	bf00      	nop
 8000ec4:	3770      	adds	r7, #112	; 0x70
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	58000400 	.word	0x58000400
 8000ed0:	58024800 	.word	0x58024800

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>

08000ede <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b090      	sub	sp, #64	; 0x40
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d102      	bne.n	8000ef6 <MT25TL01G_Enter4BytesAddressMode+0x18>
 8000ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef4:	e001      	b.n	8000efa <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8000efc:	23b7      	movs	r3, #183	; 0xb7
 8000efe:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f860 	bl	8000fe6 <MT25TL01G_WriteEnable>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000f2c:	f06f 0301 	mvn.w	r3, #1
 8000f30:	e019      	b.n	8000f66 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f002 fbb9 	bl	80036b4 <HAL_QSPI_Command>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000f48:	f06f 0301 	mvn.w	r3, #1
 8000f4c:	e00b      	b.n	8000f66 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	4619      	mov	r1, r3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f80b 	bl	8000f6e <MT25TL01G_AutoPollingMemReady>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000f5e:	f06f 0301 	mvn.w	r3, #1
 8000f62:	e000      	b.n	8000f66 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3740      	adds	r7, #64	; 0x40
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b096      	sub	sp, #88	; 0x58
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	460b      	mov	r3, r1
 8000f78:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000f7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8000f80:	2305      	movs	r3, #5
 8000f82:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000f8c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000f90:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8000faa:	2310      	movs	r3, #16
 8000fac:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb2:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8000fb4:	f240 1301 	movw	r3, #257	; 0x101
 8000fb8:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fbe:	f107 0208 	add.w	r2, r7, #8
 8000fc2:	f107 0120 	add.w	r1, r7, #32
 8000fc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f002 fcff 	bl	80039ce <HAL_QSPI_AutoPolling>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8000fd6:	f06f 0304 	mvn.w	r3, #4
 8000fda:	e000      	b.n	8000fde <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8000fdc:	2300      	movs	r3, #0

}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3758      	adds	r7, #88	; 0x58
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b096      	sub	sp, #88	; 0x58
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d102      	bne.n	8000ffe <MT25TL01G_WriteEnable+0x18>
 8000ff8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffc:	e001      	b.n	8001002 <MT25TL01G_WriteEnable+0x1c>
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8001004:	2306      	movs	r3, #6
 8001006:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800101c:	2300      	movs	r3, #0
 800101e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001020:	2300      	movs	r3, #0
 8001022:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	f241 3288 	movw	r2, #5000	; 0x1388
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f002 fb40 	bl	80036b4 <HAL_QSPI_Command>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800103a:	f06f 0301 	mvn.w	r3, #1
 800103e:	e029      	b.n	8001094 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8001040:	f240 2302 	movw	r3, #514	; 0x202
 8001044:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8001046:	f240 2302 	movw	r3, #514	; 0x202
 800104a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001054:	2310      	movs	r3, #16
 8001056:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001058:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800105e:	2305      	movs	r3, #5
 8001060:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d102      	bne.n	800106e <MT25TL01G_WriteEnable+0x88>
 8001068:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800106c:	e001      	b.n	8001072 <MT25TL01G_WriteEnable+0x8c>
 800106e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001072:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001074:	f107 0208 	add.w	r2, r7, #8
 8001078:	f107 0120 	add.w	r1, r7, #32
 800107c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f002 fca4 	bl	80039ce <HAL_QSPI_AutoPolling>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800108c:	f06f 0304 	mvn.w	r3, #4
 8001090:	e000      	b.n	8001094 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3758      	adds	r7, #88	; 0x58
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <MT25TL01G_PageProgram>:
  * @param  Size Size of data to write. Range 1 ~ 256
  * @retval QSPI memory status
  */

int32_t MT25TL01G_PageProgram(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b092      	sub	sp, #72	; 0x48
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	460b      	mov	r3, r1
 80010aa:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d83a      	bhi.n	8001128 <MT25TL01G_PageProgram+0x8c>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <MT25TL01G_PageProgram+0x1c>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	080010e1 	.word	0x080010e1
 80010c0:	080010f9 	.word	0x080010f9
 80010c4:	08001111 	.word	0x08001111
  {

  case MT25TL01G_SPI_MODE :                   /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_PAGE_PROG_CMD;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 80010d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_1_LINE;
 80010d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80010de:	e023      	b.n	8001128 <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_2IO_MODE :               /*  1-2-2 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_EXT_DUAL_IN_FAST_PROG_CMD;
 80010e6:	23d2      	movs	r3, #210	; 0xd2
 80010e8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_2_LINES;
 80010ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_2_LINES;
 80010f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80010f6:	e017      	b.n	8001128 <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_4IO_MODE :               /* 1-4-4 program commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_EXT_QUAD_IN_FAST_PROG_CMD;
 80010fe:	2338      	movs	r3, #56	; 0x38
 8001100:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8001102:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8001108:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800110e:	e00b      	b.n	8001128 <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_QPI_MODE :                   /* 4-4-4 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001110:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_QUAD_IN_FAST_PROG_4_BYTE_ADDR_CMD;
 8001116:	2334      	movs	r3, #52	; 0x34
 8001118:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 800111a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8001120:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8001126:	bf00      	nop

  }

  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001128:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800112c:	61fb      	str	r3, [r7, #28]
  s_command.Address           = WriteAddr;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	617b      	str	r3, [r7, #20]
  s_command.NbData            = Size;
 8001132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001142:	2300      	movs	r3, #0
 8001144:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001146:	2300      	movs	r3, #0
 8001148:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001152:	4619      	mov	r1, r3
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f002 faad 	bl	80036b4 <HAL_QSPI_Command>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <MT25TL01G_PageProgram+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001160:	f06f 0301 	mvn.w	r3, #1
 8001164:	e00c      	b.n	8001180 <MT25TL01G_PageProgram+0xe4>
  }
  if (HAL_QSPI_Transmit(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001166:	f241 3288 	movw	r2, #5000	; 0x1388
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f002 faff 	bl	8003770 <HAL_QSPI_Transmit>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <MT25TL01G_PageProgram+0xe2>
  {
    return MT25TL01G_ERROR_TRANSMIT;
 8001178:	f06f 0302 	mvn.w	r3, #2
 800117c:	e000      	b.n	8001180 <MT25TL01G_PageProgram+0xe4>
  }
  return MT25TL01G_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3748      	adds	r7, #72	; 0x48
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <MT25TL01G_ReadDTR>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ReadDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b092      	sub	sp, #72	; 0x48
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	460b      	mov	r3, r1
 8001196:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 8001198:	7afb      	ldrb	r3, [r7, #11]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d83a      	bhi.n	8001214 <MT25TL01G_ReadDTR+0x8c>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <MT25TL01G_ReadDTR+0x1c>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	080011b5 	.word	0x080011b5
 80011a8:	080011cd 	.word	0x080011cd
 80011ac:	080011e5 	.word	0x080011e5
 80011b0:	080011fd 	.word	0x080011fd
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80011ba:	230e      	movs	r3, #14
 80011bc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80011be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80011c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 80011ca:	e023      	b.n	8001214 <MT25TL01G_ReadDTR+0x8c>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80011d2:	233d      	movs	r3, #61	; 0x3d
 80011d4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80011d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80011dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 80011e2:	e017      	b.n	8001214 <MT25TL01G_ReadDTR+0x8c>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80011ea:	23ee      	movs	r3, #238	; 0xee
 80011ec:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80011ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80011f4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 80011fa:	e00b      	b.n	8001214 <MT25TL01G_ReadDTR+0x8c>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80011fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8001202:	23ed      	movs	r3, #237	; 0xed
 8001204:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001206:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800120c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001210:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001212:	bf00      	nop
  }
  /* Initialize the read command */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8001214:	2308      	movs	r3, #8
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001218:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800121c:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.NbData            = Size;
 8001226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800122a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8001230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001234:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001236:	2300      	movs	r3, #0
 8001238:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001242:	4619      	mov	r1, r3
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f002 fa35 	bl	80036b4 <HAL_QSPI_Command>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <MT25TL01G_ReadDTR+0xce>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001250:	f06f 0301 	mvn.w	r3, #1
 8001254:	e00c      	b.n	8001270 <MT25TL01G_ReadDTR+0xe8>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001256:	f241 3288 	movw	r2, #5000	; 0x1388
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f002 fb19 	bl	8003894 <HAL_QSPI_Receive>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <MT25TL01G_ReadDTR+0xe6>
  {
    return MT25TL01G_ERROR_RECEIVE;
 8001268:	f06f 0303 	mvn.w	r3, #3
 800126c:	e000      	b.n	8001270 <MT25TL01G_ReadDTR+0xe8>
  }

  return MT25TL01G_OK;
 800126e:	2300      	movs	r3, #0

}
 8001270:	4618      	mov	r0, r3
 8001272:	3748      	adds	r7, #72	; 0x48
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <MT25TL01G_ReadSTR>:
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ReadSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b092      	sub	sp, #72	; 0x48
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	460b      	mov	r3, r1
 8001286:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d83a      	bhi.n	8001304 <MT25TL01G_ReadSTR+0x8c>
 800128e:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <MT25TL01G_ReadSTR+0x1c>)
 8001290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001294:	080012a5 	.word	0x080012a5
 8001298:	080012bd 	.word	0x080012bd
 800129c:	080012d5 	.word	0x080012d5
 80012a0:	080012ed 	.word	0x080012ed
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80012a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80012aa:	230c      	movs	r3, #12
 80012ac:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80012ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80012b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 80012ba:	e023      	b.n	8001304 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80012bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80012c2:	23bc      	movs	r3, #188	; 0xbc
 80012c4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80012c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80012cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 80012d2:	e017      	b.n	8001304 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80012d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80012da:	23ec      	movs	r3, #236	; 0xec
 80012dc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80012de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80012e4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 80012ea:	e00b      	b.n	8001304 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80012ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80012f2:	23eb      	movs	r3, #235	; 0xeb
 80012f4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80012f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80012fc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001300:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001302:	bf00      	nop
  }
  /* Initialize the read command */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8001304:	2308      	movs	r3, #8
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001308:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800130c:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.NbData            = Size;
 8001316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800131e:	2300      	movs	r3, #0
 8001320:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001322:	2300      	movs	r3, #0
 8001324:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	f241 3288 	movw	r2, #5000	; 0x1388
 800132e:	4619      	mov	r1, r3
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f002 f9bf 	bl	80036b4 <HAL_QSPI_Command>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <MT25TL01G_ReadSTR+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 800133c:	f06f 0301 	mvn.w	r3, #1
 8001340:	e00c      	b.n	800135c <MT25TL01G_ReadSTR+0xe4>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001342:	f241 3288 	movw	r2, #5000	; 0x1388
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f002 faa3 	bl	8003894 <HAL_QSPI_Receive>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <MT25TL01G_ReadSTR+0xe2>
  {
    return MT25TL01G_ERROR_RECEIVE;
 8001354:	f06f 0303 	mvn.w	r3, #3
 8001358:	e000      	b.n	800135c <MT25TL01G_ReadSTR+0xe4>
  }


  return MT25TL01G_OK;
 800135a:	2300      	movs	r3, #0

}
 800135c:	4618      	mov	r0, r3
 800135e:	3748      	adds	r7, #72	; 0x48
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <MT25TL01G_ChipErase>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ChipErase(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b090      	sub	sp, #64	; 0x40
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d102      	bne.n	800137c <MT25TL01G_ChipErase+0x18>
 8001376:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137a:	e001      	b.n	8001380 <MT25TL01G_ChipErase+0x1c>
 800137c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001380:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_DIE_ERASE_CMD;
 8001382:	23c7      	movs	r3, #199	; 0xc7
 8001384:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800139a:	2300      	movs	r3, #0
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800139e:	2300      	movs	r3, #0
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013aa:	4619      	mov	r1, r3
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f002 f981 	bl	80036b4 <HAL_QSPI_Command>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <MT25TL01G_ChipErase+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80013b8:	f06f 0301 	mvn.w	r3, #1
 80013bc:	e000      	b.n	80013c0 <MT25TL01G_ChipErase+0x5c>
  }

  return MT25TL01G_OK;
 80013be:	2300      	movs	r3, #0

}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3740      	adds	r7, #64	; 0x40
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b090      	sub	sp, #64	; 0x40
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80013d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80013d6:	2335      	movs	r3, #53	; 0x35
 80013d8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f002 f957 	bl	80036b4 <HAL_QSPI_Command>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800140c:	f06f 0301 	mvn.w	r3, #1
 8001410:	e000      	b.n	8001414 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3740      	adds	r7, #64	; 0x40
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b090      	sub	sp, #64	; 0x40
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001428:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800142a:	23f5      	movs	r3, #245	; 0xf5
 800142c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001442:	2300      	movs	r3, #0
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001446:	2300      	movs	r3, #0
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001452:	4619      	mov	r1, r3
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f002 f92d 	bl	80036b4 <HAL_QSPI_Command>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001460:	f06f 0301 	mvn.w	r3, #1
 8001464:	e000      	b.n	8001468 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3740      	adds	r7, #64	; 0x40
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b090      	sub	sp, #64	; 0x40
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d102      	bne.n	8001488 <MT25TL01G_ResetEnable+0x18>
 8001482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001486:	e001      	b.n	800148c <MT25TL01G_ResetEnable+0x1c>
 8001488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800148e:	2366      	movs	r3, #102	; 0x66
 8001490:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f002 f8fb 	bl	80036b4 <HAL_QSPI_Command>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80014c4:	f06f 0301 	mvn.w	r3, #1
 80014c8:	e000      	b.n	80014cc <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3740      	adds	r7, #64	; 0x40
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b090      	sub	sp, #64	; 0x40
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d102      	bne.n	80014ec <MT25TL01G_ResetMemory+0x18>
 80014e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ea:	e001      	b.n	80014f0 <MT25TL01G_ResetMemory+0x1c>
 80014ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80014f2:	2399      	movs	r3, #153	; 0x99
 80014f4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800150a:	2300      	movs	r3, #0
 800150c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800150e:	2300      	movs	r3, #0
 8001510:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f002 f8c9 	bl	80036b4 <HAL_QSPI_Command>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001528:	f06f 0301 	mvn.w	r3, #1
 800152c:	e000      	b.n	8001530 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3740      	adds	r7, #64	; 0x40
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_QUADSPI_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_QUADSPI_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_QUADSPI_Init+0x4c>)
 8001544:	2201      	movs	r2, #1
 8001546:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_QUADSPI_Init+0x4c>)
 800154a:	2204      	movs	r2, #4
 800154c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <MX_QUADSPI_Init+0x4c>)
 8001550:	2210      	movs	r2, #16
 8001552:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_QUADSPI_Init+0x4c>)
 8001556:	2219      	movs	r2, #25
 8001558:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MX_QUADSPI_Init+0x4c>)
 800155c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001560:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_QUADSPI_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_QUADSPI_Init+0x4c>)
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_QUADSPI_Init+0x4c>)
 8001570:	f002 f80c 	bl	800358c <HAL_QSPI_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 800157a:	f7ff fcab 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	24000110 	.word	0x24000110
 8001588:	52005000 	.word	0x52005000

0800158c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0c0      	sub	sp, #256	; 0x100
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a4:	f107 0320 	add.w	r3, r7, #32
 80015a8:	22c8      	movs	r2, #200	; 0xc8
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00c f88d 	bl	800d6cc <memset>
  if(qspiHandle->Instance==QUADSPI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a85      	ldr	r2, [pc, #532]	; (80017cc <HAL_QSPI_MspInit+0x240>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	f040 8102 	bne.w	80017c2 <HAL_QSPI_MspInit+0x236>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80015be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 fd06 	bl	8004fe4 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80015de:	f7ff fc79 	bl	8000ed4 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015e2:	4b7b      	ldr	r3, [pc, #492]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 80015e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015e8:	4a79      	ldr	r2, [pc, #484]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 80015ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80015f2:	4b77      	ldr	r3, [pc, #476]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 80015f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001600:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001606:	4a72      	ldr	r2, [pc, #456]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 8001608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001610:	4b6f      	ldr	r3, [pc, #444]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 8001612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800161e:	4b6c      	ldr	r3, [pc, #432]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001624:	4a6a      	ldr	r2, [pc, #424]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 8001626:	f043 0320 	orr.w	r3, r3, #32
 800162a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162e:	4b68      	ldr	r3, [pc, #416]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001634:	f003 0320 	and.w	r3, r3, #32
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800163c:	4b64      	ldr	r3, [pc, #400]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001642:	4a63      	ldr	r2, [pc, #396]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164c:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 800164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001660:	4a5b      	ldr	r2, [pc, #364]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166a:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001678:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167e:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001688:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <HAL_QSPI_MspInit+0x244>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8001696:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800169a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b0:	2309      	movs	r3, #9
 80016b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016ba:	4619      	mov	r1, r3
 80016bc:	4845      	ldr	r0, [pc, #276]	; (80017d4 <HAL_QSPI_MspInit+0x248>)
 80016be:	f001 fb95 	bl	8002dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80016c2:	2340      	movs	r3, #64	; 0x40
 80016c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016da:	230a      	movs	r3, #10
 80016dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016e4:	4619      	mov	r1, r3
 80016e6:	483b      	ldr	r0, [pc, #236]	; (80017d4 <HAL_QSPI_MspInit+0x248>)
 80016e8:	f001 fb80 	bl	8002dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 80016ec:	23c0      	movs	r3, #192	; 0xc0
 80016ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001704:	2309      	movs	r3, #9
 8001706:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800170a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800170e:	4619      	mov	r1, r3
 8001710:	4831      	ldr	r0, [pc, #196]	; (80017d8 <HAL_QSPI_MspInit+0x24c>)
 8001712:	f001 fb6b 	bl	8002dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8001716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800171a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001730:	230a      	movs	r3, #10
 8001732:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800173a:	4619      	mov	r1, r3
 800173c:	4826      	ldr	r0, [pc, #152]	; (80017d8 <HAL_QSPI_MspInit+0x24c>)
 800173e:	f001 fb55 	bl	8002dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8001742:	230c      	movs	r3, #12
 8001744:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800175a:	2309      	movs	r3, #9
 800175c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001760:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001764:	4619      	mov	r1, r3
 8001766:	481d      	ldr	r0, [pc, #116]	; (80017dc <HAL_QSPI_MspInit+0x250>)
 8001768:	f001 fb40 	bl	8002dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800176c:	2304      	movs	r3, #4
 800176e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001784:	2309      	movs	r3, #9
 8001786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800178e:	4619      	mov	r1, r3
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <HAL_QSPI_MspInit+0x254>)
 8001792:	f001 fb2b 	bl	8002dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8001796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800179a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017b0:	2309      	movs	r3, #9
 80017b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017ba:	4619      	mov	r1, r3
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <HAL_QSPI_MspInit+0x258>)
 80017be:	f001 fb15 	bl	8002dec <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80017c2:	bf00      	nop
 80017c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	52005000 	.word	0x52005000
 80017d0:	58024400 	.word	0x58024400
 80017d4:	58021800 	.word	0x58021800
 80017d8:	58021400 	.word	0x58021400
 80017dc:	58021c00 	.word	0x58021c00
 80017e0:	58020400 	.word	0x58020400
 80017e4:	58020c00 	.word	0x58020c00

080017e8 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <HAL_QSPI_MspDeInit+0x58>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d11e      	bne.n	8001838 <HAL_QSPI_MspDeInit+0x50>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_QSPI_MspDeInit+0x5c>)
 80017fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001800:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_QSPI_MspDeInit+0x5c>)
 8001802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001806:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin|QSPI_BK1_NCS_Pin);
 800180a:	f244 2140 	movw	r1, #16960	; 0x4240
 800180e:	480e      	ldr	r0, [pc, #56]	; (8001848 <HAL_QSPI_MspDeInit+0x60>)
 8001810:	f001 fc9c 	bl	800314c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO1_Pin);
 8001814:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <HAL_QSPI_MspDeInit+0x64>)
 800181a:	f001 fc97 	bl	800314c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin);
 800181e:	210c      	movs	r1, #12
 8001820:	480b      	ldr	r0, [pc, #44]	; (8001850 <HAL_QSPI_MspDeInit+0x68>)
 8001822:	f001 fc93 	bl	800314c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin);
 8001826:	2104      	movs	r1, #4
 8001828:	480a      	ldr	r0, [pc, #40]	; (8001854 <HAL_QSPI_MspDeInit+0x6c>)
 800182a:	f001 fc8f 	bl	800314c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_BK1_IO0_GPIO_Port, QSPI_BK1_IO0_Pin);
 800182e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <HAL_QSPI_MspDeInit+0x70>)
 8001834:	f001 fc8a 	bl	800314c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	52005000 	.word	0x52005000
 8001844:	58024400 	.word	0x58024400
 8001848:	58021800 	.word	0x58021800
 800184c:	58021400 	.word	0x58021400
 8001850:	58021c00 	.word	0x58021c00
 8001854:	58020400 	.word	0x58020400
 8001858:	58020c00 	.word	0x58020c00

0800185c <QSPI_Init>:

static int32_t QSPI_ResetMemory(uint32_t Instance);
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance, QSPI_Interface_t Mode);

int32_t QSPI_Init(uint32_t Instance, QSPI_Init_t *Init)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  int32_t ret = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  */

//  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <QSPI_Init+0x1a>
  {
    ret = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e060      	b.n	8001938 <QSPI_Init+0xdc>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8001876:	4933      	ldr	r1, [pc, #204]	; (8001944 <QSPI_Init+0xe8>)
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d156      	bne.n	8001938 <QSPI_Init+0xdc>
    {
      /* Msp QSPI initialization */
    	HAL_QSPI_MspInit(&hqspi);
 800188a:	482f      	ldr	r0, [pc, #188]	; (8001948 <QSPI_Init+0xec>)
 800188c:	f7ff fe7e 	bl	800158c <HAL_QSPI_MspInit>

      if(ret == HAL_OK)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d150      	bne.n	8001938 <QSPI_Init+0xdc>
//        if(PMX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
//        {
//          ret = HAL_ERROR;
//        }

    	MX_QUADSPI_Init ();
 8001896:	f7ff fe4f 	bl	8001538 <MX_QUADSPI_Init>

        /* QSPI memory reset */
        if(QSPI_ResetMemory(Instance) != HAL_OK)
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 faba 	bl	8001e14 <QSPI_ResetMemory>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <QSPI_Init+0x50>
        {
          ret = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e045      	b.n	8001938 <QSPI_Init+0xdc>
        }

        /* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80018ac:	4925      	ldr	r1, [pc, #148]	; (8001944 <QSPI_Init+0xe8>)
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	3301      	adds	r3, #1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	4821      	ldr	r0, [pc, #132]	; (8001948 <QSPI_Init+0xec>)
 80018c2:	f7ff fb0c 	bl	8000ede <MT25TL01G_Enter4BytesAddressMode>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <QSPI_Init+0x76>
        {
          ret = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e032      	b.n	8001938 <QSPI_Init+0xdc>
        }

      	/* Configuration of the dummy cycles on QSPI memory side */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80018d2:	491c      	ldr	r1, [pc, #112]	; (8001944 <QSPI_Init+0xe8>)
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3301      	adds	r3, #1
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4818      	ldr	r0, [pc, #96]	; (8001948 <QSPI_Init+0xec>)
 80018e8:	f7ff fb41 	bl	8000f6e <MT25TL01G_AutoPollingMemReady>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <QSPI_Init+0x9c>
        {
          ret = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e01f      	b.n	8001938 <QSPI_Init+0xdc>
        }

        else if(QSPI_DummyCyclesCfg(Instance, QSPI_Ctx[Instance].InterfaceMode) != HAL_OK)
 80018f8:	4912      	ldr	r1, [pc, #72]	; (8001944 <QSPI_Init+0xe8>)
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	3301      	adds	r3, #1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 fae9 	bl	8001ee4 <QSPI_DummyCyclesCfg>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <QSPI_Init+0xc2>
        {
          ret = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e00c      	b.n	8001938 <QSPI_Init+0xdc>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != HAL_OK)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	7819      	ldrb	r1, [r3, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	461a      	mov	r2, r3
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f9f5 	bl	8001d18 <QSPI_ConfigFlash>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <QSPI_Init+0xdc>
          {
            ret = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001938:	68fb      	ldr	r3, [r7, #12]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2400015c 	.word	0x2400015c
 8001948:	24000110 	.word	0x24000110

0800194c <QSPI_DeInit>:

int32_t QSPI_DeInit(uint32_t Instance)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  int32_t ret = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <QSPI_DeInit+0x18>
  {
    ret = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	e046      	b.n	80019f2 <QSPI_DeInit+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8001964:	4925      	ldr	r1, [pc, #148]	; (80019fc <QSPI_DeInit+0xb0>)
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d107      	bne.n	8001988 <QSPI_DeInit+0x3c>
    {
      if(QSPI_DisableMemoryMappedMode(Instance) != HAL_OK)
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f975 	bl	8001c68 <QSPI_DisableMemoryMappedMode>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <QSPI_DeInit+0x3c>
      {
        ret = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == HAL_OK)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d131      	bne.n	80019f2 <QSPI_DeInit+0xa6>
    {
      /* Set default QSPI_Ctx values */
      QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_NONE;
 800198e:	491b      	ldr	r1, [pc, #108]	; (80019fc <QSPI_DeInit+0xb0>)
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
      QSPI_Ctx[Instance].InterfaceMode = QSPI_SPI_MODE;
 80019a0:	4916      	ldr	r1, [pc, #88]	; (80019fc <QSPI_DeInit+0xb0>)
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	3301      	adds	r3, #1
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
      QSPI_Ctx[Instance].TransferRate  = QSPI_STR_TRANSFER;
 80019b4:	4911      	ldr	r1, [pc, #68]	; (80019fc <QSPI_DeInit+0xb0>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	3302      	adds	r3, #2
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
      QSPI_Ctx[Instance].DualFlashMode = QSPI_DUALFLASH_ENABLE;
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <QSPI_DeInit+0xb0>)
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	3304      	adds	r3, #4
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	601a      	str	r2, [r3, #0]

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 0)
      HAL_QSPI_MspDeInit(&hqspi);
 80019dc:	4808      	ldr	r0, [pc, #32]	; (8001a00 <QSPI_DeInit+0xb4>)
 80019de:	f7ff ff03 	bl	80017e8 <HAL_QSPI_MspDeInit>
#endif /* (USE_HAL_QSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_QSPI_DeInit(&hqspi) != HAL_OK)
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <QSPI_DeInit+0xb4>)
 80019e4:	f001 fe46 	bl	8003674 <HAL_QSPI_DeInit>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <QSPI_DeInit+0xa6>
      {
        ret = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2400015c 	.word	0x2400015c
 8001a00:	24000110 	.word	0x24000110

08001a04 <QSPI_Read>:
//
//  return HAL_QSPI_Init(hQspi);
//}

int32_t QSPI_Read(uint32_t Instance, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  int32_t ret = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <QSPI_Read+0x1e>
  {
    ret = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e035      	b.n	8001a8e <QSPI_Read+0x8a>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == QSPI_STR_TRANSFER)
 8001a22:	491d      	ldr	r1, [pc, #116]	; (8001a98 <QSPI_Read+0x94>)
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3302      	adds	r3, #2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d115      	bne.n	8001a64 <QSPI_Read+0x60>
    {
      if(MT25TL01G_ReadSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode, pData, ReadAddr, Size) != MT25TL01G_OK)
 8001a38:	4917      	ldr	r1, [pc, #92]	; (8001a98 <QSPI_Read+0x94>)
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	3301      	adds	r3, #1
 8001a48:	7819      	ldrb	r1, [r3, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	4812      	ldr	r0, [pc, #72]	; (8001a9c <QSPI_Read+0x98>)
 8001a54:	f7ff fc10 	bl	8001278 <MT25TL01G_ReadSTR>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d017      	beq.n	8001a8e <QSPI_Read+0x8a>
      {
        ret = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e014      	b.n	8001a8e <QSPI_Read+0x8a>
      }
    }
    else
    {
      if(MT25TL01G_ReadDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode, pData, ReadAddr, Size) != MT25TL01G_OK)
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <QSPI_Read+0x94>)
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3301      	adds	r3, #1
 8001a74:	7819      	ldrb	r1, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <QSPI_Read+0x98>)
 8001a80:	f7ff fb82 	bl	8001188 <MT25TL01G_ReadDTR>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <QSPI_Read+0x8a>
      {
        ret = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001a8e:	697b      	ldr	r3, [r7, #20]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2400015c 	.word	0x2400015c
 8001a9c:	24000110 	.word	0x24000110

08001aa0 <QSPI_Write>:
  * @param  WriteAddr  Write start address
  * @param  Size       Size of data to write
  * @retval BSP status
  */
int32_t QSPI_Write(uint32_t Instance, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
  int32_t ret = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t end_addr, current_size, current_addr;
  uint8_t *write_data;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <QSPI_Write+0x1e>
  {
    ret = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
 8001abc:	e07d      	b.n	8001bba <QSPI_Write+0x11a>
  }
  else
  {
    /* Calculation of the size between the write address and the end of the page */
    current_size = MT25TL01G_PAGE_SIZE - (WriteAddr % MT25TL01G_PAGE_SIZE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001ac6:	623b      	str	r3, [r7, #32]

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > Size)
 8001ac8:	6a3a      	ldr	r2, [r7, #32]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d901      	bls.n	8001ad4 <QSPI_Write+0x34>
    {
      current_size = Size;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	623b      	str	r3, [r7, #32]
    }

    /* Initialize the address variables */
    current_addr = WriteAddr;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	61fb      	str	r3, [r7, #28]
    end_addr = WriteAddr + Size;
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]
    write_data = pData;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]

    /* Perform the write page by page */
    do
    {
      /* Check if Flash busy ? */
      if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001ae4:	4937      	ldr	r1, [pc, #220]	; (8001bc4 <QSPI_Write+0x124>)
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	3301      	adds	r3, #1
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4833      	ldr	r0, [pc, #204]	; (8001bc8 <QSPI_Write+0x128>)
 8001afa:	f7ff fa38 	bl	8000f6e <MT25TL01G_AutoPollingMemReady>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <QSPI_Write+0x6a>
      {
        ret = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	e050      	b.n	8001bac <QSPI_Write+0x10c>
      }/* Enable write operations */
      else if(MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001b0a:	492e      	ldr	r1, [pc, #184]	; (8001bc4 <QSPI_Write+0x124>)
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	3301      	adds	r3, #1
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	482a      	ldr	r0, [pc, #168]	; (8001bc8 <QSPI_Write+0x128>)
 8001b20:	f7ff fa61 	bl	8000fe6 <MT25TL01G_WriteEnable>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <QSPI_Write+0x90>
      {
        ret = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2e:	e03d      	b.n	8001bac <QSPI_Write+0x10c>
      }/* Issue page program command */
      else if(MT25TL01G_PageProgram(&hqspi, QSPI_Ctx[Instance].InterfaceMode, write_data, current_addr, current_size) != MT25TL01G_OK)
 8001b30:	4924      	ldr	r1, [pc, #144]	; (8001bc4 <QSPI_Write+0x124>)
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3301      	adds	r3, #1
 8001b40:	7819      	ldrb	r1, [r3, #0]
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	481f      	ldr	r0, [pc, #124]	; (8001bc8 <QSPI_Write+0x128>)
 8001b4c:	f7ff faa6 	bl	800109c <MT25TL01G_PageProgram>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <QSPI_Write+0xbc>
      {
        ret = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5a:	e027      	b.n	8001bac <QSPI_Write+0x10c>
      }/* Configure automatic polling mode to wait for end of program */
      else if (MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001b5c:	4919      	ldr	r1, [pc, #100]	; (8001bc4 <QSPI_Write+0x124>)
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4815      	ldr	r0, [pc, #84]	; (8001bc8 <QSPI_Write+0x128>)
 8001b72:	f7ff f9fc 	bl	8000f6e <MT25TL01G_AutoPollingMemReady>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <QSPI_Write+0xe2>
      {
        ret = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	e014      	b.n	8001bac <QSPI_Write+0x10c>
      }
      else
      {
        /* Update the address and size variables for next page programming */
        current_addr += current_size;
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	4413      	add	r3, r2
 8001b88:	61fb      	str	r3, [r7, #28]
        write_data += current_size;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	4413      	add	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        current_size = ((current_addr + MT25TL01G_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MT25TL01G_PAGE_SIZE;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d203      	bcs.n	8001ba6 <QSPI_Write+0x106>
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	e001      	b.n	8001baa <QSPI_Write+0x10a>
 8001ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001baa:	623b      	str	r3, [r7, #32]
      }
    } while ((current_addr < end_addr) && (ret == HAL_OK));
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d202      	bcs.n	8001bba <QSPI_Write+0x11a>
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d094      	beq.n	8001ae4 <QSPI_Write+0x44>
  }

  /* Return BSP status */
  return ret;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2400015c 	.word	0x2400015c
 8001bc8:	24000110 	.word	0x24000110

08001bcc <QSPI_EraseChip>:
  * @brief  Erases the entire QSPI memory.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t QSPI_EraseChip(uint32_t Instance)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  int32_t ret = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <QSPI_EraseChip+0x18>
  {
    ret = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	e037      	b.n	8001c54 <QSPI_EraseChip+0x88>
  }
  else
  {
    /* Check Flash busy ? */
    if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001be4:	491e      	ldr	r1, [pc, #120]	; (8001c60 <QSPI_EraseChip+0x94>)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481a      	ldr	r0, [pc, #104]	; (8001c64 <QSPI_EraseChip+0x98>)
 8001bfa:	f7ff f9b8 	bl	8000f6e <MT25TL01G_AutoPollingMemReady>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <QSPI_EraseChip+0x3e>
    {
      ret = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e024      	b.n	8001c54 <QSPI_EraseChip+0x88>
    }/* Enable write operations */
    else if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001c0a:	4915      	ldr	r1, [pc, #84]	; (8001c60 <QSPI_EraseChip+0x94>)
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	3301      	adds	r3, #1
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4811      	ldr	r0, [pc, #68]	; (8001c64 <QSPI_EraseChip+0x98>)
 8001c20:	f7ff f9e1 	bl	8000fe6 <MT25TL01G_WriteEnable>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <QSPI_EraseChip+0x64>
    {
      ret = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e011      	b.n	8001c54 <QSPI_EraseChip+0x88>
    }
    else
    {
      /* Issue Chip erase command */
      if(MT25TL01G_ChipErase(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001c30:	490b      	ldr	r1, [pc, #44]	; (8001c60 <QSPI_EraseChip+0x94>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3301      	adds	r3, #1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4807      	ldr	r0, [pc, #28]	; (8001c64 <QSPI_EraseChip+0x98>)
 8001c46:	f7ff fb8d 	bl	8001364 <MT25TL01G_ChipErase>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <QSPI_EraseChip+0x88>
      {
        ret = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2400015c 	.word	0x2400015c
 8001c64:	24000110 	.word	0x24000110

08001c68 <QSPI_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t QSPI_DisableMemoryMappedMode(uint32_t Instance)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
  uint8_t Dummy;
  int32_t ret = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <QSPI_DisableMemoryMappedMode+0x18>
  {
    ret = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	e041      	b.n	8001d04 <QSPI_DisableMemoryMappedMode+0x9c>
  }
  else
  {
    if(QSPI_Ctx[Instance].IsInitialized != QSPI_ACCESS_MMP)
 8001c80:	4923      	ldr	r1, [pc, #140]	; (8001d10 <QSPI_DisableMemoryMappedMode+0xa8>)
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d002      	beq.n	8001c9a <QSPI_DisableMemoryMappedMode+0x32>
    {
      ret = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e034      	b.n	8001d04 <QSPI_DisableMemoryMappedMode+0x9c>
    }/* Abort MMP back to indirect mode */
    else if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
 8001c9a:	481e      	ldr	r0, [pc, #120]	; (8001d14 <QSPI_DisableMemoryMappedMode+0xac>)
 8001c9c:	f001 ff0e 	bl	8003abc <HAL_QSPI_Abort>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <QSPI_DisableMemoryMappedMode+0x44>
    {
      ret = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e02b      	b.n	8001d04 <QSPI_DisableMemoryMappedMode+0x9c>
    }
    else
    {
      /* Force QSPI interface Sampling Shift to half cycle */
      hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <QSPI_DisableMemoryMappedMode+0xac>)
 8001cae:	2210      	movs	r2, #16
 8001cb0:	60da      	str	r2, [r3, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001cb2:	4818      	ldr	r0, [pc, #96]	; (8001d14 <QSPI_DisableMemoryMappedMode+0xac>)
 8001cb4:	f001 fc6a 	bl	800358c <HAL_QSPI_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <QSPI_DisableMemoryMappedMode+0x5c>
      {
        ret = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e01f      	b.n	8001d04 <QSPI_DisableMemoryMappedMode+0x9c>
      }
      /* Dummy read for exit from Performance Enhance mode */
      else if(MT25TL01G_ReadSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode, &Dummy, 0, 1) != MT25TL01G_OK)
 8001cc4:	4912      	ldr	r1, [pc, #72]	; (8001d10 <QSPI_DisableMemoryMappedMode+0xa8>)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	7819      	ldrb	r1, [r3, #0]
 8001cd6:	f107 020b 	add.w	r2, r7, #11
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <QSPI_DisableMemoryMappedMode+0xac>)
 8001ce2:	f7ff fac9 	bl	8001278 <MT25TL01G_ReadSTR>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <QSPI_DisableMemoryMappedMode+0x8a>
      {
        ret = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e008      	b.n	8001d04 <QSPI_DisableMemoryMappedMode+0x9c>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001cf2:	4907      	ldr	r1, [pc, #28]	; (8001d10 <QSPI_DisableMemoryMappedMode+0xa8>)
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* Return BSP status */
  return ret;
 8001d04:	68fb      	ldr	r3, [r7, #12]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2400015c 	.word	0x2400015c
 8001d14:	24000110 	.word	0x24000110

08001d18 <QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t QSPI_ConfigFlash(uint32_t Instance, QSPI_Interface_t Mode, QSPI_Transfer_t Rate)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
 8001d24:	4613      	mov	r3, r2
 8001d26:	70bb      	strb	r3, [r7, #2]
  int32_t ret = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <QSPI_ConfigFlash+0x20>
  {
    ret = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	e063      	b.n	8001e00 <QSPI_ConfigFlash+0xe8>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8001d38:	4934      	ldr	r1, [pc, #208]	; (8001e0c <QSPI_ConfigFlash+0xf4>)
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d102      	bne.n	8001d52 <QSPI_ConfigFlash+0x3a>
    {
      ret = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e056      	b.n	8001e00 <QSPI_ConfigFlash+0xe8>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001d52:	78bb      	ldrb	r3, [r7, #2]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <QSPI_ConfigFlash+0x44>
 8001d58:	2310      	movs	r3, #16
 8001d5a:	e000      	b.n	8001d5e <QSPI_ConfigFlash+0x46>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <QSPI_ConfigFlash+0xf8>)
 8001d60:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001d62:	482b      	ldr	r0, [pc, #172]	; (8001e10 <QSPI_ConfigFlash+0xf8>)
 8001d64:	f001 fc12 	bl	800358c <HAL_QSPI_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <QSPI_ConfigFlash+0x5c>
      {
        ret = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e045      	b.n	8001e00 <QSPI_ConfigFlash+0xe8>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8001d74:	4925      	ldr	r1, [pc, #148]	; (8001e0c <QSPI_ConfigFlash+0xf4>)
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3301      	adds	r3, #1
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d10b      	bne.n	8001da2 <QSPI_ConfigFlash+0x8a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d014      	beq.n	8001dba <QSPI_ConfigFlash+0xa2>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8001d90:	481f      	ldr	r0, [pc, #124]	; (8001e10 <QSPI_ConfigFlash+0xf8>)
 8001d92:	f7ff fb43 	bl	800141c <MT25TL01G_ExitQPIMode>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <QSPI_ConfigFlash+0xa2>
            {
              ret = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001da0:	e00b      	b.n	8001dba <QSPI_ConfigFlash+0xa2>

        case QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d10a      	bne.n	8001dbe <QSPI_ConfigFlash+0xa6>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8001da8:	4819      	ldr	r0, [pc, #100]	; (8001e10 <QSPI_ConfigFlash+0xf8>)
 8001daa:	f7ff fb0d 	bl	80013c8 <MT25TL01G_EnterQPIMode>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d004      	beq.n	8001dbe <QSPI_ConfigFlash+0xa6>
            {
              ret = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001db8:	e001      	b.n	8001dbe <QSPI_ConfigFlash+0xa6>
          break;
 8001dba:	bf00      	nop
 8001dbc:	e000      	b.n	8001dc0 <QSPI_ConfigFlash+0xa8>
          break;
 8001dbe:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == HAL_OK)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d11c      	bne.n	8001e00 <QSPI_ConfigFlash+0xe8>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001dc6:	4911      	ldr	r1, [pc, #68]	; (8001e0c <QSPI_ConfigFlash+0xf4>)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <QSPI_ConfigFlash+0xf4>)
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3301      	adds	r3, #1
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <QSPI_ConfigFlash+0xf4>)
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	78ba      	ldrb	r2, [r7, #2]
 8001dfe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001e00:	68fb      	ldr	r3, [r7, #12]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2400015c 	.word	0x2400015c
 8001e10:	24000110 	.word	0x24000110

08001e14 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  int32_t ret = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001e20:	2103      	movs	r1, #3
 8001e22:	482e      	ldr	r0, [pc, #184]	; (8001edc <QSPI_ResetMemory+0xc8>)
 8001e24:	f7ff fb24 	bl	8001470 <MT25TL01G_ResetEnable>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <QSPI_ResetMemory+0x20>
  {
    ret =HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e04d      	b.n	8001ed0 <QSPI_ResetMemory+0xbc>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001e34:	2103      	movs	r1, #3
 8001e36:	4829      	ldr	r0, [pc, #164]	; (8001edc <QSPI_ResetMemory+0xc8>)
 8001e38:	f7ff fb4c 	bl	80014d4 <MT25TL01G_ResetMemory>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <QSPI_ResetMemory+0x34>
  {
    ret = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e043      	b.n	8001ed0 <QSPI_ResetMemory+0xbc>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001e48:	4925      	ldr	r1, [pc, #148]	; (8001ee0 <QSPI_ResetMemory+0xcc>)
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	3301      	adds	r3, #1
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481f      	ldr	r0, [pc, #124]	; (8001edc <QSPI_ResetMemory+0xc8>)
 8001e5e:	f7ff f886 	bl	8000f6e <MT25TL01G_AutoPollingMemReady>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <QSPI_ResetMemory+0x5a>
  {
    ret = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	e030      	b.n	8001ed0 <QSPI_ResetMemory+0xbc>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, QSPI_SPI_MODE) != MT25TL01G_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	481a      	ldr	r0, [pc, #104]	; (8001edc <QSPI_ResetMemory+0xc8>)
 8001e72:	f7ff fafd 	bl	8001470 <MT25TL01G_ResetEnable>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <QSPI_ResetMemory+0x6e>
  {
    ret = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e026      	b.n	8001ed0 <QSPI_ResetMemory+0xbc>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, QSPI_SPI_MODE) != MT25TL01G_OK)
 8001e82:	2100      	movs	r1, #0
 8001e84:	4815      	ldr	r0, [pc, #84]	; (8001edc <QSPI_ResetMemory+0xc8>)
 8001e86:	f7ff fb25 	bl	80014d4 <MT25TL01G_ResetMemory>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <QSPI_ResetMemory+0x82>
  {
    ret = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e01c      	b.n	8001ed0 <QSPI_ResetMemory+0xbc>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8001e96:	4912      	ldr	r1, [pc, #72]	; (8001ee0 <QSPI_ResetMemory+0xcc>)
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8001ea8:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <QSPI_ResetMemory+0xcc>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8001ebc:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <QSPI_ResetMemory+0xcc>)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3302      	adds	r3, #2
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	24000110 	.word	0x24000110
 8001ee0:	2400015c 	.word	0x2400015c

08001ee4 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance, QSPI_Interface_t Mode)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b092      	sub	sp, #72	; 0x48
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
    int32_t ret= HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d102      	bne.n	8001f04 <QSPI_DummyCyclesCfg+0x20>
 8001efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f02:	e001      	b.n	8001f08 <QSPI_DummyCyclesCfg+0x24>
 8001f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8001f0a:	2385      	movs	r3, #133	; 0x85
 8001f0c:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d102      	bne.n	8001f22 <QSPI_DummyCyclesCfg+0x3e>
 8001f1c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001f20:	e001      	b.n	8001f26 <QSPI_DummyCyclesCfg+0x42>
 8001f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f26:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f34:	2300      	movs	r3, #0
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4619      	mov	r1, r3
 8001f46:	4824      	ldr	r0, [pc, #144]	; (8001fd8 <QSPI_DummyCyclesCfg+0xf4>)
 8001f48:	f001 fbb4 	bl	80036b4 <HAL_QSPI_Command>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <QSPI_DummyCyclesCfg+0x72>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e03c      	b.n	8001fd0 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f56:	f107 030a 	add.w	r3, r7, #10
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481d      	ldr	r0, [pc, #116]	; (8001fd8 <QSPI_DummyCyclesCfg+0xf4>)
 8001f62:	f001 fc97 	bl	8003894 <HAL_QSPI_Receive>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <QSPI_DummyCyclesCfg+0x8c>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e02f      	b.n	8001fd0 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, Mode) != MT25TL01G_OK)
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	4619      	mov	r1, r3
 8001f74:	4818      	ldr	r0, [pc, #96]	; (8001fd8 <QSPI_DummyCyclesCfg+0xf4>)
 8001f76:	f7ff f836 	bl	8000fe6 <MT25TL01G_WriteEnable>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <QSPI_DummyCyclesCfg+0xa0>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e025      	b.n	8001fd0 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8001f84:	2381      	movs	r3, #129	; 0x81
 8001f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8001f88:	897a      	ldrh	r2, [r7, #10]
 8001f8a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001f8e:	4013      	ands	r3, r2
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <QSPI_DummyCyclesCfg+0xf8>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <QSPI_DummyCyclesCfg+0xf4>)
 8001fa6:	f001 fb85 	bl	80036b4 <HAL_QSPI_Command>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <QSPI_DummyCyclesCfg+0xd0>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e00d      	b.n	8001fd0 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fb4:	f107 030a 	add.w	r3, r7, #10
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <QSPI_DummyCyclesCfg+0xf4>)
 8001fc0:	f001 fbd6 	bl	8003770 <HAL_QSPI_Transmit>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <QSPI_DummyCyclesCfg+0xea>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Return BSP status */
  return ret;
 8001fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3748      	adds	r7, #72	; 0x48
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24000110 	.word	0x24000110
 8001fdc:	ffff8080 	.word	0xffff8080

08001fe0 <CSP_QUADSPI_Init>:
  * @}
  */


uint8_t CSP_QUADSPI_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
	hqspi.Instance = QUADSPI;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <CSP_QUADSPI_Init+0x48>)
 8001fe8:	4a10      	ldr	r2, [pc, #64]	; (800202c <CSP_QUADSPI_Init+0x4c>)
 8001fea:	601a      	str	r2, [r3, #0]
    if (QSPI_DeInit(0) != HAL_OK) {
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fcad 	bl	800194c <QSPI_DeInit>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <CSP_QUADSPI_Init+0x1c>
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e010      	b.n	800201e <CSP_QUADSPI_Init+0x3e>
    }

    QSPI_Init_t qspi_Init;

    qspi_Init.InterfaceMode = QSPI_QPI_MODE;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	713b      	strb	r3, [r7, #4]
    qspi_Init.TransferRate = QSPI_STR_TRANSFER;
 8002000:	2300      	movs	r3, #0
 8002002:	717b      	strb	r3, [r7, #5]
    qspi_Init.DualFlashMode = QSPI_DUALFLASH_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	71bb      	strb	r3, [r7, #6]

    if (QSPI_Init(0, &qspi_Init) != HAL_OK)
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	4619      	mov	r1, r3
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff fc25 	bl	800185c <QSPI_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <CSP_QUADSPI_Init+0x3c>
    {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <CSP_QUADSPI_Init+0x3e>
    }

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	24000110 	.word	0x24000110
 800202c:	52005000 	.word	0x52005000

08002030 <CSP_QSPI_Erase_Chip>:

uint8_t CSP_QSPI_Erase_Chip(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	return QSPI_EraseChip(0);
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff fdc9 	bl	8001bcc <QSPI_EraseChip>
 800203a:	4603      	mov	r3, r0
 800203c:	b2db      	uxtb	r3, r3
}
 800203e:	4618      	mov	r0, r3
 8002040:	bd80      	pop	{r7, pc}

08002042 <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address, uint32_t buffer_size)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
	return QSPI_Write(0, buffer, address, buffer_size);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff fd23 	bl	8001aa0 <QSPI_Write>
 800205a:	4603      	mov	r3, r0
 800205c:	b2db      	uxtb	r3, r3
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <CSP_QSPI_Read>:

	return QSPI_EraseBlock(0, BlockAddress, BlockSize);
}

uint8_t CSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
	return QSPI_Read(0, pData, ReadAddr, Size);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	68f9      	ldr	r1, [r7, #12]
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff fcc3 	bl	8001a04 <QSPI_Read>
 800207e:	4603      	mov	r3, r0
 8002080:	b2db      	uxtb	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <MX_SDMMC1_SD_Init+0x34>)
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <MX_SDMMC1_SD_Init+0x38>)
 8002094:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <MX_SDMMC1_SD_Init+0x34>)
 8002098:	2200      	movs	r2, #0
 800209a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <MX_SDMMC1_SD_Init+0x34>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <MX_SDMMC1_SD_Init+0x34>)
 80020a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020a8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <MX_SDMMC1_SD_Init+0x34>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <MX_SDMMC1_SD_Init+0x34>)
 80020b2:	2208      	movs	r2, #8
 80020b4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80020b6:	4802      	ldr	r0, [pc, #8]	; (80020c0 <MX_SDMMC1_SD_Init+0x34>)
 80020b8:	f005 fcd2 	bl	8007a60 <HAL_SD_Init>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	24000168 	.word	0x24000168
 80020c4:	52007000 	.word	0x52007000

080020c8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0be      	sub	sp, #248	; 0xf8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e0:	f107 0318 	add.w	r3, r7, #24
 80020e4:	22c8      	movs	r2, #200	; 0xc8
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f00b faef 	bl	800d6cc <memset>
  if(sdHandle->Instance==SDMMC1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <HAL_SD_MspInit+0x10c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d169      	bne.n	80021cc <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80020f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002104:	2300      	movs	r3, #0
 8002106:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002108:	f107 0318 	add.w	r3, r7, #24
 800210c:	4618      	mov	r0, r3
 800210e:	f002 ff69 	bl	8004fe4 <HAL_RCCEx_PeriphCLKConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002118:	f7fe fedc 	bl	8000ed4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <HAL_SD_MspInit+0x110>)
 800211e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002122:	4a2d      	ldr	r2, [pc, #180]	; (80021d8 <HAL_SD_MspInit+0x110>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_SD_MspInit+0x110>)
 800212e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_SD_MspInit+0x110>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002140:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <HAL_SD_MspInit+0x110>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800214a:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_SD_MspInit+0x110>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <HAL_SD_MspInit+0x110>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <HAL_SD_MspInit+0x110>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_SD_MspInit+0x110>)
 800216a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 8002176:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800217a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002190:	230c      	movs	r3, #12
 8002192:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800219a:	4619      	mov	r1, r3
 800219c:	480f      	ldr	r0, [pc, #60]	; (80021dc <HAL_SD_MspInit+0x114>)
 800219e:	f000 fe25 	bl	8002dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80021a2:	2304      	movs	r3, #4
 80021a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021ba:	230c      	movs	r3, #12
 80021bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	; (80021e0 <HAL_SD_MspInit+0x118>)
 80021c8:	f000 fe10 	bl	8002dec <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80021cc:	bf00      	nop
 80021ce:	37f8      	adds	r7, #248	; 0xf8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	52007000 	.word	0x52007000
 80021d8:	58024400 	.word	0x58024400
 80021dc:	58020800 	.word	0x58020800
 80021e0:	58020c00 	.word	0x58020c00

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_MspInit+0x30>)
 80021ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021f0:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_MspInit+0x30>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_MspInit+0x30>)
 80021fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	58024400 	.word	0x58024400

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	e7fe      	b.n	800221c <NMI_Handler+0x4>

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f000 f98a 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <_sbrk+0x5c>)
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <_sbrk+0x60>)
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <_sbrk+0x64>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <_sbrk+0x64>)
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <_sbrk+0x68>)
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	429a      	cmp	r2, r3
 800229a:	d207      	bcs.n	80022ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800229c:	f00b f9ec 	bl	800d678 <__errno>
 80022a0:	4603      	mov	r3, r0
 80022a2:	220c      	movs	r2, #12
 80022a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	e009      	b.n	80022c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <_sbrk+0x64>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <_sbrk+0x64>)
 80022bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	24080000 	.word	0x24080000
 80022cc:	00000400 	.word	0x00000400
 80022d0:	240001e4 	.word	0x240001e4
 80022d4:	240002e8 	.word	0x240002e8

080022d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022de:	4a23      	ldr	r2, [pc, #140]	; (800236c <MX_USART1_UART_Init+0x94>)
 80022e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022fe:	220c      	movs	r2, #12
 8002300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <MX_USART1_UART_Init+0x90>)
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <MX_USART1_UART_Init+0x90>)
 800231c:	2200      	movs	r2, #0
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002320:	4811      	ldr	r0, [pc, #68]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002322:	f006 ff4f 	bl	80091c4 <HAL_UART_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800232c:	f7fe fdd2 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002330:	2100      	movs	r1, #0
 8002332:	480d      	ldr	r0, [pc, #52]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002334:	f007 ffdf 	bl	800a2f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800233e:	f7fe fdc9 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002342:	2100      	movs	r1, #0
 8002344:	4808      	ldr	r0, [pc, #32]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002346:	f008 f814 	bl	800a372 <HAL_UARTEx_SetRxFifoThreshold>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002350:	f7fe fdc0 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002356:	f007 ff95 	bl	800a284 <HAL_UARTEx_DisableFifoMode>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002360:	f7fe fdb8 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	240001e8 	.word	0x240001e8
 800236c:	40011000 	.word	0x40011000

08002370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b0bc      	sub	sp, #240	; 0xf0
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	22c8      	movs	r2, #200	; 0xc8
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f00b f99b 	bl	800d6cc <memset>
  if(uartHandle->Instance==USART1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a27      	ldr	r2, [pc, #156]	; (8002438 <HAL_UART_MspInit+0xc8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d146      	bne.n	800242e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023a0:	f04f 0201 	mov.w	r2, #1
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fe14 	bl	8004fe4 <HAL_RCCEx_PeriphCLKConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023c2:	f7fe fd87 	bl	8000ed4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_UART_MspInit+0xcc>)
 80023c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <HAL_UART_MspInit+0xcc>)
 80023ce:	f043 0310 	orr.w	r3, r3, #16
 80023d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_UART_MspInit+0xcc>)
 80023d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_UART_MspInit+0xcc>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	4a14      	ldr	r2, [pc, #80]	; (800243c <HAL_UART_MspInit+0xcc>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_UART_MspInit+0xcc>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002402:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800241c:	2307      	movs	r3, #7
 800241e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <HAL_UART_MspInit+0xd0>)
 800242a:	f000 fcdf 	bl	8002dec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800242e:	bf00      	nop
 8002430:	37f0      	adds	r7, #240	; 0xf0
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40011000 	.word	0x40011000
 800243c:	58024400 	.word	0x58024400
 8002440:	58020000 	.word	0x58020000

08002444 <Boot_Reset_Handler>:

    .section  .text.Boot_Reset_Handler
  .weak  Boot_Reset_Handler
  .type  Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800247c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002448:	f7fe f924 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800244e:	490d      	ldr	r1, [pc, #52]	; (8002484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002454:	e002      	b.n	800245c <LoopCopyDataInit>

08002456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245a:	3304      	adds	r3, #4

0800245c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800245c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002460:	d3f9      	bcc.n	8002456 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002464:	4c0a      	ldr	r4, [pc, #40]	; (8002490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002468:	e001      	b.n	800246e <LoopFillZerobss>

0800246a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800246c:	3204      	adds	r2, #4

0800246e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002470:	d3fb      	bcc.n	800246a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002472:	f00b f907 	bl	800d684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  boot_main
 8002476:	f7fe fb63 	bl	8000b40 <boot_main>
  bx  lr
 800247a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800247c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002480:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002484:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8002488:	0800e158 	.word	0x0800e158
  ldr r2, =_sbss
 800248c:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8002490:	240002e8 	.word	0x240002e8

08002494 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC3_IRQHandler>
	...

08002498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249e:	2003      	movs	r0, #3
 80024a0:	f000 f96e 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024a4:	f002 fbc8 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <HAL_Init+0x68>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	4913      	ldr	r1, [pc, #76]	; (8002504 <HAL_Init+0x6c>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_Init+0x68>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_Init+0x6c>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_Init+0x70>)
 80024da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024dc:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_Init+0x74>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e2:	2000      	movs	r0, #0
 80024e4:	f000 f814 	bl	8002510 <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e002      	b.n	80024f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024f2:	f7ff fe77 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	58024400 	.word	0x58024400
 8002504:	0800e048 	.word	0x0800e048
 8002508:	24000004 	.word	0x24000004
 800250c:	24000000 	.word	0x24000000

08002510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_InitTick+0x60>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e021      	b.n	8002568 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_InitTick+0x64>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_InitTick+0x60>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f945 	bl	80027ca <HAL_SYSTICK_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00e      	b.n	8002568 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d80a      	bhi.n	8002566 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002550:	2200      	movs	r2, #0
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f000 f91d 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800255c:	4a06      	ldr	r2, [pc, #24]	; (8002578 <HAL_InitTick+0x68>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	24000028 	.word	0x24000028
 8002574:	24000000 	.word	0x24000000
 8002578:	24000024 	.word	0x24000024

0800257c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x20>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x24>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_IncTick+0x24>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	24000028 	.word	0x24000028
 80025a0:	2400027c 	.word	0x2400027c

080025a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_GetTick+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	2400027c 	.word	0x2400027c

080025bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff ffee 	bl	80025a4 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d005      	beq.n	80025e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_Delay+0x44>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e2:	bf00      	nop
 80025e4:	f7ff ffde 	bl	80025a4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d8f7      	bhi.n	80025e4 <HAL_Delay+0x28>
  {
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	24000028 	.word	0x24000028

08002604 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetREVID+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0c1b      	lsrs	r3, r3, #16
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	5c001000 	.word	0x5c001000

0800261c <__NVIC_SetPriorityGrouping>:
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <__NVIC_SetPriorityGrouping+0x40>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	4313      	orrs	r3, r2
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x40>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00
 8002660:	05fa0000 	.word	0x05fa0000

08002664 <__NVIC_GetPriorityGrouping>:
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_SetPriority>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff47 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff5e 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff90 	bl	80026d4 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5f 	bl	8002680 <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ffb2 	bl	800273c <SysTick_Config>
 80027d8:	4603      	mov	r3, r0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80027f8:	2308      	movs	r3, #8
 80027fa:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027fc:	4b40      	ldr	r3, [pc, #256]	; (8002900 <HAL_FLASH_Program+0x11c>)
 80027fe:	7d1b      	ldrb	r3, [r3, #20]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_FLASH_Program+0x24>
 8002804:	2302      	movs	r3, #2
 8002806:	e076      	b.n	80028f6 <HAL_FLASH_Program+0x112>
 8002808:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <HAL_FLASH_Program+0x11c>)
 800280a:	2201      	movs	r2, #1
 800280c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002814:	d306      	bcc.n	8002824 <HAL_FLASH_Program+0x40>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800281c:	d202      	bcs.n	8002824 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800281e:	2301      	movs	r3, #1
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	e00c      	b.n	800283e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800282a:	d306      	bcc.n	800283a <HAL_FLASH_Program+0x56>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8002832:	d202      	bcs.n	800283a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	e001      	b.n	800283e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e05b      	b.n	80028f6 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_FLASH_Program+0x11c>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8002844:	69b9      	ldr	r1, [r7, #24]
 8002846:	f24c 3050 	movw	r0, #50000	; 0xc350
 800284a:	f000 f8c1 	bl	80029d0 <FLASH_WaitForLastOperation>
 800284e:	4603      	mov	r3, r0
 8002850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8002854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002858:	2b00      	cmp	r3, #0
 800285a:	d147      	bne.n	80028ec <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d106      	bne.n	8002870 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_FLASH_Program+0x120>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4a27      	ldr	r2, [pc, #156]	; (8002904 <HAL_FLASH_Program+0x120>)
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	60d3      	str	r3, [r2, #12]
 800286e:	e007      	b.n	8002880 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_FLASH_Program+0x120>)
 8002872:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002876:	4a23      	ldr	r2, [pc, #140]	; (8002904 <HAL_FLASH_Program+0x120>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8002880:	f3bf 8f6f 	isb	sy
}
 8002884:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002886:	f3bf 8f4f 	dsb	sy
}
 800288a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	3304      	adds	r3, #4
 8002898:	623b      	str	r3, [r7, #32]
        src_addr++;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	61fb      	str	r3, [r7, #28]
        row_index--;
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ef      	bne.n	800288c <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 80028ac:	f3bf 8f6f 	isb	sy
}
 80028b0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80028b2:	f3bf 8f4f 	dsb	sy
}
 80028b6:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80028b8:	69b9      	ldr	r1, [r7, #24]
 80028ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028be:	f000 f887 	bl	80029d0 <FLASH_WaitForLastOperation>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d106      	bne.n	80028dc <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_FLASH_Program+0x120>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <HAL_FLASH_Program+0x120>)
 80028d4:	f023 0302 	bic.w	r3, r3, #2
 80028d8:	60d3      	str	r3, [r2, #12]
 80028da:	e007      	b.n	80028ec <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_FLASH_Program+0x120>)
 80028de:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <HAL_FLASH_Program+0x120>)
 80028e4:	f023 0302 	bic.w	r3, r3, #2
 80028e8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_FLASH_Program+0x11c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	751a      	strb	r2, [r3, #20]

  return status;
 80028f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3728      	adds	r7, #40	; 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	24000280 	.word	0x24000280
 8002904:	52002000 	.word	0x52002000

08002908 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800290c:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_FLASH_Unlock+0x68>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00d      	beq.n	8002934 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8002918:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_FLASH_Unlock+0x68>)
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_FLASH_Unlock+0x6c>)
 800291c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_FLASH_Unlock+0x68>)
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_FLASH_Unlock+0x70>)
 8002922:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_FLASH_Unlock+0x68>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e018      	b.n	8002966 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_FLASH_Unlock+0x68>)
 8002936:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d010      	beq.n	8002964 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_FLASH_Unlock+0x68>)
 8002944:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <HAL_FLASH_Unlock+0x6c>)
 8002946:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_FLASH_Unlock+0x68>)
 800294c:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <HAL_FLASH_Unlock+0x70>)
 800294e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_FLASH_Unlock+0x68>)
 8002954:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	52002000 	.word	0x52002000
 8002974:	45670123 	.word	0x45670123
 8002978:	cdef89ab 	.word	0xcdef89ab

0800297c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_FLASH_Lock+0x50>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_FLASH_Lock+0x50>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_FLASH_Lock+0x50>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e011      	b.n	80029c0 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_FLASH_Lock+0x50>)
 800299e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <HAL_FLASH_Lock+0x50>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HAL_FLASH_Lock+0x50>)
 80029ae:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	52002000 	.word	0x52002000

080029d0 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80029da:	2304      	movs	r3, #4
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 80029e2:	f7ff fddf 	bl	80025a4 <HAL_GetTick>
 80029e6:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d113      	bne.n	8002a16 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 80029ee:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <FLASH_WaitForLastOperation+0x124>)
 80029f0:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80029f2:	e010      	b.n	8002a16 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d00c      	beq.n	8002a16 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029fc:	f7ff fdd2 	bl	80025a4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d302      	bcc.n	8002a12 <FLASH_WaitForLastOperation+0x42>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e06a      	b.n	8002aec <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <FLASH_WaitForLastOperation+0x128>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d10a      	bne.n	8002a38 <FLASH_WaitForLastOperation+0x68>
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e00c      	b.n	8002a52 <FLASH_WaitForLastOperation+0x82>
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002a3a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	4013      	ands	r3, r2
 8002a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ce      	bne.n	80029f4 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <FLASH_WaitForLastOperation+0x130>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	e007      	b.n	8002a78 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8002a68:	4b24      	ldr	r3, [pc, #144]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002a6a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <FLASH_WaitForLastOperation+0x130>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d017      	beq.n	8002ab2 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <FLASH_WaitForLastOperation+0x134>)
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <FLASH_WaitForLastOperation+0x134>)
 8002a8c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <FLASH_WaitForLastOperation+0x128>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d103      	bne.n	8002aa2 <FLASH_WaitForLastOperation+0xd2>
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6153      	str	r3, [r2, #20]
 8002aa0:	e005      	b.n	8002aae <FLASH_WaitForLastOperation+0xde>
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aaa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e01c      	b.n	8002aec <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10b      	bne.n	8002ad0 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac4:	d111      	bne.n	8002aea <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002ac8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002acc:	615a      	str	r2, [r3, #20]
 8002ace:	e00c      	b.n	8002aea <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002ad2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ade:	d104      	bne.n	8002aea <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <FLASH_WaitForLastOperation+0x12c>)
 8002ae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ae6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	80000004 	.word	0x80000004
 8002af8:	1fef000f 	.word	0x1fef000f
 8002afc:	52002000 	.word	0x52002000
 8002b00:	17ee0000 	.word	0x17ee0000
 8002b04:	24000280 	.word	0x24000280

08002b08 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b16:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <HAL_FLASHEx_Erase+0x188>)
 8002b18:	7d1b      	ldrb	r3, [r3, #20]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_FLASHEx_Erase+0x1a>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0b2      	b.n	8002c88 <HAL_FLASHEx_Erase+0x180>
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_FLASHEx_Erase+0x188>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b28:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_FLASHEx_Erase+0x188>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b40:	f7ff ff46 	bl	80029d0 <FLASH_WaitForLastOperation>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b60:	f7ff ff36 	bl	80029d0 <FLASH_WaitForLastOperation>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 8085 	bne.w	8002c80 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d136      	bne.n	8002bec <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f000 f887 	bl	8002c9c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00f      	beq.n	8002bba <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ba0:	f7ff ff16 	bl	80029d0 <FLASH_WaitForLastOperation>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8002bae:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_FLASHEx_Erase+0x18c>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4a38      	ldr	r2, [pc, #224]	; (8002c94 <HAL_FLASHEx_Erase+0x18c>)
 8002bb4:	f023 0308 	bic.w	r3, r3, #8
 8002bb8:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d05c      	beq.n	8002c80 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bcc:	f7ff ff00 	bl	80029d0 <FLASH_WaitForLastOperation>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <HAL_FLASHEx_Erase+0x18c>)
 8002bdc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002be0:	4a2c      	ldr	r2, [pc, #176]	; (8002c94 <HAL_FLASHEx_Erase+0x18c>)
 8002be2:	f023 0308 	bic.w	r3, r3, #8
 8002be6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8002bea:	e049      	b.n	8002c80 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	e039      	b.n	8002c70 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	461a      	mov	r2, r3
 8002c06:	68b8      	ldr	r0, [r7, #8]
 8002c08:	f000 f8b2 	bl	8002d70 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8002c18:	2101      	movs	r1, #1
 8002c1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c1e:	f7ff fed7 	bl	80029d0 <FLASH_WaitForLastOperation>
 8002c22:	4603      	mov	r3, r0
 8002c24:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_FLASHEx_Erase+0x18c>)
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	491a      	ldr	r1, [pc, #104]	; (8002c94 <HAL_FLASHEx_Erase+0x18c>)
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_FLASHEx_Erase+0x190>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00e      	beq.n	8002c5c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8002c3e:	2102      	movs	r1, #2
 8002c40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c44:	f7ff fec4 	bl	80029d0 <FLASH_WaitForLastOperation>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_FLASHEx_Erase+0x18c>)
 8002c4e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002c52:	4910      	ldr	r1, [pc, #64]	; (8002c94 <HAL_FLASHEx_Erase+0x18c>)
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_FLASHEx_Erase+0x190>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	601a      	str	r2, [r3, #0]
          break;
 8002c68:	e00a      	b.n	8002c80 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4413      	add	r3, r2
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d3bd      	bcc.n	8002bfc <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_FLASHEx_Erase+0x188>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	751a      	strb	r2, [r3, #20]

  return status;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	24000280 	.word	0x24000280
 8002c94:	52002000 	.word	0x52002000
 8002c98:	fffff8fb 	.word	0xfffff8fb

08002c9c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d122      	bne.n	8002cf6 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002cb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cba:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002cbe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002cc2:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002cc4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cc8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	4926      	ldr	r1, [pc, #152]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002cda:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002cde:	4923      	ldr	r1, [pc, #140]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8002ce8:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8002cf4:	e033      	b.n	8002d5e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d011      	beq.n	8002d24 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d0a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	4916      	ldr	r1, [pc, #88]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d1e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002d22:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d017      	beq.n	8002d5e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d30:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002d34:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d3a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d40:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002d44:	4909      	ldr	r1, [pc, #36]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d50:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002d54:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <FLASH_MassErase+0xd0>)
 8002d56:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002d5a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	52002000 	.word	0x52002000

08002d70 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <FLASH_Erase_Sector+0x78>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <FLASH_Erase_Sector+0x78>)
 8002d8c:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8002d90:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <FLASH_Erase_Sector+0x78>)
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	0219      	lsls	r1, r3, #8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <FLASH_Erase_Sector+0x78>)
 8002da2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8002da6:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d014      	beq.n	8002ddc <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <FLASH_Erase_Sector+0x78>)
 8002db4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002db8:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <FLASH_Erase_Sector+0x78>)
 8002dba:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8002dbe:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <FLASH_Erase_Sector+0x78>)
 8002dc4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	0219      	lsls	r1, r3, #8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <FLASH_Erase_Sector+0x78>)
 8002dd4:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8002dd8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	52002000 	.word	0x52002000

08002dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dfa:	4b89      	ldr	r3, [pc, #548]	; (8003020 <HAL_GPIO_Init+0x234>)
 8002dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dfe:	e194      	b.n	800312a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8186 	beq.w	8003124 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d005      	beq.n	8002e30 <HAL_GPIO_Init+0x44>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d130      	bne.n	8002e92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e66:	2201      	movs	r2, #1
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 0201 	and.w	r2, r3, #1
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d017      	beq.n	8002ece <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d123      	bne.n	8002f22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	69b9      	ldr	r1, [r7, #24]
 8002f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0203 	and.w	r2, r3, #3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80e0 	beq.w	8003124 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f64:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <HAL_GPIO_Init+0x238>)
 8002f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f6a:	4a2e      	ldr	r2, [pc, #184]	; (8003024 <HAL_GPIO_Init+0x238>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_GPIO_Init+0x238>)
 8002f76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f82:	4a29      	ldr	r2, [pc, #164]	; (8003028 <HAL_GPIO_Init+0x23c>)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a20      	ldr	r2, [pc, #128]	; (800302c <HAL_GPIO_Init+0x240>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d052      	beq.n	8003054 <HAL_GPIO_Init+0x268>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <HAL_GPIO_Init+0x244>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d031      	beq.n	800301a <HAL_GPIO_Init+0x22e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_GPIO_Init+0x248>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d02b      	beq.n	8003016 <HAL_GPIO_Init+0x22a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_GPIO_Init+0x24c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d025      	beq.n	8003012 <HAL_GPIO_Init+0x226>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_GPIO_Init+0x250>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01f      	beq.n	800300e <HAL_GPIO_Init+0x222>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_GPIO_Init+0x254>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d019      	beq.n	800300a <HAL_GPIO_Init+0x21e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <HAL_GPIO_Init+0x258>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <HAL_GPIO_Init+0x21a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <HAL_GPIO_Init+0x25c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00d      	beq.n	8003002 <HAL_GPIO_Init+0x216>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_GPIO_Init+0x260>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d007      	beq.n	8002ffe <HAL_GPIO_Init+0x212>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_GPIO_Init+0x264>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_GPIO_Init+0x20e>
 8002ff6:	2309      	movs	r3, #9
 8002ff8:	e02d      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 8002ffa:	230a      	movs	r3, #10
 8002ffc:	e02b      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 8002ffe:	2308      	movs	r3, #8
 8003000:	e029      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 8003002:	2307      	movs	r3, #7
 8003004:	e027      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 8003006:	2306      	movs	r3, #6
 8003008:	e025      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 800300a:	2305      	movs	r3, #5
 800300c:	e023      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 800300e:	2304      	movs	r3, #4
 8003010:	e021      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 8003012:	2303      	movs	r3, #3
 8003014:	e01f      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 8003016:	2302      	movs	r3, #2
 8003018:	e01d      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 800301a:	2301      	movs	r3, #1
 800301c:	e01b      	b.n	8003056 <HAL_GPIO_Init+0x26a>
 800301e:	bf00      	nop
 8003020:	58000080 	.word	0x58000080
 8003024:	58024400 	.word	0x58024400
 8003028:	58000400 	.word	0x58000400
 800302c:	58020000 	.word	0x58020000
 8003030:	58020400 	.word	0x58020400
 8003034:	58020800 	.word	0x58020800
 8003038:	58020c00 	.word	0x58020c00
 800303c:	58021000 	.word	0x58021000
 8003040:	58021400 	.word	0x58021400
 8003044:	58021800 	.word	0x58021800
 8003048:	58021c00 	.word	0x58021c00
 800304c:	58022000 	.word	0x58022000
 8003050:	58022400 	.word	0x58022400
 8003054:	2300      	movs	r3, #0
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	f002 0203 	and.w	r2, r2, #3
 800305c:	0092      	lsls	r2, r2, #2
 800305e:	4093      	lsls	r3, r2
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003066:	4938      	ldr	r1, [pc, #224]	; (8003148 <HAL_GPIO_Init+0x35c>)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800309a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3301      	adds	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f ae63 	bne.w	8002e00 <HAL_GPIO_Init+0x14>
  }
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	3724      	adds	r7, #36	; 0x24
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	58000400 	.word	0x58000400

0800314c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800315a:	4b75      	ldr	r3, [pc, #468]	; (8003330 <HAL_GPIO_DeInit+0x1e4>)
 800315c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800315e:	e0d9      	b.n	8003314 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003160:	2201      	movs	r2, #1
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	4013      	ands	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80cc 	beq.w	800330e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003176:	4a6f      	ldr	r2, [pc, #444]	; (8003334 <HAL_GPIO_DeInit+0x1e8>)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	220f      	movs	r2, #15
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a67      	ldr	r2, [pc, #412]	; (8003338 <HAL_GPIO_DeInit+0x1ec>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d037      	beq.n	8003210 <HAL_GPIO_DeInit+0xc4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a66      	ldr	r2, [pc, #408]	; (800333c <HAL_GPIO_DeInit+0x1f0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d031      	beq.n	800320c <HAL_GPIO_DeInit+0xc0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_GPIO_DeInit+0x1f4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d02b      	beq.n	8003208 <HAL_GPIO_DeInit+0xbc>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a64      	ldr	r2, [pc, #400]	; (8003344 <HAL_GPIO_DeInit+0x1f8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d025      	beq.n	8003204 <HAL_GPIO_DeInit+0xb8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a63      	ldr	r2, [pc, #396]	; (8003348 <HAL_GPIO_DeInit+0x1fc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01f      	beq.n	8003200 <HAL_GPIO_DeInit+0xb4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a62      	ldr	r2, [pc, #392]	; (800334c <HAL_GPIO_DeInit+0x200>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d019      	beq.n	80031fc <HAL_GPIO_DeInit+0xb0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a61      	ldr	r2, [pc, #388]	; (8003350 <HAL_GPIO_DeInit+0x204>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d013      	beq.n	80031f8 <HAL_GPIO_DeInit+0xac>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a60      	ldr	r2, [pc, #384]	; (8003354 <HAL_GPIO_DeInit+0x208>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00d      	beq.n	80031f4 <HAL_GPIO_DeInit+0xa8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a5f      	ldr	r2, [pc, #380]	; (8003358 <HAL_GPIO_DeInit+0x20c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <HAL_GPIO_DeInit+0xa4>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a5e      	ldr	r2, [pc, #376]	; (800335c <HAL_GPIO_DeInit+0x210>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_GPIO_DeInit+0xa0>
 80031e8:	2309      	movs	r3, #9
 80031ea:	e012      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 80031ec:	230a      	movs	r3, #10
 80031ee:	e010      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 80031f0:	2308      	movs	r3, #8
 80031f2:	e00e      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 80031f4:	2307      	movs	r3, #7
 80031f6:	e00c      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 80031f8:	2306      	movs	r3, #6
 80031fa:	e00a      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 80031fc:	2305      	movs	r3, #5
 80031fe:	e008      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 8003200:	2304      	movs	r3, #4
 8003202:	e006      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 8003204:	2303      	movs	r3, #3
 8003206:	e004      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 8003208:	2302      	movs	r3, #2
 800320a:	e002      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <HAL_GPIO_DeInit+0xc6>
 8003210:	2300      	movs	r3, #0
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	f002 0203 	and.w	r2, r2, #3
 8003218:	0092      	lsls	r2, r2, #2
 800321a:	4093      	lsls	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	d136      	bne.n	8003290 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	43db      	mvns	r3, r3
 8003238:	401a      	ands	r2, r3
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	43db      	mvns	r3, r3
 8003248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324c:	4013      	ands	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	43db      	mvns	r3, r3
 800325a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325e:	4013      	ands	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	220f      	movs	r2, #15
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003272:	4a30      	ldr	r2, [pc, #192]	; (8003334 <HAL_GPIO_DeInit+0x1e8>)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	3302      	adds	r3, #2
 800327a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	43da      	mvns	r2, r3
 8003282:	482c      	ldr	r0, [pc, #176]	; (8003334 <HAL_GPIO_DeInit+0x1e8>)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	400a      	ands	r2, r1
 800328a:	3302      	adds	r3, #2
 800328c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	2103      	movs	r1, #3
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	220f      	movs	r2, #15
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	08d2      	lsrs	r2, r2, #3
 80032c4:	4019      	ands	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2103      	movs	r1, #3
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	2101      	movs	r1, #1
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2103      	movs	r1, #3
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	3301      	adds	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	f47f af1f 	bne.w	8003160 <HAL_GPIO_DeInit+0x14>
  }
}
 8003322:	bf00      	nop
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	58000080 	.word	0x58000080
 8003334:	58000400 	.word	0x58000400
 8003338:	58020000 	.word	0x58020000
 800333c:	58020400 	.word	0x58020400
 8003340:	58020800 	.word	0x58020800
 8003344:	58020c00 	.word	0x58020c00
 8003348:	58021000 	.word	0x58021000
 800334c:	58021400 	.word	0x58021400
 8003350:	58021800 	.word	0x58021800
 8003354:	58021c00 	.word	0x58021c00
 8003358:	58022000 	.word	0x58022000
 800335c:	58022400 	.word	0x58022400

08003360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	887b      	ldrh	r3, [r7, #2]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	e001      	b.n	8003382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	619a      	str	r2, [r3, #24]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80033cc:	4a08      	ldr	r2, [pc, #32]	; (80033f0 <HAL_HSEM_FastTake+0x2c>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3320      	adds	r3, #32
 80033d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d6:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <HAL_HSEM_FastTake+0x30>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e000      	b.n	80033e2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	58026400 	.word	0x58026400
 80033f4:	80000300 	.word	0x80000300

080033f8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003402:	4906      	ldr	r1, [pc, #24]	; (800341c <HAL_HSEM_Release+0x24>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	58026400 	.word	0x58026400

08003420 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 8003428:	f7ff f8bc 	bl	80025a4 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e04a      	b.n	80034ce <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d008      	beq.n	8003456 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2280      	movs	r2, #128	; 0x80
 8003448:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e03b      	b.n	80034ce <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8003464:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003476:	e016      	b.n	80034a6 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003478:	f7ff f894 	bl	80025a4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b05      	cmp	r3, #5
 8003484:	d90f      	bls.n	80034a6 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e013      	b.n	80034ce <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e1      	bne.n	8003478 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	221f      	movs	r2, #31
 80034ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80034e0:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_PWREx_ConfigSupply+0xb0>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d00a      	beq.n	8003502 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80034ec:	4b26      	ldr	r3, [pc, #152]	; (8003588 <HAL_PWREx_ConfigSupply+0xb0>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e040      	b.n	8003580 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e03e      	b.n	8003580 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_PWREx_ConfigSupply+0xb0>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800350a:	491f      	ldr	r1, [pc, #124]	; (8003588 <HAL_PWREx_ConfigSupply+0xb0>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4313      	orrs	r3, r2
 8003510:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003512:	f7ff f847 	bl	80025a4 <HAL_GetTick>
 8003516:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003518:	e009      	b.n	800352e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800351a:	f7ff f843 	bl	80025a4 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003528:	d901      	bls.n	800352e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e028      	b.n	8003580 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_PWREx_ConfigSupply+0xb0>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353a:	d1ee      	bne.n	800351a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b1e      	cmp	r3, #30
 8003540:	d008      	beq.n	8003554 <HAL_PWREx_ConfigSupply+0x7c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b2e      	cmp	r3, #46	; 0x2e
 8003546:	d005      	beq.n	8003554 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b1d      	cmp	r3, #29
 800354c:	d002      	beq.n	8003554 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b2d      	cmp	r3, #45	; 0x2d
 8003552:	d114      	bne.n	800357e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003554:	f7ff f826 	bl	80025a4 <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800355a:	e009      	b.n	8003570 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800355c:	f7ff f822 	bl	80025a4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800356a:	d901      	bls.n	8003570 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e007      	b.n	8003580 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_PWREx_ConfigSupply+0xb0>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d1ee      	bne.n	800355c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	58024800 	.word	0x58024800

0800358c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af02      	add	r7, sp, #8
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7ff f806 	bl	80025a4 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e05f      	b.n	8003664 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7fd ffeb 	bl	800158c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80035b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 faf7 	bl	8003bae <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	021a      	lsls	r2, r3, #8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	2120      	movs	r1, #32
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 faef 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80035f0:	7afb      	ldrb	r3, [r7, #11]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d135      	bne.n	8003662 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_QSPI_Init+0xe0>)
 80035fe:	4013      	ands	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6852      	ldr	r2, [r2, #4]
 8003604:	0611      	lsls	r1, r2, #24
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	4311      	orrs	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	69d2      	ldr	r2, [r2, #28]
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6a12      	ldr	r2, [r2, #32]
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	430b      	orrs	r3, r1
 800361e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_QSPI_Init+0xe4>)
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6912      	ldr	r2, [r2, #16]
 800362e:	0411      	lsls	r1, r2, #16
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6952      	ldr	r2, [r2, #20]
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6992      	ldr	r2, [r2, #24]
 800363a:	4311      	orrs	r1, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	430b      	orrs	r3, r1
 8003642:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003662:	7afb      	ldrb	r3, [r7, #11]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	00ffff2f 	.word	0x00ffff2f
 8003670:	ffe0f8fe 	.word	0xffe0f8fe

08003674 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e012      	b.n	80036ac <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe f8a6 	bl	80017e8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80036c0:	f7fe ff70 	bl	80025a4 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_QSPI_Command+0x22>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e048      	b.n	8003768 <HAL_QSPI_Command+0xb4>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d137      	bne.n	800375a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2200      	movs	r2, #0
 8003700:	2120      	movs	r1, #32
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fa61 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d125      	bne.n	800375e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003712:	2200      	movs	r2, #0
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fa8e 	bl	8003c38 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d115      	bne.n	8003750 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2201      	movs	r2, #1
 800372c:	2102      	movs	r1, #2
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa4b 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2202      	movs	r2, #2
 8003744:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800374e:	e006      	b.n	800375e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003758:	e001      	b.n	800375e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800375a:	2302      	movs	r3, #2
 800375c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	; 0x28
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7fe ff10 	bl	80025a4 <HAL_GetTick>
 8003784:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3320      	adds	r3, #32
 800378c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_QSPI_Transmit+0x2e>
 800379a:	2302      	movs	r3, #2
 800379c:	e076      	b.n	800388c <HAL_QSPI_Transmit+0x11c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d165      	bne.n	800387e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d056      	beq.n	800386c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2212      	movs	r2, #18
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80037f2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80037f4:	e01b      	b.n	800382e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2201      	movs	r2, #1
 80037fe:	2104      	movs	r1, #4
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f9e2 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800380a:	7ffb      	ldrb	r3, [r7, #31]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d113      	bne.n	8003838 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	1e5a      	subs	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1df      	bne.n	80037f6 <HAL_QSPI_Transmit+0x86>
 8003836:	e000      	b.n	800383a <HAL_QSPI_Transmit+0xca>
          break;
 8003838:	bf00      	nop
      }

      if (status == HAL_OK)
 800383a:	7ffb      	ldrb	r3, [r7, #31]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d110      	bne.n	8003862 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2201      	movs	r2, #1
 8003848:	2102      	movs	r1, #2
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f9bd 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003854:	7ffb      	ldrb	r3, [r7, #31]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2202      	movs	r2, #2
 8003860:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800386a:	e00a      	b.n	8003882 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	f043 0208 	orr.w	r2, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e001      	b.n	8003882 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800387e:	2302      	movs	r3, #2
 8003880:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800388a:	7ffb      	ldrb	r3, [r7, #31]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3720      	adds	r7, #32
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7fe fe7e 	bl	80025a4 <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3320      	adds	r3, #32
 80038b8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_QSPI_Receive+0x36>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e07d      	b.n	80039c6 <HAL_QSPI_Receive+0x132>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d16c      	bne.n	80039b8 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d05d      	beq.n	80039a6 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2222      	movs	r2, #34	; 0x22
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003922:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800392c:	e01c      	b.n	8003968 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2201      	movs	r2, #1
 8003936:	2106      	movs	r1, #6
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f946 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003942:	7ffb      	ldrb	r3, [r7, #31]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d114      	bne.n	8003972 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	7812      	ldrb	r2, [r2, #0]
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	1e5a      	subs	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1de      	bne.n	800392e <HAL_QSPI_Receive+0x9a>
 8003970:	e000      	b.n	8003974 <HAL_QSPI_Receive+0xe0>
          break;
 8003972:	bf00      	nop
      }

      if (status == HAL_OK)
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d110      	bne.n	800399c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2201      	movs	r2, #1
 8003982:	2102      	movs	r1, #2
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f920 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800398e:	7ffb      	ldrb	r3, [r7, #31]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039a4:	e00a      	b.n	80039bc <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f043 0208 	orr.w	r2, r3, #8
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e001      	b.n	80039bc <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
 80039ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80039c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b088      	sub	sp, #32
 80039d2:	af02      	add	r7, sp, #8
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7fe fde2 	bl	80025a4 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_QSPI_AutoPolling+0x24>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e060      	b.n	8003ab4 <HAL_QSPI_AutoPolling+0xe6>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d14f      	bne.n	8003aa6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2242      	movs	r2, #66	; 0x42
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2120      	movs	r1, #32
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8d3 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d13d      	bne.n	8003aaa <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6892      	ldr	r2, [r2, #8]
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003a64:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f8df 	bl	8003c38 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2201      	movs	r2, #1
 8003a82:	2108      	movs	r1, #8
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f8a0 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa4:	e001      	b.n	8003aaa <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7fe fd6c 	bl	80025a4 <HAL_GetTick>
 8003acc:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d062      	beq.n	8003ba4 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d017      	beq.n	8003b24 <HAL_QSPI_Abort+0x68>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0204 	bic.w	r2, r2, #4
 8003b02:	601a      	str	r2, [r3, #0]

      /* Abort MDMA */
      status = HAL_MDMA_Abort(hqspi->hmdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fc89 	bl	8003420 <HAL_MDMA_Abort>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	f043 0204 	orr.w	r2, r3, #4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d034      	beq.n	8003b9c <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0202 	orr.w	r2, r2, #2
 8003b40:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f83b 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10e      	bne.n	8003b7c <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2202      	movs	r2, #2
 8003b64:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2120      	movs	r1, #32
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f829 	bl	8003bca <QSPI_WaitFlagStateUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d110      	bne.n	8003ba4 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003b90:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b9a:	e003      	b.n	8003ba4 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bda:	e01a      	b.n	8003c12 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d016      	beq.n	8003c12 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be4:	f7fe fcde 	bl	80025a4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d302      	bcc.n	8003bfa <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e00e      	b.n	8003c30 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d1d6      	bne.n	8003bdc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <QSPI_Config+0x28>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c52:	d005      	beq.n	8003c60 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3a01      	subs	r2, #1
 8003c5e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80b9 	beq.w	8003ddc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d05f      	beq.n	8003d32 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d031      	beq.n	8003ce8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	431a      	orrs	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	049b      	lsls	r3, r3, #18
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	ea42 0103 	orr.w	r1, r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cd8:	f000 812e 	beq.w	8003f38 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	6852      	ldr	r2, [r2, #4]
 8003ce4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003ce6:	e127      	b.n	8003f38 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	049b      	lsls	r3, r3, #18
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	ea42 0103 	orr.w	r1, r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	615a      	str	r2, [r3, #20]
}
 8003d30:	e102      	b.n	8003f38 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d02e      	beq.n	8003d98 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	049b      	lsls	r3, r3, #18
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	ea42 0103 	orr.w	r1, r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d88:	f000 80d6 	beq.w	8003f38 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	6852      	ldr	r2, [r2, #4]
 8003d94:	619a      	str	r2, [r3, #24]
}
 8003d96:	e0cf      	b.n	8003f38 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	431a      	orrs	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	049b      	lsls	r3, r3, #18
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	ea42 0103 	orr.w	r1, r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	615a      	str	r2, [r3, #20]
}
 8003dda:	e0ad      	b.n	8003f38 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d058      	beq.n	8003e96 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	6892      	ldr	r2, [r2, #8]
 8003dec:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02d      	beq.n	8003e52 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	049b      	lsls	r3, r3, #18
 8003e12:	431a      	orrs	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	ea42 0103 	orr.w	r1, r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e44:	d078      	beq.n	8003f38 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	6852      	ldr	r2, [r2, #4]
 8003e4e:	619a      	str	r2, [r3, #24]
}
 8003e50:	e072      	b.n	8003f38 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	431a      	orrs	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	049b      	lsls	r3, r3, #18
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	ea42 0103 	orr.w	r1, r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	615a      	str	r2, [r3, #20]
}
 8003e94:	e050      	b.n	8003f38 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02a      	beq.n	8003ef4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	049b      	lsls	r3, r3, #18
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	ea42 0103 	orr.w	r1, r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ee6:	d027      	beq.n	8003f38 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	6852      	ldr	r2, [r2, #4]
 8003ef0:	619a      	str	r2, [r3, #24]
}
 8003ef2:	e021      	b.n	8003f38 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01d      	beq.n	8003f38 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	049b      	lsls	r3, r3, #18
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	ea42 0103 	orr.w	r1, r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	615a      	str	r2, [r3, #20]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08c      	sub	sp, #48	; 0x30
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f000 bc48 	b.w	80047e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8088 	beq.w	8004076 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f66:	4b99      	ldr	r3, [pc, #612]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f70:	4b96      	ldr	r3, [pc, #600]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d007      	beq.n	8003f8c <HAL_RCC_OscConfig+0x48>
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	2b18      	cmp	r3, #24
 8003f80:	d111      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62>
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	4b8f      	ldr	r3, [pc, #572]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d06d      	beq.n	8004074 <HAL_RCC_OscConfig+0x130>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d169      	bne.n	8004074 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f000 bc21 	b.w	80047e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x7a>
 8003fb0:	4b86      	ldr	r3, [pc, #536]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a85      	ldr	r2, [pc, #532]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e02e      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x9c>
 8003fc6:	4b81      	ldr	r3, [pc, #516]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a80      	ldr	r2, [pc, #512]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b7e      	ldr	r3, [pc, #504]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7d      	ldr	r2, [pc, #500]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0xc0>
 8003fea:	4b78      	ldr	r3, [pc, #480]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a77      	ldr	r2, [pc, #476]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b75      	ldr	r3, [pc, #468]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a74      	ldr	r2, [pc, #464]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8004004:	4b71      	ldr	r3, [pc, #452]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a70      	ldr	r2, [pc, #448]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b6e      	ldr	r3, [pc, #440]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6d      	ldr	r2, [pc, #436]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe fabe 	bl	80025a4 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800402c:	f7fe faba 	bl	80025a4 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e3d4      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800403e:	4b63      	ldr	r3, [pc, #396]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xe8>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fe faaa 	bl	80025a4 <HAL_GetTick>
 8004050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7fe faa6 	bl	80025a4 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e3c0      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004066:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x110>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80ca 	beq.w	8004218 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004084:	4b51      	ldr	r3, [pc, #324]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800408c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800408e:	4b4f      	ldr	r3, [pc, #316]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_RCC_OscConfig+0x166>
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	2b18      	cmp	r3, #24
 800409e:	d156      	bne.n	800414e <HAL_RCC_OscConfig+0x20a>
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d151      	bne.n	800414e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040aa:	4b48      	ldr	r3, [pc, #288]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_RCC_OscConfig+0x17e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e392      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040c2:	4b42      	ldr	r3, [pc, #264]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 0219 	bic.w	r2, r3, #25
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	493f      	ldr	r1, [pc, #252]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe fa66 	bl	80025a4 <HAL_GetTick>
 80040d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040dc:	f7fe fa62 	bl	80025a4 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e37c      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fa:	f7fe fa83 	bl	8002604 <HAL_GetREVID>
 80040fe:	4603      	mov	r3, r0
 8004100:	f241 0203 	movw	r2, #4099	; 0x1003
 8004104:	4293      	cmp	r3, r2
 8004106:	d817      	bhi.n	8004138 <HAL_RCC_OscConfig+0x1f4>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d108      	bne.n	8004122 <HAL_RCC_OscConfig+0x1de>
 8004110:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004118:	4a2c      	ldr	r2, [pc, #176]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004120:	e07a      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	031b      	lsls	r3, r3, #12
 8004130:	4926      	ldr	r1, [pc, #152]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004136:	e06f      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	4b24      	ldr	r3, [pc, #144]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	4921      	ldr	r1, [pc, #132]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414c:	e064      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d047      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0219 	bic.w	r2, r3, #25
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	491a      	ldr	r1, [pc, #104]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fe fa1c 	bl	80025a4 <HAL_GetTick>
 800416c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004170:	f7fe fa18 	bl	80025a4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e332      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418e:	f7fe fa39 	bl	8002604 <HAL_GetREVID>
 8004192:	4603      	mov	r3, r0
 8004194:	f241 0203 	movw	r2, #4099	; 0x1003
 8004198:	4293      	cmp	r3, r2
 800419a:	d819      	bhi.n	80041d0 <HAL_RCC_OscConfig+0x28c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d108      	bne.n	80041b6 <HAL_RCC_OscConfig+0x272>
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041ac:	4a07      	ldr	r2, [pc, #28]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80041ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b2:	6053      	str	r3, [r2, #4]
 80041b4:	e030      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	031b      	lsls	r3, r3, #12
 80041c4:	4901      	ldr	r1, [pc, #4]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
 80041ca:	e025      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
 80041cc:	58024400 	.word	0x58024400
 80041d0:	4b9a      	ldr	r3, [pc, #616]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	4997      	ldr	r1, [pc, #604]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	e018      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e6:	4b95      	ldr	r3, [pc, #596]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a94      	ldr	r2, [pc, #592]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fe f9d7 	bl	80025a4 <HAL_GetTick>
 80041f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fe f9d3 	bl	80025a4 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e2ed      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800420c:	4b8b      	ldr	r3, [pc, #556]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a9 	beq.w	8004378 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004226:	4b85      	ldr	r3, [pc, #532]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800422e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004230:	4b82      	ldr	r3, [pc, #520]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d007      	beq.n	800424c <HAL_RCC_OscConfig+0x308>
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b18      	cmp	r3, #24
 8004240:	d13a      	bne.n	80042b8 <HAL_RCC_OscConfig+0x374>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d135      	bne.n	80042b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800424c:	4b7b      	ldr	r3, [pc, #492]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_OscConfig+0x320>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b80      	cmp	r3, #128	; 0x80
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e2c1      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004264:	f7fe f9ce 	bl	8002604 <HAL_GetREVID>
 8004268:	4603      	mov	r3, r0
 800426a:	f241 0203 	movw	r2, #4099	; 0x1003
 800426e:	4293      	cmp	r3, r2
 8004270:	d817      	bhi.n	80042a2 <HAL_RCC_OscConfig+0x35e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	2b20      	cmp	r3, #32
 8004278:	d108      	bne.n	800428c <HAL_RCC_OscConfig+0x348>
 800427a:	4b70      	ldr	r3, [pc, #448]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004282:	4a6e      	ldr	r2, [pc, #440]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004288:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800428a:	e075      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800428c:	4b6b      	ldr	r3, [pc, #428]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	069b      	lsls	r3, r3, #26
 800429a:	4968      	ldr	r1, [pc, #416]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042a0:	e06a      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042a2:	4b66      	ldr	r3, [pc, #408]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	4962      	ldr	r1, [pc, #392]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042b6:	e05f      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d042      	beq.n	8004346 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042c0:	4b5e      	ldr	r3, [pc, #376]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a5d      	ldr	r2, [pc, #372]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fe f96a 	bl	80025a4 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042d4:	f7fe f966 	bl	80025a4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e280      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042e6:	4b55      	ldr	r3, [pc, #340]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042f2:	f7fe f987 	bl	8002604 <HAL_GetREVID>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d817      	bhi.n	8004330 <HAL_RCC_OscConfig+0x3ec>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	2b20      	cmp	r3, #32
 8004306:	d108      	bne.n	800431a <HAL_RCC_OscConfig+0x3d6>
 8004308:	4b4c      	ldr	r3, [pc, #304]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004310:	4a4a      	ldr	r2, [pc, #296]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004316:	6053      	str	r3, [r2, #4]
 8004318:	e02e      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
 800431a:	4b48      	ldr	r3, [pc, #288]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	069b      	lsls	r3, r3, #26
 8004328:	4944      	ldr	r1, [pc, #272]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	604b      	str	r3, [r1, #4]
 800432e:	e023      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	493f      	ldr	r1, [pc, #252]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	60cb      	str	r3, [r1, #12]
 8004344:	e018      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004346:	4b3d      	ldr	r3, [pc, #244]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a3c      	ldr	r2, [pc, #240]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800434c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fe f927 	bl	80025a4 <HAL_GetTick>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800435a:	f7fe f923 	bl	80025a4 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e23d      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800436c:	4b33      	ldr	r3, [pc, #204]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d036      	beq.n	80043f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d019      	beq.n	80043c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800438e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004390:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fe f904 	bl	80025a4 <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fe f900 	bl	80025a4 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e21a      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x45c>
 80043be:	e018      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c0:	4b1e      	ldr	r3, [pc, #120]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c4:	4a1d      	ldr	r2, [pc, #116]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fe f8ea 	bl	80025a4 <HAL_GetTick>
 80043d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d4:	f7fe f8e6 	bl	80025a4 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e200      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80043e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d039      	beq.n	8004472 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01c      	beq.n	8004440 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a0c      	ldr	r2, [pc, #48]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800440c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004410:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004412:	f7fe f8c7 	bl	80025a4 <HAL_GetTick>
 8004416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800441a:	f7fe f8c3 	bl	80025a4 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e1dd      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x4d6>
 8004438:	e01b      	b.n	8004472 <HAL_RCC_OscConfig+0x52e>
 800443a:	bf00      	nop
 800443c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004440:	4b9b      	ldr	r3, [pc, #620]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a9a      	ldr	r2, [pc, #616]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800444a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800444c:	f7fe f8aa 	bl	80025a4 <HAL_GetTick>
 8004450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004454:	f7fe f8a6 	bl	80025a4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1c0      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004466:	4b92      	ldr	r3, [pc, #584]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8081 	beq.w	8004582 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004480:	4b8c      	ldr	r3, [pc, #560]	; (80046b4 <HAL_RCC_OscConfig+0x770>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a8b      	ldr	r2, [pc, #556]	; (80046b4 <HAL_RCC_OscConfig+0x770>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800448c:	f7fe f88a 	bl	80025a4 <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fe f886 	bl	80025a4 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	; 0x64
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e1a0      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a6:	4b83      	ldr	r3, [pc, #524]	; (80046b4 <HAL_RCC_OscConfig+0x770>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d106      	bne.n	80044c8 <HAL_RCC_OscConfig+0x584>
 80044ba:	4b7d      	ldr	r3, [pc, #500]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a7c      	ldr	r2, [pc, #496]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	e02d      	b.n	8004524 <HAL_RCC_OscConfig+0x5e0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x5a6>
 80044d0:	4b77      	ldr	r3, [pc, #476]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a76      	ldr	r2, [pc, #472]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b74      	ldr	r3, [pc, #464]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a73      	ldr	r2, [pc, #460]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	e01c      	b.n	8004524 <HAL_RCC_OscConfig+0x5e0>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x5c8>
 80044f2:	4b6f      	ldr	r3, [pc, #444]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	4a6e      	ldr	r2, [pc, #440]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044f8:	f043 0304 	orr.w	r3, r3, #4
 80044fc:	6713      	str	r3, [r2, #112]	; 0x70
 80044fe:	4b6c      	ldr	r3, [pc, #432]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a6b      	ldr	r2, [pc, #428]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0x5e0>
 800450c:	4b68      	ldr	r3, [pc, #416]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a67      	ldr	r2, [pc, #412]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
 8004518:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a64      	ldr	r2, [pc, #400]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d015      	beq.n	8004558 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fe f83a 	bl	80025a4 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fe f836 	bl	80025a4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e14e      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800454a:	4b59      	ldr	r3, [pc, #356]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ee      	beq.n	8004534 <HAL_RCC_OscConfig+0x5f0>
 8004556:	e014      	b.n	8004582 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fe f824 	bl	80025a4 <HAL_GetTick>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800455e:	e00a      	b.n	8004576 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f7fe f820 	bl	80025a4 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e138      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004576:	4b4e      	ldr	r3, [pc, #312]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ee      	bne.n	8004560 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 812d 	beq.w	80047e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800458c:	4b48      	ldr	r3, [pc, #288]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004594:	2b18      	cmp	r3, #24
 8004596:	f000 80bd 	beq.w	8004714 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	2b02      	cmp	r3, #2
 80045a0:	f040 809e 	bne.w	80046e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	4b42      	ldr	r3, [pc, #264]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a41      	ldr	r2, [pc, #260]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fff8 	bl	80025a4 <HAL_GetTick>
 80045b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd fff4 	bl	80025a4 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e10e      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d6:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <HAL_RCC_OscConfig+0x774>)
 80045dc:	4013      	ands	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045e6:	0112      	lsls	r2, r2, #4
 80045e8:	430a      	orrs	r2, r1
 80045ea:	4931      	ldr	r1, [pc, #196]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	628b      	str	r3, [r1, #40]	; 0x28
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	3b01      	subs	r3, #1
 80045f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	3b01      	subs	r3, #1
 8004600:	025b      	lsls	r3, r3, #9
 8004602:	b29b      	uxth	r3, r3
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	3b01      	subs	r3, #1
 800460c:	041b      	lsls	r3, r3, #16
 800460e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	3b01      	subs	r3, #1
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004620:	4923      	ldr	r1, [pc, #140]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004626:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004632:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004636:	4b21      	ldr	r3, [pc, #132]	; (80046bc <HAL_RCC_OscConfig+0x778>)
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800463e:	00d2      	lsls	r2, r2, #3
 8004640:	491b      	ldr	r1, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	f023 020c 	bic.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4917      	ldr	r1, [pc, #92]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004654:	4313      	orrs	r3, r2
 8004656:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	f023 0202 	bic.w	r2, r3, #2
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	4912      	ldr	r1, [pc, #72]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004676:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	4a0d      	ldr	r2, [pc, #52]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800467c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800468c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80046a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fd ff7d 	bl	80025a4 <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046ac:	e011      	b.n	80046d2 <HAL_RCC_OscConfig+0x78e>
 80046ae:	bf00      	nop
 80046b0:	58024400 	.word	0x58024400
 80046b4:	58024800 	.word	0x58024800
 80046b8:	fffffc0c 	.word	0xfffffc0c
 80046bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd ff70 	bl	80025a4 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e08a      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046d2:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x77c>
 80046de:	e082      	b.n	80047e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a42      	ldr	r2, [pc, #264]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd ff5a 	bl	80025a4 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fd ff56 	bl	80025a4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e070      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004706:	4b3a      	ldr	r3, [pc, #232]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x7b0>
 8004712:	e068      	b.n	80047e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004714:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800471a:	4b35      	ldr	r3, [pc, #212]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b01      	cmp	r3, #1
 8004726:	d031      	beq.n	800478c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d12a      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d122      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d11a      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	0a5b      	lsrs	r3, r3, #9
 800475a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d111      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d108      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	0e1b      	lsrs	r3, r3, #24
 800477e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e02b      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004790:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	08db      	lsrs	r3, r3, #3
 8004796:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800479a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d01f      	beq.n	80047e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047b2:	f7fd fef7 	bl	80025a4 <HAL_GetTick>
 80047b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80047b8:	bf00      	nop
 80047ba:	f7fd fef3 	bl	80025a4 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d0f9      	beq.n	80047ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_RCC_OscConfig+0x8b0>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047d2:	00d2      	lsls	r2, r2, #3
 80047d4:	4906      	ldr	r1, [pc, #24]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3730      	adds	r7, #48	; 0x30
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	58024400 	.word	0x58024400
 80047f4:	ffff0007 	.word	0xffff0007

080047f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e19c      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b8a      	ldr	r3, [pc, #552]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d910      	bls.n	800483c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b87      	ldr	r3, [pc, #540]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 020f 	bic.w	r2, r3, #15
 8004822:	4985      	ldr	r1, [pc, #532]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b83      	ldr	r3, [pc, #524]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e184      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	4b7b      	ldr	r3, [pc, #492]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004854:	429a      	cmp	r2, r3
 8004856:	d908      	bls.n	800486a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004858:	4b78      	ldr	r3, [pc, #480]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	4975      	ldr	r1, [pc, #468]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004866:	4313      	orrs	r3, r2
 8004868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	4b70      	ldr	r3, [pc, #448]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004882:	429a      	cmp	r2, r3
 8004884:	d908      	bls.n	8004898 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004886:	4b6d      	ldr	r3, [pc, #436]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	496a      	ldr	r1, [pc, #424]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004894:	4313      	orrs	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d010      	beq.n	80048c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	4b64      	ldr	r3, [pc, #400]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d908      	bls.n	80048c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048b4:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	495e      	ldr	r1, [pc, #376]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d010      	beq.n	80048f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048de:	429a      	cmp	r2, r3
 80048e0:	d908      	bls.n	80048f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80048e2:	4b56      	ldr	r3, [pc, #344]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	4953      	ldr	r1, [pc, #332]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	429a      	cmp	r2, r3
 800490e:	d908      	bls.n	8004922 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f023 020f 	bic.w	r2, r3, #15
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4947      	ldr	r1, [pc, #284]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800491e:	4313      	orrs	r3, r2
 8004920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d055      	beq.n	80049da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800492e:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	4940      	ldr	r1, [pc, #256]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800493c:	4313      	orrs	r3, r2
 800493e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d107      	bne.n	8004958 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004948:	4b3c      	ldr	r3, [pc, #240]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d121      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0f6      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b03      	cmp	r3, #3
 800495e:	d107      	bne.n	8004970 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004960:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d115      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0ea      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004978:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0de      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004988:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0d6      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004998:	4b28      	ldr	r3, [pc, #160]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f023 0207 	bic.w	r2, r3, #7
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4925      	ldr	r1, [pc, #148]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049aa:	f7fd fdfb 	bl	80025a4 <HAL_GetTick>
 80049ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b2:	f7fd fdf7 	bl	80025a4 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0be      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c8:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d1eb      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d010      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d208      	bcs.n	8004a08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f023 020f 	bic.w	r2, r3, #15
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	490e      	ldr	r1, [pc, #56]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d214      	bcs.n	8004a40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 020f 	bic.w	r2, r3, #15
 8004a1e:	4906      	ldr	r1, [pc, #24]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e086      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
 8004a38:	52002000 	.word	0x52002000
 8004a3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	4b3f      	ldr	r3, [pc, #252]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d208      	bcs.n	8004a6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a5c:	4b3c      	ldr	r3, [pc, #240]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	4939      	ldr	r1, [pc, #228]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d208      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	492e      	ldr	r1, [pc, #184]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d208      	bcs.n	8004aca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ab8:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	4922      	ldr	r1, [pc, #136]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d010      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d208      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4917      	ldr	r1, [pc, #92]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004af8:	f000 f89e 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	4912      	ldr	r1, [pc, #72]	; (8004b54 <HAL_RCC_ClockConfig+0x35c>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
 8004b14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <HAL_RCC_ClockConfig+0x35c>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2c:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <HAL_RCC_ClockConfig+0x360>)
 8004b2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <HAL_RCC_ClockConfig+0x364>)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <HAL_RCC_ClockConfig+0x368>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd fce8 	bl	8002510 <HAL_InitTick>
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	58024400 	.word	0x58024400
 8004b54:	0800e048 	.word	0x0800e048
 8004b58:	24000004 	.word	0x24000004
 8004b5c:	24000000 	.word	0x24000000
 8004b60:	24000024 	.word	0x24000024

08004b64 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d12a      	bne.n	8004bcc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8004b76:	4b2d      	ldr	r3, [pc, #180]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b7c:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b86:	4b29      	ldr	r3, [pc, #164]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004baa:	f107 031c 	add.w	r3, r7, #28
 8004bae:	4619      	mov	r1, r3
 8004bb0:	481f      	ldr	r0, [pc, #124]	; (8004c30 <HAL_RCC_MCOConfig+0xcc>)
 8004bb2:	f7fe f91b 	bl	8002dec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	4919      	ldr	r1, [pc, #100]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004bca:	e02a      	b.n	8004c22 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004bcc:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bd2:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004bd4:	f043 0304 	orr.w	r3, r3, #4
 8004bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004c00:	f107 031c 	add.w	r3, r7, #28
 8004c04:	4619      	mov	r1, r3
 8004c06:	480b      	ldr	r0, [pc, #44]	; (8004c34 <HAL_RCC_MCOConfig+0xd0>)
 8004c08:	f7fe f8f0 	bl	8002dec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	01d9      	lsls	r1, r3, #7
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	4903      	ldr	r1, [pc, #12]	; (8004c2c <HAL_RCC_MCOConfig+0xc8>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	610b      	str	r3, [r1, #16]
}
 8004c22:	bf00      	nop
 8004c24:	3730      	adds	r7, #48	; 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	58020000 	.word	0x58020000
 8004c34:	58020800 	.word	0x58020800

08004c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	; 0x24
 8004c3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c3e:	4bb3      	ldr	r3, [pc, #716]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c46:	2b18      	cmp	r3, #24
 8004c48:	f200 8155 	bhi.w	8004ef6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004cb9 	.word	0x08004cb9
 8004c58:	08004ef7 	.word	0x08004ef7
 8004c5c:	08004ef7 	.word	0x08004ef7
 8004c60:	08004ef7 	.word	0x08004ef7
 8004c64:	08004ef7 	.word	0x08004ef7
 8004c68:	08004ef7 	.word	0x08004ef7
 8004c6c:	08004ef7 	.word	0x08004ef7
 8004c70:	08004ef7 	.word	0x08004ef7
 8004c74:	08004cdf 	.word	0x08004cdf
 8004c78:	08004ef7 	.word	0x08004ef7
 8004c7c:	08004ef7 	.word	0x08004ef7
 8004c80:	08004ef7 	.word	0x08004ef7
 8004c84:	08004ef7 	.word	0x08004ef7
 8004c88:	08004ef7 	.word	0x08004ef7
 8004c8c:	08004ef7 	.word	0x08004ef7
 8004c90:	08004ef7 	.word	0x08004ef7
 8004c94:	08004ce5 	.word	0x08004ce5
 8004c98:	08004ef7 	.word	0x08004ef7
 8004c9c:	08004ef7 	.word	0x08004ef7
 8004ca0:	08004ef7 	.word	0x08004ef7
 8004ca4:	08004ef7 	.word	0x08004ef7
 8004ca8:	08004ef7 	.word	0x08004ef7
 8004cac:	08004ef7 	.word	0x08004ef7
 8004cb0:	08004ef7 	.word	0x08004ef7
 8004cb4:	08004ceb 	.word	0x08004ceb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cb8:	4b94      	ldr	r3, [pc, #592]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cc4:	4b91      	ldr	r3, [pc, #580]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	08db      	lsrs	r3, r3, #3
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	4a90      	ldr	r2, [pc, #576]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004cd6:	e111      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cd8:	4b8d      	ldr	r3, [pc, #564]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cda:	61bb      	str	r3, [r7, #24]
      break;
 8004cdc:	e10e      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004cde:	4b8d      	ldr	r3, [pc, #564]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ce0:	61bb      	str	r3, [r7, #24]
      break;
 8004ce2:	e10b      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ce4:	4b8c      	ldr	r3, [pc, #560]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ce6:	61bb      	str	r3, [r7, #24]
      break;
 8004ce8:	e108      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cea:	4b88      	ldr	r3, [pc, #544]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cf4:	4b85      	ldr	r3, [pc, #532]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d00:	4b82      	ldr	r3, [pc, #520]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d0a:	4b80      	ldr	r3, [pc, #512]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	08db      	lsrs	r3, r3, #3
 8004d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80e1 	beq.w	8004ef0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	f000 8083 	beq.w	8004e3c <HAL_RCC_GetSysClockFreq+0x204>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	f200 80a1 	bhi.w	8004e80 <HAL_RCC_GetSysClockFreq+0x248>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0x114>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d056      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d4a:	e099      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02d      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d58:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	08db      	lsrs	r3, r3, #3
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	4a6b      	ldr	r2, [pc, #428]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
 8004d68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	ee07 3a90 	vmov	s15, r3
 8004d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d82:	4b62      	ldr	r3, [pc, #392]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d96:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004db2:	e087      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc6:	4b51      	ldr	r3, [pc, #324]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dda:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004df6:	e065      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b40      	ldr	r3, [pc, #256]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e3a:	e043      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b2f      	ldr	r3, [pc, #188]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e7e:	e021      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e92:	4b1e      	ldr	r3, [pc, #120]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ea6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ec2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	0a5b      	lsrs	r3, r3, #9
 8004eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ece:	3301      	adds	r3, #1
 8004ed0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	ee07 3a90 	vmov	s15, r3
 8004ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee8:	ee17 3a90 	vmov	r3, s15
 8004eec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004eee:	e005      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
      break;
 8004ef4:	e002      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ef8:	61bb      	str	r3, [r7, #24]
      break;
 8004efa:	bf00      	nop
  }

  return sysclockfreq;
 8004efc:	69bb      	ldr	r3, [r7, #24]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3724      	adds	r7, #36	; 0x24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	58024400 	.word	0x58024400
 8004f10:	03d09000 	.word	0x03d09000
 8004f14:	003d0900 	.word	0x003d0900
 8004f18:	017d7840 	.word	0x017d7840
 8004f1c:	46000000 	.word	0x46000000
 8004f20:	4c742400 	.word	0x4c742400
 8004f24:	4a742400 	.word	0x4a742400
 8004f28:	4bbebc20 	.word	0x4bbebc20

08004f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f32:	f7ff fe81 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004f36:	4602      	mov	r2, r0
 8004f38:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	0a1b      	lsrs	r3, r3, #8
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	490f      	ldr	r1, [pc, #60]	; (8004f80 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f44:	5ccb      	ldrb	r3, [r1, r3]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f5a:	5cd3      	ldrb	r3, [r2, r3]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	fa22 f303 	lsr.w	r3, r2, r3
 8004f66:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f6a:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f72:	681b      	ldr	r3, [r3, #0]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	0800e048 	.word	0x0800e048
 8004f84:	24000004 	.word	0x24000004
 8004f88:	24000000 	.word	0x24000000

08004f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f90:	f7ff ffcc 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	4904      	ldr	r1, [pc, #16]	; (8004fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	0800e048 	.word	0x0800e048

08004fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004fbc:	f7ff ffb6 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4904      	ldr	r1, [pc, #16]	; (8004fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	58024400 	.word	0x58024400
 8004fe0:	0800e048 	.word	0x0800e048

08004fe4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe8:	b0cc      	sub	sp, #304	; 0x130
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005008:	2500      	movs	r5, #0
 800500a:	ea54 0305 	orrs.w	r3, r4, r5
 800500e:	d049      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005010:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005016:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800501a:	d02f      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800501c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005020:	d828      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005026:	d01a      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800502c:	d822      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005036:	d007      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005038:	e01c      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503a:	4bb8      	ldr	r3, [pc, #736]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	4ab7      	ldr	r2, [pc, #732]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005046:	e01a      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005048:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800504c:	3308      	adds	r3, #8
 800504e:	2102      	movs	r1, #2
 8005050:	4618      	mov	r0, r3
 8005052:	f002 fba1 	bl	8007798 <RCCEx_PLL2_Config>
 8005056:	4603      	mov	r3, r0
 8005058:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800505c:	e00f      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800505e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005062:	3328      	adds	r3, #40	; 0x28
 8005064:	2102      	movs	r1, #2
 8005066:	4618      	mov	r0, r3
 8005068:	f002 fc48 	bl	80078fc <RCCEx_PLL3_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005072:	e004      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800507a:	e000      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800507c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005086:	4ba5      	ldr	r3, [pc, #660]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800508e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005094:	4aa1      	ldr	r2, [pc, #644]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005096:	430b      	orrs	r3, r1
 8005098:	6513      	str	r3, [r2, #80]	; 0x50
 800509a:	e003      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80050b0:	f04f 0900 	mov.w	r9, #0
 80050b4:	ea58 0309 	orrs.w	r3, r8, r9
 80050b8:	d047      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80050ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d82a      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050e1 	.word	0x080050e1
 80050d0:	080050ef 	.word	0x080050ef
 80050d4:	08005105 	.word	0x08005105
 80050d8:	08005123 	.word	0x08005123
 80050dc:	08005123 	.word	0x08005123
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e0:	4b8e      	ldr	r3, [pc, #568]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	4a8d      	ldr	r2, [pc, #564]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050ec:	e01a      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050f2:	3308      	adds	r3, #8
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f002 fb4e 	bl	8007798 <RCCEx_PLL2_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005102:	e00f      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005104:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005108:	3328      	adds	r3, #40	; 0x28
 800510a:	2100      	movs	r1, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f002 fbf5 	bl	80078fc <RCCEx_PLL3_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005118:	e004      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005120:	e000      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005124:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800512c:	4b7b      	ldr	r3, [pc, #492]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800512e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005130:	f023 0107 	bic.w	r1, r3, #7
 8005134:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513a:	4a78      	ldr	r2, [pc, #480]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800513c:	430b      	orrs	r3, r1
 800513e:	6513      	str	r3, [r2, #80]	; 0x50
 8005140:	e003      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005142:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005146:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800514a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005156:	f04f 0b00 	mov.w	fp, #0
 800515a:	ea5a 030b 	orrs.w	r3, sl, fp
 800515e:	d04c      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005160:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d030      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800516c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005170:	d829      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005172:	2bc0      	cmp	r3, #192	; 0xc0
 8005174:	d02d      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005176:	2bc0      	cmp	r3, #192	; 0xc0
 8005178:	d825      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800517a:	2b80      	cmp	r3, #128	; 0x80
 800517c:	d018      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d821      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d007      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800518a:	e01c      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800518c:	4b63      	ldr	r3, [pc, #396]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	4a62      	ldr	r2, [pc, #392]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005198:	e01c      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800519a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800519e:	3308      	adds	r3, #8
 80051a0:	2100      	movs	r1, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	f002 faf8 	bl	8007798 <RCCEx_PLL2_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051ae:	e011      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051b4:	3328      	adds	r3, #40	; 0x28
 80051b6:	2100      	movs	r1, #0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f002 fb9f 	bl	80078fc <RCCEx_PLL3_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051c4:	e006      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80051cc:	e002      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051ce:	bf00      	nop
 80051d0:	e000      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051dc:	4b4f      	ldr	r3, [pc, #316]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80051e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	4a4c      	ldr	r2, [pc, #304]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6513      	str	r3, [r2, #80]	; 0x50
 80051f0:	e003      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005206:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800520a:	2300      	movs	r3, #0
 800520c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005210:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8005214:	460b      	mov	r3, r1
 8005216:	4313      	orrs	r3, r2
 8005218:	d053      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800521a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800521e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005222:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005226:	d035      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800522c:	d82e      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800522e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005232:	d031      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005234:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005238:	d828      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800523a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800523e:	d01a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005244:	d822      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800524a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800524e:	d007      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005250:	e01c      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005252:	4b32      	ldr	r3, [pc, #200]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	4a31      	ldr	r2, [pc, #196]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800525c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800525e:	e01c      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005260:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005264:	3308      	adds	r3, #8
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f002 fa95 	bl	8007798 <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005274:	e011      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005276:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800527a:	3328      	adds	r3, #40	; 0x28
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f002 fb3c 	bl	80078fc <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800528a:	e006      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005292:	e002      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10b      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80052a2:	4b1e      	ldr	r3, [pc, #120]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80052aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052b2:	4a1a      	ldr	r2, [pc, #104]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6593      	str	r3, [r2, #88]	; 0x58
 80052b8:	e003      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80052ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80052dc:	460b      	mov	r3, r1
 80052de:	4313      	orrs	r3, r2
 80052e0:	d056      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80052e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ee:	d038      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f4:	d831      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052fa:	d034      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80052fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005300:	d82b      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005306:	d01d      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800530c:	d825      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d006      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005312:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005318:	e01f      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005320:	4ba2      	ldr	r3, [pc, #648]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	4aa1      	ldr	r2, [pc, #644]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800532a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800532c:	e01c      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800532e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005332:	3308      	adds	r3, #8
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f002 fa2e 	bl	8007798 <RCCEx_PLL2_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005342:	e011      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005344:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005348:	3328      	adds	r3, #40	; 0x28
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f002 fad5 	bl	80078fc <RCCEx_PLL3_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005358:	e006      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005360:	e002      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005368:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005370:	4b8e      	ldr	r3, [pc, #568]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005378:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800537c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005380:	4a8a      	ldr	r2, [pc, #552]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005382:	430b      	orrs	r3, r1
 8005384:	6593      	str	r3, [r2, #88]	; 0x58
 8005386:	e003      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800538c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005390:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800539c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053a0:	2300      	movs	r3, #0
 80053a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053a6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80053aa:	460b      	mov	r3, r1
 80053ac:	4313      	orrs	r3, r2
 80053ae:	d03a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80053b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b6:	2b30      	cmp	r3, #48	; 0x30
 80053b8:	d01f      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80053ba:	2b30      	cmp	r3, #48	; 0x30
 80053bc:	d819      	bhi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d00c      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d815      	bhi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d019      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d111      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ce:	4b77      	ldr	r3, [pc, #476]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	4a76      	ldr	r2, [pc, #472]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053da:	e011      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053e0:	3308      	adds	r3, #8
 80053e2:	2102      	movs	r1, #2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 f9d7 	bl	8007798 <RCCEx_PLL2_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053f0:	e006      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80053f8:	e002      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053fa:	bf00      	nop
 80053fc:	e000      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005400:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005408:	4b68      	ldr	r3, [pc, #416]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800540a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005410:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	4a65      	ldr	r2, [pc, #404]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005418:	430b      	orrs	r3, r1
 800541a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800541c:	e003      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005422:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005426:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005432:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005436:	2300      	movs	r3, #0
 8005438:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800543c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005440:	460b      	mov	r3, r1
 8005442:	4313      	orrs	r3, r2
 8005444:	d051      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005446:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800544a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005450:	d035      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005456:	d82e      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005458:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800545c:	d031      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800545e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005462:	d828      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005468:	d01a      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800546a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546e:	d822      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005478:	d007      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800547a:	e01c      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800547c:	4b4b      	ldr	r3, [pc, #300]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	4a4a      	ldr	r2, [pc, #296]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005488:	e01c      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800548a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800548e:	3308      	adds	r3, #8
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f002 f980 	bl	8007798 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800549e:	e011      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054a4:	3328      	adds	r3, #40	; 0x28
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f002 fa27 	bl	80078fc <RCCEx_PLL3_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054b4:	e006      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80054bc:	e002      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054be:	bf00      	nop
 80054c0:	e000      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054cc:	4b37      	ldr	r3, [pc, #220]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80054d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054da:	4a34      	ldr	r2, [pc, #208]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6513      	str	r3, [r2, #80]	; 0x50
 80054e0:	e003      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80054e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80054f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054fa:	2300      	movs	r3, #0
 80054fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005500:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005504:	460b      	mov	r3, r1
 8005506:	4313      	orrs	r3, r2
 8005508:	d056      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800550a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800550e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005514:	d033      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800551a:	d82c      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800551c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005520:	d02f      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005522:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005526:	d826      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005528:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800552c:	d02b      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800552e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005532:	d820      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005538:	d012      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800553a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800553e:	d81a      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d022      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005548:	d115      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800554a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800554e:	3308      	adds	r3, #8
 8005550:	2101      	movs	r1, #1
 8005552:	4618      	mov	r0, r3
 8005554:	f002 f920 	bl	8007798 <RCCEx_PLL2_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800555e:	e015      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005560:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005564:	3328      	adds	r3, #40	; 0x28
 8005566:	2101      	movs	r1, #1
 8005568:	4618      	mov	r0, r3
 800556a:	f002 f9c7 	bl	80078fc <RCCEx_PLL3_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005574:	e00a      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800557c:	e006      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800557e:	bf00      	nop
 8005580:	e004      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005582:	bf00      	nop
 8005584:	e002      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800558a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10d      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005598:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800559c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a2:	4a02      	ldr	r2, [pc, #8]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6513      	str	r3, [r2, #80]	; 0x50
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80055aa:	bf00      	nop
 80055ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80055c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055ce:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80055d2:	460b      	mov	r3, r1
 80055d4:	4313      	orrs	r3, r2
 80055d6:	d055      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80055d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055e4:	d033      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80055e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ea:	d82c      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f0:	d02f      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f6:	d826      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055fc:	d02b      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80055fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005602:	d820      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005608:	d012      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800560a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560e:	d81a      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d022      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005618:	d115      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800561a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800561e:	3308      	adds	r3, #8
 8005620:	2101      	movs	r1, #1
 8005622:	4618      	mov	r0, r3
 8005624:	f002 f8b8 	bl	8007798 <RCCEx_PLL2_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800562e:	e015      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005630:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005634:	3328      	adds	r3, #40	; 0x28
 8005636:	2101      	movs	r1, #1
 8005638:	4618      	mov	r0, r3
 800563a:	f002 f95f 	bl	80078fc <RCCEx_PLL3_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005644:	e00a      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800564c:	e006      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800564e:	bf00      	nop
 8005650:	e004      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005652:	bf00      	nop
 8005654:	e002      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800565a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005664:	4bb6      	ldr	r3, [pc, #728]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005668:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800566c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005670:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005674:	4ab2      	ldr	r2, [pc, #712]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005676:	430b      	orrs	r3, r1
 8005678:	6593      	str	r3, [r2, #88]	; 0x58
 800567a:	e003      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005680:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005684:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800569a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800569e:	460b      	mov	r3, r1
 80056a0:	4313      	orrs	r3, r2
 80056a2:	d02a      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80056a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d011      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80056ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b2:	d10a      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056b8:	3308      	adds	r3, #8
 80056ba:	2101      	movs	r1, #1
 80056bc:	4618      	mov	r0, r3
 80056be:	f002 f86b 	bl	8007798 <RCCEx_PLL2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80056c8:	e004      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80056d0:	e000      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80056d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80056dc:	4b98      	ldr	r3, [pc, #608]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80056e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ea:	4a95      	ldr	r2, [pc, #596]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056ec:	430b      	orrs	r3, r1
 80056ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056f0:	e003      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800570a:	2300      	movs	r3, #0
 800570c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005710:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005714:	460b      	mov	r3, r1
 8005716:	4313      	orrs	r3, r2
 8005718:	d037      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800571a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800571e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005724:	d00e      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572a:	d816      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x776>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d018      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005734:	d111      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005736:	4b82      	ldr	r3, [pc, #520]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	4a81      	ldr	r2, [pc, #516]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800573c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005742:	e00f      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005748:	3308      	adds	r3, #8
 800574a:	2101      	movs	r1, #1
 800574c:	4618      	mov	r0, r3
 800574e:	f002 f823 	bl	8007798 <RCCEx_PLL2_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005758:	e004      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005760:	e000      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005764:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800576c:	4b74      	ldr	r3, [pc, #464]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800576e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005770:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577a:	4a71      	ldr	r2, [pc, #452]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800577c:	430b      	orrs	r3, r1
 800577e:	6513      	str	r3, [r2, #80]	; 0x50
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005786:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800578a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005796:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800579a:	2300      	movs	r3, #0
 800579c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80057a0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4313      	orrs	r3, r2
 80057a8:	d03a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80057aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d81d      	bhi.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80057b4:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	080057f9 	.word	0x080057f9
 80057c0:	080057cd 	.word	0x080057cd
 80057c4:	080057db 	.word	0x080057db
 80057c8:	080057f9 	.word	0x080057f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057cc:	4b5c      	ldr	r3, [pc, #368]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	4a5b      	ldr	r2, [pc, #364]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057d8:	e00f      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057de:	3308      	adds	r3, #8
 80057e0:	2102      	movs	r1, #2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 ffd8 	bl	8007798 <RCCEx_PLL2_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057ee:	e004      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80057f6:	e000      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80057f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005802:	4b4f      	ldr	r3, [pc, #316]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005806:	f023 0103 	bic.w	r1, r3, #3
 800580a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800580e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005810:	4a4b      	ldr	r2, [pc, #300]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005812:	430b      	orrs	r3, r1
 8005814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005816:	e003      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005818:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800581c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005820:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800582c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005830:	2300      	movs	r3, #0
 8005832:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005836:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800583a:	460b      	mov	r3, r1
 800583c:	4313      	orrs	r3, r2
 800583e:	f000 80a0 	beq.w	8005982 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005842:	4b40      	ldr	r3, [pc, #256]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3f      	ldr	r2, [pc, #252]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800584e:	f7fc fea9 	bl	80025a4 <HAL_GetTick>
 8005852:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005856:	e00b      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005858:	f7fc fea4 	bl	80025a4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b64      	cmp	r3, #100	; 0x64
 8005866:	d903      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800586e:	e005      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005870:	4b34      	ldr	r3, [pc, #208]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0ed      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800587c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005880:	2b00      	cmp	r3, #0
 8005882:	d17a      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005884:	4b2e      	ldr	r3, [pc, #184]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005888:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800588c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005890:	4053      	eors	r3, r2
 8005892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005896:	2b00      	cmp	r3, #0
 8005898:	d015      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800589a:	4b29      	ldr	r3, [pc, #164]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058a6:	4b26      	ldr	r3, [pc, #152]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	4a25      	ldr	r2, [pc, #148]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058b2:	4b23      	ldr	r3, [pc, #140]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	4a22      	ldr	r2, [pc, #136]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058bc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058be:	4a20      	ldr	r2, [pc, #128]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80058ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d2:	d118      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fc fe66 	bl	80025a4 <HAL_GetTick>
 80058d8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058dc:	e00d      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058de:	f7fc fe61 	bl	80025a4 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058e8:	1ad2      	subs	r2, r2, r3
 80058ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d903      	bls.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 80058f8:	e005      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0eb      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005906:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800590a:	2b00      	cmp	r3, #0
 800590c:	d130      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800590e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005912:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591e:	d115      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005928:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800592c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005930:	091a      	lsrs	r2, r3, #4
 8005932:	4b05      	ldr	r3, [pc, #20]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005934:	4013      	ands	r3, r2
 8005936:	4a02      	ldr	r2, [pc, #8]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005938:	430b      	orrs	r3, r1
 800593a:	6113      	str	r3, [r2, #16]
 800593c:	e00c      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800593e:	bf00      	nop
 8005940:	58024400 	.word	0x58024400
 8005944:	58024800 	.word	0x58024800
 8005948:	00ffffcf 	.word	0x00ffffcf
 800594c:	4bd4      	ldr	r3, [pc, #848]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	4ad3      	ldr	r2, [pc, #844]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005952:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005956:	6113      	str	r3, [r2, #16]
 8005958:	4bd1      	ldr	r3, [pc, #836]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800595a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800595c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005960:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005968:	4acd      	ldr	r2, [pc, #820]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800596a:	430b      	orrs	r3, r1
 800596c:	6713      	str	r3, [r2, #112]	; 0x70
 800596e:	e008      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005970:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005974:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005978:	e003      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800597e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005982:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f002 0301 	and.w	r3, r2, #1
 800598e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	f000 808b 	beq.w	8005aba <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80059a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ac:	2b28      	cmp	r3, #40	; 0x28
 80059ae:	d86b      	bhi.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	08005a91 	.word	0x08005a91
 80059bc:	08005a89 	.word	0x08005a89
 80059c0:	08005a89 	.word	0x08005a89
 80059c4:	08005a89 	.word	0x08005a89
 80059c8:	08005a89 	.word	0x08005a89
 80059cc:	08005a89 	.word	0x08005a89
 80059d0:	08005a89 	.word	0x08005a89
 80059d4:	08005a89 	.word	0x08005a89
 80059d8:	08005a5d 	.word	0x08005a5d
 80059dc:	08005a89 	.word	0x08005a89
 80059e0:	08005a89 	.word	0x08005a89
 80059e4:	08005a89 	.word	0x08005a89
 80059e8:	08005a89 	.word	0x08005a89
 80059ec:	08005a89 	.word	0x08005a89
 80059f0:	08005a89 	.word	0x08005a89
 80059f4:	08005a89 	.word	0x08005a89
 80059f8:	08005a73 	.word	0x08005a73
 80059fc:	08005a89 	.word	0x08005a89
 8005a00:	08005a89 	.word	0x08005a89
 8005a04:	08005a89 	.word	0x08005a89
 8005a08:	08005a89 	.word	0x08005a89
 8005a0c:	08005a89 	.word	0x08005a89
 8005a10:	08005a89 	.word	0x08005a89
 8005a14:	08005a89 	.word	0x08005a89
 8005a18:	08005a91 	.word	0x08005a91
 8005a1c:	08005a89 	.word	0x08005a89
 8005a20:	08005a89 	.word	0x08005a89
 8005a24:	08005a89 	.word	0x08005a89
 8005a28:	08005a89 	.word	0x08005a89
 8005a2c:	08005a89 	.word	0x08005a89
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a89 	.word	0x08005a89
 8005a38:	08005a91 	.word	0x08005a91
 8005a3c:	08005a89 	.word	0x08005a89
 8005a40:	08005a89 	.word	0x08005a89
 8005a44:	08005a89 	.word	0x08005a89
 8005a48:	08005a89 	.word	0x08005a89
 8005a4c:	08005a89 	.word	0x08005a89
 8005a50:	08005a89 	.word	0x08005a89
 8005a54:	08005a89 	.word	0x08005a89
 8005a58:	08005a91 	.word	0x08005a91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a60:	3308      	adds	r3, #8
 8005a62:	2101      	movs	r1, #1
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 fe97 	bl	8007798 <RCCEx_PLL2_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a70:	e00f      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a76:	3328      	adds	r3, #40	; 0x28
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 ff3e 	bl	80078fc <RCCEx_PLL3_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a86:	e004      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005a8e:	e000      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a9a:	4b81      	ldr	r3, [pc, #516]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005aa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aaa:	4a7d      	ldr	r2, [pc, #500]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6553      	str	r3, [r2, #84]	; 0x54
 8005ab0:	e003      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ab6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f002 0302 	and.w	r3, r2, #2
 8005ac6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005aca:	2300      	movs	r3, #0
 8005acc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ad0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	d042      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ada:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae0:	2b05      	cmp	r3, #5
 8005ae2:	d825      	bhi.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005ae4:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b39 	.word	0x08005b39
 8005af0:	08005b05 	.word	0x08005b05
 8005af4:	08005b1b 	.word	0x08005b1b
 8005af8:	08005b39 	.word	0x08005b39
 8005afc:	08005b39 	.word	0x08005b39
 8005b00:	08005b39 	.word	0x08005b39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b08:	3308      	adds	r3, #8
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 fe43 	bl	8007798 <RCCEx_PLL2_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b18:	e00f      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b1e:	3328      	adds	r3, #40	; 0x28
 8005b20:	2101      	movs	r1, #1
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 feea 	bl	80078fc <RCCEx_PLL3_Config>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b2e:	e004      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005b36:	e000      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b42:	4b57      	ldr	r3, [pc, #348]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b46:	f023 0107 	bic.w	r1, r3, #7
 8005b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b50:	4a53      	ldr	r2, [pc, #332]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	6553      	str	r3, [r2, #84]	; 0x54
 8005b56:	e003      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b5c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f002 0304 	and.w	r3, r2, #4
 8005b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	d044      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b88:	2b05      	cmp	r3, #5
 8005b8a:	d825      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005be1 	.word	0x08005be1
 8005b98:	08005bad 	.word	0x08005bad
 8005b9c:	08005bc3 	.word	0x08005bc3
 8005ba0:	08005be1 	.word	0x08005be1
 8005ba4:	08005be1 	.word	0x08005be1
 8005ba8:	08005be1 	.word	0x08005be1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 fdef 	bl	8007798 <RCCEx_PLL2_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bc0:	e00f      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bc6:	3328      	adds	r3, #40	; 0x28
 8005bc8:	2101      	movs	r1, #1
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 fe96 	bl	80078fc <RCCEx_PLL3_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bd6:	e004      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005bde:	e000      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bea:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	f023 0107 	bic.w	r1, r3, #7
 8005bf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bfa:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8005c00:	e003      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c06:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f002 0320 	and.w	r3, r2, #32
 8005c16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c24:	460b      	mov	r3, r1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	d057      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c36:	d035      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c3c:	d82c      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d031      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d826      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c4e:	d02d      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005c50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c54:	d820      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c5a:	d012      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c60:	d81a      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d024      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6a:	d115      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c70:	3308      	adds	r3, #8
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 fd8f 	bl	8007798 <RCCEx_PLL2_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c80:	e017      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c86:	3328      	adds	r3, #40	; 0x28
 8005c88:	2102      	movs	r1, #2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 fe36 	bl	80078fc <RCCEx_PLL3_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c96:	e00c      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005ca0:	58024400 	.word	0x58024400
        break;
 8005ca4:	bf00      	nop
 8005ca6:	e004      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ca8:	bf00      	nop
 8005caa:	e002      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005cac:	bf00      	nop
 8005cae:	e000      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10b      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cba:	4bc2      	ldr	r3, [pc, #776]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cca:	4abe      	ldr	r2, [pc, #760]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6553      	str	r3, [r2, #84]	; 0x54
 8005cd0:	e003      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005cd6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cf0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d055      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d06:	d033      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005d08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d0c:	d82c      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d12:	d02f      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d826      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d1e:	d02b      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005d20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d24:	d820      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2a:	d012      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d30:	d81a      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d022      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3a:	d115      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d40:	3308      	adds	r3, #8
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 fd27 	bl	8007798 <RCCEx_PLL2_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d50:	e015      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d56:	3328      	adds	r3, #40	; 0x28
 8005d58:	2102      	movs	r1, #2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 fdce 	bl	80078fc <RCCEx_PLL3_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d66:	e00a      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005d6e:	e006      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005d70:	bf00      	nop
 8005d72:	e004      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005d74:	bf00      	nop
 8005d76:	e002      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005d78:	bf00      	nop
 8005d7a:	e000      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d7e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d86:	4b8f      	ldr	r3, [pc, #572]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005d8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d96:	4a8b      	ldr	r2, [pc, #556]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d9c:	e003      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005da2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005db2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005db6:	2300      	movs	r3, #0
 8005db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dbc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	d055      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dd2:	d033      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005dd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dd8:	d82c      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dde:	d02f      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de4:	d826      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005de6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dea:	d02b      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005dec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005df0:	d820      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005df6:	d012      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dfc:	d81a      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d022      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e06:	d115      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fcc1 	bl	8007798 <RCCEx_PLL2_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e1c:	e015      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e22:	3328      	adds	r3, #40	; 0x28
 8005e24:	2102      	movs	r1, #2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fd68 	bl	80078fc <RCCEx_PLL3_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e32:	e00a      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005e3a:	e006      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e3c:	bf00      	nop
 8005e3e:	e004      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e40:	bf00      	nop
 8005e42:	e002      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e44:	bf00      	nop
 8005e46:	e000      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e52:	4b5c      	ldr	r3, [pc, #368]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e56:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e62:	4a58      	ldr	r2, [pc, #352]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e64:	430b      	orrs	r3, r1
 8005e66:	6593      	str	r3, [r2, #88]	; 0x58
 8005e68:	e003      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e6e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f002 0308 	and.w	r3, r2, #8
 8005e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e82:	2300      	movs	r3, #0
 8005e84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e88:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	d01e      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	d10c      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ea4:	3328      	adds	r3, #40	; 0x28
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fd27 	bl	80078fc <RCCEx_PLL3_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005eba:	4b42      	ldr	r3, [pc, #264]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eca:	4a3e      	ldr	r2, [pc, #248]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f002 0310 	and.w	r3, r2, #16
 8005edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ee6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005eea:	460b      	mov	r3, r1
 8005eec:	4313      	orrs	r3, r2
 8005eee:	d01e      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efc:	d10c      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f02:	3328      	adds	r3, #40	; 0x28
 8005f04:	2102      	movs	r1, #2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 fcf8 	bl	80078fc <RCCEx_PLL3_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f18:	4b2a      	ldr	r3, [pc, #168]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f28:	4a26      	ldr	r2, [pc, #152]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005f3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f44:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	d040      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f5a:	d022      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f60:	d81b      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6a:	d00b      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005f6c:	e015      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f72:	3308      	adds	r3, #8
 8005f74:	2100      	movs	r1, #0
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 fc0e 	bl	8007798 <RCCEx_PLL2_Config>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f82:	e00f      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f88:	3328      	adds	r3, #40	; 0x28
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fcb5 	bl	80078fc <RCCEx_PLL3_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f98:	e004      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10d      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005fbc:	4a01      	ldr	r2, [pc, #4]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8005fc2:	e005      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005fc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fcc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fde:	2300      	movs	r3, #0
 8005fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fe2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d03b      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ff8:	d01f      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005ffa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ffe:	d818      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006004:	d003      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800600a:	d007      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800600c:	e011      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600e:	4b64      	ldr	r3, [pc, #400]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	4a63      	ldr	r2, [pc, #396]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800601a:	e00f      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800601c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006020:	3328      	adds	r3, #40	; 0x28
 8006022:	2101      	movs	r1, #1
 8006024:	4618      	mov	r0, r3
 8006026:	f001 fc69 	bl	80078fc <RCCEx_PLL3_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006030:	e004      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006038:	e000      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800603a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006044:	4b56      	ldr	r3, [pc, #344]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006048:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800604c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006054:	4a52      	ldr	r2, [pc, #328]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006056:	430b      	orrs	r3, r1
 8006058:	6553      	str	r3, [r2, #84]	; 0x54
 800605a:	e003      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006060:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006064:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006070:	673b      	str	r3, [r7, #112]	; 0x70
 8006072:	2300      	movs	r3, #0
 8006074:	677b      	str	r3, [r7, #116]	; 0x74
 8006076:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800607a:	460b      	mov	r3, r1
 800607c:	4313      	orrs	r3, r2
 800607e:	d031      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006080:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800608a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608e:	d007      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006090:	e011      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006092:	4b43      	ldr	r3, [pc, #268]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	4a42      	ldr	r2, [pc, #264]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800609e:	e00e      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060a4:	3308      	adds	r3, #8
 80060a6:	2102      	movs	r1, #2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fb75 	bl	8007798 <RCCEx_PLL2_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060b4:	e003      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80060bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060c6:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d4:	4a32      	ldr	r2, [pc, #200]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060d6:	430b      	orrs	r3, r1
 80060d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060e0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80060f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060f2:	2300      	movs	r3, #0
 80060f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80060fa:	460b      	mov	r3, r1
 80060fc:	4313      	orrs	r3, r2
 80060fe:	d00c      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006100:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006104:	3328      	adds	r3, #40	; 0x28
 8006106:	2102      	movs	r1, #2
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fbf7 	bl	80078fc <RCCEx_PLL3_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800611a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006126:	663b      	str	r3, [r7, #96]	; 0x60
 8006128:	2300      	movs	r3, #0
 800612a:	667b      	str	r3, [r7, #100]	; 0x64
 800612c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d03a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006136:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800613a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006142:	d018      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006148:	d811      	bhi.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800614a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614e:	d014      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006154:	d80b      	bhi.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d011      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800615a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800615e:	d106      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	4a0e      	ldr	r2, [pc, #56]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800616c:	e008      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006174:	e004      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006176:	bf00      	nop
 8006178:	e002      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800617a:	bf00      	nop
 800617c:	e000      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800617e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006180:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10d      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006190:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006198:	4a01      	ldr	r2, [pc, #4]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800619a:	430b      	orrs	r3, r1
 800619c:	6553      	str	r3, [r2, #84]	; 0x54
 800619e:	e005      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80061a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061a8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80061b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80061ba:	2300      	movs	r3, #0
 80061bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80061c2:	460b      	mov	r3, r1
 80061c4:	4313      	orrs	r3, r2
 80061c6:	d009      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061c8:	4baa      	ldr	r3, [pc, #680]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80061d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d6:	4aa7      	ldr	r2, [pc, #668]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061d8:	430b      	orrs	r3, r1
 80061da:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80061dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80061e8:	653b      	str	r3, [r7, #80]	; 0x50
 80061ea:	2300      	movs	r3, #0
 80061ec:	657b      	str	r3, [r7, #84]	; 0x54
 80061ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d00a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80061f8:	4b9e      	ldr	r3, [pc, #632]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006200:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006204:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006208:	4a9a      	ldr	r2, [pc, #616]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800620a:	430b      	orrs	r3, r1
 800620c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800620e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800621a:	64bb      	str	r3, [r7, #72]	; 0x48
 800621c:	2300      	movs	r3, #0
 800621e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006220:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d009      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800622a:	4b92      	ldr	r3, [pc, #584]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006232:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	4a8e      	ldr	r2, [pc, #568]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800623a:	430b      	orrs	r3, r1
 800623c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800623e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800624a:	643b      	str	r3, [r7, #64]	; 0x40
 800624c:	2300      	movs	r3, #0
 800624e:	647b      	str	r3, [r7, #68]	; 0x44
 8006250:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006254:	460b      	mov	r3, r1
 8006256:	4313      	orrs	r3, r2
 8006258:	d00e      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800625a:	4b86      	ldr	r3, [pc, #536]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	4a85      	ldr	r2, [pc, #532]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006264:	6113      	str	r3, [r2, #16]
 8006266:	4b83      	ldr	r3, [pc, #524]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006268:	6919      	ldr	r1, [r3, #16]
 800626a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800626e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006272:	4a80      	ldr	r2, [pc, #512]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006274:	430b      	orrs	r3, r1
 8006276:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006278:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006284:	63bb      	str	r3, [r7, #56]	; 0x38
 8006286:	2300      	movs	r3, #0
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800628a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800628e:	460b      	mov	r3, r1
 8006290:	4313      	orrs	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006294:	4b77      	ldr	r3, [pc, #476]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006298:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800629c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a2:	4a74      	ldr	r2, [pc, #464]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062a4:	430b      	orrs	r3, r1
 80062a6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
 80062b6:	2300      	movs	r3, #0
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80062be:	460b      	mov	r3, r1
 80062c0:	4313      	orrs	r3, r2
 80062c2:	d00a      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062c4:	4b6b      	ldr	r3, [pc, #428]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80062cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d4:	4a67      	ldr	r2, [pc, #412]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062d6:	430b      	orrs	r3, r1
 80062d8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80062da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	2100      	movs	r1, #0
 80062e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80062f0:	460b      	mov	r3, r1
 80062f2:	4313      	orrs	r3, r2
 80062f4:	d011      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062fa:	3308      	adds	r3, #8
 80062fc:	2100      	movs	r1, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 fa4a 	bl	8007798 <RCCEx_PLL2_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800630a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006312:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006316:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800631a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	2100      	movs	r1, #0
 8006324:	6239      	str	r1, [r7, #32]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d011      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006336:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800633a:	3308      	adds	r3, #8
 800633c:	2101      	movs	r1, #1
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fa2a 	bl	8007798 <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800634a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006356:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800635a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	2100      	movs	r1, #0
 8006364:	61b9      	str	r1, [r7, #24]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006370:	460b      	mov	r3, r1
 8006372:	4313      	orrs	r3, r2
 8006374:	d011      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006376:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800637a:	3308      	adds	r3, #8
 800637c:	2102      	movs	r1, #2
 800637e:	4618      	mov	r0, r3
 8006380:	f001 fa0a 	bl	8007798 <RCCEx_PLL2_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800638a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006392:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006396:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800639a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	2100      	movs	r1, #0
 80063a4:	6139      	str	r1, [r7, #16]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063b0:	460b      	mov	r3, r1
 80063b2:	4313      	orrs	r3, r2
 80063b4:	d011      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063ba:	3328      	adds	r3, #40	; 0x28
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 fa9c 	bl	80078fc <RCCEx_PLL3_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80063ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80063d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80063da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	2100      	movs	r1, #0
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80063f0:	460b      	mov	r3, r1
 80063f2:	4313      	orrs	r3, r2
 80063f4:	d011      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063fa:	3328      	adds	r3, #40	; 0x28
 80063fc:	2101      	movs	r1, #1
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 fa7c 	bl	80078fc <RCCEx_PLL3_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800640a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006412:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006416:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800641a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	2100      	movs	r1, #0
 8006424:	6039      	str	r1, [r7, #0]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006430:	460b      	mov	r3, r1
 8006432:	4313      	orrs	r3, r2
 8006434:	d011      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006436:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800643a:	3328      	adds	r3, #40	; 0x28
 800643c:	2102      	movs	r1, #2
 800643e:	4618      	mov	r0, r3
 8006440:	f001 fa5c 	bl	80078fc <RCCEx_PLL3_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800644a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006452:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006456:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800645a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
}
 8006468:	4618      	mov	r0, r3
 800646a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800646e:	46bd      	mov	sp, r7
 8006470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006474:	58024400 	.word	0x58024400

08006478 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b090      	sub	sp, #64	; 0x40
 800647c:	af00      	add	r7, sp, #0
 800647e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006486:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800648a:	430b      	orrs	r3, r1
 800648c:	f040 8094 	bne.w	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006490:	4b9e      	ldr	r3, [pc, #632]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	2b04      	cmp	r3, #4
 800649e:	f200 8087 	bhi.w	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064bd 	.word	0x080064bd
 80064ac:	080064e5 	.word	0x080064e5
 80064b0:	0800650d 	.word	0x0800650d
 80064b4:	080065a9 	.word	0x080065a9
 80064b8:	08006535 	.word	0x08006535
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064bc:	4b93      	ldr	r3, [pc, #588]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064c8:	d108      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 f810 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064d8:	f000 bd45 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e0:	f000 bd41 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064e4:	4b89      	ldr	r3, [pc, #548]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064f0:	d108      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064f2:	f107 0318 	add.w	r3, r7, #24
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fd54 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006500:	f000 bd31 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006508:	f000 bd2d 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800650c:	4b7f      	ldr	r3, [pc, #508]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006518:	d108      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800651a:	f107 030c 	add.w	r3, r7, #12
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fe94 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006528:	f000 bd1d 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006530:	f000 bd19 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006534:	4b75      	ldr	r3, [pc, #468]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800653c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800653e:	4b73      	ldr	r3, [pc, #460]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b04      	cmp	r3, #4
 8006548:	d10c      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006550:	4b6e      	ldr	r3, [pc, #440]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	08db      	lsrs	r3, r3, #3
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	4a6d      	ldr	r2, [pc, #436]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006562:	e01f      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006564:	4b69      	ldr	r3, [pc, #420]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006570:	d106      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006578:	d102      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800657a:	4b66      	ldr	r3, [pc, #408]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657e:	e011      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006580:	4b62      	ldr	r3, [pc, #392]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800658c:	d106      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006594:	d102      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006596:	4b60      	ldr	r3, [pc, #384]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800659a:	e003      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80065a0:	f000 bce1 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065a4:	f000 bcdf 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065a8:	4b5c      	ldr	r3, [pc, #368]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ac:	f000 bcdb 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065b4:	f000 bcd7 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80065b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065bc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80065c0:	430b      	orrs	r3, r1
 80065c2:	f040 80ad 	bne.w	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80065c6:	4b51      	ldr	r3, [pc, #324]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80065ce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d6:	d056      	beq.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065de:	f200 8090 	bhi.w	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	2bc0      	cmp	r3, #192	; 0xc0
 80065e6:	f000 8088 	beq.w	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	2bc0      	cmp	r3, #192	; 0xc0
 80065ee:	f200 8088 	bhi.w	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	2b80      	cmp	r3, #128	; 0x80
 80065f6:	d032      	beq.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2b80      	cmp	r3, #128	; 0x80
 80065fc:	f200 8081 	bhi.w	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	2b40      	cmp	r3, #64	; 0x40
 800660a:	d014      	beq.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800660c:	e079      	b.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800660e:	4b3f      	ldr	r3, [pc, #252]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800661a:	d108      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800661c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006620:	4618      	mov	r0, r3
 8006622:	f000 ff67 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800662a:	f000 bc9c 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006632:	f000 bc98 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006636:	4b35      	ldr	r3, [pc, #212]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800663e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006642:	d108      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006644:	f107 0318 	add.w	r3, r7, #24
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fcab 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006652:	f000 bc88 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800665a:	f000 bc84 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800665e:	4b2b      	ldr	r3, [pc, #172]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666a:	d108      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800666c:	f107 030c 	add.w	r3, r7, #12
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fdeb 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800667a:	f000 bc74 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006682:	f000 bc70 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006686:	4b21      	ldr	r3, [pc, #132]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800668e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006690:	4b1e      	ldr	r3, [pc, #120]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b04      	cmp	r3, #4
 800669a:	d10c      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066a2:	4b1a      	ldr	r3, [pc, #104]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066ae:	fa22 f303 	lsr.w	r3, r2, r3
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b4:	e01f      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066b6:	4b15      	ldr	r3, [pc, #84]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c2:	d106      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ca:	d102      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066cc:	4b11      	ldr	r3, [pc, #68]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d0:	e011      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066d2:	4b0e      	ldr	r3, [pc, #56]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066de:	d106      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066e6:	d102      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066e8:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80066ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ec:	e003      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80066f2:	f000 bc38 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066f6:	f000 bc36 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066fe:	f000 bc32 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006706:	f000 bc2e 	b.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800670a:	bf00      	nop
 800670c:	58024400 	.word	0x58024400
 8006710:	03d09000 	.word	0x03d09000
 8006714:	003d0900 	.word	0x003d0900
 8006718:	017d7840 	.word	0x017d7840
 800671c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006724:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006728:	430b      	orrs	r3, r1
 800672a:	f040 809c 	bne.w	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800672e:	4b9e      	ldr	r3, [pc, #632]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006732:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006736:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800673e:	d054      	beq.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006746:	f200 808b 	bhi.w	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006750:	f000 8083 	beq.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800675a:	f200 8081 	bhi.w	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006764:	d02f      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800676c:	d878      	bhi.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800677a:	d012      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800677c:	e070      	b.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800677e:	4b8a      	ldr	r3, [pc, #552]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800678a:	d107      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800678c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006790:	4618      	mov	r0, r3
 8006792:	f000 feaf 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800679a:	e3e4      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a0:	e3e1      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067a2:	4b81      	ldr	r3, [pc, #516]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ae:	d107      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067b0:	f107 0318 	add.w	r3, r7, #24
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fbf5 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067be:	e3d2      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c4:	e3cf      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067c6:	4b78      	ldr	r3, [pc, #480]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d2:	d107      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067d4:	f107 030c 	add.w	r3, r7, #12
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fd37 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067e2:	e3c0      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e8:	e3bd      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067ea:	4b6f      	ldr	r3, [pc, #444]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067f4:	4b6c      	ldr	r3, [pc, #432]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d10c      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006806:	4b68      	ldr	r3, [pc, #416]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	08db      	lsrs	r3, r3, #3
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	4a66      	ldr	r2, [pc, #408]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006812:	fa22 f303 	lsr.w	r3, r2, r3
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006818:	e01e      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800681a:	4b63      	ldr	r3, [pc, #396]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006826:	d106      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800682e:	d102      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006830:	4b5f      	ldr	r3, [pc, #380]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006834:	e010      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006836:	4b5c      	ldr	r3, [pc, #368]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006842:	d106      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800684a:	d102      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800684c:	4b59      	ldr	r3, [pc, #356]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006850:	e002      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006856:	e386      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006858:	e385      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800685a:	4b57      	ldr	r3, [pc, #348]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800685e:	e382      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006864:	e37f      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800686a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800686e:	430b      	orrs	r3, r1
 8006870:	f040 80a7 	bne.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006874:	4b4c      	ldr	r3, [pc, #304]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006878:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800687c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006884:	d055      	beq.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800688c:	f200 8096 	bhi.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006896:	f000 8084 	beq.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068a0:	f200 808c 	bhi.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068aa:	d030      	beq.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068b2:	f200 8083 	bhi.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d004      	beq.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068c2:	d012      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80068c4:	e07a      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068c6:	4b38      	ldr	r3, [pc, #224]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d2:	d107      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fe0b 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e2:	e340      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068e8:	e33d      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068ea:	4b2f      	ldr	r3, [pc, #188]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068f6:	d107      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068f8:	f107 0318 	add.w	r3, r7, #24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fb51 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006906:	e32e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800690c:	e32b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800690e:	4b26      	ldr	r3, [pc, #152]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800691a:	d107      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800691c:	f107 030c 	add.w	r3, r7, #12
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fc93 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800692a:	e31c      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006930:	e319      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006932:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800693a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800693c:	4b1a      	ldr	r3, [pc, #104]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b04      	cmp	r3, #4
 8006946:	d10c      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694a:	2b00      	cmp	r3, #0
 800694c:	d109      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800694e:	4b16      	ldr	r3, [pc, #88]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	08db      	lsrs	r3, r3, #3
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	4a14      	ldr	r2, [pc, #80]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800695a:	fa22 f303 	lsr.w	r3, r2, r3
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006960:	e01e      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006962:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696e:	d106      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006976:	d102      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006978:	4b0d      	ldr	r3, [pc, #52]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800697c:	e010      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800698a:	d106      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006992:	d102      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006994:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006998:	e002      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800699e:	e2e2      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069a0:	e2e1      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069a2:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a6:	e2de      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069a8:	58024400 	.word	0x58024400
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	003d0900 	.word	0x003d0900
 80069b4:	017d7840 	.word	0x017d7840
 80069b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c0:	e2d1      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80069c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80069ca:	430b      	orrs	r3, r1
 80069cc:	f040 809c 	bne.w	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80069d0:	4b93      	ldr	r3, [pc, #588]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80069d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e0:	d054      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e8:	f200 808b 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069f2:	f000 8083 	beq.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069fc:	f200 8081 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a06:	d02f      	beq.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a0e:	d878      	bhi.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d004      	beq.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1c:	d012      	beq.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a1e:	e070      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a20:	4b7f      	ldr	r3, [pc, #508]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a2c:	d107      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fd5e 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a3c:	e293      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a42:	e290      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a44:	4b76      	ldr	r3, [pc, #472]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a50:	d107      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a52:	f107 0318 	add.w	r3, r7, #24
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 faa4 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a60:	e281      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a66:	e27e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a68:	4b6d      	ldr	r3, [pc, #436]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a74:	d107      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a76:	f107 030c 	add.w	r3, r7, #12
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fbe6 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a84:	e26f      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a8a:	e26c      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a8c:	4b64      	ldr	r3, [pc, #400]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a96:	4b62      	ldr	r3, [pc, #392]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d109      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aa8:	4b5d      	ldr	r3, [pc, #372]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	08db      	lsrs	r3, r3, #3
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	4a5c      	ldr	r2, [pc, #368]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aba:	e01e      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006abc:	4b58      	ldr	r3, [pc, #352]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac8:	d106      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad0:	d102      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ad2:	4b55      	ldr	r3, [pc, #340]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad6:	e010      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ad8:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aec:	d102      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006aee:	4b4f      	ldr	r3, [pc, #316]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af2:	e002      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006af8:	e235      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006afa:	e234      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006afc:	4b4c      	ldr	r3, [pc, #304]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b00:	e231      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b06:	e22e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006b10:	430b      	orrs	r3, r1
 8006b12:	f040 808f 	bne.w	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006b16:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006b1e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b26:	d06b      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b2e:	d874      	bhi.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b36:	d056      	beq.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b3e:	d86c      	bhi.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b46:	d03b      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b4e:	d864      	bhi.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b56:	d021      	beq.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b5e:	d85c      	bhi.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d004      	beq.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6c:	d004      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006b6e:	e054      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006b70:	f7fe fa0c 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8006b74:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b76:	e1f6      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b78:	4b29      	ldr	r3, [pc, #164]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b84:	d107      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b86:	f107 0318 	add.w	r3, r7, #24
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fa0a 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b94:	e1e7      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b9a:	e1e4      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b9c:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006baa:	f107 030c 	add.w	r3, r7, #12
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fb4c 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bb8:	e1d5      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bbe:	e1d2      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bc0:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d109      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bcc:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	08db      	lsrs	r3, r3, #3
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	4a13      	ldr	r2, [pc, #76]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bde:	e1c2      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be4:	e1bf      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006be6:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf2:	d102      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf8:	e1b5      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bfe:	e1b2      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c00:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0c:	d102      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006c0e:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c12:	e1a8      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c18:	e1a5      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c1e:	e1a2      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c20:	58024400 	.word	0x58024400
 8006c24:	03d09000 	.word	0x03d09000
 8006c28:	003d0900 	.word	0x003d0900
 8006c2c:	017d7840 	.word	0x017d7840
 8006c30:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c38:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	d173      	bne.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c40:	4b9c      	ldr	r3, [pc, #624]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c50:	d02f      	beq.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c58:	d863      	bhi.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c66:	d012      	beq.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006c68:	e05b      	b.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c6a:	4b92      	ldr	r3, [pc, #584]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c76:	d107      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c78:	f107 0318 	add.w	r3, r7, #24
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 f991 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c86:	e16e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c8c:	e16b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c8e:	4b89      	ldr	r3, [pc, #548]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9a:	d107      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c9c:	f107 030c 	add.w	r3, r7, #12
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fad3 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006caa:	e15c      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb0:	e159      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cb2:	4b80      	ldr	r3, [pc, #512]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cbc:	4b7d      	ldr	r3, [pc, #500]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d10c      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cce:	4b79      	ldr	r3, [pc, #484]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	08db      	lsrs	r3, r3, #3
 8006cd4:	f003 0303 	and.w	r3, r3, #3
 8006cd8:	4a77      	ldr	r2, [pc, #476]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006cda:	fa22 f303 	lsr.w	r3, r2, r3
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce0:	e01e      	b.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ce2:	4b74      	ldr	r3, [pc, #464]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cee:	d106      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf6:	d102      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cf8:	4b70      	ldr	r3, [pc, #448]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cfc:	e010      	b.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cfe:	4b6d      	ldr	r3, [pc, #436]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d0a:	d106      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d12:	d102      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d14:	4b6a      	ldr	r3, [pc, #424]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d18:	e002      	b.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d1e:	e122      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d20:	e121      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d26:	e11e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d2c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006d30:	430b      	orrs	r3, r1
 8006d32:	d133      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d34:	4b5f      	ldr	r3, [pc, #380]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d3c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d004      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d4a:	d012      	beq.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006d4c:	e023      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d4e:	4b59      	ldr	r3, [pc, #356]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d5a:	d107      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fbc7 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d6a:	e0fc      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d70:	e0f9      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d72:	4b50      	ldr	r3, [pc, #320]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d7e:	d107      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d80:	f107 0318 	add.w	r3, r7, #24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 f90d 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d8e:	e0ea      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d94:	e0e7      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9a:	e0e4      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006da4:	430b      	orrs	r3, r1
 8006da6:	f040 808d 	bne.w	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006daa:	4b42      	ldr	r3, [pc, #264]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006db2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dba:	d06b      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dc2:	d874      	bhi.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dca:	d056      	beq.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd2:	d86c      	bhi.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dda:	d03b      	beq.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006de2:	d864      	bhi.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dea:	d021      	beq.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df2:	d85c      	bhi.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e00:	d004      	beq.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006e02:	e054      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e04:	f000 f8b8 	bl	8006f78 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e08:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e0a:	e0ac      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e0c:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e18:	d107      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e1a:	f107 0318 	add.w	r3, r7, #24
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f8c0 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e28:	e09d      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e2e:	e09a      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e30:	4b20      	ldr	r3, [pc, #128]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e3c:	d107      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e3e:	f107 030c 	add.w	r3, r7, #12
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fa02 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e4c:	e08b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e52:	e088      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e54:	4b17      	ldr	r3, [pc, #92]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d109      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e60:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e72:	e078      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e78:	e075      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e7a:	4b0e      	ldr	r3, [pc, #56]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e86:	d102      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006e88:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8c:	e06b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e92:	e068      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea0:	d102      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006ea2:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea6:	e05e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eac:	e05b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb2:	e058      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006eb4:	58024400 	.word	0x58024400
 8006eb8:	03d09000 	.word	0x03d09000
 8006ebc:	003d0900 	.word	0x003d0900
 8006ec0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	d148      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ed0:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ed8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee0:	d02a      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee8:	d838      	bhi.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef6:	d00d      	beq.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006ef8:	e030      	b.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006efa:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f06:	d102      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006f08:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f0c:	e02b      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f12:	e028      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f14:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f20:	d107      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fae4 	bl	80074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f30:	e019      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f36:	e016      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f44:	d107      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f46:	f107 0318 	add.w	r3, r7, #24
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 f82a 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f54:	e007      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f5a:	e004      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f60:	e001      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3740      	adds	r7, #64	; 0x40
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	58024400 	.word	0x58024400
 8006f74:	017d7840 	.word	0x017d7840

08006f78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f7c:	f7fd ffd6 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8006f80:	4602      	mov	r2, r0
 8006f82:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	091b      	lsrs	r3, r3, #4
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	4904      	ldr	r1, [pc, #16]	; (8006fa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f8e:	5ccb      	ldrb	r3, [r1, r3]
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	58024400 	.word	0x58024400
 8006fa0:	0800e048 	.word	0x0800e048

08006fa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b089      	sub	sp, #36	; 0x24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fac:	4ba1      	ldr	r3, [pc, #644]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006fb6:	4b9f      	ldr	r3, [pc, #636]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	0b1b      	lsrs	r3, r3, #12
 8006fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006fc2:	4b9c      	ldr	r3, [pc, #624]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc6:	091b      	lsrs	r3, r3, #4
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006fce:	4b99      	ldr	r3, [pc, #612]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	08db      	lsrs	r3, r3, #3
 8006fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8111 	beq.w	8007214 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	f000 8083 	beq.w	8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	f200 80a1 	bhi.w	8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d056      	beq.n	80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800700e:	e099      	b.n	8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007010:	4b88      	ldr	r3, [pc, #544]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0320 	and.w	r3, r3, #32
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02d      	beq.n	8007078 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800701c:	4b85      	ldr	r3, [pc, #532]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	08db      	lsrs	r3, r3, #3
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	4a84      	ldr	r2, [pc, #528]	; (8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
 800702c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007046:	4b7b      	ldr	r3, [pc, #492]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007056:	ed97 6a03 	vldr	s12, [r7, #12]
 800705a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800705e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800706a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007072:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007076:	e087      	b.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708a:	4b6a      	ldr	r3, [pc, #424]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709a:	ed97 6a03 	vldr	s12, [r7, #12]
 800709e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ba:	e065      	b.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ce:	4b59      	ldr	r3, [pc, #356]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070de:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070fe:	e043      	b.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800710e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007112:	4b48      	ldr	r3, [pc, #288]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	ed97 6a03 	vldr	s12, [r7, #12]
 8007126:	eddf 5a45 	vldr	s11, [pc, #276]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800712a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007142:	e021      	b.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007156:	4b37      	ldr	r3, [pc, #220]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007166:	ed97 6a03 	vldr	s12, [r7, #12]
 800716a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800716e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007186:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007188:	4b2a      	ldr	r3, [pc, #168]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	0a5b      	lsrs	r3, r3, #9
 800718e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800719e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ae:	ee17 2a90 	vmov	r2, s15
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80071b6:	4b1f      	ldr	r3, [pc, #124]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	0c1b      	lsrs	r3, r3, #16
 80071bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071dc:	ee17 2a90 	vmov	r2, s15
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80071e4:	4b13      	ldr	r3, [pc, #76]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	0e1b      	lsrs	r3, r3, #24
 80071ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720a:	ee17 2a90 	vmov	r2, s15
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007212:	e008      	b.n	8007226 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
}
 8007226:	bf00      	nop
 8007228:	3724      	adds	r7, #36	; 0x24
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	58024400 	.word	0x58024400
 8007238:	03d09000 	.word	0x03d09000
 800723c:	46000000 	.word	0x46000000
 8007240:	4c742400 	.word	0x4c742400
 8007244:	4a742400 	.word	0x4a742400
 8007248:	4bbebc20 	.word	0x4bbebc20

0800724c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800724c:	b480      	push	{r7}
 800724e:	b089      	sub	sp, #36	; 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007254:	4ba1      	ldr	r3, [pc, #644]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800725e:	4b9f      	ldr	r3, [pc, #636]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	0d1b      	lsrs	r3, r3, #20
 8007264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007268:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800726a:	4b9c      	ldr	r3, [pc, #624]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007276:	4b99      	ldr	r3, [pc, #612]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	08db      	lsrs	r3, r3, #3
 800727c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	fb02 f303 	mul.w	r3, r2, r3
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8111 	beq.w	80074bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	2b02      	cmp	r3, #2
 800729e:	f000 8083 	beq.w	80073a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	f200 80a1 	bhi.w	80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d056      	beq.n	8007364 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072b6:	e099      	b.n	80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072b8:	4b88      	ldr	r3, [pc, #544]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d02d      	beq.n	8007320 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072c4:	4b85      	ldr	r3, [pc, #532]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	08db      	lsrs	r3, r3, #3
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	4a84      	ldr	r2, [pc, #528]	; (80074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
 80072d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ee:	4b7b      	ldr	r3, [pc, #492]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007302:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800731e:	e087      	b.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800732e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007332:	4b6a      	ldr	r3, [pc, #424]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007342:	ed97 6a03 	vldr	s12, [r7, #12]
 8007346:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800734a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007362:	e065      	b.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007376:	4b59      	ldr	r3, [pc, #356]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007386:	ed97 6a03 	vldr	s12, [r7, #12]
 800738a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800738e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800739a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a6:	e043      	b.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ba:	4b48      	ldr	r3, [pc, #288]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ea:	e021      	b.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fe:	4b37      	ldr	r3, [pc, #220]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007412:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800742e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007430:	4b2a      	ldr	r3, [pc, #168]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	0a5b      	lsrs	r3, r3, #9
 8007436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800744a:	edd7 6a07 	vldr	s13, [r7, #28]
 800744e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007456:	ee17 2a90 	vmov	r2, s15
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800745e:	4b1f      	ldr	r3, [pc, #124]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	0c1b      	lsrs	r3, r3, #16
 8007464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007468:	ee07 3a90 	vmov	s15, r3
 800746c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007478:	edd7 6a07 	vldr	s13, [r7, #28]
 800747c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007484:	ee17 2a90 	vmov	r2, s15
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800748c:	4b13      	ldr	r3, [pc, #76]	; (80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	0e1b      	lsrs	r3, r3, #24
 8007492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b2:	ee17 2a90 	vmov	r2, s15
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074ba:	e008      	b.n	80074ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	609a      	str	r2, [r3, #8]
}
 80074ce:	bf00      	nop
 80074d0:	3724      	adds	r7, #36	; 0x24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
 80074e0:	03d09000 	.word	0x03d09000
 80074e4:	46000000 	.word	0x46000000
 80074e8:	4c742400 	.word	0x4c742400
 80074ec:	4a742400 	.word	0x4a742400
 80074f0:	4bbebc20 	.word	0x4bbebc20

080074f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b089      	sub	sp, #36	; 0x24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074fc:	4ba0      	ldr	r3, [pc, #640]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	f003 0303 	and.w	r3, r3, #3
 8007504:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007506:	4b9e      	ldr	r3, [pc, #632]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	091b      	lsrs	r3, r3, #4
 800750c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007510:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007512:	4b9b      	ldr	r3, [pc, #620]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800751c:	4b98      	ldr	r3, [pc, #608]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800751e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007520:	08db      	lsrs	r3, r3, #3
 8007522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007534:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8111 	beq.w	8007762 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b02      	cmp	r3, #2
 8007544:	f000 8083 	beq.w	800764e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b02      	cmp	r3, #2
 800754c:	f200 80a1 	bhi.w	8007692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d056      	beq.n	800760a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800755c:	e099      	b.n	8007692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800755e:	4b88      	ldr	r3, [pc, #544]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d02d      	beq.n	80075c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800756a:	4b85      	ldr	r3, [pc, #532]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	08db      	lsrs	r3, r3, #3
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	4a83      	ldr	r2, [pc, #524]	; (8007784 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007576:	fa22 f303 	lsr.w	r3, r2, r3
 800757a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007594:	4b7a      	ldr	r3, [pc, #488]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075c4:	e087      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800778c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80075d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d8:	4b69      	ldr	r3, [pc, #420]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e0:	ee07 3a90 	vmov	s15, r3
 80075e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007604:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007608:	e065      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007614:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761c:	4b58      	ldr	r3, [pc, #352]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007630:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800764c:	e043      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007658:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800765c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007660:	4b47      	ldr	r3, [pc, #284]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007668:	ee07 3a90 	vmov	s15, r3
 800766c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007670:	ed97 6a03 	vldr	s12, [r7, #12]
 8007674:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007690:	e021      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	ee07 3a90 	vmov	s15, r3
 8007698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800778c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a4:	4b36      	ldr	r3, [pc, #216]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ac:	ee07 3a90 	vmov	s15, r3
 80076b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80076d6:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	0a5b      	lsrs	r3, r3, #9
 80076dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e0:	ee07 3a90 	vmov	s15, r3
 80076e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076fc:	ee17 2a90 	vmov	r2, s15
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007704:	4b1e      	ldr	r3, [pc, #120]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800771a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800771e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800772a:	ee17 2a90 	vmov	r2, s15
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007732:	4b13      	ldr	r3, [pc, #76]	; (8007780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	0e1b      	lsrs	r3, r3, #24
 8007738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773c:	ee07 3a90 	vmov	s15, r3
 8007740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800774c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007758:	ee17 2a90 	vmov	r2, s15
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007760:	e008      	b.n	8007774 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	609a      	str	r2, [r3, #8]
}
 8007774:	bf00      	nop
 8007776:	3724      	adds	r7, #36	; 0x24
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	58024400 	.word	0x58024400
 8007784:	03d09000 	.word	0x03d09000
 8007788:	46000000 	.word	0x46000000
 800778c:	4c742400 	.word	0x4c742400
 8007790:	4a742400 	.word	0x4a742400
 8007794:	4bbebc20 	.word	0x4bbebc20

08007798 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077a6:	4b53      	ldr	r3, [pc, #332]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d101      	bne.n	80077b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e099      	b.n	80078ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077b6:	4b4f      	ldr	r3, [pc, #316]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a4e      	ldr	r2, [pc, #312]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077c2:	f7fa feef 	bl	80025a4 <HAL_GetTick>
 80077c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077c8:	e008      	b.n	80077dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077ca:	f7fa feeb 	bl	80025a4 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e086      	b.n	80078ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077dc:	4b45      	ldr	r3, [pc, #276]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1f0      	bne.n	80077ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077e8:	4b42      	ldr	r3, [pc, #264]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	031b      	lsls	r3, r3, #12
 80077f6:	493f      	ldr	r1, [pc, #252]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	628b      	str	r3, [r1, #40]	; 0x28
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	3b01      	subs	r3, #1
 8007802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	3b01      	subs	r3, #1
 800780c:	025b      	lsls	r3, r3, #9
 800780e:	b29b      	uxth	r3, r3
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	3b01      	subs	r3, #1
 8007818:	041b      	lsls	r3, r3, #16
 800781a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	3b01      	subs	r3, #1
 8007826:	061b      	lsls	r3, r3, #24
 8007828:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800782c:	4931      	ldr	r1, [pc, #196]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800782e:	4313      	orrs	r3, r2
 8007830:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007832:	4b30      	ldr	r3, [pc, #192]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007836:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	492d      	ldr	r1, [pc, #180]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007840:	4313      	orrs	r3, r2
 8007842:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007844:	4b2b      	ldr	r3, [pc, #172]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	f023 0220 	bic.w	r2, r3, #32
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	4928      	ldr	r1, [pc, #160]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007852:	4313      	orrs	r3, r2
 8007854:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007856:	4b27      	ldr	r3, [pc, #156]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	4a26      	ldr	r2, [pc, #152]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800785c:	f023 0310 	bic.w	r3, r3, #16
 8007860:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007866:	4b24      	ldr	r3, [pc, #144]	; (80078f8 <RCCEx_PLL2_Config+0x160>)
 8007868:	4013      	ands	r3, r2
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	69d2      	ldr	r2, [r2, #28]
 800786e:	00d2      	lsls	r2, r2, #3
 8007870:	4920      	ldr	r1, [pc, #128]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007876:	4b1f      	ldr	r3, [pc, #124]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800787c:	f043 0310 	orr.w	r3, r3, #16
 8007880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d106      	bne.n	8007896 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007888:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	4a19      	ldr	r2, [pc, #100]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800788e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007892:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007894:	e00f      	b.n	80078b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d106      	bne.n	80078aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800789c:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a14      	ldr	r2, [pc, #80]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a8:	e005      	b.n	80078b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	4a11      	ldr	r2, [pc, #68]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078b6:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a0e      	ldr	r2, [pc, #56]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c2:	f7fa fe6f 	bl	80025a4 <HAL_GetTick>
 80078c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078c8:	e008      	b.n	80078dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078ca:	f7fa fe6b 	bl	80025a4 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d901      	bls.n	80078dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e006      	b.n	80078ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078dc:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <RCCEx_PLL2_Config+0x15c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d0f0      	beq.n	80078ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	58024400 	.word	0x58024400
 80078f8:	ffff0007 	.word	0xffff0007

080078fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800790a:	4b53      	ldr	r3, [pc, #332]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	2b03      	cmp	r3, #3
 8007914:	d101      	bne.n	800791a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e099      	b.n	8007a4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800791a:	4b4f      	ldr	r3, [pc, #316]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a4e      	ldr	r2, [pc, #312]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007926:	f7fa fe3d 	bl	80025a4 <HAL_GetTick>
 800792a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800792c:	e008      	b.n	8007940 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800792e:	f7fa fe39 	bl	80025a4 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e086      	b.n	8007a4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007940:	4b45      	ldr	r3, [pc, #276]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f0      	bne.n	800792e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800794c:	4b42      	ldr	r3, [pc, #264]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	051b      	lsls	r3, r3, #20
 800795a:	493f      	ldr	r1, [pc, #252]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 800795c:	4313      	orrs	r3, r2
 800795e:	628b      	str	r3, [r1, #40]	; 0x28
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	3b01      	subs	r3, #1
 8007966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	3b01      	subs	r3, #1
 8007970:	025b      	lsls	r3, r3, #9
 8007972:	b29b      	uxth	r3, r3
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	3b01      	subs	r3, #1
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	3b01      	subs	r3, #1
 800798a:	061b      	lsls	r3, r3, #24
 800798c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007990:	4931      	ldr	r1, [pc, #196]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007992:	4313      	orrs	r3, r2
 8007994:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007996:	4b30      	ldr	r3, [pc, #192]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	492d      	ldr	r1, [pc, #180]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079a8:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	4928      	ldr	r1, [pc, #160]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079ba:	4b27      	ldr	r3, [pc, #156]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ca:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <RCCEx_PLL3_Config+0x160>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	69d2      	ldr	r2, [r2, #28]
 80079d2:	00d2      	lsls	r2, r2, #3
 80079d4:	4920      	ldr	r1, [pc, #128]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079da:	4b1f      	ldr	r3, [pc, #124]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	4a1e      	ldr	r2, [pc, #120]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d106      	bne.n	80079fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80079ec:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 80079f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079f8:	e00f      	b.n	8007a1a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d106      	bne.n	8007a0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a00:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	4a14      	ldr	r2, [pc, #80]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a0c:	e005      	b.n	8007a1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a0e:	4b12      	ldr	r3, [pc, #72]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	4a11      	ldr	r2, [pc, #68]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a1a:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a0e      	ldr	r2, [pc, #56]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a26:	f7fa fdbd 	bl	80025a4 <HAL_GetTick>
 8007a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a2c:	e008      	b.n	8007a40 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a2e:	f7fa fdb9 	bl	80025a4 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d901      	bls.n	8007a40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e006      	b.n	8007a4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <RCCEx_PLL3_Config+0x15c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0f0      	beq.n	8007a2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	ffff0007 	.word	0xffff0007

08007a60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08a      	sub	sp, #40	; 0x28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e075      	b.n	8007b5e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d105      	bne.n	8007a8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7fa fb1f 	bl	80020c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f868 	bl	8007b68 <HAL_SD_InitCard>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e05d      	b.n	8007b5e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007aa2:	f107 0308 	add.w	r3, r7, #8
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fdb5 	bl	8008618 <HAL_SD_GetCardStatus>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e052      	b.n	8007b5e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007ab8:	7e3b      	ldrb	r3, [r7, #24]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007abe:	7e7b      	ldrb	r3, [r7, #25]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d10a      	bne.n	8007ae2 <HAL_SD_Init+0x82>
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <HAL_SD_Init+0x78>
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ade:	659a      	str	r2, [r3, #88]	; 0x58
 8007ae0:	e00b      	b.n	8007afa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d104      	bne.n	8007af4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007af0:	659a      	str	r2, [r3, #88]	; 0x58
 8007af2:	e002      	b.n	8007afa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fe73 	bl	80087ec <HAL_SD_ConfigWideBusOperation>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e026      	b.n	8007b5e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007b10:	f7fa fd48 	bl	80025a4 <HAL_GetTick>
 8007b14:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b16:	e011      	b.n	8007b3c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b18:	f7fa fd44 	bl	80025a4 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b26:	d109      	bne.n	8007b3c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b2e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e010      	b.n	8007b5e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 ff67 	bl	8008a10 <HAL_SD_GetCardState>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d1e7      	bne.n	8007b18 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b68:	b590      	push	{r4, r7, lr}
 8007b6a:	b08d      	sub	sp, #52	; 0x34
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007b74:	2300      	movs	r3, #0
 8007b76:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007b80:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007b84:	f04f 0100 	mov.w	r1, #0
 8007b88:	f7fe fc76 	bl	8006478 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b8c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ba2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e070      	b.n	8007c8a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	0a1b      	lsrs	r3, r3, #8
 8007bac:	4a39      	ldr	r2, [pc, #228]	; (8007c94 <HAL_SD_InitCard+0x12c>)
 8007bae:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb2:	091b      	lsrs	r3, r3, #4
 8007bb4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681c      	ldr	r4, [r3, #0]
 8007bba:	466a      	mov	r2, sp
 8007bbc:	f107 0318 	add.w	r3, r7, #24
 8007bc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007bc4:	e882 0003 	stmia.w	r2, {r0, r1}
 8007bc8:	f107 030c 	add.w	r3, r7, #12
 8007bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f002 fc5c 	bl	800a48c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f002 fc9f 	bl	800a51c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007bf6:	4a28      	ldr	r2, [pc, #160]	; (8007c98 <HAL_SD_InitCard+0x130>)
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfe:	3301      	adds	r3, #1
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fa fcdb 	bl	80025bc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fff0 	bl	8008bec <SD_PowerON>
 8007c0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00b      	beq.n	8007c2c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e02e      	b.n	8007c8a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 ff0f 	bl	8008a50 <SD_InitCard>
 8007c32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e01b      	b.n	8007c8a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f002 fcf4 	bl	800a648 <SDMMC_CmdBlockLength>
 8007c60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00f      	beq.n	8007c88 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a0b      	ldr	r2, [pc, #44]	; (8007c9c <HAL_SD_InitCard+0x134>)
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e000      	b.n	8007c8a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	372c      	adds	r7, #44	; 0x2c
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd90      	pop	{r4, r7, pc}
 8007c92:	bf00      	nop
 8007c94:	014f8b59 	.word	0x014f8b59
 8007c98:	00012110 	.word	0x00012110
 8007c9c:	1fe00fff 	.word	0x1fe00fff

08007ca0 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b092      	sub	sp, #72	; 0x48
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cae:	f7fa fc79 	bl	80025a4 <HAL_GetTick>
 8007cb2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d107      	bne.n	8007cd2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e167      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	f040 815a 	bne.w	8007f94 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ce6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	441a      	add	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d907      	bls.n	8007d04 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e14e      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2203      	movs	r2, #3
 8007d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2200      	movs	r2, #0
 8007d12:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d002      	beq.n	8007d22 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	025b      	lsls	r3, r3, #9
 8007d20:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d22:	f04f 33ff 	mov.w	r3, #4294967295
 8007d26:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	025b      	lsls	r3, r3, #9
 8007d2c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d2e:	2390      	movs	r3, #144	; 0x90
 8007d30:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d32:	2302      	movs	r3, #2
 8007d34:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f107 0214 	add.w	r2, r7, #20
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f002 fc51 	bl	800a5f0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68da      	ldr	r2, [r3, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d5c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d90a      	bls.n	8007d7a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2202      	movs	r2, #2
 8007d68:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d70:	4618      	mov	r0, r3
 8007d72:	f002 fcaf 	bl	800a6d4 <SDMMC_CmdReadMultiBlock>
 8007d76:	6478      	str	r0, [r7, #68]	; 0x44
 8007d78:	e009      	b.n	8007d8e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d86:	4618      	mov	r0, r3
 8007d88:	f002 fc81 	bl	800a68e <SDMMC_CmdReadSingleBlock>
 8007d8c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d012      	beq.n	8007dba <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a84      	ldr	r2, [pc, #528]	; (8007fac <HAL_SD_ReadBlocks+0x30c>)
 8007d9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007da2:	431a      	orrs	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e0f3      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007dbe:	e058      	b.n	8007e72 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d033      	beq.n	8007e36 <HAL_SD_ReadBlocks+0x196>
 8007dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd0:	2b1f      	cmp	r3, #31
 8007dd2:	d930      	bls.n	8007e36 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd8:	e027      	b.n	8007e2a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f002 fb7e 	bl	800a4e0 <SDMMC_ReadFIFO>
 8007de4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df0:	3301      	adds	r3, #1
 8007df2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e00:	3301      	adds	r3, #1
 8007e02:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e10:	3301      	adds	r3, #1
 8007e12:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	0e1b      	lsrs	r3, r3, #24
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e20:	3301      	adds	r3, #1
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8007e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e26:	3301      	adds	r3, #1
 8007e28:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2c:	2b07      	cmp	r3, #7
 8007e2e:	d9d4      	bls.n	8007dda <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e32:	3b20      	subs	r3, #32
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007e36:	f7fa fbb5 	bl	80025a4 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d902      	bls.n	8007e4c <HAL_SD_ReadBlocks+0x1ac>
 8007e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d112      	bne.n	8007e72 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a56      	ldr	r2, [pc, #344]	; (8007fac <HAL_SD_ReadBlocks+0x30c>)
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e097      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e78:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d09f      	beq.n	8007dc0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e8e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d022      	beq.n	8007ee4 <HAL_SD_ReadBlocks+0x244>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d91f      	bls.n	8007ee4 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d01b      	beq.n	8007ee4 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f002 fc79 	bl	800a7a8 <SDMMC_CmdStopTransfer>
 8007eb6:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d012      	beq.n	8007ee4 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a3a      	ldr	r2, [pc, #232]	; (8007fac <HAL_SD_ReadBlocks+0x30c>)
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e05e      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d012      	beq.n	8007f18 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a2d      	ldr	r2, [pc, #180]	; (8007fac <HAL_SD_ReadBlocks+0x30c>)
 8007ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efe:	f043 0208 	orr.w	r2, r3, #8
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e044      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d012      	beq.n	8007f4c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a20      	ldr	r2, [pc, #128]	; (8007fac <HAL_SD_ReadBlocks+0x30c>)
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f32:	f043 0202 	orr.w	r2, r3, #2
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e02a      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d012      	beq.n	8007f80 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a13      	ldr	r2, [pc, #76]	; (8007fac <HAL_SD_ReadBlocks+0x30c>)
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f66:	f043 0220 	orr.w	r2, r3, #32
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e010      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a0a      	ldr	r2, [pc, #40]	; (8007fb0 <HAL_SD_ReadBlocks+0x310>)
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e006      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
  }
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3748      	adds	r7, #72	; 0x48
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	1fe00fff 	.word	0x1fe00fff
 8007fb0:	18000f3a 	.word	0x18000f3a

08007fb4 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b092      	sub	sp, #72	; 0x48
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007fc2:	f7fa faef 	bl	80025a4 <HAL_GetTick>
 8007fc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d107      	bne.n	8007fe6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e16b      	b.n	80082be <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	f040 815e 	bne.w	80082b0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	441a      	add	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008004:	429a      	cmp	r2, r3
 8008006:	d907      	bls.n	8008018 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e152      	b.n	80082be <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2203      	movs	r2, #3
 800801c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2200      	movs	r2, #0
 8008026:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	2b01      	cmp	r3, #1
 800802e:	d002      	beq.n	8008036 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	025b      	lsls	r3, r3, #9
 8008034:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008036:	f04f 33ff 	mov.w	r3, #4294967295
 800803a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	025b      	lsls	r3, r3, #9
 8008040:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008042:	2390      	movs	r3, #144	; 0x90
 8008044:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008046:	2300      	movs	r3, #0
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800804a:	2300      	movs	r3, #0
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800804e:	2300      	movs	r3, #0
 8008050:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f107 0218 	add.w	r2, r7, #24
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f002 fac7 	bl	800a5f0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008070:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d90a      	bls.n	800808e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2220      	movs	r2, #32
 800807c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008084:	4618      	mov	r0, r3
 8008086:	f002 fb6b 	bl	800a760 <SDMMC_CmdWriteMultiBlock>
 800808a:	6478      	str	r0, [r7, #68]	; 0x44
 800808c:	e009      	b.n	80080a2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2210      	movs	r2, #16
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800809a:	4618      	mov	r0, r3
 800809c:	f002 fb3d 	bl	800a71a <SDMMC_CmdWriteSingleBlock>
 80080a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80080a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d012      	beq.n	80080ce <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a86      	ldr	r2, [pc, #536]	; (80082c8 <HAL_SD_WriteBlocks+0x314>)
 80080ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b6:	431a      	orrs	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e0f7      	b.n	80082be <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80080d2:	e05c      	b.n	800818e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d037      	beq.n	8008152 <HAL_SD_WriteBlocks+0x19e>
 80080e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e4:	2b1f      	cmp	r3, #31
 80080e6:	d934      	bls.n	8008152 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80080e8:	2300      	movs	r3, #0
 80080ea:	643b      	str	r3, [r7, #64]	; 0x40
 80080ec:	e02b      	b.n	8008146 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80080f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f6:	3301      	adds	r3, #1
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80080fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	021a      	lsls	r2, r3, #8
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008108:	3301      	adds	r3, #1
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800810c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	041a      	lsls	r2, r3, #16
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811a:	3301      	adds	r3, #1
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800811e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	061a      	lsls	r2, r3, #24
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800812a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812c:	3301      	adds	r3, #1
 800812e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f107 0214 	add.w	r2, r7, #20
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f002 f9dd 	bl	800a4fa <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008142:	3301      	adds	r3, #1
 8008144:	643b      	str	r3, [r7, #64]	; 0x40
 8008146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008148:	2b07      	cmp	r3, #7
 800814a:	d9d0      	bls.n	80080ee <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800814c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814e:	3b20      	subs	r3, #32
 8008150:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008152:	f7fa fa27 	bl	80025a4 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800815e:	429a      	cmp	r2, r3
 8008160:	d902      	bls.n	8008168 <HAL_SD_WriteBlocks+0x1b4>
 8008162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008164:	2b00      	cmp	r3, #0
 8008166:	d112      	bne.n	800818e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a56      	ldr	r2, [pc, #344]	; (80082c8 <HAL_SD_WriteBlocks+0x314>)
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008176:	431a      	orrs	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e097      	b.n	80082be <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008194:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008198:	2b00      	cmp	r3, #0
 800819a:	d09b      	beq.n	80080d4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081aa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d022      	beq.n	8008200 <HAL_SD_WriteBlocks+0x24c>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d91f      	bls.n	8008200 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d01b      	beq.n	8008200 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f002 faeb 	bl	800a7a8 <SDMMC_CmdStopTransfer>
 80081d2:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80081d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d012      	beq.n	8008200 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a3a      	ldr	r2, [pc, #232]	; (80082c8 <HAL_SD_WriteBlocks+0x314>)
 80081e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e8:	431a      	orrs	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e05e      	b.n	80082be <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d012      	beq.n	8008234 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a2d      	ldr	r2, [pc, #180]	; (80082c8 <HAL_SD_WriteBlocks+0x314>)
 8008214:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	f043 0208 	orr.w	r2, r3, #8
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e044      	b.n	80082be <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d012      	beq.n	8008268 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a20      	ldr	r2, [pc, #128]	; (80082c8 <HAL_SD_WriteBlocks+0x314>)
 8008248:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824e:	f043 0202 	orr.w	r2, r3, #2
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e02a      	b.n	80082be <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b00      	cmp	r3, #0
 8008274:	d012      	beq.n	800829c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <HAL_SD_WriteBlocks+0x314>)
 800827c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	f043 0210 	orr.w	r2, r3, #16
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e010      	b.n	80082be <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a0a      	ldr	r2, [pc, #40]	; (80082cc <HAL_SD_WriteBlocks+0x318>)
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e006      	b.n	80082be <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
  }
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3748      	adds	r7, #72	; 0x48
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	1fe00fff 	.word	0x1fe00fff
 80082cc:	18000f3a 	.word	0x18000f3a

080082d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082de:	0f9b      	lsrs	r3, r3, #30
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ea:	0e9b      	lsrs	r3, r3, #26
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082fc:	0e1b      	lsrs	r3, r3, #24
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	b2da      	uxtb	r2, r3
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830e:	0c1b      	lsrs	r3, r3, #16
 8008310:	b2da      	uxtb	r2, r3
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831a:	0a1b      	lsrs	r3, r3, #8
 800831c:	b2da      	uxtb	r2, r3
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008326:	b2da      	uxtb	r2, r3
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008330:	0d1b      	lsrs	r3, r3, #20
 8008332:	b29a      	uxth	r2, r3
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833c:	0c1b      	lsrs	r3, r3, #16
 800833e:	b2db      	uxtb	r3, r3
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	b2da      	uxtb	r2, r3
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834e:	0bdb      	lsrs	r3, r3, #15
 8008350:	b2db      	uxtb	r3, r3
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008360:	0b9b      	lsrs	r3, r3, #14
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	b2da      	uxtb	r2, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008372:	0b5b      	lsrs	r3, r3, #13
 8008374:	b2db      	uxtb	r3, r3
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	b2da      	uxtb	r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008384:	0b1b      	lsrs	r3, r3, #12
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	b2da      	uxtb	r2, r3
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2200      	movs	r2, #0
 8008396:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d163      	bne.n	8008468 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a4:	009a      	lsls	r2, r3, #2
 80083a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80083aa:	4013      	ands	r3, r2
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80083b0:	0f92      	lsrs	r2, r2, #30
 80083b2:	431a      	orrs	r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083bc:	0edb      	lsrs	r3, r3, #27
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	f003 0307 	and.w	r3, r3, #7
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ce:	0e1b      	lsrs	r3, r3, #24
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e0:	0d5b      	lsrs	r3, r3, #21
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 0307 	and.w	r3, r3, #7
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f2:	0c9b      	lsrs	r3, r3, #18
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008404:	0bdb      	lsrs	r3, r3, #15
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 0307 	and.w	r3, r3, #7
 800840c:	b2da      	uxtb	r2, r3
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	7e1b      	ldrb	r3, [r3, #24]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	3302      	adds	r3, #2
 8008428:	2201      	movs	r2, #1
 800842a:	fa02 f303 	lsl.w	r3, r2, r3
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008432:	fb03 f202 	mul.w	r2, r3, r2
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	7a1b      	ldrb	r3, [r3, #8]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	2201      	movs	r2, #1
 8008446:	409a      	lsls	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008454:	0a52      	lsrs	r2, r2, #9
 8008456:	fb03 f202 	mul.w	r2, r3, r2
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008464:	655a      	str	r2, [r3, #84]	; 0x54
 8008466:	e031      	b.n	80084cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	2b01      	cmp	r3, #1
 800846e:	d11d      	bne.n	80084ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008474:	041b      	lsls	r3, r3, #16
 8008476:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800847e:	0c1b      	lsrs	r3, r3, #16
 8008480:	431a      	orrs	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	3301      	adds	r3, #1
 800848c:	029a      	lsls	r2, r3, #10
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084a0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	655a      	str	r2, [r3, #84]	; 0x54
 80084aa:	e00f      	b.n	80084cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a58      	ldr	r2, [pc, #352]	; (8008614 <HAL_SD_GetCardCSD+0x344>)
 80084b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e09d      	b.n	8008608 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d0:	0b9b      	lsrs	r3, r3, #14
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e2:	09db      	lsrs	r3, r3, #7
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008504:	0fdb      	lsrs	r3, r3, #31
 8008506:	b2da      	uxtb	r2, r3
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008510:	0f5b      	lsrs	r3, r3, #29
 8008512:	b2db      	uxtb	r3, r3
 8008514:	f003 0303 	and.w	r3, r3, #3
 8008518:	b2da      	uxtb	r2, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008522:	0e9b      	lsrs	r3, r3, #26
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	b2da      	uxtb	r2, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008534:	0d9b      	lsrs	r3, r3, #22
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 030f 	and.w	r3, r3, #15
 800853c:	b2da      	uxtb	r2, r3
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008546:	0d5b      	lsrs	r3, r3, #21
 8008548:	b2db      	uxtb	r3, r3
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	b2da      	uxtb	r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008562:	0c1b      	lsrs	r3, r3, #16
 8008564:	b2db      	uxtb	r3, r3
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	b2da      	uxtb	r2, r3
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008576:	0bdb      	lsrs	r3, r3, #15
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	b2da      	uxtb	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800858a:	0b9b      	lsrs	r3, r3, #14
 800858c:	b2db      	uxtb	r3, r3
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	b2da      	uxtb	r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800859e:	0b5b      	lsrs	r3, r3, #13
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b2:	0b1b      	lsrs	r3, r3, #12
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c6:	0a9b      	lsrs	r3, r3, #10
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085da:	0a1b      	lsrs	r3, r3, #8
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ee:	085b      	lsrs	r3, r3, #1
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	1fe00fff 	.word	0x1fe00fff

08008618 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b094      	sub	sp, #80	; 0x50
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b03      	cmp	r3, #3
 8008632:	d101      	bne.n	8008638 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e0a7      	b.n	8008788 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fb62 	bl	8008d08 <SD_SendSDStatus>
 8008644:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008648:	2b00      	cmp	r3, #0
 800864a:	d011      	beq.n	8008670 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a4f      	ldr	r2, [pc, #316]	; (8008790 <HAL_SD_GetCardStatus+0x178>)
 8008652:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865a:	431a      	orrs	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800866e:	e070      	b.n	8008752 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	099b      	lsrs	r3, r3, #6
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	b2da      	uxtb	r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	b2db      	uxtb	r3, r3
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	b2da      	uxtb	r2, r3
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	b29b      	uxth	r3, r3
 8008696:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800869a:	b29a      	uxth	r2, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	0e1b      	lsrs	r3, r3, #24
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	4313      	orrs	r3, r2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	061a      	lsls	r2, r3, #24
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086b6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	0a1b      	lsrs	r3, r3, #8
 80086bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80086c0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	0e1b      	lsrs	r3, r3, #24
 80086c6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	0a1b      	lsrs	r3, r3, #8
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	0d1b      	lsrs	r3, r3, #20
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	0c1b      	lsrs	r3, r3, #16
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	b29b      	uxth	r3, r3
 8008702:	4313      	orrs	r3, r2
 8008704:	b29a      	uxth	r2, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	0a9b      	lsrs	r3, r3, #10
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008714:	b2da      	uxtb	r2, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	0a1b      	lsrs	r3, r3, #8
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	b2da      	uxtb	r2, r3
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	091b      	lsrs	r3, r3, #4
 800872e:	b2db      	uxtb	r3, r3
 8008730:	f003 030f 	and.w	r3, r3, #15
 8008734:	b2da      	uxtb	r2, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	b2da      	uxtb	r2, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	0e1b      	lsrs	r3, r3, #24
 800874c:	b2da      	uxtb	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800875a:	4618      	mov	r0, r3
 800875c:	f001 ff74 	bl	800a648 <SDMMC_CmdBlockLength>
 8008760:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00d      	beq.n	8008784 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a08      	ldr	r2, [pc, #32]	; (8008790 <HAL_SD_GetCardStatus+0x178>)
 800876e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008774:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008784:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008788:	4618      	mov	r0, r3
 800878a:	3750      	adds	r7, #80	; 0x50
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	1fe00fff 	.word	0x1fe00fff

08008794 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80087ec:	b590      	push	{r4, r7, lr}
 80087ee:	b08d      	sub	sp, #52	; 0x34
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2203      	movs	r2, #3
 8008800:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	2b03      	cmp	r3, #3
 800880a:	d02e      	beq.n	800886a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008812:	d106      	bne.n	8008822 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008818:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	635a      	str	r2, [r3, #52]	; 0x34
 8008820:	e029      	b.n	8008876 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008828:	d10a      	bne.n	8008840 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fb64 	bl	8008ef8 <SD_WideBus_Enable>
 8008830:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	635a      	str	r2, [r3, #52]	; 0x34
 800883e:	e01a      	b.n	8008876 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fba1 	bl	8008f8e <SD_WideBus_Disable>
 800884c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	635a      	str	r2, [r3, #52]	; 0x34
 800885a:	e00c      	b.n	8008876 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008860:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	635a      	str	r2, [r3, #52]	; 0x34
 8008868:	e005      	b.n	8008876 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a5f      	ldr	r2, [pc, #380]	; (8008a00 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008884:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800888c:	e096      	b.n	80089bc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800888e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008892:	f04f 0100 	mov.w	r1, #0
 8008896:	f7fd fdef 	bl	8006478 <HAL_RCCEx_GetPeriphCLKFreq>
 800889a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 8083 	beq.w	80089aa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695a      	ldr	r2, [r3, #20]
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	4950      	ldr	r1, [pc, #320]	; (8008a04 <HAL_SD_ConfigWideBusOperation+0x218>)
 80088c2:	fba1 1303 	umull	r1, r3, r1, r3
 80088c6:	0e1b      	lsrs	r3, r3, #24
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d303      	bcc.n	80088d4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	e05a      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088dc:	d103      	bne.n	80088e6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	61bb      	str	r3, [r7, #24]
 80088e4:	e051      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ee:	d126      	bne.n	800893e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10e      	bne.n	8008916 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	4a43      	ldr	r2, [pc, #268]	; (8008a08 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d906      	bls.n	800890e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	4a40      	ldr	r2, [pc, #256]	; (8008a04 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008904:	fba2 2303 	umull	r2, r3, r2, r3
 8008908:	0e5b      	lsrs	r3, r3, #25
 800890a:	61bb      	str	r3, [r7, #24]
 800890c:	e03d      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	61bb      	str	r3, [r7, #24]
 8008914:	e039      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	69fa      	ldr	r2, [r7, #28]
 800891e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008922:	4a39      	ldr	r2, [pc, #228]	; (8008a08 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d906      	bls.n	8008936 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	4a36      	ldr	r2, [pc, #216]	; (8008a04 <HAL_SD_ConfigWideBusOperation+0x218>)
 800892c:	fba2 2303 	umull	r2, r3, r2, r3
 8008930:	0e5b      	lsrs	r3, r3, #25
 8008932:	61bb      	str	r3, [r7, #24]
 8008934:	e029      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	61bb      	str	r3, [r7, #24]
 800893c:	e025      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10e      	bne.n	8008964 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	4a30      	ldr	r2, [pc, #192]	; (8008a0c <HAL_SD_ConfigWideBusOperation+0x220>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d906      	bls.n	800895c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4a2c      	ldr	r2, [pc, #176]	; (8008a04 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008952:	fba2 2303 	umull	r2, r3, r2, r3
 8008956:	0e1b      	lsrs	r3, r3, #24
 8008958:	61bb      	str	r3, [r7, #24]
 800895a:	e016      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	61bb      	str	r3, [r7, #24]
 8008962:	e012      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008970:	4a26      	ldr	r2, [pc, #152]	; (8008a0c <HAL_SD_ConfigWideBusOperation+0x220>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d906      	bls.n	8008984 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4a22      	ldr	r2, [pc, #136]	; (8008a04 <HAL_SD_ConfigWideBusOperation+0x218>)
 800897a:	fba2 2303 	umull	r2, r3, r2, r3
 800897e:	0e1b      	lsrs	r3, r3, #24
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	e002      	b.n	800898a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681c      	ldr	r4, [r3, #0]
 800898e:	466a      	mov	r2, sp
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008998:	e882 0003 	stmia.w	r2, {r0, r1}
 800899c:	f107 0308 	add.w	r3, r7, #8
 80089a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089a2:	4620      	mov	r0, r4
 80089a4:	f001 fd72 	bl	800a48c <SDMMC_Init>
 80089a8:	e008      	b.n	80089bc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 fe3f 	bl	800a648 <SDMMC_CmdBlockLength>
 80089ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00c      	beq.n	80089ec <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a0a      	ldr	r2, [pc, #40]	; (8008a00 <HAL_SD_ConfigWideBusOperation+0x214>)
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80089f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	372c      	adds	r7, #44	; 0x2c
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd90      	pop	{r4, r7, pc}
 8008a00:	1fe00fff 	.word	0x1fe00fff
 8008a04:	55e63b89 	.word	0x55e63b89
 8008a08:	02faf080 	.word	0x02faf080
 8008a0c:	017d7840 	.word	0x017d7840

08008a10 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a1c:	f107 030c 	add.w	r3, r7, #12
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fa40 	bl	8008ea8 <SD_SendStatus>
 8008a28:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	0a5b      	lsrs	r3, r3, #9
 8008a40:	f003 030f 	and.w	r3, r3, #15
 8008a44:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008a46:	693b      	ldr	r3, [r7, #16]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b090      	sub	sp, #64	; 0x40
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008a5c:	f7f9 fda2 	bl	80025a4 <HAL_GetTick>
 8008a60:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 fd69 	bl	800a53e <SDMMC_GetPowerState>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d102      	bne.n	8008a78 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008a76:	e0b5      	b.n	8008be4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d02e      	beq.n	8008ade <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 ffb4 	bl	800a9f2 <SDMMC_CmdSendCID>
 8008a8a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <SD_InitCard+0x46>
    {
      return errorstate;
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	e0a6      	b.n	8008be4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f001 fd94 	bl	800a5ca <SDMMC_GetResponse>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2104      	movs	r1, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 fd8b 	bl	800a5ca <SDMMC_GetResponse>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2108      	movs	r1, #8
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f001 fd82 	bl	800a5ca <SDMMC_GetResponse>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	210c      	movs	r1, #12
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f001 fd79 	bl	800a5ca <SDMMC_GetResponse>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d01d      	beq.n	8008b22 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008ae6:	e019      	b.n	8008b1c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f107 020a 	add.w	r2, r7, #10
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f001 ffbc 	bl	800aa70 <SDMMC_CmdSetRelAdd>
 8008af8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	e06f      	b.n	8008be4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008b04:	f7f9 fd4e 	bl	80025a4 <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	f241 3287 	movw	r2, #4999	; 0x1387
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d902      	bls.n	8008b1c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008b16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b1a:	e063      	b.n	8008be4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008b1c:	897b      	ldrh	r3, [r7, #10]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0e2      	beq.n	8008ae8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d036      	beq.n	8008b98 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008b2a:	897b      	ldrh	r3, [r7, #10]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3a:	041b      	lsls	r3, r3, #16
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	f001 ff76 	bl	800aa30 <SDMMC_CmdSendCSD>
 8008b44:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <SD_InitCard+0x100>
    {
      return errorstate;
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	e049      	b.n	8008be4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 fd37 	bl	800a5ca <SDMMC_GetResponse>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2104      	movs	r1, #4
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 fd2e 	bl	800a5ca <SDMMC_GetResponse>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2108      	movs	r1, #8
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 fd25 	bl	800a5ca <SDMMC_GetResponse>
 8008b80:	4602      	mov	r2, r0
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	210c      	movs	r1, #12
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fd1c 	bl	800a5ca <SDMMC_GetResponse>
 8008b92:	4602      	mov	r2, r0
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2104      	movs	r1, #4
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 fd13 	bl	800a5ca <SDMMC_GetResponse>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	0d1a      	lsrs	r2, r3, #20
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008bac:	f107 030c 	add.w	r3, r7, #12
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fb8c 	bl	80082d0 <HAL_SD_GetCardCSD>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bc2:	e00f      	b.n	8008be4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bcc:	041b      	lsls	r3, r3, #16
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	f001 fe25 	bl	800a820 <SDMMC_CmdSelDesel>
 8008bd6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <SD_InitCard+0x192>
  {
    return errorstate;
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	e000      	b.n	8008be4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3740      	adds	r7, #64	; 0x40
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 fe2e 	bl	800a866 <SDMMC_CmdGoIdleState>
 8008c0a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	e072      	b.n	8008cfc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 fe41 	bl	800a8a2 <SDMMC_CmdOperCond>
 8008c20:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c28:	d10d      	bne.n	8008c46 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f001 fe16 	bl	800a866 <SDMMC_CmdGoIdleState>
 8008c3a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <SD_PowerON+0x60>
    {
      return errorstate;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	e05a      	b.n	8008cfc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d137      	bne.n	8008cc4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fe41 	bl	800a8e2 <SDMMC_CmdAppCommand>
 8008c60:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d02d      	beq.n	8008cc4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c6c:	e046      	b.n	8008cfc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2100      	movs	r1, #0
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 fe34 	bl	800a8e2 <SDMMC_CmdAppCommand>
 8008c7a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <SD_PowerON+0x9a>
    {
      return errorstate;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	e03a      	b.n	8008cfc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	491e      	ldr	r1, [pc, #120]	; (8008d04 <SD_PowerON+0x118>)
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 fe4b 	bl	800a928 <SDMMC_CmdAppOperCommand>
 8008c92:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c9e:	e02d      	b.n	8008cfc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 fc8f 	bl	800a5ca <SDMMC_GetResponse>
 8008cac:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	0fdb      	lsrs	r3, r3, #31
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <SD_PowerON+0xce>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e000      	b.n	8008cbc <SD_PowerON+0xd0>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	613b      	str	r3, [r7, #16]

    count++;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d802      	bhi.n	8008cd4 <SD_PowerON+0xe8>
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0cc      	beq.n	8008c6e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d902      	bls.n	8008ce4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ce2:	e00b      	b.n	8008cfc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	c1100000 	.word	0xc1100000

08008d08 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08c      	sub	sp, #48	; 0x30
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d12:	f7f9 fc47 	bl	80025a4 <HAL_GetTick>
 8008d16:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2100      	movs	r1, #0
 8008d22:	4618      	mov	r0, r3
 8008d24:	f001 fc51 	bl	800a5ca <SDMMC_GetResponse>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d32:	d102      	bne.n	8008d3a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d38:	e0b0      	b.n	8008e9c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2140      	movs	r1, #64	; 0x40
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 fc81 	bl	800a648 <SDMMC_CmdBlockLength>
 8008d46:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	e0a0      	b.n	8008e9c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d62:	041b      	lsls	r3, r3, #16
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f001 fdbb 	bl	800a8e2 <SDMMC_CmdAppCommand>
 8008d6c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d005      	beq.n	8008d80 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	e08d      	b.n	8008e9c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d80:	f04f 33ff 	mov.w	r3, #4294967295
 8008d84:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008d86:	2340      	movs	r3, #64	; 0x40
 8008d88:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008d8a:	2360      	movs	r3, #96	; 0x60
 8008d8c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d96:	2301      	movs	r3, #1
 8008d98:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f107 0208 	add.w	r2, r7, #8
 8008da2:	4611      	mov	r1, r2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 fc23 	bl	800a5f0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fea3 	bl	800aafa <SDMMC_CmdStatusRegister>
 8008db4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d02b      	beq.n	8008e14 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	e069      	b.n	8008e9c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d013      	beq.n	8008dfe <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dda:	e00d      	b.n	8008df8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 fb7d 	bl	800a4e0 <SDMMC_ReadFIFO>
 8008de6:	4602      	mov	r2, r0
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	601a      	str	r2, [r3, #0]
        pData++;
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	3304      	adds	r3, #4
 8008df0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	3301      	adds	r3, #1
 8008df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	2b07      	cmp	r3, #7
 8008dfc:	d9ee      	bls.n	8008ddc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008dfe:	f7f9 fbd1 	bl	80025a4 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d102      	bne.n	8008e14 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e12:	e043      	b.n	8008e9c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0d2      	beq.n	8008dc8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e28:	f003 0308 	and.w	r3, r3, #8
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e30:	2308      	movs	r3, #8
 8008e32:	e033      	b.n	8008e9c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e42:	2302      	movs	r3, #2
 8008e44:	e02a      	b.n	8008e9c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d017      	beq.n	8008e84 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008e54:	2320      	movs	r3, #32
 8008e56:	e021      	b.n	8008e9c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 fb3f 	bl	800a4e0 <SDMMC_ReadFIFO>
 8008e62:	4602      	mov	r2, r0
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	601a      	str	r2, [r3, #0]
    pData++;
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e6e:	f7f9 fb99 	bl	80025a4 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7c:	d102      	bne.n	8008e84 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e82:	e00b      	b.n	8008e9c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e2      	bne.n	8008e58 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a03      	ldr	r2, [pc, #12]	; (8008ea4 <SD_SendSDStatus+0x19c>)
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3730      	adds	r7, #48	; 0x30
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	18000f3a 	.word	0x18000f3a

08008ea8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d102      	bne.n	8008ebe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008eb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ebc:	e018      	b.n	8008ef0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec6:	041b      	lsls	r3, r3, #16
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	f001 fdf2 	bl	800aab4 <SDMMC_CmdSendStatus>
 8008ed0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <SD_SendStatus+0x34>
  {
    return errorstate;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	e009      	b.n	8008ef0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 fb71 	bl	800a5ca <SDMMC_GetResponse>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	2300      	movs	r3, #0
 8008f06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 fb5b 	bl	800a5ca <SDMMC_GetResponse>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f1e:	d102      	bne.n	8008f26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f24:	e02f      	b.n	8008f86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f26:	f107 030c 	add.w	r3, r7, #12
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f879 	bl	8009024 <SD_FindSCR>
 8008f32:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	e023      	b.n	8008f86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01c      	beq.n	8008f82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f50:	041b      	lsls	r3, r3, #16
 8008f52:	4619      	mov	r1, r3
 8008f54:	4610      	mov	r0, r2
 8008f56:	f001 fcc4 	bl	800a8e2 <SDMMC_CmdAppCommand>
 8008f5a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	e00f      	b.n	8008f86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2102      	movs	r1, #2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f001 fcfb 	bl	800a968 <SDMMC_CmdBusWidth>
 8008f72:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	e003      	b.n	8008f86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e001      	b.n	8008f86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008f96:	2300      	movs	r3, #0
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f001 fb10 	bl	800a5ca <SDMMC_GetResponse>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fb4:	d102      	bne.n	8008fbc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fba:	e02f      	b.n	800901c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f82e 	bl	8009024 <SD_FindSCR>
 8008fc8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	e023      	b.n	800901c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d01c      	beq.n	8009018 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	041b      	lsls	r3, r3, #16
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f001 fc79 	bl	800a8e2 <SDMMC_CmdAppCommand>
 8008ff0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	e00f      	b.n	800901c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2100      	movs	r1, #0
 8009002:	4618      	mov	r0, r3
 8009004:	f001 fcb0 	bl	800a968 <SDMMC_CmdBusWidth>
 8009008:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	e003      	b.n	800901c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009014:	2300      	movs	r3, #0
 8009016:	e001      	b.n	800901c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009018:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800901c:	4618      	mov	r0, r3
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08e      	sub	sp, #56	; 0x38
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800902e:	f7f9 fab9 	bl	80025a4 <HAL_GetTick>
 8009032:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009038:	2300      	movs	r3, #0
 800903a:	60bb      	str	r3, [r7, #8]
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2108      	movs	r1, #8
 800904a:	4618      	mov	r0, r3
 800904c:	f001 fafc 	bl	800a648 <SDMMC_CmdBlockLength>
 8009050:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	e0ad      	b.n	80091b8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009064:	041b      	lsls	r3, r3, #16
 8009066:	4619      	mov	r1, r3
 8009068:	4610      	mov	r0, r2
 800906a:	f001 fc3a 	bl	800a8e2 <SDMMC_CmdAppCommand>
 800906e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	e09e      	b.n	80091b8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800907a:	f04f 33ff 	mov.w	r3, #4294967295
 800907e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009080:	2308      	movs	r3, #8
 8009082:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009084:	2330      	movs	r3, #48	; 0x30
 8009086:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009088:	2302      	movs	r3, #2
 800908a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800908c:	2300      	movs	r3, #0
 800908e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009090:	2301      	movs	r3, #1
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f107 0210 	add.w	r2, r7, #16
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 faa6 	bl	800a5f0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 fc80 	bl	800a9ae <SDMMC_CmdSendSCR>
 80090ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d027      	beq.n	8009106 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	e07e      	b.n	80091b8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d113      	bne.n	80090f0 <SD_FindSCR+0xcc>
 80090c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d110      	bne.n	80090f0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f001 fa04 	bl	800a4e0 <SDMMC_ReadFIFO>
 80090d8:	4603      	mov	r3, r0
 80090da:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f001 f9fd 	bl	800a4e0 <SDMMC_ReadFIFO>
 80090e6:	4603      	mov	r3, r0
 80090e8:	60fb      	str	r3, [r7, #12]
      index++;
 80090ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ec:	3301      	adds	r3, #1
 80090ee:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80090f0:	f7f9 fa58 	bl	80025a4 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fe:	d102      	bne.n	8009106 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009104:	e058      	b.n	80091b8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800910c:	f240 532a 	movw	r3, #1322	; 0x52a
 8009110:	4013      	ands	r3, r2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0d1      	beq.n	80090ba <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911c:	f003 0308 	and.w	r3, r3, #8
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2208      	movs	r2, #8
 800912a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800912c:	2308      	movs	r3, #8
 800912e:	e043      	b.n	80091b8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2202      	movs	r2, #2
 8009144:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009146:	2302      	movs	r3, #2
 8009148:	e036      	b.n	80091b8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009150:	f003 0320 	and.w	r3, r3, #32
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2220      	movs	r2, #32
 800915e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009160:	2320      	movs	r3, #32
 8009162:	e029      	b.n	80091b8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a15      	ldr	r2, [pc, #84]	; (80091c0 <SD_FindSCR+0x19c>)
 800916a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	061a      	lsls	r2, r3, #24
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009178:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	0a1b      	lsrs	r3, r3, #8
 800917e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009182:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	0e1b      	lsrs	r3, r3, #24
 8009188:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	601a      	str	r2, [r3, #0]
    scr++;
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	3304      	adds	r3, #4
 8009192:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	061a      	lsls	r2, r3, #24
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	021b      	lsls	r3, r3, #8
 800919c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	0a1b      	lsrs	r3, r3, #8
 80091a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80091aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	0e1b      	lsrs	r3, r3, #24
 80091b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3738      	adds	r7, #56	; 0x38
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	18000f3a 	.word	0x18000f3a

080091c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e042      	b.n	800925c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d106      	bne.n	80091ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7f9 f8c1 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2224      	movs	r2, #36	; 0x24
 80091f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 0201 	bic.w	r2, r2, #1
 8009204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f8ba 	bl	8009380 <UART_SetConfig>
 800920c:	4603      	mov	r3, r0
 800920e:	2b01      	cmp	r3, #1
 8009210:	d101      	bne.n	8009216 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e022      	b.n	800925c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921a:	2b00      	cmp	r3, #0
 800921c:	d002      	beq.n	8009224 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fe16 	bl	8009e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fe9d 	bl	8009f94 <UART_CheckIdleState>
 800925a:	4603      	mov	r3, r0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08a      	sub	sp, #40	; 0x28
 8009268:	af02      	add	r7, sp, #8
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800927a:	2b20      	cmp	r3, #32
 800927c:	d17b      	bne.n	8009376 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <HAL_UART_Transmit+0x26>
 8009284:	88fb      	ldrh	r3, [r7, #6]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e074      	b.n	8009378 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2221      	movs	r2, #33	; 0x21
 800929a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800929e:	f7f9 f981 	bl	80025a4 <HAL_GetTick>
 80092a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	88fa      	ldrh	r2, [r7, #6]
 80092a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	88fa      	ldrh	r2, [r7, #6]
 80092b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092bc:	d108      	bne.n	80092d0 <HAL_UART_Transmit+0x6c>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d104      	bne.n	80092d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	61bb      	str	r3, [r7, #24]
 80092ce:	e003      	b.n	80092d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092d4:	2300      	movs	r3, #0
 80092d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80092d8:	e030      	b.n	800933c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2200      	movs	r2, #0
 80092e2:	2180      	movs	r1, #128	; 0x80
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 feff 	bl	800a0e8 <UART_WaitOnFlagUntilTimeout>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d005      	beq.n	80092fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e03d      	b.n	8009378 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009310:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	3302      	adds	r3, #2
 8009316:	61bb      	str	r3, [r7, #24]
 8009318:	e007      	b.n	800932a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	781a      	ldrb	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	3301      	adds	r3, #1
 8009328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009330:	b29b      	uxth	r3, r3
 8009332:	3b01      	subs	r3, #1
 8009334:	b29a      	uxth	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009342:	b29b      	uxth	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1c8      	bne.n	80092da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2200      	movs	r2, #0
 8009350:	2140      	movs	r1, #64	; 0x40
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 fec8 	bl	800a0e8 <UART_WaitOnFlagUntilTimeout>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d005      	beq.n	800936a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2220      	movs	r2, #32
 8009362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e006      	b.n	8009378 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2220      	movs	r2, #32
 800936e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	e000      	b.n	8009378 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009376:	2302      	movs	r3, #2
  }
}
 8009378:	4618      	mov	r0, r3
 800937a:	3720      	adds	r7, #32
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009384:	b092      	sub	sp, #72	; 0x48
 8009386:	af00      	add	r7, sp, #0
 8009388:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	431a      	orrs	r2, r3
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	431a      	orrs	r2, r3
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4bbe      	ldr	r3, [pc, #760]	; (80096a8 <UART_SetConfig+0x328>)
 80093b0:	4013      	ands	r3, r2
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	6812      	ldr	r2, [r2, #0]
 80093b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093b8:	430b      	orrs	r3, r1
 80093ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4ab3      	ldr	r2, [pc, #716]	; (80096ac <UART_SetConfig+0x32c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d004      	beq.n	80093ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093e8:	4313      	orrs	r3, r2
 80093ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	4baf      	ldr	r3, [pc, #700]	; (80096b0 <UART_SetConfig+0x330>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	6812      	ldr	r2, [r2, #0]
 80093fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093fc:	430b      	orrs	r3, r1
 80093fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009406:	f023 010f 	bic.w	r1, r3, #15
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	430a      	orrs	r2, r1
 8009414:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4aa6      	ldr	r2, [pc, #664]	; (80096b4 <UART_SetConfig+0x334>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d177      	bne.n	8009510 <UART_SetConfig+0x190>
 8009420:	4ba5      	ldr	r3, [pc, #660]	; (80096b8 <UART_SetConfig+0x338>)
 8009422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009428:	2b28      	cmp	r3, #40	; 0x28
 800942a:	d86d      	bhi.n	8009508 <UART_SetConfig+0x188>
 800942c:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <UART_SetConfig+0xb4>)
 800942e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009432:	bf00      	nop
 8009434:	080094d9 	.word	0x080094d9
 8009438:	08009509 	.word	0x08009509
 800943c:	08009509 	.word	0x08009509
 8009440:	08009509 	.word	0x08009509
 8009444:	08009509 	.word	0x08009509
 8009448:	08009509 	.word	0x08009509
 800944c:	08009509 	.word	0x08009509
 8009450:	08009509 	.word	0x08009509
 8009454:	080094e1 	.word	0x080094e1
 8009458:	08009509 	.word	0x08009509
 800945c:	08009509 	.word	0x08009509
 8009460:	08009509 	.word	0x08009509
 8009464:	08009509 	.word	0x08009509
 8009468:	08009509 	.word	0x08009509
 800946c:	08009509 	.word	0x08009509
 8009470:	08009509 	.word	0x08009509
 8009474:	080094e9 	.word	0x080094e9
 8009478:	08009509 	.word	0x08009509
 800947c:	08009509 	.word	0x08009509
 8009480:	08009509 	.word	0x08009509
 8009484:	08009509 	.word	0x08009509
 8009488:	08009509 	.word	0x08009509
 800948c:	08009509 	.word	0x08009509
 8009490:	08009509 	.word	0x08009509
 8009494:	080094f1 	.word	0x080094f1
 8009498:	08009509 	.word	0x08009509
 800949c:	08009509 	.word	0x08009509
 80094a0:	08009509 	.word	0x08009509
 80094a4:	08009509 	.word	0x08009509
 80094a8:	08009509 	.word	0x08009509
 80094ac:	08009509 	.word	0x08009509
 80094b0:	08009509 	.word	0x08009509
 80094b4:	080094f9 	.word	0x080094f9
 80094b8:	08009509 	.word	0x08009509
 80094bc:	08009509 	.word	0x08009509
 80094c0:	08009509 	.word	0x08009509
 80094c4:	08009509 	.word	0x08009509
 80094c8:	08009509 	.word	0x08009509
 80094cc:	08009509 	.word	0x08009509
 80094d0:	08009509 	.word	0x08009509
 80094d4:	08009501 	.word	0x08009501
 80094d8:	2301      	movs	r3, #1
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094de:	e222      	b.n	8009926 <UART_SetConfig+0x5a6>
 80094e0:	2304      	movs	r3, #4
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e6:	e21e      	b.n	8009926 <UART_SetConfig+0x5a6>
 80094e8:	2308      	movs	r3, #8
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ee:	e21a      	b.n	8009926 <UART_SetConfig+0x5a6>
 80094f0:	2310      	movs	r3, #16
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f6:	e216      	b.n	8009926 <UART_SetConfig+0x5a6>
 80094f8:	2320      	movs	r3, #32
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fe:	e212      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009500:	2340      	movs	r3, #64	; 0x40
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009506:	e20e      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009508:	2380      	movs	r3, #128	; 0x80
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950e:	e20a      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a69      	ldr	r2, [pc, #420]	; (80096bc <UART_SetConfig+0x33c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d130      	bne.n	800957c <UART_SetConfig+0x1fc>
 800951a:	4b67      	ldr	r3, [pc, #412]	; (80096b8 <UART_SetConfig+0x338>)
 800951c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951e:	f003 0307 	and.w	r3, r3, #7
 8009522:	2b05      	cmp	r3, #5
 8009524:	d826      	bhi.n	8009574 <UART_SetConfig+0x1f4>
 8009526:	a201      	add	r2, pc, #4	; (adr r2, 800952c <UART_SetConfig+0x1ac>)
 8009528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952c:	08009545 	.word	0x08009545
 8009530:	0800954d 	.word	0x0800954d
 8009534:	08009555 	.word	0x08009555
 8009538:	0800955d 	.word	0x0800955d
 800953c:	08009565 	.word	0x08009565
 8009540:	0800956d 	.word	0x0800956d
 8009544:	2300      	movs	r3, #0
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954a:	e1ec      	b.n	8009926 <UART_SetConfig+0x5a6>
 800954c:	2304      	movs	r3, #4
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009552:	e1e8      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009554:	2308      	movs	r3, #8
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955a:	e1e4      	b.n	8009926 <UART_SetConfig+0x5a6>
 800955c:	2310      	movs	r3, #16
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009562:	e1e0      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009564:	2320      	movs	r3, #32
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956a:	e1dc      	b.n	8009926 <UART_SetConfig+0x5a6>
 800956c:	2340      	movs	r3, #64	; 0x40
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009572:	e1d8      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009574:	2380      	movs	r3, #128	; 0x80
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957a:	e1d4      	b.n	8009926 <UART_SetConfig+0x5a6>
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a4f      	ldr	r2, [pc, #316]	; (80096c0 <UART_SetConfig+0x340>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d130      	bne.n	80095e8 <UART_SetConfig+0x268>
 8009586:	4b4c      	ldr	r3, [pc, #304]	; (80096b8 <UART_SetConfig+0x338>)
 8009588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958a:	f003 0307 	and.w	r3, r3, #7
 800958e:	2b05      	cmp	r3, #5
 8009590:	d826      	bhi.n	80095e0 <UART_SetConfig+0x260>
 8009592:	a201      	add	r2, pc, #4	; (adr r2, 8009598 <UART_SetConfig+0x218>)
 8009594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009598:	080095b1 	.word	0x080095b1
 800959c:	080095b9 	.word	0x080095b9
 80095a0:	080095c1 	.word	0x080095c1
 80095a4:	080095c9 	.word	0x080095c9
 80095a8:	080095d1 	.word	0x080095d1
 80095ac:	080095d9 	.word	0x080095d9
 80095b0:	2300      	movs	r3, #0
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095b6:	e1b6      	b.n	8009926 <UART_SetConfig+0x5a6>
 80095b8:	2304      	movs	r3, #4
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095be:	e1b2      	b.n	8009926 <UART_SetConfig+0x5a6>
 80095c0:	2308      	movs	r3, #8
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095c6:	e1ae      	b.n	8009926 <UART_SetConfig+0x5a6>
 80095c8:	2310      	movs	r3, #16
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ce:	e1aa      	b.n	8009926 <UART_SetConfig+0x5a6>
 80095d0:	2320      	movs	r3, #32
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d6:	e1a6      	b.n	8009926 <UART_SetConfig+0x5a6>
 80095d8:	2340      	movs	r3, #64	; 0x40
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095de:	e1a2      	b.n	8009926 <UART_SetConfig+0x5a6>
 80095e0:	2380      	movs	r3, #128	; 0x80
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e6:	e19e      	b.n	8009926 <UART_SetConfig+0x5a6>
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a35      	ldr	r2, [pc, #212]	; (80096c4 <UART_SetConfig+0x344>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d130      	bne.n	8009654 <UART_SetConfig+0x2d4>
 80095f2:	4b31      	ldr	r3, [pc, #196]	; (80096b8 <UART_SetConfig+0x338>)
 80095f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f6:	f003 0307 	and.w	r3, r3, #7
 80095fa:	2b05      	cmp	r3, #5
 80095fc:	d826      	bhi.n	800964c <UART_SetConfig+0x2cc>
 80095fe:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <UART_SetConfig+0x284>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	0800961d 	.word	0x0800961d
 8009608:	08009625 	.word	0x08009625
 800960c:	0800962d 	.word	0x0800962d
 8009610:	08009635 	.word	0x08009635
 8009614:	0800963d 	.word	0x0800963d
 8009618:	08009645 	.word	0x08009645
 800961c:	2300      	movs	r3, #0
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009622:	e180      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009624:	2304      	movs	r3, #4
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962a:	e17c      	b.n	8009926 <UART_SetConfig+0x5a6>
 800962c:	2308      	movs	r3, #8
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009632:	e178      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009634:	2310      	movs	r3, #16
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963a:	e174      	b.n	8009926 <UART_SetConfig+0x5a6>
 800963c:	2320      	movs	r3, #32
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009642:	e170      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009644:	2340      	movs	r3, #64	; 0x40
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964a:	e16c      	b.n	8009926 <UART_SetConfig+0x5a6>
 800964c:	2380      	movs	r3, #128	; 0x80
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009652:	e168      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a1b      	ldr	r2, [pc, #108]	; (80096c8 <UART_SetConfig+0x348>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d142      	bne.n	80096e4 <UART_SetConfig+0x364>
 800965e:	4b16      	ldr	r3, [pc, #88]	; (80096b8 <UART_SetConfig+0x338>)
 8009660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	2b05      	cmp	r3, #5
 8009668:	d838      	bhi.n	80096dc <UART_SetConfig+0x35c>
 800966a:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <UART_SetConfig+0x2f0>)
 800966c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009670:	08009689 	.word	0x08009689
 8009674:	08009691 	.word	0x08009691
 8009678:	08009699 	.word	0x08009699
 800967c:	080096a1 	.word	0x080096a1
 8009680:	080096cd 	.word	0x080096cd
 8009684:	080096d5 	.word	0x080096d5
 8009688:	2300      	movs	r3, #0
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968e:	e14a      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009690:	2304      	movs	r3, #4
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009696:	e146      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009698:	2308      	movs	r3, #8
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800969e:	e142      	b.n	8009926 <UART_SetConfig+0x5a6>
 80096a0:	2310      	movs	r3, #16
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a6:	e13e      	b.n	8009926 <UART_SetConfig+0x5a6>
 80096a8:	cfff69f3 	.word	0xcfff69f3
 80096ac:	58000c00 	.word	0x58000c00
 80096b0:	11fff4ff 	.word	0x11fff4ff
 80096b4:	40011000 	.word	0x40011000
 80096b8:	58024400 	.word	0x58024400
 80096bc:	40004400 	.word	0x40004400
 80096c0:	40004800 	.word	0x40004800
 80096c4:	40004c00 	.word	0x40004c00
 80096c8:	40005000 	.word	0x40005000
 80096cc:	2320      	movs	r3, #32
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d2:	e128      	b.n	8009926 <UART_SetConfig+0x5a6>
 80096d4:	2340      	movs	r3, #64	; 0x40
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096da:	e124      	b.n	8009926 <UART_SetConfig+0x5a6>
 80096dc:	2380      	movs	r3, #128	; 0x80
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096e2:	e120      	b.n	8009926 <UART_SetConfig+0x5a6>
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4acb      	ldr	r2, [pc, #812]	; (8009a18 <UART_SetConfig+0x698>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d176      	bne.n	80097dc <UART_SetConfig+0x45c>
 80096ee:	4bcb      	ldr	r3, [pc, #812]	; (8009a1c <UART_SetConfig+0x69c>)
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096f6:	2b28      	cmp	r3, #40	; 0x28
 80096f8:	d86c      	bhi.n	80097d4 <UART_SetConfig+0x454>
 80096fa:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <UART_SetConfig+0x380>)
 80096fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009700:	080097a5 	.word	0x080097a5
 8009704:	080097d5 	.word	0x080097d5
 8009708:	080097d5 	.word	0x080097d5
 800970c:	080097d5 	.word	0x080097d5
 8009710:	080097d5 	.word	0x080097d5
 8009714:	080097d5 	.word	0x080097d5
 8009718:	080097d5 	.word	0x080097d5
 800971c:	080097d5 	.word	0x080097d5
 8009720:	080097ad 	.word	0x080097ad
 8009724:	080097d5 	.word	0x080097d5
 8009728:	080097d5 	.word	0x080097d5
 800972c:	080097d5 	.word	0x080097d5
 8009730:	080097d5 	.word	0x080097d5
 8009734:	080097d5 	.word	0x080097d5
 8009738:	080097d5 	.word	0x080097d5
 800973c:	080097d5 	.word	0x080097d5
 8009740:	080097b5 	.word	0x080097b5
 8009744:	080097d5 	.word	0x080097d5
 8009748:	080097d5 	.word	0x080097d5
 800974c:	080097d5 	.word	0x080097d5
 8009750:	080097d5 	.word	0x080097d5
 8009754:	080097d5 	.word	0x080097d5
 8009758:	080097d5 	.word	0x080097d5
 800975c:	080097d5 	.word	0x080097d5
 8009760:	080097bd 	.word	0x080097bd
 8009764:	080097d5 	.word	0x080097d5
 8009768:	080097d5 	.word	0x080097d5
 800976c:	080097d5 	.word	0x080097d5
 8009770:	080097d5 	.word	0x080097d5
 8009774:	080097d5 	.word	0x080097d5
 8009778:	080097d5 	.word	0x080097d5
 800977c:	080097d5 	.word	0x080097d5
 8009780:	080097c5 	.word	0x080097c5
 8009784:	080097d5 	.word	0x080097d5
 8009788:	080097d5 	.word	0x080097d5
 800978c:	080097d5 	.word	0x080097d5
 8009790:	080097d5 	.word	0x080097d5
 8009794:	080097d5 	.word	0x080097d5
 8009798:	080097d5 	.word	0x080097d5
 800979c:	080097d5 	.word	0x080097d5
 80097a0:	080097cd 	.word	0x080097cd
 80097a4:	2301      	movs	r3, #1
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097aa:	e0bc      	b.n	8009926 <UART_SetConfig+0x5a6>
 80097ac:	2304      	movs	r3, #4
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b2:	e0b8      	b.n	8009926 <UART_SetConfig+0x5a6>
 80097b4:	2308      	movs	r3, #8
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ba:	e0b4      	b.n	8009926 <UART_SetConfig+0x5a6>
 80097bc:	2310      	movs	r3, #16
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c2:	e0b0      	b.n	8009926 <UART_SetConfig+0x5a6>
 80097c4:	2320      	movs	r3, #32
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ca:	e0ac      	b.n	8009926 <UART_SetConfig+0x5a6>
 80097cc:	2340      	movs	r3, #64	; 0x40
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d2:	e0a8      	b.n	8009926 <UART_SetConfig+0x5a6>
 80097d4:	2380      	movs	r3, #128	; 0x80
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097da:	e0a4      	b.n	8009926 <UART_SetConfig+0x5a6>
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a8f      	ldr	r2, [pc, #572]	; (8009a20 <UART_SetConfig+0x6a0>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d130      	bne.n	8009848 <UART_SetConfig+0x4c8>
 80097e6:	4b8d      	ldr	r3, [pc, #564]	; (8009a1c <UART_SetConfig+0x69c>)
 80097e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ea:	f003 0307 	and.w	r3, r3, #7
 80097ee:	2b05      	cmp	r3, #5
 80097f0:	d826      	bhi.n	8009840 <UART_SetConfig+0x4c0>
 80097f2:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <UART_SetConfig+0x478>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	08009811 	.word	0x08009811
 80097fc:	08009819 	.word	0x08009819
 8009800:	08009821 	.word	0x08009821
 8009804:	08009829 	.word	0x08009829
 8009808:	08009831 	.word	0x08009831
 800980c:	08009839 	.word	0x08009839
 8009810:	2300      	movs	r3, #0
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009816:	e086      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009818:	2304      	movs	r3, #4
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981e:	e082      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009820:	2308      	movs	r3, #8
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009826:	e07e      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009828:	2310      	movs	r3, #16
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982e:	e07a      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009830:	2320      	movs	r3, #32
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009836:	e076      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009838:	2340      	movs	r3, #64	; 0x40
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983e:	e072      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009840:	2380      	movs	r3, #128	; 0x80
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009846:	e06e      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a75      	ldr	r2, [pc, #468]	; (8009a24 <UART_SetConfig+0x6a4>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d130      	bne.n	80098b4 <UART_SetConfig+0x534>
 8009852:	4b72      	ldr	r3, [pc, #456]	; (8009a1c <UART_SetConfig+0x69c>)
 8009854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	2b05      	cmp	r3, #5
 800985c:	d826      	bhi.n	80098ac <UART_SetConfig+0x52c>
 800985e:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <UART_SetConfig+0x4e4>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	0800987d 	.word	0x0800987d
 8009868:	08009885 	.word	0x08009885
 800986c:	0800988d 	.word	0x0800988d
 8009870:	08009895 	.word	0x08009895
 8009874:	0800989d 	.word	0x0800989d
 8009878:	080098a5 	.word	0x080098a5
 800987c:	2300      	movs	r3, #0
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009882:	e050      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009884:	2304      	movs	r3, #4
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988a:	e04c      	b.n	8009926 <UART_SetConfig+0x5a6>
 800988c:	2308      	movs	r3, #8
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009892:	e048      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009894:	2310      	movs	r3, #16
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989a:	e044      	b.n	8009926 <UART_SetConfig+0x5a6>
 800989c:	2320      	movs	r3, #32
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a2:	e040      	b.n	8009926 <UART_SetConfig+0x5a6>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098aa:	e03c      	b.n	8009926 <UART_SetConfig+0x5a6>
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b2:	e038      	b.n	8009926 <UART_SetConfig+0x5a6>
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a5b      	ldr	r2, [pc, #364]	; (8009a28 <UART_SetConfig+0x6a8>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d130      	bne.n	8009920 <UART_SetConfig+0x5a0>
 80098be:	4b57      	ldr	r3, [pc, #348]	; (8009a1c <UART_SetConfig+0x69c>)
 80098c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c2:	f003 0307 	and.w	r3, r3, #7
 80098c6:	2b05      	cmp	r3, #5
 80098c8:	d826      	bhi.n	8009918 <UART_SetConfig+0x598>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <UART_SetConfig+0x550>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	080098e9 	.word	0x080098e9
 80098d4:	080098f1 	.word	0x080098f1
 80098d8:	080098f9 	.word	0x080098f9
 80098dc:	08009901 	.word	0x08009901
 80098e0:	08009909 	.word	0x08009909
 80098e4:	08009911 	.word	0x08009911
 80098e8:	2302      	movs	r3, #2
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ee:	e01a      	b.n	8009926 <UART_SetConfig+0x5a6>
 80098f0:	2304      	movs	r3, #4
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098f6:	e016      	b.n	8009926 <UART_SetConfig+0x5a6>
 80098f8:	2308      	movs	r3, #8
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098fe:	e012      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009900:	2310      	movs	r3, #16
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009906:	e00e      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009908:	2320      	movs	r3, #32
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990e:	e00a      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009910:	2340      	movs	r3, #64	; 0x40
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009916:	e006      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009918:	2380      	movs	r3, #128	; 0x80
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991e:	e002      	b.n	8009926 <UART_SetConfig+0x5a6>
 8009920:	2380      	movs	r3, #128	; 0x80
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a3f      	ldr	r2, [pc, #252]	; (8009a28 <UART_SetConfig+0x6a8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	f040 80f8 	bne.w	8009b22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009932:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009936:	2b20      	cmp	r3, #32
 8009938:	dc46      	bgt.n	80099c8 <UART_SetConfig+0x648>
 800993a:	2b02      	cmp	r3, #2
 800993c:	f2c0 8082 	blt.w	8009a44 <UART_SetConfig+0x6c4>
 8009940:	3b02      	subs	r3, #2
 8009942:	2b1e      	cmp	r3, #30
 8009944:	d87e      	bhi.n	8009a44 <UART_SetConfig+0x6c4>
 8009946:	a201      	add	r2, pc, #4	; (adr r2, 800994c <UART_SetConfig+0x5cc>)
 8009948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994c:	080099cf 	.word	0x080099cf
 8009950:	08009a45 	.word	0x08009a45
 8009954:	080099d7 	.word	0x080099d7
 8009958:	08009a45 	.word	0x08009a45
 800995c:	08009a45 	.word	0x08009a45
 8009960:	08009a45 	.word	0x08009a45
 8009964:	080099e7 	.word	0x080099e7
 8009968:	08009a45 	.word	0x08009a45
 800996c:	08009a45 	.word	0x08009a45
 8009970:	08009a45 	.word	0x08009a45
 8009974:	08009a45 	.word	0x08009a45
 8009978:	08009a45 	.word	0x08009a45
 800997c:	08009a45 	.word	0x08009a45
 8009980:	08009a45 	.word	0x08009a45
 8009984:	080099f7 	.word	0x080099f7
 8009988:	08009a45 	.word	0x08009a45
 800998c:	08009a45 	.word	0x08009a45
 8009990:	08009a45 	.word	0x08009a45
 8009994:	08009a45 	.word	0x08009a45
 8009998:	08009a45 	.word	0x08009a45
 800999c:	08009a45 	.word	0x08009a45
 80099a0:	08009a45 	.word	0x08009a45
 80099a4:	08009a45 	.word	0x08009a45
 80099a8:	08009a45 	.word	0x08009a45
 80099ac:	08009a45 	.word	0x08009a45
 80099b0:	08009a45 	.word	0x08009a45
 80099b4:	08009a45 	.word	0x08009a45
 80099b8:	08009a45 	.word	0x08009a45
 80099bc:	08009a45 	.word	0x08009a45
 80099c0:	08009a45 	.word	0x08009a45
 80099c4:	08009a37 	.word	0x08009a37
 80099c8:	2b40      	cmp	r3, #64	; 0x40
 80099ca:	d037      	beq.n	8009a3c <UART_SetConfig+0x6bc>
 80099cc:	e03a      	b.n	8009a44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80099ce:	f7fd fad3 	bl	8006f78 <HAL_RCCEx_GetD3PCLK1Freq>
 80099d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80099d4:	e03c      	b.n	8009a50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fd fae2 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099e4:	e034      	b.n	8009a50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099e6:	f107 0318 	add.w	r3, r7, #24
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fd fc2e 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099f4:	e02c      	b.n	8009a50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099f6:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <UART_SetConfig+0x69c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 0320 	and.w	r3, r3, #32
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d016      	beq.n	8009a30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a02:	4b06      	ldr	r3, [pc, #24]	; (8009a1c <UART_SetConfig+0x69c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	08db      	lsrs	r3, r3, #3
 8009a08:	f003 0303 	and.w	r3, r3, #3
 8009a0c:	4a07      	ldr	r2, [pc, #28]	; (8009a2c <UART_SetConfig+0x6ac>)
 8009a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a14:	e01c      	b.n	8009a50 <UART_SetConfig+0x6d0>
 8009a16:	bf00      	nop
 8009a18:	40011400 	.word	0x40011400
 8009a1c:	58024400 	.word	0x58024400
 8009a20:	40007800 	.word	0x40007800
 8009a24:	40007c00 	.word	0x40007c00
 8009a28:	58000c00 	.word	0x58000c00
 8009a2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009a30:	4b9d      	ldr	r3, [pc, #628]	; (8009ca8 <UART_SetConfig+0x928>)
 8009a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a34:	e00c      	b.n	8009a50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a36:	4b9d      	ldr	r3, [pc, #628]	; (8009cac <UART_SetConfig+0x92c>)
 8009a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a3a:	e009      	b.n	8009a50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a42:	e005      	b.n	8009a50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009a4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f000 81de 	beq.w	8009e14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	4a94      	ldr	r2, [pc, #592]	; (8009cb0 <UART_SetConfig+0x930>)
 8009a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a6a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	4613      	mov	r3, r2
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	4413      	add	r3, r2
 8009a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d305      	bcc.n	8009a88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d903      	bls.n	8009a90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a8e:	e1c1      	b.n	8009e14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a92:	2200      	movs	r2, #0
 8009a94:	60bb      	str	r3, [r7, #8]
 8009a96:	60fa      	str	r2, [r7, #12]
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	4a84      	ldr	r2, [pc, #528]	; (8009cb0 <UART_SetConfig+0x930>)
 8009a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	603b      	str	r3, [r7, #0]
 8009aa8:	607a      	str	r2, [r7, #4]
 8009aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ab2:	f7f6 fc6d 	bl	8000390 <__aeabi_uldivmod>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4610      	mov	r0, r2
 8009abc:	4619      	mov	r1, r3
 8009abe:	f04f 0200 	mov.w	r2, #0
 8009ac2:	f04f 0300 	mov.w	r3, #0
 8009ac6:	020b      	lsls	r3, r1, #8
 8009ac8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009acc:	0202      	lsls	r2, r0, #8
 8009ace:	6979      	ldr	r1, [r7, #20]
 8009ad0:	6849      	ldr	r1, [r1, #4]
 8009ad2:	0849      	lsrs	r1, r1, #1
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	4605      	mov	r5, r0
 8009ada:	eb12 0804 	adds.w	r8, r2, r4
 8009ade:	eb43 0905 	adc.w	r9, r3, r5
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	469a      	mov	sl, r3
 8009aea:	4693      	mov	fp, r2
 8009aec:	4652      	mov	r2, sl
 8009aee:	465b      	mov	r3, fp
 8009af0:	4640      	mov	r0, r8
 8009af2:	4649      	mov	r1, r9
 8009af4:	f7f6 fc4c 	bl	8000390 <__aeabi_uldivmod>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4613      	mov	r3, r2
 8009afe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b06:	d308      	bcc.n	8009b1a <UART_SetConfig+0x79a>
 8009b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b0e:	d204      	bcs.n	8009b1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b16:	60da      	str	r2, [r3, #12]
 8009b18:	e17c      	b.n	8009e14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009b20:	e178      	b.n	8009e14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b2a:	f040 80c5 	bne.w	8009cb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009b2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	dc48      	bgt.n	8009bc8 <UART_SetConfig+0x848>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	db7b      	blt.n	8009c32 <UART_SetConfig+0x8b2>
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d879      	bhi.n	8009c32 <UART_SetConfig+0x8b2>
 8009b3e:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <UART_SetConfig+0x7c4>)
 8009b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b44:	08009bcf 	.word	0x08009bcf
 8009b48:	08009bd7 	.word	0x08009bd7
 8009b4c:	08009c33 	.word	0x08009c33
 8009b50:	08009c33 	.word	0x08009c33
 8009b54:	08009bdf 	.word	0x08009bdf
 8009b58:	08009c33 	.word	0x08009c33
 8009b5c:	08009c33 	.word	0x08009c33
 8009b60:	08009c33 	.word	0x08009c33
 8009b64:	08009bef 	.word	0x08009bef
 8009b68:	08009c33 	.word	0x08009c33
 8009b6c:	08009c33 	.word	0x08009c33
 8009b70:	08009c33 	.word	0x08009c33
 8009b74:	08009c33 	.word	0x08009c33
 8009b78:	08009c33 	.word	0x08009c33
 8009b7c:	08009c33 	.word	0x08009c33
 8009b80:	08009c33 	.word	0x08009c33
 8009b84:	08009bff 	.word	0x08009bff
 8009b88:	08009c33 	.word	0x08009c33
 8009b8c:	08009c33 	.word	0x08009c33
 8009b90:	08009c33 	.word	0x08009c33
 8009b94:	08009c33 	.word	0x08009c33
 8009b98:	08009c33 	.word	0x08009c33
 8009b9c:	08009c33 	.word	0x08009c33
 8009ba0:	08009c33 	.word	0x08009c33
 8009ba4:	08009c33 	.word	0x08009c33
 8009ba8:	08009c33 	.word	0x08009c33
 8009bac:	08009c33 	.word	0x08009c33
 8009bb0:	08009c33 	.word	0x08009c33
 8009bb4:	08009c33 	.word	0x08009c33
 8009bb8:	08009c33 	.word	0x08009c33
 8009bbc:	08009c33 	.word	0x08009c33
 8009bc0:	08009c33 	.word	0x08009c33
 8009bc4:	08009c25 	.word	0x08009c25
 8009bc8:	2b40      	cmp	r3, #64	; 0x40
 8009bca:	d02e      	beq.n	8009c2a <UART_SetConfig+0x8aa>
 8009bcc:	e031      	b.n	8009c32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bce:	f7fb f9dd 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8009bd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009bd4:	e033      	b.n	8009c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bd6:	f7fb f9ef 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 8009bda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009bdc:	e02f      	b.n	8009c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fd f9de 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bec:	e027      	b.n	8009c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bee:	f107 0318 	add.w	r3, r7, #24
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fd fb2a 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bfc:	e01f      	b.n	8009c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bfe:	4b2d      	ldr	r3, [pc, #180]	; (8009cb4 <UART_SetConfig+0x934>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d009      	beq.n	8009c1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c0a:	4b2a      	ldr	r3, [pc, #168]	; (8009cb4 <UART_SetConfig+0x934>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	08db      	lsrs	r3, r3, #3
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	4a24      	ldr	r2, [pc, #144]	; (8009ca8 <UART_SetConfig+0x928>)
 8009c16:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c1c:	e00f      	b.n	8009c3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c1e:	4b22      	ldr	r3, [pc, #136]	; (8009ca8 <UART_SetConfig+0x928>)
 8009c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c22:	e00c      	b.n	8009c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c24:	4b21      	ldr	r3, [pc, #132]	; (8009cac <UART_SetConfig+0x92c>)
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c28:	e009      	b.n	8009c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c30:	e005      	b.n	8009c3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 80e7 	beq.w	8009e14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	4a19      	ldr	r2, [pc, #100]	; (8009cb0 <UART_SetConfig+0x930>)
 8009c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c50:	461a      	mov	r2, r3
 8009c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c58:	005a      	lsls	r2, r3, #1
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	085b      	lsrs	r3, r3, #1
 8009c60:	441a      	add	r2, r3
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6e:	2b0f      	cmp	r3, #15
 8009c70:	d916      	bls.n	8009ca0 <UART_SetConfig+0x920>
 8009c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c78:	d212      	bcs.n	8009ca0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	f023 030f 	bic.w	r3, r3, #15
 8009c82:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c86:	085b      	lsrs	r3, r3, #1
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f003 0307 	and.w	r3, r3, #7
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c92:	4313      	orrs	r3, r2
 8009c94:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009c9c:	60da      	str	r2, [r3, #12]
 8009c9e:	e0b9      	b.n	8009e14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ca6:	e0b5      	b.n	8009e14 <UART_SetConfig+0xa94>
 8009ca8:	03d09000 	.word	0x03d09000
 8009cac:	003d0900 	.word	0x003d0900
 8009cb0:	0800e058 	.word	0x0800e058
 8009cb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cbc:	2b20      	cmp	r3, #32
 8009cbe:	dc49      	bgt.n	8009d54 <UART_SetConfig+0x9d4>
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	db7c      	blt.n	8009dbe <UART_SetConfig+0xa3e>
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d87a      	bhi.n	8009dbe <UART_SetConfig+0xa3e>
 8009cc8:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <UART_SetConfig+0x950>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009d5b 	.word	0x08009d5b
 8009cd4:	08009d63 	.word	0x08009d63
 8009cd8:	08009dbf 	.word	0x08009dbf
 8009cdc:	08009dbf 	.word	0x08009dbf
 8009ce0:	08009d6b 	.word	0x08009d6b
 8009ce4:	08009dbf 	.word	0x08009dbf
 8009ce8:	08009dbf 	.word	0x08009dbf
 8009cec:	08009dbf 	.word	0x08009dbf
 8009cf0:	08009d7b 	.word	0x08009d7b
 8009cf4:	08009dbf 	.word	0x08009dbf
 8009cf8:	08009dbf 	.word	0x08009dbf
 8009cfc:	08009dbf 	.word	0x08009dbf
 8009d00:	08009dbf 	.word	0x08009dbf
 8009d04:	08009dbf 	.word	0x08009dbf
 8009d08:	08009dbf 	.word	0x08009dbf
 8009d0c:	08009dbf 	.word	0x08009dbf
 8009d10:	08009d8b 	.word	0x08009d8b
 8009d14:	08009dbf 	.word	0x08009dbf
 8009d18:	08009dbf 	.word	0x08009dbf
 8009d1c:	08009dbf 	.word	0x08009dbf
 8009d20:	08009dbf 	.word	0x08009dbf
 8009d24:	08009dbf 	.word	0x08009dbf
 8009d28:	08009dbf 	.word	0x08009dbf
 8009d2c:	08009dbf 	.word	0x08009dbf
 8009d30:	08009dbf 	.word	0x08009dbf
 8009d34:	08009dbf 	.word	0x08009dbf
 8009d38:	08009dbf 	.word	0x08009dbf
 8009d3c:	08009dbf 	.word	0x08009dbf
 8009d40:	08009dbf 	.word	0x08009dbf
 8009d44:	08009dbf 	.word	0x08009dbf
 8009d48:	08009dbf 	.word	0x08009dbf
 8009d4c:	08009dbf 	.word	0x08009dbf
 8009d50:	08009db1 	.word	0x08009db1
 8009d54:	2b40      	cmp	r3, #64	; 0x40
 8009d56:	d02e      	beq.n	8009db6 <UART_SetConfig+0xa36>
 8009d58:	e031      	b.n	8009dbe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d5a:	f7fb f917 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8009d5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d60:	e033      	b.n	8009dca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d62:	f7fb f929 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 8009d66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d68:	e02f      	b.n	8009dca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fd f918 	bl	8006fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d78:	e027      	b.n	8009dca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d7a:	f107 0318 	add.w	r3, r7, #24
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fd fa64 	bl	800724c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d88:	e01f      	b.n	8009dca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d8a:	4b2d      	ldr	r3, [pc, #180]	; (8009e40 <UART_SetConfig+0xac0>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d009      	beq.n	8009daa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d96:	4b2a      	ldr	r3, [pc, #168]	; (8009e40 <UART_SetConfig+0xac0>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	08db      	lsrs	r3, r3, #3
 8009d9c:	f003 0303 	and.w	r3, r3, #3
 8009da0:	4a28      	ldr	r2, [pc, #160]	; (8009e44 <UART_SetConfig+0xac4>)
 8009da2:	fa22 f303 	lsr.w	r3, r2, r3
 8009da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009da8:	e00f      	b.n	8009dca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009daa:	4b26      	ldr	r3, [pc, #152]	; (8009e44 <UART_SetConfig+0xac4>)
 8009dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dae:	e00c      	b.n	8009dca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009db0:	4b25      	ldr	r3, [pc, #148]	; (8009e48 <UART_SetConfig+0xac8>)
 8009db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db4:	e009      	b.n	8009dca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dbc:	e005      	b.n	8009dca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009dc8:	bf00      	nop
    }

    if (pclk != 0U)
 8009dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d021      	beq.n	8009e14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	4a1d      	ldr	r2, [pc, #116]	; (8009e4c <UART_SetConfig+0xacc>)
 8009dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dde:	fbb3 f2f2 	udiv	r2, r3, r2
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	441a      	add	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df6:	2b0f      	cmp	r3, #15
 8009df8:	d909      	bls.n	8009e0e <UART_SetConfig+0xa8e>
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e00:	d205      	bcs.n	8009e0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	60da      	str	r2, [r3, #12]
 8009e0c:	e002      	b.n	8009e14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2200      	movs	r2, #0
 8009e28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009e30:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3748      	adds	r7, #72	; 0x48
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e3e:	bf00      	nop
 8009e40:	58024400 	.word	0x58024400
 8009e44:	03d09000 	.word	0x03d09000
 8009e48:	003d0900 	.word	0x003d0900
 8009e4c:	0800e058 	.word	0x0800e058

08009e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00a      	beq.n	8009e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00a      	beq.n	8009e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00a      	beq.n	8009ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec2:	f003 0308 	and.w	r3, r3, #8
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00a      	beq.n	8009ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee4:	f003 0310 	and.w	r3, r3, #16
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00a      	beq.n	8009f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f06:	f003 0320 	and.w	r3, r3, #32
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d01a      	beq.n	8009f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f4e:	d10a      	bne.n	8009f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00a      	beq.n	8009f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	430a      	orrs	r2, r1
 8009f86:	605a      	str	r2, [r3, #4]
  }
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b098      	sub	sp, #96	; 0x60
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fa4:	f7f8 fafe 	bl	80025a4 <HAL_GetTick>
 8009fa8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0308 	and.w	r3, r3, #8
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	d12f      	bne.n	800a018 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f88e 	bl	800a0e8 <UART_WaitOnFlagUntilTimeout>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d022      	beq.n	800a018 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	e853 3f00 	ldrex	r3, [r3]
 8009fde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	461a      	mov	r2, r3
 8009fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ff2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ff8:	e841 2300 	strex	r3, r2, [r1]
 8009ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1e6      	bne.n	8009fd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2220      	movs	r2, #32
 800a008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e063      	b.n	800a0e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0304 	and.w	r3, r3, #4
 800a022:	2b04      	cmp	r3, #4
 800a024:	d149      	bne.n	800a0ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a026:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a02e:	2200      	movs	r2, #0
 800a030:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f857 	bl	800a0e8 <UART_WaitOnFlagUntilTimeout>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d03c      	beq.n	800a0ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	623b      	str	r3, [r7, #32]
   return(result);
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a054:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a05e:	633b      	str	r3, [r7, #48]	; 0x30
 800a060:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e6      	bne.n	800a040 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3308      	adds	r3, #8
 800a078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	60fb      	str	r3, [r7, #12]
   return(result);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f023 0301 	bic.w	r3, r3, #1
 800a088:	64bb      	str	r3, [r7, #72]	; 0x48
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3308      	adds	r3, #8
 800a090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a092:	61fa      	str	r2, [r7, #28]
 800a094:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	69b9      	ldr	r1, [r7, #24]
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	617b      	str	r3, [r7, #20]
   return(result);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e5      	bne.n	800a072 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e012      	b.n	800a0e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3758      	adds	r7, #88	; 0x58
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	603b      	str	r3, [r7, #0]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0f8:	e049      	b.n	800a18e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a100:	d045      	beq.n	800a18e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a102:	f7f8 fa4f 	bl	80025a4 <HAL_GetTick>
 800a106:	4602      	mov	r2, r0
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d302      	bcc.n	800a118 <UART_WaitOnFlagUntilTimeout+0x30>
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e048      	b.n	800a1ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	d031      	beq.n	800a18e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	f003 0308 	and.w	r3, r3, #8
 800a134:	2b08      	cmp	r3, #8
 800a136:	d110      	bne.n	800a15a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2208      	movs	r2, #8
 800a13e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f839 	bl	800a1b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2208      	movs	r2, #8
 800a14a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e029      	b.n	800a1ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a168:	d111      	bne.n	800a18e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f81f 	bl	800a1b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e00f      	b.n	800a1ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69da      	ldr	r2, [r3, #28]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	4013      	ands	r3, r2
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	bf0c      	ite	eq
 800a19e:	2301      	moveq	r3, #1
 800a1a0:	2300      	movne	r3, #0
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d0a6      	beq.n	800a0fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b095      	sub	sp, #84	; 0x54
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1de:	643b      	str	r3, [r7, #64]	; 0x40
 800a1e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e6      	bne.n	800a1c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	61fb      	str	r3, [r7, #28]
   return(result);
 800a202:	69fa      	ldr	r2, [r7, #28]
 800a204:	4b1e      	ldr	r3, [pc, #120]	; (800a280 <UART_EndRxTransfer+0xc8>)
 800a206:	4013      	ands	r3, r2
 800a208:	64bb      	str	r3, [r7, #72]	; 0x48
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3308      	adds	r3, #8
 800a210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a212:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a214:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e5      	bne.n	800a1f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d118      	bne.n	800a260 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	e853 3f00 	ldrex	r3, [r3]
 800a23a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	f023 0310 	bic.w	r3, r3, #16
 800a242:	647b      	str	r3, [r7, #68]	; 0x44
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a24c:	61bb      	str	r3, [r7, #24]
 800a24e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a250:	6979      	ldr	r1, [r7, #20]
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	e841 2300 	strex	r3, r2, [r1]
 800a258:	613b      	str	r3, [r7, #16]
   return(result);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e6      	bne.n	800a22e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a274:	bf00      	nop
 800a276:	3754      	adds	r7, #84	; 0x54
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	effffffe 	.word	0xeffffffe

0800a284 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_UARTEx_DisableFifoMode+0x16>
 800a296:	2302      	movs	r3, #2
 800a298:	e027      	b.n	800a2ea <HAL_UARTEx_DisableFifoMode+0x66>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2224      	movs	r2, #36	; 0x24
 800a2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0201 	bic.w	r2, r2, #1
 800a2c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a30a:	2302      	movs	r3, #2
 800a30c:	e02d      	b.n	800a36a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2224      	movs	r2, #36	; 0x24
 800a31a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0201 	bic.w	r2, r2, #1
 800a334:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f850 	bl	800a3f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a386:	2302      	movs	r3, #2
 800a388:	e02d      	b.n	800a3e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2224      	movs	r2, #36	; 0x24
 800a396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0201 	bic.w	r2, r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f812 	bl	800a3f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d108      	bne.n	800a412 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a410:	e031      	b.n	800a476 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a412:	2310      	movs	r3, #16
 800a414:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a416:	2310      	movs	r3, #16
 800a418:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	0e5b      	lsrs	r3, r3, #25
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f003 0307 	and.w	r3, r3, #7
 800a428:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	0f5b      	lsrs	r3, r3, #29
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 0307 	and.w	r3, r3, #7
 800a438:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	7b3a      	ldrb	r2, [r7, #12]
 800a43e:	4911      	ldr	r1, [pc, #68]	; (800a484 <UARTEx_SetNbDataToProcess+0x94>)
 800a440:	5c8a      	ldrb	r2, [r1, r2]
 800a442:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a446:	7b3a      	ldrb	r2, [r7, #12]
 800a448:	490f      	ldr	r1, [pc, #60]	; (800a488 <UARTEx_SetNbDataToProcess+0x98>)
 800a44a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a44c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a450:	b29a      	uxth	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	7b7a      	ldrb	r2, [r7, #13]
 800a45c:	4909      	ldr	r1, [pc, #36]	; (800a484 <UARTEx_SetNbDataToProcess+0x94>)
 800a45e:	5c8a      	ldrb	r2, [r1, r2]
 800a460:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a464:	7b7a      	ldrb	r2, [r7, #13]
 800a466:	4908      	ldr	r1, [pc, #32]	; (800a488 <UARTEx_SetNbDataToProcess+0x98>)
 800a468:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a46a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a46e:	b29a      	uxth	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a476:	bf00      	nop
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	0800e070 	.word	0x0800e070
 800a488:	0800e078 	.word	0x0800e078

0800a48c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a48c:	b084      	sub	sp, #16
 800a48e:	b480      	push	{r7}
 800a490:	b085      	sub	sp, #20
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	f107 001c 	add.w	r0, r7, #28
 800a49a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a4a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a4a6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a4aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a4ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a4b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <SDMMC_Init+0x50>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	b004      	add	sp, #16
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	ffc02c00 	.word	0xffc02c00

0800a4e0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f043 0203 	orr.w	r2, r3, #3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0303 	and.w	r3, r3, #3
}
 800a54e:	4618      	mov	r0, r3
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
	...

0800a55c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a57a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a580:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a586:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	4b06      	ldr	r3, [pc, #24]	; (800a5ac <SDMMC_SendCommand+0x50>)
 800a594:	4013      	ands	r3, r2
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	fffee0c0 	.word	0xfffee0c0

0800a5b0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	b2db      	uxtb	r3, r3
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b085      	sub	sp, #20
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3314      	adds	r3, #20
 800a5d8:	461a      	mov	r2, r3
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	4413      	add	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a616:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a61c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a622:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	4313      	orrs	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	431a      	orrs	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0

}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b088      	sub	sp, #32
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a656:	2310      	movs	r3, #16
 800a658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a65a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a65e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a660:	2300      	movs	r3, #0
 800a662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a66a:	f107 0308 	add.w	r3, r7, #8
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ff73 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a676:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67a:	2110      	movs	r1, #16
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fa5f 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a684:	69fb      	ldr	r3, [r7, #28]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3720      	adds	r7, #32
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b088      	sub	sp, #32
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a69c:	2311      	movs	r3, #17
 800a69e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6b0:	f107 0308 	add.w	r3, r7, #8
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff ff50 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6c0:	2111      	movs	r1, #17
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa3c 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a6c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ca:	69fb      	ldr	r3, [r7, #28]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3720      	adds	r7, #32
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b088      	sub	sp, #32
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a6e2:	2312      	movs	r3, #18
 800a6e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6f6:	f107 0308 	add.w	r3, r7, #8
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff ff2d 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a702:	f241 3288 	movw	r2, #5000	; 0x1388
 800a706:	2112      	movs	r1, #18
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fa19 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a70e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a710:	69fb      	ldr	r3, [r7, #28]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3720      	adds	r7, #32
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b088      	sub	sp, #32
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a728:	2318      	movs	r3, #24
 800a72a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a72c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a732:	2300      	movs	r3, #0
 800a734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a73a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a73c:	f107 0308 	add.w	r3, r7, #8
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7ff ff0a 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a748:	f241 3288 	movw	r2, #5000	; 0x1388
 800a74c:	2118      	movs	r1, #24
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f9f6 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a756:	69fb      	ldr	r3, [r7, #28]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3720      	adds	r7, #32
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a76e:	2319      	movs	r3, #25
 800a770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a772:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a778:	2300      	movs	r3, #0
 800a77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a77c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a782:	f107 0308 	add.w	r3, r7, #8
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff fee7 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a78e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a792:	2119      	movs	r1, #25
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f9d3 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a79c:	69fb      	ldr	r3, [r7, #28]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3720      	adds	r7, #32
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a7b4:	230c      	movs	r3, #12
 800a7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7c6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7e0:	f107 0308 	add.w	r3, r7, #8
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f7ff feb8 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a7ec:	4a0b      	ldr	r2, [pc, #44]	; (800a81c <SDMMC_CmdStopTransfer+0x74>)
 800a7ee:	210c      	movs	r1, #12
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f9a5 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a7f6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a80a:	d101      	bne.n	800a810 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a80c:	2300      	movs	r3, #0
 800a80e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a810:	69fb      	ldr	r3, [r7, #28]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	05f5e100 	.word	0x05f5e100

0800a820 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b088      	sub	sp, #32
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a82e:	2307      	movs	r3, #7
 800a830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a832:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a838:	2300      	movs	r3, #0
 800a83a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a83c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a840:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7ff fe87 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a84e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a852:	2107      	movs	r1, #7
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f973 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a85a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a85c:	69fb      	ldr	r3, [r7, #28]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3720      	adds	r7, #32
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b088      	sub	sp, #32
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a876:	2300      	movs	r3, #0
 800a878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a87a:	2300      	movs	r3, #0
 800a87c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a87e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a882:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a884:	f107 0308 	add.w	r3, r7, #8
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7ff fe66 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fb97 	bl	800afc4 <SDMMC_GetCmdError>
 800a896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a898:	69fb      	ldr	r3, [r7, #28]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b088      	sub	sp, #32
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a8aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a8ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff fe46 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fb29 	bl	800af28 <SDMMC_GetCmdResp7>
 800a8d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8d8:	69fb      	ldr	r3, [r7, #28]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3720      	adds	r7, #32
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b088      	sub	sp, #32
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a8f0:	2337      	movs	r3, #55	; 0x37
 800a8f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a902:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff fe26 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a910:	f241 3288 	movw	r2, #5000	; 0x1388
 800a914:	2137      	movs	r1, #55	; 0x37
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f912 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a91c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a91e:	69fb      	ldr	r3, [r7, #28]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a936:	2329      	movs	r3, #41	; 0x29
 800a938:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a93a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a93e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a948:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a94a:	f107 0308 	add.w	r3, r7, #8
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7ff fe03 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fa2e 	bl	800adb8 <SDMMC_GetCmdResp3>
 800a95c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a95e:	69fb      	ldr	r3, [r7, #28]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a976:	2306      	movs	r3, #6
 800a978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a97a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a97e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a980:	2300      	movs	r3, #0
 800a982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a988:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fde3 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a996:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99a:	2106      	movs	r1, #6
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f8cf 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a9a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3720      	adds	r7, #32
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b088      	sub	sp, #32
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a9ba:	2333      	movs	r3, #51	; 0x33
 800a9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff fdc1 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9de:	2133      	movs	r1, #51	; 0x33
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f8ad 	bl	800ab40 <SDMMC_GetCmdResp1>
 800a9e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3720      	adds	r7, #32
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b088      	sub	sp, #32
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a9fe:	2302      	movs	r3, #2
 800aa00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa02:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa12:	f107 0308 	add.w	r3, r7, #8
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff fd9f 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f980 	bl	800ad24 <SDMMC_GetCmdResp2>
 800aa24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa26:	69fb      	ldr	r3, [r7, #28]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aa3e:	2309      	movs	r3, #9
 800aa40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa42:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa52:	f107 0308 	add.w	r3, r7, #8
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff fd7f 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f960 	bl	800ad24 <SDMMC_GetCmdResp2>
 800aa64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa66:	69fb      	ldr	r3, [r7, #28]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3720      	adds	r7, #32
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa92:	f107 0308 	add.w	r3, r7, #8
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff fd5f 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	2103      	movs	r1, #3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f9c8 	bl	800ae38 <SDMMC_GetCmdResp6>
 800aaa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaaa:	69fb      	ldr	r3, [r7, #28]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3720      	adds	r7, #32
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aac2:	230d      	movs	r3, #13
 800aac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aacc:	2300      	movs	r3, #0
 800aace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aad4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aad6:	f107 0308 	add.w	r3, r7, #8
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff fd3d 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aae2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae6:	210d      	movs	r1, #13
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f829 	bl	800ab40 <SDMMC_GetCmdResp1>
 800aaee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3720      	adds	r7, #32
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b088      	sub	sp, #32
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ab06:	230d      	movs	r3, #13
 800ab08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab10:	2300      	movs	r3, #0
 800ab12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab1a:	f107 0308 	add.w	r3, r7, #8
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff fd1b 	bl	800a55c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ab26:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab2a:	210d      	movs	r1, #13
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f807 	bl	800ab40 <SDMMC_GetCmdResp1>
 800ab32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab34:	69fb      	ldr	r3, [r7, #28]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3720      	adds	r7, #32
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
	...

0800ab40 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b088      	sub	sp, #32
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ab4e:	4b70      	ldr	r3, [pc, #448]	; (800ad10 <SDMMC_GetCmdResp1+0x1d0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a70      	ldr	r2, [pc, #448]	; (800ad14 <SDMMC_GetCmdResp1+0x1d4>)
 800ab54:	fba2 2303 	umull	r2, r3, r2, r3
 800ab58:	0a5a      	lsrs	r2, r3, #9
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	fb02 f303 	mul.w	r3, r2, r3
 800ab60:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	1e5a      	subs	r2, r3, #1
 800ab66:	61fa      	str	r2, [r7, #28]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d102      	bne.n	800ab72 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab70:	e0c9      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab76:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ab78:	69ba      	ldr	r2, [r7, #24]
 800ab7a:	4b67      	ldr	r3, [pc, #412]	; (800ad18 <SDMMC_GetCmdResp1+0x1d8>)
 800ab7c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0ef      	beq.n	800ab62 <SDMMC_GetCmdResp1+0x22>
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1ea      	bne.n	800ab62 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d004      	beq.n	800aba2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2204      	movs	r2, #4
 800ab9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab9e:	2304      	movs	r3, #4
 800aba0:	e0b1      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d004      	beq.n	800abb8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2201      	movs	r2, #1
 800abb2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e0a6      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4a58      	ldr	r2, [pc, #352]	; (800ad1c <SDMMC_GetCmdResp1+0x1dc>)
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7ff fcf6 	bl	800a5b0 <SDMMC_GetCommandResponse>
 800abc4:	4603      	mov	r3, r0
 800abc6:	461a      	mov	r2, r3
 800abc8:	7afb      	ldrb	r3, [r7, #11]
 800abca:	4293      	cmp	r3, r2
 800abcc:	d001      	beq.n	800abd2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abce:	2301      	movs	r3, #1
 800abd0:	e099      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800abd2:	2100      	movs	r1, #0
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f7ff fcf8 	bl	800a5ca <SDMMC_GetResponse>
 800abda:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	4b50      	ldr	r3, [pc, #320]	; (800ad20 <SDMMC_GetCmdResp1+0x1e0>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800abe6:	2300      	movs	r3, #0
 800abe8:	e08d      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b00      	cmp	r3, #0
 800abee:	da02      	bge.n	800abf6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800abf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abf4:	e087      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ac00:	2340      	movs	r3, #64	; 0x40
 800ac02:	e080      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ac0e:	2380      	movs	r3, #128	; 0x80
 800ac10:	e079      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ac1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac20:	e071      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ac2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac30:	e069      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ac3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac40:	e061      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ac4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac50:	e059      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac60:	e051      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac70:	e049      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ac7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac80:	e041      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ac8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac90:	e039      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ac9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aca0:	e031      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800acac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800acb0:	e029      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800acbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800acc0:	e021      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800accc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800acd0:	e019      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800acdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ace0:	e011      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800acec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800acf0:	e009      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f003 0308 	and.w	r3, r3, #8
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800acfc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad00:	e001      	b.n	800ad06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	24000000 	.word	0x24000000
 800ad14:	10624dd3 	.word	0x10624dd3
 800ad18:	00200045 	.word	0x00200045
 800ad1c:	002000c5 	.word	0x002000c5
 800ad20:	fdffe008 	.word	0xfdffe008

0800ad24 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ad2c:	4b1f      	ldr	r3, [pc, #124]	; (800adac <SDMMC_GetCmdResp2+0x88>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a1f      	ldr	r2, [pc, #124]	; (800adb0 <SDMMC_GetCmdResp2+0x8c>)
 800ad32:	fba2 2303 	umull	r2, r3, r2, r3
 800ad36:	0a5b      	lsrs	r3, r3, #9
 800ad38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad3c:	fb02 f303 	mul.w	r3, r2, r3
 800ad40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	1e5a      	subs	r2, r3, #1
 800ad46:	60fa      	str	r2, [r7, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d102      	bne.n	800ad52 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad50:	e026      	b.n	800ada0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad56:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d0ef      	beq.n	800ad42 <SDMMC_GetCmdResp2+0x1e>
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1ea      	bne.n	800ad42 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad70:	f003 0304 	and.w	r3, r3, #4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d004      	beq.n	800ad82 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2204      	movs	r2, #4
 800ad7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad7e:	2304      	movs	r3, #4
 800ad80:	e00e      	b.n	800ada0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d004      	beq.n	800ad98 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e003      	b.n	800ada0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a06      	ldr	r2, [pc, #24]	; (800adb4 <SDMMC_GetCmdResp2+0x90>)
 800ad9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	24000000 	.word	0x24000000
 800adb0:	10624dd3 	.word	0x10624dd3
 800adb4:	002000c5 	.word	0x002000c5

0800adb8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800adc0:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <SDMMC_GetCmdResp3+0x74>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a1a      	ldr	r2, [pc, #104]	; (800ae30 <SDMMC_GetCmdResp3+0x78>)
 800adc6:	fba2 2303 	umull	r2, r3, r2, r3
 800adca:	0a5b      	lsrs	r3, r3, #9
 800adcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800add0:	fb02 f303 	mul.w	r3, r2, r3
 800add4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	1e5a      	subs	r2, r3, #1
 800adda:	60fa      	str	r2, [r7, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ade0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ade4:	e01b      	b.n	800ae1e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0ef      	beq.n	800add6 <SDMMC_GetCmdResp3+0x1e>
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1ea      	bne.n	800add6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d004      	beq.n	800ae16 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2204      	movs	r2, #4
 800ae10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae12:	2304      	movs	r3, #4
 800ae14:	e003      	b.n	800ae1e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a06      	ldr	r2, [pc, #24]	; (800ae34 <SDMMC_GetCmdResp3+0x7c>)
 800ae1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	24000000 	.word	0x24000000
 800ae30:	10624dd3 	.word	0x10624dd3
 800ae34:	002000c5 	.word	0x002000c5

0800ae38 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b088      	sub	sp, #32
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	460b      	mov	r3, r1
 800ae42:	607a      	str	r2, [r7, #4]
 800ae44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae46:	4b35      	ldr	r3, [pc, #212]	; (800af1c <SDMMC_GetCmdResp6+0xe4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a35      	ldr	r2, [pc, #212]	; (800af20 <SDMMC_GetCmdResp6+0xe8>)
 800ae4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae50:	0a5b      	lsrs	r3, r3, #9
 800ae52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae56:	fb02 f303 	mul.w	r3, r2, r3
 800ae5a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	1e5a      	subs	r2, r3, #1
 800ae60:	61fa      	str	r2, [r7, #28]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d102      	bne.n	800ae6c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae6a:	e052      	b.n	800af12 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae70:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0ef      	beq.n	800ae5c <SDMMC_GetCmdResp6+0x24>
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1ea      	bne.n	800ae5c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae8a:	f003 0304 	and.w	r3, r3, #4
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d004      	beq.n	800ae9c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2204      	movs	r2, #4
 800ae96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae98:	2304      	movs	r3, #4
 800ae9a:	e03a      	b.n	800af12 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d004      	beq.n	800aeb2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e02f      	b.n	800af12 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7ff fb7c 	bl	800a5b0 <SDMMC_GetCommandResponse>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	461a      	mov	r2, r3
 800aebc:	7afb      	ldrb	r3, [r7, #11]
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d001      	beq.n	800aec6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e025      	b.n	800af12 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	4a16      	ldr	r2, [pc, #88]	; (800af24 <SDMMC_GetCmdResp6+0xec>)
 800aeca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aecc:	2100      	movs	r1, #0
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f7ff fb7b 	bl	800a5ca <SDMMC_GetResponse>
 800aed4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d106      	bne.n	800aeee <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	0c1b      	lsrs	r3, r3, #16
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	e011      	b.n	800af12 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aefc:	e009      	b.n	800af12 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af0c:	e001      	b.n	800af12 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af12:	4618      	mov	r0, r3
 800af14:	3720      	adds	r7, #32
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	24000000 	.word	0x24000000
 800af20:	10624dd3 	.word	0x10624dd3
 800af24:	002000c5 	.word	0x002000c5

0800af28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800af30:	4b22      	ldr	r3, [pc, #136]	; (800afbc <SDMMC_GetCmdResp7+0x94>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a22      	ldr	r2, [pc, #136]	; (800afc0 <SDMMC_GetCmdResp7+0x98>)
 800af36:	fba2 2303 	umull	r2, r3, r2, r3
 800af3a:	0a5b      	lsrs	r3, r3, #9
 800af3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af40:	fb02 f303 	mul.w	r3, r2, r3
 800af44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	1e5a      	subs	r2, r3, #1
 800af4a:	60fa      	str	r2, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d102      	bne.n	800af56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af54:	e02c      	b.n	800afb0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0ef      	beq.n	800af46 <SDMMC_GetCmdResp7+0x1e>
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1ea      	bne.n	800af46 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af74:	f003 0304 	and.w	r3, r3, #4
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d004      	beq.n	800af86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2204      	movs	r2, #4
 800af80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af82:	2304      	movs	r3, #4
 800af84:	e014      	b.n	800afb0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d004      	beq.n	800af9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2201      	movs	r2, #1
 800af96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af98:	2301      	movs	r3, #1
 800af9a:	e009      	b.n	800afb0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2240      	movs	r2, #64	; 0x40
 800afac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800afae:	2300      	movs	r3, #0

}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3714      	adds	r7, #20
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	24000000 	.word	0x24000000
 800afc0:	10624dd3 	.word	0x10624dd3

0800afc4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800afcc:	4b11      	ldr	r3, [pc, #68]	; (800b014 <SDMMC_GetCmdError+0x50>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a11      	ldr	r2, [pc, #68]	; (800b018 <SDMMC_GetCmdError+0x54>)
 800afd2:	fba2 2303 	umull	r2, r3, r2, r3
 800afd6:	0a5b      	lsrs	r3, r3, #9
 800afd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afdc:	fb02 f303 	mul.w	r3, r2, r3
 800afe0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	1e5a      	subs	r2, r3, #1
 800afe6:	60fa      	str	r2, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d102      	bne.n	800aff2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aff0:	e009      	b.n	800b006 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0f1      	beq.n	800afe2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a06      	ldr	r2, [pc, #24]	; (800b01c <SDMMC_GetCmdError+0x58>)
 800b002:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	24000000 	.word	0x24000000
 800b018:	10624dd3 	.word	0x10624dd3
 800b01c:	002000c5 	.word	0x002000c5

0800b020 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b024:	4904      	ldr	r1, [pc, #16]	; (800b038 <MX_FATFS_Init+0x18>)
 800b026:	4805      	ldr	r0, [pc, #20]	; (800b03c <MX_FATFS_Init+0x1c>)
 800b028:	f002 fb16 	bl	800d658 <FATFS_LinkDriver>
 800b02c:	4603      	mov	r3, r0
 800b02e:	461a      	mov	r2, r3
 800b030:	4b03      	ldr	r3, [pc, #12]	; (800b040 <MX_FATFS_Init+0x20>)
 800b032:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b034:	bf00      	nop
 800b036:	bd80      	pop	{r7, pc}
 800b038:	240002a0 	.word	0x240002a0
 800b03c:	0800e080 	.word	0x0800e080
 800b040:	2400029c 	.word	0x2400029c

0800b044 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b044:	b480      	push	{r7}
 800b046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b048:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b05e:	f000 f879 	bl	800b154 <BSP_SD_IsDetected>
 800b062:	4603      	mov	r3, r0
 800b064:	2b01      	cmp	r3, #1
 800b066:	d001      	beq.n	800b06c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b068:	2302      	movs	r3, #2
 800b06a:	e012      	b.n	800b092 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b06c:	480b      	ldr	r0, [pc, #44]	; (800b09c <BSP_SD_Init+0x48>)
 800b06e:	f7fc fcf7 	bl	8007a60 <HAL_SD_Init>
 800b072:	4603      	mov	r3, r0
 800b074:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b076:	79fb      	ldrb	r3, [r7, #7]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d109      	bne.n	800b090 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b07c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b080:	4806      	ldr	r0, [pc, #24]	; (800b09c <BSP_SD_Init+0x48>)
 800b082:	f7fd fbb3 	bl	80087ec <HAL_SD_ConfigWideBusOperation>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b090:	79fb      	ldrb	r3, [r7, #7]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	24000168 	.word	0x24000168

0800b0a0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af02      	add	r7, sp, #8
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	68f9      	ldr	r1, [r7, #12]
 800b0bc:	4806      	ldr	r0, [pc, #24]	; (800b0d8 <BSP_SD_ReadBlocks+0x38>)
 800b0be:	f7fc fdef 	bl	8007ca0 <HAL_SD_ReadBlocks>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	24000168 	.word	0x24000168

0800b0dc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af02      	add	r7, sp, #8
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
 800b0e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	68f9      	ldr	r1, [r7, #12]
 800b0f8:	4806      	ldr	r0, [pc, #24]	; (800b114 <BSP_SD_WriteBlocks+0x38>)
 800b0fa:	f7fc ff5b 	bl	8007fb4 <HAL_SD_WriteBlocks>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b108:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	24000168 	.word	0x24000168

0800b118 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b11c:	4805      	ldr	r0, [pc, #20]	; (800b134 <BSP_SD_GetCardState+0x1c>)
 800b11e:	f7fd fc77 	bl	8008a10 <HAL_SD_GetCardState>
 800b122:	4603      	mov	r3, r0
 800b124:	2b04      	cmp	r3, #4
 800b126:	bf14      	ite	ne
 800b128:	2301      	movne	r3, #1
 800b12a:	2300      	moveq	r3, #0
 800b12c:	b2db      	uxtb	r3, r3
}
 800b12e:	4618      	mov	r0, r3
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	24000168 	.word	0x24000168

0800b138 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	4803      	ldr	r0, [pc, #12]	; (800b150 <BSP_SD_GetCardInfo+0x18>)
 800b144:	f7fd fb26 	bl	8008794 <HAL_SD_GetCardInfo>
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	24000168 	.word	0x24000168

0800b154 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b15a:	2301      	movs	r3, #1
 800b15c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b15e:	f000 f80b 	bl	800b178 <BSP_PlatformIsDetected>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b168:	2300      	movs	r3, #0
 800b16a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	b2db      	uxtb	r3, r3
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b17e:	2301      	movs	r3, #1
 800b180:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b182:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b186:	4806      	ldr	r0, [pc, #24]	; (800b1a0 <BSP_PlatformIsDetected+0x28>)
 800b188:	f7f8 f8ea 	bl	8003360 <HAL_GPIO_ReadPin>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b192:	2300      	movs	r3, #0
 800b194:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b196:	79fb      	ldrb	r3, [r7, #7]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	58022000 	.word	0x58022000

0800b1a4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b1ae:	4b0b      	ldr	r3, [pc, #44]	; (800b1dc <SD_CheckStatus+0x38>)
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b1b4:	f7ff ffb0 	bl	800b118 <BSP_SD_GetCardState>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d107      	bne.n	800b1ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b1be:	4b07      	ldr	r3, [pc, #28]	; (800b1dc <SD_CheckStatus+0x38>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	f023 0301 	bic.w	r3, r3, #1
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	4b04      	ldr	r3, [pc, #16]	; (800b1dc <SD_CheckStatus+0x38>)
 800b1cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b1ce:	4b03      	ldr	r3, [pc, #12]	; (800b1dc <SD_CheckStatus+0x38>)
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	b2db      	uxtb	r3, r3
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	24000029 	.word	0x24000029

0800b1e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b1ea:	4b0b      	ldr	r3, [pc, #44]	; (800b218 <SD_initialize+0x38>)
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b1f0:	f7ff ff30 	bl	800b054 <BSP_SD_Init>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d107      	bne.n	800b20a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b1fa:	79fb      	ldrb	r3, [r7, #7]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff ffd1 	bl	800b1a4 <SD_CheckStatus>
 800b202:	4603      	mov	r3, r0
 800b204:	461a      	mov	r2, r3
 800b206:	4b04      	ldr	r3, [pc, #16]	; (800b218 <SD_initialize+0x38>)
 800b208:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b20a:	4b03      	ldr	r3, [pc, #12]	; (800b218 <SD_initialize+0x38>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	b2db      	uxtb	r3, r3
}
 800b210:	4618      	mov	r0, r3
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	24000029 	.word	0x24000029

0800b21c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b226:	79fb      	ldrb	r3, [r7, #7]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7ff ffbb 	bl	800b1a4 <SD_CheckStatus>
 800b22e:	4603      	mov	r3, r0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60b9      	str	r1, [r7, #8]
 800b240:	607a      	str	r2, [r7, #4]
 800b242:	603b      	str	r3, [r7, #0]
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	68b8      	ldr	r0, [r7, #8]
 800b256:	f7ff ff23 	bl	800b0a0 <BSP_SD_ReadBlocks>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d107      	bne.n	800b270 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b260:	bf00      	nop
 800b262:	f7ff ff59 	bl	800b118 <BSP_SD_GetCardState>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1fa      	bne.n	800b262 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b270:	7dfb      	ldrb	r3, [r7, #23]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b086      	sub	sp, #24
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]
 800b286:	4603      	mov	r3, r0
 800b288:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	6879      	ldr	r1, [r7, #4]
 800b296:	68b8      	ldr	r0, [r7, #8]
 800b298:	f7ff ff20 	bl	800b0dc <BSP_SD_WriteBlocks>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d107      	bne.n	800b2b2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b2a2:	bf00      	nop
 800b2a4:	f7ff ff38 	bl	800b118 <BSP_SD_GetCardState>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1fa      	bne.n	800b2a4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08c      	sub	sp, #48	; 0x30
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	603a      	str	r2, [r7, #0]
 800b2c6:	71fb      	strb	r3, [r7, #7]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2d2:	4b25      	ldr	r3, [pc, #148]	; (800b368 <SD_ioctl+0xac>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <SD_ioctl+0x28>
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e03c      	b.n	800b35e <SD_ioctl+0xa2>

  switch (cmd)
 800b2e4:	79bb      	ldrb	r3, [r7, #6]
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d834      	bhi.n	800b354 <SD_ioctl+0x98>
 800b2ea:	a201      	add	r2, pc, #4	; (adr r2, 800b2f0 <SD_ioctl+0x34>)
 800b2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f0:	0800b301 	.word	0x0800b301
 800b2f4:	0800b309 	.word	0x0800b309
 800b2f8:	0800b321 	.word	0x0800b321
 800b2fc:	0800b33b 	.word	0x0800b33b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b306:	e028      	b.n	800b35a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b308:	f107 0308 	add.w	r3, r7, #8
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff ff13 	bl	800b138 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b312:	6a3a      	ldr	r2, [r7, #32]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b318:	2300      	movs	r3, #0
 800b31a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b31e:	e01c      	b.n	800b35a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b320:	f107 0308 	add.w	r3, r7, #8
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff ff07 	bl	800b138 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b338:	e00f      	b.n	800b35a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff fefa 	bl	800b138 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	0a5a      	lsrs	r2, r3, #9
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b352:	e002      	b.n	800b35a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b354:	2304      	movs	r3, #4
 800b356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b35a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3730      	adds	r7, #48	; 0x30
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	24000029 	.word	0x24000029

0800b36c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	4603      	mov	r3, r0
 800b374:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	4a08      	ldr	r2, [pc, #32]	; (800b39c <disk_status+0x30>)
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	79fa      	ldrb	r2, [r7, #7]
 800b384:	4905      	ldr	r1, [pc, #20]	; (800b39c <disk_status+0x30>)
 800b386:	440a      	add	r2, r1
 800b388:	7a12      	ldrb	r2, [r2, #8]
 800b38a:	4610      	mov	r0, r2
 800b38c:	4798      	blx	r3
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b392:	7bfb      	ldrb	r3, [r7, #15]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	240002cc 	.word	0x240002cc

0800b3a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	4a0d      	ldr	r2, [pc, #52]	; (800b3e8 <disk_initialize+0x48>)
 800b3b2:	5cd3      	ldrb	r3, [r2, r3]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d111      	bne.n	800b3dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b3b8:	79fb      	ldrb	r3, [r7, #7]
 800b3ba:	4a0b      	ldr	r2, [pc, #44]	; (800b3e8 <disk_initialize+0x48>)
 800b3bc:	2101      	movs	r1, #1
 800b3be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	4a09      	ldr	r2, [pc, #36]	; (800b3e8 <disk_initialize+0x48>)
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	79fa      	ldrb	r2, [r7, #7]
 800b3ce:	4906      	ldr	r1, [pc, #24]	; (800b3e8 <disk_initialize+0x48>)
 800b3d0:	440a      	add	r2, r1
 800b3d2:	7a12      	ldrb	r2, [r2, #8]
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4798      	blx	r3
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	240002cc 	.word	0x240002cc

0800b3ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b3ec:	b590      	push	{r4, r7, lr}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
 800b3fe:	4a0a      	ldr	r2, [pc, #40]	; (800b428 <disk_read+0x3c>)
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	689c      	ldr	r4, [r3, #8]
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	4a07      	ldr	r2, [pc, #28]	; (800b428 <disk_read+0x3c>)
 800b40c:	4413      	add	r3, r2
 800b40e:	7a18      	ldrb	r0, [r3, #8]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	68b9      	ldr	r1, [r7, #8]
 800b416:	47a0      	blx	r4
 800b418:	4603      	mov	r3, r0
 800b41a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	bd90      	pop	{r4, r7, pc}
 800b426:	bf00      	nop
 800b428:	240002cc 	.word	0x240002cc

0800b42c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b42c:	b590      	push	{r4, r7, lr}
 800b42e:	b087      	sub	sp, #28
 800b430:	af00      	add	r7, sp, #0
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	607a      	str	r2, [r7, #4]
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
 800b43e:	4a0a      	ldr	r2, [pc, #40]	; (800b468 <disk_write+0x3c>)
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	68dc      	ldr	r4, [r3, #12]
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	4a07      	ldr	r2, [pc, #28]	; (800b468 <disk_write+0x3c>)
 800b44c:	4413      	add	r3, r2
 800b44e:	7a18      	ldrb	r0, [r3, #8]
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	68b9      	ldr	r1, [r7, #8]
 800b456:	47a0      	blx	r4
 800b458:	4603      	mov	r3, r0
 800b45a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b45c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	371c      	adds	r7, #28
 800b462:	46bd      	mov	sp, r7
 800b464:	bd90      	pop	{r4, r7, pc}
 800b466:	bf00      	nop
 800b468:	240002cc 	.word	0x240002cc

0800b46c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	4603      	mov	r3, r0
 800b474:	603a      	str	r2, [r7, #0]
 800b476:	71fb      	strb	r3, [r7, #7]
 800b478:	460b      	mov	r3, r1
 800b47a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b47c:	79fb      	ldrb	r3, [r7, #7]
 800b47e:	4a09      	ldr	r2, [pc, #36]	; (800b4a4 <disk_ioctl+0x38>)
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	79fa      	ldrb	r2, [r7, #7]
 800b48a:	4906      	ldr	r1, [pc, #24]	; (800b4a4 <disk_ioctl+0x38>)
 800b48c:	440a      	add	r2, r1
 800b48e:	7a10      	ldrb	r0, [r2, #8]
 800b490:	79b9      	ldrb	r1, [r7, #6]
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	4798      	blx	r3
 800b496:	4603      	mov	r3, r0
 800b498:	73fb      	strb	r3, [r7, #15]
  return res;
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	240002cc 	.word	0x240002cc

0800b4a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b4b8:	89fb      	ldrh	r3, [r7, #14]
 800b4ba:	021b      	lsls	r3, r3, #8
 800b4bc:	b21a      	sxth	r2, r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	b21b      	sxth	r3, r3
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	b21b      	sxth	r3, r3
 800b4c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b4ca:	89fb      	ldrh	r3, [r7, #14]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3303      	adds	r3, #3
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	021b      	lsls	r3, r3, #8
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	3202      	adds	r2, #2
 800b4f0:	7812      	ldrb	r2, [r2, #0]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	021b      	lsls	r3, r3, #8
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	3201      	adds	r2, #1
 800b4fe:	7812      	ldrb	r2, [r2, #0]
 800b500:	4313      	orrs	r3, r2
 800b502:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	021b      	lsls	r3, r3, #8
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	7812      	ldrb	r2, [r2, #0]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]
	return rv;
 800b510:	68fb      	ldr	r3, [r7, #12]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b51e:	b480      	push	{r7}
 800b520:	b083      	sub	sp, #12
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	460b      	mov	r3, r1
 800b528:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	607a      	str	r2, [r7, #4]
 800b530:	887a      	ldrh	r2, [r7, #2]
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	701a      	strb	r2, [r3, #0]
 800b536:	887b      	ldrh	r3, [r7, #2]
 800b538:	0a1b      	lsrs	r3, r3, #8
 800b53a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	607a      	str	r2, [r7, #4]
 800b542:	887a      	ldrh	r2, [r7, #2]
 800b544:	b2d2      	uxtb	r2, r2
 800b546:	701a      	strb	r2, [r3, #0]
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	b2d2      	uxtb	r2, r2
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	0a1b      	lsrs	r3, r3, #8
 800b56e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	607a      	str	r2, [r7, #4]
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	b2d2      	uxtb	r2, r2
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	0a1b      	lsrs	r3, r3, #8
 800b580:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	607a      	str	r2, [r7, #4]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	b2d2      	uxtb	r2, r2
 800b58c:	701a      	strb	r2, [r3, #0]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	0a1b      	lsrs	r3, r3, #8
 800b592:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	1c5a      	adds	r2, r3, #1
 800b598:	607a      	str	r2, [r7, #4]
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	b2d2      	uxtb	r2, r2
 800b59e:	701a      	strb	r2, [r3, #0]
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b5ac:	b480      	push	{r7}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00d      	beq.n	800b5e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	1c53      	adds	r3, r2, #1
 800b5ca:	613b      	str	r3, [r7, #16]
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	1c59      	adds	r1, r3, #1
 800b5d0:	6179      	str	r1, [r7, #20]
 800b5d2:	7812      	ldrb	r2, [r2, #0]
 800b5d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	607b      	str	r3, [r7, #4]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1f1      	bne.n	800b5c6 <mem_cpy+0x1a>
	}
}
 800b5e2:	bf00      	nop
 800b5e4:	371c      	adds	r7, #28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b5ee:	b480      	push	{r7}
 800b5f0:	b087      	sub	sp, #28
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	617a      	str	r2, [r7, #20]
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	b2d2      	uxtb	r2, r2
 800b608:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	607b      	str	r3, [r7, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1f3      	bne.n	800b5fe <mem_set+0x10>
}
 800b616:	bf00      	nop
 800b618:	bf00      	nop
 800b61a:	371c      	adds	r7, #28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b624:	b480      	push	{r7}
 800b626:	b089      	sub	sp, #36	; 0x24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	61fb      	str	r3, [r7, #28]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	61fa      	str	r2, [r7, #28]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	4619      	mov	r1, r3
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	1c5a      	adds	r2, r3, #1
 800b64a:	61ba      	str	r2, [r7, #24]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	1acb      	subs	r3, r1, r3
 800b650:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	3b01      	subs	r3, #1
 800b656:	607b      	str	r3, [r7, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <mem_cmp+0x40>
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0eb      	beq.n	800b63c <mem_cmp+0x18>

	return r;
 800b664:	697b      	ldr	r3, [r7, #20]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3724      	adds	r7, #36	; 0x24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b672:	b480      	push	{r7}
 800b674:	b083      	sub	sp, #12
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b67c:	e002      	b.n	800b684 <chk_chr+0x12>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	3301      	adds	r3, #1
 800b682:	607b      	str	r3, [r7, #4]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d005      	beq.n	800b698 <chk_chr+0x26>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	4293      	cmp	r3, r2
 800b696:	d1f2      	bne.n	800b67e <chk_chr+0xc>
	return *str;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	781b      	ldrb	r3, [r3, #0]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60bb      	str	r3, [r7, #8]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	e029      	b.n	800b710 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b6bc:	4a27      	ldr	r2, [pc, #156]	; (800b75c <chk_lock+0xb4>)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	011b      	lsls	r3, r3, #4
 800b6c2:	4413      	add	r3, r2
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d01d      	beq.n	800b706 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6ca:	4a24      	ldr	r2, [pc, #144]	; (800b75c <chk_lock+0xb4>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	4413      	add	r3, r2
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d116      	bne.n	800b70a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b6dc:	4a1f      	ldr	r2, [pc, #124]	; (800b75c <chk_lock+0xb4>)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	4413      	add	r3, r2
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d10c      	bne.n	800b70a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b6f0:	4a1a      	ldr	r2, [pc, #104]	; (800b75c <chk_lock+0xb4>)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	011b      	lsls	r3, r3, #4
 800b6f6:	4413      	add	r3, r2
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b700:	429a      	cmp	r2, r3
 800b702:	d102      	bne.n	800b70a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b704:	e007      	b.n	800b716 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b706:	2301      	movs	r3, #1
 800b708:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3301      	adds	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d9d2      	bls.n	800b6bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d109      	bne.n	800b730 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d102      	bne.n	800b728 <chk_lock+0x80>
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b02      	cmp	r3, #2
 800b726:	d101      	bne.n	800b72c <chk_lock+0x84>
 800b728:	2300      	movs	r3, #0
 800b72a:	e010      	b.n	800b74e <chk_lock+0xa6>
 800b72c:	2312      	movs	r3, #18
 800b72e:	e00e      	b.n	800b74e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d108      	bne.n	800b748 <chk_lock+0xa0>
 800b736:	4a09      	ldr	r2, [pc, #36]	; (800b75c <chk_lock+0xb4>)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	011b      	lsls	r3, r3, #4
 800b73c:	4413      	add	r3, r2
 800b73e:	330c      	adds	r3, #12
 800b740:	881b      	ldrh	r3, [r3, #0]
 800b742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b746:	d101      	bne.n	800b74c <chk_lock+0xa4>
 800b748:	2310      	movs	r3, #16
 800b74a:	e000      	b.n	800b74e <chk_lock+0xa6>
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	240002ac 	.word	0x240002ac

0800b760 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b766:	2300      	movs	r3, #0
 800b768:	607b      	str	r3, [r7, #4]
 800b76a:	e002      	b.n	800b772 <enq_lock+0x12>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	3301      	adds	r3, #1
 800b770:	607b      	str	r3, [r7, #4]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d806      	bhi.n	800b786 <enq_lock+0x26>
 800b778:	4a09      	ldr	r2, [pc, #36]	; (800b7a0 <enq_lock+0x40>)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	011b      	lsls	r3, r3, #4
 800b77e:	4413      	add	r3, r2
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f2      	bne.n	800b76c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2b02      	cmp	r3, #2
 800b78a:	bf14      	ite	ne
 800b78c:	2301      	movne	r3, #1
 800b78e:	2300      	moveq	r3, #0
 800b790:	b2db      	uxtb	r3, r3
}
 800b792:	4618      	mov	r0, r3
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	240002ac 	.word	0x240002ac

0800b7a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	e01f      	b.n	800b7f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b7b4:	4a41      	ldr	r2, [pc, #260]	; (800b8bc <inc_lock+0x118>)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	011b      	lsls	r3, r3, #4
 800b7ba:	4413      	add	r3, r2
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d113      	bne.n	800b7ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b7c6:	4a3d      	ldr	r2, [pc, #244]	; (800b8bc <inc_lock+0x118>)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	4413      	add	r3, r2
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d109      	bne.n	800b7ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b7da:	4a38      	ldr	r2, [pc, #224]	; (800b8bc <inc_lock+0x118>)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	4413      	add	r3, r2
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d006      	beq.n	800b7fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d9dc      	bls.n	800b7b4 <inc_lock+0x10>
 800b7fa:	e000      	b.n	800b7fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b7fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2b02      	cmp	r3, #2
 800b802:	d132      	bne.n	800b86a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	e002      	b.n	800b810 <inc_lock+0x6c>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3301      	adds	r3, #1
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d806      	bhi.n	800b824 <inc_lock+0x80>
 800b816:	4a29      	ldr	r2, [pc, #164]	; (800b8bc <inc_lock+0x118>)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	4413      	add	r3, r2
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1f2      	bne.n	800b80a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d101      	bne.n	800b82e <inc_lock+0x8a>
 800b82a:	2300      	movs	r3, #0
 800b82c:	e040      	b.n	800b8b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	4922      	ldr	r1, [pc, #136]	; (800b8bc <inc_lock+0x118>)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	011b      	lsls	r3, r3, #4
 800b838:	440b      	add	r3, r1
 800b83a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	491e      	ldr	r1, [pc, #120]	; (800b8bc <inc_lock+0x118>)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	440b      	add	r3, r1
 800b848:	3304      	adds	r3, #4
 800b84a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	695a      	ldr	r2, [r3, #20]
 800b850:	491a      	ldr	r1, [pc, #104]	; (800b8bc <inc_lock+0x118>)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	011b      	lsls	r3, r3, #4
 800b856:	440b      	add	r3, r1
 800b858:	3308      	adds	r3, #8
 800b85a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b85c:	4a17      	ldr	r2, [pc, #92]	; (800b8bc <inc_lock+0x118>)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	011b      	lsls	r3, r3, #4
 800b862:	4413      	add	r3, r2
 800b864:	330c      	adds	r3, #12
 800b866:	2200      	movs	r2, #0
 800b868:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d009      	beq.n	800b884 <inc_lock+0xe0>
 800b870:	4a12      	ldr	r2, [pc, #72]	; (800b8bc <inc_lock+0x118>)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	011b      	lsls	r3, r3, #4
 800b876:	4413      	add	r3, r2
 800b878:	330c      	adds	r3, #12
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <inc_lock+0xe0>
 800b880:	2300      	movs	r3, #0
 800b882:	e015      	b.n	800b8b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d108      	bne.n	800b89c <inc_lock+0xf8>
 800b88a:	4a0c      	ldr	r2, [pc, #48]	; (800b8bc <inc_lock+0x118>)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	011b      	lsls	r3, r3, #4
 800b890:	4413      	add	r3, r2
 800b892:	330c      	adds	r3, #12
 800b894:	881b      	ldrh	r3, [r3, #0]
 800b896:	3301      	adds	r3, #1
 800b898:	b29a      	uxth	r2, r3
 800b89a:	e001      	b.n	800b8a0 <inc_lock+0xfc>
 800b89c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8a0:	4906      	ldr	r1, [pc, #24]	; (800b8bc <inc_lock+0x118>)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	440b      	add	r3, r1
 800b8a8:	330c      	adds	r3, #12
 800b8aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3301      	adds	r3, #1
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	240002ac 	.word	0x240002ac

0800b8c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	607b      	str	r3, [r7, #4]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d825      	bhi.n	800b920 <dec_lock+0x60>
		n = Files[i].ctr;
 800b8d4:	4a17      	ldr	r2, [pc, #92]	; (800b934 <dec_lock+0x74>)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	4413      	add	r3, r2
 800b8dc:	330c      	adds	r3, #12
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b8e2:	89fb      	ldrh	r3, [r7, #14]
 800b8e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8e8:	d101      	bne.n	800b8ee <dec_lock+0x2e>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b8ee:	89fb      	ldrh	r3, [r7, #14]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <dec_lock+0x3a>
 800b8f4:	89fb      	ldrh	r3, [r7, #14]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b8fa:	4a0e      	ldr	r2, [pc, #56]	; (800b934 <dec_lock+0x74>)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	011b      	lsls	r3, r3, #4
 800b900:	4413      	add	r3, r2
 800b902:	330c      	adds	r3, #12
 800b904:	89fa      	ldrh	r2, [r7, #14]
 800b906:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b908:	89fb      	ldrh	r3, [r7, #14]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d105      	bne.n	800b91a <dec_lock+0x5a>
 800b90e:	4a09      	ldr	r2, [pc, #36]	; (800b934 <dec_lock+0x74>)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	011b      	lsls	r3, r3, #4
 800b914:	4413      	add	r3, r2
 800b916:	2200      	movs	r2, #0
 800b918:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b91a:	2300      	movs	r3, #0
 800b91c:	737b      	strb	r3, [r7, #13]
 800b91e:	e001      	b.n	800b924 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b920:	2302      	movs	r3, #2
 800b922:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b924:	7b7b      	ldrb	r3, [r7, #13]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	240002ac 	.word	0x240002ac

0800b938 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b940:	2300      	movs	r3, #0
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	e010      	b.n	800b968 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b946:	4a0d      	ldr	r2, [pc, #52]	; (800b97c <clear_lock+0x44>)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	011b      	lsls	r3, r3, #4
 800b94c:	4413      	add	r3, r2
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	429a      	cmp	r2, r3
 800b954:	d105      	bne.n	800b962 <clear_lock+0x2a>
 800b956:	4a09      	ldr	r2, [pc, #36]	; (800b97c <clear_lock+0x44>)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	011b      	lsls	r3, r3, #4
 800b95c:	4413      	add	r3, r2
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3301      	adds	r3, #1
 800b966:	60fb      	str	r3, [r7, #12]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d9eb      	bls.n	800b946 <clear_lock+0xe>
	}
}
 800b96e:	bf00      	nop
 800b970:	bf00      	nop
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	240002ac 	.word	0x240002ac

0800b980 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	78db      	ldrb	r3, [r3, #3]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d034      	beq.n	800b9fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7858      	ldrb	r0, [r3, #1]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	f7ff fd40 	bl	800b42c <disk_write>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	73fb      	strb	r3, [r7, #15]
 800b9b6:	e022      	b.n	800b9fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	1ad2      	subs	r2, r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d217      	bcs.n	800b9fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	789b      	ldrb	r3, [r3, #2]
 800b9d2:	613b      	str	r3, [r7, #16]
 800b9d4:	e010      	b.n	800b9f8 <sync_window+0x78>
					wsect += fs->fsize;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	4413      	add	r3, r2
 800b9de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	7858      	ldrb	r0, [r3, #1]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	f7ff fd1d 	bl	800b42c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	613b      	str	r3, [r7, #16]
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d8eb      	bhi.n	800b9d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d01b      	beq.n	800ba58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7ff ffad 	bl	800b980 <sync_window>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d113      	bne.n	800ba58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	7858      	ldrb	r0, [r3, #1]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	f7ff fcd5 	bl	800b3ec <disk_read>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ba48:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff ff87 	bl	800b980 <sync_window>
 800ba72:	4603      	mov	r3, r0
 800ba74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d158      	bne.n	800bb2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d148      	bne.n	800bb16 <sync_fs+0xb2>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	791b      	ldrb	r3, [r3, #4]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d144      	bne.n	800bb16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	3330      	adds	r3, #48	; 0x30
 800ba90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba94:	2100      	movs	r1, #0
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7ff fda9 	bl	800b5ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	3330      	adds	r3, #48	; 0x30
 800baa0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800baa4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff fd38 	bl	800b51e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	3330      	adds	r3, #48	; 0x30
 800bab2:	4921      	ldr	r1, [pc, #132]	; (800bb38 <sync_fs+0xd4>)
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7ff fd4d 	bl	800b554 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	3330      	adds	r3, #48	; 0x30
 800babe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bac2:	491e      	ldr	r1, [pc, #120]	; (800bb3c <sync_fs+0xd8>)
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7ff fd45 	bl	800b554 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	3330      	adds	r3, #48	; 0x30
 800bace:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	4619      	mov	r1, r3
 800bad8:	4610      	mov	r0, r2
 800bada:	f7ff fd3b 	bl	800b554 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3330      	adds	r3, #48	; 0x30
 800bae2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	4619      	mov	r1, r3
 800baec:	4610      	mov	r0, r2
 800baee:	f7ff fd31 	bl	800b554 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	7858      	ldrb	r0, [r3, #1]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	f7ff fc8e 	bl	800b42c <disk_write>
			fs->fsi_flag = 0;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	785b      	ldrb	r3, [r3, #1]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff fca4 	bl	800b46c <disk_ioctl>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <sync_fs+0xca>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	41615252 	.word	0x41615252
 800bb3c:	61417272 	.word	0x61417272

0800bb40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	3b02      	subs	r3, #2
 800bb4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	695b      	ldr	r3, [r3, #20]
 800bb54:	3b02      	subs	r3, #2
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d301      	bcc.n	800bb60 <clust2sect+0x20>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	e008      	b.n	800bb72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	895b      	ldrh	r3, [r3, #10]
 800bb64:	461a      	mov	r2, r3
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	fb03 f202 	mul.w	r2, r3, r2
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb70:	4413      	add	r3, r2
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b086      	sub	sp, #24
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d904      	bls.n	800bb9e <get_fat+0x20>
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	695b      	ldr	r3, [r3, #20]
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d302      	bcc.n	800bba4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bb9e:	2301      	movs	r3, #1
 800bba0:	617b      	str	r3, [r7, #20]
 800bba2:	e08f      	b.n	800bcc4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bba4:	f04f 33ff 	mov.w	r3, #4294967295
 800bba8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	d062      	beq.n	800bc78 <get_fat+0xfa>
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	dc7c      	bgt.n	800bcb0 <get_fat+0x132>
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d002      	beq.n	800bbc0 <get_fat+0x42>
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d042      	beq.n	800bc44 <get_fat+0xc6>
 800bbbe:	e077      	b.n	800bcb0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	085b      	lsrs	r3, r3, #1
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	6a1a      	ldr	r2, [r3, #32]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	0a5b      	lsrs	r3, r3, #9
 800bbd6:	4413      	add	r3, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6938      	ldr	r0, [r7, #16]
 800bbdc:	f7ff ff14 	bl	800ba08 <move_window>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d167      	bne.n	800bcb6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	60fa      	str	r2, [r7, #12]
 800bbec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbf8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	6a1a      	ldr	r2, [r3, #32]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	0a5b      	lsrs	r3, r3, #9
 800bc02:	4413      	add	r3, r2
 800bc04:	4619      	mov	r1, r3
 800bc06:	6938      	ldr	r0, [r7, #16]
 800bc08:	f7ff fefe 	bl	800ba08 <move_window>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d153      	bne.n	800bcba <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc20:	021b      	lsls	r3, r3, #8
 800bc22:	461a      	mov	r2, r3
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	f003 0301 	and.w	r3, r3, #1
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <get_fat+0xbc>
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	091b      	lsrs	r3, r3, #4
 800bc38:	e002      	b.n	800bc40 <get_fat+0xc2>
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc40:	617b      	str	r3, [r7, #20]
			break;
 800bc42:	e03f      	b.n	800bcc4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	6a1a      	ldr	r2, [r3, #32]
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	0a1b      	lsrs	r3, r3, #8
 800bc4c:	4413      	add	r3, r2
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6938      	ldr	r0, [r7, #16]
 800bc52:	f7ff fed9 	bl	800ba08 <move_window>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d130      	bne.n	800bcbe <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bc6a:	4413      	add	r3, r2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7ff fc1b 	bl	800b4a8 <ld_word>
 800bc72:	4603      	mov	r3, r0
 800bc74:	617b      	str	r3, [r7, #20]
			break;
 800bc76:	e025      	b.n	800bcc4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6a1a      	ldr	r2, [r3, #32]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	09db      	lsrs	r3, r3, #7
 800bc80:	4413      	add	r3, r2
 800bc82:	4619      	mov	r1, r3
 800bc84:	6938      	ldr	r0, [r7, #16]
 800bc86:	f7ff febf 	bl	800ba08 <move_window>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d118      	bne.n	800bcc2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bc9e:	4413      	add	r3, r2
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7ff fc19 	bl	800b4d8 <ld_dword>
 800bca6:	4603      	mov	r3, r0
 800bca8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bcac:	617b      	str	r3, [r7, #20]
			break;
 800bcae:	e009      	b.n	800bcc4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	617b      	str	r3, [r7, #20]
 800bcb4:	e006      	b.n	800bcc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcb6:	bf00      	nop
 800bcb8:	e004      	b.n	800bcc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcba:	bf00      	nop
 800bcbc:	e002      	b.n	800bcc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bcbe:	bf00      	nop
 800bcc0:	e000      	b.n	800bcc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bcc2:	bf00      	nop
		}
	}

	return val;
 800bcc4:	697b      	ldr	r3, [r7, #20]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bcce:	b590      	push	{r4, r7, lr}
 800bcd0:	b089      	sub	sp, #36	; 0x24
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	60f8      	str	r0, [r7, #12]
 800bcd6:	60b9      	str	r1, [r7, #8]
 800bcd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	f240 80d2 	bls.w	800be8a <put_fat+0x1bc>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	f080 80cc 	bcs.w	800be8a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	f000 8096 	beq.w	800be28 <put_fat+0x15a>
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	f300 80cd 	bgt.w	800be9c <put_fat+0x1ce>
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d002      	beq.n	800bd0c <put_fat+0x3e>
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d06e      	beq.n	800bde8 <put_fat+0x11a>
 800bd0a:	e0c7      	b.n	800be9c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	61bb      	str	r3, [r7, #24]
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	085b      	lsrs	r3, r3, #1
 800bd14:	69ba      	ldr	r2, [r7, #24]
 800bd16:	4413      	add	r3, r2
 800bd18:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6a1a      	ldr	r2, [r3, #32]
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	0a5b      	lsrs	r3, r3, #9
 800bd22:	4413      	add	r3, r2
 800bd24:	4619      	mov	r1, r3
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f7ff fe6e 	bl	800ba08 <move_window>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd30:	7ffb      	ldrb	r3, [r7, #31]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f040 80ab 	bne.w	800be8e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	1c59      	adds	r1, r3, #1
 800bd42:	61b9      	str	r1, [r7, #24]
 800bd44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd48:	4413      	add	r3, r2
 800bd4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	f003 0301 	and.w	r3, r3, #1
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00d      	beq.n	800bd72 <put_fat+0xa4>
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	b25b      	sxtb	r3, r3
 800bd5c:	f003 030f 	and.w	r3, r3, #15
 800bd60:	b25a      	sxtb	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	b25b      	sxtb	r3, r3
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	b25b      	sxtb	r3, r3
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	e001      	b.n	800bd76 <put_fat+0xa8>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	697a      	ldr	r2, [r7, #20]
 800bd78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6a1a      	ldr	r2, [r3, #32]
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	0a5b      	lsrs	r3, r3, #9
 800bd88:	4413      	add	r3, r2
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f7ff fe3b 	bl	800ba08 <move_window>
 800bd92:	4603      	mov	r3, r0
 800bd94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd96:	7ffb      	ldrb	r3, [r7, #31]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d17a      	bne.n	800be92 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda8:	4413      	add	r3, r2
 800bdaa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d003      	beq.n	800bdbe <put_fat+0xf0>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	091b      	lsrs	r3, r3, #4
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	e00e      	b.n	800bddc <put_fat+0x10e>
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	b25b      	sxtb	r3, r3
 800bdc4:	f023 030f 	bic.w	r3, r3, #15
 800bdc8:	b25a      	sxtb	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	0a1b      	lsrs	r3, r3, #8
 800bdce:	b25b      	sxtb	r3, r3
 800bdd0:	f003 030f 	and.w	r3, r3, #15
 800bdd4:	b25b      	sxtb	r3, r3
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	b25b      	sxtb	r3, r3
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2201      	movs	r2, #1
 800bde4:	70da      	strb	r2, [r3, #3]
			break;
 800bde6:	e059      	b.n	800be9c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a1a      	ldr	r2, [r3, #32]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	0a1b      	lsrs	r3, r3, #8
 800bdf0:	4413      	add	r3, r2
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f7ff fe07 	bl	800ba08 <move_window>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdfe:	7ffb      	ldrb	r3, [r7, #31]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d148      	bne.n	800be96 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800be12:	4413      	add	r3, r2
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	b292      	uxth	r2, r2
 800be18:	4611      	mov	r1, r2
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff fb7f 	bl	800b51e <st_word>
			fs->wflag = 1;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2201      	movs	r2, #1
 800be24:	70da      	strb	r2, [r3, #3]
			break;
 800be26:	e039      	b.n	800be9c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6a1a      	ldr	r2, [r3, #32]
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	09db      	lsrs	r3, r3, #7
 800be30:	4413      	add	r3, r2
 800be32:	4619      	mov	r1, r3
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7ff fde7 	bl	800ba08 <move_window>
 800be3a:	4603      	mov	r3, r0
 800be3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be3e:	7ffb      	ldrb	r3, [r7, #31]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d12a      	bne.n	800be9a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800be58:	4413      	add	r3, r2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff fb3c 	bl	800b4d8 <ld_dword>
 800be60:	4603      	mov	r3, r0
 800be62:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800be66:	4323      	orrs	r3, r4
 800be68:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800be78:	4413      	add	r3, r2
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff fb69 	bl	800b554 <st_dword>
			fs->wflag = 1;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2201      	movs	r2, #1
 800be86:	70da      	strb	r2, [r3, #3]
			break;
 800be88:	e008      	b.n	800be9c <put_fat+0x1ce>
		}
	}
 800be8a:	bf00      	nop
 800be8c:	e006      	b.n	800be9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be8e:	bf00      	nop
 800be90:	e004      	b.n	800be9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be92:	bf00      	nop
 800be94:	e002      	b.n	800be9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be96:	bf00      	nop
 800be98:	e000      	b.n	800be9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be9a:	bf00      	nop
	return res;
 800be9c:	7ffb      	ldrb	r3, [r7, #31]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3724      	adds	r7, #36	; 0x24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd90      	pop	{r4, r7, pc}

0800bea6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b088      	sub	sp, #32
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d904      	bls.n	800becc <remove_chain+0x26>
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d301      	bcc.n	800bed0 <remove_chain+0x2a>
 800becc:	2302      	movs	r3, #2
 800bece:	e04b      	b.n	800bf68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00c      	beq.n	800bef0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bed6:	f04f 32ff 	mov.w	r2, #4294967295
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	69b8      	ldr	r0, [r7, #24]
 800bede:	f7ff fef6 	bl	800bcce <put_fat>
 800bee2:	4603      	mov	r3, r0
 800bee4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bee6:	7ffb      	ldrb	r3, [r7, #31]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <remove_chain+0x4a>
 800beec:	7ffb      	ldrb	r3, [r7, #31]
 800beee:	e03b      	b.n	800bf68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7ff fe43 	bl	800bb7e <get_fat>
 800bef8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d031      	beq.n	800bf64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d101      	bne.n	800bf0a <remove_chain+0x64>
 800bf06:	2302      	movs	r3, #2
 800bf08:	e02e      	b.n	800bf68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf10:	d101      	bne.n	800bf16 <remove_chain+0x70>
 800bf12:	2301      	movs	r3, #1
 800bf14:	e028      	b.n	800bf68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bf16:	2200      	movs	r2, #0
 800bf18:	68b9      	ldr	r1, [r7, #8]
 800bf1a:	69b8      	ldr	r0, [r7, #24]
 800bf1c:	f7ff fed7 	bl	800bcce <put_fat>
 800bf20:	4603      	mov	r3, r0
 800bf22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf24:	7ffb      	ldrb	r3, [r7, #31]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d001      	beq.n	800bf2e <remove_chain+0x88>
 800bf2a:	7ffb      	ldrb	r3, [r7, #31]
 800bf2c:	e01c      	b.n	800bf68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	691a      	ldr	r2, [r3, #16]
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	3b02      	subs	r3, #2
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d20b      	bcs.n	800bf54 <remove_chain+0xae>
			fs->free_clst++;
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	791b      	ldrb	r3, [r3, #4]
 800bf4a:	f043 0301 	orr.w	r3, r3, #1
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d3c6      	bcc.n	800bef0 <remove_chain+0x4a>
 800bf62:	e000      	b.n	800bf66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bf64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3720      	adds	r7, #32
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10d      	bne.n	800bfa2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d004      	beq.n	800bf9c <create_chain+0x2c>
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d31b      	bcc.n	800bfd4 <create_chain+0x64>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	61bb      	str	r3, [r7, #24]
 800bfa0:	e018      	b.n	800bfd4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f7ff fdea 	bl	800bb7e <get_fat>
 800bfaa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d801      	bhi.n	800bfb6 <create_chain+0x46>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e070      	b.n	800c098 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfbc:	d101      	bne.n	800bfc2 <create_chain+0x52>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	e06a      	b.n	800c098 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d201      	bcs.n	800bfd0 <create_chain+0x60>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	e063      	b.n	800c098 <create_chain+0x128>
		scl = clst;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	69fa      	ldr	r2, [r7, #28]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d307      	bcc.n	800bff8 <create_chain+0x88>
				ncl = 2;
 800bfe8:	2302      	movs	r3, #2
 800bfea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bfec:	69fa      	ldr	r2, [r7, #28]
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d901      	bls.n	800bff8 <create_chain+0x88>
 800bff4:	2300      	movs	r3, #0
 800bff6:	e04f      	b.n	800c098 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bff8:	69f9      	ldr	r1, [r7, #28]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff fdbf 	bl	800bb7e <get_fat>
 800c000:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00e      	beq.n	800c026 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d003      	beq.n	800c016 <create_chain+0xa6>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c014:	d101      	bne.n	800c01a <create_chain+0xaa>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	e03e      	b.n	800c098 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c01a:	69fa      	ldr	r2, [r7, #28]
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d1da      	bne.n	800bfd8 <create_chain+0x68>
 800c022:	2300      	movs	r3, #0
 800c024:	e038      	b.n	800c098 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c026:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c028:	f04f 32ff 	mov.w	r2, #4294967295
 800c02c:	69f9      	ldr	r1, [r7, #28]
 800c02e:	6938      	ldr	r0, [r7, #16]
 800c030:	f7ff fe4d 	bl	800bcce <put_fat>
 800c034:	4603      	mov	r3, r0
 800c036:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c038:	7dfb      	ldrb	r3, [r7, #23]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d109      	bne.n	800c052 <create_chain+0xe2>
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d006      	beq.n	800c052 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c044:	69fa      	ldr	r2, [r7, #28]
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6938      	ldr	r0, [r7, #16]
 800c04a:	f7ff fe40 	bl	800bcce <put_fat>
 800c04e:	4603      	mov	r3, r0
 800c050:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d116      	bne.n	800c086 <create_chain+0x116>
		fs->last_clst = ncl;
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	69fa      	ldr	r2, [r7, #28]
 800c05c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	691a      	ldr	r2, [r3, #16]
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	3b02      	subs	r3, #2
 800c068:	429a      	cmp	r2, r3
 800c06a:	d804      	bhi.n	800c076 <create_chain+0x106>
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	1e5a      	subs	r2, r3, #1
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	791b      	ldrb	r3, [r3, #4]
 800c07a:	f043 0301 	orr.w	r3, r3, #1
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	711a      	strb	r2, [r3, #4]
 800c084:	e007      	b.n	800c096 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c086:	7dfb      	ldrb	r3, [r7, #23]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d102      	bne.n	800c092 <create_chain+0x122>
 800c08c:	f04f 33ff 	mov.w	r3, #4294967295
 800c090:	e000      	b.n	800c094 <create_chain+0x124>
 800c092:	2301      	movs	r3, #1
 800c094:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c096:	69fb      	ldr	r3, [r7, #28]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3720      	adds	r7, #32
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b087      	sub	sp, #28
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	0a5b      	lsrs	r3, r3, #9
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	8952      	ldrh	r2, [r2, #10]
 800c0c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	1d1a      	adds	r2, r3, #4
 800c0ca:	613a      	str	r2, [r7, #16]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d101      	bne.n	800c0da <clmt_clust+0x3a>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e010      	b.n	800c0fc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d307      	bcc.n	800c0f2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c0e2:	697a      	ldr	r2, [r7, #20]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	617b      	str	r3, [r7, #20]
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0f0:	e7e9      	b.n	800c0c6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c0f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	4413      	add	r3, r2
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	371c      	adds	r7, #28
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b086      	sub	sp, #24
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c11e:	d204      	bcs.n	800c12a <dir_sdi+0x22>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	f003 031f 	and.w	r3, r3, #31
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c12a:	2302      	movs	r3, #2
 800c12c:	e063      	b.n	800c1f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	683a      	ldr	r2, [r7, #0]
 800c132:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <dir_sdi+0x46>
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2b02      	cmp	r3, #2
 800c146:	d902      	bls.n	800c14e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10c      	bne.n	800c16e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	095b      	lsrs	r3, r3, #5
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	8912      	ldrh	r2, [r2, #8]
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d301      	bcc.n	800c164 <dir_sdi+0x5c>
 800c160:	2302      	movs	r3, #2
 800c162:	e048      	b.n	800c1f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	61da      	str	r2, [r3, #28]
 800c16c:	e029      	b.n	800c1c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	895b      	ldrh	r3, [r3, #10]
 800c172:	025b      	lsls	r3, r3, #9
 800c174:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c176:	e019      	b.n	800c1ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6979      	ldr	r1, [r7, #20]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff fcfe 	bl	800bb7e <get_fat>
 800c182:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18a:	d101      	bne.n	800c190 <dir_sdi+0x88>
 800c18c:	2301      	movs	r3, #1
 800c18e:	e032      	b.n	800c1f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d904      	bls.n	800c1a0 <dir_sdi+0x98>
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d301      	bcc.n	800c1a4 <dir_sdi+0x9c>
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	e028      	b.n	800c1f6 <dir_sdi+0xee>
			ofs -= csz;
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d2e1      	bcs.n	800c178 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c1b4:	6979      	ldr	r1, [r7, #20]
 800c1b6:	6938      	ldr	r0, [r7, #16]
 800c1b8:	f7ff fcc2 	bl	800bb40 <clust2sect>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	697a      	ldr	r2, [r7, #20]
 800c1c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	69db      	ldr	r3, [r3, #28]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <dir_sdi+0xcc>
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	e010      	b.n	800c1f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	69da      	ldr	r2, [r3, #28]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	0a5b      	lsrs	r3, r3, #9
 800c1dc:	441a      	add	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ee:	441a      	add	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b086      	sub	sp, #24
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	3320      	adds	r3, #32
 800c214:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	69db      	ldr	r3, [r3, #28]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d003      	beq.n	800c226 <dir_next+0x28>
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c224:	d301      	bcc.n	800c22a <dir_next+0x2c>
 800c226:	2304      	movs	r3, #4
 800c228:	e0aa      	b.n	800c380 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c230:	2b00      	cmp	r3, #0
 800c232:	f040 8098 	bne.w	800c366 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	69db      	ldr	r3, [r3, #28]
 800c23a:	1c5a      	adds	r2, r3, #1
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10b      	bne.n	800c260 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	095b      	lsrs	r3, r3, #5
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	8912      	ldrh	r2, [r2, #8]
 800c250:	4293      	cmp	r3, r2
 800c252:	f0c0 8088 	bcc.w	800c366 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	61da      	str	r2, [r3, #28]
 800c25c:	2304      	movs	r3, #4
 800c25e:	e08f      	b.n	800c380 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	0a5b      	lsrs	r3, r3, #9
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	8952      	ldrh	r2, [r2, #10]
 800c268:	3a01      	subs	r2, #1
 800c26a:	4013      	ands	r3, r2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d17a      	bne.n	800c366 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	4619      	mov	r1, r3
 800c278:	4610      	mov	r0, r2
 800c27a:	f7ff fc80 	bl	800bb7e <get_fat>
 800c27e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d801      	bhi.n	800c28a <dir_next+0x8c>
 800c286:	2302      	movs	r3, #2
 800c288:	e07a      	b.n	800c380 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c290:	d101      	bne.n	800c296 <dir_next+0x98>
 800c292:	2301      	movs	r3, #1
 800c294:	e074      	b.n	800c380 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d358      	bcc.n	800c352 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d104      	bne.n	800c2b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	61da      	str	r2, [r3, #28]
 800c2ac:	2304      	movs	r3, #4
 800c2ae:	e067      	b.n	800c380 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f7ff fe59 	bl	800bf70 <create_chain>
 800c2be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d101      	bne.n	800c2ca <dir_next+0xcc>
 800c2c6:	2307      	movs	r3, #7
 800c2c8:	e05a      	b.n	800c380 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d101      	bne.n	800c2d4 <dir_next+0xd6>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	e055      	b.n	800c380 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2da:	d101      	bne.n	800c2e0 <dir_next+0xe2>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e04f      	b.n	800c380 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f7ff fb4d 	bl	800b980 <sync_window>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <dir_next+0xf2>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e047      	b.n	800c380 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3330      	adds	r3, #48	; 0x30
 800c2f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7ff f977 	bl	800b5ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c300:	2300      	movs	r3, #0
 800c302:	613b      	str	r3, [r7, #16]
 800c304:	6979      	ldr	r1, [r7, #20]
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f7ff fc1a 	bl	800bb40 <clust2sect>
 800c30c:	4602      	mov	r2, r0
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	62da      	str	r2, [r3, #44]	; 0x2c
 800c312:	e012      	b.n	800c33a <dir_next+0x13c>
						fs->wflag = 1;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2201      	movs	r2, #1
 800c318:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f7ff fb30 	bl	800b980 <sync_window>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d001      	beq.n	800c32a <dir_next+0x12c>
 800c326:	2301      	movs	r3, #1
 800c328:	e02a      	b.n	800c380 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	3301      	adds	r3, #1
 800c32e:	613b      	str	r3, [r7, #16]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c334:	1c5a      	adds	r2, r3, #1
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	62da      	str	r2, [r3, #44]	; 0x2c
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	895b      	ldrh	r3, [r3, #10]
 800c33e:	461a      	mov	r2, r3
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	4293      	cmp	r3, r2
 800c344:	d3e6      	bcc.n	800c314 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	1ad2      	subs	r2, r2, r3
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c358:	6979      	ldr	r1, [r7, #20]
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f7ff fbf0 	bl	800bb40 <clust2sect>
 800c360:	4602      	mov	r2, r0
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c378:	441a      	add	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c398:	2100      	movs	r1, #0
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff feb4 	bl	800c108 <dir_sdi>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3a4:	7dfb      	ldrb	r3, [r7, #23]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d12b      	bne.n	800c402 <dir_alloc+0x7a>
		n = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	69db      	ldr	r3, [r3, #28]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f7ff fb27 	bl	800ba08 <move_window>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d11d      	bne.n	800c400 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a1b      	ldr	r3, [r3, #32]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2be5      	cmp	r3, #229	; 0xe5
 800c3cc:	d004      	beq.n	800c3d8 <dir_alloc+0x50>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a1b      	ldr	r3, [r3, #32]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d107      	bne.n	800c3e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	613b      	str	r3, [r7, #16]
 800c3de:	693a      	ldr	r2, [r7, #16]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d102      	bne.n	800c3ec <dir_alloc+0x64>
 800c3e6:	e00c      	b.n	800c402 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7ff ff05 	bl	800c1fe <dir_next>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d0d7      	beq.n	800c3ae <dir_alloc+0x26>
 800c3fe:	e000      	b.n	800c402 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c400:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c402:	7dfb      	ldrb	r3, [r7, #23]
 800c404:	2b04      	cmp	r3, #4
 800c406:	d101      	bne.n	800c40c <dir_alloc+0x84>
 800c408:	2307      	movs	r3, #7
 800c40a:	75fb      	strb	r3, [r7, #23]
	return res;
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3718      	adds	r7, #24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b084      	sub	sp, #16
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	331a      	adds	r3, #26
 800c424:	4618      	mov	r0, r3
 800c426:	f7ff f83f 	bl	800b4a8 <ld_word>
 800c42a:	4603      	mov	r3, r0
 800c42c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b03      	cmp	r3, #3
 800c434:	d109      	bne.n	800c44a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	3314      	adds	r3, #20
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7ff f834 	bl	800b4a8 <ld_word>
 800c440:	4603      	mov	r3, r0
 800c442:	041b      	lsls	r3, r3, #16
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	4313      	orrs	r3, r2
 800c448:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c44a:	68fb      	ldr	r3, [r7, #12]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	331a      	adds	r3, #26
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	b292      	uxth	r2, r2
 800c468:	4611      	mov	r1, r2
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7ff f857 	bl	800b51e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	2b03      	cmp	r3, #3
 800c476:	d109      	bne.n	800c48c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f103 0214 	add.w	r2, r3, #20
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	0c1b      	lsrs	r3, r3, #16
 800c482:	b29b      	uxth	r3, r3
 800c484:	4619      	mov	r1, r3
 800c486:	4610      	mov	r0, r2
 800c488:	f7ff f849 	bl	800b51e <st_word>
	}
}
 800c48c:	bf00      	nop
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff fe2f 	bl	800c108 <dir_sdi>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d001      	beq.n	800c4b8 <dir_find+0x24>
 800c4b4:	7dfb      	ldrb	r3, [r7, #23]
 800c4b6:	e03e      	b.n	800c536 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	69db      	ldr	r3, [r3, #28]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	6938      	ldr	r0, [r7, #16]
 800c4c0:	f7ff faa2 	bl	800ba08 <move_window>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d12f      	bne.n	800c52e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d102      	bne.n	800c4e2 <dir_find+0x4e>
 800c4dc:	2304      	movs	r3, #4
 800c4de:	75fb      	strb	r3, [r7, #23]
 800c4e0:	e028      	b.n	800c534 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	330b      	adds	r3, #11
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6a1b      	ldr	r3, [r3, #32]
 800c4f8:	330b      	adds	r3, #11
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	f003 0308 	and.w	r3, r3, #8
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10a      	bne.n	800c51a <dir_find+0x86>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a18      	ldr	r0, [r3, #32]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3324      	adds	r3, #36	; 0x24
 800c50c:	220b      	movs	r2, #11
 800c50e:	4619      	mov	r1, r3
 800c510:	f7ff f888 	bl	800b624 <mem_cmp>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00b      	beq.n	800c532 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c51a:	2100      	movs	r1, #0
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7ff fe6e 	bl	800c1fe <dir_next>
 800c522:	4603      	mov	r3, r0
 800c524:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c526:	7dfb      	ldrb	r3, [r7, #23]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d0c5      	beq.n	800c4b8 <dir_find+0x24>
 800c52c:	e002      	b.n	800c534 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c52e:	bf00      	nop
 800c530:	e000      	b.n	800c534 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c532:	bf00      	nop

	return res;
 800c534:	7dfb      	ldrb	r3, [r7, #23]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3718      	adds	r7, #24
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b084      	sub	sp, #16
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c54c:	2101      	movs	r1, #1
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff ff1a 	bl	800c388 <dir_alloc>
 800c554:	4603      	mov	r3, r0
 800c556:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c558:	7bfb      	ldrb	r3, [r7, #15]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d11c      	bne.n	800c598 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	69db      	ldr	r3, [r3, #28]
 800c562:	4619      	mov	r1, r3
 800c564:	68b8      	ldr	r0, [r7, #8]
 800c566:	f7ff fa4f 	bl	800ba08 <move_window>
 800c56a:	4603      	mov	r3, r0
 800c56c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d111      	bne.n	800c598 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	2220      	movs	r2, #32
 800c57a:	2100      	movs	r1, #0
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7ff f836 	bl	800b5ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a18      	ldr	r0, [r3, #32]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3324      	adds	r3, #36	; 0x24
 800c58a:	220b      	movs	r2, #11
 800c58c:	4619      	mov	r1, r3
 800c58e:	f7ff f80d 	bl	800b5ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2201      	movs	r2, #1
 800c596:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c598:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b088      	sub	sp, #32
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3324      	adds	r3, #36	; 0x24
 800c5b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c5ba:	220b      	movs	r2, #11
 800c5bc:	2120      	movs	r1, #32
 800c5be:	68b8      	ldr	r0, [r7, #8]
 800c5c0:	f7ff f815 	bl	800b5ee <mem_set>
	si = i = 0; ni = 8;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	613b      	str	r3, [r7, #16]
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	61fb      	str	r3, [r7, #28]
 800c5cc:	2308      	movs	r3, #8
 800c5ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	1c5a      	adds	r2, r3, #1
 800c5d4:	61fa      	str	r2, [r7, #28]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	4413      	add	r3, r2
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c5de:	7efb      	ldrb	r3, [r7, #27]
 800c5e0:	2b20      	cmp	r3, #32
 800c5e2:	d94e      	bls.n	800c682 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c5e4:	7efb      	ldrb	r3, [r7, #27]
 800c5e6:	2b2f      	cmp	r3, #47	; 0x2f
 800c5e8:	d006      	beq.n	800c5f8 <create_name+0x54>
 800c5ea:	7efb      	ldrb	r3, [r7, #27]
 800c5ec:	2b5c      	cmp	r3, #92	; 0x5c
 800c5ee:	d110      	bne.n	800c612 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c5f0:	e002      	b.n	800c5f8 <create_name+0x54>
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	61fb      	str	r3, [r7, #28]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	2b2f      	cmp	r3, #47	; 0x2f
 800c602:	d0f6      	beq.n	800c5f2 <create_name+0x4e>
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	4413      	add	r3, r2
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b5c      	cmp	r3, #92	; 0x5c
 800c60e:	d0f0      	beq.n	800c5f2 <create_name+0x4e>
			break;
 800c610:	e038      	b.n	800c684 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c612:	7efb      	ldrb	r3, [r7, #27]
 800c614:	2b2e      	cmp	r3, #46	; 0x2e
 800c616:	d003      	beq.n	800c620 <create_name+0x7c>
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d30c      	bcc.n	800c63a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2b0b      	cmp	r3, #11
 800c624:	d002      	beq.n	800c62c <create_name+0x88>
 800c626:	7efb      	ldrb	r3, [r7, #27]
 800c628:	2b2e      	cmp	r3, #46	; 0x2e
 800c62a:	d001      	beq.n	800c630 <create_name+0x8c>
 800c62c:	2306      	movs	r3, #6
 800c62e:	e044      	b.n	800c6ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c630:	2308      	movs	r3, #8
 800c632:	613b      	str	r3, [r7, #16]
 800c634:	230b      	movs	r3, #11
 800c636:	617b      	str	r3, [r7, #20]
			continue;
 800c638:	e022      	b.n	800c680 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c63a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	da04      	bge.n	800c64c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c642:	7efb      	ldrb	r3, [r7, #27]
 800c644:	3b80      	subs	r3, #128	; 0x80
 800c646:	4a1f      	ldr	r2, [pc, #124]	; (800c6c4 <create_name+0x120>)
 800c648:	5cd3      	ldrb	r3, [r2, r3]
 800c64a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c64c:	7efb      	ldrb	r3, [r7, #27]
 800c64e:	4619      	mov	r1, r3
 800c650:	481d      	ldr	r0, [pc, #116]	; (800c6c8 <create_name+0x124>)
 800c652:	f7ff f80e 	bl	800b672 <chk_chr>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d001      	beq.n	800c660 <create_name+0xbc>
 800c65c:	2306      	movs	r3, #6
 800c65e:	e02c      	b.n	800c6ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c660:	7efb      	ldrb	r3, [r7, #27]
 800c662:	2b60      	cmp	r3, #96	; 0x60
 800c664:	d905      	bls.n	800c672 <create_name+0xce>
 800c666:	7efb      	ldrb	r3, [r7, #27]
 800c668:	2b7a      	cmp	r3, #122	; 0x7a
 800c66a:	d802      	bhi.n	800c672 <create_name+0xce>
 800c66c:	7efb      	ldrb	r3, [r7, #27]
 800c66e:	3b20      	subs	r3, #32
 800c670:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	613a      	str	r2, [r7, #16]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	4413      	add	r3, r2
 800c67c:	7efa      	ldrb	r2, [r7, #27]
 800c67e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c680:	e7a6      	b.n	800c5d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c682:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	441a      	add	r2, r3
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d101      	bne.n	800c698 <create_name+0xf4>
 800c694:	2306      	movs	r3, #6
 800c696:	e010      	b.n	800c6ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2be5      	cmp	r3, #229	; 0xe5
 800c69e:	d102      	bne.n	800c6a6 <create_name+0x102>
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	2205      	movs	r2, #5
 800c6a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c6a6:	7efb      	ldrb	r3, [r7, #27]
 800c6a8:	2b20      	cmp	r3, #32
 800c6aa:	d801      	bhi.n	800c6b0 <create_name+0x10c>
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	e000      	b.n	800c6b2 <create_name+0x10e>
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	330b      	adds	r3, #11
 800c6b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c6b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3720      	adds	r7, #32
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	0800e094 	.word	0x0800e094
 800c6c8:	0800e004 	.word	0x0800e004

0800c6cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c6e0:	e002      	b.n	800c6e8 <follow_path+0x1c>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	603b      	str	r3, [r7, #0]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b2f      	cmp	r3, #47	; 0x2f
 800c6ee:	d0f8      	beq.n	800c6e2 <follow_path+0x16>
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b5c      	cmp	r3, #92	; 0x5c
 800c6f6:	d0f4      	beq.n	800c6e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	2b1f      	cmp	r3, #31
 800c704:	d80a      	bhi.n	800c71c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2280      	movs	r2, #128	; 0x80
 800c70a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c70e:	2100      	movs	r1, #0
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7ff fcf9 	bl	800c108 <dir_sdi>
 800c716:	4603      	mov	r3, r0
 800c718:	75fb      	strb	r3, [r7, #23]
 800c71a:	e043      	b.n	800c7a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c71c:	463b      	mov	r3, r7
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff ff3f 	bl	800c5a4 <create_name>
 800c726:	4603      	mov	r3, r0
 800c728:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c72a:	7dfb      	ldrb	r3, [r7, #23]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d134      	bne.n	800c79a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7ff feaf 	bl	800c494 <dir_find>
 800c736:	4603      	mov	r3, r0
 800c738:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c740:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00a      	beq.n	800c75e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c748:	7dfb      	ldrb	r3, [r7, #23]
 800c74a:	2b04      	cmp	r3, #4
 800c74c:	d127      	bne.n	800c79e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c74e:	7afb      	ldrb	r3, [r7, #11]
 800c750:	f003 0304 	and.w	r3, r3, #4
 800c754:	2b00      	cmp	r3, #0
 800c756:	d122      	bne.n	800c79e <follow_path+0xd2>
 800c758:	2305      	movs	r3, #5
 800c75a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c75c:	e01f      	b.n	800c79e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c75e:	7afb      	ldrb	r3, [r7, #11]
 800c760:	f003 0304 	and.w	r3, r3, #4
 800c764:	2b00      	cmp	r3, #0
 800c766:	d11c      	bne.n	800c7a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	799b      	ldrb	r3, [r3, #6]
 800c76c:	f003 0310 	and.w	r3, r3, #16
 800c770:	2b00      	cmp	r3, #0
 800c772:	d102      	bne.n	800c77a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c774:	2305      	movs	r3, #5
 800c776:	75fb      	strb	r3, [r7, #23]
 800c778:	e014      	b.n	800c7a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	695b      	ldr	r3, [r3, #20]
 800c784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c788:	4413      	add	r3, r2
 800c78a:	4619      	mov	r1, r3
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7ff fe42 	bl	800c416 <ld_clust>
 800c792:	4602      	mov	r2, r0
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c798:	e7c0      	b.n	800c71c <follow_path+0x50>
			if (res != FR_OK) break;
 800c79a:	bf00      	nop
 800c79c:	e002      	b.n	800c7a4 <follow_path+0xd8>
				break;
 800c79e:	bf00      	nop
 800c7a0:	e000      	b.n	800c7a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7a2:	bf00      	nop
			}
		}
	}

	return res;
 800c7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b087      	sub	sp, #28
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d031      	beq.n	800c828 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	617b      	str	r3, [r7, #20]
 800c7ca:	e002      	b.n	800c7d2 <get_ldnumber+0x24>
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	617b      	str	r3, [r7, #20]
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	2b20      	cmp	r3, #32
 800c7d8:	d903      	bls.n	800c7e2 <get_ldnumber+0x34>
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	2b3a      	cmp	r3, #58	; 0x3a
 800c7e0:	d1f4      	bne.n	800c7cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b3a      	cmp	r3, #58	; 0x3a
 800c7e8:	d11c      	bne.n	800c824 <get_ldnumber+0x76>
			tp = *path;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	60fa      	str	r2, [r7, #12]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	3b30      	subs	r3, #48	; 0x30
 800c7fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	2b09      	cmp	r3, #9
 800c800:	d80e      	bhi.n	800c820 <get_ldnumber+0x72>
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	429a      	cmp	r2, r3
 800c808:	d10a      	bne.n	800c820 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d107      	bne.n	800c820 <get_ldnumber+0x72>
					vol = (int)i;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	3301      	adds	r3, #1
 800c818:	617b      	str	r3, [r7, #20]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	e002      	b.n	800c82a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c824:	2300      	movs	r3, #0
 800c826:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c828:	693b      	ldr	r3, [r7, #16]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	371c      	adds	r7, #28
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr
	...

0800c838 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	70da      	strb	r2, [r3, #3]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f04f 32ff 	mov.w	r2, #4294967295
 800c84e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff f8d8 	bl	800ba08 <move_window>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <check_fs+0x2a>
 800c85e:	2304      	movs	r3, #4
 800c860:	e038      	b.n	800c8d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	3330      	adds	r3, #48	; 0x30
 800c866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fe fe1c 	bl	800b4a8 <ld_word>
 800c870:	4603      	mov	r3, r0
 800c872:	461a      	mov	r2, r3
 800c874:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c878:	429a      	cmp	r2, r3
 800c87a:	d001      	beq.n	800c880 <check_fs+0x48>
 800c87c:	2303      	movs	r3, #3
 800c87e:	e029      	b.n	800c8d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c886:	2be9      	cmp	r3, #233	; 0xe9
 800c888:	d009      	beq.n	800c89e <check_fs+0x66>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c890:	2beb      	cmp	r3, #235	; 0xeb
 800c892:	d11e      	bne.n	800c8d2 <check_fs+0x9a>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c89a:	2b90      	cmp	r3, #144	; 0x90
 800c89c:	d119      	bne.n	800c8d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3330      	adds	r3, #48	; 0x30
 800c8a2:	3336      	adds	r3, #54	; 0x36
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fe fe17 	bl	800b4d8 <ld_dword>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c8b0:	4a0a      	ldr	r2, [pc, #40]	; (800c8dc <check_fs+0xa4>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d101      	bne.n	800c8ba <check_fs+0x82>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e00c      	b.n	800c8d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3330      	adds	r3, #48	; 0x30
 800c8be:	3352      	adds	r3, #82	; 0x52
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fe fe09 	bl	800b4d8 <ld_dword>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	4a05      	ldr	r2, [pc, #20]	; (800c8e0 <check_fs+0xa8>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d101      	bne.n	800c8d2 <check_fs+0x9a>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	e000      	b.n	800c8d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c8d2:	2302      	movs	r3, #2
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	00544146 	.word	0x00544146
 800c8e0:	33544146 	.word	0x33544146

0800c8e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b096      	sub	sp, #88	; 0x58
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f7ff ff58 	bl	800c7ae <get_ldnumber>
 800c8fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c902:	2b00      	cmp	r3, #0
 800c904:	da01      	bge.n	800c90a <find_volume+0x26>
 800c906:	230b      	movs	r3, #11
 800c908:	e22d      	b.n	800cd66 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c90a:	4aa1      	ldr	r2, [pc, #644]	; (800cb90 <find_volume+0x2ac>)
 800c90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c912:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	2b00      	cmp	r3, #0
 800c918:	d101      	bne.n	800c91e <find_volume+0x3a>
 800c91a:	230c      	movs	r3, #12
 800c91c:	e223      	b.n	800cd66 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c922:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c924:	79fb      	ldrb	r3, [r7, #7]
 800c926:	f023 0301 	bic.w	r3, r3, #1
 800c92a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d01a      	beq.n	800c96a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	785b      	ldrb	r3, [r3, #1]
 800c938:	4618      	mov	r0, r3
 800c93a:	f7fe fd17 	bl	800b36c <disk_status>
 800c93e:	4603      	mov	r3, r0
 800c940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10c      	bne.n	800c96a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c950:	79fb      	ldrb	r3, [r7, #7]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d007      	beq.n	800c966 <find_volume+0x82>
 800c956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c95a:	f003 0304 	and.w	r3, r3, #4
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c962:	230a      	movs	r3, #10
 800c964:	e1ff      	b.n	800cd66 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c966:	2300      	movs	r3, #0
 800c968:	e1fd      	b.n	800cd66 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	2200      	movs	r2, #0
 800c96e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c972:	b2da      	uxtb	r2, r3
 800c974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c976:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97a:	785b      	ldrb	r3, [r3, #1]
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7fe fd0f 	bl	800b3a0 <disk_initialize>
 800c982:	4603      	mov	r3, r0
 800c984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	d001      	beq.n	800c998 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c994:	2303      	movs	r3, #3
 800c996:	e1e6      	b.n	800cd66 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c998:	79fb      	ldrb	r3, [r7, #7]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d007      	beq.n	800c9ae <find_volume+0xca>
 800c99e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9a2:	f003 0304 	and.w	r3, r3, #4
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d001      	beq.n	800c9ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c9aa:	230a      	movs	r3, #10
 800c9ac:	e1db      	b.n	800cd66 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c9b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9b6:	f7ff ff3f 	bl	800c838 <check_fs>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c9c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d149      	bne.n	800ca5c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c9cc:	e01e      	b.n	800ca0c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d6:	011b      	lsls	r3, r3, #4
 800c9d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c9dc:	4413      	add	r3, r2
 800c9de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d006      	beq.n	800c9f8 <find_volume+0x114>
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	3308      	adds	r3, #8
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fd72 	bl	800b4d8 <ld_dword>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	e000      	b.n	800c9fa <find_volume+0x116>
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	3358      	adds	r3, #88	; 0x58
 800ca00:	443b      	add	r3, r7
 800ca02:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca08:	3301      	adds	r3, #1
 800ca0a:	643b      	str	r3, [r7, #64]	; 0x40
 800ca0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d9dd      	bls.n	800c9ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca12:	2300      	movs	r3, #0
 800ca14:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ca16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <find_volume+0x13e>
 800ca1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	3358      	adds	r3, #88	; 0x58
 800ca28:	443b      	add	r3, r7
 800ca2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ca2e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d005      	beq.n	800ca42 <find_volume+0x15e>
 800ca36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca3a:	f7ff fefd 	bl	800c838 <check_fs>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	e000      	b.n	800ca44 <find_volume+0x160>
 800ca42:	2303      	movs	r3, #3
 800ca44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ca48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d905      	bls.n	800ca5c <find_volume+0x178>
 800ca50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca52:	3301      	adds	r3, #1
 800ca54:	643b      	str	r3, [r7, #64]	; 0x40
 800ca56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca58:	2b03      	cmp	r3, #3
 800ca5a:	d9e2      	bls.n	800ca22 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ca5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca60:	2b04      	cmp	r3, #4
 800ca62:	d101      	bne.n	800ca68 <find_volume+0x184>
 800ca64:	2301      	movs	r3, #1
 800ca66:	e17e      	b.n	800cd66 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ca68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d901      	bls.n	800ca74 <find_volume+0x190>
 800ca70:	230d      	movs	r3, #13
 800ca72:	e178      	b.n	800cd66 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ca74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca76:	3330      	adds	r3, #48	; 0x30
 800ca78:	330b      	adds	r3, #11
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe fd14 	bl	800b4a8 <ld_word>
 800ca80:	4603      	mov	r3, r0
 800ca82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca86:	d001      	beq.n	800ca8c <find_volume+0x1a8>
 800ca88:	230d      	movs	r3, #13
 800ca8a:	e16c      	b.n	800cd66 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	3330      	adds	r3, #48	; 0x30
 800ca90:	3316      	adds	r3, #22
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fe fd08 	bl	800b4a8 <ld_word>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ca9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d106      	bne.n	800cab0 <find_volume+0x1cc>
 800caa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa4:	3330      	adds	r3, #48	; 0x30
 800caa6:	3324      	adds	r3, #36	; 0x24
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fe fd15 	bl	800b4d8 <ld_dword>
 800caae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cab4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac2:	789b      	ldrb	r3, [r3, #2]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d005      	beq.n	800cad4 <find_volume+0x1f0>
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	789b      	ldrb	r3, [r3, #2]
 800cacc:	2b02      	cmp	r3, #2
 800cace:	d001      	beq.n	800cad4 <find_volume+0x1f0>
 800cad0:	230d      	movs	r3, #13
 800cad2:	e148      	b.n	800cd66 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	789b      	ldrb	r3, [r3, #2]
 800cad8:	461a      	mov	r2, r3
 800cada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cadc:	fb02 f303 	mul.w	r3, r2, r3
 800cae0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cae8:	b29a      	uxth	r2, r3
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800caee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf0:	895b      	ldrh	r3, [r3, #10]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d008      	beq.n	800cb08 <find_volume+0x224>
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	895b      	ldrh	r3, [r3, #10]
 800cafa:	461a      	mov	r2, r3
 800cafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafe:	895b      	ldrh	r3, [r3, #10]
 800cb00:	3b01      	subs	r3, #1
 800cb02:	4013      	ands	r3, r2
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d001      	beq.n	800cb0c <find_volume+0x228>
 800cb08:	230d      	movs	r3, #13
 800cb0a:	e12c      	b.n	800cd66 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	3330      	adds	r3, #48	; 0x30
 800cb10:	3311      	adds	r3, #17
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fcc8 	bl	800b4a8 <ld_word>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	891b      	ldrh	r3, [r3, #8]
 800cb24:	f003 030f 	and.w	r3, r3, #15
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d001      	beq.n	800cb32 <find_volume+0x24e>
 800cb2e:	230d      	movs	r3, #13
 800cb30:	e119      	b.n	800cd66 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb34:	3330      	adds	r3, #48	; 0x30
 800cb36:	3313      	adds	r3, #19
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fe fcb5 	bl	800b4a8 <ld_word>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cb42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d106      	bne.n	800cb56 <find_volume+0x272>
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	3330      	adds	r3, #48	; 0x30
 800cb4c:	3320      	adds	r3, #32
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fe fcc2 	bl	800b4d8 <ld_dword>
 800cb54:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	3330      	adds	r3, #48	; 0x30
 800cb5a:	330e      	adds	r3, #14
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fe fca3 	bl	800b4a8 <ld_word>
 800cb62:	4603      	mov	r3, r0
 800cb64:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cb66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <find_volume+0x28c>
 800cb6c:	230d      	movs	r3, #13
 800cb6e:	e0fa      	b.n	800cd66 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cb70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb74:	4413      	add	r3, r2
 800cb76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb78:	8912      	ldrh	r2, [r2, #8]
 800cb7a:	0912      	lsrs	r2, r2, #4
 800cb7c:	b292      	uxth	r2, r2
 800cb7e:	4413      	add	r3, r2
 800cb80:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cb82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d204      	bcs.n	800cb94 <find_volume+0x2b0>
 800cb8a:	230d      	movs	r3, #13
 800cb8c:	e0eb      	b.n	800cd66 <find_volume+0x482>
 800cb8e:	bf00      	nop
 800cb90:	240002a4 	.word	0x240002a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cb94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb9c:	8952      	ldrh	r2, [r2, #10]
 800cb9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cba2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <find_volume+0x2ca>
 800cbaa:	230d      	movs	r3, #13
 800cbac:	e0db      	b.n	800cd66 <find_volume+0x482>
		fmt = FS_FAT32;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d802      	bhi.n	800cbc4 <find_volume+0x2e0>
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d802      	bhi.n	800cbd4 <find_volume+0x2f0>
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd6:	1c9a      	adds	r2, r3, #2
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbda:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbe0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cbe2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cbe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbe6:	441a      	add	r2, r3
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cbec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf0:	441a      	add	r2, r3
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cbf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d11e      	bne.n	800cc3c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	3330      	adds	r3, #48	; 0x30
 800cc02:	332a      	adds	r3, #42	; 0x2a
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fe fc4f 	bl	800b4a8 <ld_word>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d001      	beq.n	800cc14 <find_volume+0x330>
 800cc10:	230d      	movs	r3, #13
 800cc12:	e0a8      	b.n	800cd66 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	891b      	ldrh	r3, [r3, #8]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d001      	beq.n	800cc20 <find_volume+0x33c>
 800cc1c:	230d      	movs	r3, #13
 800cc1e:	e0a2      	b.n	800cd66 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	3330      	adds	r3, #48	; 0x30
 800cc24:	332c      	adds	r3, #44	; 0x2c
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fe fc56 	bl	800b4d8 <ld_dword>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc30:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	647b      	str	r3, [r7, #68]	; 0x44
 800cc3a:	e01f      	b.n	800cc7c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3e:	891b      	ldrh	r3, [r3, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d101      	bne.n	800cc48 <find_volume+0x364>
 800cc44:	230d      	movs	r3, #13
 800cc46:	e08e      	b.n	800cd66 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	6a1a      	ldr	r2, [r3, #32]
 800cc4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc4e:	441a      	add	r2, r3
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cc54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d103      	bne.n	800cc64 <find_volume+0x380>
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	005b      	lsls	r3, r3, #1
 800cc62:	e00a      	b.n	800cc7a <find_volume+0x396>
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	695a      	ldr	r2, [r3, #20]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	4413      	add	r3, r2
 800cc6e:	085a      	lsrs	r2, r3, #1
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	f003 0301 	and.w	r3, r3, #1
 800cc78:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cc7a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	699a      	ldr	r2, [r3, #24]
 800cc80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cc86:	0a5b      	lsrs	r3, r3, #9
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d201      	bcs.n	800cc90 <find_volume+0x3ac>
 800cc8c:	230d      	movs	r3, #13
 800cc8e:	e06a      	b.n	800cd66 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc92:	f04f 32ff 	mov.w	r2, #4294967295
 800cc96:	611a      	str	r2, [r3, #16]
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	691a      	ldr	r2, [r3, #16]
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	2280      	movs	r2, #128	; 0x80
 800cca4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cca6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccaa:	2b03      	cmp	r3, #3
 800ccac:	d149      	bne.n	800cd42 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ccae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb0:	3330      	adds	r3, #48	; 0x30
 800ccb2:	3330      	adds	r3, #48	; 0x30
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fe fbf7 	bl	800b4a8 <ld_word>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d140      	bne.n	800cd42 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ccc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccc8:	f7fe fe9e 	bl	800ba08 <move_window>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d137      	bne.n	800cd42 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccda:	3330      	adds	r3, #48	; 0x30
 800ccdc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fe fbe1 	bl	800b4a8 <ld_word>
 800cce6:	4603      	mov	r3, r0
 800cce8:	461a      	mov	r2, r3
 800ccea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d127      	bne.n	800cd42 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf4:	3330      	adds	r3, #48	; 0x30
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fe fbee 	bl	800b4d8 <ld_dword>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	4a1c      	ldr	r2, [pc, #112]	; (800cd70 <find_volume+0x48c>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d11e      	bne.n	800cd42 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd06:	3330      	adds	r3, #48	; 0x30
 800cd08:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe fbe3 	bl	800b4d8 <ld_dword>
 800cd12:	4603      	mov	r3, r0
 800cd14:	4a17      	ldr	r2, [pc, #92]	; (800cd74 <find_volume+0x490>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d113      	bne.n	800cd42 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1c:	3330      	adds	r3, #48	; 0x30
 800cd1e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fe fbd8 	bl	800b4d8 <ld_dword>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd30:	3330      	adds	r3, #48	; 0x30
 800cd32:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fe fbce 	bl	800b4d8 <ld_dword>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cd48:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cd4a:	4b0b      	ldr	r3, [pc, #44]	; (800cd78 <find_volume+0x494>)
 800cd4c:	881b      	ldrh	r3, [r3, #0]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	4b09      	ldr	r3, [pc, #36]	; (800cd78 <find_volume+0x494>)
 800cd54:	801a      	strh	r2, [r3, #0]
 800cd56:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <find_volume+0x494>)
 800cd58:	881a      	ldrh	r2, [r3, #0]
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cd5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd60:	f7fe fdea 	bl	800b938 <clear_lock>
#endif
	return FR_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3758      	adds	r7, #88	; 0x58
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	41615252 	.word	0x41615252
 800cd74:	61417272 	.word	0x61417272
 800cd78:	240002a8 	.word	0x240002a8

0800cd7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cd86:	2309      	movs	r3, #9
 800cd88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01c      	beq.n	800cdca <validate+0x4e>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d018      	beq.n	800cdca <validate+0x4e>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d013      	beq.n	800cdca <validate+0x4e>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	889a      	ldrh	r2, [r3, #4]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	88db      	ldrh	r3, [r3, #6]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d10c      	bne.n	800cdca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	785b      	ldrb	r3, [r3, #1]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fe fad8 	bl	800b36c <disk_status>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <validate+0x4e>
			res = FR_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d102      	bne.n	800cdd6 <validate+0x5a>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	e000      	b.n	800cdd8 <validate+0x5c>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	6013      	str	r3, [r2, #0]
	return res;
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cdfa:	f107 0310 	add.w	r3, r7, #16
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff fcd5 	bl	800c7ae <get_ldnumber>
 800ce04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	da01      	bge.n	800ce10 <f_mount+0x28>
 800ce0c:	230b      	movs	r3, #11
 800ce0e:	e02b      	b.n	800ce68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce10:	4a17      	ldr	r2, [pc, #92]	; (800ce70 <f_mount+0x88>)
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d005      	beq.n	800ce2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ce20:	69b8      	ldr	r0, [r7, #24]
 800ce22:	f7fe fd89 	bl	800b938 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2200      	movs	r2, #0
 800ce36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	490d      	ldr	r1, [pc, #52]	; (800ce70 <f_mount+0x88>)
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <f_mount+0x66>
 800ce48:	79fb      	ldrb	r3, [r7, #7]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d001      	beq.n	800ce52 <f_mount+0x6a>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	e00a      	b.n	800ce68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ce52:	f107 010c 	add.w	r1, r7, #12
 800ce56:	f107 0308 	add.w	r3, r7, #8
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff fd41 	bl	800c8e4 <find_volume>
 800ce62:	4603      	mov	r3, r0
 800ce64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3720      	adds	r7, #32
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	240002a4 	.word	0x240002a4

0800ce74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b098      	sub	sp, #96	; 0x60
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d101      	bne.n	800ce8c <f_open+0x18>
 800ce88:	2309      	movs	r3, #9
 800ce8a:	e1ad      	b.n	800d1e8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ce94:	79fa      	ldrb	r2, [r7, #7]
 800ce96:	f107 0110 	add.w	r1, r7, #16
 800ce9a:	f107 0308 	add.w	r3, r7, #8
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7ff fd20 	bl	800c8e4 <find_volume>
 800cea4:	4603      	mov	r3, r0
 800cea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ceaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f040 8191 	bne.w	800d1d6 <f_open+0x362>
		dj.obj.fs = fs;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	f107 0314 	add.w	r3, r7, #20
 800cebe:	4611      	mov	r1, r2
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7ff fc03 	bl	800c6cc <follow_path>
 800cec6:	4603      	mov	r3, r0
 800cec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d11a      	bne.n	800cf0a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ced4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ced8:	b25b      	sxtb	r3, r3
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	da03      	bge.n	800cee6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cede:	2306      	movs	r3, #6
 800cee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cee4:	e011      	b.n	800cf0a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cee6:	79fb      	ldrb	r3, [r7, #7]
 800cee8:	f023 0301 	bic.w	r3, r3, #1
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	bf14      	ite	ne
 800cef0:	2301      	movne	r3, #1
 800cef2:	2300      	moveq	r3, #0
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	461a      	mov	r2, r3
 800cef8:	f107 0314 	add.w	r3, r7, #20
 800cefc:	4611      	mov	r1, r2
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fe fbd2 	bl	800b6a8 <chk_lock>
 800cf04:	4603      	mov	r3, r0
 800cf06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf0a:	79fb      	ldrb	r3, [r7, #7]
 800cf0c:	f003 031c 	and.w	r3, r3, #28
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d07f      	beq.n	800d014 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cf14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d017      	beq.n	800cf4c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cf1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf20:	2b04      	cmp	r3, #4
 800cf22:	d10e      	bne.n	800cf42 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf24:	f7fe fc1c 	bl	800b760 <enq_lock>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d006      	beq.n	800cf3c <f_open+0xc8>
 800cf2e:	f107 0314 	add.w	r3, r7, #20
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7ff fb03 	bl	800c53e <dir_register>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	e000      	b.n	800cf3e <f_open+0xca>
 800cf3c:	2312      	movs	r3, #18
 800cf3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf42:	79fb      	ldrb	r3, [r7, #7]
 800cf44:	f043 0308 	orr.w	r3, r3, #8
 800cf48:	71fb      	strb	r3, [r7, #7]
 800cf4a:	e010      	b.n	800cf6e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf4c:	7ebb      	ldrb	r3, [r7, #26]
 800cf4e:	f003 0311 	and.w	r3, r3, #17
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <f_open+0xea>
					res = FR_DENIED;
 800cf56:	2307      	movs	r3, #7
 800cf58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf5c:	e007      	b.n	800cf6e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cf5e:	79fb      	ldrb	r3, [r7, #7]
 800cf60:	f003 0304 	and.w	r3, r3, #4
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <f_open+0xfa>
 800cf68:	2308      	movs	r3, #8
 800cf6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cf6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d168      	bne.n	800d048 <f_open+0x1d4>
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	f003 0308 	and.w	r3, r3, #8
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d063      	beq.n	800d048 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cf80:	f7fe f860 	bl	800b044 <get_fattime>
 800cf84:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf88:	330e      	adds	r3, #14
 800cf8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fe fae1 	bl	800b554 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf94:	3316      	adds	r3, #22
 800cf96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fe fadb 	bl	800b554 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa0:	330b      	adds	r3, #11
 800cfa2:	2220      	movs	r2, #32
 800cfa4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfaa:	4611      	mov	r1, r2
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7ff fa32 	bl	800c416 <ld_clust>
 800cfb2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cfb8:	2200      	movs	r2, #0
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff fa4a 	bl	800c454 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cfc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc2:	331c      	adds	r3, #28
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe fac4 	bl	800b554 <st_dword>
					fs->wflag = 1;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cfd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d037      	beq.n	800d048 <f_open+0x1d4>
						dw = fs->winsect;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfdc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cfde:	f107 0314 	add.w	r3, r7, #20
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fe ff5d 	bl	800bea6 <remove_chain>
 800cfec:	4603      	mov	r3, r0
 800cfee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d126      	bne.n	800d048 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fe fd02 	bl	800ba08 <move_window>
 800d004:	4603      	mov	r3, r0
 800d006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d00e:	3a01      	subs	r2, #1
 800d010:	60da      	str	r2, [r3, #12]
 800d012:	e019      	b.n	800d048 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d115      	bne.n	800d048 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d01c:	7ebb      	ldrb	r3, [r7, #26]
 800d01e:	f003 0310 	and.w	r3, r3, #16
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <f_open+0x1ba>
					res = FR_NO_FILE;
 800d026:	2304      	movs	r3, #4
 800d028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d02c:	e00c      	b.n	800d048 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d02e:	79fb      	ldrb	r3, [r7, #7]
 800d030:	f003 0302 	and.w	r3, r3, #2
 800d034:	2b00      	cmp	r3, #0
 800d036:	d007      	beq.n	800d048 <f_open+0x1d4>
 800d038:	7ebb      	ldrb	r3, [r7, #26]
 800d03a:	f003 0301 	and.w	r3, r3, #1
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <f_open+0x1d4>
						res = FR_DENIED;
 800d042:	2307      	movs	r3, #7
 800d044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d128      	bne.n	800d0a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d050:	79fb      	ldrb	r3, [r7, #7]
 800d052:	f003 0308 	and.w	r3, r3, #8
 800d056:	2b00      	cmp	r3, #0
 800d058:	d003      	beq.n	800d062 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d060:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d06a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d070:	79fb      	ldrb	r3, [r7, #7]
 800d072:	f023 0301 	bic.w	r3, r3, #1
 800d076:	2b00      	cmp	r3, #0
 800d078:	bf14      	ite	ne
 800d07a:	2301      	movne	r3, #1
 800d07c:	2300      	moveq	r3, #0
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	461a      	mov	r2, r3
 800d082:	f107 0314 	add.w	r3, r7, #20
 800d086:	4611      	mov	r1, r2
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fe fb8b 	bl	800b7a4 <inc_lock>
 800d08e:	4602      	mov	r2, r0
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	691b      	ldr	r3, [r3, #16]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d102      	bne.n	800d0a2 <f_open+0x22e>
 800d09c:	2302      	movs	r3, #2
 800d09e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d0a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f040 8095 	bne.w	800d1d6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7ff f9af 	bl	800c416 <ld_clust>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c0:	331c      	adds	r3, #28
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe fa08 	bl	800b4d8 <ld_dword>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	88da      	ldrh	r2, [r3, #6]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	79fa      	ldrb	r2, [r7, #7]
 800d0e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3330      	adds	r3, #48	; 0x30
 800d0fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d102:	2100      	movs	r1, #0
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe fa72 	bl	800b5ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	f003 0320 	and.w	r3, r3, #32
 800d110:	2b00      	cmp	r3, #0
 800d112:	d060      	beq.n	800d1d6 <f_open+0x362>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d05c      	beq.n	800d1d6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	68da      	ldr	r2, [r3, #12]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	895b      	ldrh	r3, [r3, #10]
 800d128:	025b      	lsls	r3, r3, #9
 800d12a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	657b      	str	r3, [r7, #84]	; 0x54
 800d138:	e016      	b.n	800d168 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fe fd1d 	bl	800bb7e <get_fat>
 800d144:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d802      	bhi.n	800d152 <f_open+0x2de>
 800d14c:	2302      	movs	r3, #2
 800d14e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d158:	d102      	bne.n	800d160 <f_open+0x2ec>
 800d15a:	2301      	movs	r3, #1
 800d15c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	657b      	str	r3, [r7, #84]	; 0x54
 800d168:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d103      	bne.n	800d178 <f_open+0x304>
 800d170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d174:	429a      	cmp	r2, r3
 800d176:	d8e0      	bhi.n	800d13a <f_open+0x2c6>
				}
				fp->clust = clst;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d17c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d17e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d182:	2b00      	cmp	r3, #0
 800d184:	d127      	bne.n	800d1d6 <f_open+0x362>
 800d186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d022      	beq.n	800d1d6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d194:	4618      	mov	r0, r3
 800d196:	f7fe fcd3 	bl	800bb40 <clust2sect>
 800d19a:	6478      	str	r0, [r7, #68]	; 0x44
 800d19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d103      	bne.n	800d1aa <f_open+0x336>
						res = FR_INT_ERR;
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d1a8:	e015      	b.n	800d1d6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d1aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1ac:	0a5a      	lsrs	r2, r3, #9
 800d1ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1b0:	441a      	add	r2, r3
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	7858      	ldrb	r0, [r3, #1]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6a1a      	ldr	r2, [r3, #32]
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	f7fe f911 	bl	800b3ec <disk_read>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <f_open+0x362>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d1d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <f_open+0x370>
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d1e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3760      	adds	r7, #96	; 0x60
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b08e      	sub	sp, #56	; 0x38
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f107 0214 	add.w	r2, r7, #20
 800d20e:	4611      	mov	r1, r2
 800d210:	4618      	mov	r0, r3
 800d212:	f7ff fdb3 	bl	800cd7c <validate>
 800d216:	4603      	mov	r3, r0
 800d218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d21c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d220:	2b00      	cmp	r3, #0
 800d222:	d107      	bne.n	800d234 <f_read+0x44>
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	7d5b      	ldrb	r3, [r3, #21]
 800d228:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d22c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d230:	2b00      	cmp	r3, #0
 800d232:	d002      	beq.n	800d23a <f_read+0x4a>
 800d234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d238:	e115      	b.n	800d466 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	7d1b      	ldrb	r3, [r3, #20]
 800d23e:	f003 0301 	and.w	r3, r3, #1
 800d242:	2b00      	cmp	r3, #0
 800d244:	d101      	bne.n	800d24a <f_read+0x5a>
 800d246:	2307      	movs	r3, #7
 800d248:	e10d      	b.n	800d466 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	68da      	ldr	r2, [r3, #12]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	699b      	ldr	r3, [r3, #24]
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	6a3b      	ldr	r3, [r7, #32]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	f240 80fe 	bls.w	800d45c <f_read+0x26c>
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d264:	e0fa      	b.n	800d45c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	699b      	ldr	r3, [r3, #24]
 800d26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f040 80c6 	bne.w	800d400 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	699b      	ldr	r3, [r3, #24]
 800d278:	0a5b      	lsrs	r3, r3, #9
 800d27a:	697a      	ldr	r2, [r7, #20]
 800d27c:	8952      	ldrh	r2, [r2, #10]
 800d27e:	3a01      	subs	r2, #1
 800d280:	4013      	ands	r3, r2
 800d282:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d12f      	bne.n	800d2ea <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	699b      	ldr	r3, [r3, #24]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d103      	bne.n	800d29a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	633b      	str	r3, [r7, #48]	; 0x30
 800d298:	e013      	b.n	800d2c2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d007      	beq.n	800d2b2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	699b      	ldr	r3, [r3, #24]
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f7fe fef9 	bl	800c0a0 <clmt_clust>
 800d2ae:	6338      	str	r0, [r7, #48]	; 0x30
 800d2b0:	e007      	b.n	800d2c2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	69db      	ldr	r3, [r3, #28]
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	4610      	mov	r0, r2
 800d2bc:	f7fe fc5f 	bl	800bb7e <get_fat>
 800d2c0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d804      	bhi.n	800d2d2 <f_read+0xe2>
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2202      	movs	r2, #2
 800d2cc:	755a      	strb	r2, [r3, #21]
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	e0c9      	b.n	800d466 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d8:	d104      	bne.n	800d2e4 <f_read+0xf4>
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	755a      	strb	r2, [r3, #21]
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e0c0      	b.n	800d466 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d2ea:	697a      	ldr	r2, [r7, #20]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	69db      	ldr	r3, [r3, #28]
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	f7fe fc24 	bl	800bb40 <clust2sect>
 800d2f8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d104      	bne.n	800d30a <f_read+0x11a>
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2202      	movs	r2, #2
 800d304:	755a      	strb	r2, [r3, #21]
 800d306:	2302      	movs	r3, #2
 800d308:	e0ad      	b.n	800d466 <f_read+0x276>
			sect += csect;
 800d30a:	69ba      	ldr	r2, [r7, #24]
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	4413      	add	r3, r2
 800d310:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	0a5b      	lsrs	r3, r3, #9
 800d316:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d039      	beq.n	800d392 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d31e:	69fa      	ldr	r2, [r7, #28]
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	4413      	add	r3, r2
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	8952      	ldrh	r2, [r2, #10]
 800d328:	4293      	cmp	r3, r2
 800d32a:	d905      	bls.n	800d338 <f_read+0x148>
					cc = fs->csize - csect;
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	895b      	ldrh	r3, [r3, #10]
 800d330:	461a      	mov	r2, r3
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	7858      	ldrb	r0, [r3, #1]
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	69ba      	ldr	r2, [r7, #24]
 800d340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d342:	f7fe f853 	bl	800b3ec <disk_read>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d004      	beq.n	800d356 <f_read+0x166>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2201      	movs	r2, #1
 800d350:	755a      	strb	r2, [r3, #21]
 800d352:	2301      	movs	r3, #1
 800d354:	e087      	b.n	800d466 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	7d1b      	ldrb	r3, [r3, #20]
 800d35a:	b25b      	sxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	da14      	bge.n	800d38a <f_read+0x19a>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6a1a      	ldr	r2, [r3, #32]
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d90d      	bls.n	800d38a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6a1a      	ldr	r2, [r3, #32]
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	1ad3      	subs	r3, r2, r3
 800d376:	025b      	lsls	r3, r3, #9
 800d378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d37a:	18d0      	adds	r0, r2, r3
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	3330      	adds	r3, #48	; 0x30
 800d380:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d384:	4619      	mov	r1, r3
 800d386:	f7fe f911 	bl	800b5ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38c:	025b      	lsls	r3, r3, #9
 800d38e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d390:	e050      	b.n	800d434 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6a1b      	ldr	r3, [r3, #32]
 800d396:	69ba      	ldr	r2, [r7, #24]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d02e      	beq.n	800d3fa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	7d1b      	ldrb	r3, [r3, #20]
 800d3a0:	b25b      	sxtb	r3, r3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	da18      	bge.n	800d3d8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	7858      	ldrb	r0, [r3, #1]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6a1a      	ldr	r2, [r3, #32]
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	f7fe f839 	bl	800b42c <disk_write>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d004      	beq.n	800d3ca <f_read+0x1da>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	755a      	strb	r2, [r3, #21]
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e04d      	b.n	800d466 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	7d1b      	ldrb	r3, [r3, #20]
 800d3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	7858      	ldrb	r0, [r3, #1]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	69ba      	ldr	r2, [r7, #24]
 800d3e6:	f7fe f801 	bl	800b3ec <disk_read>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d004      	beq.n	800d3fa <f_read+0x20a>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	755a      	strb	r2, [r3, #21]
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e035      	b.n	800d466 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	69ba      	ldr	r2, [r7, #24]
 800d3fe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d408:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d40c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d40e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	429a      	cmp	r2, r3
 800d414:	d901      	bls.n	800d41a <f_read+0x22a>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d428:	4413      	add	r3, r2
 800d42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d42c:	4619      	mov	r1, r3
 800d42e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d430:	f7fe f8bc 	bl	800b5ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d438:	4413      	add	r3, r2
 800d43a:	627b      	str	r3, [r7, #36]	; 0x24
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	699a      	ldr	r2, [r3, #24]
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	441a      	add	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	619a      	str	r2, [r3, #24]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	441a      	add	r2, r3
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f47f af01 	bne.w	800d266 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3738      	adds	r7, #56	; 0x38
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b086      	sub	sp, #24
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f107 0208 	add.w	r2, r7, #8
 800d47c:	4611      	mov	r1, r2
 800d47e:	4618      	mov	r0, r3
 800d480:	f7ff fc7c 	bl	800cd7c <validate>
 800d484:	4603      	mov	r3, r0
 800d486:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d488:	7dfb      	ldrb	r3, [r7, #23]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d168      	bne.n	800d560 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	7d1b      	ldrb	r3, [r3, #20]
 800d492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	d062      	beq.n	800d560 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	7d1b      	ldrb	r3, [r3, #20]
 800d49e:	b25b      	sxtb	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	da15      	bge.n	800d4d0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	7858      	ldrb	r0, [r3, #1]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a1a      	ldr	r2, [r3, #32]
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	f7fd ffba 	bl	800b42c <disk_write>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <f_sync+0x54>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e04f      	b.n	800d562 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	7d1b      	ldrb	r3, [r3, #20]
 800d4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d4d0:	f7fd fdb8 	bl	800b044 <get_fattime>
 800d4d4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4dc:	4619      	mov	r1, r3
 800d4de:	4610      	mov	r0, r2
 800d4e0:	f7fe fa92 	bl	800ba08 <move_window>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d4e8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d138      	bne.n	800d560 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	330b      	adds	r3, #11
 800d4f8:	781a      	ldrb	r2, [r3, #0]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	330b      	adds	r3, #11
 800d4fe:	f042 0220 	orr.w	r2, r2, #32
 800d502:	b2d2      	uxtb	r2, r2
 800d504:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6818      	ldr	r0, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	461a      	mov	r2, r3
 800d510:	68f9      	ldr	r1, [r7, #12]
 800d512:	f7fe ff9f 	bl	800c454 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f103 021c 	add.w	r2, r3, #28
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	4619      	mov	r1, r3
 800d522:	4610      	mov	r0, r2
 800d524:	f7fe f816 	bl	800b554 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	3316      	adds	r3, #22
 800d52c:	6939      	ldr	r1, [r7, #16]
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fe f810 	bl	800b554 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	3312      	adds	r3, #18
 800d538:	2100      	movs	r1, #0
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fd ffef 	bl	800b51e <st_word>
					fs->wflag = 1;
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	2201      	movs	r2, #1
 800d544:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe fa8b 	bl	800ba64 <sync_fs>
 800d54e:	4603      	mov	r3, r0
 800d550:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	7d1b      	ldrb	r3, [r3, #20]
 800d556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d560:	7dfb      	ldrb	r3, [r7, #23]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3718      	adds	r7, #24
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b084      	sub	sp, #16
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff ff7b 	bl	800d46e <f_sync>
 800d578:	4603      	mov	r3, r0
 800d57a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d57c:	7bfb      	ldrb	r3, [r7, #15]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d118      	bne.n	800d5b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f107 0208 	add.w	r2, r7, #8
 800d588:	4611      	mov	r1, r2
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7ff fbf6 	bl	800cd7c <validate>
 800d590:	4603      	mov	r3, r0
 800d592:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d594:	7bfb      	ldrb	r3, [r7, #15]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10c      	bne.n	800d5b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fe f98e 	bl	800b8c0 <dec_lock>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d5a8:	7bfb      	ldrb	r3, [r7, #15]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d102      	bne.n	800d5b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
	...

0800d5c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d5d6:	4b1f      	ldr	r3, [pc, #124]	; (800d654 <FATFS_LinkDriverEx+0x94>)
 800d5d8:	7a5b      	ldrb	r3, [r3, #9]
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d131      	bne.n	800d644 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d5e0:	4b1c      	ldr	r3, [pc, #112]	; (800d654 <FATFS_LinkDriverEx+0x94>)
 800d5e2:	7a5b      	ldrb	r3, [r3, #9]
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	4b1a      	ldr	r3, [pc, #104]	; (800d654 <FATFS_LinkDriverEx+0x94>)
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d5ee:	4b19      	ldr	r3, [pc, #100]	; (800d654 <FATFS_LinkDriverEx+0x94>)
 800d5f0:	7a5b      	ldrb	r3, [r3, #9]
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	4a17      	ldr	r2, [pc, #92]	; (800d654 <FATFS_LinkDriverEx+0x94>)
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d5fe:	4b15      	ldr	r3, [pc, #84]	; (800d654 <FATFS_LinkDriverEx+0x94>)
 800d600:	7a5b      	ldrb	r3, [r3, #9]
 800d602:	b2db      	uxtb	r3, r3
 800d604:	461a      	mov	r2, r3
 800d606:	4b13      	ldr	r3, [pc, #76]	; (800d654 <FATFS_LinkDriverEx+0x94>)
 800d608:	4413      	add	r3, r2
 800d60a:	79fa      	ldrb	r2, [r7, #7]
 800d60c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d60e:	4b11      	ldr	r3, [pc, #68]	; (800d654 <FATFS_LinkDriverEx+0x94>)
 800d610:	7a5b      	ldrb	r3, [r3, #9]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	b2d1      	uxtb	r1, r2
 800d618:	4a0e      	ldr	r2, [pc, #56]	; (800d654 <FATFS_LinkDriverEx+0x94>)
 800d61a:	7251      	strb	r1, [r2, #9]
 800d61c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d61e:	7dbb      	ldrb	r3, [r7, #22]
 800d620:	3330      	adds	r3, #48	; 0x30
 800d622:	b2da      	uxtb	r2, r3
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	3301      	adds	r3, #1
 800d62c:	223a      	movs	r2, #58	; 0x3a
 800d62e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	3302      	adds	r3, #2
 800d634:	222f      	movs	r2, #47	; 0x2f
 800d636:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	3303      	adds	r3, #3
 800d63c:	2200      	movs	r2, #0
 800d63e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d644:	7dfb      	ldrb	r3, [r7, #23]
}
 800d646:	4618      	mov	r0, r3
 800d648:	371c      	adds	r7, #28
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	240002cc 	.word	0x240002cc

0800d658 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d662:	2200      	movs	r2, #0
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7ff ffaa 	bl	800d5c0 <FATFS_LinkDriverEx>
 800d66c:	4603      	mov	r3, r0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
	...

0800d678 <__errno>:
 800d678:	4b01      	ldr	r3, [pc, #4]	; (800d680 <__errno+0x8>)
 800d67a:	6818      	ldr	r0, [r3, #0]
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	2400002c 	.word	0x2400002c

0800d684 <__libc_init_array>:
 800d684:	b570      	push	{r4, r5, r6, lr}
 800d686:	4d0d      	ldr	r5, [pc, #52]	; (800d6bc <__libc_init_array+0x38>)
 800d688:	4c0d      	ldr	r4, [pc, #52]	; (800d6c0 <__libc_init_array+0x3c>)
 800d68a:	1b64      	subs	r4, r4, r5
 800d68c:	10a4      	asrs	r4, r4, #2
 800d68e:	2600      	movs	r6, #0
 800d690:	42a6      	cmp	r6, r4
 800d692:	d109      	bne.n	800d6a8 <__libc_init_array+0x24>
 800d694:	4d0b      	ldr	r5, [pc, #44]	; (800d6c4 <__libc_init_array+0x40>)
 800d696:	4c0c      	ldr	r4, [pc, #48]	; (800d6c8 <__libc_init_array+0x44>)
 800d698:	f000 fc8e 	bl	800dfb8 <_init>
 800d69c:	1b64      	subs	r4, r4, r5
 800d69e:	10a4      	asrs	r4, r4, #2
 800d6a0:	2600      	movs	r6, #0
 800d6a2:	42a6      	cmp	r6, r4
 800d6a4:	d105      	bne.n	800d6b2 <__libc_init_array+0x2e>
 800d6a6:	bd70      	pop	{r4, r5, r6, pc}
 800d6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6ac:	4798      	blx	r3
 800d6ae:	3601      	adds	r6, #1
 800d6b0:	e7ee      	b.n	800d690 <__libc_init_array+0xc>
 800d6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6b6:	4798      	blx	r3
 800d6b8:	3601      	adds	r6, #1
 800d6ba:	e7f2      	b.n	800d6a2 <__libc_init_array+0x1e>
 800d6bc:	0800e150 	.word	0x0800e150
 800d6c0:	0800e150 	.word	0x0800e150
 800d6c4:	0800e150 	.word	0x0800e150
 800d6c8:	0800e154 	.word	0x0800e154

0800d6cc <memset>:
 800d6cc:	4402      	add	r2, r0
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d100      	bne.n	800d6d6 <memset+0xa>
 800d6d4:	4770      	bx	lr
 800d6d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6da:	e7f9      	b.n	800d6d0 <memset+0x4>

0800d6dc <siprintf>:
 800d6dc:	b40e      	push	{r1, r2, r3}
 800d6de:	b500      	push	{lr}
 800d6e0:	b09c      	sub	sp, #112	; 0x70
 800d6e2:	ab1d      	add	r3, sp, #116	; 0x74
 800d6e4:	9002      	str	r0, [sp, #8]
 800d6e6:	9006      	str	r0, [sp, #24]
 800d6e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d6ec:	4809      	ldr	r0, [pc, #36]	; (800d714 <siprintf+0x38>)
 800d6ee:	9107      	str	r1, [sp, #28]
 800d6f0:	9104      	str	r1, [sp, #16]
 800d6f2:	4909      	ldr	r1, [pc, #36]	; (800d718 <siprintf+0x3c>)
 800d6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f8:	9105      	str	r1, [sp, #20]
 800d6fa:	6800      	ldr	r0, [r0, #0]
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	a902      	add	r1, sp, #8
 800d700:	f000 f868 	bl	800d7d4 <_svfiprintf_r>
 800d704:	9b02      	ldr	r3, [sp, #8]
 800d706:	2200      	movs	r2, #0
 800d708:	701a      	strb	r2, [r3, #0]
 800d70a:	b01c      	add	sp, #112	; 0x70
 800d70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d710:	b003      	add	sp, #12
 800d712:	4770      	bx	lr
 800d714:	2400002c 	.word	0x2400002c
 800d718:	ffff0208 	.word	0xffff0208

0800d71c <__ssputs_r>:
 800d71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d720:	688e      	ldr	r6, [r1, #8]
 800d722:	429e      	cmp	r6, r3
 800d724:	4682      	mov	sl, r0
 800d726:	460c      	mov	r4, r1
 800d728:	4690      	mov	r8, r2
 800d72a:	461f      	mov	r7, r3
 800d72c:	d838      	bhi.n	800d7a0 <__ssputs_r+0x84>
 800d72e:	898a      	ldrh	r2, [r1, #12]
 800d730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d734:	d032      	beq.n	800d79c <__ssputs_r+0x80>
 800d736:	6825      	ldr	r5, [r4, #0]
 800d738:	6909      	ldr	r1, [r1, #16]
 800d73a:	eba5 0901 	sub.w	r9, r5, r1
 800d73e:	6965      	ldr	r5, [r4, #20]
 800d740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d748:	3301      	adds	r3, #1
 800d74a:	444b      	add	r3, r9
 800d74c:	106d      	asrs	r5, r5, #1
 800d74e:	429d      	cmp	r5, r3
 800d750:	bf38      	it	cc
 800d752:	461d      	movcc	r5, r3
 800d754:	0553      	lsls	r3, r2, #21
 800d756:	d531      	bpl.n	800d7bc <__ssputs_r+0xa0>
 800d758:	4629      	mov	r1, r5
 800d75a:	f000 fb63 	bl	800de24 <_malloc_r>
 800d75e:	4606      	mov	r6, r0
 800d760:	b950      	cbnz	r0, 800d778 <__ssputs_r+0x5c>
 800d762:	230c      	movs	r3, #12
 800d764:	f8ca 3000 	str.w	r3, [sl]
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d76e:	81a3      	strh	r3, [r4, #12]
 800d770:	f04f 30ff 	mov.w	r0, #4294967295
 800d774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d778:	6921      	ldr	r1, [r4, #16]
 800d77a:	464a      	mov	r2, r9
 800d77c:	f000 fabe 	bl	800dcfc <memcpy>
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	6126      	str	r6, [r4, #16]
 800d78e:	6165      	str	r5, [r4, #20]
 800d790:	444e      	add	r6, r9
 800d792:	eba5 0509 	sub.w	r5, r5, r9
 800d796:	6026      	str	r6, [r4, #0]
 800d798:	60a5      	str	r5, [r4, #8]
 800d79a:	463e      	mov	r6, r7
 800d79c:	42be      	cmp	r6, r7
 800d79e:	d900      	bls.n	800d7a2 <__ssputs_r+0x86>
 800d7a0:	463e      	mov	r6, r7
 800d7a2:	6820      	ldr	r0, [r4, #0]
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	4641      	mov	r1, r8
 800d7a8:	f000 fab6 	bl	800dd18 <memmove>
 800d7ac:	68a3      	ldr	r3, [r4, #8]
 800d7ae:	1b9b      	subs	r3, r3, r6
 800d7b0:	60a3      	str	r3, [r4, #8]
 800d7b2:	6823      	ldr	r3, [r4, #0]
 800d7b4:	4433      	add	r3, r6
 800d7b6:	6023      	str	r3, [r4, #0]
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	e7db      	b.n	800d774 <__ssputs_r+0x58>
 800d7bc:	462a      	mov	r2, r5
 800d7be:	f000 fba5 	bl	800df0c <_realloc_r>
 800d7c2:	4606      	mov	r6, r0
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d1e1      	bne.n	800d78c <__ssputs_r+0x70>
 800d7c8:	6921      	ldr	r1, [r4, #16]
 800d7ca:	4650      	mov	r0, sl
 800d7cc:	f000 fabe 	bl	800dd4c <_free_r>
 800d7d0:	e7c7      	b.n	800d762 <__ssputs_r+0x46>
	...

0800d7d4 <_svfiprintf_r>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	4698      	mov	r8, r3
 800d7da:	898b      	ldrh	r3, [r1, #12]
 800d7dc:	061b      	lsls	r3, r3, #24
 800d7de:	b09d      	sub	sp, #116	; 0x74
 800d7e0:	4607      	mov	r7, r0
 800d7e2:	460d      	mov	r5, r1
 800d7e4:	4614      	mov	r4, r2
 800d7e6:	d50e      	bpl.n	800d806 <_svfiprintf_r+0x32>
 800d7e8:	690b      	ldr	r3, [r1, #16]
 800d7ea:	b963      	cbnz	r3, 800d806 <_svfiprintf_r+0x32>
 800d7ec:	2140      	movs	r1, #64	; 0x40
 800d7ee:	f000 fb19 	bl	800de24 <_malloc_r>
 800d7f2:	6028      	str	r0, [r5, #0]
 800d7f4:	6128      	str	r0, [r5, #16]
 800d7f6:	b920      	cbnz	r0, 800d802 <_svfiprintf_r+0x2e>
 800d7f8:	230c      	movs	r3, #12
 800d7fa:	603b      	str	r3, [r7, #0]
 800d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d800:	e0d1      	b.n	800d9a6 <_svfiprintf_r+0x1d2>
 800d802:	2340      	movs	r3, #64	; 0x40
 800d804:	616b      	str	r3, [r5, #20]
 800d806:	2300      	movs	r3, #0
 800d808:	9309      	str	r3, [sp, #36]	; 0x24
 800d80a:	2320      	movs	r3, #32
 800d80c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d810:	f8cd 800c 	str.w	r8, [sp, #12]
 800d814:	2330      	movs	r3, #48	; 0x30
 800d816:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d9c0 <_svfiprintf_r+0x1ec>
 800d81a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d81e:	f04f 0901 	mov.w	r9, #1
 800d822:	4623      	mov	r3, r4
 800d824:	469a      	mov	sl, r3
 800d826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d82a:	b10a      	cbz	r2, 800d830 <_svfiprintf_r+0x5c>
 800d82c:	2a25      	cmp	r2, #37	; 0x25
 800d82e:	d1f9      	bne.n	800d824 <_svfiprintf_r+0x50>
 800d830:	ebba 0b04 	subs.w	fp, sl, r4
 800d834:	d00b      	beq.n	800d84e <_svfiprintf_r+0x7a>
 800d836:	465b      	mov	r3, fp
 800d838:	4622      	mov	r2, r4
 800d83a:	4629      	mov	r1, r5
 800d83c:	4638      	mov	r0, r7
 800d83e:	f7ff ff6d 	bl	800d71c <__ssputs_r>
 800d842:	3001      	adds	r0, #1
 800d844:	f000 80aa 	beq.w	800d99c <_svfiprintf_r+0x1c8>
 800d848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d84a:	445a      	add	r2, fp
 800d84c:	9209      	str	r2, [sp, #36]	; 0x24
 800d84e:	f89a 3000 	ldrb.w	r3, [sl]
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 80a2 	beq.w	800d99c <_svfiprintf_r+0x1c8>
 800d858:	2300      	movs	r3, #0
 800d85a:	f04f 32ff 	mov.w	r2, #4294967295
 800d85e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d862:	f10a 0a01 	add.w	sl, sl, #1
 800d866:	9304      	str	r3, [sp, #16]
 800d868:	9307      	str	r3, [sp, #28]
 800d86a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d86e:	931a      	str	r3, [sp, #104]	; 0x68
 800d870:	4654      	mov	r4, sl
 800d872:	2205      	movs	r2, #5
 800d874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d878:	4851      	ldr	r0, [pc, #324]	; (800d9c0 <_svfiprintf_r+0x1ec>)
 800d87a:	f7f2 fd39 	bl	80002f0 <memchr>
 800d87e:	9a04      	ldr	r2, [sp, #16]
 800d880:	b9d8      	cbnz	r0, 800d8ba <_svfiprintf_r+0xe6>
 800d882:	06d0      	lsls	r0, r2, #27
 800d884:	bf44      	itt	mi
 800d886:	2320      	movmi	r3, #32
 800d888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d88c:	0711      	lsls	r1, r2, #28
 800d88e:	bf44      	itt	mi
 800d890:	232b      	movmi	r3, #43	; 0x2b
 800d892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d896:	f89a 3000 	ldrb.w	r3, [sl]
 800d89a:	2b2a      	cmp	r3, #42	; 0x2a
 800d89c:	d015      	beq.n	800d8ca <_svfiprintf_r+0xf6>
 800d89e:	9a07      	ldr	r2, [sp, #28]
 800d8a0:	4654      	mov	r4, sl
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	f04f 0c0a 	mov.w	ip, #10
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8ae:	3b30      	subs	r3, #48	; 0x30
 800d8b0:	2b09      	cmp	r3, #9
 800d8b2:	d94e      	bls.n	800d952 <_svfiprintf_r+0x17e>
 800d8b4:	b1b0      	cbz	r0, 800d8e4 <_svfiprintf_r+0x110>
 800d8b6:	9207      	str	r2, [sp, #28]
 800d8b8:	e014      	b.n	800d8e4 <_svfiprintf_r+0x110>
 800d8ba:	eba0 0308 	sub.w	r3, r0, r8
 800d8be:	fa09 f303 	lsl.w	r3, r9, r3
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	9304      	str	r3, [sp, #16]
 800d8c6:	46a2      	mov	sl, r4
 800d8c8:	e7d2      	b.n	800d870 <_svfiprintf_r+0x9c>
 800d8ca:	9b03      	ldr	r3, [sp, #12]
 800d8cc:	1d19      	adds	r1, r3, #4
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	9103      	str	r1, [sp, #12]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	bfbb      	ittet	lt
 800d8d6:	425b      	neglt	r3, r3
 800d8d8:	f042 0202 	orrlt.w	r2, r2, #2
 800d8dc:	9307      	strge	r3, [sp, #28]
 800d8de:	9307      	strlt	r3, [sp, #28]
 800d8e0:	bfb8      	it	lt
 800d8e2:	9204      	strlt	r2, [sp, #16]
 800d8e4:	7823      	ldrb	r3, [r4, #0]
 800d8e6:	2b2e      	cmp	r3, #46	; 0x2e
 800d8e8:	d10c      	bne.n	800d904 <_svfiprintf_r+0x130>
 800d8ea:	7863      	ldrb	r3, [r4, #1]
 800d8ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ee:	d135      	bne.n	800d95c <_svfiprintf_r+0x188>
 800d8f0:	9b03      	ldr	r3, [sp, #12]
 800d8f2:	1d1a      	adds	r2, r3, #4
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	9203      	str	r2, [sp, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	bfb8      	it	lt
 800d8fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d900:	3402      	adds	r4, #2
 800d902:	9305      	str	r3, [sp, #20]
 800d904:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9d0 <_svfiprintf_r+0x1fc>
 800d908:	7821      	ldrb	r1, [r4, #0]
 800d90a:	2203      	movs	r2, #3
 800d90c:	4650      	mov	r0, sl
 800d90e:	f7f2 fcef 	bl	80002f0 <memchr>
 800d912:	b140      	cbz	r0, 800d926 <_svfiprintf_r+0x152>
 800d914:	2340      	movs	r3, #64	; 0x40
 800d916:	eba0 000a 	sub.w	r0, r0, sl
 800d91a:	fa03 f000 	lsl.w	r0, r3, r0
 800d91e:	9b04      	ldr	r3, [sp, #16]
 800d920:	4303      	orrs	r3, r0
 800d922:	3401      	adds	r4, #1
 800d924:	9304      	str	r3, [sp, #16]
 800d926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92a:	4826      	ldr	r0, [pc, #152]	; (800d9c4 <_svfiprintf_r+0x1f0>)
 800d92c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d930:	2206      	movs	r2, #6
 800d932:	f7f2 fcdd 	bl	80002f0 <memchr>
 800d936:	2800      	cmp	r0, #0
 800d938:	d038      	beq.n	800d9ac <_svfiprintf_r+0x1d8>
 800d93a:	4b23      	ldr	r3, [pc, #140]	; (800d9c8 <_svfiprintf_r+0x1f4>)
 800d93c:	bb1b      	cbnz	r3, 800d986 <_svfiprintf_r+0x1b2>
 800d93e:	9b03      	ldr	r3, [sp, #12]
 800d940:	3307      	adds	r3, #7
 800d942:	f023 0307 	bic.w	r3, r3, #7
 800d946:	3308      	adds	r3, #8
 800d948:	9303      	str	r3, [sp, #12]
 800d94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d94c:	4433      	add	r3, r6
 800d94e:	9309      	str	r3, [sp, #36]	; 0x24
 800d950:	e767      	b.n	800d822 <_svfiprintf_r+0x4e>
 800d952:	fb0c 3202 	mla	r2, ip, r2, r3
 800d956:	460c      	mov	r4, r1
 800d958:	2001      	movs	r0, #1
 800d95a:	e7a5      	b.n	800d8a8 <_svfiprintf_r+0xd4>
 800d95c:	2300      	movs	r3, #0
 800d95e:	3401      	adds	r4, #1
 800d960:	9305      	str	r3, [sp, #20]
 800d962:	4619      	mov	r1, r3
 800d964:	f04f 0c0a 	mov.w	ip, #10
 800d968:	4620      	mov	r0, r4
 800d96a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d96e:	3a30      	subs	r2, #48	; 0x30
 800d970:	2a09      	cmp	r2, #9
 800d972:	d903      	bls.n	800d97c <_svfiprintf_r+0x1a8>
 800d974:	2b00      	cmp	r3, #0
 800d976:	d0c5      	beq.n	800d904 <_svfiprintf_r+0x130>
 800d978:	9105      	str	r1, [sp, #20]
 800d97a:	e7c3      	b.n	800d904 <_svfiprintf_r+0x130>
 800d97c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d980:	4604      	mov	r4, r0
 800d982:	2301      	movs	r3, #1
 800d984:	e7f0      	b.n	800d968 <_svfiprintf_r+0x194>
 800d986:	ab03      	add	r3, sp, #12
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	462a      	mov	r2, r5
 800d98c:	4b0f      	ldr	r3, [pc, #60]	; (800d9cc <_svfiprintf_r+0x1f8>)
 800d98e:	a904      	add	r1, sp, #16
 800d990:	4638      	mov	r0, r7
 800d992:	f3af 8000 	nop.w
 800d996:	1c42      	adds	r2, r0, #1
 800d998:	4606      	mov	r6, r0
 800d99a:	d1d6      	bne.n	800d94a <_svfiprintf_r+0x176>
 800d99c:	89ab      	ldrh	r3, [r5, #12]
 800d99e:	065b      	lsls	r3, r3, #25
 800d9a0:	f53f af2c 	bmi.w	800d7fc <_svfiprintf_r+0x28>
 800d9a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9a6:	b01d      	add	sp, #116	; 0x74
 800d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ac:	ab03      	add	r3, sp, #12
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4b06      	ldr	r3, [pc, #24]	; (800d9cc <_svfiprintf_r+0x1f8>)
 800d9b4:	a904      	add	r1, sp, #16
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	f000 f87a 	bl	800dab0 <_printf_i>
 800d9bc:	e7eb      	b.n	800d996 <_svfiprintf_r+0x1c2>
 800d9be:	bf00      	nop
 800d9c0:	0800e114 	.word	0x0800e114
 800d9c4:	0800e11e 	.word	0x0800e11e
 800d9c8:	00000000 	.word	0x00000000
 800d9cc:	0800d71d 	.word	0x0800d71d
 800d9d0:	0800e11a 	.word	0x0800e11a

0800d9d4 <_printf_common>:
 800d9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d8:	4616      	mov	r6, r2
 800d9da:	4699      	mov	r9, r3
 800d9dc:	688a      	ldr	r2, [r1, #8]
 800d9de:	690b      	ldr	r3, [r1, #16]
 800d9e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	bfb8      	it	lt
 800d9e8:	4613      	movlt	r3, r2
 800d9ea:	6033      	str	r3, [r6, #0]
 800d9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9f0:	4607      	mov	r7, r0
 800d9f2:	460c      	mov	r4, r1
 800d9f4:	b10a      	cbz	r2, 800d9fa <_printf_common+0x26>
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	6033      	str	r3, [r6, #0]
 800d9fa:	6823      	ldr	r3, [r4, #0]
 800d9fc:	0699      	lsls	r1, r3, #26
 800d9fe:	bf42      	ittt	mi
 800da00:	6833      	ldrmi	r3, [r6, #0]
 800da02:	3302      	addmi	r3, #2
 800da04:	6033      	strmi	r3, [r6, #0]
 800da06:	6825      	ldr	r5, [r4, #0]
 800da08:	f015 0506 	ands.w	r5, r5, #6
 800da0c:	d106      	bne.n	800da1c <_printf_common+0x48>
 800da0e:	f104 0a19 	add.w	sl, r4, #25
 800da12:	68e3      	ldr	r3, [r4, #12]
 800da14:	6832      	ldr	r2, [r6, #0]
 800da16:	1a9b      	subs	r3, r3, r2
 800da18:	42ab      	cmp	r3, r5
 800da1a:	dc26      	bgt.n	800da6a <_printf_common+0x96>
 800da1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da20:	1e13      	subs	r3, r2, #0
 800da22:	6822      	ldr	r2, [r4, #0]
 800da24:	bf18      	it	ne
 800da26:	2301      	movne	r3, #1
 800da28:	0692      	lsls	r2, r2, #26
 800da2a:	d42b      	bmi.n	800da84 <_printf_common+0xb0>
 800da2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da30:	4649      	mov	r1, r9
 800da32:	4638      	mov	r0, r7
 800da34:	47c0      	blx	r8
 800da36:	3001      	adds	r0, #1
 800da38:	d01e      	beq.n	800da78 <_printf_common+0xa4>
 800da3a:	6823      	ldr	r3, [r4, #0]
 800da3c:	68e5      	ldr	r5, [r4, #12]
 800da3e:	6832      	ldr	r2, [r6, #0]
 800da40:	f003 0306 	and.w	r3, r3, #6
 800da44:	2b04      	cmp	r3, #4
 800da46:	bf08      	it	eq
 800da48:	1aad      	subeq	r5, r5, r2
 800da4a:	68a3      	ldr	r3, [r4, #8]
 800da4c:	6922      	ldr	r2, [r4, #16]
 800da4e:	bf0c      	ite	eq
 800da50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da54:	2500      	movne	r5, #0
 800da56:	4293      	cmp	r3, r2
 800da58:	bfc4      	itt	gt
 800da5a:	1a9b      	subgt	r3, r3, r2
 800da5c:	18ed      	addgt	r5, r5, r3
 800da5e:	2600      	movs	r6, #0
 800da60:	341a      	adds	r4, #26
 800da62:	42b5      	cmp	r5, r6
 800da64:	d11a      	bne.n	800da9c <_printf_common+0xc8>
 800da66:	2000      	movs	r0, #0
 800da68:	e008      	b.n	800da7c <_printf_common+0xa8>
 800da6a:	2301      	movs	r3, #1
 800da6c:	4652      	mov	r2, sl
 800da6e:	4649      	mov	r1, r9
 800da70:	4638      	mov	r0, r7
 800da72:	47c0      	blx	r8
 800da74:	3001      	adds	r0, #1
 800da76:	d103      	bne.n	800da80 <_printf_common+0xac>
 800da78:	f04f 30ff 	mov.w	r0, #4294967295
 800da7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da80:	3501      	adds	r5, #1
 800da82:	e7c6      	b.n	800da12 <_printf_common+0x3e>
 800da84:	18e1      	adds	r1, r4, r3
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	2030      	movs	r0, #48	; 0x30
 800da8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da8e:	4422      	add	r2, r4
 800da90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da98:	3302      	adds	r3, #2
 800da9a:	e7c7      	b.n	800da2c <_printf_common+0x58>
 800da9c:	2301      	movs	r3, #1
 800da9e:	4622      	mov	r2, r4
 800daa0:	4649      	mov	r1, r9
 800daa2:	4638      	mov	r0, r7
 800daa4:	47c0      	blx	r8
 800daa6:	3001      	adds	r0, #1
 800daa8:	d0e6      	beq.n	800da78 <_printf_common+0xa4>
 800daaa:	3601      	adds	r6, #1
 800daac:	e7d9      	b.n	800da62 <_printf_common+0x8e>
	...

0800dab0 <_printf_i>:
 800dab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dab4:	7e0f      	ldrb	r7, [r1, #24]
 800dab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dab8:	2f78      	cmp	r7, #120	; 0x78
 800daba:	4691      	mov	r9, r2
 800dabc:	4680      	mov	r8, r0
 800dabe:	460c      	mov	r4, r1
 800dac0:	469a      	mov	sl, r3
 800dac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dac6:	d807      	bhi.n	800dad8 <_printf_i+0x28>
 800dac8:	2f62      	cmp	r7, #98	; 0x62
 800daca:	d80a      	bhi.n	800dae2 <_printf_i+0x32>
 800dacc:	2f00      	cmp	r7, #0
 800dace:	f000 80d8 	beq.w	800dc82 <_printf_i+0x1d2>
 800dad2:	2f58      	cmp	r7, #88	; 0x58
 800dad4:	f000 80a3 	beq.w	800dc1e <_printf_i+0x16e>
 800dad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dadc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dae0:	e03a      	b.n	800db58 <_printf_i+0xa8>
 800dae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dae6:	2b15      	cmp	r3, #21
 800dae8:	d8f6      	bhi.n	800dad8 <_printf_i+0x28>
 800daea:	a101      	add	r1, pc, #4	; (adr r1, 800daf0 <_printf_i+0x40>)
 800daec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800daf0:	0800db49 	.word	0x0800db49
 800daf4:	0800db5d 	.word	0x0800db5d
 800daf8:	0800dad9 	.word	0x0800dad9
 800dafc:	0800dad9 	.word	0x0800dad9
 800db00:	0800dad9 	.word	0x0800dad9
 800db04:	0800dad9 	.word	0x0800dad9
 800db08:	0800db5d 	.word	0x0800db5d
 800db0c:	0800dad9 	.word	0x0800dad9
 800db10:	0800dad9 	.word	0x0800dad9
 800db14:	0800dad9 	.word	0x0800dad9
 800db18:	0800dad9 	.word	0x0800dad9
 800db1c:	0800dc69 	.word	0x0800dc69
 800db20:	0800db8d 	.word	0x0800db8d
 800db24:	0800dc4b 	.word	0x0800dc4b
 800db28:	0800dad9 	.word	0x0800dad9
 800db2c:	0800dad9 	.word	0x0800dad9
 800db30:	0800dc8b 	.word	0x0800dc8b
 800db34:	0800dad9 	.word	0x0800dad9
 800db38:	0800db8d 	.word	0x0800db8d
 800db3c:	0800dad9 	.word	0x0800dad9
 800db40:	0800dad9 	.word	0x0800dad9
 800db44:	0800dc53 	.word	0x0800dc53
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	1d1a      	adds	r2, r3, #4
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	602a      	str	r2, [r5, #0]
 800db50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db58:	2301      	movs	r3, #1
 800db5a:	e0a3      	b.n	800dca4 <_printf_i+0x1f4>
 800db5c:	6820      	ldr	r0, [r4, #0]
 800db5e:	6829      	ldr	r1, [r5, #0]
 800db60:	0606      	lsls	r6, r0, #24
 800db62:	f101 0304 	add.w	r3, r1, #4
 800db66:	d50a      	bpl.n	800db7e <_printf_i+0xce>
 800db68:	680e      	ldr	r6, [r1, #0]
 800db6a:	602b      	str	r3, [r5, #0]
 800db6c:	2e00      	cmp	r6, #0
 800db6e:	da03      	bge.n	800db78 <_printf_i+0xc8>
 800db70:	232d      	movs	r3, #45	; 0x2d
 800db72:	4276      	negs	r6, r6
 800db74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db78:	485e      	ldr	r0, [pc, #376]	; (800dcf4 <_printf_i+0x244>)
 800db7a:	230a      	movs	r3, #10
 800db7c:	e019      	b.n	800dbb2 <_printf_i+0x102>
 800db7e:	680e      	ldr	r6, [r1, #0]
 800db80:	602b      	str	r3, [r5, #0]
 800db82:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db86:	bf18      	it	ne
 800db88:	b236      	sxthne	r6, r6
 800db8a:	e7ef      	b.n	800db6c <_printf_i+0xbc>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	6820      	ldr	r0, [r4, #0]
 800db90:	1d19      	adds	r1, r3, #4
 800db92:	6029      	str	r1, [r5, #0]
 800db94:	0601      	lsls	r1, r0, #24
 800db96:	d501      	bpl.n	800db9c <_printf_i+0xec>
 800db98:	681e      	ldr	r6, [r3, #0]
 800db9a:	e002      	b.n	800dba2 <_printf_i+0xf2>
 800db9c:	0646      	lsls	r6, r0, #25
 800db9e:	d5fb      	bpl.n	800db98 <_printf_i+0xe8>
 800dba0:	881e      	ldrh	r6, [r3, #0]
 800dba2:	4854      	ldr	r0, [pc, #336]	; (800dcf4 <_printf_i+0x244>)
 800dba4:	2f6f      	cmp	r7, #111	; 0x6f
 800dba6:	bf0c      	ite	eq
 800dba8:	2308      	moveq	r3, #8
 800dbaa:	230a      	movne	r3, #10
 800dbac:	2100      	movs	r1, #0
 800dbae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbb2:	6865      	ldr	r5, [r4, #4]
 800dbb4:	60a5      	str	r5, [r4, #8]
 800dbb6:	2d00      	cmp	r5, #0
 800dbb8:	bfa2      	ittt	ge
 800dbba:	6821      	ldrge	r1, [r4, #0]
 800dbbc:	f021 0104 	bicge.w	r1, r1, #4
 800dbc0:	6021      	strge	r1, [r4, #0]
 800dbc2:	b90e      	cbnz	r6, 800dbc8 <_printf_i+0x118>
 800dbc4:	2d00      	cmp	r5, #0
 800dbc6:	d04d      	beq.n	800dc64 <_printf_i+0x1b4>
 800dbc8:	4615      	mov	r5, r2
 800dbca:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbce:	fb03 6711 	mls	r7, r3, r1, r6
 800dbd2:	5dc7      	ldrb	r7, [r0, r7]
 800dbd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbd8:	4637      	mov	r7, r6
 800dbda:	42bb      	cmp	r3, r7
 800dbdc:	460e      	mov	r6, r1
 800dbde:	d9f4      	bls.n	800dbca <_printf_i+0x11a>
 800dbe0:	2b08      	cmp	r3, #8
 800dbe2:	d10b      	bne.n	800dbfc <_printf_i+0x14c>
 800dbe4:	6823      	ldr	r3, [r4, #0]
 800dbe6:	07de      	lsls	r6, r3, #31
 800dbe8:	d508      	bpl.n	800dbfc <_printf_i+0x14c>
 800dbea:	6923      	ldr	r3, [r4, #16]
 800dbec:	6861      	ldr	r1, [r4, #4]
 800dbee:	4299      	cmp	r1, r3
 800dbf0:	bfde      	ittt	le
 800dbf2:	2330      	movle	r3, #48	; 0x30
 800dbf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dbfc:	1b52      	subs	r2, r2, r5
 800dbfe:	6122      	str	r2, [r4, #16]
 800dc00:	f8cd a000 	str.w	sl, [sp]
 800dc04:	464b      	mov	r3, r9
 800dc06:	aa03      	add	r2, sp, #12
 800dc08:	4621      	mov	r1, r4
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	f7ff fee2 	bl	800d9d4 <_printf_common>
 800dc10:	3001      	adds	r0, #1
 800dc12:	d14c      	bne.n	800dcae <_printf_i+0x1fe>
 800dc14:	f04f 30ff 	mov.w	r0, #4294967295
 800dc18:	b004      	add	sp, #16
 800dc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc1e:	4835      	ldr	r0, [pc, #212]	; (800dcf4 <_printf_i+0x244>)
 800dc20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc24:	6829      	ldr	r1, [r5, #0]
 800dc26:	6823      	ldr	r3, [r4, #0]
 800dc28:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc2c:	6029      	str	r1, [r5, #0]
 800dc2e:	061d      	lsls	r5, r3, #24
 800dc30:	d514      	bpl.n	800dc5c <_printf_i+0x1ac>
 800dc32:	07df      	lsls	r7, r3, #31
 800dc34:	bf44      	itt	mi
 800dc36:	f043 0320 	orrmi.w	r3, r3, #32
 800dc3a:	6023      	strmi	r3, [r4, #0]
 800dc3c:	b91e      	cbnz	r6, 800dc46 <_printf_i+0x196>
 800dc3e:	6823      	ldr	r3, [r4, #0]
 800dc40:	f023 0320 	bic.w	r3, r3, #32
 800dc44:	6023      	str	r3, [r4, #0]
 800dc46:	2310      	movs	r3, #16
 800dc48:	e7b0      	b.n	800dbac <_printf_i+0xfc>
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	f043 0320 	orr.w	r3, r3, #32
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	2378      	movs	r3, #120	; 0x78
 800dc54:	4828      	ldr	r0, [pc, #160]	; (800dcf8 <_printf_i+0x248>)
 800dc56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc5a:	e7e3      	b.n	800dc24 <_printf_i+0x174>
 800dc5c:	0659      	lsls	r1, r3, #25
 800dc5e:	bf48      	it	mi
 800dc60:	b2b6      	uxthmi	r6, r6
 800dc62:	e7e6      	b.n	800dc32 <_printf_i+0x182>
 800dc64:	4615      	mov	r5, r2
 800dc66:	e7bb      	b.n	800dbe0 <_printf_i+0x130>
 800dc68:	682b      	ldr	r3, [r5, #0]
 800dc6a:	6826      	ldr	r6, [r4, #0]
 800dc6c:	6961      	ldr	r1, [r4, #20]
 800dc6e:	1d18      	adds	r0, r3, #4
 800dc70:	6028      	str	r0, [r5, #0]
 800dc72:	0635      	lsls	r5, r6, #24
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	d501      	bpl.n	800dc7c <_printf_i+0x1cc>
 800dc78:	6019      	str	r1, [r3, #0]
 800dc7a:	e002      	b.n	800dc82 <_printf_i+0x1d2>
 800dc7c:	0670      	lsls	r0, r6, #25
 800dc7e:	d5fb      	bpl.n	800dc78 <_printf_i+0x1c8>
 800dc80:	8019      	strh	r1, [r3, #0]
 800dc82:	2300      	movs	r3, #0
 800dc84:	6123      	str	r3, [r4, #16]
 800dc86:	4615      	mov	r5, r2
 800dc88:	e7ba      	b.n	800dc00 <_printf_i+0x150>
 800dc8a:	682b      	ldr	r3, [r5, #0]
 800dc8c:	1d1a      	adds	r2, r3, #4
 800dc8e:	602a      	str	r2, [r5, #0]
 800dc90:	681d      	ldr	r5, [r3, #0]
 800dc92:	6862      	ldr	r2, [r4, #4]
 800dc94:	2100      	movs	r1, #0
 800dc96:	4628      	mov	r0, r5
 800dc98:	f7f2 fb2a 	bl	80002f0 <memchr>
 800dc9c:	b108      	cbz	r0, 800dca2 <_printf_i+0x1f2>
 800dc9e:	1b40      	subs	r0, r0, r5
 800dca0:	6060      	str	r0, [r4, #4]
 800dca2:	6863      	ldr	r3, [r4, #4]
 800dca4:	6123      	str	r3, [r4, #16]
 800dca6:	2300      	movs	r3, #0
 800dca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcac:	e7a8      	b.n	800dc00 <_printf_i+0x150>
 800dcae:	6923      	ldr	r3, [r4, #16]
 800dcb0:	462a      	mov	r2, r5
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	4640      	mov	r0, r8
 800dcb6:	47d0      	blx	sl
 800dcb8:	3001      	adds	r0, #1
 800dcba:	d0ab      	beq.n	800dc14 <_printf_i+0x164>
 800dcbc:	6823      	ldr	r3, [r4, #0]
 800dcbe:	079b      	lsls	r3, r3, #30
 800dcc0:	d413      	bmi.n	800dcea <_printf_i+0x23a>
 800dcc2:	68e0      	ldr	r0, [r4, #12]
 800dcc4:	9b03      	ldr	r3, [sp, #12]
 800dcc6:	4298      	cmp	r0, r3
 800dcc8:	bfb8      	it	lt
 800dcca:	4618      	movlt	r0, r3
 800dccc:	e7a4      	b.n	800dc18 <_printf_i+0x168>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	4632      	mov	r2, r6
 800dcd2:	4649      	mov	r1, r9
 800dcd4:	4640      	mov	r0, r8
 800dcd6:	47d0      	blx	sl
 800dcd8:	3001      	adds	r0, #1
 800dcda:	d09b      	beq.n	800dc14 <_printf_i+0x164>
 800dcdc:	3501      	adds	r5, #1
 800dcde:	68e3      	ldr	r3, [r4, #12]
 800dce0:	9903      	ldr	r1, [sp, #12]
 800dce2:	1a5b      	subs	r3, r3, r1
 800dce4:	42ab      	cmp	r3, r5
 800dce6:	dcf2      	bgt.n	800dcce <_printf_i+0x21e>
 800dce8:	e7eb      	b.n	800dcc2 <_printf_i+0x212>
 800dcea:	2500      	movs	r5, #0
 800dcec:	f104 0619 	add.w	r6, r4, #25
 800dcf0:	e7f5      	b.n	800dcde <_printf_i+0x22e>
 800dcf2:	bf00      	nop
 800dcf4:	0800e125 	.word	0x0800e125
 800dcf8:	0800e136 	.word	0x0800e136

0800dcfc <memcpy>:
 800dcfc:	440a      	add	r2, r1
 800dcfe:	4291      	cmp	r1, r2
 800dd00:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd04:	d100      	bne.n	800dd08 <memcpy+0xc>
 800dd06:	4770      	bx	lr
 800dd08:	b510      	push	{r4, lr}
 800dd0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd12:	4291      	cmp	r1, r2
 800dd14:	d1f9      	bne.n	800dd0a <memcpy+0xe>
 800dd16:	bd10      	pop	{r4, pc}

0800dd18 <memmove>:
 800dd18:	4288      	cmp	r0, r1
 800dd1a:	b510      	push	{r4, lr}
 800dd1c:	eb01 0402 	add.w	r4, r1, r2
 800dd20:	d902      	bls.n	800dd28 <memmove+0x10>
 800dd22:	4284      	cmp	r4, r0
 800dd24:	4623      	mov	r3, r4
 800dd26:	d807      	bhi.n	800dd38 <memmove+0x20>
 800dd28:	1e43      	subs	r3, r0, #1
 800dd2a:	42a1      	cmp	r1, r4
 800dd2c:	d008      	beq.n	800dd40 <memmove+0x28>
 800dd2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd36:	e7f8      	b.n	800dd2a <memmove+0x12>
 800dd38:	4402      	add	r2, r0
 800dd3a:	4601      	mov	r1, r0
 800dd3c:	428a      	cmp	r2, r1
 800dd3e:	d100      	bne.n	800dd42 <memmove+0x2a>
 800dd40:	bd10      	pop	{r4, pc}
 800dd42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd4a:	e7f7      	b.n	800dd3c <memmove+0x24>

0800dd4c <_free_r>:
 800dd4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd4e:	2900      	cmp	r1, #0
 800dd50:	d044      	beq.n	800dddc <_free_r+0x90>
 800dd52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd56:	9001      	str	r0, [sp, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f1a1 0404 	sub.w	r4, r1, #4
 800dd5e:	bfb8      	it	lt
 800dd60:	18e4      	addlt	r4, r4, r3
 800dd62:	f000 f913 	bl	800df8c <__malloc_lock>
 800dd66:	4a1e      	ldr	r2, [pc, #120]	; (800dde0 <_free_r+0x94>)
 800dd68:	9801      	ldr	r0, [sp, #4]
 800dd6a:	6813      	ldr	r3, [r2, #0]
 800dd6c:	b933      	cbnz	r3, 800dd7c <_free_r+0x30>
 800dd6e:	6063      	str	r3, [r4, #4]
 800dd70:	6014      	str	r4, [r2, #0]
 800dd72:	b003      	add	sp, #12
 800dd74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd78:	f000 b90e 	b.w	800df98 <__malloc_unlock>
 800dd7c:	42a3      	cmp	r3, r4
 800dd7e:	d908      	bls.n	800dd92 <_free_r+0x46>
 800dd80:	6825      	ldr	r5, [r4, #0]
 800dd82:	1961      	adds	r1, r4, r5
 800dd84:	428b      	cmp	r3, r1
 800dd86:	bf01      	itttt	eq
 800dd88:	6819      	ldreq	r1, [r3, #0]
 800dd8a:	685b      	ldreq	r3, [r3, #4]
 800dd8c:	1949      	addeq	r1, r1, r5
 800dd8e:	6021      	streq	r1, [r4, #0]
 800dd90:	e7ed      	b.n	800dd6e <_free_r+0x22>
 800dd92:	461a      	mov	r2, r3
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	b10b      	cbz	r3, 800dd9c <_free_r+0x50>
 800dd98:	42a3      	cmp	r3, r4
 800dd9a:	d9fa      	bls.n	800dd92 <_free_r+0x46>
 800dd9c:	6811      	ldr	r1, [r2, #0]
 800dd9e:	1855      	adds	r5, r2, r1
 800dda0:	42a5      	cmp	r5, r4
 800dda2:	d10b      	bne.n	800ddbc <_free_r+0x70>
 800dda4:	6824      	ldr	r4, [r4, #0]
 800dda6:	4421      	add	r1, r4
 800dda8:	1854      	adds	r4, r2, r1
 800ddaa:	42a3      	cmp	r3, r4
 800ddac:	6011      	str	r1, [r2, #0]
 800ddae:	d1e0      	bne.n	800dd72 <_free_r+0x26>
 800ddb0:	681c      	ldr	r4, [r3, #0]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	6053      	str	r3, [r2, #4]
 800ddb6:	4421      	add	r1, r4
 800ddb8:	6011      	str	r1, [r2, #0]
 800ddba:	e7da      	b.n	800dd72 <_free_r+0x26>
 800ddbc:	d902      	bls.n	800ddc4 <_free_r+0x78>
 800ddbe:	230c      	movs	r3, #12
 800ddc0:	6003      	str	r3, [r0, #0]
 800ddc2:	e7d6      	b.n	800dd72 <_free_r+0x26>
 800ddc4:	6825      	ldr	r5, [r4, #0]
 800ddc6:	1961      	adds	r1, r4, r5
 800ddc8:	428b      	cmp	r3, r1
 800ddca:	bf04      	itt	eq
 800ddcc:	6819      	ldreq	r1, [r3, #0]
 800ddce:	685b      	ldreq	r3, [r3, #4]
 800ddd0:	6063      	str	r3, [r4, #4]
 800ddd2:	bf04      	itt	eq
 800ddd4:	1949      	addeq	r1, r1, r5
 800ddd6:	6021      	streq	r1, [r4, #0]
 800ddd8:	6054      	str	r4, [r2, #4]
 800ddda:	e7ca      	b.n	800dd72 <_free_r+0x26>
 800dddc:	b003      	add	sp, #12
 800ddde:	bd30      	pop	{r4, r5, pc}
 800dde0:	240002d8 	.word	0x240002d8

0800dde4 <sbrk_aligned>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	4e0e      	ldr	r6, [pc, #56]	; (800de20 <sbrk_aligned+0x3c>)
 800dde8:	460c      	mov	r4, r1
 800ddea:	6831      	ldr	r1, [r6, #0]
 800ddec:	4605      	mov	r5, r0
 800ddee:	b911      	cbnz	r1, 800ddf6 <sbrk_aligned+0x12>
 800ddf0:	f000 f8bc 	bl	800df6c <_sbrk_r>
 800ddf4:	6030      	str	r0, [r6, #0]
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f000 f8b7 	bl	800df6c <_sbrk_r>
 800ddfe:	1c43      	adds	r3, r0, #1
 800de00:	d00a      	beq.n	800de18 <sbrk_aligned+0x34>
 800de02:	1cc4      	adds	r4, r0, #3
 800de04:	f024 0403 	bic.w	r4, r4, #3
 800de08:	42a0      	cmp	r0, r4
 800de0a:	d007      	beq.n	800de1c <sbrk_aligned+0x38>
 800de0c:	1a21      	subs	r1, r4, r0
 800de0e:	4628      	mov	r0, r5
 800de10:	f000 f8ac 	bl	800df6c <_sbrk_r>
 800de14:	3001      	adds	r0, #1
 800de16:	d101      	bne.n	800de1c <sbrk_aligned+0x38>
 800de18:	f04f 34ff 	mov.w	r4, #4294967295
 800de1c:	4620      	mov	r0, r4
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	240002dc 	.word	0x240002dc

0800de24 <_malloc_r>:
 800de24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de28:	1ccd      	adds	r5, r1, #3
 800de2a:	f025 0503 	bic.w	r5, r5, #3
 800de2e:	3508      	adds	r5, #8
 800de30:	2d0c      	cmp	r5, #12
 800de32:	bf38      	it	cc
 800de34:	250c      	movcc	r5, #12
 800de36:	2d00      	cmp	r5, #0
 800de38:	4607      	mov	r7, r0
 800de3a:	db01      	blt.n	800de40 <_malloc_r+0x1c>
 800de3c:	42a9      	cmp	r1, r5
 800de3e:	d905      	bls.n	800de4c <_malloc_r+0x28>
 800de40:	230c      	movs	r3, #12
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	2600      	movs	r6, #0
 800de46:	4630      	mov	r0, r6
 800de48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de4c:	4e2e      	ldr	r6, [pc, #184]	; (800df08 <_malloc_r+0xe4>)
 800de4e:	f000 f89d 	bl	800df8c <__malloc_lock>
 800de52:	6833      	ldr	r3, [r6, #0]
 800de54:	461c      	mov	r4, r3
 800de56:	bb34      	cbnz	r4, 800dea6 <_malloc_r+0x82>
 800de58:	4629      	mov	r1, r5
 800de5a:	4638      	mov	r0, r7
 800de5c:	f7ff ffc2 	bl	800dde4 <sbrk_aligned>
 800de60:	1c43      	adds	r3, r0, #1
 800de62:	4604      	mov	r4, r0
 800de64:	d14d      	bne.n	800df02 <_malloc_r+0xde>
 800de66:	6834      	ldr	r4, [r6, #0]
 800de68:	4626      	mov	r6, r4
 800de6a:	2e00      	cmp	r6, #0
 800de6c:	d140      	bne.n	800def0 <_malloc_r+0xcc>
 800de6e:	6823      	ldr	r3, [r4, #0]
 800de70:	4631      	mov	r1, r6
 800de72:	4638      	mov	r0, r7
 800de74:	eb04 0803 	add.w	r8, r4, r3
 800de78:	f000 f878 	bl	800df6c <_sbrk_r>
 800de7c:	4580      	cmp	r8, r0
 800de7e:	d13a      	bne.n	800def6 <_malloc_r+0xd2>
 800de80:	6821      	ldr	r1, [r4, #0]
 800de82:	3503      	adds	r5, #3
 800de84:	1a6d      	subs	r5, r5, r1
 800de86:	f025 0503 	bic.w	r5, r5, #3
 800de8a:	3508      	adds	r5, #8
 800de8c:	2d0c      	cmp	r5, #12
 800de8e:	bf38      	it	cc
 800de90:	250c      	movcc	r5, #12
 800de92:	4629      	mov	r1, r5
 800de94:	4638      	mov	r0, r7
 800de96:	f7ff ffa5 	bl	800dde4 <sbrk_aligned>
 800de9a:	3001      	adds	r0, #1
 800de9c:	d02b      	beq.n	800def6 <_malloc_r+0xd2>
 800de9e:	6823      	ldr	r3, [r4, #0]
 800dea0:	442b      	add	r3, r5
 800dea2:	6023      	str	r3, [r4, #0]
 800dea4:	e00e      	b.n	800dec4 <_malloc_r+0xa0>
 800dea6:	6822      	ldr	r2, [r4, #0]
 800dea8:	1b52      	subs	r2, r2, r5
 800deaa:	d41e      	bmi.n	800deea <_malloc_r+0xc6>
 800deac:	2a0b      	cmp	r2, #11
 800deae:	d916      	bls.n	800dede <_malloc_r+0xba>
 800deb0:	1961      	adds	r1, r4, r5
 800deb2:	42a3      	cmp	r3, r4
 800deb4:	6025      	str	r5, [r4, #0]
 800deb6:	bf18      	it	ne
 800deb8:	6059      	strne	r1, [r3, #4]
 800deba:	6863      	ldr	r3, [r4, #4]
 800debc:	bf08      	it	eq
 800debe:	6031      	streq	r1, [r6, #0]
 800dec0:	5162      	str	r2, [r4, r5]
 800dec2:	604b      	str	r3, [r1, #4]
 800dec4:	4638      	mov	r0, r7
 800dec6:	f104 060b 	add.w	r6, r4, #11
 800deca:	f000 f865 	bl	800df98 <__malloc_unlock>
 800dece:	f026 0607 	bic.w	r6, r6, #7
 800ded2:	1d23      	adds	r3, r4, #4
 800ded4:	1af2      	subs	r2, r6, r3
 800ded6:	d0b6      	beq.n	800de46 <_malloc_r+0x22>
 800ded8:	1b9b      	subs	r3, r3, r6
 800deda:	50a3      	str	r3, [r4, r2]
 800dedc:	e7b3      	b.n	800de46 <_malloc_r+0x22>
 800dede:	6862      	ldr	r2, [r4, #4]
 800dee0:	42a3      	cmp	r3, r4
 800dee2:	bf0c      	ite	eq
 800dee4:	6032      	streq	r2, [r6, #0]
 800dee6:	605a      	strne	r2, [r3, #4]
 800dee8:	e7ec      	b.n	800dec4 <_malloc_r+0xa0>
 800deea:	4623      	mov	r3, r4
 800deec:	6864      	ldr	r4, [r4, #4]
 800deee:	e7b2      	b.n	800de56 <_malloc_r+0x32>
 800def0:	4634      	mov	r4, r6
 800def2:	6876      	ldr	r6, [r6, #4]
 800def4:	e7b9      	b.n	800de6a <_malloc_r+0x46>
 800def6:	230c      	movs	r3, #12
 800def8:	603b      	str	r3, [r7, #0]
 800defa:	4638      	mov	r0, r7
 800defc:	f000 f84c 	bl	800df98 <__malloc_unlock>
 800df00:	e7a1      	b.n	800de46 <_malloc_r+0x22>
 800df02:	6025      	str	r5, [r4, #0]
 800df04:	e7de      	b.n	800dec4 <_malloc_r+0xa0>
 800df06:	bf00      	nop
 800df08:	240002d8 	.word	0x240002d8

0800df0c <_realloc_r>:
 800df0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df10:	4680      	mov	r8, r0
 800df12:	4614      	mov	r4, r2
 800df14:	460e      	mov	r6, r1
 800df16:	b921      	cbnz	r1, 800df22 <_realloc_r+0x16>
 800df18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df1c:	4611      	mov	r1, r2
 800df1e:	f7ff bf81 	b.w	800de24 <_malloc_r>
 800df22:	b92a      	cbnz	r2, 800df30 <_realloc_r+0x24>
 800df24:	f7ff ff12 	bl	800dd4c <_free_r>
 800df28:	4625      	mov	r5, r4
 800df2a:	4628      	mov	r0, r5
 800df2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df30:	f000 f838 	bl	800dfa4 <_malloc_usable_size_r>
 800df34:	4284      	cmp	r4, r0
 800df36:	4607      	mov	r7, r0
 800df38:	d802      	bhi.n	800df40 <_realloc_r+0x34>
 800df3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df3e:	d812      	bhi.n	800df66 <_realloc_r+0x5a>
 800df40:	4621      	mov	r1, r4
 800df42:	4640      	mov	r0, r8
 800df44:	f7ff ff6e 	bl	800de24 <_malloc_r>
 800df48:	4605      	mov	r5, r0
 800df4a:	2800      	cmp	r0, #0
 800df4c:	d0ed      	beq.n	800df2a <_realloc_r+0x1e>
 800df4e:	42bc      	cmp	r4, r7
 800df50:	4622      	mov	r2, r4
 800df52:	4631      	mov	r1, r6
 800df54:	bf28      	it	cs
 800df56:	463a      	movcs	r2, r7
 800df58:	f7ff fed0 	bl	800dcfc <memcpy>
 800df5c:	4631      	mov	r1, r6
 800df5e:	4640      	mov	r0, r8
 800df60:	f7ff fef4 	bl	800dd4c <_free_r>
 800df64:	e7e1      	b.n	800df2a <_realloc_r+0x1e>
 800df66:	4635      	mov	r5, r6
 800df68:	e7df      	b.n	800df2a <_realloc_r+0x1e>
	...

0800df6c <_sbrk_r>:
 800df6c:	b538      	push	{r3, r4, r5, lr}
 800df6e:	4d06      	ldr	r5, [pc, #24]	; (800df88 <_sbrk_r+0x1c>)
 800df70:	2300      	movs	r3, #0
 800df72:	4604      	mov	r4, r0
 800df74:	4608      	mov	r0, r1
 800df76:	602b      	str	r3, [r5, #0]
 800df78:	f7f4 f978 	bl	800226c <_sbrk>
 800df7c:	1c43      	adds	r3, r0, #1
 800df7e:	d102      	bne.n	800df86 <_sbrk_r+0x1a>
 800df80:	682b      	ldr	r3, [r5, #0]
 800df82:	b103      	cbz	r3, 800df86 <_sbrk_r+0x1a>
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	bd38      	pop	{r3, r4, r5, pc}
 800df88:	240002e0 	.word	0x240002e0

0800df8c <__malloc_lock>:
 800df8c:	4801      	ldr	r0, [pc, #4]	; (800df94 <__malloc_lock+0x8>)
 800df8e:	f000 b811 	b.w	800dfb4 <__retarget_lock_acquire_recursive>
 800df92:	bf00      	nop
 800df94:	240002e4 	.word	0x240002e4

0800df98 <__malloc_unlock>:
 800df98:	4801      	ldr	r0, [pc, #4]	; (800dfa0 <__malloc_unlock+0x8>)
 800df9a:	f000 b80c 	b.w	800dfb6 <__retarget_lock_release_recursive>
 800df9e:	bf00      	nop
 800dfa0:	240002e4 	.word	0x240002e4

0800dfa4 <_malloc_usable_size_r>:
 800dfa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfa8:	1f18      	subs	r0, r3, #4
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	bfbc      	itt	lt
 800dfae:	580b      	ldrlt	r3, [r1, r0]
 800dfb0:	18c0      	addlt	r0, r0, r3
 800dfb2:	4770      	bx	lr

0800dfb4 <__retarget_lock_acquire_recursive>:
 800dfb4:	4770      	bx	lr

0800dfb6 <__retarget_lock_release_recursive>:
 800dfb6:	4770      	bx	lr

0800dfb8 <_init>:
 800dfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfba:	bf00      	nop
 800dfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfbe:	bc08      	pop	{r3}
 800dfc0:	469e      	mov	lr, r3
 800dfc2:	4770      	bx	lr

0800dfc4 <_fini>:
 800dfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc6:	bf00      	nop
 800dfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfca:	bc08      	pop	{r3}
 800dfcc:	469e      	mov	lr, r3
 800dfce:	4770      	bx	lr
