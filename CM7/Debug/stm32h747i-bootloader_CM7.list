
stm32h747i-bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af98  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800b230  0800b230  0001b230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b568  0800b568  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b568  0800b568  0001b568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b570  0800b570  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b570  0800b570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b574  0800b574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800b578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  24000010  0800b588  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400017c  0800b588  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018453  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e36  00000000  00000000  00038491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0003b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  0003c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041214  00000000  00000000  0003d540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019429  00000000  00000000  0007e754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b912  00000000  00000000  00097b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023348f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  002334e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b218 	.word	0x0800b218

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800b218 	.word	0x0800b218

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <SystemInit+0xfc>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <SystemInit+0xfc>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0xfc>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <SystemInit+0xfc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <SystemInit+0x100>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	2b06      	cmp	r3, #6
 8000616:	d807      	bhi.n	8000628 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <SystemInit+0x100>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x100>)
 8000622:	f043 0307 	orr.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemInit+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemInit+0x104>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x104>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemInit+0x104>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	492c      	ldr	r1, [pc, #176]	; (80006f0 <SystemInit+0x104>)
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemInit+0x108>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemInit+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemInit+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <SystemInit+0x100>)
 800065c:	f043 0307 	orr.w	r3, r3, #7
 8000660:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemInit+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemInit+0x104>)
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemInit+0x10c>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemInit+0x104>)
 800067c:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <SystemInit+0x110>)
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <SystemInit+0x104>)
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <SystemInit+0x114>)
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <SystemInit+0x104>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <SystemInit+0x114>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <SystemInit+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x104>)
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <SystemInit+0x114>)
 800069c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <SystemInit+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x104>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <SystemInit+0x104>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x118>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <SystemInit+0x118>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x11c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x120>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ce:	d202      	bcs.n	80006d6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0x124>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SystemInit+0x128>)
 80006d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006dc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	52002000 	.word	0x52002000
 80006f0:	58024400 	.word	0x58024400
 80006f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f8:	02020200 	.word	0x02020200
 80006fc:	01ff0000 	.word	0x01ff0000
 8000700:	01010280 	.word	0x01010280
 8000704:	580000c0 	.word	0x580000c0
 8000708:	5c001000 	.word	0x5c001000
 800070c:	ffff0000 	.word	0xffff0000
 8000710:	51008108 	.word	0x51008108
 8000714:	52004000 	.word	0x52004000

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	f2ad 6d7c 	subw	sp, sp, #1660	; 0x67c
 800071e:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000724:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000728:	bf00      	nop
 800072a:	4b6f      	ldr	r3, [pc, #444]	; (80008e8 <main+0x1d0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <main+0x2c>
 8000736:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	f8c7 2674 	str.w	r2, [r7, #1652]	; 0x674
 8000740:	2b00      	cmp	r3, #0
 8000742:	dcf2      	bgt.n	800072a <main+0x12>
  if ( timeout < 0 )
 8000744:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8000748:	2b00      	cmp	r3, #0
 800074a:	da01      	bge.n	8000750 <main+0x38>
  {
  Error_Handler();
 800074c:	f000 fa94 	bl	8000c78 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fbfe 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f8d6 	bl	8000904 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000758:	f000 f95a 	bl	8000a10 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800075c:	4b62      	ldr	r3, [pc, #392]	; (80008e8 <main+0x1d0>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000762:	4a61      	ldr	r2, [pc, #388]	; (80008e8 <main+0x1d0>)
 8000764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076c:	4b5e      	ldr	r3, [pc, #376]	; (80008e8 <main+0x1d0>)
 800076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000772:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000776:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800077a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8000784:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8000788:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 ff82 	bl	8001694 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000790:	2100      	movs	r1, #0
 8000792:	2000      	movs	r0, #0
 8000794:	f000 ff98 	bl	80016c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079c:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007a0:	bf00      	nop
 80007a2:	4b51      	ldr	r3, [pc, #324]	; (80008e8 <main+0x1d0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d106      	bne.n	80007bc <main+0xa4>
 80007ae:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	f8c7 2674 	str.w	r2, [r7, #1652]	; 0x674
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dcf2      	bgt.n	80007a2 <main+0x8a>
if ( timeout < 0 )
 80007bc:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	da01      	bge.n	80007c8 <main+0xb0>
{
Error_Handler();
 80007c4:	f000 fa58 	bl	8000c78 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f9c2 	bl	8000b50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007cc:	f000 f974 	bl	8000ab8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80007d0:	f000 f94e 	bl	8000a70 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80007d4:	f008 f854 	bl	8008880 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // Create a new file
  FIL file;
  UINT bytesRead;
  uint8_t test[BUFFER_SIZE] = "hello             \n";
 80007d8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80007dc:	f5a3 6688 	sub.w	r6, r3, #1088	; 0x440
 80007e0:	4b42      	ldr	r3, [pc, #264]	; (80008ec <main+0x1d4>)
 80007e2:	4634      	mov	r4, r6
 80007e4:	461d      	mov	r5, r3
 80007e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ea:	682b      	ldr	r3, [r5, #0]
 80007ec:	6023      	str	r3, [r4, #0]
 80007ee:	f106 0314 	add.w	r3, r6, #20
 80007f2:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f00a fd05 	bl	800b208 <memset>

  // Mount the SD card
  FATFS fs;
  uint8_t mountRes;
  mountRes = f_mount(&fs, SD_CARD_PATH, 1);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2201      	movs	r2, #1
 8000804:	493a      	ldr	r1, [pc, #232]	; (80008f0 <main+0x1d8>)
 8000806:	4618      	mov	r0, r3
 8000808:	f009 ff1e 	bl	800a648 <f_mount>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 3673 	strb.w	r3, [r7, #1651]	; 0x673
  if ( mountRes != FR_OK) {
 8000812:	f897 3673 	ldrb.w	r3, [r7, #1651]	; 0x673
 8000816:	2b00      	cmp	r3, #0
 8000818:	d000      	beq.n	800081c <main+0x104>
	  // Error handling
	  while (1) {
 800081a:	e7fe      	b.n	800081a <main+0x102>
		  // Handle the error
	  }
  }

  if (f_open(&file, FILE_NAME, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 800081c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8000820:	220a      	movs	r2, #10
 8000822:	4934      	ldr	r1, [pc, #208]	; (80008f4 <main+0x1dc>)
 8000824:	4618      	mov	r0, r3
 8000826:	f009 ff55 	bl	800a6d4 <f_open>
//		  // Handle the error
//	  }
  }

  // Write data to the file
  const char* data = "Hello, world! GKN \n\r";
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <main+0x1e0>)
 800082c:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
  UINT bytesWritten;
  if (f_write(&file, data, strlen(data), &bytesWritten) != FR_OK) {
 8000830:	f8d7 066c 	ldr.w	r0, [r7, #1644]	; 0x66c
 8000834:	f7ff fd50 	bl	80002d8 <strlen>
 8000838:	4602      	mov	r2, r0
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	f207 403c 	addw	r0, r7, #1084	; 0x43c
 8000840:	f8d7 166c 	ldr.w	r1, [r7, #1644]	; 0x66c
 8000844:	f00a fa43 	bl	800acce <f_write>
//		  // Handle the error
//	  }
  }

  // Close the file
  f_close(&file);
 8000848:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800084c:	4618      	mov	r0, r3
 800084e:	f00a fc31 	bl	800b0b4 <f_close>

  // Unmount the SD card
  f_mount(NULL, SD_CARD_PATH, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	4926      	ldr	r1, [pc, #152]	; (80008f0 <main+0x1d8>)
 8000856:	2000      	movs	r0, #0
 8000858:	f009 fef6 	bl	800a648 <f_mount>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(500);
 800085c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000860:	f000 fc08 	bl	8001074 <HAL_Delay>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	4824      	ldr	r0, [pc, #144]	; (80008fc <main+0x1e4>)
 800086a:	f000 fef8 	bl	800165e <HAL_GPIO_TogglePin>


	// Mount the SD card
	if (f_mount(&fs, SD_CARD_PATH, 1) != FR_OK) {
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2201      	movs	r2, #1
 8000874:	491e      	ldr	r1, [pc, #120]	; (80008f0 <main+0x1d8>)
 8000876:	4618      	mov	r0, r3
 8000878:	f009 fee6 	bl	800a648 <f_mount>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d000      	beq.n	8000884 <main+0x16c>
		// Error handling
		while (1) {
 8000882:	e7fe      	b.n	8000882 <main+0x16a>
			// Handle the error
		}
	}

	// Open the file for reading
	if (f_open(&file, FILE_NAME, FA_READ) != FR_OK) {
 8000884:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8000888:	2201      	movs	r2, #1
 800088a:	491a      	ldr	r1, [pc, #104]	; (80008f4 <main+0x1dc>)
 800088c:	4618      	mov	r0, r3
 800088e:	f009 ff21 	bl	800a6d4 <f_open>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d000      	beq.n	800089a <main+0x182>
		// Error handling
		while (1) {
 8000898:	e7fe      	b.n	8000898 <main+0x180>
			// Handle the error
		}
	}

	// Read file data
	while (f_read(&file, test, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 800089a:	bf00      	nop
 800089c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80008a0:	f507 710e 	add.w	r1, r7, #568	; 0x238
 80008a4:	f207 403c 	addw	r0, r7, #1084	; 0x43c
 80008a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ac:	f00a f8d0 	bl	800aa50 <f_read>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d106      	bne.n	80008c4 <main+0x1ac>
 80008b6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80008ba:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1eb      	bne.n	800089c <main+0x184>
		// Process the read data here
		// You can write your own code to handle the data
	}

	// Close the file
	f_close(&file);
 80008c4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80008c8:	4618      	mov	r0, r3
 80008ca:	f00a fbf3 	bl	800b0b4 <f_close>

	// Unmount the SD card
	f_mount(NULL, SD_CARD_PATH, 1);
 80008ce:	2201      	movs	r2, #1
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <main+0x1d8>)
 80008d2:	2000      	movs	r0, #0
 80008d4:	f009 feb8 	bl	800a648 <f_mount>

	HAL_UART_Transmit(&huart1, test, 20, 100);
 80008d8:	f507 710e 	add.w	r1, r7, #568	; 0x238
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	2214      	movs	r2, #20
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <main+0x1e8>)
 80008e2:	f006 f8ef 	bl	8006ac4 <HAL_UART_Transmit>
    HAL_Delay(500);
 80008e6:	e7b9      	b.n	800085c <main+0x144>
 80008e8:	58024400 	.word	0x58024400
 80008ec:	0800b258 	.word	0x0800b258
 80008f0:	0800b230 	.word	0x0800b230
 80008f4:	0800b234 	.word	0x0800b234
 80008f8:	0800b240 	.word	0x0800b240
 80008fc:	58022000 	.word	0x58022000
 8000900:	240000a8 	.word	0x240000a8

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09c      	sub	sp, #112	; 0x70
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	224c      	movs	r2, #76	; 0x4c
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f00a fc78 	bl	800b208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2220      	movs	r2, #32
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f00a fc72 	bl	800b208 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000924:	2004      	movs	r0, #4
 8000926:	f000 fee3 	bl	80016f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <SystemClock_Config+0x104>)
 8000930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000932:	4a35      	ldr	r2, [pc, #212]	; (8000a08 <SystemClock_Config+0x104>)
 8000934:	f023 0301 	bic.w	r3, r3, #1
 8000938:	62d3      	str	r3, [r2, #44]	; 0x2c
 800093a:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <SystemClock_Config+0x104>)
 800093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <SystemClock_Config+0x108>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a30      	ldr	r2, [pc, #192]	; (8000a0c <SystemClock_Config+0x108>)
 800094a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <SystemClock_Config+0x108>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800095c:	bf00      	nop
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <SystemClock_Config+0x108>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800096a:	d1f8      	bne.n	800095e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800096c:	230b      	movs	r3, #11
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000976:	2301      	movs	r3, #1
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800097e:	2301      	movs	r3, #1
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	2302      	movs	r3, #2
 8000988:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800098a:	2305      	movs	r3, #5
 800098c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800098e:	2330      	movs	r3, #48	; 0x30
 8000990:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000996:	2305      	movs	r3, #5
 8000998:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800099e:	2308      	movs	r3, #8
 80009a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fef8 	bl	80017a4 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009ba:	f000 f95d 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	233f      	movs	r3, #63	; 0x3f
 80009c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fb38 	bl	8002058 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009ee:	f000 f943 	bl	8000c78 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009f6:	2100      	movs	r1, #0
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 fce3 	bl	80023c4 <HAL_RCC_MCOConfig>
}
 80009fe:	bf00      	nop
 8000a00:	3770      	adds	r7, #112	; 0x70
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58000400 	.word	0x58000400
 8000a0c:	58024800 	.word	0x58024800

08000a10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0b2      	sub	sp, #200	; 0xc8
 8000a14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	22c8      	movs	r2, #200	; 0xc8
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00a fbf3 	bl	800b208 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a26:	f04f 0300 	mov.w	r3, #0
 8000a2a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a32:	230c      	movs	r3, #12
 8000a34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a42:	23c0      	movs	r3, #192	; 0xc0
 8000a44:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a46:	2320      	movs	r3, #32
 8000a48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fef4 	bl	8002844 <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a62:	f000 f909 	bl	8000c78 <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	37c8      	adds	r7, #200	; 0xc8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SDMMC1_SD_Init+0x40>)
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <MX_SDMMC1_SD_Init+0x44>)
 8000a78:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MX_SDMMC1_SD_Init+0x40>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_SDMMC1_SD_Init+0x40>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_SDMMC1_SD_Init+0x40>)
 8000a88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a8c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_SDMMC1_SD_Init+0x40>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SDMMC1_SD_Init+0x40>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_SDMMC1_SD_Init+0x40>)
 8000a9c:	f004 fc10 	bl	80052c0 <HAL_SD_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000aa6:	f000 f8e7 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2400002c 	.word	0x2400002c
 8000ab4:	52007000 	.word	0x52007000

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000b02:	f005 ff8f 	bl	8006a24 <HAL_UART_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 f8b4 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000b14:	f007 f81f 	bl	8007b56 <HAL_UARTEx_SetTxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 f8ab 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000b26:	f007 f854 	bl	8007bd2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 f8a2 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_USART1_UART_Init+0x90>)
 8000b36:	f006 ffd5 	bl	8007ae4 <HAL_UARTEx_DisableFifoMode>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 f89a 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	240000a8 	.word	0x240000a8
 8000b4c:	40011000 	.word	0x40011000

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	4a3f      	ldr	r2, [pc, #252]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b84:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a38      	ldr	r2, [pc, #224]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c02:	481b      	ldr	r0, [pc, #108]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000c04:	f000 fd12 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4814      	ldr	r0, [pc, #80]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000c1e:	f000 fb3d 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_GPIO_Init+0x124>)
 8000c40:	f000 fb2c 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000c5e:	f000 fb1d 	bl	800129c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58022000 	.word	0x58022000
 8000c74:	58020000 	.word	0x58020000

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_MspInit+0x30>)
 8000c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c90:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x30>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x30>)
 8000c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	58024400 	.word	0x58024400

08000cb8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0be      	sub	sp, #248	; 0xf8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 0318 	add.w	r3, r7, #24
 8000cd4:	22c8      	movs	r2, #200	; 0xc8
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f00a fa95 	bl	800b208 <memset>
  if(hsd->Instance==SDMMC1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a38      	ldr	r2, [pc, #224]	; (8000dc4 <HAL_SD_MspInit+0x10c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d169      	bne.n	8000dbc <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ce8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fda1 	bl	8002844 <HAL_RCCEx_PeriphCLKConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000d08:	f7ff ffb6 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <HAL_SD_MspInit+0x110>)
 8000d0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d12:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <HAL_SD_MspInit+0x110>)
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d18:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_SD_MspInit+0x110>)
 8000d1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <HAL_SD_MspInit+0x110>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a25      	ldr	r2, [pc, #148]	; (8000dc8 <HAL_SD_MspInit+0x110>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <HAL_SD_MspInit+0x110>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_SD_MspInit+0x110>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <HAL_SD_MspInit+0x110>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_SD_MspInit+0x110>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000d66:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000d80:	230c      	movs	r3, #12
 8000d82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480f      	ldr	r0, [pc, #60]	; (8000dcc <HAL_SD_MspInit+0x114>)
 8000d8e:	f000 fa85 	bl	800129c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000d92:	2304      	movs	r3, #4
 8000d94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000daa:	230c      	movs	r3, #12
 8000dac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <HAL_SD_MspInit+0x118>)
 8000db8:	f000 fa70 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	37f8      	adds	r7, #248	; 0xf8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	52007000 	.word	0x52007000
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020800 	.word	0x58020800
 8000dd0:	58020c00 	.word	0x58020c00

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0bc      	sub	sp, #240	; 0xf0
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	22c8      	movs	r2, #200	; 0xc8
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f00a fa07 	bl	800b208 <memset>
  if(huart->Instance==USART1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <HAL_UART_MspInit+0xc8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d146      	bne.n	8000e92 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e04:	f04f 0201 	mov.w	r2, #1
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fd12 	bl	8002844 <HAL_RCCEx_PeriphCLKConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e26:	f7ff ff27 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_UART_MspInit+0xcc>)
 8000e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <HAL_UART_MspInit+0xcc>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_UART_MspInit+0xcc>)
 8000e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0xcc>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_UART_MspInit+0xcc>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0xcc>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000e66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e80:	2307      	movs	r3, #7
 8000e82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_MspInit+0xd0>)
 8000e8e:	f000 fa05 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	37f0      	adds	r7, #240	; 0xf0
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020000 	.word	0x58020000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f89e 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f00:	f7ff fb74 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f00a f949 	bl	800b1c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fbf3 	bl	8000718 <main>
  bx  lr
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f3c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f40:	0800b578 	.word	0x0800b578
  ldr r2, =_sbss
 8000f44:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f48:	2400017c 	.word	0x2400017c

08000f4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC3_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 f96e 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f5c:	f001 fa9c 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_Init+0x68>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	4913      	ldr	r1, [pc, #76]	; (8000fbc <HAL_Init+0x6c>)
 8000f6e:	5ccb      	ldrb	r3, [r1, r3]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_Init+0x68>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_Init+0x6c>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_Init+0x70>)
 8000f92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_Init+0x74>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f814 	bl	8000fc8 <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e002      	b.n	8000fb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000faa:	f7ff fe6b 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	0800b49c 	.word	0x0800b49c
 8000fc0:	24000004 	.word	0x24000004
 8000fc4:	24000000 	.word	0x24000000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_InitTick+0x60>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e021      	b.n	8001020 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_InitTick+0x64>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_InitTick+0x60>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f945 	bl	8001282 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f91d 	bl	800124e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x68>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2400000c 	.word	0x2400000c
 800102c:	24000000 	.word	0x24000000
 8001030:	24000008 	.word	0x24000008

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2400000c 	.word	0x2400000c
 8001058:	2400013c 	.word	0x2400013c

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2400013c 	.word	0x2400013c

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2400000c 	.word	0x2400000c

080010bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetREVID+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0c1b      	lsrs	r3, r3, #16
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	5c001000 	.word	0x5c001000

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <__NVIC_SetPriorityGrouping+0x40>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x40>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00
 8001118:	05fa0000 	.word	0x05fa0000

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f7ff ff8e 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff47 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff5e 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff90 	bl	800118c <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffb2 	bl	80011f4 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012aa:	4b89      	ldr	r3, [pc, #548]	; (80014d0 <HAL_GPIO_Init+0x234>)
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ae:	e194      	b.n	80015da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8186 	beq.w	80015d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d005      	beq.n	80012e0 <HAL_GPIO_Init+0x44>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 0201 	and.w	r2, r3, #1
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b03      	cmp	r3, #3
 800134c:	d017      	beq.n	800137e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d123      	bne.n	80013d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	69b9      	ldr	r1, [r7, #24]
 80013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0203 	and.w	r2, r3, #3
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80e0 	beq.w	80015d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <HAL_GPIO_Init+0x238>)
 8001416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800141a:	4a2e      	ldr	r2, [pc, #184]	; (80014d4 <HAL_GPIO_Init+0x238>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_GPIO_Init+0x238>)
 8001426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001432:	4a29      	ldr	r2, [pc, #164]	; (80014d8 <HAL_GPIO_Init+0x23c>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a20      	ldr	r2, [pc, #128]	; (80014dc <HAL_GPIO_Init+0x240>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d052      	beq.n	8001504 <HAL_GPIO_Init+0x268>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1f      	ldr	r2, [pc, #124]	; (80014e0 <HAL_GPIO_Init+0x244>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d031      	beq.n	80014ca <HAL_GPIO_Init+0x22e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a1e      	ldr	r2, [pc, #120]	; (80014e4 <HAL_GPIO_Init+0x248>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d02b      	beq.n	80014c6 <HAL_GPIO_Init+0x22a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_GPIO_Init+0x24c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x226>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <HAL_GPIO_Init+0x250>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x222>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <HAL_GPIO_Init+0x254>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x21e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <HAL_GPIO_Init+0x258>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x21a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_GPIO_Init+0x25c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x216>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <HAL_GPIO_Init+0x260>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x212>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_GPIO_Init+0x264>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x20e>
 80014a6:	2309      	movs	r3, #9
 80014a8:	e02d      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014aa:	230a      	movs	r3, #10
 80014ac:	e02b      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014ae:	2308      	movs	r3, #8
 80014b0:	e029      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e027      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e025      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014ba:	2305      	movs	r3, #5
 80014bc:	e023      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014be:	2304      	movs	r3, #4
 80014c0:	e021      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e01f      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e01d      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e01b      	b.n	8001506 <HAL_GPIO_Init+0x26a>
 80014ce:	bf00      	nop
 80014d0:	58000080 	.word	0x58000080
 80014d4:	58024400 	.word	0x58024400
 80014d8:	58000400 	.word	0x58000400
 80014dc:	58020000 	.word	0x58020000
 80014e0:	58020400 	.word	0x58020400
 80014e4:	58020800 	.word	0x58020800
 80014e8:	58020c00 	.word	0x58020c00
 80014ec:	58021000 	.word	0x58021000
 80014f0:	58021400 	.word	0x58021400
 80014f4:	58021800 	.word	0x58021800
 80014f8:	58021c00 	.word	0x58021c00
 80014fc:	58022000 	.word	0x58022000
 8001500:	58022400 	.word	0x58022400
 8001504:	2300      	movs	r3, #0
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001516:	4938      	ldr	r1, [pc, #224]	; (80015f8 <HAL_GPIO_Init+0x35c>)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800154a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f47f ae63 	bne.w	80012b0 <HAL_GPIO_Init+0x14>
  }
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	3724      	adds	r7, #36	; 0x24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	58000400 	.word	0x58000400

080015fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e001      	b.n	800161e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001648:	e003      	b.n	8001652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001670:	887a      	ldrh	r2, [r7, #2]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	041a      	lsls	r2, r3, #16
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43d9      	mvns	r1, r3
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	400b      	ands	r3, r1
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	619a      	str	r2, [r3, #24]
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800169c:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_HSEM_FastTake+0x2c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3320      	adds	r3, #32
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_HSEM_FastTake+0x30>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e000      	b.n	80016b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	58026400 	.word	0x58026400
 80016c4:	80000300 	.word	0x80000300

080016c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016d2:	4906      	ldr	r1, [pc, #24]	; (80016ec <HAL_HSEM_Release+0x24>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	58026400 	.word	0x58026400

080016f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	2b06      	cmp	r3, #6
 8001702:	d00a      	beq.n	800171a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	d001      	beq.n	8001716 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e040      	b.n	8001798 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e03e      	b.n	8001798 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001722:	491f      	ldr	r1, [pc, #124]	; (80017a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4313      	orrs	r3, r2
 8001728:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800172a:	f7ff fc97 	bl	800105c <HAL_GetTick>
 800172e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001730:	e009      	b.n	8001746 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001732:	f7ff fc93 	bl	800105c <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001740:	d901      	bls.n	8001746 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e028      	b.n	8001798 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001752:	d1ee      	bne.n	8001732 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b1e      	cmp	r3, #30
 8001758:	d008      	beq.n	800176c <HAL_PWREx_ConfigSupply+0x7c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b2e      	cmp	r3, #46	; 0x2e
 800175e:	d005      	beq.n	800176c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b1d      	cmp	r3, #29
 8001764:	d002      	beq.n	800176c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b2d      	cmp	r3, #45	; 0x2d
 800176a:	d114      	bne.n	8001796 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800176c:	f7ff fc76 	bl	800105c <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001772:	e009      	b.n	8001788 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001774:	f7ff fc72 	bl	800105c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001782:	d901      	bls.n	8001788 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e007      	b.n	8001798 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d1ee      	bne.n	8001774 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	58024800 	.word	0x58024800

080017a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f000 bc48 	b.w	8002048 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8088 	beq.w	80018d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c6:	4b99      	ldr	r3, [pc, #612]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017d0:	4b96      	ldr	r3, [pc, #600]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	2b10      	cmp	r3, #16
 80017da:	d007      	beq.n	80017ec <HAL_RCC_OscConfig+0x48>
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017de:	2b18      	cmp	r3, #24
 80017e0:	d111      	bne.n	8001806 <HAL_RCC_OscConfig+0x62>
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	4b8f      	ldr	r3, [pc, #572]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d06d      	beq.n	80018d4 <HAL_RCC_OscConfig+0x130>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d169      	bne.n	80018d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	f000 bc21 	b.w	8002048 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x7a>
 8001810:	4b86      	ldr	r3, [pc, #536]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a85      	ldr	r2, [pc, #532]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e02e      	b.n	800187c <HAL_RCC_OscConfig+0xd8>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x9c>
 8001826:	4b81      	ldr	r3, [pc, #516]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a80      	ldr	r2, [pc, #512]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 800182c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b7e      	ldr	r3, [pc, #504]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7d      	ldr	r2, [pc, #500]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xd8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0xc0>
 800184a:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a77      	ldr	r2, [pc, #476]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b75      	ldr	r3, [pc, #468]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a74      	ldr	r2, [pc, #464]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xd8>
 8001864:	4b71      	ldr	r3, [pc, #452]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a70      	ldr	r2, [pc, #448]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b6e      	ldr	r3, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a6d      	ldr	r2, [pc, #436]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fbea 	bl	800105c <HAL_GetTick>
 8001888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fbe6 	bl	800105c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e3d4      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800189e:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xe8>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fbd6 	bl	800105c <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fbd2 	bl	800105c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e3c0      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018c6:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x110>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80ca 	beq.w	8001a78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e4:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018ee:	4b4f      	ldr	r3, [pc, #316]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_RCC_OscConfig+0x166>
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	2b18      	cmp	r3, #24
 80018fe:	d156      	bne.n	80019ae <HAL_RCC_OscConfig+0x20a>
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d151      	bne.n	80019ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190a:	4b48      	ldr	r3, [pc, #288]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_RCC_OscConfig+0x17e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e392      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001922:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 0219 	bic.w	r2, r3, #25
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	493f      	ldr	r1, [pc, #252]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff fb92 	bl	800105c <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193c:	f7ff fb8e 	bl	800105c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e37c      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195a:	f7ff fbaf 	bl	80010bc <HAL_GetREVID>
 800195e:	4603      	mov	r3, r0
 8001960:	f241 0203 	movw	r2, #4099	; 0x1003
 8001964:	4293      	cmp	r3, r2
 8001966:	d817      	bhi.n	8001998 <HAL_RCC_OscConfig+0x1f4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b40      	cmp	r3, #64	; 0x40
 800196e:	d108      	bne.n	8001982 <HAL_RCC_OscConfig+0x1de>
 8001970:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 800197a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	e07a      	b.n	8001a78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	031b      	lsls	r3, r3, #12
 8001990:	4926      	ldr	r1, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001996:	e06f      	b.n	8001a78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4921      	ldr	r1, [pc, #132]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ac:	e064      	b.n	8001a78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d047      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 0219 	bic.w	r2, r3, #25
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	491a      	ldr	r1, [pc, #104]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff fb48 	bl	800105c <HAL_GetTick>
 80019cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff fb44 	bl	800105c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e332      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	f7ff fb65 	bl	80010bc <HAL_GetREVID>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d819      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x28c>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b40      	cmp	r3, #64	; 0x40
 8001a02:	d108      	bne.n	8001a16 <HAL_RCC_OscConfig+0x272>
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a12:	6053      	str	r3, [r2, #4]
 8001a14:	e030      	b.n	8001a78 <HAL_RCC_OscConfig+0x2d4>
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	031b      	lsls	r3, r3, #12
 8001a24:	4901      	ldr	r1, [pc, #4]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
 8001a2a:	e025      	b.n	8001a78 <HAL_RCC_OscConfig+0x2d4>
 8001a2c:	58024400 	.word	0x58024400
 8001a30:	4b9a      	ldr	r3, [pc, #616]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	4997      	ldr	r1, [pc, #604]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
 8001a44:	e018      	b.n	8001a78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b95      	ldr	r3, [pc, #596]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a94      	ldr	r2, [pc, #592]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff fb03 	bl	800105c <HAL_GetTick>
 8001a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff faff 	bl	800105c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e2ed      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a6c:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a9 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a86:	4b85      	ldr	r3, [pc, #532]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a90:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d007      	beq.n	8001aac <HAL_RCC_OscConfig+0x308>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b18      	cmp	r3, #24
 8001aa0:	d13a      	bne.n	8001b18 <HAL_RCC_OscConfig+0x374>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d135      	bne.n	8001b18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aac:	4b7b      	ldr	r3, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x320>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	2b80      	cmp	r3, #128	; 0x80
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e2c1      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ac4:	f7ff fafa 	bl	80010bc <HAL_GetREVID>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d817      	bhi.n	8001b02 <HAL_RCC_OscConfig+0x35e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	d108      	bne.n	8001aec <HAL_RCC_OscConfig+0x348>
 8001ada:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ae8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aea:	e075      	b.n	8001bd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aec:	4b6b      	ldr	r3, [pc, #428]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	069b      	lsls	r3, r3, #26
 8001afa:	4968      	ldr	r1, [pc, #416]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b00:	e06a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b02:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4962      	ldr	r1, [pc, #392]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b16:	e05f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d042      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b20:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5d      	ldr	r2, [pc, #372]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fa96 	bl	800105c <HAL_GetTick>
 8001b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b34:	f7ff fa92 	bl	800105c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e280      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b46:	4b55      	ldr	r3, [pc, #340]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b52:	f7ff fab3 	bl	80010bc <HAL_GetREVID>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d817      	bhi.n	8001b90 <HAL_RCC_OscConfig+0x3ec>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	d108      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3d6>
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b70:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b76:	6053      	str	r3, [r2, #4]
 8001b78:	e02e      	b.n	8001bd8 <HAL_RCC_OscConfig+0x434>
 8001b7a:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	069b      	lsls	r3, r3, #26
 8001b88:	4944      	ldr	r1, [pc, #272]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
 8001b8e:	e023      	b.n	8001bd8 <HAL_RCC_OscConfig+0x434>
 8001b90:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	493f      	ldr	r1, [pc, #252]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
 8001ba4:	e018      	b.n	8001bd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a3c      	ldr	r2, [pc, #240]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fa53 	bl	800105c <HAL_GetTick>
 8001bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bba:	f7ff fa4f 	bl	800105c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e23d      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bcc:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d036      	beq.n	8001c52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d019      	beq.n	8001c20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf0:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fa30 	bl	800105c <HAL_GetTick>
 8001bfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff fa2c 	bl	800105c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e21a      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x45c>
 8001c1e:	e018      	b.n	8001c52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff fa16 	bl	800105c <HAL_GetTick>
 8001c30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c34:	f7ff fa12 	bl	800105c <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e200      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d039      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f9f3 	bl	800105c <HAL_GetTick>
 8001c76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c7a:	f7ff f9ef 	bl	800105c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1dd      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4d6>
 8001c98:	e01b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ca0:	4b9b      	ldr	r3, [pc, #620]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a9a      	ldr	r2, [pc, #616]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001caa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cac:	f7ff f9d6 	bl	800105c <HAL_GetTick>
 8001cb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb4:	f7ff f9d2 	bl	800105c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1c0      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cc6:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8081 	beq.w	8001de2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ce0:	4b8c      	ldr	r3, [pc, #560]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a8b      	ldr	r2, [pc, #556]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cec:	f7ff f9b6 	bl	800105c <HAL_GetTick>
 8001cf0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7ff f9b2 	bl	800105c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1a0      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d06:	4b83      	ldr	r3, [pc, #524]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_OscConfig+0x584>
 8001d1a:	4b7d      	ldr	r3, [pc, #500]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a7c      	ldr	r2, [pc, #496]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	e02d      	b.n	8001d84 <HAL_RCC_OscConfig+0x5e0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10c      	bne.n	8001d4a <HAL_RCC_OscConfig+0x5a6>
 8001d30:	4b77      	ldr	r3, [pc, #476]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	4a76      	ldr	r2, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3c:	4b74      	ldr	r3, [pc, #464]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a73      	ldr	r2, [pc, #460]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d42:	f023 0304 	bic.w	r3, r3, #4
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	e01c      	b.n	8001d84 <HAL_RCC_OscConfig+0x5e0>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c8>
 8001d52:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	4a6e      	ldr	r2, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5e:	4b6c      	ldr	r3, [pc, #432]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	4a6b      	ldr	r2, [pc, #428]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0x5e0>
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a67      	ldr	r2, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a64      	ldr	r2, [pc, #400]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001d7e:	f023 0304 	bic.w	r3, r3, #4
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d015      	beq.n	8001db8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8c:	f7ff f966 	bl	800105c <HAL_GetTick>
 8001d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7ff f962 	bl	800105c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e14e      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001daa:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0ee      	beq.n	8001d94 <HAL_RCC_OscConfig+0x5f0>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff f950 	bl	800105c <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f94c 	bl	800105c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e138      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ee      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 812d 	beq.w	8002046 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dec:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001df4:	2b18      	cmp	r3, #24
 8001df6:	f000 80bd 	beq.w	8001f74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	f040 809e 	bne.w	8001f40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f924 	bl	800105c <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff f920 	bl	800105c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e10e      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e2a:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3a:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <HAL_RCC_OscConfig+0x774>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	4931      	ldr	r1, [pc, #196]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	3b01      	subs	r3, #1
 8001e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	025b      	lsls	r3, r3, #9
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	041b      	lsls	r3, r3, #16
 8001e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e80:	4923      	ldr	r1, [pc, #140]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	4a21      	ldr	r2, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e92:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e9e:	00d2      	lsls	r2, r2, #3
 8001ea0:	491b      	ldr	r1, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	f023 020c 	bic.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4917      	ldr	r1, [pc, #92]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	f023 0202 	bic.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	4912      	ldr	r1, [pc, #72]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_RCC_OscConfig+0x76c>)
 8001f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7ff f8a9 	bl	800105c <HAL_GetTick>
 8001f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f0c:	e011      	b.n	8001f32 <HAL_RCC_OscConfig+0x78e>
 8001f0e:	bf00      	nop
 8001f10:	58024400 	.word	0x58024400
 8001f14:	58024800 	.word	0x58024800
 8001f18:	fffffc0c 	.word	0xfffffc0c
 8001f1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff f89c 	bl	800105c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e08a      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x77c>
 8001f3e:	e082      	b.n	8002046 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f40:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a42      	ldr	r2, [pc, #264]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8001f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f886 	bl	800105c <HAL_GetTick>
 8001f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff f882 	bl	800105c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e070      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f66:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x7b0>
 8001f72:	e068      	b.n	8002046 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f7a:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d031      	beq.n	8001fec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f003 0203 	and.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d12a      	bne.n	8001fec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d122      	bne.n	8001fec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d11a      	bne.n	8001fec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	0a5b      	lsrs	r3, r3, #9
 8001fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d111      	bne.n	8001fec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	0c1b      	lsrs	r3, r3, #16
 8001fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d108      	bne.n	8001fec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	0e1b      	lsrs	r3, r3, #24
 8001fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e02b      	b.n	8002048 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	08db      	lsrs	r3, r3, #3
 8001ff6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ffa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d01f      	beq.n	8002046 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002012:	f7ff f823 	bl	800105c <HAL_GetTick>
 8002016:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002018:	bf00      	nop
 800201a:	f7ff f81f 	bl	800105c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	4293      	cmp	r3, r2
 8002024:	d0f9      	beq.n	800201a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8002028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_OscConfig+0x8b0>)
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002032:	00d2      	lsls	r2, r2, #3
 8002034:	4906      	ldr	r1, [pc, #24]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8002036:	4313      	orrs	r3, r2
 8002038:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_RCC_OscConfig+0x8ac>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3730      	adds	r7, #48	; 0x30
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	58024400 	.word	0x58024400
 8002054:	ffff0007 	.word	0xffff0007

08002058 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e19c      	b.n	80023a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b8a      	ldr	r3, [pc, #552]	; (8002298 <HAL_RCC_ClockConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b87      	ldr	r3, [pc, #540]	; (8002298 <HAL_RCC_ClockConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 020f 	bic.w	r2, r3, #15
 8002082:	4985      	ldr	r1, [pc, #532]	; (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b83      	ldr	r3, [pc, #524]	; (8002298 <HAL_RCC_ClockConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e184      	b.n	80023a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	4b7b      	ldr	r3, [pc, #492]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d908      	bls.n	80020ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020b8:	4b78      	ldr	r3, [pc, #480]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4975      	ldr	r1, [pc, #468]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	4b70      	ldr	r3, [pc, #448]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d908      	bls.n	80020f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020e6:	4b6d      	ldr	r3, [pc, #436]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	496a      	ldr	r1, [pc, #424]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d010      	beq.n	8002126 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	4b64      	ldr	r3, [pc, #400]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002110:	429a      	cmp	r2, r3
 8002112:	d908      	bls.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002114:	4b61      	ldr	r3, [pc, #388]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	495e      	ldr	r1, [pc, #376]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002122:	4313      	orrs	r3, r2
 8002124:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d010      	beq.n	8002154 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800213e:	429a      	cmp	r2, r3
 8002140:	d908      	bls.n	8002154 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002142:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4953      	ldr	r1, [pc, #332]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002150:	4313      	orrs	r3, r2
 8002152:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d010      	beq.n	8002182 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	4b4d      	ldr	r3, [pc, #308]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	429a      	cmp	r2, r3
 800216e:	d908      	bls.n	8002182 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b4a      	ldr	r3, [pc, #296]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f023 020f 	bic.w	r2, r3, #15
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4947      	ldr	r1, [pc, #284]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 800217e:	4313      	orrs	r3, r2
 8002180:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d055      	beq.n	800223a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800218e:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	4940      	ldr	r1, [pc, #256]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 800219c:	4313      	orrs	r3, r2
 800219e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a8:	4b3c      	ldr	r3, [pc, #240]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d121      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0f6      	b.n	80023a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d115      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0ea      	b.n	80023a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0de      	b.n	80023a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d6      	b.n	80023a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f8:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f023 0207 	bic.w	r2, r3, #7
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4925      	ldr	r1, [pc, #148]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002206:	4313      	orrs	r3, r2
 8002208:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800220a:	f7fe ff27 	bl	800105c <HAL_GetTick>
 800220e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002210:	e00a      	b.n	8002228 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002212:	f7fe ff23 	bl	800105c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0be      	b.n	80023a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	429a      	cmp	r2, r3
 8002238:	d1eb      	bne.n	8002212 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	429a      	cmp	r2, r3
 8002254:	d208      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f023 020f 	bic.w	r2, r3, #15
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	490e      	ldr	r1, [pc, #56]	; (800229c <HAL_RCC_ClockConfig+0x244>)
 8002264:	4313      	orrs	r3, r2
 8002266:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_ClockConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d214      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 020f 	bic.w	r2, r3, #15
 800227e:	4906      	ldr	r1, [pc, #24]	; (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e086      	b.n	80023a6 <HAL_RCC_ClockConfig+0x34e>
 8002298:	52002000 	.word	0x52002000
 800229c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d010      	beq.n	80022ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d208      	bcs.n	80022ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022bc:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	4939      	ldr	r1, [pc, #228]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d010      	beq.n	80022fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d208      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022ea:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	492e      	ldr	r1, [pc, #184]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d010      	beq.n	800232a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002314:	429a      	cmp	r2, r3
 8002316:	d208      	bcs.n	800232a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4922      	ldr	r1, [pc, #136]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 8002326:	4313      	orrs	r3, r2
 8002328:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b00      	cmp	r3, #0
 8002334:	d010      	beq.n	8002358 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002342:	429a      	cmp	r2, r3
 8002344:	d208      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4917      	ldr	r1, [pc, #92]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 8002354:	4313      	orrs	r3, r2
 8002356:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002358:	f000 f89e 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	4912      	ldr	r1, [pc, #72]	; (80023b4 <HAL_RCC_ClockConfig+0x35c>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_RCC_ClockConfig+0x358>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <HAL_RCC_ClockConfig+0x35c>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x360>)
 800238e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002390:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_RCC_ClockConfig+0x364>)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x368>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fe14 	bl	8000fc8 <HAL_InitTick>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	58024400 	.word	0x58024400
 80023b4:	0800b49c 	.word	0x0800b49c
 80023b8:	24000004 	.word	0x24000004
 80023bc:	24000000 	.word	0x24000000
 80023c0:	24000008 	.word	0x24000008

080023c4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08c      	sub	sp, #48	; 0x30
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d12a      	bne.n	800242c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80023d6:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 80023d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023dc:	4a2b      	ldr	r2, [pc, #172]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 80023e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80023f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002406:	2300      	movs	r3, #0
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	481f      	ldr	r0, [pc, #124]	; (8002490 <HAL_RCC_MCOConfig+0xcc>)
 8002412:	f7fe ff43 	bl	800129c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	430b      	orrs	r3, r1
 8002424:	4919      	ldr	r1, [pc, #100]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800242a:	e02a      	b.n	8002482 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002432:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800244a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800245c:	2300      	movs	r3, #0
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	480b      	ldr	r0, [pc, #44]	; (8002494 <HAL_RCC_MCOConfig+0xd0>)
 8002468:	f7fe ff18 	bl	800129c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	01d9      	lsls	r1, r3, #7
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	430b      	orrs	r3, r1
 800247c:	4903      	ldr	r1, [pc, #12]	; (800248c <HAL_RCC_MCOConfig+0xc8>)
 800247e:	4313      	orrs	r3, r2
 8002480:	610b      	str	r3, [r1, #16]
}
 8002482:	bf00      	nop
 8002484:	3730      	adds	r7, #48	; 0x30
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	58024400 	.word	0x58024400
 8002490:	58020000 	.word	0x58020000
 8002494:	58020800 	.word	0x58020800

08002498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800249e:	4bb3      	ldr	r3, [pc, #716]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024a6:	2b18      	cmp	r3, #24
 80024a8:	f200 8155 	bhi.w	8002756 <HAL_RCC_GetSysClockFreq+0x2be>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	08002519 	.word	0x08002519
 80024b8:	08002757 	.word	0x08002757
 80024bc:	08002757 	.word	0x08002757
 80024c0:	08002757 	.word	0x08002757
 80024c4:	08002757 	.word	0x08002757
 80024c8:	08002757 	.word	0x08002757
 80024cc:	08002757 	.word	0x08002757
 80024d0:	08002757 	.word	0x08002757
 80024d4:	0800253f 	.word	0x0800253f
 80024d8:	08002757 	.word	0x08002757
 80024dc:	08002757 	.word	0x08002757
 80024e0:	08002757 	.word	0x08002757
 80024e4:	08002757 	.word	0x08002757
 80024e8:	08002757 	.word	0x08002757
 80024ec:	08002757 	.word	0x08002757
 80024f0:	08002757 	.word	0x08002757
 80024f4:	08002545 	.word	0x08002545
 80024f8:	08002757 	.word	0x08002757
 80024fc:	08002757 	.word	0x08002757
 8002500:	08002757 	.word	0x08002757
 8002504:	08002757 	.word	0x08002757
 8002508:	08002757 	.word	0x08002757
 800250c:	08002757 	.word	0x08002757
 8002510:	08002757 	.word	0x08002757
 8002514:	0800254b 	.word	0x0800254b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002518:	4b94      	ldr	r3, [pc, #592]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002524:	4b91      	ldr	r3, [pc, #580]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	4a90      	ldr	r2, [pc, #576]	; (8002770 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002536:	e111      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002538:	4b8d      	ldr	r3, [pc, #564]	; (8002770 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800253a:	61bb      	str	r3, [r7, #24]
      break;
 800253c:	e10e      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800253e:	4b8d      	ldr	r3, [pc, #564]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002540:	61bb      	str	r3, [r7, #24]
      break;
 8002542:	e10b      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002544:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002546:	61bb      	str	r3, [r7, #24]
      break;
 8002548:	e108      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800254a:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002554:	4b85      	ldr	r3, [pc, #532]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800255e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002560:	4b82      	ldr	r3, [pc, #520]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800256a:	4b80      	ldr	r3, [pc, #512]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002582:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80e1 	beq.w	8002750 <HAL_RCC_GetSysClockFreq+0x2b8>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b02      	cmp	r3, #2
 8002592:	f000 8083 	beq.w	800269c <HAL_RCC_GetSysClockFreq+0x204>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b02      	cmp	r3, #2
 800259a:	f200 80a1 	bhi.w	80026e0 <HAL_RCC_GetSysClockFreq+0x248>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x114>
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d056      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025aa:	e099      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025ac:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d02d      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025b8:	4b6c      	ldr	r3, [pc, #432]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	4a6b      	ldr	r2, [pc, #428]	; (8002770 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025e2:	4b62      	ldr	r3, [pc, #392]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800277c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800260a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002612:	e087      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002780 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002626:	4b51      	ldr	r3, [pc, #324]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002636:	ed97 6a02 	vldr	s12, [r7, #8]
 800263a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800277c <HAL_RCC_GetSysClockFreq+0x2e4>
 800263e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800264a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002656:	e065      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	ee07 3a90 	vmov	s15, r3
 800265e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002662:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002784 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800267a:	ed97 6a02 	vldr	s12, [r7, #8]
 800267e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800277c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800268a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800268e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002696:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800269a:	e043      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002788 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ae:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026be:	ed97 6a02 	vldr	s12, [r7, #8]
 80026c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800277c <HAL_RCC_GetSysClockFreq+0x2e4>
 80026c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026de:	e021      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002784 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002702:	ed97 6a02 	vldr	s12, [r7, #8]
 8002706:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800277c <HAL_RCC_GetSysClockFreq+0x2e4>
 800270a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800270e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800271a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002722:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	0a5b      	lsrs	r3, r3, #9
 800272a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800272e:	3301      	adds	r3, #1
 8002730:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800273c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002748:	ee17 3a90 	vmov	r3, s15
 800274c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800274e:	e005      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	61bb      	str	r3, [r7, #24]
      break;
 8002754:	e002      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002758:	61bb      	str	r3, [r7, #24]
      break;
 800275a:	bf00      	nop
  }

  return sysclockfreq;
 800275c:	69bb      	ldr	r3, [r7, #24]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	58024400 	.word	0x58024400
 8002770:	03d09000 	.word	0x03d09000
 8002774:	003d0900 	.word	0x003d0900
 8002778:	017d7840 	.word	0x017d7840
 800277c:	46000000 	.word	0x46000000
 8002780:	4c742400 	.word	0x4c742400
 8002784:	4a742400 	.word	0x4a742400
 8002788:	4bbebc20 	.word	0x4bbebc20

0800278c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002792:	f7ff fe81 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8002796:	4602      	mov	r2, r0
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCC_GetHCLKFreq+0x50>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	490f      	ldr	r1, [pc, #60]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80027a4:	5ccb      	ldrb	r3, [r1, r3]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_RCC_GetHCLKFreq+0x50>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80027c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027ca:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	58024400 	.word	0x58024400
 80027e0:	0800b49c 	.word	0x0800b49c
 80027e4:	24000004 	.word	0x24000004
 80027e8:	24000000 	.word	0x24000000

080027ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027f0:	f7ff ffcc 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4904      	ldr	r1, [pc, #16]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	58024400 	.word	0x58024400
 8002814:	0800b49c 	.word	0x0800b49c

08002818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800281c:	f7ff ffb6 	bl	800278c <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4904      	ldr	r1, [pc, #16]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x28>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	58024400 	.word	0x58024400
 8002840:	0800b49c 	.word	0x0800b49c

08002844 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002848:	b0cc      	sub	sp, #304	; 0x130
 800284a:	af00      	add	r7, sp, #0
 800284c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002850:	2300      	movs	r3, #0
 8002852:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002856:	2300      	movs	r3, #0
 8002858:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800285c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002868:	2500      	movs	r5, #0
 800286a:	ea54 0305 	orrs.w	r3, r4, r5
 800286e:	d049      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002870:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002876:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800287a:	d02f      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800287c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002880:	d828      	bhi.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002886:	d01a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800288c:	d822      	bhi.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002896:	d007      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002898:	e01c      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289a:	4bb8      	ldr	r3, [pc, #736]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	4ab7      	ldr	r2, [pc, #732]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028a6:	e01a      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028ac:	3308      	adds	r3, #8
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fba1 	bl	8004ff8 <RCCEx_PLL2_Config>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028bc:	e00f      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80028be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028c2:	3328      	adds	r3, #40	; 0x28
 80028c4:	2102      	movs	r1, #2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fc48 	bl	800515c <RCCEx_PLL3_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028d2:	e004      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80028da:	e000      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028e6:	4ba5      	ldr	r3, [pc, #660]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80028ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f4:	4aa1      	ldr	r2, [pc, #644]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f6:	430b      	orrs	r3, r1
 80028f8:	6513      	str	r3, [r2, #80]	; 0x50
 80028fa:	e003      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002900:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002904:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002910:	f04f 0900 	mov.w	r9, #0
 8002914:	ea58 0309 	orrs.w	r3, r8, r9
 8002918:	d047      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800291a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	2b04      	cmp	r3, #4
 8002922:	d82a      	bhi.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002924:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292a:	bf00      	nop
 800292c:	08002941 	.word	0x08002941
 8002930:	0800294f 	.word	0x0800294f
 8002934:	08002965 	.word	0x08002965
 8002938:	08002983 	.word	0x08002983
 800293c:	08002983 	.word	0x08002983
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002940:	4b8e      	ldr	r3, [pc, #568]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	4a8d      	ldr	r2, [pc, #564]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800294c:	e01a      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800294e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002952:	3308      	adds	r3, #8
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f002 fb4e 	bl	8004ff8 <RCCEx_PLL2_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002962:	e00f      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002964:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002968:	3328      	adds	r3, #40	; 0x28
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f002 fbf5 	bl	800515c <RCCEx_PLL3_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002978:	e004      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002980:	e000      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002984:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800298c:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	f023 0107 	bic.w	r1, r3, #7
 8002994:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	4a78      	ldr	r2, [pc, #480]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800299c:	430b      	orrs	r3, r1
 800299e:	6513      	str	r3, [r2, #80]	; 0x50
 80029a0:	e003      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80029b6:	f04f 0b00 	mov.w	fp, #0
 80029ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80029be:	d04c      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80029c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ca:	d030      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80029cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d0:	d829      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029d2:	2bc0      	cmp	r3, #192	; 0xc0
 80029d4:	d02d      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029d6:	2bc0      	cmp	r3, #192	; 0xc0
 80029d8:	d825      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d018      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029de:	2b80      	cmp	r3, #128	; 0x80
 80029e0:	d821      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d007      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80029ea:	e01c      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ec:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	4a62      	ldr	r2, [pc, #392]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029f8:	e01c      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029fe:	3308      	adds	r3, #8
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 faf8 	bl	8004ff8 <RCCEx_PLL2_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a0e:	e011      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a14:	3328      	adds	r3, #40	; 0x28
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f002 fb9f 	bl	800515c <RCCEx_PLL3_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a24:	e006      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002a2c:	e002      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a3c:	4b4f      	ldr	r3, [pc, #316]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a40:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	4a4c      	ldr	r2, [pc, #304]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6513      	str	r3, [r2, #80]	; 0x50
 8002a50:	e003      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002a66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a70:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002a74:	460b      	mov	r3, r1
 8002a76:	4313      	orrs	r3, r2
 8002a78:	d053      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a86:	d035      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a8c:	d82e      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a92:	d031      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a98:	d828      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9e:	d01a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa4:	d822      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aae:	d007      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002ab0:	e01c      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ab2:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002abe:	e01c      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 fa95 	bl	8004ff8 <RCCEx_PLL2_Config>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ad4:	e011      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ada:	3328      	adds	r3, #40	; 0x28
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 fb3c 	bl	800515c <RCCEx_PLL3_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002aea:	e006      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002af2:	e002      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002af4:	bf00      	nop
 8002af6:	e000      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002afa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b02:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6593      	str	r3, [r2, #88]	; 0x58
 8002b18:	e003      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b1e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002b2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002b38:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	d056      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4e:	d038      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b54:	d831      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b5a:	d034      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b60:	d82b      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b66:	d01d      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6c:	d825      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b78:	e01f      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b7a:	bf00      	nop
 8002b7c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b80:	4ba2      	ldr	r3, [pc, #648]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	4aa1      	ldr	r2, [pc, #644]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b8c:	e01c      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b92:	3308      	adds	r3, #8
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fa2e 	bl	8004ff8 <RCCEx_PLL2_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ba2:	e011      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ba8:	3328      	adds	r3, #40	; 0x28
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f002 fad5 	bl	800515c <RCCEx_PLL3_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bb8:	e006      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bd0:	4b8e      	ldr	r3, [pc, #568]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002be0:	4a8a      	ldr	r2, [pc, #552]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002be2:	430b      	orrs	r3, r1
 8002be4:	6593      	str	r3, [r2, #88]	; 0x58
 8002be6:	e003      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bec:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002bfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c06:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	d03a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	2b30      	cmp	r3, #48	; 0x30
 8002c18:	d01f      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c1a:	2b30      	cmp	r3, #48	; 0x30
 8002c1c:	d819      	bhi.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d00c      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d815      	bhi.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d111      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2e:	4b77      	ldr	r3, [pc, #476]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	4a76      	ldr	r2, [pc, #472]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c3a:	e011      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c40:	3308      	adds	r3, #8
 8002c42:	2102      	movs	r1, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f002 f9d7 	bl	8004ff8 <RCCEx_PLL2_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c50:	e006      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c58:	e002      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c60:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7c:	e003      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c82:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002c92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002c9c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	d051      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb0:	d035      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb6:	d82e      	bhi.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cbc:	d031      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cc2:	d828      	bhi.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc8:	d01a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cce:	d822      	bhi.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd8:	d007      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002cda:	e01c      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ce8:	e01c      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cee:	3308      	adds	r3, #8
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 f980 	bl	8004ff8 <RCCEx_PLL2_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cfe:	e011      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d04:	3328      	adds	r3, #40	; 0x28
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 fa27 	bl	800515c <RCCEx_PLL3_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d14:	e006      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d1c:	e002      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d24:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d2c:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d3a:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d40:	e003      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d42:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d46:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002d56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4313      	orrs	r3, r2
 8002d68:	d056      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d74:	d033      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d7a:	d82c      	bhi.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d80:	d02f      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d86:	d826      	bhi.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d8c:	d02b      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d92:	d820      	bhi.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d98:	d012      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d9e:	d81a      	bhi.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d022      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da8:	d115      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dae:	3308      	adds	r3, #8
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f002 f920 	bl	8004ff8 <RCCEx_PLL2_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dbe:	e015      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dc4:	3328      	adds	r3, #40	; 0x28
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 f9c7 	bl	800515c <RCCEx_PLL3_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dd4:	e00a      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ddc:	e006      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dde:	bf00      	nop
 8002de0:	e004      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002de2:	bf00      	nop
 8002de4:	e002      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10d      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002dfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e02:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6513      	str	r3, [r2, #80]	; 0x50
 8002e08:	e006      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e0a:	bf00      	nop
 8002e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e14:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002e24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002e2e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002e32:	460b      	mov	r3, r1
 8002e34:	4313      	orrs	r3, r2
 8002e36:	d055      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e44:	d033      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e4a:	d82c      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d02f      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e56:	d826      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e5c:	d02b      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e62:	d820      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e68:	d012      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e6e:	d81a      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d022      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e7e:	3308      	adds	r3, #8
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f002 f8b8 	bl	8004ff8 <RCCEx_PLL2_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e8e:	e015      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e94:	3328      	adds	r3, #40	; 0x28
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f002 f95f 	bl	800515c <RCCEx_PLL3_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002eac:	e006      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eae:	bf00      	nop
 8002eb0:	e004      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ebc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ec4:	4bb6      	ldr	r3, [pc, #728]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ed4:	4ab2      	ldr	r2, [pc, #712]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eda:	e003      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002edc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ee0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002efa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4313      	orrs	r3, r2
 8002f02:	d02a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d011      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f12:	d10a      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f18:	3308      	adds	r3, #8
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f002 f86b 	bl	8004ff8 <RCCEx_PLL2_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002f28:	e004      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f30:	e000      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002f3c:	4b98      	ldr	r3, [pc, #608]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4a:	4a95      	ldr	r2, [pc, #596]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002f70:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f74:	460b      	mov	r3, r1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	d037      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f84:	d00e      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f8a:	d816      	bhi.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d018      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002f90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f94:	d111      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f96:	4b82      	ldr	r3, [pc, #520]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	4a81      	ldr	r2, [pc, #516]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fa2:	e00f      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fa8:	3308      	adds	r3, #8
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 f823 	bl	8004ff8 <RCCEx_PLL2_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fb8:	e004      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fcc:	4b74      	ldr	r3, [pc, #464]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fda:	4a71      	ldr	r2, [pc, #452]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6513      	str	r3, [r2, #80]	; 0x50
 8002fe0:	e003      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fe6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002ff6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003000:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003004:	460b      	mov	r3, r1
 8003006:	4313      	orrs	r3, r2
 8003008:	d03a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800300a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800300e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003010:	2b03      	cmp	r3, #3
 8003012:	d81d      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003059 	.word	0x08003059
 8003020:	0800302d 	.word	0x0800302d
 8003024:	0800303b 	.word	0x0800303b
 8003028:	08003059 	.word	0x08003059
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302c:	4b5c      	ldr	r3, [pc, #368]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	4a5b      	ldr	r2, [pc, #364]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003038:	e00f      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800303a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800303e:	3308      	adds	r3, #8
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f001 ffd8 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800304e:	e004      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003062:	4b4f      	ldr	r3, [pc, #316]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	f023 0103 	bic.w	r1, r3, #3
 800306a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800306e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003070:	4a4b      	ldr	r2, [pc, #300]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003072:	430b      	orrs	r3, r1
 8003074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003076:	e003      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800307c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003080:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800308c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003096:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800309a:	460b      	mov	r3, r1
 800309c:	4313      	orrs	r3, r2
 800309e:	f000 80a0 	beq.w	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a2:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3f      	ldr	r2, [pc, #252]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ae:	f7fd ffd5 	bl	800105c <HAL_GetTick>
 80030b2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b6:	e00b      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fd ffd0 	bl	800105c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b64      	cmp	r3, #100	; 0x64
 80030c6:	d903      	bls.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030ce:	e005      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d0:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ed      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80030dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d17a      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030e4:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80030f0:	4053      	eors	r3, r2
 80030f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d015      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003102:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800311e:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003120:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003126:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800312a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800312e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003132:	d118      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fd ff92 	bl	800105c <HAL_GetTick>
 8003138:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800313c:	e00d      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fd ff8d 	bl	800105c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003148:	1ad2      	subs	r2, r2, r3
 800314a:	f241 3388 	movw	r3, #5000	; 0x1388
 800314e:	429a      	cmp	r2, r3
 8003150:	d903      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8003158:	e005      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0eb      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003166:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800316a:	2b00      	cmp	r3, #0
 800316c:	d130      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003172:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317e:	d115      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003188:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800318c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003190:	091a      	lsrs	r2, r3, #4
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003194:	4013      	ands	r3, r2
 8003196:	4a02      	ldr	r2, [pc, #8]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003198:	430b      	orrs	r3, r1
 800319a:	6113      	str	r3, [r2, #16]
 800319c:	e00c      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800319e:	bf00      	nop
 80031a0:	58024400 	.word	0x58024400
 80031a4:	58024800 	.word	0x58024800
 80031a8:	00ffffcf 	.word	0x00ffffcf
 80031ac:	4bd4      	ldr	r3, [pc, #848]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4ad3      	ldr	r2, [pc, #844]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031b6:	6113      	str	r3, [r2, #16]
 80031b8:	4bd1      	ldr	r3, [pc, #836]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80031bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	4acd      	ldr	r2, [pc, #820]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031ca:	430b      	orrs	r3, r1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	e008      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031d4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80031d8:	e003      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f002 0301 	and.w	r3, r2, #1
 80031ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4313      	orrs	r3, r2
 8003200:	f000 808b 	beq.w	800331a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003204:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320c:	2b28      	cmp	r3, #40	; 0x28
 800320e:	d86b      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	080032f1 	.word	0x080032f1
 800321c:	080032e9 	.word	0x080032e9
 8003220:	080032e9 	.word	0x080032e9
 8003224:	080032e9 	.word	0x080032e9
 8003228:	080032e9 	.word	0x080032e9
 800322c:	080032e9 	.word	0x080032e9
 8003230:	080032e9 	.word	0x080032e9
 8003234:	080032e9 	.word	0x080032e9
 8003238:	080032bd 	.word	0x080032bd
 800323c:	080032e9 	.word	0x080032e9
 8003240:	080032e9 	.word	0x080032e9
 8003244:	080032e9 	.word	0x080032e9
 8003248:	080032e9 	.word	0x080032e9
 800324c:	080032e9 	.word	0x080032e9
 8003250:	080032e9 	.word	0x080032e9
 8003254:	080032e9 	.word	0x080032e9
 8003258:	080032d3 	.word	0x080032d3
 800325c:	080032e9 	.word	0x080032e9
 8003260:	080032e9 	.word	0x080032e9
 8003264:	080032e9 	.word	0x080032e9
 8003268:	080032e9 	.word	0x080032e9
 800326c:	080032e9 	.word	0x080032e9
 8003270:	080032e9 	.word	0x080032e9
 8003274:	080032e9 	.word	0x080032e9
 8003278:	080032f1 	.word	0x080032f1
 800327c:	080032e9 	.word	0x080032e9
 8003280:	080032e9 	.word	0x080032e9
 8003284:	080032e9 	.word	0x080032e9
 8003288:	080032e9 	.word	0x080032e9
 800328c:	080032e9 	.word	0x080032e9
 8003290:	080032e9 	.word	0x080032e9
 8003294:	080032e9 	.word	0x080032e9
 8003298:	080032f1 	.word	0x080032f1
 800329c:	080032e9 	.word	0x080032e9
 80032a0:	080032e9 	.word	0x080032e9
 80032a4:	080032e9 	.word	0x080032e9
 80032a8:	080032e9 	.word	0x080032e9
 80032ac:	080032e9 	.word	0x080032e9
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	080032f1 	.word	0x080032f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032c0:	3308      	adds	r3, #8
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 fe97 	bl	8004ff8 <RCCEx_PLL2_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032d0:	e00f      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032d6:	3328      	adds	r3, #40	; 0x28
 80032d8:	2101      	movs	r1, #1
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 ff3e 	bl	800515c <RCCEx_PLL3_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032e6:	e004      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80032ee:	e000      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80032f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10b      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80032fa:	4b81      	ldr	r3, [pc, #516]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003302:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330a:	4a7d      	ldr	r2, [pc, #500]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800330c:	430b      	orrs	r3, r1
 800330e:	6553      	str	r3, [r2, #84]	; 0x54
 8003310:	e003      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003312:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003316:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800331a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f002 0302 	and.w	r3, r2, #2
 8003326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003330:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003334:	460b      	mov	r3, r1
 8003336:	4313      	orrs	r3, r2
 8003338:	d042      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800333a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800333e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003340:	2b05      	cmp	r3, #5
 8003342:	d825      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003399 	.word	0x08003399
 8003350:	08003365 	.word	0x08003365
 8003354:	0800337b 	.word	0x0800337b
 8003358:	08003399 	.word	0x08003399
 800335c:	08003399 	.word	0x08003399
 8003360:	08003399 	.word	0x08003399
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003364:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003368:	3308      	adds	r3, #8
 800336a:	2101      	movs	r1, #1
 800336c:	4618      	mov	r0, r3
 800336e:	f001 fe43 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003378:	e00f      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800337a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800337e:	3328      	adds	r3, #40	; 0x28
 8003380:	2101      	movs	r1, #1
 8003382:	4618      	mov	r0, r3
 8003384:	f001 feea 	bl	800515c <RCCEx_PLL3_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800338e:	e004      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033a2:	4b57      	ldr	r3, [pc, #348]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f023 0107 	bic.w	r1, r3, #7
 80033aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b0:	4a53      	ldr	r2, [pc, #332]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033b2:	430b      	orrs	r3, r1
 80033b4:	6553      	str	r3, [r2, #84]	; 0x54
 80033b6:	e003      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033bc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f002 0304 	and.w	r3, r2, #4
 80033cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80033da:	460b      	mov	r3, r1
 80033dc:	4313      	orrs	r3, r2
 80033de:	d044      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80033e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d825      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80033ec:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f2:	bf00      	nop
 80033f4:	08003441 	.word	0x08003441
 80033f8:	0800340d 	.word	0x0800340d
 80033fc:	08003423 	.word	0x08003423
 8003400:	08003441 	.word	0x08003441
 8003404:	08003441 	.word	0x08003441
 8003408:	08003441 	.word	0x08003441
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800340c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003410:	3308      	adds	r3, #8
 8003412:	2101      	movs	r1, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fdef 	bl	8004ff8 <RCCEx_PLL2_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003420:	e00f      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003422:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003426:	3328      	adds	r3, #40	; 0x28
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f001 fe96 	bl	800515c <RCCEx_PLL3_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003436:	e004      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800343e:	e000      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003442:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	f023 0107 	bic.w	r1, r3, #7
 8003452:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800345a:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800345c:	430b      	orrs	r3, r1
 800345e:	6593      	str	r3, [r2, #88]	; 0x58
 8003460:	e003      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003462:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003466:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800346a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f002 0320 	and.w	r3, r2, #32
 8003476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003484:	460b      	mov	r3, r1
 8003486:	4313      	orrs	r3, r2
 8003488:	d057      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800348a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800348e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003496:	d035      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800349c:	d82c      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800349e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a2:	d031      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d826      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034ae:	d02d      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80034b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034b4:	d820      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ba:	d012      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80034bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c0:	d81a      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d024      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80034c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ca:	d115      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034d0:	3308      	adds	r3, #8
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 fd8f 	bl	8004ff8 <RCCEx_PLL2_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034e0:	e017      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034e6:	3328      	adds	r3, #40	; 0x28
 80034e8:	2102      	movs	r1, #2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 fe36 	bl	800515c <RCCEx_PLL3_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034f6:	e00c      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80034fe:	e008      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003500:	58024400 	.word	0x58024400
        break;
 8003504:	bf00      	nop
 8003506:	e004      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003508:	bf00      	nop
 800350a:	e002      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003512:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10b      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800351a:	4bc2      	ldr	r3, [pc, #776]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003522:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352a:	4abe      	ldr	r2, [pc, #760]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800352c:	430b      	orrs	r3, r1
 800352e:	6553      	str	r3, [r2, #84]	; 0x54
 8003530:	e003      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003532:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003536:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800353a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003550:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003554:	460b      	mov	r3, r1
 8003556:	4313      	orrs	r3, r2
 8003558:	d055      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800355a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800355e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003562:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003566:	d033      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003568:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800356c:	d82c      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d02f      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003578:	d826      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800357a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800357e:	d02b      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003584:	d820      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d012      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800358c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003590:	d81a      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d022      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359a:	d115      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800359c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035a0:	3308      	adds	r3, #8
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fd27 	bl	8004ff8 <RCCEx_PLL2_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035b0:	e015      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035b6:	3328      	adds	r3, #40	; 0x28
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 fdce 	bl	800515c <RCCEx_PLL3_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035c6:	e00a      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80035ce:	e006      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035d0:	bf00      	nop
 80035d2:	e004      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035e6:	4b8f      	ldr	r3, [pc, #572]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80035ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035f6:	4a8b      	ldr	r2, [pc, #556]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6593      	str	r3, [r2, #88]	; 0x58
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003602:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003616:	2300      	movs	r3, #0
 8003618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800361c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003620:	460b      	mov	r3, r1
 8003622:	4313      	orrs	r3, r2
 8003624:	d055      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003626:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800362a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800362e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003632:	d033      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003634:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003638:	d82c      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	d02f      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	d826      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003646:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800364a:	d02b      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800364c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003650:	d820      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003656:	d012      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800365c:	d81a      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d022      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003666:	d115      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800366c:	3308      	adds	r3, #8
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f001 fcc1 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800367c:	e015      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800367e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003682:	3328      	adds	r3, #40	; 0x28
 8003684:	2102      	movs	r1, #2
 8003686:	4618      	mov	r0, r3
 8003688:	f001 fd68 	bl	800515c <RCCEx_PLL3_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003692:	e00a      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800369a:	e006      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800369c:	bf00      	nop
 800369e:	e004      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80036a0:	bf00      	nop
 80036a2:	e002      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80036a4:	bf00      	nop
 80036a6:	e000      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80036a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10b      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80036b2:	4b5c      	ldr	r3, [pc, #368]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80036ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036c2:	4a58      	ldr	r2, [pc, #352]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6593      	str	r3, [r2, #88]	; 0x58
 80036c8:	e003      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80036d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	f002 0308 	and.w	r3, r2, #8
 80036de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036e8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80036ec:	460b      	mov	r3, r1
 80036ee:	4313      	orrs	r3, r2
 80036f0:	d01e      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80036f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fe:	d10c      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003700:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003704:	3328      	adds	r3, #40	; 0x28
 8003706:	2102      	movs	r1, #2
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fd27 	bl	800515c <RCCEx_PLL3_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800371a:	4b42      	ldr	r3, [pc, #264]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003722:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	4a3e      	ldr	r2, [pc, #248]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800372c:	430b      	orrs	r3, r1
 800372e:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003730:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f002 0310 	and.w	r3, r2, #16
 800373c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003746:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800374a:	460b      	mov	r3, r1
 800374c:	4313      	orrs	r3, r2
 800374e:	d01e      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003750:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375c:	d10c      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800375e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003762:	3328      	adds	r3, #40	; 0x28
 8003764:	2102      	movs	r1, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fcf8 	bl	800515c <RCCEx_PLL3_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003780:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003784:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800378a:	430b      	orrs	r3, r1
 800378c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800378e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800379a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037a4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80037a8:	460b      	mov	r3, r1
 80037aa:	4313      	orrs	r3, r2
 80037ac:	d040      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80037ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ba:	d022      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80037bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c0:	d81b      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d00b      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80037cc:	e015      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037d2:	3308      	adds	r3, #8
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 fc0e 	bl	8004ff8 <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037e2:	e00f      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037e8:	3328      	adds	r3, #40	; 0x28
 80037ea:	2102      	movs	r1, #2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 fcb5 	bl	800515c <RCCEx_PLL3_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037f8:	e004      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003800:	e000      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003804:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10d      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003814:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003818:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800381c:	4a01      	ldr	r2, [pc, #4]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800381e:	430b      	orrs	r3, r1
 8003820:	6593      	str	r3, [r2, #88]	; 0x58
 8003822:	e005      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800382c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003830:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800383c:	67bb      	str	r3, [r7, #120]	; 0x78
 800383e:	2300      	movs	r3, #0
 8003840:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003842:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003846:	460b      	mov	r3, r1
 8003848:	4313      	orrs	r3, r2
 800384a:	d03b      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800384c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003858:	d01f      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800385a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800385e:	d818      	bhi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003864:	d003      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800386a:	d007      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800386c:	e011      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386e:	4b64      	ldr	r3, [pc, #400]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4a63      	ldr	r2, [pc, #396]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800387a:	e00f      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800387c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003880:	3328      	adds	r3, #40	; 0x28
 8003882:	2101      	movs	r1, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f001 fc69 	bl	800515c <RCCEx_PLL3_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003890:	e004      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003898:	e000      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800389a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038a4:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80038ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b4:	4a52      	ldr	r2, [pc, #328]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038b6:	430b      	orrs	r3, r1
 80038b8:	6553      	str	r3, [r2, #84]	; 0x54
 80038ba:	e003      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038c0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80038d0:	673b      	str	r3, [r7, #112]	; 0x70
 80038d2:	2300      	movs	r3, #0
 80038d4:	677b      	str	r3, [r7, #116]	; 0x74
 80038d6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d031      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80038e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80038ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ee:	d007      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80038f0:	e011      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f2:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	4a42      	ldr	r2, [pc, #264]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038fe:	e00e      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003900:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003904:	3308      	adds	r3, #8
 8003906:	2102      	movs	r1, #2
 8003908:	4618      	mov	r0, r3
 800390a:	f001 fb75 	bl	8004ff8 <RCCEx_PLL2_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800391c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003926:	4b36      	ldr	r3, [pc, #216]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800392e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	4a32      	ldr	r2, [pc, #200]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003936:	430b      	orrs	r3, r1
 8003938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393a:	e003      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003940:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003944:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003950:	66bb      	str	r3, [r7, #104]	; 0x68
 8003952:	2300      	movs	r3, #0
 8003954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003956:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	d00c      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003960:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003964:	3328      	adds	r3, #40	; 0x28
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fbf7 	bl	800515c <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800397a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003986:	663b      	str	r3, [r7, #96]	; 0x60
 8003988:	2300      	movs	r3, #0
 800398a:	667b      	str	r3, [r7, #100]	; 0x64
 800398c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003990:	460b      	mov	r3, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	d03a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003996:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a2:	d018      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80039a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a8:	d811      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80039aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ae:	d014      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80039b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b4:	d80b      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d011      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039be:	d106      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80039cc:	e008      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80039d4:	e004      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80039de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f8:	4a01      	ldr	r2, [pc, #4]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6553      	str	r3, [r2, #84]	; 0x54
 80039fe:	e005      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a08:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a28:	4baa      	ldr	r3, [pc, #680]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a36:	4aa7      	ldr	r2, [pc, #668]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003a48:	653b      	str	r3, [r7, #80]	; 0x50
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a58:	4b9e      	ldr	r3, [pc, #632]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003a68:	4a9a      	ldr	r2, [pc, #616]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003a84:	460b      	mov	r3, r1
 8003a86:	4313      	orrs	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a8a:	4b92      	ldr	r3, [pc, #584]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a8e      	ldr	r2, [pc, #568]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8003aac:	2300      	movs	r3, #0
 8003aae:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	d00e      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aba:	4b86      	ldr	r3, [pc, #536]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	4a85      	ldr	r2, [pc, #532]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ac0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ac4:	6113      	str	r3, [r2, #16]
 8003ac6:	4b83      	ldr	r3, [pc, #524]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ac8:	6919      	ldr	r1, [r3, #16]
 8003aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ace:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ad2:	4a80      	ldr	r2, [pc, #512]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003aee:	460b      	mov	r3, r1
 8003af0:	4313      	orrs	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003af4:	4b77      	ldr	r3, [pc, #476]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	4a74      	ldr	r2, [pc, #464]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003b14:	633b      	str	r3, [r7, #48]	; 0x30
 8003b16:	2300      	movs	r3, #0
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4313      	orrs	r3, r2
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b24:	4b6b      	ldr	r3, [pc, #428]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	4a67      	ldr	r2, [pc, #412]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	2100      	movs	r1, #0
 8003b44:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003b50:	460b      	mov	r3, r1
 8003b52:	4313      	orrs	r3, r2
 8003b54:	d011      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 fa4a 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003b6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b76:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	2100      	movs	r1, #0
 8003b84:	6239      	str	r1, [r7, #32]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b90:	460b      	mov	r3, r1
 8003b92:	4313      	orrs	r3, r2
 8003b94:	d011      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fa2a 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003baa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bb6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	61b9      	str	r1, [r7, #24]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	d011      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bda:	3308      	adds	r3, #8
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 fa0a 	bl	8004ff8 <RCCEx_PLL2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003bea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bf6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	2100      	movs	r1, #0
 8003c04:	6139      	str	r1, [r7, #16]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c10:	460b      	mov	r3, r1
 8003c12:	4313      	orrs	r3, r2
 8003c14:	d011      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c1a:	3328      	adds	r3, #40	; 0x28
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 fa9c 	bl	800515c <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8003c2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c36:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	2100      	movs	r1, #0
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c50:	460b      	mov	r3, r1
 8003c52:	4313      	orrs	r3, r2
 8003c54:	d011      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c5a:	3328      	adds	r3, #40	; 0x28
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 fa7c 	bl	800515c <RCCEx_PLL3_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003c6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c76:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	2100      	movs	r1, #0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c90:	460b      	mov	r3, r1
 8003c92:	4313      	orrs	r3, r2
 8003c94:	d011      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c9a:	3328      	adds	r3, #40	; 0x28
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 fa5c 	bl	800515c <RCCEx_PLL3_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003caa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cb6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8003cba:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd4:	58024400 	.word	0x58024400

08003cd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b090      	sub	sp, #64	; 0x40
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8003cea:	430b      	orrs	r3, r1
 8003cec:	f040 8094 	bne.w	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8003cf0:	4b9e      	ldr	r3, [pc, #632]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	f200 8087 	bhi.w	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d1d 	.word	0x08003d1d
 8003d0c:	08003d45 	.word	0x08003d45
 8003d10:	08003d6d 	.word	0x08003d6d
 8003d14:	08003e09 	.word	0x08003e09
 8003d18:	08003d95 	.word	0x08003d95
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d1c:	4b93      	ldr	r3, [pc, #588]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d28:	d108      	bne.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 f810 	bl	8004d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d38:	f000 bd45 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d40:	f000 bd41 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003d44:	4b89      	ldr	r3, [pc, #548]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d50:	d108      	bne.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d52:	f107 0318 	add.w	r3, r7, #24
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fd54 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d60:	f000 bd31 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d68:	f000 bd2d 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003d6c:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d78:	d108      	bne.n	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d7a:	f107 030c 	add.w	r3, r7, #12
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fe94 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d88:	f000 bd1d 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d90:	f000 bd19 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003d94:	4b75      	ldr	r3, [pc, #468]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003d9e:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003db0:	4b6e      	ldr	r3, [pc, #440]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	08db      	lsrs	r3, r3, #3
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	4a6d      	ldr	r2, [pc, #436]	; (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc2:	e01f      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003dc4:	4b69      	ldr	r3, [pc, #420]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dd8:	d102      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003dda:	4b66      	ldr	r3, [pc, #408]	; (8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dde:	e011      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003de0:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dec:	d106      	bne.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df4:	d102      	bne.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003df6:	4b60      	ldr	r3, [pc, #384]	; (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dfa:	e003      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003e00:	f000 bce1 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003e04:	f000 bcdf 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003e08:	4b5c      	ldr	r3, [pc, #368]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e0c:	f000 bcdb 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e14:	f000 bcd7 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e1c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8003e20:	430b      	orrs	r3, r1
 8003e22:	f040 80ad 	bne.w	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8003e26:	4b51      	ldr	r3, [pc, #324]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e36:	d056      	beq.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3e:	f200 8090 	bhi.w	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	2bc0      	cmp	r3, #192	; 0xc0
 8003e46:	f000 8088 	beq.w	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	2bc0      	cmp	r3, #192	; 0xc0
 8003e4e:	f200 8088 	bhi.w	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d032      	beq.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	f200 8081 	bhi.w	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d014      	beq.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8003e6c:	e079      	b.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e6e:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e7a:	d108      	bne.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 ff67 	bl	8004d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e8a:	f000 bc9c 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e92:	f000 bc98 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e96:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea2:	d108      	bne.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ea4:	f107 0318 	add.w	r3, r7, #24
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fcab 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003eb2:	f000 bc88 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003eba:	f000 bc84 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eca:	d108      	bne.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fdeb 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003eda:	f000 bc74 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ee2:	f000 bc70 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003ee6:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003ef0:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d10c      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8003efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f02:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	08db      	lsrs	r3, r3, #3
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f14:	e01f      	b.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f22:	d106      	bne.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8003f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f2a:	d102      	bne.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f30:	e011      	b.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f46:	d102      	bne.n	8003f4e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f4c:	e003      	b.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003f52:	f000 bc38 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003f56:	f000 bc36 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003f5e:	f000 bc32 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003f66:	f000 bc2e 	b.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003f6a:	bf00      	nop
 8003f6c:	58024400 	.word	0x58024400
 8003f70:	03d09000 	.word	0x03d09000
 8003f74:	003d0900 	.word	0x003d0900
 8003f78:	017d7840 	.word	0x017d7840
 8003f7c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f84:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	f040 809c 	bne.w	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8003f8e:	4b9e      	ldr	r3, [pc, #632]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f92:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f9e:	d054      	beq.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fa6:	f200 808b 	bhi.w	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003fb0:	f000 8083 	beq.w	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003fba:	f200 8081 	bhi.w	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc4:	d02f      	beq.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fcc:	d878      	bhi.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fda:	d012      	beq.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8003fdc:	e070      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fde:	4b8a      	ldr	r3, [pc, #552]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fea:	d107      	bne.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 feaf 	bl	8004d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003ffa:	e3e4      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004000:	e3e1      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004002:	4b81      	ldr	r3, [pc, #516]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800400a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400e:	d107      	bne.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004010:	f107 0318 	add.w	r3, r7, #24
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fbf5 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800401e:	e3d2      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004024:	e3cf      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004026:	4b78      	ldr	r3, [pc, #480]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800402e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004032:	d107      	bne.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004034:	f107 030c 	add.w	r3, r7, #12
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fd37 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004042:	e3c0      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004048:	e3bd      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800404a:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800404c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004052:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004054:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b04      	cmp	r3, #4
 800405e:	d10c      	bne.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004066:	4b68      	ldr	r3, [pc, #416]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	08db      	lsrs	r3, r3, #3
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	4a66      	ldr	r2, [pc, #408]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004072:	fa22 f303 	lsr.w	r3, r2, r3
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004078:	e01e      	b.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800407a:	4b63      	ldr	r3, [pc, #396]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004086:	d106      	bne.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408e:	d102      	bne.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004090:	4b5f      	ldr	r3, [pc, #380]	; (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004094:	e010      	b.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004096:	4b5c      	ldr	r3, [pc, #368]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a2:	d106      	bne.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80040a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040aa:	d102      	bne.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80040ac:	4b59      	ldr	r3, [pc, #356]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80040b6:	e386      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80040b8:	e385      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80040ba:	4b57      	ldr	r3, [pc, #348]	; (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80040be:	e382      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80040c4:	e37f      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80040c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ca:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80040ce:	430b      	orrs	r3, r1
 80040d0:	f040 80a7 	bne.w	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80040d4:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040e4:	d055      	beq.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ec:	f200 8096 	bhi.w	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040f6:	f000 8084 	beq.w	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004100:	f200 808c 	bhi.w	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800410a:	d030      	beq.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004112:	f200 8083 	bhi.w	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004122:	d012      	beq.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004124:	e07a      	b.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004132:	d107      	bne.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fe0b 	bl	8004d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004142:	e340      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004148:	e33d      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004156:	d107      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004158:	f107 0318 	add.w	r3, r7, #24
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fb51 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004166:	e32e      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800416c:	e32b      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800416e:	4b26      	ldr	r3, [pc, #152]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417a:	d107      	bne.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800417c:	f107 030c 	add.w	r3, r7, #12
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fc93 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800418a:	e31c      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004190:	e319      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004196:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800419a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80041a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	08db      	lsrs	r3, r3, #3
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	4a14      	ldr	r2, [pc, #80]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80041ba:	fa22 f303 	lsr.w	r3, r2, r3
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c0:	e01e      	b.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ce:	d106      	bne.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80041d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d6:	d102      	bne.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041dc:	e010      	b.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ea:	d106      	bne.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f2:	d102      	bne.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f8:	e002      	b.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80041fe:	e2e2      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004200:	e2e1      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004206:	e2de      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004208:	58024400 	.word	0x58024400
 800420c:	03d09000 	.word	0x03d09000
 8004210:	003d0900 	.word	0x003d0900
 8004214:	017d7840 	.word	0x017d7840
 8004218:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004220:	e2d1      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004226:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800422a:	430b      	orrs	r3, r1
 800422c:	f040 809c 	bne.w	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004230:	4b93      	ldr	r3, [pc, #588]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004238:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004240:	d054      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004248:	f200 808b 	bhi.w	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004252:	f000 8083 	beq.w	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800425c:	f200 8081 	bhi.w	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	d02f      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426e:	d878      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d012      	beq.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800427e:	e070      	b.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004280:	4b7f      	ldr	r3, [pc, #508]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428c:	d107      	bne.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800428e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fd5e 	bl	8004d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800429c:	e293      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042a2:	e290      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042a4:	4b76      	ldr	r3, [pc, #472]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b0:	d107      	bne.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042b2:	f107 0318 	add.w	r3, r7, #24
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 faa4 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042c0:	e281      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042c6:	e27e      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80042c8:	4b6d      	ldr	r3, [pc, #436]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d4:	d107      	bne.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042d6:	f107 030c 	add.w	r3, r7, #12
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fbe6 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042e4:	e26f      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042ea:	e26c      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80042ec:	4b64      	ldr	r3, [pc, #400]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80042ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042f4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80042f6:	4b62      	ldr	r3, [pc, #392]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004308:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	4a5c      	ldr	r2, [pc, #368]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800431a:	e01e      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800431c:	4b58      	ldr	r3, [pc, #352]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004328:	d106      	bne.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004330:	d102      	bne.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004332:	4b55      	ldr	r3, [pc, #340]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004336:	e010      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004338:	4b51      	ldr	r3, [pc, #324]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004344:	d106      	bne.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800434c:	d102      	bne.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800434e:	4b4f      	ldr	r3, [pc, #316]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004352:	e002      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004358:	e235      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800435a:	e234      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800435c:	4b4c      	ldr	r3, [pc, #304]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004360:	e231      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004366:	e22e      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800436c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004370:	430b      	orrs	r3, r1
 8004372:	f040 808f 	bne.w	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004376:	4b42      	ldr	r3, [pc, #264]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800437e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004382:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004386:	d06b      	beq.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800438e:	d874      	bhi.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004396:	d056      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800439e:	d86c      	bhi.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043a6:	d03b      	beq.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043ae:	d864      	bhi.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b6:	d021      	beq.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043be:	d85c      	bhi.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80043c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d004      	beq.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80043ce:	e054      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80043d0:	f7fe fa0c 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 80043d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80043d6:	e1f6      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043d8:	4b29      	ldr	r3, [pc, #164]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e4:	d107      	bne.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043e6:	f107 0318 	add.w	r3, r7, #24
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fa0a 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80043f4:	e1e7      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043fa:	e1e4      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80043fc:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004408:	d107      	bne.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800440a:	f107 030c 	add.w	r3, r7, #12
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fb4c 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004418:	e1d5      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800441e:	e1d2      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b04      	cmp	r3, #4
 800442a:	d109      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	08db      	lsrs	r3, r3, #3
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	4a13      	ldr	r2, [pc, #76]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800443e:	e1c2      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004444:	e1bf      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004446:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004452:	d102      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004458:	e1b5      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800445e:	e1b2      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800446c:	d102      	bne.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004472:	e1a8      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004478:	e1a5      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800447e:	e1a2      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004480:	58024400 	.word	0x58024400
 8004484:	03d09000 	.word	0x03d09000
 8004488:	003d0900 	.word	0x003d0900
 800448c:	017d7840 	.word	0x017d7840
 8004490:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004498:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800449c:	430b      	orrs	r3, r1
 800449e:	d173      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80044a0:	4b9c      	ldr	r3, [pc, #624]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b0:	d02f      	beq.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b8:	d863      	bhi.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c6:	d012      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80044c8:	e05b      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044ca:	4b92      	ldr	r3, [pc, #584]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d6:	d107      	bne.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044d8:	f107 0318 	add.w	r3, r7, #24
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f991 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80044e6:	e16e      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044ec:	e16b      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80044ee:	4b89      	ldr	r3, [pc, #548]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fa:	d107      	bne.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fad3 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800450a:	e15c      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004510:	e159      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004512:	4b80      	ldr	r3, [pc, #512]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800451a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800451c:	4b7d      	ldr	r3, [pc, #500]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b04      	cmp	r3, #4
 8004526:	d10c      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800452e:	4b79      	ldr	r3, [pc, #484]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	08db      	lsrs	r3, r3, #3
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	4a77      	ldr	r2, [pc, #476]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800453a:	fa22 f303 	lsr.w	r3, r2, r3
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004540:	e01e      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004542:	4b74      	ldr	r3, [pc, #464]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454e:	d106      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004556:	d102      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004558:	4b70      	ldr	r3, [pc, #448]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455c:	e010      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800455e:	4b6d      	ldr	r3, [pc, #436]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800456a:	d106      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800456c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004572:	d102      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800457e:	e122      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004580:	e121      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004586:	e11e      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800458c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004590:	430b      	orrs	r3, r1
 8004592:	d133      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004594:	4b5f      	ldr	r3, [pc, #380]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045aa:	d012      	beq.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80045ac:	e023      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80045ae:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ba:	d107      	bne.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fbc7 	bl	8004d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80045ca:	e0fc      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045d0:	e0f9      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80045d2:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045de:	d107      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045e0:	f107 0318 	add.w	r3, r7, #24
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f90d 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80045ee:	e0ea      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045f4:	e0e7      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045fa:	e0e4      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80045fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004600:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004604:	430b      	orrs	r3, r1
 8004606:	f040 808d 	bne.w	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800460a:	4b42      	ldr	r3, [pc, #264]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004612:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800461a:	d06b      	beq.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004622:	d874      	bhi.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462a:	d056      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d86c      	bhi.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800463a:	d03b      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004642:	d864      	bhi.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800464a:	d021      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004652:	d85c      	bhi.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004660:	d004      	beq.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8004662:	e054      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004664:	f000 f8b8 	bl	80047d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004668:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800466a:	e0ac      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800466c:	4b29      	ldr	r3, [pc, #164]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004678:	d107      	bne.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800467a:	f107 0318 	add.w	r3, r7, #24
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f8c0 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004688:	e09d      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800468e:	e09a      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800469c:	d107      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800469e:	f107 030c 	add.w	r3, r7, #12
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fa02 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046ac:	e08b      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046b2:	e088      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046b4:	4b17      	ldr	r3, [pc, #92]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d109      	bne.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046c0:	4b14      	ldr	r3, [pc, #80]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	08db      	lsrs	r3, r3, #3
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	4a13      	ldr	r2, [pc, #76]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046d2:	e078      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046d8:	e075      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d102      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046ec:	e06b      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046f2:	e068      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004700:	d102      	bne.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004706:	e05e      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800470c:	e05b      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004712:	e058      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004714:	58024400 	.word	0x58024400
 8004718:	03d09000 	.word	0x03d09000
 800471c:	003d0900 	.word	0x003d0900
 8004720:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004728:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800472c:	430b      	orrs	r3, r1
 800472e:	d148      	bne.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004738:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004740:	d02a      	beq.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004748:	d838      	bhi.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004756:	d00d      	beq.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8004758:	e030      	b.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004766:	d102      	bne.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8004768:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800476c:	e02b      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004772:	e028      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004774:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004780:	d107      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fae4 	bl	8004d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004790:	e019      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004796:	e016      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a4:	d107      	bne.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047a6:	f107 0318 	add.w	r3, r7, #24
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f82a 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047b4:	e007      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047ba:	e004      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047c0:	e001      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80047c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3740      	adds	r7, #64	; 0x40
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	58024400 	.word	0x58024400
 80047d4:	017d7840 	.word	0x017d7840

080047d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047dc:	f7fd ffd6 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4904      	ldr	r1, [pc, #16]	; (8004800 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	58024400 	.word	0x58024400
 8004800:	0800b49c 	.word	0x0800b49c

08004804 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800480c:	4ba1      	ldr	r3, [pc, #644]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004816:	4b9f      	ldr	r3, [pc, #636]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	0b1b      	lsrs	r3, r3, #12
 800481c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004820:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004822:	4b9c      	ldr	r3, [pc, #624]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800482e:	4b99      	ldr	r3, [pc, #612]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	08db      	lsrs	r3, r3, #3
 8004834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8111 	beq.w	8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b02      	cmp	r3, #2
 8004856:	f000 8083 	beq.w	8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b02      	cmp	r3, #2
 800485e:	f200 80a1 	bhi.w	80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d056      	beq.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800486e:	e099      	b.n	80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004870:	4b88      	ldr	r3, [pc, #544]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d02d      	beq.n	80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800487c:	4b85      	ldr	r3, [pc, #532]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	08db      	lsrs	r3, r3, #3
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	4a84      	ldr	r2, [pc, #528]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a6:	4b7b      	ldr	r3, [pc, #492]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048d6:	e087      	b.n	80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ea:	4b6a      	ldr	r3, [pc, #424]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800491a:	e065      	b.n	80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004926:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800492a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492e:	4b59      	ldr	r3, [pc, #356]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004942:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800495e:	e043      	b.n	80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800496e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004972:	4b48      	ldr	r3, [pc, #288]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004982:	ed97 6a03 	vldr	s12, [r7, #12]
 8004986:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800498a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049a2:	e021      	b.n	80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b6:	4b37      	ldr	r3, [pc, #220]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049e8:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	0a5b      	lsrs	r3, r3, #9
 80049ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a0e:	ee17 2a90 	vmov	r2, s15
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a16:	4b1f      	ldr	r3, [pc, #124]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3c:	ee17 2a90 	vmov	r2, s15
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a44:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	0e1b      	lsrs	r3, r3, #24
 8004a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6a:	ee17 2a90 	vmov	r2, s15
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a72:	e008      	b.n	8004a86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
}
 8004a86:	bf00      	nop
 8004a88:	3724      	adds	r7, #36	; 0x24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	58024400 	.word	0x58024400
 8004a98:	03d09000 	.word	0x03d09000
 8004a9c:	46000000 	.word	0x46000000
 8004aa0:	4c742400 	.word	0x4c742400
 8004aa4:	4a742400 	.word	0x4a742400
 8004aa8:	4bbebc20 	.word	0x4bbebc20

08004aac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ab4:	4ba1      	ldr	r3, [pc, #644]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004abe:	4b9f      	ldr	r3, [pc, #636]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	0d1b      	lsrs	r3, r3, #20
 8004ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004aca:	4b9c      	ldr	r3, [pc, #624]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ad6:	4b99      	ldr	r3, [pc, #612]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	08db      	lsrs	r3, r3, #3
 8004adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8111 	beq.w	8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	f000 8083 	beq.w	8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	f200 80a1 	bhi.w	8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d056      	beq.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b16:	e099      	b.n	8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b18:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02d      	beq.n	8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b24:	4b85      	ldr	r3, [pc, #532]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	4a84      	ldr	r2, [pc, #528]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
 8004b34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4e:	4b7b      	ldr	r3, [pc, #492]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b7e:	e087      	b.n	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b92:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc2:	e065      	b.n	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd6:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c06:	e043      	b.n	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1a:	4b48      	ldr	r3, [pc, #288]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4a:	e021      	b.n	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5e:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c90:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	0a5b      	lsrs	r3, r3, #9
 8004c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb6:	ee17 2a90 	vmov	r2, s15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004cbe:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce4:	ee17 2a90 	vmov	r2, s15
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	0e1b      	lsrs	r3, r3, #24
 8004cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d12:	ee17 2a90 	vmov	r2, s15
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d1a:	e008      	b.n	8004d2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	3724      	adds	r7, #36	; 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	03d09000 	.word	0x03d09000
 8004d44:	46000000 	.word	0x46000000
 8004d48:	4c742400 	.word	0x4c742400
 8004d4c:	4a742400 	.word	0x4a742400
 8004d50:	4bbebc20 	.word	0x4bbebc20

08004d54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b089      	sub	sp, #36	; 0x24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d5c:	4ba0      	ldr	r3, [pc, #640]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004d66:	4b9e      	ldr	r3, [pc, #632]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	091b      	lsrs	r3, r3, #4
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004d72:	4b9b      	ldr	r3, [pc, #620]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d7c:	4b98      	ldr	r3, [pc, #608]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8111 	beq.w	8004fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	f000 8083 	beq.w	8004eae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	f200 80a1 	bhi.w	8004ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d056      	beq.n	8004e6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004dbc:	e099      	b.n	8004ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dbe:	4b88      	ldr	r3, [pc, #544]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d02d      	beq.n	8004e26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dca:	4b85      	ldr	r3, [pc, #532]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	08db      	lsrs	r3, r3, #3
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	4a83      	ldr	r2, [pc, #524]	; (8004fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dda:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df4:	4b7a      	ldr	r3, [pc, #488]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e08:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e20:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e24:	e087      	b.n	8004f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	ee07 3a90 	vmov	s15, r3
 8004e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004fec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e38:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e68:	e065      	b.n	8004f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7c:	4b58      	ldr	r3, [pc, #352]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e90:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eac:	e043      	b.n	8004f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec0:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec8:	ee07 3a90 	vmov	s15, r3
 8004ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef0:	e021      	b.n	8004f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004fec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f04:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f14:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f18:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f34:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004f36:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	0a5b      	lsrs	r3, r3, #9
 8004f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f40:	ee07 3a90 	vmov	s15, r3
 8004f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5c:	ee17 2a90 	vmov	r2, s15
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004f64:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8a:	ee17 2a90 	vmov	r2, s15
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	0e1b      	lsrs	r3, r3, #24
 8004f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb8:	ee17 2a90 	vmov	r2, s15
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	3724      	adds	r7, #36	; 0x24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	03d09000 	.word	0x03d09000
 8004fe8:	46000000 	.word	0x46000000
 8004fec:	4c742400 	.word	0x4c742400
 8004ff0:	4a742400 	.word	0x4a742400
 8004ff4:	4bbebc20 	.word	0x4bbebc20

08004ff8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005006:	4b53      	ldr	r3, [pc, #332]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b03      	cmp	r3, #3
 8005010:	d101      	bne.n	8005016 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e099      	b.n	800514a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005016:	4b4f      	ldr	r3, [pc, #316]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a4e      	ldr	r2, [pc, #312]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800501c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005022:	f7fc f81b 	bl	800105c <HAL_GetTick>
 8005026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005028:	e008      	b.n	800503c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800502a:	f7fc f817 	bl	800105c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e086      	b.n	800514a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800503c:	4b45      	ldr	r3, [pc, #276]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005048:	4b42      	ldr	r3, [pc, #264]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	493f      	ldr	r1, [pc, #252]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005058:	4313      	orrs	r3, r2
 800505a:	628b      	str	r3, [r1, #40]	; 0x28
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	3b01      	subs	r3, #1
 8005062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	3b01      	subs	r3, #1
 800506c:	025b      	lsls	r3, r3, #9
 800506e:	b29b      	uxth	r3, r3
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	3b01      	subs	r3, #1
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	3b01      	subs	r3, #1
 8005086:	061b      	lsls	r3, r3, #24
 8005088:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800508c:	4931      	ldr	r1, [pc, #196]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005092:	4b30      	ldr	r3, [pc, #192]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	492d      	ldr	r1, [pc, #180]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	f023 0220 	bic.w	r2, r3, #32
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	4928      	ldr	r1, [pc, #160]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050b6:	4b27      	ldr	r3, [pc, #156]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	4a26      	ldr	r2, [pc, #152]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	f023 0310 	bic.w	r3, r3, #16
 80050c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c6:	4b24      	ldr	r3, [pc, #144]	; (8005158 <RCCEx_PLL2_Config+0x160>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	69d2      	ldr	r2, [r2, #28]
 80050ce:	00d2      	lsls	r2, r2, #3
 80050d0:	4920      	ldr	r1, [pc, #128]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050d6:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	f043 0310 	orr.w	r3, r3, #16
 80050e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	4a19      	ldr	r2, [pc, #100]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f4:	e00f      	b.n	8005116 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050fc:	4b15      	ldr	r3, [pc, #84]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	4a14      	ldr	r2, [pc, #80]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005108:	e005      	b.n	8005116 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	4a11      	ldr	r2, [pc, #68]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005114:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800511c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005122:	f7fb ff9b 	bl	800105c <HAL_GetTick>
 8005126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005128:	e008      	b.n	800513c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800512a:	f7fb ff97 	bl	800105c <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e006      	b.n	800514a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <RCCEx_PLL2_Config+0x15c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400
 8005158:	ffff0007 	.word	0xffff0007

0800515c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800516a:	4b53      	ldr	r3, [pc, #332]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b03      	cmp	r3, #3
 8005174:	d101      	bne.n	800517a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e099      	b.n	80052ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800517a:	4b4f      	ldr	r3, [pc, #316]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a4e      	ldr	r2, [pc, #312]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005186:	f7fb ff69 	bl	800105c <HAL_GetTick>
 800518a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800518c:	e008      	b.n	80051a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800518e:	f7fb ff65 	bl	800105c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e086      	b.n	80052ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051a0:	4b45      	ldr	r3, [pc, #276]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051ac:	4b42      	ldr	r3, [pc, #264]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	051b      	lsls	r3, r3, #20
 80051ba:	493f      	ldr	r1, [pc, #252]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	628b      	str	r3, [r1, #40]	; 0x28
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	025b      	lsls	r3, r3, #9
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	3b01      	subs	r3, #1
 80051dc:	041b      	lsls	r3, r3, #16
 80051de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051f0:	4931      	ldr	r1, [pc, #196]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051f6:	4b30      	ldr	r3, [pc, #192]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	492d      	ldr	r1, [pc, #180]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005204:	4313      	orrs	r3, r2
 8005206:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005208:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	4928      	ldr	r1, [pc, #160]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005216:	4313      	orrs	r3, r2
 8005218:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005224:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <RCCEx_PLL3_Config+0x160>)
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	69d2      	ldr	r2, [r2, #28]
 8005232:	00d2      	lsls	r2, r2, #3
 8005234:	4920      	ldr	r1, [pc, #128]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800523a:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005258:	e00f      	b.n	800527a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d106      	bne.n	800526e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005260:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005266:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800526a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800526c:	e005      	b.n	800527a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800526e:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	4a11      	ldr	r2, [pc, #68]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005278:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800527a:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a0e      	ldr	r2, [pc, #56]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005286:	f7fb fee9 	bl	800105c <HAL_GetTick>
 800528a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800528c:	e008      	b.n	80052a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800528e:	f7fb fee5 	bl	800105c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e006      	b.n	80052ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <RCCEx_PLL3_Config+0x15c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	58024400 	.word	0x58024400
 80052bc:	ffff0007 	.word	0xffff0007

080052c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e075      	b.n	80053be <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fb fce7 	bl	8000cb8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2204      	movs	r2, #4
 80052ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f868 	bl	80053c8 <HAL_SD_InitCard>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e05d      	b.n	80053be <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fdb5 	bl	8005e78 <HAL_SD_GetCardStatus>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e052      	b.n	80053be <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005318:	7e3b      	ldrb	r3, [r7, #24]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800531e:	7e7b      	ldrb	r3, [r7, #25]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	2b01      	cmp	r3, #1
 800532a:	d10a      	bne.n	8005342 <HAL_SD_Init+0x82>
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <HAL_SD_Init+0x78>
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d004      	beq.n	8005342 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800533e:	659a      	str	r2, [r3, #88]	; 0x58
 8005340:	e00b      	b.n	800535a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	2b01      	cmp	r3, #1
 8005348:	d104      	bne.n	8005354 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005350:	659a      	str	r2, [r3, #88]	; 0x58
 8005352:	e002      	b.n	800535a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fe73 	bl	800604c <HAL_SD_ConfigWideBusOperation>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e026      	b.n	80053be <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005370:	f7fb fe74 	bl	800105c <HAL_GetTick>
 8005374:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005376:	e011      	b.n	800539c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005378:	f7fb fe70 	bl	800105c <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d109      	bne.n	800539c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800538e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e010      	b.n	80053be <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 ff67 	bl	8006270 <HAL_SD_GetCardState>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d1e7      	bne.n	8005378 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3728      	adds	r7, #40	; 0x28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b08d      	sub	sp, #52	; 0x34
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80053e0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80053e4:	f04f 0100 	mov.w	r1, #0
 80053e8:	f7fe fc76 	bl	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 80053ec:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d109      	bne.n	8005408 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005402:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e070      	b.n	80054ea <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	4a39      	ldr	r2, [pc, #228]	; (80054f4 <HAL_SD_InitCard+0x12c>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681c      	ldr	r4, [r3, #0]
 800541a:	466a      	mov	r2, sp
 800541c:	f107 0318 	add.w	r3, r7, #24
 8005420:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005424:	e882 0003 	stmia.w	r2, {r0, r1}
 8005428:	f107 030c 	add.w	r3, r7, #12
 800542c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542e:	4620      	mov	r0, r4
 8005430:	f002 fc5c 	bl	8007cec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f002 fc9f 	bl	8007d7c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544a:	fbb2 f3f3 	udiv	r3, r2, r3
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005456:	4a28      	ldr	r2, [pc, #160]	; (80054f8 <HAL_SD_InitCard+0x130>)
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	3301      	adds	r3, #1
 8005460:	4618      	mov	r0, r3
 8005462:	f7fb fe07 	bl	8001074 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fff0 	bl	800644c <SD_PowerON>
 800546c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00b      	beq.n	800548c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e02e      	b.n	80054ea <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 ff0f 	bl	80062b0 <SD_InitCard>
 8005492:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e01b      	b.n	80054ea <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054ba:	4618      	mov	r0, r3
 80054bc:	f002 fcf4 	bl	8007ea8 <SDMMC_CmdBlockLength>
 80054c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00f      	beq.n	80054e8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a0b      	ldr	r2, [pc, #44]	; (80054fc <HAL_SD_InitCard+0x134>)
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	372c      	adds	r7, #44	; 0x2c
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd90      	pop	{r4, r7, pc}
 80054f2:	bf00      	nop
 80054f4:	014f8b59 	.word	0x014f8b59
 80054f8:	00012110 	.word	0x00012110
 80054fc:	1fe00fff 	.word	0x1fe00fff

08005500 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b092      	sub	sp, #72	; 0x48
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800550e:	f7fb fda5 	bl	800105c <HAL_GetTick>
 8005512:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e167      	b.n	8005802 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b01      	cmp	r3, #1
 800553c:	f040 815a 	bne.w	80057f4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	441a      	add	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005550:	429a      	cmp	r2, r3
 8005552:	d907      	bls.n	8005564 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005558:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e14e      	b.n	8005802 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2203      	movs	r2, #3
 8005568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2200      	movs	r2, #0
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	2b01      	cmp	r3, #1
 800557a:	d002      	beq.n	8005582 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	025b      	lsls	r3, r3, #9
 8005580:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	025b      	lsls	r3, r3, #9
 800558c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800558e:	2390      	movs	r3, #144	; 0x90
 8005590:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005592:	2302      	movs	r3, #2
 8005594:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005596:	2300      	movs	r3, #0
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800559a:	2300      	movs	r3, #0
 800559c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f107 0214 	add.w	r2, r7, #20
 80055a6:	4611      	mov	r1, r2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f002 fc51 	bl	8007e50 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055bc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d90a      	bls.n	80055da <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2202      	movs	r2, #2
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055d0:	4618      	mov	r0, r3
 80055d2:	f002 fcaf 	bl	8007f34 <SDMMC_CmdReadMultiBlock>
 80055d6:	6478      	str	r0, [r7, #68]	; 0x44
 80055d8:	e009      	b.n	80055ee <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055e6:	4618      	mov	r0, r3
 80055e8:	f002 fc81 	bl	8007eee <SDMMC_CmdReadSingleBlock>
 80055ec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80055ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d012      	beq.n	800561a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a84      	ldr	r2, [pc, #528]	; (800580c <HAL_SD_ReadBlocks+0x30c>)
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005602:	431a      	orrs	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e0f3      	b.n	8005802 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800561e:	e058      	b.n	80056d2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d033      	beq.n	8005696 <HAL_SD_ReadBlocks+0x196>
 800562e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005630:	2b1f      	cmp	r3, #31
 8005632:	d930      	bls.n	8005696 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005634:	2300      	movs	r3, #0
 8005636:	643b      	str	r3, [r7, #64]	; 0x40
 8005638:	e027      	b.n	800568a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f002 fb7e 	bl	8007d40 <SDMMC_ReadFIFO>
 8005644:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	b2da      	uxtb	r2, r3
 800564a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	3301      	adds	r3, #1
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	b2da      	uxtb	r2, r3
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800565e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005660:	3301      	adds	r3, #1
 8005662:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	b2da      	uxtb	r2, r3
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	3301      	adds	r3, #1
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	0e1b      	lsrs	r3, r3, #24
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	3301      	adds	r3, #1
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005686:	3301      	adds	r3, #1
 8005688:	643b      	str	r3, [r7, #64]	; 0x40
 800568a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568c:	2b07      	cmp	r3, #7
 800568e:	d9d4      	bls.n	800563a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	3b20      	subs	r3, #32
 8005694:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005696:	f7fb fce1 	bl	800105c <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d902      	bls.n	80056ac <HAL_SD_ReadBlocks+0x1ac>
 80056a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d112      	bne.n	80056d2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a56      	ldr	r2, [pc, #344]	; (800580c <HAL_SD_ReadBlocks+0x30c>)
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e097      	b.n	8005802 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d09f      	beq.n	8005620 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ee:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d022      	beq.n	8005744 <HAL_SD_ReadBlocks+0x244>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d91f      	bls.n	8005744 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	2b03      	cmp	r3, #3
 800570a:	d01b      	beq.n	8005744 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f002 fc79 	bl	8008008 <SDMMC_CmdStopTransfer>
 8005716:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571a:	2b00      	cmp	r3, #0
 800571c:	d012      	beq.n	8005744 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a3a      	ldr	r2, [pc, #232]	; (800580c <HAL_SD_ReadBlocks+0x30c>)
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800572a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e05e      	b.n	8005802 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d012      	beq.n	8005778 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2d      	ldr	r2, [pc, #180]	; (800580c <HAL_SD_ReadBlocks+0x30c>)
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575e:	f043 0208 	orr.w	r2, r3, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e044      	b.n	8005802 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d012      	beq.n	80057ac <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a20      	ldr	r2, [pc, #128]	; (800580c <HAL_SD_ReadBlocks+0x30c>)
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	f043 0202 	orr.w	r2, r3, #2
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e02a      	b.n	8005802 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d012      	beq.n	80057e0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <HAL_SD_ReadBlocks+0x30c>)
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e010      	b.n	8005802 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <HAL_SD_ReadBlocks+0x310>)
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e006      	b.n	8005802 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
  }
}
 8005802:	4618      	mov	r0, r3
 8005804:	3748      	adds	r7, #72	; 0x48
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	1fe00fff 	.word	0x1fe00fff
 8005810:	18000f3a 	.word	0x18000f3a

08005814 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b092      	sub	sp, #72	; 0x48
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005822:	f7fb fc1b 	bl	800105c <HAL_GetTick>
 8005826:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e16b      	b.n	8005b1e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	f040 815e 	bne.w	8005b10 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800585a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	441a      	add	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005864:	429a      	cmp	r2, r3
 8005866:	d907      	bls.n	8005878 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e152      	b.n	8005b1e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2203      	movs	r2, #3
 800587c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2200      	movs	r2, #0
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	2b01      	cmp	r3, #1
 800588e:	d002      	beq.n	8005896 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	025b      	lsls	r3, r3, #9
 8005894:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295
 800589a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	025b      	lsls	r3, r3, #9
 80058a0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80058a2:	2390      	movs	r3, #144	; 0x90
 80058a4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f107 0218 	add.w	r2, r7, #24
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f002 fac7 	bl	8007e50 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d90a      	bls.n	80058ee <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058e4:	4618      	mov	r0, r3
 80058e6:	f002 fb6b 	bl	8007fc0 <SDMMC_CmdWriteMultiBlock>
 80058ea:	6478      	str	r0, [r7, #68]	; 0x44
 80058ec:	e009      	b.n	8005902 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2210      	movs	r2, #16
 80058f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058fa:	4618      	mov	r0, r3
 80058fc:	f002 fb3d 	bl	8007f7a <SDMMC_CmdWriteSingleBlock>
 8005900:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005904:	2b00      	cmp	r3, #0
 8005906:	d012      	beq.n	800592e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a86      	ldr	r2, [pc, #536]	; (8005b28 <HAL_SD_WriteBlocks+0x314>)
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005916:	431a      	orrs	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e0f7      	b.n	8005b1e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005932:	e05c      	b.n	80059ee <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d037      	beq.n	80059b2 <HAL_SD_WriteBlocks+0x19e>
 8005942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005944:	2b1f      	cmp	r3, #31
 8005946:	d934      	bls.n	80059b2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8005948:	2300      	movs	r3, #0
 800594a:	643b      	str	r3, [r7, #64]	; 0x40
 800594c:	e02b      	b.n	80059a6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	3301      	adds	r3, #1
 8005958:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	021a      	lsls	r2, r3, #8
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005968:	3301      	adds	r3, #1
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	041a      	lsls	r2, r3, #16
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	3301      	adds	r3, #1
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	061a      	lsls	r2, r3, #24
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800598a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598c:	3301      	adds	r3, #1
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f107 0214 	add.w	r2, r7, #20
 8005998:	4611      	mov	r1, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f002 f9dd 	bl	8007d5a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80059a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a2:	3301      	adds	r3, #1
 80059a4:	643b      	str	r3, [r7, #64]	; 0x40
 80059a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a8:	2b07      	cmp	r3, #7
 80059aa:	d9d0      	bls.n	800594e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80059ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ae:	3b20      	subs	r3, #32
 80059b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80059b2:	f7fb fb53 	bl	800105c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059be:	429a      	cmp	r2, r3
 80059c0:	d902      	bls.n	80059c8 <HAL_SD_WriteBlocks+0x1b4>
 80059c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d112      	bne.n	80059ee <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a56      	ldr	r2, [pc, #344]	; (8005b28 <HAL_SD_WriteBlocks+0x314>)
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e097      	b.n	8005b1e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d09b      	beq.n	8005934 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d022      	beq.n	8005a60 <HAL_SD_WriteBlocks+0x24c>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d91f      	bls.n	8005a60 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d01b      	beq.n	8005a60 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f002 faeb 	bl	8008008 <SDMMC_CmdStopTransfer>
 8005a32:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d012      	beq.n	8005a60 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a3a      	ldr	r2, [pc, #232]	; (8005b28 <HAL_SD_WriteBlocks+0x314>)
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e05e      	b.n	8005b1e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d012      	beq.n	8005a94 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2d      	ldr	r2, [pc, #180]	; (8005b28 <HAL_SD_WriteBlocks+0x314>)
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	f043 0208 	orr.w	r2, r3, #8
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e044      	b.n	8005b1e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d012      	beq.n	8005ac8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <HAL_SD_WriteBlocks+0x314>)
 8005aa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aae:	f043 0202 	orr.w	r2, r3, #2
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e02a      	b.n	8005b1e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d012      	beq.n	8005afc <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <HAL_SD_WriteBlocks+0x314>)
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	f043 0210 	orr.w	r2, r3, #16
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e010      	b.n	8005b1e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a0a      	ldr	r2, [pc, #40]	; (8005b2c <HAL_SD_WriteBlocks+0x318>)
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e006      	b.n	8005b1e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
  }
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3748      	adds	r7, #72	; 0x48
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	1fe00fff 	.word	0x1fe00fff
 8005b2c:	18000f3a 	.word	0x18000f3a

08005b30 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3e:	0f9b      	lsrs	r3, r3, #30
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	0e9b      	lsrs	r3, r3, #26
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5c:	0e1b      	lsrs	r3, r3, #24
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	0c1b      	lsrs	r3, r3, #16
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b90:	0d1b      	lsrs	r3, r3, #20
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	0c1b      	lsrs	r3, r3, #16
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bae:	0bdb      	lsrs	r3, r3, #15
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc0:	0b9b      	lsrs	r3, r3, #14
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd2:	0b5b      	lsrs	r3, r3, #13
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be4:	0b1b      	lsrs	r3, r3, #12
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d163      	bne.n	8005cc8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c04:	009a      	lsls	r2, r3, #2
 8005c06:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005c10:	0f92      	lsrs	r2, r2, #30
 8005c12:	431a      	orrs	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1c:	0edb      	lsrs	r3, r3, #27
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c2e:	0e1b      	lsrs	r3, r3, #24
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c40:	0d5b      	lsrs	r3, r3, #21
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c52:	0c9b      	lsrs	r3, r3, #18
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c64:	0bdb      	lsrs	r3, r3, #15
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	7e1b      	ldrb	r3, [r3, #24]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	3302      	adds	r3, #2
 8005c88:	2201      	movs	r2, #1
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c92:	fb03 f202 	mul.w	r2, r3, r2
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	7a1b      	ldrb	r3, [r3, #8]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	409a      	lsls	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005cb4:	0a52      	lsrs	r2, r2, #9
 8005cb6:	fb03 f202 	mul.w	r2, r3, r2
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54
 8005cc6:	e031      	b.n	8005d2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d11d      	bne.n	8005d0c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd4:	041b      	lsls	r3, r3, #16
 8005cd6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	3301      	adds	r3, #1
 8005cec:	029a      	lsls	r2, r3, #10
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d00:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	655a      	str	r2, [r3, #84]	; 0x54
 8005d0a:	e00f      	b.n	8005d2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a58      	ldr	r2, [pc, #352]	; (8005e74 <HAL_SD_GetCardCSD+0x344>)
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e09d      	b.n	8005e68 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d30:	0b9b      	lsrs	r3, r3, #14
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d42:	09db      	lsrs	r3, r3, #7
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d64:	0fdb      	lsrs	r3, r3, #31
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d70:	0f5b      	lsrs	r3, r3, #29
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d82:	0e9b      	lsrs	r3, r3, #26
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d94:	0d9b      	lsrs	r3, r3, #22
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da6:	0d5b      	lsrs	r3, r3, #21
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd6:	0bdb      	lsrs	r3, r3, #15
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dea:	0b9b      	lsrs	r3, r3, #14
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dfe:	0b5b      	lsrs	r3, r3, #13
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e12:	0b1b      	lsrs	r3, r3, #12
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e26:	0a9b      	lsrs	r3, r3, #10
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e3a:	0a1b      	lsrs	r3, r3, #8
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	1fe00fff 	.word	0x1fe00fff

08005e78 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b094      	sub	sp, #80	; 0x50
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d101      	bne.n	8005e98 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0a7      	b.n	8005fe8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005e98:	f107 0308 	add.w	r3, r7, #8
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fb62 	bl	8006568 <SD_SendSDStatus>
 8005ea4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d011      	beq.n	8005ed0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a4f      	ldr	r2, [pc, #316]	; (8005ff0 <HAL_SD_GetCardStatus+0x178>)
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005ece:	e070      	b.n	8005fb2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	099b      	lsrs	r3, r3, #6
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	0a1b      	lsrs	r3, r3, #8
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	0e1b      	lsrs	r3, r3, #24
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4313      	orrs	r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	061a      	lsls	r2, r3, #24
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f16:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005f20:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	0e1b      	lsrs	r3, r3, #24
 8005f26:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	0d1b      	lsrs	r3, r3, #20
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	4313      	orrs	r3, r2
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	0a9b      	lsrs	r3, r3, #10
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	0a1b      	lsrs	r3, r3, #8
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	0e1b      	lsrs	r3, r3, #24
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 ff74 	bl	8007ea8 <SDMMC_CmdBlockLength>
 8005fc0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00d      	beq.n	8005fe4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a08      	ldr	r2, [pc, #32]	; (8005ff0 <HAL_SD_GetCardStatus+0x178>)
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8005fe4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3750      	adds	r7, #80	; 0x50
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	1fe00fff 	.word	0x1fe00fff

08005ff4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b08d      	sub	sp, #52	; 0x34
 8006050:	af02      	add	r7, sp, #8
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2203      	movs	r2, #3
 8006060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	2b03      	cmp	r3, #3
 800606a:	d02e      	beq.n	80060ca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006072:	d106      	bne.n	8006082 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	635a      	str	r2, [r3, #52]	; 0x34
 8006080:	e029      	b.n	80060d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006088:	d10a      	bne.n	80060a0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fb64 	bl	8006758 <SD_WideBus_Enable>
 8006090:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	635a      	str	r2, [r3, #52]	; 0x34
 800609e:	e01a      	b.n	80060d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fba1 	bl	80067ee <SD_WideBus_Disable>
 80060ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34
 80060ba:	e00c      	b.n	80060d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	635a      	str	r2, [r3, #52]	; 0x34
 80060c8:	e005      	b.n	80060d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a5f      	ldr	r2, [pc, #380]	; (8006260 <HAL_SD_ConfigWideBusOperation+0x214>)
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060ec:	e096      	b.n	800621c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80060ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80060f2:	f04f 0100 	mov.w	r1, #0
 80060f6:	f7fd fdef 	bl	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 80060fa:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8083 	beq.w	800620a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695a      	ldr	r2, [r3, #20]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4950      	ldr	r1, [pc, #320]	; (8006264 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006122:	fba1 1303 	umull	r1, r3, r1, r3
 8006126:	0e1b      	lsrs	r3, r3, #24
 8006128:	429a      	cmp	r2, r3
 800612a:	d303      	bcc.n	8006134 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	e05a      	b.n	80061ea <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613c:	d103      	bne.n	8006146 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e051      	b.n	80061ea <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614e:	d126      	bne.n	800619e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10e      	bne.n	8006176 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4a43      	ldr	r2, [pc, #268]	; (8006268 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d906      	bls.n	800616e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4a40      	ldr	r2, [pc, #256]	; (8006264 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	0e5b      	lsrs	r3, r3, #25
 800616a:	61bb      	str	r3, [r7, #24]
 800616c:	e03d      	b.n	80061ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	61bb      	str	r3, [r7, #24]
 8006174:	e039      	b.n	80061ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	4a39      	ldr	r2, [pc, #228]	; (8006268 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d906      	bls.n	8006196 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4a36      	ldr	r2, [pc, #216]	; (8006264 <HAL_SD_ConfigWideBusOperation+0x218>)
 800618c:	fba2 2303 	umull	r2, r3, r2, r3
 8006190:	0e5b      	lsrs	r3, r3, #25
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	e029      	b.n	80061ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e025      	b.n	80061ea <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10e      	bne.n	80061c4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4a30      	ldr	r2, [pc, #192]	; (800626c <HAL_SD_ConfigWideBusOperation+0x220>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d906      	bls.n	80061bc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4a2c      	ldr	r2, [pc, #176]	; (8006264 <HAL_SD_ConfigWideBusOperation+0x218>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	0e1b      	lsrs	r3, r3, #24
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	e016      	b.n	80061ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e012      	b.n	80061ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d0:	4a26      	ldr	r2, [pc, #152]	; (800626c <HAL_SD_ConfigWideBusOperation+0x220>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d906      	bls.n	80061e4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4a22      	ldr	r2, [pc, #136]	; (8006264 <HAL_SD_ConfigWideBusOperation+0x218>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	0e1b      	lsrs	r3, r3, #24
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	e002      	b.n	80061ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681c      	ldr	r4, [r3, #0]
 80061ee:	466a      	mov	r2, sp
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061f8:	e882 0003 	stmia.w	r2, {r0, r1}
 80061fc:	f107 0308 	add.w	r3, r7, #8
 8006200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006202:	4620      	mov	r0, r4
 8006204:	f001 fd72 	bl	8007cec <SDMMC_Init>
 8006208:	e008      	b.n	800621c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006224:	4618      	mov	r0, r3
 8006226:	f001 fe3f 	bl	8007ea8 <SDMMC_CmdBlockLength>
 800622a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00c      	beq.n	800624c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a0a      	ldr	r2, [pc, #40]	; (8006260 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006238:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006258:	4618      	mov	r0, r3
 800625a:	372c      	adds	r7, #44	; 0x2c
 800625c:	46bd      	mov	sp, r7
 800625e:	bd90      	pop	{r4, r7, pc}
 8006260:	1fe00fff 	.word	0x1fe00fff
 8006264:	55e63b89 	.word	0x55e63b89
 8006268:	02faf080 	.word	0x02faf080
 800626c:	017d7840 	.word	0x017d7840

08006270 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800627c:	f107 030c 	add.w	r3, r7, #12
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa40 	bl	8006708 <SD_SendStatus>
 8006288:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	0a5b      	lsrs	r3, r3, #9
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80062a6:	693b      	ldr	r3, [r7, #16]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b090      	sub	sp, #64	; 0x40
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80062bc:	f7fa fece 	bl	800105c <HAL_GetTick>
 80062c0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 fd69 	bl	8007d9e <SDMMC_GetPowerState>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80062d6:	e0b5      	b.n	8006444 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d02e      	beq.n	800633e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 ffb4 	bl	8008252 <SDMMC_CmdSendCID>
 80062ea:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <SD_InitCard+0x46>
    {
      return errorstate;
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	e0a6      	b.n	8006444 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fd94 	bl	8007e2a <SDMMC_GetResponse>
 8006302:	4602      	mov	r2, r0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2104      	movs	r1, #4
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fd8b 	bl	8007e2a <SDMMC_GetResponse>
 8006314:	4602      	mov	r2, r0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2108      	movs	r1, #8
 8006320:	4618      	mov	r0, r3
 8006322:	f001 fd82 	bl	8007e2a <SDMMC_GetResponse>
 8006326:	4602      	mov	r2, r0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	210c      	movs	r1, #12
 8006332:	4618      	mov	r0, r3
 8006334:	f001 fd79 	bl	8007e2a <SDMMC_GetResponse>
 8006338:	4602      	mov	r2, r0
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	2b03      	cmp	r3, #3
 8006344:	d01d      	beq.n	8006382 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006346:	e019      	b.n	800637c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f107 020a 	add.w	r2, r7, #10
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f001 ffbc 	bl	80082d0 <SDMMC_CmdSetRelAdd>
 8006358:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	e06f      	b.n	8006444 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006364:	f7fa fe7a 	bl	800105c <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	f241 3287 	movw	r2, #4999	; 0x1387
 8006372:	4293      	cmp	r3, r2
 8006374:	d902      	bls.n	800637c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006376:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800637a:	e063      	b.n	8006444 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800637c:	897b      	ldrh	r3, [r7, #10]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0e2      	beq.n	8006348 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	2b03      	cmp	r3, #3
 8006388:	d036      	beq.n	80063f8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800638a:	897b      	ldrh	r3, [r7, #10]
 800638c:	461a      	mov	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	041b      	lsls	r3, r3, #16
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f001 ff76 	bl	8008290 <SDMMC_CmdSendCSD>
 80063a4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <SD_InitCard+0x100>
    {
      return errorstate;
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	e049      	b.n	8006444 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fd37 	bl	8007e2a <SDMMC_GetResponse>
 80063bc:	4602      	mov	r2, r0
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2104      	movs	r1, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 fd2e 	bl	8007e2a <SDMMC_GetResponse>
 80063ce:	4602      	mov	r2, r0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2108      	movs	r1, #8
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 fd25 	bl	8007e2a <SDMMC_GetResponse>
 80063e0:	4602      	mov	r2, r0
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	210c      	movs	r1, #12
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 fd1c 	bl	8007e2a <SDMMC_GetResponse>
 80063f2:	4602      	mov	r2, r0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2104      	movs	r1, #4
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 fd13 	bl	8007e2a <SDMMC_GetResponse>
 8006404:	4603      	mov	r3, r0
 8006406:	0d1a      	lsrs	r2, r3, #20
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800640c:	f107 030c 	add.w	r3, r7, #12
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fb8c 	bl	8005b30 <HAL_SD_GetCardCSD>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800641e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006422:	e00f      	b.n	8006444 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	041b      	lsls	r3, r3, #16
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f001 fe25 	bl	8008080 <SDMMC_CmdSelDesel>
 8006436:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <SD_InitCard+0x192>
  {
    return errorstate;
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	e000      	b.n	8006444 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3740      	adds	r7, #64	; 0x40
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f001 fe2e 	bl	80080c6 <SDMMC_CmdGoIdleState>
 800646a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	e072      	b.n	800655c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fe41 	bl	8008102 <SDMMC_CmdOperCond>
 8006480:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006488:	d10d      	bne.n	80064a6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f001 fe16 	bl	80080c6 <SDMMC_CmdGoIdleState>
 800649a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <SD_PowerON+0x60>
    {
      return errorstate;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	e05a      	b.n	800655c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d137      	bne.n	8006524 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2100      	movs	r1, #0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fe41 	bl	8008142 <SDMMC_CmdAppCommand>
 80064c0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d02d      	beq.n	8006524 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064cc:	e046      	b.n	800655c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fe34 	bl	8008142 <SDMMC_CmdAppCommand>
 80064da:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <SD_PowerON+0x9a>
    {
      return errorstate;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	e03a      	b.n	800655c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	491e      	ldr	r1, [pc, #120]	; (8006564 <SD_PowerON+0x118>)
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 fe4b 	bl	8008188 <SDMMC_CmdAppOperCommand>
 80064f2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064fe:	e02d      	b.n	800655c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2100      	movs	r1, #0
 8006506:	4618      	mov	r0, r3
 8006508:	f001 fc8f 	bl	8007e2a <SDMMC_GetResponse>
 800650c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	0fdb      	lsrs	r3, r3, #31
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <SD_PowerON+0xce>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <SD_PowerON+0xd0>
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]

    count++;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	3301      	adds	r3, #1
 8006522:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800652a:	4293      	cmp	r3, r2
 800652c:	d802      	bhi.n	8006534 <SD_PowerON+0xe8>
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0cc      	beq.n	80064ce <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800653a:	4293      	cmp	r3, r2
 800653c:	d902      	bls.n	8006544 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800653e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006542:	e00b      	b.n	800655c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	c1100000 	.word	0xc1100000

08006568 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08c      	sub	sp, #48	; 0x30
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006572:	f7fa fd73 	bl	800105c <HAL_GetTick>
 8006576:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f001 fc51 	bl	8007e2a <SDMMC_GetResponse>
 8006588:	4603      	mov	r3, r0
 800658a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006592:	d102      	bne.n	800659a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006598:	e0b0      	b.n	80066fc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2140      	movs	r1, #64	; 0x40
 80065a0:	4618      	mov	r0, r3
 80065a2:	f001 fc81 	bl	8007ea8 <SDMMC_CmdBlockLength>
 80065a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	e0a0      	b.n	80066fc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f001 fdbb 	bl	8008142 <SDMMC_CmdAppCommand>
 80065cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	e08d      	b.n	80066fc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80065e6:	2340      	movs	r3, #64	; 0x40
 80065e8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80065ea:	2360      	movs	r3, #96	; 0x60
 80065ec:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065ee:	2302      	movs	r3, #2
 80065f0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80065f6:	2301      	movs	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f107 0208 	add.w	r2, r7, #8
 8006602:	4611      	mov	r1, r2
 8006604:	4618      	mov	r0, r3
 8006606:	f001 fc23 	bl	8007e50 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f001 fea3 	bl	800835a <SDMMC_CmdStatusRegister>
 8006614:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d02b      	beq.n	8006674 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	e069      	b.n	80066fc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d013      	beq.n	800665e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006636:	2300      	movs	r3, #0
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800663a:	e00d      	b.n	8006658 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	f001 fb7d 	bl	8007d40 <SDMMC_ReadFIFO>
 8006646:	4602      	mov	r2, r0
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	601a      	str	r2, [r3, #0]
        pData++;
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	3304      	adds	r3, #4
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	3301      	adds	r3, #1
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	2b07      	cmp	r3, #7
 800665c:	d9ee      	bls.n	800663c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800665e:	f7fa fcfd 	bl	800105c <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d102      	bne.n	8006674 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800666e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006672:	e043      	b.n	80066fc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0d2      	beq.n	8006628 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006690:	2308      	movs	r3, #8
 8006692:	e033      	b.n	80066fc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80066a2:	2302      	movs	r3, #2
 80066a4:	e02a      	b.n	80066fc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d017      	beq.n	80066e4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80066b4:	2320      	movs	r3, #32
 80066b6:	e021      	b.n	80066fc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 fb3f 	bl	8007d40 <SDMMC_ReadFIFO>
 80066c2:	4602      	mov	r2, r0
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	601a      	str	r2, [r3, #0]
    pData++;
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	3304      	adds	r3, #4
 80066cc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80066ce:	f7fa fcc5 	bl	800105c <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d102      	bne.n	80066e4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80066de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066e2:	e00b      	b.n	80066fc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e2      	bne.n	80066b8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a03      	ldr	r2, [pc, #12]	; (8006704 <SD_SendSDStatus+0x19c>)
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3730      	adds	r7, #48	; 0x30
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	18000f3a 	.word	0x18000f3a

08006708 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800671c:	e018      	b.n	8006750 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	041b      	lsls	r3, r3, #16
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f001 fdf2 	bl	8008314 <SDMMC_CmdSendStatus>
 8006730:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	e009      	b.n	8006750 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2100      	movs	r1, #0
 8006742:	4618      	mov	r0, r3
 8006744:	f001 fb71 	bl	8007e2a <SDMMC_GetResponse>
 8006748:	4602      	mov	r2, r0
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2100      	movs	r1, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f001 fb5b 	bl	8007e2a <SDMMC_GetResponse>
 8006774:	4603      	mov	r3, r0
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800677e:	d102      	bne.n	8006786 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006784:	e02f      	b.n	80067e6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006786:	f107 030c 	add.w	r3, r7, #12
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f879 	bl	8006884 <SD_FindSCR>
 8006792:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	e023      	b.n	80067e6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01c      	beq.n	80067e2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b0:	041b      	lsls	r3, r3, #16
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f001 fcc4 	bl	8008142 <SDMMC_CmdAppCommand>
 80067ba:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	e00f      	b.n	80067e6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2102      	movs	r1, #2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fcfb 	bl	80081c8 <SDMMC_CmdBusWidth>
 80067d2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	e003      	b.n	80067e6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80067de:	2300      	movs	r3, #0
 80067e0:	e001      	b.n	80067e6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	2300      	movs	r3, #0
 80067fc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f001 fb10 	bl	8007e2a <SDMMC_GetResponse>
 800680a:	4603      	mov	r3, r0
 800680c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006814:	d102      	bne.n	800681c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800681a:	e02f      	b.n	800687c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800681c:	f107 030c 	add.w	r3, r7, #12
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f82e 	bl	8006884 <SD_FindSCR>
 8006828:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	e023      	b.n	800687c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01c      	beq.n	8006878 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	041b      	lsls	r3, r3, #16
 8006848:	4619      	mov	r1, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f001 fc79 	bl	8008142 <SDMMC_CmdAppCommand>
 8006850:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	e00f      	b.n	800687c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2100      	movs	r1, #0
 8006862:	4618      	mov	r0, r3
 8006864:	f001 fcb0 	bl	80081c8 <SDMMC_CmdBusWidth>
 8006868:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	e003      	b.n	800687c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006874:	2300      	movs	r3, #0
 8006876:	e001      	b.n	800687c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006878:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08e      	sub	sp, #56	; 0x38
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800688e:	f7fa fbe5 	bl	800105c <HAL_GetTick>
 8006892:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006898:	2300      	movs	r3, #0
 800689a:	60bb      	str	r3, [r7, #8]
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2108      	movs	r1, #8
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 fafc 	bl	8007ea8 <SDMMC_CmdBlockLength>
 80068b0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <SD_FindSCR+0x38>
  {
    return errorstate;
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	e0ad      	b.n	8006a18 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	4619      	mov	r1, r3
 80068c8:	4610      	mov	r0, r2
 80068ca:	f001 fc3a 	bl	8008142 <SDMMC_CmdAppCommand>
 80068ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <SD_FindSCR+0x56>
  {
    return errorstate;
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	e09e      	b.n	8006a18 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068da:	f04f 33ff 	mov.w	r3, #4294967295
 80068de:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80068e0:	2308      	movs	r3, #8
 80068e2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80068e4:	2330      	movs	r3, #48	; 0x30
 80068e6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80068e8:	2302      	movs	r3, #2
 80068ea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80068f0:	2301      	movs	r3, #1
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f107 0210 	add.w	r2, r7, #16
 80068fc:	4611      	mov	r1, r2
 80068fe:	4618      	mov	r0, r3
 8006900:	f001 faa6 	bl	8007e50 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f001 fc80 	bl	800820e <SDMMC_CmdSendSCR>
 800690e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	2b00      	cmp	r3, #0
 8006914:	d027      	beq.n	8006966 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	e07e      	b.n	8006a18 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d113      	bne.n	8006950 <SD_FindSCR+0xcc>
 8006928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692a:	2b00      	cmp	r3, #0
 800692c:	d110      	bne.n	8006950 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fa04 	bl	8007d40 <SDMMC_ReadFIFO>
 8006938:	4603      	mov	r3, r0
 800693a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f001 f9fd 	bl	8007d40 <SDMMC_ReadFIFO>
 8006946:	4603      	mov	r3, r0
 8006948:	60fb      	str	r3, [r7, #12]
      index++;
 800694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694c:	3301      	adds	r3, #1
 800694e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006950:	f7fa fb84 	bl	800105c <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d102      	bne.n	8006966 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006964:	e058      	b.n	8006a18 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800696c:	f240 532a 	movw	r3, #1322	; 0x52a
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0d1      	beq.n	800691a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2208      	movs	r2, #8
 800698a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800698c:	2308      	movs	r3, #8
 800698e:	e043      	b.n	8006a18 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2202      	movs	r2, #2
 80069a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80069a6:	2302      	movs	r3, #2
 80069a8:	e036      	b.n	8006a18 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2220      	movs	r2, #32
 80069be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80069c0:	2320      	movs	r3, #32
 80069c2:	e029      	b.n	8006a18 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <SD_FindSCR+0x19c>)
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	061a      	lsls	r2, r3, #24
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	021b      	lsls	r3, r3, #8
 80069d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069d8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	0a1b      	lsrs	r3, r3, #8
 80069de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80069e2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	0e1b      	lsrs	r3, r3, #24
 80069e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	601a      	str	r2, [r3, #0]
    scr++;
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	3304      	adds	r3, #4
 80069f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	061a      	lsls	r2, r3, #24
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a00:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	0a1b      	lsrs	r3, r3, #8
 8006a06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006a0a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	0e1b      	lsrs	r3, r3, #24
 8006a10:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3738      	adds	r7, #56	; 0x38
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	18000f3a 	.word	0x18000f3a

08006a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e042      	b.n	8006abc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7fa f9c3 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2224      	movs	r2, #36	; 0x24
 8006a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0201 	bic.w	r2, r2, #1
 8006a64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f8ba 	bl	8006be0 <UART_SetConfig>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e022      	b.n	8006abc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fe16 	bl	80076b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fe9d 	bl	80077f4 <UART_CheckIdleState>
 8006aba:	4603      	mov	r3, r0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d17b      	bne.n	8006bd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <HAL_UART_Transmit+0x26>
 8006ae4:	88fb      	ldrh	r3, [r7, #6]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e074      	b.n	8006bd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006afe:	f7fa faad 	bl	800105c <HAL_GetTick>
 8006b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	88fa      	ldrh	r2, [r7, #6]
 8006b08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	88fa      	ldrh	r2, [r7, #6]
 8006b10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1c:	d108      	bne.n	8006b30 <HAL_UART_Transmit+0x6c>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d104      	bne.n	8006b30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	e003      	b.n	8006b38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b38:	e030      	b.n	8006b9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2180      	movs	r1, #128	; 0x80
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 feff 	bl	8007948 <UART_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e03d      	b.n	8006bd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	3302      	adds	r3, #2
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e007      	b.n	8006b8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	781a      	ldrb	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	3301      	adds	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1c8      	bne.n	8006b3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2140      	movs	r1, #64	; 0x40
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fec8 	bl	8007948 <UART_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e006      	b.n	8006bd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e000      	b.n	8006bd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006bd6:	2302      	movs	r3, #2
  }
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be4:	b092      	sub	sp, #72	; 0x48
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4bbe      	ldr	r3, [pc, #760]	; (8006f08 <UART_SetConfig+0x328>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4ab3      	ldr	r2, [pc, #716]	; (8006f0c <UART_SetConfig+0x32c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	4baf      	ldr	r3, [pc, #700]	; (8006f10 <UART_SetConfig+0x330>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	f023 010f 	bic.w	r1, r3, #15
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4aa6      	ldr	r2, [pc, #664]	; (8006f14 <UART_SetConfig+0x334>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d177      	bne.n	8006d70 <UART_SetConfig+0x190>
 8006c80:	4ba5      	ldr	r3, [pc, #660]	; (8006f18 <UART_SetConfig+0x338>)
 8006c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c88:	2b28      	cmp	r3, #40	; 0x28
 8006c8a:	d86d      	bhi.n	8006d68 <UART_SetConfig+0x188>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0xb4>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006d39 	.word	0x08006d39
 8006c98:	08006d69 	.word	0x08006d69
 8006c9c:	08006d69 	.word	0x08006d69
 8006ca0:	08006d69 	.word	0x08006d69
 8006ca4:	08006d69 	.word	0x08006d69
 8006ca8:	08006d69 	.word	0x08006d69
 8006cac:	08006d69 	.word	0x08006d69
 8006cb0:	08006d69 	.word	0x08006d69
 8006cb4:	08006d41 	.word	0x08006d41
 8006cb8:	08006d69 	.word	0x08006d69
 8006cbc:	08006d69 	.word	0x08006d69
 8006cc0:	08006d69 	.word	0x08006d69
 8006cc4:	08006d69 	.word	0x08006d69
 8006cc8:	08006d69 	.word	0x08006d69
 8006ccc:	08006d69 	.word	0x08006d69
 8006cd0:	08006d69 	.word	0x08006d69
 8006cd4:	08006d49 	.word	0x08006d49
 8006cd8:	08006d69 	.word	0x08006d69
 8006cdc:	08006d69 	.word	0x08006d69
 8006ce0:	08006d69 	.word	0x08006d69
 8006ce4:	08006d69 	.word	0x08006d69
 8006ce8:	08006d69 	.word	0x08006d69
 8006cec:	08006d69 	.word	0x08006d69
 8006cf0:	08006d69 	.word	0x08006d69
 8006cf4:	08006d51 	.word	0x08006d51
 8006cf8:	08006d69 	.word	0x08006d69
 8006cfc:	08006d69 	.word	0x08006d69
 8006d00:	08006d69 	.word	0x08006d69
 8006d04:	08006d69 	.word	0x08006d69
 8006d08:	08006d69 	.word	0x08006d69
 8006d0c:	08006d69 	.word	0x08006d69
 8006d10:	08006d69 	.word	0x08006d69
 8006d14:	08006d59 	.word	0x08006d59
 8006d18:	08006d69 	.word	0x08006d69
 8006d1c:	08006d69 	.word	0x08006d69
 8006d20:	08006d69 	.word	0x08006d69
 8006d24:	08006d69 	.word	0x08006d69
 8006d28:	08006d69 	.word	0x08006d69
 8006d2c:	08006d69 	.word	0x08006d69
 8006d30:	08006d69 	.word	0x08006d69
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3e:	e222      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006d40:	2304      	movs	r3, #4
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	e21e      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4e:	e21a      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006d50:	2310      	movs	r3, #16
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e216      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006d58:	2320      	movs	r3, #32
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e212      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006d60:	2340      	movs	r3, #64	; 0x40
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e20e      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006d68:	2380      	movs	r3, #128	; 0x80
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e20a      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a69      	ldr	r2, [pc, #420]	; (8006f1c <UART_SetConfig+0x33c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d130      	bne.n	8006ddc <UART_SetConfig+0x1fc>
 8006d7a:	4b67      	ldr	r3, [pc, #412]	; (8006f18 <UART_SetConfig+0x338>)
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d826      	bhi.n	8006dd4 <UART_SetConfig+0x1f4>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0x1ac>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006da5 	.word	0x08006da5
 8006d90:	08006dad 	.word	0x08006dad
 8006d94:	08006db5 	.word	0x08006db5
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006dc5 	.word	0x08006dc5
 8006da0:	08006dcd 	.word	0x08006dcd
 8006da4:	2300      	movs	r3, #0
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006daa:	e1ec      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006dac:	2304      	movs	r3, #4
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db2:	e1e8      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006db4:	2308      	movs	r3, #8
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dba:	e1e4      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006dbc:	2310      	movs	r3, #16
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc2:	e1e0      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006dc4:	2320      	movs	r3, #32
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dca:	e1dc      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006dcc:	2340      	movs	r3, #64	; 0x40
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e1d8      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dda:	e1d4      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a4f      	ldr	r2, [pc, #316]	; (8006f20 <UART_SetConfig+0x340>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d130      	bne.n	8006e48 <UART_SetConfig+0x268>
 8006de6:	4b4c      	ldr	r3, [pc, #304]	; (8006f18 <UART_SetConfig+0x338>)
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b05      	cmp	r3, #5
 8006df0:	d826      	bhi.n	8006e40 <UART_SetConfig+0x260>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <UART_SetConfig+0x218>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e11 	.word	0x08006e11
 8006dfc:	08006e19 	.word	0x08006e19
 8006e00:	08006e21 	.word	0x08006e21
 8006e04:	08006e29 	.word	0x08006e29
 8006e08:	08006e31 	.word	0x08006e31
 8006e0c:	08006e39 	.word	0x08006e39
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e16:	e1b6      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e1b2      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e26:	e1ae      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2e:	e1aa      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e30:	2320      	movs	r3, #32
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e1a6      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e38:	2340      	movs	r3, #64	; 0x40
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e1a2      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e19e      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a35      	ldr	r2, [pc, #212]	; (8006f24 <UART_SetConfig+0x344>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d130      	bne.n	8006eb4 <UART_SetConfig+0x2d4>
 8006e52:	4b31      	ldr	r3, [pc, #196]	; (8006f18 <UART_SetConfig+0x338>)
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	d826      	bhi.n	8006eac <UART_SetConfig+0x2cc>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0x284>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e7d 	.word	0x08006e7d
 8006e68:	08006e85 	.word	0x08006e85
 8006e6c:	08006e8d 	.word	0x08006e8d
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006e9d 	.word	0x08006e9d
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e180      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e84:	2304      	movs	r3, #4
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8a:	e17c      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e92:	e178      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e94:	2310      	movs	r3, #16
 8006e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9a:	e174      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea2:	e170      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006ea4:	2340      	movs	r3, #64	; 0x40
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eaa:	e16c      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006eac:	2380      	movs	r3, #128	; 0x80
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e168      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	; (8006f28 <UART_SetConfig+0x348>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d142      	bne.n	8006f44 <UART_SetConfig+0x364>
 8006ebe:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <UART_SetConfig+0x338>)
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	2b05      	cmp	r3, #5
 8006ec8:	d838      	bhi.n	8006f3c <UART_SetConfig+0x35c>
 8006eca:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <UART_SetConfig+0x2f0>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006ee9 	.word	0x08006ee9
 8006ed4:	08006ef1 	.word	0x08006ef1
 8006ed8:	08006ef9 	.word	0x08006ef9
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f2d 	.word	0x08006f2d
 8006ee4:	08006f35 	.word	0x08006f35
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eee:	e14a      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e146      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006ef8:	2308      	movs	r3, #8
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efe:	e142      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006f00:	2310      	movs	r3, #16
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f06:	e13e      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006f08:	cfff69f3 	.word	0xcfff69f3
 8006f0c:	58000c00 	.word	0x58000c00
 8006f10:	11fff4ff 	.word	0x11fff4ff
 8006f14:	40011000 	.word	0x40011000
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	40004400 	.word	0x40004400
 8006f20:	40004800 	.word	0x40004800
 8006f24:	40004c00 	.word	0x40004c00
 8006f28:	40005000 	.word	0x40005000
 8006f2c:	2320      	movs	r3, #32
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e128      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e124      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e120      	b.n	8007186 <UART_SetConfig+0x5a6>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4acb      	ldr	r2, [pc, #812]	; (8007278 <UART_SetConfig+0x698>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d176      	bne.n	800703c <UART_SetConfig+0x45c>
 8006f4e:	4bcb      	ldr	r3, [pc, #812]	; (800727c <UART_SetConfig+0x69c>)
 8006f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f56:	2b28      	cmp	r3, #40	; 0x28
 8006f58:	d86c      	bhi.n	8007034 <UART_SetConfig+0x454>
 8006f5a:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x380>)
 8006f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f60:	08007005 	.word	0x08007005
 8006f64:	08007035 	.word	0x08007035
 8006f68:	08007035 	.word	0x08007035
 8006f6c:	08007035 	.word	0x08007035
 8006f70:	08007035 	.word	0x08007035
 8006f74:	08007035 	.word	0x08007035
 8006f78:	08007035 	.word	0x08007035
 8006f7c:	08007035 	.word	0x08007035
 8006f80:	0800700d 	.word	0x0800700d
 8006f84:	08007035 	.word	0x08007035
 8006f88:	08007035 	.word	0x08007035
 8006f8c:	08007035 	.word	0x08007035
 8006f90:	08007035 	.word	0x08007035
 8006f94:	08007035 	.word	0x08007035
 8006f98:	08007035 	.word	0x08007035
 8006f9c:	08007035 	.word	0x08007035
 8006fa0:	08007015 	.word	0x08007015
 8006fa4:	08007035 	.word	0x08007035
 8006fa8:	08007035 	.word	0x08007035
 8006fac:	08007035 	.word	0x08007035
 8006fb0:	08007035 	.word	0x08007035
 8006fb4:	08007035 	.word	0x08007035
 8006fb8:	08007035 	.word	0x08007035
 8006fbc:	08007035 	.word	0x08007035
 8006fc0:	0800701d 	.word	0x0800701d
 8006fc4:	08007035 	.word	0x08007035
 8006fc8:	08007035 	.word	0x08007035
 8006fcc:	08007035 	.word	0x08007035
 8006fd0:	08007035 	.word	0x08007035
 8006fd4:	08007035 	.word	0x08007035
 8006fd8:	08007035 	.word	0x08007035
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	08007025 	.word	0x08007025
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	08007035 	.word	0x08007035
 8006fec:	08007035 	.word	0x08007035
 8006ff0:	08007035 	.word	0x08007035
 8006ff4:	08007035 	.word	0x08007035
 8006ff8:	08007035 	.word	0x08007035
 8006ffc:	08007035 	.word	0x08007035
 8007000:	0800702d 	.word	0x0800702d
 8007004:	2301      	movs	r3, #1
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e0bc      	b.n	8007186 <UART_SetConfig+0x5a6>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e0b8      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e0b4      	b.n	8007186 <UART_SetConfig+0x5a6>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e0b0      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007024:	2320      	movs	r3, #32
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e0ac      	b.n	8007186 <UART_SetConfig+0x5a6>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e0a8      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e0a4      	b.n	8007186 <UART_SetConfig+0x5a6>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a8f      	ldr	r2, [pc, #572]	; (8007280 <UART_SetConfig+0x6a0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d130      	bne.n	80070a8 <UART_SetConfig+0x4c8>
 8007046:	4b8d      	ldr	r3, [pc, #564]	; (800727c <UART_SetConfig+0x69c>)
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	2b05      	cmp	r3, #5
 8007050:	d826      	bhi.n	80070a0 <UART_SetConfig+0x4c0>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x478>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007071 	.word	0x08007071
 800705c:	08007079 	.word	0x08007079
 8007060:	08007081 	.word	0x08007081
 8007064:	08007089 	.word	0x08007089
 8007068:	08007091 	.word	0x08007091
 800706c:	08007099 	.word	0x08007099
 8007070:	2300      	movs	r3, #0
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007076:	e086      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007078:	2304      	movs	r3, #4
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707e:	e082      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007080:	2308      	movs	r3, #8
 8007082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007086:	e07e      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007088:	2310      	movs	r3, #16
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708e:	e07a      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007090:	2320      	movs	r3, #32
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007096:	e076      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007098:	2340      	movs	r3, #64	; 0x40
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e072      	b.n	8007186 <UART_SetConfig+0x5a6>
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e06e      	b.n	8007186 <UART_SetConfig+0x5a6>
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a75      	ldr	r2, [pc, #468]	; (8007284 <UART_SetConfig+0x6a4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d130      	bne.n	8007114 <UART_SetConfig+0x534>
 80070b2:	4b72      	ldr	r3, [pc, #456]	; (800727c <UART_SetConfig+0x69c>)
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	2b05      	cmp	r3, #5
 80070bc:	d826      	bhi.n	800710c <UART_SetConfig+0x52c>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <UART_SetConfig+0x4e4>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070dd 	.word	0x080070dd
 80070c8:	080070e5 	.word	0x080070e5
 80070cc:	080070ed 	.word	0x080070ed
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	080070fd 	.word	0x080070fd
 80070d8:	08007105 	.word	0x08007105
 80070dc:	2300      	movs	r3, #0
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e2:	e050      	b.n	8007186 <UART_SetConfig+0x5a6>
 80070e4:	2304      	movs	r3, #4
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ea:	e04c      	b.n	8007186 <UART_SetConfig+0x5a6>
 80070ec:	2308      	movs	r3, #8
 80070ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f2:	e048      	b.n	8007186 <UART_SetConfig+0x5a6>
 80070f4:	2310      	movs	r3, #16
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fa:	e044      	b.n	8007186 <UART_SetConfig+0x5a6>
 80070fc:	2320      	movs	r3, #32
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007102:	e040      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007104:	2340      	movs	r3, #64	; 0x40
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710a:	e03c      	b.n	8007186 <UART_SetConfig+0x5a6>
 800710c:	2380      	movs	r3, #128	; 0x80
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007112:	e038      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a5b      	ldr	r2, [pc, #364]	; (8007288 <UART_SetConfig+0x6a8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d130      	bne.n	8007180 <UART_SetConfig+0x5a0>
 800711e:	4b57      	ldr	r3, [pc, #348]	; (800727c <UART_SetConfig+0x69c>)
 8007120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b05      	cmp	r3, #5
 8007128:	d826      	bhi.n	8007178 <UART_SetConfig+0x598>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <UART_SetConfig+0x550>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007149 	.word	0x08007149
 8007134:	08007151 	.word	0x08007151
 8007138:	08007159 	.word	0x08007159
 800713c:	08007161 	.word	0x08007161
 8007140:	08007169 	.word	0x08007169
 8007144:	08007171 	.word	0x08007171
 8007148:	2302      	movs	r3, #2
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e01a      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007150:	2304      	movs	r3, #4
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e016      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007158:	2308      	movs	r3, #8
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e012      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007160:	2310      	movs	r3, #16
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007166:	e00e      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007168:	2320      	movs	r3, #32
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e00a      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007170:	2340      	movs	r3, #64	; 0x40
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e006      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007178:	2380      	movs	r3, #128	; 0x80
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717e:	e002      	b.n	8007186 <UART_SetConfig+0x5a6>
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a3f      	ldr	r2, [pc, #252]	; (8007288 <UART_SetConfig+0x6a8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	f040 80f8 	bne.w	8007382 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007192:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007196:	2b20      	cmp	r3, #32
 8007198:	dc46      	bgt.n	8007228 <UART_SetConfig+0x648>
 800719a:	2b02      	cmp	r3, #2
 800719c:	f2c0 8082 	blt.w	80072a4 <UART_SetConfig+0x6c4>
 80071a0:	3b02      	subs	r3, #2
 80071a2:	2b1e      	cmp	r3, #30
 80071a4:	d87e      	bhi.n	80072a4 <UART_SetConfig+0x6c4>
 80071a6:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <UART_SetConfig+0x5cc>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	0800722f 	.word	0x0800722f
 80071b0:	080072a5 	.word	0x080072a5
 80071b4:	08007237 	.word	0x08007237
 80071b8:	080072a5 	.word	0x080072a5
 80071bc:	080072a5 	.word	0x080072a5
 80071c0:	080072a5 	.word	0x080072a5
 80071c4:	08007247 	.word	0x08007247
 80071c8:	080072a5 	.word	0x080072a5
 80071cc:	080072a5 	.word	0x080072a5
 80071d0:	080072a5 	.word	0x080072a5
 80071d4:	080072a5 	.word	0x080072a5
 80071d8:	080072a5 	.word	0x080072a5
 80071dc:	080072a5 	.word	0x080072a5
 80071e0:	080072a5 	.word	0x080072a5
 80071e4:	08007257 	.word	0x08007257
 80071e8:	080072a5 	.word	0x080072a5
 80071ec:	080072a5 	.word	0x080072a5
 80071f0:	080072a5 	.word	0x080072a5
 80071f4:	080072a5 	.word	0x080072a5
 80071f8:	080072a5 	.word	0x080072a5
 80071fc:	080072a5 	.word	0x080072a5
 8007200:	080072a5 	.word	0x080072a5
 8007204:	080072a5 	.word	0x080072a5
 8007208:	080072a5 	.word	0x080072a5
 800720c:	080072a5 	.word	0x080072a5
 8007210:	080072a5 	.word	0x080072a5
 8007214:	080072a5 	.word	0x080072a5
 8007218:	080072a5 	.word	0x080072a5
 800721c:	080072a5 	.word	0x080072a5
 8007220:	080072a5 	.word	0x080072a5
 8007224:	08007297 	.word	0x08007297
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d037      	beq.n	800729c <UART_SetConfig+0x6bc>
 800722c:	e03a      	b.n	80072a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800722e:	f7fd fad3 	bl	80047d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007232:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007234:	e03c      	b.n	80072b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723a:	4618      	mov	r0, r3
 800723c:	f7fd fae2 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007244:	e034      	b.n	80072b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007246:	f107 0318 	add.w	r3, r7, #24
 800724a:	4618      	mov	r0, r3
 800724c:	f7fd fc2e 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007254:	e02c      	b.n	80072b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <UART_SetConfig+0x69c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b00      	cmp	r3, #0
 8007260:	d016      	beq.n	8007290 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007262:	4b06      	ldr	r3, [pc, #24]	; (800727c <UART_SetConfig+0x69c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	08db      	lsrs	r3, r3, #3
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	4a07      	ldr	r2, [pc, #28]	; (800728c <UART_SetConfig+0x6ac>)
 800726e:	fa22 f303 	lsr.w	r3, r2, r3
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007274:	e01c      	b.n	80072b0 <UART_SetConfig+0x6d0>
 8007276:	bf00      	nop
 8007278:	40011400 	.word	0x40011400
 800727c:	58024400 	.word	0x58024400
 8007280:	40007800 	.word	0x40007800
 8007284:	40007c00 	.word	0x40007c00
 8007288:	58000c00 	.word	0x58000c00
 800728c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007290:	4b9d      	ldr	r3, [pc, #628]	; (8007508 <UART_SetConfig+0x928>)
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007294:	e00c      	b.n	80072b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007296:	4b9d      	ldr	r3, [pc, #628]	; (800750c <UART_SetConfig+0x92c>)
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800729a:	e009      	b.n	80072b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800729c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a2:	e005      	b.n	80072b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80072ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 81de 	beq.w	8007674 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	4a94      	ldr	r2, [pc, #592]	; (8007510 <UART_SetConfig+0x930>)
 80072be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	4613      	mov	r3, r2
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	4413      	add	r3, r2
 80072d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d8:	429a      	cmp	r2, r3
 80072da:	d305      	bcc.n	80072e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d903      	bls.n	80072f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072ee:	e1c1      	b.n	8007674 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f2:	2200      	movs	r2, #0
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	60fa      	str	r2, [r7, #12]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	4a84      	ldr	r2, [pc, #528]	; (8007510 <UART_SetConfig+0x930>)
 80072fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007302:	b29b      	uxth	r3, r3
 8007304:	2200      	movs	r2, #0
 8007306:	603b      	str	r3, [r7, #0]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800730e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007312:	f7f8 ffe9 	bl	80002e8 <__aeabi_uldivmod>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	020b      	lsls	r3, r1, #8
 8007328:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800732c:	0202      	lsls	r2, r0, #8
 800732e:	6979      	ldr	r1, [r7, #20]
 8007330:	6849      	ldr	r1, [r1, #4]
 8007332:	0849      	lsrs	r1, r1, #1
 8007334:	2000      	movs	r0, #0
 8007336:	460c      	mov	r4, r1
 8007338:	4605      	mov	r5, r0
 800733a:	eb12 0804 	adds.w	r8, r2, r4
 800733e:	eb43 0905 	adc.w	r9, r3, r5
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	469a      	mov	sl, r3
 800734a:	4693      	mov	fp, r2
 800734c:	4652      	mov	r2, sl
 800734e:	465b      	mov	r3, fp
 8007350:	4640      	mov	r0, r8
 8007352:	4649      	mov	r1, r9
 8007354:	f7f8 ffc8 	bl	80002e8 <__aeabi_uldivmod>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4613      	mov	r3, r2
 800735e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007366:	d308      	bcc.n	800737a <UART_SetConfig+0x79a>
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800736e:	d204      	bcs.n	800737a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007376:	60da      	str	r2, [r3, #12]
 8007378:	e17c      	b.n	8007674 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007380:	e178      	b.n	8007674 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800738a:	f040 80c5 	bne.w	8007518 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800738e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007392:	2b20      	cmp	r3, #32
 8007394:	dc48      	bgt.n	8007428 <UART_SetConfig+0x848>
 8007396:	2b00      	cmp	r3, #0
 8007398:	db7b      	blt.n	8007492 <UART_SetConfig+0x8b2>
 800739a:	2b20      	cmp	r3, #32
 800739c:	d879      	bhi.n	8007492 <UART_SetConfig+0x8b2>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <UART_SetConfig+0x7c4>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	0800742f 	.word	0x0800742f
 80073a8:	08007437 	.word	0x08007437
 80073ac:	08007493 	.word	0x08007493
 80073b0:	08007493 	.word	0x08007493
 80073b4:	0800743f 	.word	0x0800743f
 80073b8:	08007493 	.word	0x08007493
 80073bc:	08007493 	.word	0x08007493
 80073c0:	08007493 	.word	0x08007493
 80073c4:	0800744f 	.word	0x0800744f
 80073c8:	08007493 	.word	0x08007493
 80073cc:	08007493 	.word	0x08007493
 80073d0:	08007493 	.word	0x08007493
 80073d4:	08007493 	.word	0x08007493
 80073d8:	08007493 	.word	0x08007493
 80073dc:	08007493 	.word	0x08007493
 80073e0:	08007493 	.word	0x08007493
 80073e4:	0800745f 	.word	0x0800745f
 80073e8:	08007493 	.word	0x08007493
 80073ec:	08007493 	.word	0x08007493
 80073f0:	08007493 	.word	0x08007493
 80073f4:	08007493 	.word	0x08007493
 80073f8:	08007493 	.word	0x08007493
 80073fc:	08007493 	.word	0x08007493
 8007400:	08007493 	.word	0x08007493
 8007404:	08007493 	.word	0x08007493
 8007408:	08007493 	.word	0x08007493
 800740c:	08007493 	.word	0x08007493
 8007410:	08007493 	.word	0x08007493
 8007414:	08007493 	.word	0x08007493
 8007418:	08007493 	.word	0x08007493
 800741c:	08007493 	.word	0x08007493
 8007420:	08007493 	.word	0x08007493
 8007424:	08007485 	.word	0x08007485
 8007428:	2b40      	cmp	r3, #64	; 0x40
 800742a:	d02e      	beq.n	800748a <UART_SetConfig+0x8aa>
 800742c:	e031      	b.n	8007492 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800742e:	f7fb f9dd 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 8007432:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007434:	e033      	b.n	800749e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007436:	f7fb f9ef 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 800743a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800743c:	e02f      	b.n	800749e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800743e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007442:	4618      	mov	r0, r3
 8007444:	f7fd f9de 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800744c:	e027      	b.n	800749e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800744e:	f107 0318 	add.w	r3, r7, #24
 8007452:	4618      	mov	r0, r3
 8007454:	f7fd fb2a 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800745c:	e01f      	b.n	800749e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800745e:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <UART_SetConfig+0x934>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800746a:	4b2a      	ldr	r3, [pc, #168]	; (8007514 <UART_SetConfig+0x934>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	08db      	lsrs	r3, r3, #3
 8007470:	f003 0303 	and.w	r3, r3, #3
 8007474:	4a24      	ldr	r2, [pc, #144]	; (8007508 <UART_SetConfig+0x928>)
 8007476:	fa22 f303 	lsr.w	r3, r2, r3
 800747a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800747c:	e00f      	b.n	800749e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800747e:	4b22      	ldr	r3, [pc, #136]	; (8007508 <UART_SetConfig+0x928>)
 8007480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007482:	e00c      	b.n	800749e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007484:	4b21      	ldr	r3, [pc, #132]	; (800750c <UART_SetConfig+0x92c>)
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007488:	e009      	b.n	800749e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007490:	e005      	b.n	800749e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800749c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80e7 	beq.w	8007674 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	4a19      	ldr	r2, [pc, #100]	; (8007510 <UART_SetConfig+0x930>)
 80074ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b0:	461a      	mov	r2, r3
 80074b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b8:	005a      	lsls	r2, r3, #1
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	085b      	lsrs	r3, r3, #1
 80074c0:	441a      	add	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	2b0f      	cmp	r3, #15
 80074d0:	d916      	bls.n	8007500 <UART_SetConfig+0x920>
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d8:	d212      	bcs.n	8007500 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f023 030f 	bic.w	r3, r3, #15
 80074e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	085b      	lsrs	r3, r3, #1
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80074f2:	4313      	orrs	r3, r2
 80074f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	e0b9      	b.n	8007674 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007506:	e0b5      	b.n	8007674 <UART_SetConfig+0xa94>
 8007508:	03d09000 	.word	0x03d09000
 800750c:	003d0900 	.word	0x003d0900
 8007510:	0800b4ac 	.word	0x0800b4ac
 8007514:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007518:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800751c:	2b20      	cmp	r3, #32
 800751e:	dc49      	bgt.n	80075b4 <UART_SetConfig+0x9d4>
 8007520:	2b00      	cmp	r3, #0
 8007522:	db7c      	blt.n	800761e <UART_SetConfig+0xa3e>
 8007524:	2b20      	cmp	r3, #32
 8007526:	d87a      	bhi.n	800761e <UART_SetConfig+0xa3e>
 8007528:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <UART_SetConfig+0x950>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	080075bb 	.word	0x080075bb
 8007534:	080075c3 	.word	0x080075c3
 8007538:	0800761f 	.word	0x0800761f
 800753c:	0800761f 	.word	0x0800761f
 8007540:	080075cb 	.word	0x080075cb
 8007544:	0800761f 	.word	0x0800761f
 8007548:	0800761f 	.word	0x0800761f
 800754c:	0800761f 	.word	0x0800761f
 8007550:	080075db 	.word	0x080075db
 8007554:	0800761f 	.word	0x0800761f
 8007558:	0800761f 	.word	0x0800761f
 800755c:	0800761f 	.word	0x0800761f
 8007560:	0800761f 	.word	0x0800761f
 8007564:	0800761f 	.word	0x0800761f
 8007568:	0800761f 	.word	0x0800761f
 800756c:	0800761f 	.word	0x0800761f
 8007570:	080075eb 	.word	0x080075eb
 8007574:	0800761f 	.word	0x0800761f
 8007578:	0800761f 	.word	0x0800761f
 800757c:	0800761f 	.word	0x0800761f
 8007580:	0800761f 	.word	0x0800761f
 8007584:	0800761f 	.word	0x0800761f
 8007588:	0800761f 	.word	0x0800761f
 800758c:	0800761f 	.word	0x0800761f
 8007590:	0800761f 	.word	0x0800761f
 8007594:	0800761f 	.word	0x0800761f
 8007598:	0800761f 	.word	0x0800761f
 800759c:	0800761f 	.word	0x0800761f
 80075a0:	0800761f 	.word	0x0800761f
 80075a4:	0800761f 	.word	0x0800761f
 80075a8:	0800761f 	.word	0x0800761f
 80075ac:	0800761f 	.word	0x0800761f
 80075b0:	08007611 	.word	0x08007611
 80075b4:	2b40      	cmp	r3, #64	; 0x40
 80075b6:	d02e      	beq.n	8007616 <UART_SetConfig+0xa36>
 80075b8:	e031      	b.n	800761e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075ba:	f7fb f917 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 80075be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075c0:	e033      	b.n	800762a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c2:	f7fb f929 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 80075c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075c8:	e02f      	b.n	800762a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fd f918 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075d8:	e027      	b.n	800762a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075da:	f107 0318 	add.w	r3, r7, #24
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fd fa64 	bl	8004aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e8:	e01f      	b.n	800762a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ea:	4b2d      	ldr	r3, [pc, #180]	; (80076a0 <UART_SetConfig+0xac0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d009      	beq.n	800760a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075f6:	4b2a      	ldr	r3, [pc, #168]	; (80076a0 <UART_SetConfig+0xac0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	08db      	lsrs	r3, r3, #3
 80075fc:	f003 0303 	and.w	r3, r3, #3
 8007600:	4a28      	ldr	r2, [pc, #160]	; (80076a4 <UART_SetConfig+0xac4>)
 8007602:	fa22 f303 	lsr.w	r3, r2, r3
 8007606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007608:	e00f      	b.n	800762a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800760a:	4b26      	ldr	r3, [pc, #152]	; (80076a4 <UART_SetConfig+0xac4>)
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800760e:	e00c      	b.n	800762a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007610:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <UART_SetConfig+0xac8>)
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007614:	e009      	b.n	800762a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800761c:	e005      	b.n	800762a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007628:	bf00      	nop
    }

    if (pclk != 0U)
 800762a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d021      	beq.n	8007674 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <UART_SetConfig+0xacc>)
 8007636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800763a:	461a      	mov	r2, r3
 800763c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	441a      	add	r2, r3
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007652:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	2b0f      	cmp	r3, #15
 8007658:	d909      	bls.n	800766e <UART_SetConfig+0xa8e>
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007660:	d205      	bcs.n	800766e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	b29a      	uxth	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60da      	str	r2, [r3, #12]
 800766c:	e002      	b.n	8007674 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2201      	movs	r2, #1
 8007678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2201      	movs	r2, #1
 8007680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2200      	movs	r2, #0
 8007688:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2200      	movs	r2, #0
 800768e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007690:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007694:	4618      	mov	r0, r3
 8007696:	3748      	adds	r7, #72	; 0x48
 8007698:	46bd      	mov	sp, r7
 800769a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800769e:	bf00      	nop
 80076a0:	58024400 	.word	0x58024400
 80076a4:	03d09000 	.word	0x03d09000
 80076a8:	003d0900 	.word	0x003d0900
 80076ac:	0800b4ac 	.word	0x0800b4ac

080076b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01a      	beq.n	80077c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ae:	d10a      	bne.n	80077c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	605a      	str	r2, [r3, #4]
  }
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b098      	sub	sp, #96	; 0x60
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007804:	f7f9 fc2a 	bl	800105c <HAL_GetTick>
 8007808:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0308 	and.w	r3, r3, #8
 8007814:	2b08      	cmp	r3, #8
 8007816:	d12f      	bne.n	8007878 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007820:	2200      	movs	r2, #0
 8007822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f88e 	bl	8007948 <UART_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d022      	beq.n	8007878 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007846:	653b      	str	r3, [r7, #80]	; 0x50
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007850:	647b      	str	r3, [r7, #68]	; 0x44
 8007852:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800785e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e063      	b.n	8007940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b04      	cmp	r3, #4
 8007884:	d149      	bne.n	800791a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007886:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800788e:	2200      	movs	r2, #0
 8007890:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f857 	bl	8007948 <UART_WaitOnFlagUntilTimeout>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d03c      	beq.n	800791a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	623b      	str	r3, [r7, #32]
   return(result);
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078be:	633b      	str	r3, [r7, #48]	; 0x30
 80078c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e6      	bne.n	80078a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078f2:	61fa      	str	r2, [r7, #28]
 80078f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	69b9      	ldr	r1, [r7, #24]
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e5      	bne.n	80078d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e012      	b.n	8007940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3758      	adds	r7, #88	; 0x58
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007958:	e049      	b.n	80079ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007960:	d045      	beq.n	80079ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007962:	f7f9 fb7b 	bl	800105c <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	429a      	cmp	r2, r3
 8007970:	d302      	bcc.n	8007978 <UART_WaitOnFlagUntilTimeout+0x30>
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e048      	b.n	8007a0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0304 	and.w	r3, r3, #4
 8007986:	2b00      	cmp	r3, #0
 8007988:	d031      	beq.n	80079ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b08      	cmp	r3, #8
 8007996:	d110      	bne.n	80079ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2208      	movs	r2, #8
 800799e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 f839 	bl	8007a18 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2208      	movs	r2, #8
 80079aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e029      	b.n	8007a0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c8:	d111      	bne.n	80079ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f81f 	bl	8007a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e00f      	b.n	8007a0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69da      	ldr	r2, [r3, #28]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4013      	ands	r3, r2
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	bf0c      	ite	eq
 80079fe:	2301      	moveq	r3, #1
 8007a00:	2300      	movne	r3, #0
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d0a6      	beq.n	800795a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b095      	sub	sp, #84	; 0x54
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e6      	bne.n	8007a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	4b1e      	ldr	r3, [pc, #120]	; (8007ae0 <UART_EndRxTransfer+0xc8>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e5      	bne.n	8007a52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d118      	bne.n	8007ac0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f023 0310 	bic.w	r3, r3, #16
 8007aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6979      	ldr	r1, [r7, #20]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e6      	bne.n	8007a8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007ad4:	bf00      	nop
 8007ad6:	3754      	adds	r7, #84	; 0x54
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	effffffe 	.word	0xeffffffe

08007ae4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d101      	bne.n	8007afa <HAL_UARTEx_DisableFifoMode+0x16>
 8007af6:	2302      	movs	r3, #2
 8007af8:	e027      	b.n	8007b4a <HAL_UARTEx_DisableFifoMode+0x66>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2224      	movs	r2, #36	; 0x24
 8007b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0201 	bic.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e02d      	b.n	8007bca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2224      	movs	r2, #36	; 0x24
 8007b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 0201 	bic.w	r2, r2, #1
 8007b94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f850 	bl	8007c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e02d      	b.n	8007c46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2224      	movs	r2, #36	; 0x24
 8007bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0201 	bic.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f812 	bl	8007c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d108      	bne.n	8007c72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c70:	e031      	b.n	8007cd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c72:	2310      	movs	r3, #16
 8007c74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c76:	2310      	movs	r3, #16
 8007c78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	0e5b      	lsrs	r3, r3, #25
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	0f5b      	lsrs	r3, r3, #29
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	7b3a      	ldrb	r2, [r7, #12]
 8007c9e:	4911      	ldr	r1, [pc, #68]	; (8007ce4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ca0:	5c8a      	ldrb	r2, [r1, r2]
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ca6:	7b3a      	ldrb	r2, [r7, #12]
 8007ca8:	490f      	ldr	r1, [pc, #60]	; (8007ce8 <UARTEx_SetNbDataToProcess+0x98>)
 8007caa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cac:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	7b7a      	ldrb	r2, [r7, #13]
 8007cbc:	4909      	ldr	r1, [pc, #36]	; (8007ce4 <UARTEx_SetNbDataToProcess+0x94>)
 8007cbe:	5c8a      	ldrb	r2, [r1, r2]
 8007cc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cc4:	7b7a      	ldrb	r2, [r7, #13]
 8007cc6:	4908      	ldr	r1, [pc, #32]	; (8007ce8 <UARTEx_SetNbDataToProcess+0x98>)
 8007cc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cd6:	bf00      	nop
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	0800b4c4 	.word	0x0800b4c4
 8007ce8:	0800b4cc 	.word	0x0800b4cc

08007cec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007cec:	b084      	sub	sp, #16
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	f107 001c 	add.w	r0, r7, #28
 8007cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007d02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007d04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007d06:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8007d0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8007d0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8007d12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <SDMMC_Init+0x50>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	b004      	add	sp, #16
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	ffc02c00 	.word	0xffc02c00

08007d40 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f043 0203 	orr.w	r2, r3, #3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0303 	and.w	r3, r3, #3
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
	...

08007dbc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007dda:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007de0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007de6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <SDMMC_SendCommand+0x50>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	fffee0c0 	.word	0xfffee0c0

08007e10 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	b2db      	uxtb	r3, r3
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b085      	sub	sp, #20
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3314      	adds	r3, #20
 8007e38:	461a      	mov	r2, r3
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007e76:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007e7c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007e82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0

}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007eb6:	2310      	movs	r3, #16
 8007eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ec8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007eca:	f107 0308 	add.w	r3, r7, #8
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7ff ff73 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eda:	2110      	movs	r1, #16
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fa5f 	bl	80083a0 <SDMMC_GetCmdResp1>
 8007ee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b088      	sub	sp, #32
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007efc:	2311      	movs	r3, #17
 8007efe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f06:	2300      	movs	r3, #0
 8007f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f10:	f107 0308 	add.w	r3, r7, #8
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7ff ff50 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f20:	2111      	movs	r1, #17
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fa3c 	bl	80083a0 <SDMMC_GetCmdResp1>
 8007f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3720      	adds	r7, #32
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007f42:	2312      	movs	r3, #18
 8007f44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f56:	f107 0308 	add.w	r3, r7, #8
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff ff2d 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f66:	2112      	movs	r1, #18
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa19 	bl	80083a0 <SDMMC_GetCmdResp1>
 8007f6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f70:	69fb      	ldr	r3, [r7, #28]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3720      	adds	r7, #32
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b088      	sub	sp, #32
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007f88:	2318      	movs	r3, #24
 8007f8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f9c:	f107 0308 	add.w	r3, r7, #8
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff ff0a 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fac:	2118      	movs	r1, #24
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f9f6 	bl	80083a0 <SDMMC_GetCmdResp1>
 8007fb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007fce:	2319      	movs	r3, #25
 8007fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fe0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fe2:	f107 0308 	add.w	r3, r7, #8
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fee7 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff2:	2119      	movs	r1, #25
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f9d3 	bl	80083a0 <SDMMC_GetCmdResp1>
 8007ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008014:	230c      	movs	r3, #12
 8008016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800801c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800801e:	2300      	movs	r3, #0
 8008020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008026:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008040:	f107 0308 	add.w	r3, r7, #8
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff feb8 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800804c:	4a0b      	ldr	r2, [pc, #44]	; (800807c <SDMMC_CmdStopTransfer+0x74>)
 800804e:	210c      	movs	r1, #12
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f9a5 	bl	80083a0 <SDMMC_GetCmdResp1>
 8008056:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800806a:	d101      	bne.n	8008070 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800806c:	2300      	movs	r3, #0
 800806e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008070:	69fb      	ldr	r3, [r7, #28]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	05f5e100 	.word	0x05f5e100

08008080 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800808e:	2307      	movs	r3, #7
 8008090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008098:	2300      	movs	r3, #0
 800809a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800809c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080a2:	f107 0308 	add.w	r3, r7, #8
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff fe87 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80080ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b2:	2107      	movs	r1, #7
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f973 	bl	80083a0 <SDMMC_GetCmdResp1>
 80080ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080bc:	69fb      	ldr	r3, [r7, #28]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3720      	adds	r7, #32
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b088      	sub	sp, #32
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80080d6:	2300      	movs	r3, #0
 80080d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080e4:	f107 0308 	add.w	r3, r7, #8
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fe66 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fb97 	bl	8008824 <SDMMC_GetCmdError>
 80080f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080f8:	69fb      	ldr	r3, [r7, #28]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b088      	sub	sp, #32
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800810a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800810e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008110:	2308      	movs	r3, #8
 8008112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800811a:	2300      	movs	r3, #0
 800811c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800811e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008122:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008124:	f107 0308 	add.w	r3, r7, #8
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff fe46 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fb29 	bl	8008788 <SDMMC_GetCmdResp7>
 8008136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008138:	69fb      	ldr	r3, [r7, #28]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3720      	adds	r7, #32
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b088      	sub	sp, #32
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008150:	2337      	movs	r3, #55	; 0x37
 8008152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800815e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008162:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008164:	f107 0308 	add.w	r3, r7, #8
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff fe26 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008170:	f241 3288 	movw	r2, #5000	; 0x1388
 8008174:	2137      	movs	r1, #55	; 0x37
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f912 	bl	80083a0 <SDMMC_GetCmdResp1>
 800817c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800817e:	69fb      	ldr	r3, [r7, #28]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008196:	2329      	movs	r3, #41	; 0x29
 8008198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800819a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800819e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081a0:	2300      	movs	r3, #0
 80081a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081aa:	f107 0308 	add.w	r3, r7, #8
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fe03 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa2e 	bl	8008618 <SDMMC_GetCmdResp3>
 80081bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081be:	69fb      	ldr	r3, [r7, #28]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3720      	adds	r7, #32
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80081d6:	2306      	movs	r3, #6
 80081d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081ea:	f107 0308 	add.w	r3, r7, #8
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7ff fde3 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80081f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081fa:	2106      	movs	r1, #6
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8cf 	bl	80083a0 <SDMMC_GetCmdResp1>
 8008202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008204:	69fb      	ldr	r3, [r7, #28]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3720      	adds	r7, #32
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b088      	sub	sp, #32
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800821a:	2333      	movs	r3, #51	; 0x33
 800821c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800821e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800822c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800822e:	f107 0308 	add.w	r3, r7, #8
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff fdc1 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800823a:	f241 3288 	movw	r2, #5000	; 0x1388
 800823e:	2133      	movs	r1, #51	; 0x33
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f8ad 	bl	80083a0 <SDMMC_GetCmdResp1>
 8008246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008248:	69fb      	ldr	r3, [r7, #28]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b088      	sub	sp, #32
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800825e:	2302      	movs	r3, #2
 8008260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008262:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800826c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008270:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff fd9f 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f980 	bl	8008584 <SDMMC_GetCmdResp2>
 8008284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008286:	69fb      	ldr	r3, [r7, #28]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3720      	adds	r7, #32
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b088      	sub	sp, #32
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800829e:	2309      	movs	r3, #9
 80082a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80082a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80082a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082a8:	2300      	movs	r3, #0
 80082aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082b2:	f107 0308 	add.w	r3, r7, #8
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff fd7f 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f960 	bl	8008584 <SDMMC_GetCmdResp2>
 80082c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082c6:	69fb      	ldr	r3, [r7, #28]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3720      	adds	r7, #32
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80082de:	2303      	movs	r3, #3
 80082e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082f2:	f107 0308 	add.w	r3, r7, #8
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff fd5f 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	2103      	movs	r1, #3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f9c8 	bl	8008698 <SDMMC_GetCmdResp6>
 8008308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800830a:	69fb      	ldr	r3, [r7, #28]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008322:	230d      	movs	r3, #13
 8008324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800832a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008334:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008336:	f107 0308 	add.w	r3, r7, #8
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7ff fd3d 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008342:	f241 3288 	movw	r2, #5000	; 0x1388
 8008346:	210d      	movs	r1, #13
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f829 	bl	80083a0 <SDMMC_GetCmdResp1>
 800834e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008350:	69fb      	ldr	r3, [r7, #28]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3720      	adds	r7, #32
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b088      	sub	sp, #32
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008366:	230d      	movs	r3, #13
 8008368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800836a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800836e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008378:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800837a:	f107 0308 	add.w	r3, r7, #8
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff fd1b 	bl	8007dbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008386:	f241 3288 	movw	r2, #5000	; 0x1388
 800838a:	210d      	movs	r1, #13
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f807 	bl	80083a0 <SDMMC_GetCmdResp1>
 8008392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008394:	69fb      	ldr	r3, [r7, #28]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3720      	adds	r7, #32
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	460b      	mov	r3, r1
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80083ae:	4b70      	ldr	r3, [pc, #448]	; (8008570 <SDMMC_GetCmdResp1+0x1d0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a70      	ldr	r2, [pc, #448]	; (8008574 <SDMMC_GetCmdResp1+0x1d4>)
 80083b4:	fba2 2303 	umull	r2, r3, r2, r3
 80083b8:	0a5a      	lsrs	r2, r3, #9
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	fb02 f303 	mul.w	r3, r2, r3
 80083c0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	1e5a      	subs	r2, r3, #1
 80083c6:	61fa      	str	r2, [r7, #28]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d102      	bne.n	80083d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083d0:	e0c9      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	4b67      	ldr	r3, [pc, #412]	; (8008578 <SDMMC_GetCmdResp1+0x1d8>)
 80083dc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0ef      	beq.n	80083c2 <SDMMC_GetCmdResp1+0x22>
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1ea      	bne.n	80083c2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2204      	movs	r2, #4
 80083fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083fe:	2304      	movs	r3, #4
 8008400:	e0b1      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008414:	2301      	movs	r3, #1
 8008416:	e0a6      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4a58      	ldr	r2, [pc, #352]	; (800857c <SDMMC_GetCmdResp1+0x1dc>)
 800841c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fcf6 	bl	8007e10 <SDMMC_GetCommandResponse>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	4293      	cmp	r3, r2
 800842c:	d001      	beq.n	8008432 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800842e:	2301      	movs	r3, #1
 8008430:	e099      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008432:	2100      	movs	r1, #0
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f7ff fcf8 	bl	8007e2a <SDMMC_GetResponse>
 800843a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	4b50      	ldr	r3, [pc, #320]	; (8008580 <SDMMC_GetCmdResp1+0x1e0>)
 8008440:	4013      	ands	r3, r2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008446:	2300      	movs	r3, #0
 8008448:	e08d      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	da02      	bge.n	8008456 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008454:	e087      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008460:	2340      	movs	r3, #64	; 0x40
 8008462:	e080      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800846e:	2380      	movs	r3, #128	; 0x80
 8008470:	e079      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800847c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008480:	e071      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800848c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008490:	e069      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800849c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a0:	e061      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80084ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084b0:	e059      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80084bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084c0:	e051      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80084cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084d0:	e049      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80084dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084e0:	e041      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80084ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084f0:	e039      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80084fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008500:	e031      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800850c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008510:	e029      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800851c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008520:	e021      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800852c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008530:	e019      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800853c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008540:	e011      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800854c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008550:	e009      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f003 0308 	and.w	r3, r3, #8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800855c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008560:	e001      	b.n	8008566 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008566:	4618      	mov	r0, r3
 8008568:	3720      	adds	r7, #32
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	24000000 	.word	0x24000000
 8008574:	10624dd3 	.word	0x10624dd3
 8008578:	00200045 	.word	0x00200045
 800857c:	002000c5 	.word	0x002000c5
 8008580:	fdffe008 	.word	0xfdffe008

08008584 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800858c:	4b1f      	ldr	r3, [pc, #124]	; (800860c <SDMMC_GetCmdResp2+0x88>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <SDMMC_GetCmdResp2+0x8c>)
 8008592:	fba2 2303 	umull	r2, r3, r2, r3
 8008596:	0a5b      	lsrs	r3, r3, #9
 8008598:	f241 3288 	movw	r2, #5000	; 0x1388
 800859c:	fb02 f303 	mul.w	r3, r2, r3
 80085a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	1e5a      	subs	r2, r3, #1
 80085a6:	60fa      	str	r2, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085b0:	e026      	b.n	8008600 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0ef      	beq.n	80085a2 <SDMMC_GetCmdResp2+0x1e>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1ea      	bne.n	80085a2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d004      	beq.n	80085e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2204      	movs	r2, #4
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085de:	2304      	movs	r3, #4
 80085e0:	e00e      	b.n	8008600 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e003      	b.n	8008600 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a06      	ldr	r2, [pc, #24]	; (8008614 <SDMMC_GetCmdResp2+0x90>)
 80085fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	24000000 	.word	0x24000000
 8008610:	10624dd3 	.word	0x10624dd3
 8008614:	002000c5 	.word	0x002000c5

08008618 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008620:	4b1a      	ldr	r3, [pc, #104]	; (800868c <SDMMC_GetCmdResp3+0x74>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a1a      	ldr	r2, [pc, #104]	; (8008690 <SDMMC_GetCmdResp3+0x78>)
 8008626:	fba2 2303 	umull	r2, r3, r2, r3
 800862a:	0a5b      	lsrs	r3, r3, #9
 800862c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008630:	fb02 f303 	mul.w	r3, r2, r3
 8008634:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	1e5a      	subs	r2, r3, #1
 800863a:	60fa      	str	r2, [r7, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008640:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008644:	e01b      	b.n	800867e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0ef      	beq.n	8008636 <SDMMC_GetCmdResp3+0x1e>
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1ea      	bne.n	8008636 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2204      	movs	r2, #4
 8008670:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008672:	2304      	movs	r3, #4
 8008674:	e003      	b.n	800867e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a06      	ldr	r2, [pc, #24]	; (8008694 <SDMMC_GetCmdResp3+0x7c>)
 800867a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	24000000 	.word	0x24000000
 8008690:	10624dd3 	.word	0x10624dd3
 8008694:	002000c5 	.word	0x002000c5

08008698 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b088      	sub	sp, #32
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	460b      	mov	r3, r1
 80086a2:	607a      	str	r2, [r7, #4]
 80086a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80086a6:	4b35      	ldr	r3, [pc, #212]	; (800877c <SDMMC_GetCmdResp6+0xe4>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a35      	ldr	r2, [pc, #212]	; (8008780 <SDMMC_GetCmdResp6+0xe8>)
 80086ac:	fba2 2303 	umull	r2, r3, r2, r3
 80086b0:	0a5b      	lsrs	r3, r3, #9
 80086b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b6:	fb02 f303 	mul.w	r3, r2, r3
 80086ba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	1e5a      	subs	r2, r3, #1
 80086c0:	61fa      	str	r2, [r7, #28]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086ca:	e052      	b.n	8008772 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0ef      	beq.n	80086bc <SDMMC_GetCmdResp6+0x24>
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1ea      	bne.n	80086bc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d004      	beq.n	80086fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2204      	movs	r2, #4
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086f8:	2304      	movs	r3, #4
 80086fa:	e03a      	b.n	8008772 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800870e:	2301      	movs	r3, #1
 8008710:	e02f      	b.n	8008772 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f7ff fb7c 	bl	8007e10 <SDMMC_GetCommandResponse>
 8008718:	4603      	mov	r3, r0
 800871a:	461a      	mov	r2, r3
 800871c:	7afb      	ldrb	r3, [r7, #11]
 800871e:	4293      	cmp	r3, r2
 8008720:	d001      	beq.n	8008726 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008722:	2301      	movs	r3, #1
 8008724:	e025      	b.n	8008772 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4a16      	ldr	r2, [pc, #88]	; (8008784 <SDMMC_GetCmdResp6+0xec>)
 800872a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800872c:	2100      	movs	r1, #0
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7ff fb7b 	bl	8007e2a <SDMMC_GetResponse>
 8008734:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d106      	bne.n	800874e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	0c1b      	lsrs	r3, r3, #16
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800874a:	2300      	movs	r3, #0
 800874c:	e011      	b.n	8008772 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800875c:	e009      	b.n	8008772 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800876c:	e001      	b.n	8008772 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800876e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008772:	4618      	mov	r0, r3
 8008774:	3720      	adds	r7, #32
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	24000000 	.word	0x24000000
 8008780:	10624dd3 	.word	0x10624dd3
 8008784:	002000c5 	.word	0x002000c5

08008788 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008790:	4b22      	ldr	r3, [pc, #136]	; (800881c <SDMMC_GetCmdResp7+0x94>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a22      	ldr	r2, [pc, #136]	; (8008820 <SDMMC_GetCmdResp7+0x98>)
 8008796:	fba2 2303 	umull	r2, r3, r2, r3
 800879a:	0a5b      	lsrs	r3, r3, #9
 800879c:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a0:	fb02 f303 	mul.w	r3, r2, r3
 80087a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	1e5a      	subs	r2, r3, #1
 80087aa:	60fa      	str	r2, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087b4:	e02c      	b.n	8008810 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0ef      	beq.n	80087a6 <SDMMC_GetCmdResp7+0x1e>
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1ea      	bne.n	80087a6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2204      	movs	r2, #4
 80087e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087e2:	2304      	movs	r3, #4
 80087e4:	e014      	b.n	8008810 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d004      	beq.n	80087fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e009      	b.n	8008810 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2240      	movs	r2, #64	; 0x40
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800880e:	2300      	movs	r3, #0

}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	24000000 	.word	0x24000000
 8008820:	10624dd3 	.word	0x10624dd3

08008824 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800882c:	4b11      	ldr	r3, [pc, #68]	; (8008874 <SDMMC_GetCmdError+0x50>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a11      	ldr	r2, [pc, #68]	; (8008878 <SDMMC_GetCmdError+0x54>)
 8008832:	fba2 2303 	umull	r2, r3, r2, r3
 8008836:	0a5b      	lsrs	r3, r3, #9
 8008838:	f241 3288 	movw	r2, #5000	; 0x1388
 800883c:	fb02 f303 	mul.w	r3, r2, r3
 8008840:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1e5a      	subs	r2, r3, #1
 8008846:	60fa      	str	r2, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800884c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008850:	e009      	b.n	8008866 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0f1      	beq.n	8008842 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a06      	ldr	r2, [pc, #24]	; (800887c <SDMMC_GetCmdError+0x58>)
 8008862:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	24000000 	.word	0x24000000
 8008878:	10624dd3 	.word	0x10624dd3
 800887c:	002000c5 	.word	0x002000c5

08008880 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008884:	4904      	ldr	r1, [pc, #16]	; (8008898 <MX_FATFS_Init+0x18>)
 8008886:	4805      	ldr	r0, [pc, #20]	; (800889c <MX_FATFS_Init+0x1c>)
 8008888:	f002 fc8a 	bl	800b1a0 <FATFS_LinkDriver>
 800888c:	4603      	mov	r3, r0
 800888e:	461a      	mov	r2, r3
 8008890:	4b03      	ldr	r3, [pc, #12]	; (80088a0 <MX_FATFS_Init+0x20>)
 8008892:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008894:	bf00      	nop
 8008896:	bd80      	pop	{r7, pc}
 8008898:	24000144 	.word	0x24000144
 800889c:	0800b4d4 	.word	0x0800b4d4
 80088a0:	24000140 	.word	0x24000140

080088a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80088a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80088be:	f000 f879 	bl	80089b4 <BSP_SD_IsDetected>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d001      	beq.n	80088cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80088c8:	2302      	movs	r3, #2
 80088ca:	e012      	b.n	80088f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80088cc:	480b      	ldr	r0, [pc, #44]	; (80088fc <BSP_SD_Init+0x48>)
 80088ce:	f7fc fcf7 	bl	80052c0 <HAL_SD_Init>
 80088d2:	4603      	mov	r3, r0
 80088d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d109      	bne.n	80088f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80088dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80088e0:	4806      	ldr	r0, [pc, #24]	; (80088fc <BSP_SD_Init+0x48>)
 80088e2:	f7fd fbb3 	bl	800604c <HAL_SD_ConfigWideBusOperation>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80088f0:	79fb      	ldrb	r3, [r7, #7]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	2400002c 	.word	0x2400002c

08008900 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	68f9      	ldr	r1, [r7, #12]
 800891c:	4806      	ldr	r0, [pc, #24]	; (8008938 <BSP_SD_ReadBlocks+0x38>)
 800891e:	f7fc fdef 	bl	8005500 <HAL_SD_ReadBlocks>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	2400002c 	.word	0x2400002c

0800893c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af02      	add	r7, sp, #8
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	4806      	ldr	r0, [pc, #24]	; (8008974 <BSP_SD_WriteBlocks+0x38>)
 800895a:	f7fc ff5b 	bl	8005814 <HAL_SD_WriteBlocks>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	2400002c 	.word	0x2400002c

08008978 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800897c:	4805      	ldr	r0, [pc, #20]	; (8008994 <BSP_SD_GetCardState+0x1c>)
 800897e:	f7fd fc77 	bl	8006270 <HAL_SD_GetCardState>
 8008982:	4603      	mov	r3, r0
 8008984:	2b04      	cmp	r3, #4
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
}
 800898e:	4618      	mov	r0, r3
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	2400002c 	.word	0x2400002c

08008998 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	4803      	ldr	r0, [pc, #12]	; (80089b0 <BSP_SD_GetCardInfo+0x18>)
 80089a4:	f7fd fb26 	bl	8005ff4 <HAL_SD_GetCardInfo>
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	2400002c 	.word	0x2400002c

080089b4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80089ba:	2301      	movs	r3, #1
 80089bc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80089be:	f000 f80b 	bl	80089d8 <BSP_PlatformIsDetected>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80089c8:	2300      	movs	r3, #0
 80089ca:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	b2db      	uxtb	r3, r3
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80089de:	2301      	movs	r3, #1
 80089e0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80089e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80089e6:	4806      	ldr	r0, [pc, #24]	; (8008a00 <BSP_PlatformIsDetected+0x28>)
 80089e8:	f7f8 fe08 	bl	80015fc <HAL_GPIO_ReadPin>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80089f2:	2300      	movs	r3, #0
 80089f4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80089f6:	79fb      	ldrb	r3, [r7, #7]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	58022000 	.word	0x58022000

08008a04 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <SD_CheckStatus+0x38>)
 8008a10:	2201      	movs	r2, #1
 8008a12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008a14:	f7ff ffb0 	bl	8008978 <BSP_SD_GetCardState>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d107      	bne.n	8008a2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008a1e:	4b07      	ldr	r3, [pc, #28]	; (8008a3c <SD_CheckStatus+0x38>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <SD_CheckStatus+0x38>)
 8008a2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008a2e:	4b03      	ldr	r3, [pc, #12]	; (8008a3c <SD_CheckStatus+0x38>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	b2db      	uxtb	r3, r3
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	2400000d 	.word	0x2400000d

08008a40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <SD_initialize+0x38>)
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008a50:	f7ff ff30 	bl	80088b4 <BSP_SD_Init>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d107      	bne.n	8008a6a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff ffd1 	bl	8008a04 <SD_CheckStatus>
 8008a62:	4603      	mov	r3, r0
 8008a64:	461a      	mov	r2, r3
 8008a66:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <SD_initialize+0x38>)
 8008a68:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008a6a:	4b03      	ldr	r3, [pc, #12]	; (8008a78 <SD_initialize+0x38>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	b2db      	uxtb	r3, r3
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	2400000d 	.word	0x2400000d

08008a7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff ffbb 	bl	8008a04 <SD_CheckStatus>
 8008a8e:	4603      	mov	r3, r0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	607a      	str	r2, [r7, #4]
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008aac:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	68b8      	ldr	r0, [r7, #8]
 8008ab6:	f7ff ff23 	bl	8008900 <BSP_SD_ReadBlocks>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d107      	bne.n	8008ad0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008ac0:	bf00      	nop
 8008ac2:	f7ff ff59 	bl	8008978 <BSP_SD_GetCardState>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1fa      	bne.n	8008ac2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008aee:	f04f 33ff 	mov.w	r3, #4294967295
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	68b8      	ldr	r0, [r7, #8]
 8008af8:	f7ff ff20 	bl	800893c <BSP_SD_WriteBlocks>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d107      	bne.n	8008b12 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008b02:	bf00      	nop
 8008b04:	f7ff ff38 	bl	8008978 <BSP_SD_GetCardState>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1fa      	bne.n	8008b04 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08c      	sub	sp, #48	; 0x30
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	603a      	str	r2, [r7, #0]
 8008b26:	71fb      	strb	r3, [r7, #7]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008b32:	4b25      	ldr	r3, [pc, #148]	; (8008bc8 <SD_ioctl+0xac>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <SD_ioctl+0x28>
 8008b40:	2303      	movs	r3, #3
 8008b42:	e03c      	b.n	8008bbe <SD_ioctl+0xa2>

  switch (cmd)
 8008b44:	79bb      	ldrb	r3, [r7, #6]
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d834      	bhi.n	8008bb4 <SD_ioctl+0x98>
 8008b4a:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <SD_ioctl+0x34>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008b61 	.word	0x08008b61
 8008b54:	08008b69 	.word	0x08008b69
 8008b58:	08008b81 	.word	0x08008b81
 8008b5c:	08008b9b 	.word	0x08008b9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008b66:	e028      	b.n	8008bba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008b68:	f107 0308 	add.w	r3, r7, #8
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff ff13 	bl	8008998 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008b72:	6a3a      	ldr	r2, [r7, #32]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008b7e:	e01c      	b.n	8008bba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008b80:	f107 0308 	add.w	r3, r7, #8
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff ff07 	bl	8008998 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008b98:	e00f      	b.n	8008bba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008b9a:	f107 0308 	add.w	r3, r7, #8
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff fefa 	bl	8008998 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	0a5a      	lsrs	r2, r3, #9
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008bb2:	e002      	b.n	8008bba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008bba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3730      	adds	r7, #48	; 0x30
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	2400000d 	.word	0x2400000d

08008bcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008bd6:	79fb      	ldrb	r3, [r7, #7]
 8008bd8:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <disk_status+0x30>)
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	79fa      	ldrb	r2, [r7, #7]
 8008be4:	4905      	ldr	r1, [pc, #20]	; (8008bfc <disk_status+0x30>)
 8008be6:	440a      	add	r2, r1
 8008be8:	7a12      	ldrb	r2, [r2, #8]
 8008bea:	4610      	mov	r0, r2
 8008bec:	4798      	blx	r3
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	24000170 	.word	0x24000170

08008c00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4603      	mov	r3, r0
 8008c08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	4a0d      	ldr	r2, [pc, #52]	; (8008c48 <disk_initialize+0x48>)
 8008c12:	5cd3      	ldrb	r3, [r2, r3]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d111      	bne.n	8008c3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	4a0b      	ldr	r2, [pc, #44]	; (8008c48 <disk_initialize+0x48>)
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	4a09      	ldr	r2, [pc, #36]	; (8008c48 <disk_initialize+0x48>)
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	79fa      	ldrb	r2, [r7, #7]
 8008c2e:	4906      	ldr	r1, [pc, #24]	; (8008c48 <disk_initialize+0x48>)
 8008c30:	440a      	add	r2, r1
 8008c32:	7a12      	ldrb	r2, [r2, #8]
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	24000170 	.word	0x24000170

08008c4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c4c:	b590      	push	{r4, r7, lr}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607a      	str	r2, [r7, #4]
 8008c56:	603b      	str	r3, [r7, #0]
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	4a0a      	ldr	r2, [pc, #40]	; (8008c88 <disk_read+0x3c>)
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	689c      	ldr	r4, [r3, #8]
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	4a07      	ldr	r2, [pc, #28]	; (8008c88 <disk_read+0x3c>)
 8008c6c:	4413      	add	r3, r2
 8008c6e:	7a18      	ldrb	r0, [r3, #8]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	47a0      	blx	r4
 8008c78:	4603      	mov	r3, r0
 8008c7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	371c      	adds	r7, #28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd90      	pop	{r4, r7, pc}
 8008c86:	bf00      	nop
 8008c88:	24000170 	.word	0x24000170

08008c8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
 8008c96:	603b      	str	r3, [r7, #0]
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	4a0a      	ldr	r2, [pc, #40]	; (8008cc8 <disk_write+0x3c>)
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	68dc      	ldr	r4, [r3, #12]
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	4a07      	ldr	r2, [pc, #28]	; (8008cc8 <disk_write+0x3c>)
 8008cac:	4413      	add	r3, r2
 8008cae:	7a18      	ldrb	r0, [r3, #8]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	68b9      	ldr	r1, [r7, #8]
 8008cb6:	47a0      	blx	r4
 8008cb8:	4603      	mov	r3, r0
 8008cba:	75fb      	strb	r3, [r7, #23]
  return res;
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd90      	pop	{r4, r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	24000170 	.word	0x24000170

08008ccc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	603a      	str	r2, [r7, #0]
 8008cd6:	71fb      	strb	r3, [r7, #7]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	4a09      	ldr	r2, [pc, #36]	; (8008d04 <disk_ioctl+0x38>)
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	79fa      	ldrb	r2, [r7, #7]
 8008cea:	4906      	ldr	r1, [pc, #24]	; (8008d04 <disk_ioctl+0x38>)
 8008cec:	440a      	add	r2, r1
 8008cee:	7a10      	ldrb	r0, [r2, #8]
 8008cf0:	79b9      	ldrb	r1, [r7, #6]
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	4798      	blx	r3
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
  return res;
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	24000170 	.word	0x24000170

08008d08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3301      	adds	r3, #1
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d18:	89fb      	ldrh	r3, [r7, #14]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	b21a      	sxth	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	b21b      	sxth	r3, r3
 8008d24:	4313      	orrs	r3, r2
 8008d26:	b21b      	sxth	r3, r3
 8008d28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3303      	adds	r3, #3
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	021b      	lsls	r3, r3, #8
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	3202      	adds	r2, #2
 8008d50:	7812      	ldrb	r2, [r2, #0]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	3201      	adds	r2, #1
 8008d5e:	7812      	ldrb	r2, [r2, #0]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	021b      	lsls	r3, r3, #8
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	7812      	ldrb	r2, [r2, #0]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008d70:	68fb      	ldr	r3, [r7, #12]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	887a      	ldrh	r2, [r7, #2]
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	887b      	ldrh	r3, [r7, #2]
 8008d98:	0a1b      	lsrs	r3, r3, #8
 8008d9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	607a      	str	r2, [r7, #4]
 8008da2:	887a      	ldrh	r2, [r7, #2]
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	701a      	strb	r2, [r3, #0]
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	b2d2      	uxtb	r2, r2
 8008dc8:	701a      	strb	r2, [r3, #0]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	0a1b      	lsrs	r3, r3, #8
 8008dce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	607a      	str	r2, [r7, #4]
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	701a      	strb	r2, [r3, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	0a1b      	lsrs	r3, r3, #8
 8008de0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	b2d2      	uxtb	r2, r2
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	0a1b      	lsrs	r3, r3, #8
 8008df2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	b2d2      	uxtb	r2, r2
 8008dfe:	701a      	strb	r2, [r3, #0]
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00d      	beq.n	8008e42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	1c53      	adds	r3, r2, #1
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	6179      	str	r1, [r7, #20]
 8008e32:	7812      	ldrb	r2, [r2, #0]
 8008e34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	607b      	str	r3, [r7, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1f1      	bne.n	8008e26 <mem_cpy+0x1a>
	}
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e4e:	b480      	push	{r7}
 8008e50:	b087      	sub	sp, #28
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	617a      	str	r2, [r7, #20]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	b2d2      	uxtb	r2, r2
 8008e68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	607b      	str	r3, [r7, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1f3      	bne.n	8008e5e <mem_set+0x10>
}
 8008e76:	bf00      	nop
 8008e78:	bf00      	nop
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008e84:	b480      	push	{r7}
 8008e86:	b089      	sub	sp, #36	; 0x24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	61fb      	str	r3, [r7, #28]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	61fa      	str	r2, [r7, #28]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	61ba      	str	r2, [r7, #24]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	1acb      	subs	r3, r1, r3
 8008eb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	607b      	str	r3, [r7, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <mem_cmp+0x40>
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0eb      	beq.n	8008e9c <mem_cmp+0x18>

	return r;
 8008ec4:	697b      	ldr	r3, [r7, #20]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3724      	adds	r7, #36	; 0x24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008edc:	e002      	b.n	8008ee4 <chk_chr+0x12>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	607b      	str	r3, [r7, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d005      	beq.n	8008ef8 <chk_chr+0x26>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d1f2      	bne.n	8008ede <chk_chr+0xc>
	return *str;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	781b      	ldrb	r3, [r3, #0]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f12:	2300      	movs	r3, #0
 8008f14:	60bb      	str	r3, [r7, #8]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	e029      	b.n	8008f70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008f1c:	4a27      	ldr	r2, [pc, #156]	; (8008fbc <chk_lock+0xb4>)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	4413      	add	r3, r2
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d01d      	beq.n	8008f66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f2a:	4a24      	ldr	r2, [pc, #144]	; (8008fbc <chk_lock+0xb4>)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	011b      	lsls	r3, r3, #4
 8008f30:	4413      	add	r3, r2
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d116      	bne.n	8008f6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008f3c:	4a1f      	ldr	r2, [pc, #124]	; (8008fbc <chk_lock+0xb4>)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	4413      	add	r3, r2
 8008f44:	3304      	adds	r3, #4
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d10c      	bne.n	8008f6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008f50:	4a1a      	ldr	r2, [pc, #104]	; (8008fbc <chk_lock+0xb4>)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	4413      	add	r3, r2
 8008f58:	3308      	adds	r3, #8
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d102      	bne.n	8008f6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008f64:	e007      	b.n	8008f76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008f66:	2301      	movs	r3, #1
 8008f68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d9d2      	bls.n	8008f1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d109      	bne.n	8008f90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <chk_lock+0x80>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d101      	bne.n	8008f8c <chk_lock+0x84>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e010      	b.n	8008fae <chk_lock+0xa6>
 8008f8c:	2312      	movs	r3, #18
 8008f8e:	e00e      	b.n	8008fae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d108      	bne.n	8008fa8 <chk_lock+0xa0>
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <chk_lock+0xb4>)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	4413      	add	r3, r2
 8008f9e:	330c      	adds	r3, #12
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa6:	d101      	bne.n	8008fac <chk_lock+0xa4>
 8008fa8:	2310      	movs	r3, #16
 8008faa:	e000      	b.n	8008fae <chk_lock+0xa6>
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	24000150 	.word	0x24000150

08008fc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	607b      	str	r3, [r7, #4]
 8008fca:	e002      	b.n	8008fd2 <enq_lock+0x12>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	607b      	str	r3, [r7, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d806      	bhi.n	8008fe6 <enq_lock+0x26>
 8008fd8:	4a09      	ldr	r2, [pc, #36]	; (8009000 <enq_lock+0x40>)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	4413      	add	r3, r2
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f2      	bne.n	8008fcc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	bf14      	ite	ne
 8008fec:	2301      	movne	r3, #1
 8008fee:	2300      	moveq	r3, #0
 8008ff0:	b2db      	uxtb	r3, r3
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	24000150 	.word	0x24000150

08009004 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	e01f      	b.n	8009054 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009014:	4a41      	ldr	r2, [pc, #260]	; (800911c <inc_lock+0x118>)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	4413      	add	r3, r2
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d113      	bne.n	800904e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009026:	4a3d      	ldr	r2, [pc, #244]	; (800911c <inc_lock+0x118>)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	011b      	lsls	r3, r3, #4
 800902c:	4413      	add	r3, r2
 800902e:	3304      	adds	r3, #4
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009036:	429a      	cmp	r2, r3
 8009038:	d109      	bne.n	800904e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800903a:	4a38      	ldr	r2, [pc, #224]	; (800911c <inc_lock+0x118>)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	4413      	add	r3, r2
 8009042:	3308      	adds	r3, #8
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800904a:	429a      	cmp	r2, r3
 800904c:	d006      	beq.n	800905c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3301      	adds	r3, #1
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d9dc      	bls.n	8009014 <inc_lock+0x10>
 800905a:	e000      	b.n	800905e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800905c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d132      	bne.n	80090ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	e002      	b.n	8009070 <inc_lock+0x6c>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3301      	adds	r3, #1
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d806      	bhi.n	8009084 <inc_lock+0x80>
 8009076:	4a29      	ldr	r2, [pc, #164]	; (800911c <inc_lock+0x118>)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	4413      	add	r3, r2
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1f2      	bne.n	800906a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d101      	bne.n	800908e <inc_lock+0x8a>
 800908a:	2300      	movs	r3, #0
 800908c:	e040      	b.n	8009110 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4922      	ldr	r1, [pc, #136]	; (800911c <inc_lock+0x118>)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	440b      	add	r3, r1
 800909a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	491e      	ldr	r1, [pc, #120]	; (800911c <inc_lock+0x118>)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	011b      	lsls	r3, r3, #4
 80090a6:	440b      	add	r3, r1
 80090a8:	3304      	adds	r3, #4
 80090aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	695a      	ldr	r2, [r3, #20]
 80090b0:	491a      	ldr	r1, [pc, #104]	; (800911c <inc_lock+0x118>)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	440b      	add	r3, r1
 80090b8:	3308      	adds	r3, #8
 80090ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80090bc:	4a17      	ldr	r2, [pc, #92]	; (800911c <inc_lock+0x118>)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	4413      	add	r3, r2
 80090c4:	330c      	adds	r3, #12
 80090c6:	2200      	movs	r2, #0
 80090c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d009      	beq.n	80090e4 <inc_lock+0xe0>
 80090d0:	4a12      	ldr	r2, [pc, #72]	; (800911c <inc_lock+0x118>)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	4413      	add	r3, r2
 80090d8:	330c      	adds	r3, #12
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <inc_lock+0xe0>
 80090e0:	2300      	movs	r3, #0
 80090e2:	e015      	b.n	8009110 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d108      	bne.n	80090fc <inc_lock+0xf8>
 80090ea:	4a0c      	ldr	r2, [pc, #48]	; (800911c <inc_lock+0x118>)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	011b      	lsls	r3, r3, #4
 80090f0:	4413      	add	r3, r2
 80090f2:	330c      	adds	r3, #12
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	3301      	adds	r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	e001      	b.n	8009100 <inc_lock+0xfc>
 80090fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009100:	4906      	ldr	r1, [pc, #24]	; (800911c <inc_lock+0x118>)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	440b      	add	r3, r1
 8009108:	330c      	adds	r3, #12
 800910a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3301      	adds	r3, #1
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	24000150 	.word	0x24000150

08009120 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3b01      	subs	r3, #1
 800912c:	607b      	str	r3, [r7, #4]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d825      	bhi.n	8009180 <dec_lock+0x60>
		n = Files[i].ctr;
 8009134:	4a17      	ldr	r2, [pc, #92]	; (8009194 <dec_lock+0x74>)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	4413      	add	r3, r2
 800913c:	330c      	adds	r3, #12
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009142:	89fb      	ldrh	r3, [r7, #14]
 8009144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009148:	d101      	bne.n	800914e <dec_lock+0x2e>
 800914a:	2300      	movs	r3, #0
 800914c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800914e:	89fb      	ldrh	r3, [r7, #14]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <dec_lock+0x3a>
 8009154:	89fb      	ldrh	r3, [r7, #14]
 8009156:	3b01      	subs	r3, #1
 8009158:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800915a:	4a0e      	ldr	r2, [pc, #56]	; (8009194 <dec_lock+0x74>)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	4413      	add	r3, r2
 8009162:	330c      	adds	r3, #12
 8009164:	89fa      	ldrh	r2, [r7, #14]
 8009166:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009168:	89fb      	ldrh	r3, [r7, #14]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d105      	bne.n	800917a <dec_lock+0x5a>
 800916e:	4a09      	ldr	r2, [pc, #36]	; (8009194 <dec_lock+0x74>)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	4413      	add	r3, r2
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	737b      	strb	r3, [r7, #13]
 800917e:	e001      	b.n	8009184 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009180:	2302      	movs	r3, #2
 8009182:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009184:	7b7b      	ldrb	r3, [r7, #13]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	24000150 	.word	0x24000150

08009198 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e010      	b.n	80091c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80091a6:	4a0d      	ldr	r2, [pc, #52]	; (80091dc <clear_lock+0x44>)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	4413      	add	r3, r2
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d105      	bne.n	80091c2 <clear_lock+0x2a>
 80091b6:	4a09      	ldr	r2, [pc, #36]	; (80091dc <clear_lock+0x44>)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	011b      	lsls	r3, r3, #4
 80091bc:	4413      	add	r3, r2
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3301      	adds	r3, #1
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d9eb      	bls.n	80091a6 <clear_lock+0xe>
	}
}
 80091ce:	bf00      	nop
 80091d0:	bf00      	nop
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	24000150 	.word	0x24000150

080091e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	78db      	ldrb	r3, [r3, #3]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d034      	beq.n	800925e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	7858      	ldrb	r0, [r3, #1]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009204:	2301      	movs	r3, #1
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	f7ff fd40 	bl	8008c8c <disk_write>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009212:	2301      	movs	r3, #1
 8009214:	73fb      	strb	r3, [r7, #15]
 8009216:	e022      	b.n	800925e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	1ad2      	subs	r2, r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	429a      	cmp	r2, r3
 800922c:	d217      	bcs.n	800925e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	789b      	ldrb	r3, [r3, #2]
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	e010      	b.n	8009258 <sync_window+0x78>
					wsect += fs->fsize;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4413      	add	r3, r2
 800923e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	7858      	ldrb	r0, [r3, #1]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800924a:	2301      	movs	r3, #1
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	f7ff fd1d 	bl	8008c8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	3b01      	subs	r3, #1
 8009256:	613b      	str	r3, [r7, #16]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d8eb      	bhi.n	8009236 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	429a      	cmp	r2, r3
 800927e:	d01b      	beq.n	80092b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff ffad 	bl	80091e0 <sync_window>
 8009286:	4603      	mov	r3, r0
 8009288:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d113      	bne.n	80092b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	7858      	ldrb	r0, [r3, #1]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800929a:	2301      	movs	r3, #1
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	f7ff fcd5 	bl	8008c4c <disk_read>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d004      	beq.n	80092b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80092a8:	f04f 33ff 	mov.w	r3, #4294967295
 80092ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff ff87 	bl	80091e0 <sync_window>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d158      	bne.n	800938e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d148      	bne.n	8009376 <sync_fs+0xb2>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	791b      	ldrb	r3, [r3, #4]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d144      	bne.n	8009376 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3330      	adds	r3, #48	; 0x30
 80092f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff fda9 	bl	8008e4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3330      	adds	r3, #48	; 0x30
 8009300:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009304:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009308:	4618      	mov	r0, r3
 800930a:	f7ff fd38 	bl	8008d7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3330      	adds	r3, #48	; 0x30
 8009312:	4921      	ldr	r1, [pc, #132]	; (8009398 <sync_fs+0xd4>)
 8009314:	4618      	mov	r0, r3
 8009316:	f7ff fd4d 	bl	8008db4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3330      	adds	r3, #48	; 0x30
 800931e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009322:	491e      	ldr	r1, [pc, #120]	; (800939c <sync_fs+0xd8>)
 8009324:	4618      	mov	r0, r3
 8009326:	f7ff fd45 	bl	8008db4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3330      	adds	r3, #48	; 0x30
 800932e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f7ff fd3b 	bl	8008db4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3330      	adds	r3, #48	; 0x30
 8009342:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7ff fd31 	bl	8008db4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7858      	ldrb	r0, [r3, #1]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936a:	2301      	movs	r3, #1
 800936c:	f7ff fc8e 	bl	8008c8c <disk_write>
			fs->fsi_flag = 0;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	785b      	ldrb	r3, [r3, #1]
 800937a:	2200      	movs	r2, #0
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff fca4 	bl	8008ccc <disk_ioctl>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <sync_fs+0xca>
 800938a:	2301      	movs	r3, #1
 800938c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800938e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	41615252 	.word	0x41615252
 800939c:	61417272 	.word	0x61417272

080093a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	3b02      	subs	r3, #2
 80093ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	3b02      	subs	r3, #2
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d301      	bcc.n	80093c0 <clust2sect+0x20>
 80093bc:	2300      	movs	r3, #0
 80093be:	e008      	b.n	80093d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	895b      	ldrh	r3, [r3, #10]
 80093c4:	461a      	mov	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	fb03 f202 	mul.w	r2, r3, r2
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d0:	4413      	add	r3, r2
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b086      	sub	sp, #24
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d904      	bls.n	80093fe <get_fat+0x20>
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d302      	bcc.n	8009404 <get_fat+0x26>
		val = 1;	/* Internal error */
 80093fe:	2301      	movs	r3, #1
 8009400:	617b      	str	r3, [r7, #20]
 8009402:	e08f      	b.n	8009524 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009404:	f04f 33ff 	mov.w	r3, #4294967295
 8009408:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b03      	cmp	r3, #3
 8009410:	d062      	beq.n	80094d8 <get_fat+0xfa>
 8009412:	2b03      	cmp	r3, #3
 8009414:	dc7c      	bgt.n	8009510 <get_fat+0x132>
 8009416:	2b01      	cmp	r3, #1
 8009418:	d002      	beq.n	8009420 <get_fat+0x42>
 800941a:	2b02      	cmp	r3, #2
 800941c:	d042      	beq.n	80094a4 <get_fat+0xc6>
 800941e:	e077      	b.n	8009510 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	085b      	lsrs	r3, r3, #1
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	6a1a      	ldr	r2, [r3, #32]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	0a5b      	lsrs	r3, r3, #9
 8009436:	4413      	add	r3, r2
 8009438:	4619      	mov	r1, r3
 800943a:	6938      	ldr	r0, [r7, #16]
 800943c:	f7ff ff14 	bl	8009268 <move_window>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d167      	bne.n	8009516 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	60fa      	str	r2, [r7, #12]
 800944c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	4413      	add	r3, r2
 8009454:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009458:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	6a1a      	ldr	r2, [r3, #32]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	0a5b      	lsrs	r3, r3, #9
 8009462:	4413      	add	r3, r2
 8009464:	4619      	mov	r1, r3
 8009466:	6938      	ldr	r0, [r7, #16]
 8009468:	f7ff fefe 	bl	8009268 <move_window>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d153      	bne.n	800951a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	4413      	add	r3, r2
 800947c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009480:	021b      	lsls	r3, r3, #8
 8009482:	461a      	mov	r2, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	4313      	orrs	r3, r2
 8009488:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <get_fat+0xbc>
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	091b      	lsrs	r3, r3, #4
 8009498:	e002      	b.n	80094a0 <get_fat+0xc2>
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094a0:	617b      	str	r3, [r7, #20]
			break;
 80094a2:	e03f      	b.n	8009524 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	6a1a      	ldr	r2, [r3, #32]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	0a1b      	lsrs	r3, r3, #8
 80094ac:	4413      	add	r3, r2
 80094ae:	4619      	mov	r1, r3
 80094b0:	6938      	ldr	r0, [r7, #16]
 80094b2:	f7ff fed9 	bl	8009268 <move_window>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d130      	bne.n	800951e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80094ca:	4413      	add	r3, r2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7ff fc1b 	bl	8008d08 <ld_word>
 80094d2:	4603      	mov	r3, r0
 80094d4:	617b      	str	r3, [r7, #20]
			break;
 80094d6:	e025      	b.n	8009524 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6a1a      	ldr	r2, [r3, #32]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	09db      	lsrs	r3, r3, #7
 80094e0:	4413      	add	r3, r2
 80094e2:	4619      	mov	r1, r3
 80094e4:	6938      	ldr	r0, [r7, #16]
 80094e6:	f7ff febf 	bl	8009268 <move_window>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d118      	bne.n	8009522 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80094fe:	4413      	add	r3, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff fc19 	bl	8008d38 <ld_dword>
 8009506:	4603      	mov	r3, r0
 8009508:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800950c:	617b      	str	r3, [r7, #20]
			break;
 800950e:	e009      	b.n	8009524 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009510:	2301      	movs	r3, #1
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	e006      	b.n	8009524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009516:	bf00      	nop
 8009518:	e004      	b.n	8009524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800951a:	bf00      	nop
 800951c:	e002      	b.n	8009524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800951e:	bf00      	nop
 8009520:	e000      	b.n	8009524 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009522:	bf00      	nop
		}
	}

	return val;
 8009524:	697b      	ldr	r3, [r7, #20]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800952e:	b590      	push	{r4, r7, lr}
 8009530:	b089      	sub	sp, #36	; 0x24
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800953a:	2302      	movs	r3, #2
 800953c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b01      	cmp	r3, #1
 8009542:	f240 80d2 	bls.w	80096ea <put_fat+0x1bc>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	429a      	cmp	r2, r3
 800954e:	f080 80cc 	bcs.w	80096ea <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	2b03      	cmp	r3, #3
 8009558:	f000 8096 	beq.w	8009688 <put_fat+0x15a>
 800955c:	2b03      	cmp	r3, #3
 800955e:	f300 80cd 	bgt.w	80096fc <put_fat+0x1ce>
 8009562:	2b01      	cmp	r3, #1
 8009564:	d002      	beq.n	800956c <put_fat+0x3e>
 8009566:	2b02      	cmp	r3, #2
 8009568:	d06e      	beq.n	8009648 <put_fat+0x11a>
 800956a:	e0c7      	b.n	80096fc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	61bb      	str	r3, [r7, #24]
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	085b      	lsrs	r3, r3, #1
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	4413      	add	r3, r2
 8009578:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6a1a      	ldr	r2, [r3, #32]
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	0a5b      	lsrs	r3, r3, #9
 8009582:	4413      	add	r3, r2
 8009584:	4619      	mov	r1, r3
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fe6e 	bl	8009268 <move_window>
 800958c:	4603      	mov	r3, r0
 800958e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009590:	7ffb      	ldrb	r3, [r7, #31]
 8009592:	2b00      	cmp	r3, #0
 8009594:	f040 80ab 	bne.w	80096ee <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	1c59      	adds	r1, r3, #1
 80095a2:	61b9      	str	r1, [r7, #24]
 80095a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a8:	4413      	add	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00d      	beq.n	80095d2 <put_fat+0xa4>
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	b25b      	sxtb	r3, r3
 80095bc:	f003 030f 	and.w	r3, r3, #15
 80095c0:	b25a      	sxtb	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	011b      	lsls	r3, r3, #4
 80095c8:	b25b      	sxtb	r3, r3
 80095ca:	4313      	orrs	r3, r2
 80095cc:	b25b      	sxtb	r3, r3
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	e001      	b.n	80095d6 <put_fat+0xa8>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2201      	movs	r2, #1
 80095de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a1a      	ldr	r2, [r3, #32]
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	0a5b      	lsrs	r3, r3, #9
 80095e8:	4413      	add	r3, r2
 80095ea:	4619      	mov	r1, r3
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f7ff fe3b 	bl	8009268 <move_window>
 80095f2:	4603      	mov	r3, r0
 80095f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095f6:	7ffb      	ldrb	r3, [r7, #31]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d17a      	bne.n	80096f2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009608:	4413      	add	r3, r2
 800960a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <put_fat+0xf0>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	091b      	lsrs	r3, r3, #4
 800961a:	b2db      	uxtb	r3, r3
 800961c:	e00e      	b.n	800963c <put_fat+0x10e>
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	b25b      	sxtb	r3, r3
 8009624:	f023 030f 	bic.w	r3, r3, #15
 8009628:	b25a      	sxtb	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	b25b      	sxtb	r3, r3
 8009630:	f003 030f 	and.w	r3, r3, #15
 8009634:	b25b      	sxtb	r3, r3
 8009636:	4313      	orrs	r3, r2
 8009638:	b25b      	sxtb	r3, r3
 800963a:	b2db      	uxtb	r3, r3
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	70da      	strb	r2, [r3, #3]
			break;
 8009646:	e059      	b.n	80096fc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6a1a      	ldr	r2, [r3, #32]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	4413      	add	r3, r2
 8009652:	4619      	mov	r1, r3
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff fe07 	bl	8009268 <move_window>
 800965a:	4603      	mov	r3, r0
 800965c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800965e:	7ffb      	ldrb	r3, [r7, #31]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d148      	bne.n	80096f6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009672:	4413      	add	r3, r2
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	b292      	uxth	r2, r2
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff fb7f 	bl	8008d7e <st_word>
			fs->wflag = 1;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2201      	movs	r2, #1
 8009684:	70da      	strb	r2, [r3, #3]
			break;
 8009686:	e039      	b.n	80096fc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a1a      	ldr	r2, [r3, #32]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	09db      	lsrs	r3, r3, #7
 8009690:	4413      	add	r3, r2
 8009692:	4619      	mov	r1, r3
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f7ff fde7 	bl	8009268 <move_window>
 800969a:	4603      	mov	r3, r0
 800969c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800969e:	7ffb      	ldrb	r3, [r7, #31]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d12a      	bne.n	80096fa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80096b8:	4413      	add	r3, r2
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7ff fb3c 	bl	8008d38 <ld_dword>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80096c6:	4323      	orrs	r3, r4
 80096c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80096d8:	4413      	add	r3, r2
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7ff fb69 	bl	8008db4 <st_dword>
			fs->wflag = 1;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2201      	movs	r2, #1
 80096e6:	70da      	strb	r2, [r3, #3]
			break;
 80096e8:	e008      	b.n	80096fc <put_fat+0x1ce>
		}
	}
 80096ea:	bf00      	nop
 80096ec:	e006      	b.n	80096fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80096ee:	bf00      	nop
 80096f0:	e004      	b.n	80096fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80096f2:	bf00      	nop
 80096f4:	e002      	b.n	80096fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80096f6:	bf00      	nop
 80096f8:	e000      	b.n	80096fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80096fa:	bf00      	nop
	return res;
 80096fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3724      	adds	r7, #36	; 0x24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd90      	pop	{r4, r7, pc}

08009706 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b088      	sub	sp, #32
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d904      	bls.n	800972c <remove_chain+0x26>
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	429a      	cmp	r2, r3
 800972a:	d301      	bcc.n	8009730 <remove_chain+0x2a>
 800972c:	2302      	movs	r3, #2
 800972e:	e04b      	b.n	80097c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00c      	beq.n	8009750 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	69b8      	ldr	r0, [r7, #24]
 800973e:	f7ff fef6 	bl	800952e <put_fat>
 8009742:	4603      	mov	r3, r0
 8009744:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009746:	7ffb      	ldrb	r3, [r7, #31]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <remove_chain+0x4a>
 800974c:	7ffb      	ldrb	r3, [r7, #31]
 800974e:	e03b      	b.n	80097c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff fe43 	bl	80093de <get_fat>
 8009758:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d031      	beq.n	80097c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d101      	bne.n	800976a <remove_chain+0x64>
 8009766:	2302      	movs	r3, #2
 8009768:	e02e      	b.n	80097c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009770:	d101      	bne.n	8009776 <remove_chain+0x70>
 8009772:	2301      	movs	r3, #1
 8009774:	e028      	b.n	80097c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009776:	2200      	movs	r2, #0
 8009778:	68b9      	ldr	r1, [r7, #8]
 800977a:	69b8      	ldr	r0, [r7, #24]
 800977c:	f7ff fed7 	bl	800952e <put_fat>
 8009780:	4603      	mov	r3, r0
 8009782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009784:	7ffb      	ldrb	r3, [r7, #31]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <remove_chain+0x88>
 800978a:	7ffb      	ldrb	r3, [r7, #31]
 800978c:	e01c      	b.n	80097c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	3b02      	subs	r3, #2
 8009798:	429a      	cmp	r2, r3
 800979a:	d20b      	bcs.n	80097b4 <remove_chain+0xae>
			fs->free_clst++;
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	791b      	ldrb	r3, [r3, #4]
 80097aa:	f043 0301 	orr.w	r3, r3, #1
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d3c6      	bcc.n	8009750 <remove_chain+0x4a>
 80097c2:	e000      	b.n	80097c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80097c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3720      	adds	r7, #32
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10d      	bne.n	8009802 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <create_chain+0x2c>
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d31b      	bcc.n	8009834 <create_chain+0x64>
 80097fc:	2301      	movs	r3, #1
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	e018      	b.n	8009834 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff fdea 	bl	80093de <get_fat>
 800980a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d801      	bhi.n	8009816 <create_chain+0x46>
 8009812:	2301      	movs	r3, #1
 8009814:	e070      	b.n	80098f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981c:	d101      	bne.n	8009822 <create_chain+0x52>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	e06a      	b.n	80098f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	429a      	cmp	r2, r3
 800982a:	d201      	bcs.n	8009830 <create_chain+0x60>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	e063      	b.n	80098f8 <create_chain+0x128>
		scl = clst;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	3301      	adds	r3, #1
 800983c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	429a      	cmp	r2, r3
 8009846:	d307      	bcc.n	8009858 <create_chain+0x88>
				ncl = 2;
 8009848:	2302      	movs	r3, #2
 800984a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800984c:	69fa      	ldr	r2, [r7, #28]
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	429a      	cmp	r2, r3
 8009852:	d901      	bls.n	8009858 <create_chain+0x88>
 8009854:	2300      	movs	r3, #0
 8009856:	e04f      	b.n	80098f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009858:	69f9      	ldr	r1, [r7, #28]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7ff fdbf 	bl	80093de <get_fat>
 8009860:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00e      	beq.n	8009886 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d003      	beq.n	8009876 <create_chain+0xa6>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009874:	d101      	bne.n	800987a <create_chain+0xaa>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	e03e      	b.n	80098f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	429a      	cmp	r2, r3
 8009880:	d1da      	bne.n	8009838 <create_chain+0x68>
 8009882:	2300      	movs	r3, #0
 8009884:	e038      	b.n	80098f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009886:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009888:	f04f 32ff 	mov.w	r2, #4294967295
 800988c:	69f9      	ldr	r1, [r7, #28]
 800988e:	6938      	ldr	r0, [r7, #16]
 8009890:	f7ff fe4d 	bl	800952e <put_fat>
 8009894:	4603      	mov	r3, r0
 8009896:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d109      	bne.n	80098b2 <create_chain+0xe2>
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d006      	beq.n	80098b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6938      	ldr	r0, [r7, #16]
 80098aa:	f7ff fe40 	bl	800952e <put_fat>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d116      	bne.n	80098e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	3b02      	subs	r3, #2
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d804      	bhi.n	80098d6 <create_chain+0x106>
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	1e5a      	subs	r2, r3, #1
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	791b      	ldrb	r3, [r3, #4]
 80098da:	f043 0301 	orr.w	r3, r3, #1
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	711a      	strb	r2, [r3, #4]
 80098e4:	e007      	b.n	80098f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d102      	bne.n	80098f2 <create_chain+0x122>
 80098ec:	f04f 33ff 	mov.w	r3, #4294967295
 80098f0:	e000      	b.n	80098f4 <create_chain+0x124>
 80098f2:	2301      	movs	r3, #1
 80098f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80098f6:	69fb      	ldr	r3, [r7, #28]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	3304      	adds	r3, #4
 8009916:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	0a5b      	lsrs	r3, r3, #9
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	8952      	ldrh	r2, [r2, #10]
 8009920:	fbb3 f3f2 	udiv	r3, r3, r2
 8009924:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	1d1a      	adds	r2, r3, #4
 800992a:	613a      	str	r2, [r7, #16]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <clmt_clust+0x3a>
 8009936:	2300      	movs	r3, #0
 8009938:	e010      	b.n	800995c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	429a      	cmp	r2, r3
 8009940:	d307      	bcc.n	8009952 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	617b      	str	r3, [r7, #20]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	3304      	adds	r3, #4
 800994e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009950:	e7e9      	b.n	8009926 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009952:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	4413      	add	r3, r2
}
 800995c:	4618      	mov	r0, r3
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800997e:	d204      	bcs.n	800998a <dir_sdi+0x22>
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	f003 031f 	and.w	r3, r3, #31
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <dir_sdi+0x26>
		return FR_INT_ERR;
 800998a:	2302      	movs	r3, #2
 800998c:	e063      	b.n	8009a56 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d106      	bne.n	80099ae <dir_sdi+0x46>
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d902      	bls.n	80099ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10c      	bne.n	80099ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	095b      	lsrs	r3, r3, #5
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	8912      	ldrh	r2, [r2, #8]
 80099bc:	4293      	cmp	r3, r2
 80099be:	d301      	bcc.n	80099c4 <dir_sdi+0x5c>
 80099c0:	2302      	movs	r3, #2
 80099c2:	e048      	b.n	8009a56 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	61da      	str	r2, [r3, #28]
 80099cc:	e029      	b.n	8009a22 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	895b      	ldrh	r3, [r3, #10]
 80099d2:	025b      	lsls	r3, r3, #9
 80099d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80099d6:	e019      	b.n	8009a0c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6979      	ldr	r1, [r7, #20]
 80099dc:	4618      	mov	r0, r3
 80099de:	f7ff fcfe 	bl	80093de <get_fat>
 80099e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ea:	d101      	bne.n	80099f0 <dir_sdi+0x88>
 80099ec:	2301      	movs	r3, #1
 80099ee:	e032      	b.n	8009a56 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d904      	bls.n	8009a00 <dir_sdi+0x98>
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d301      	bcc.n	8009a04 <dir_sdi+0x9c>
 8009a00:	2302      	movs	r3, #2
 8009a02:	e028      	b.n	8009a56 <dir_sdi+0xee>
			ofs -= csz;
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d2e1      	bcs.n	80099d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009a14:	6979      	ldr	r1, [r7, #20]
 8009a16:	6938      	ldr	r0, [r7, #16]
 8009a18:	f7ff fcc2 	bl	80093a0 <clust2sect>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	69db      	ldr	r3, [r3, #28]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <dir_sdi+0xcc>
 8009a30:	2302      	movs	r3, #2
 8009a32:	e010      	b.n	8009a56 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	69da      	ldr	r2, [r3, #28]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	0a5b      	lsrs	r3, r3, #9
 8009a3c:	441a      	add	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4e:	441a      	add	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b086      	sub	sp, #24
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	3320      	adds	r3, #32
 8009a74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <dir_next+0x28>
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a84:	d301      	bcc.n	8009a8a <dir_next+0x2c>
 8009a86:	2304      	movs	r3, #4
 8009a88:	e0aa      	b.n	8009be0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f040 8098 	bne.w	8009bc6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10b      	bne.n	8009ac0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	095b      	lsrs	r3, r3, #5
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	8912      	ldrh	r2, [r2, #8]
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	f0c0 8088 	bcc.w	8009bc6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	61da      	str	r2, [r3, #28]
 8009abc:	2304      	movs	r3, #4
 8009abe:	e08f      	b.n	8009be0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	0a5b      	lsrs	r3, r3, #9
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	8952      	ldrh	r2, [r2, #10]
 8009ac8:	3a01      	subs	r2, #1
 8009aca:	4013      	ands	r3, r2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d17a      	bne.n	8009bc6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4610      	mov	r0, r2
 8009ada:	f7ff fc80 	bl	80093de <get_fat>
 8009ade:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d801      	bhi.n	8009aea <dir_next+0x8c>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e07a      	b.n	8009be0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af0:	d101      	bne.n	8009af6 <dir_next+0x98>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e074      	b.n	8009be0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d358      	bcc.n	8009bb2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	61da      	str	r2, [r3, #28]
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	e067      	b.n	8009be0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	4619      	mov	r1, r3
 8009b18:	4610      	mov	r0, r2
 8009b1a:	f7ff fe59 	bl	80097d0 <create_chain>
 8009b1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <dir_next+0xcc>
 8009b26:	2307      	movs	r3, #7
 8009b28:	e05a      	b.n	8009be0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d101      	bne.n	8009b34 <dir_next+0xd6>
 8009b30:	2302      	movs	r3, #2
 8009b32:	e055      	b.n	8009be0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3a:	d101      	bne.n	8009b40 <dir_next+0xe2>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e04f      	b.n	8009be0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff fb4d 	bl	80091e0 <sync_window>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <dir_next+0xf2>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e047      	b.n	8009be0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3330      	adds	r3, #48	; 0x30
 8009b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff f977 	bl	8008e4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009b60:	2300      	movs	r3, #0
 8009b62:	613b      	str	r3, [r7, #16]
 8009b64:	6979      	ldr	r1, [r7, #20]
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7ff fc1a 	bl	80093a0 <clust2sect>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b72:	e012      	b.n	8009b9a <dir_next+0x13c>
						fs->wflag = 1;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2201      	movs	r2, #1
 8009b78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f7ff fb30 	bl	80091e0 <sync_window>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <dir_next+0x12c>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e02a      	b.n	8009be0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	613b      	str	r3, [r7, #16]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	895b      	ldrh	r3, [r3, #10]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d3e6      	bcc.n	8009b74 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	1ad2      	subs	r2, r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009bb8:	6979      	ldr	r1, [r7, #20]
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fbf0 	bl	80093a0 <clust2sect>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd8:	441a      	add	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3718      	adds	r7, #24
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff feb4 	bl	8009968 <dir_sdi>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d12b      	bne.n	8009c62 <dir_alloc+0x7a>
		n = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	4619      	mov	r1, r3
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f7ff fb27 	bl	8009268 <move_window>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d11d      	bne.n	8009c60 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	2be5      	cmp	r3, #229	; 0xe5
 8009c2c:	d004      	beq.n	8009c38 <dir_alloc+0x50>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d107      	bne.n	8009c48 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	613b      	str	r3, [r7, #16]
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d102      	bne.n	8009c4c <dir_alloc+0x64>
 8009c46:	e00c      	b.n	8009c62 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009c48:	2300      	movs	r3, #0
 8009c4a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff ff05 	bl	8009a5e <dir_next>
 8009c54:	4603      	mov	r3, r0
 8009c56:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0d7      	beq.n	8009c0e <dir_alloc+0x26>
 8009c5e:	e000      	b.n	8009c62 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009c60:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d101      	bne.n	8009c6c <dir_alloc+0x84>
 8009c68:	2307      	movs	r3, #7
 8009c6a:	75fb      	strb	r3, [r7, #23]
	return res;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	331a      	adds	r3, #26
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff f83f 	bl	8008d08 <ld_word>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d109      	bne.n	8009caa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	3314      	adds	r3, #20
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff f834 	bl	8008d08 <ld_word>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	041b      	lsls	r3, r3, #16
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009caa:	68fb      	ldr	r3, [r7, #12]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	331a      	adds	r3, #26
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	b292      	uxth	r2, r2
 8009cc8:	4611      	mov	r1, r2
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7ff f857 	bl	8008d7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d109      	bne.n	8009cec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f103 0214 	add.w	r2, r3, #20
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	f7ff f849 	bl	8008d7e <st_word>
	}
}
 8009cec:	bf00      	nop
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009d02:	2100      	movs	r1, #0
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7ff fe2f 	bl	8009968 <dir_sdi>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <dir_find+0x24>
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	e03e      	b.n	8009d96 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6938      	ldr	r0, [r7, #16]
 8009d20:	f7ff faa2 	bl	8009268 <move_window>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d12f      	bne.n	8009d8e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <dir_find+0x4e>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	75fb      	strb	r3, [r7, #23]
 8009d40:	e028      	b.n	8009d94 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	330b      	adds	r3, #11
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	330b      	adds	r3, #11
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <dir_find+0x86>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a18      	ldr	r0, [r3, #32]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3324      	adds	r3, #36	; 0x24
 8009d6c:	220b      	movs	r2, #11
 8009d6e:	4619      	mov	r1, r3
 8009d70:	f7ff f888 	bl	8008e84 <mem_cmp>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00b      	beq.n	8009d92 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff fe6e 	bl	8009a5e <dir_next>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0c5      	beq.n	8009d18 <dir_find+0x24>
 8009d8c:	e002      	b.n	8009d94 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009d8e:	bf00      	nop
 8009d90:	e000      	b.n	8009d94 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009d92:	bf00      	nop

	return res;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009dac:	2101      	movs	r1, #1
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff ff1a 	bl	8009be8 <dir_alloc>
 8009db4:	4603      	mov	r3, r0
 8009db6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d11c      	bne.n	8009df8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	68b8      	ldr	r0, [r7, #8]
 8009dc6:	f7ff fa4f 	bl	8009268 <move_window>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d111      	bne.n	8009df8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7ff f836 	bl	8008e4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a18      	ldr	r0, [r3, #32]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3324      	adds	r3, #36	; 0x24
 8009dea:	220b      	movs	r2, #11
 8009dec:	4619      	mov	r1, r3
 8009dee:	f7ff f80d 	bl	8008e0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2201      	movs	r2, #1
 8009df6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3324      	adds	r3, #36	; 0x24
 8009e18:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009e1a:	220b      	movs	r2, #11
 8009e1c:	2120      	movs	r1, #32
 8009e1e:	68b8      	ldr	r0, [r7, #8]
 8009e20:	f7ff f815 	bl	8008e4e <mem_set>
	si = i = 0; ni = 8;
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	61fb      	str	r3, [r7, #28]
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	1c5a      	adds	r2, r3, #1
 8009e34:	61fa      	str	r2, [r7, #28]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e3e:	7efb      	ldrb	r3, [r7, #27]
 8009e40:	2b20      	cmp	r3, #32
 8009e42:	d94e      	bls.n	8009ee2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009e44:	7efb      	ldrb	r3, [r7, #27]
 8009e46:	2b2f      	cmp	r3, #47	; 0x2f
 8009e48:	d006      	beq.n	8009e58 <create_name+0x54>
 8009e4a:	7efb      	ldrb	r3, [r7, #27]
 8009e4c:	2b5c      	cmp	r3, #92	; 0x5c
 8009e4e:	d110      	bne.n	8009e72 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009e50:	e002      	b.n	8009e58 <create_name+0x54>
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	3301      	adds	r3, #1
 8009e56:	61fb      	str	r3, [r7, #28]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b2f      	cmp	r3, #47	; 0x2f
 8009e62:	d0f6      	beq.n	8009e52 <create_name+0x4e>
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	4413      	add	r3, r2
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	2b5c      	cmp	r3, #92	; 0x5c
 8009e6e:	d0f0      	beq.n	8009e52 <create_name+0x4e>
			break;
 8009e70:	e038      	b.n	8009ee4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009e72:	7efb      	ldrb	r3, [r7, #27]
 8009e74:	2b2e      	cmp	r3, #46	; 0x2e
 8009e76:	d003      	beq.n	8009e80 <create_name+0x7c>
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d30c      	bcc.n	8009e9a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2b0b      	cmp	r3, #11
 8009e84:	d002      	beq.n	8009e8c <create_name+0x88>
 8009e86:	7efb      	ldrb	r3, [r7, #27]
 8009e88:	2b2e      	cmp	r3, #46	; 0x2e
 8009e8a:	d001      	beq.n	8009e90 <create_name+0x8c>
 8009e8c:	2306      	movs	r3, #6
 8009e8e:	e044      	b.n	8009f1a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009e90:	2308      	movs	r3, #8
 8009e92:	613b      	str	r3, [r7, #16]
 8009e94:	230b      	movs	r3, #11
 8009e96:	617b      	str	r3, [r7, #20]
			continue;
 8009e98:	e022      	b.n	8009ee0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009e9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	da04      	bge.n	8009eac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009ea2:	7efb      	ldrb	r3, [r7, #27]
 8009ea4:	3b80      	subs	r3, #128	; 0x80
 8009ea6:	4a1f      	ldr	r2, [pc, #124]	; (8009f24 <create_name+0x120>)
 8009ea8:	5cd3      	ldrb	r3, [r2, r3]
 8009eaa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009eac:	7efb      	ldrb	r3, [r7, #27]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	481d      	ldr	r0, [pc, #116]	; (8009f28 <create_name+0x124>)
 8009eb2:	f7ff f80e 	bl	8008ed2 <chk_chr>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <create_name+0xbc>
 8009ebc:	2306      	movs	r3, #6
 8009ebe:	e02c      	b.n	8009f1a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009ec0:	7efb      	ldrb	r3, [r7, #27]
 8009ec2:	2b60      	cmp	r3, #96	; 0x60
 8009ec4:	d905      	bls.n	8009ed2 <create_name+0xce>
 8009ec6:	7efb      	ldrb	r3, [r7, #27]
 8009ec8:	2b7a      	cmp	r3, #122	; 0x7a
 8009eca:	d802      	bhi.n	8009ed2 <create_name+0xce>
 8009ecc:	7efb      	ldrb	r3, [r7, #27]
 8009ece:	3b20      	subs	r3, #32
 8009ed0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	613a      	str	r2, [r7, #16]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	4413      	add	r3, r2
 8009edc:	7efa      	ldrb	r2, [r7, #27]
 8009ede:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009ee0:	e7a6      	b.n	8009e30 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009ee2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	441a      	add	r2, r3
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <create_name+0xf4>
 8009ef4:	2306      	movs	r3, #6
 8009ef6:	e010      	b.n	8009f1a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	2be5      	cmp	r3, #229	; 0xe5
 8009efe:	d102      	bne.n	8009f06 <create_name+0x102>
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	2205      	movs	r2, #5
 8009f04:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009f06:	7efb      	ldrb	r3, [r7, #27]
 8009f08:	2b20      	cmp	r3, #32
 8009f0a:	d801      	bhi.n	8009f10 <create_name+0x10c>
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	e000      	b.n	8009f12 <create_name+0x10e>
 8009f10:	2200      	movs	r2, #0
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	330b      	adds	r3, #11
 8009f16:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009f18:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3720      	adds	r7, #32
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	0800b4e8 	.word	0x0800b4e8
 8009f28:	0800b458 	.word	0x0800b458

08009f2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f40:	e002      	b.n	8009f48 <follow_path+0x1c>
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	603b      	str	r3, [r7, #0]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b2f      	cmp	r3, #47	; 0x2f
 8009f4e:	d0f8      	beq.n	8009f42 <follow_path+0x16>
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2b5c      	cmp	r3, #92	; 0x5c
 8009f56:	d0f4      	beq.n	8009f42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	2b1f      	cmp	r3, #31
 8009f64:	d80a      	bhi.n	8009f7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2280      	movs	r2, #128	; 0x80
 8009f6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009f6e:	2100      	movs	r1, #0
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7ff fcf9 	bl	8009968 <dir_sdi>
 8009f76:	4603      	mov	r3, r0
 8009f78:	75fb      	strb	r3, [r7, #23]
 8009f7a:	e043      	b.n	800a004 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f7c:	463b      	mov	r3, r7
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7ff ff3f 	bl	8009e04 <create_name>
 8009f86:	4603      	mov	r3, r0
 8009f88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d134      	bne.n	8009ffa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff feaf 	bl	8009cf4 <dir_find>
 8009f96:	4603      	mov	r3, r0
 8009f98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009fa0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00a      	beq.n	8009fbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	2b04      	cmp	r3, #4
 8009fac:	d127      	bne.n	8009ffe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d122      	bne.n	8009ffe <follow_path+0xd2>
 8009fb8:	2305      	movs	r3, #5
 8009fba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009fbc:	e01f      	b.n	8009ffe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d11c      	bne.n	800a002 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	799b      	ldrb	r3, [r3, #6]
 8009fcc:	f003 0310 	and.w	r3, r3, #16
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d102      	bne.n	8009fda <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009fd4:	2305      	movs	r3, #5
 8009fd6:	75fb      	strb	r3, [r7, #23]
 8009fd8:	e014      	b.n	800a004 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe8:	4413      	add	r3, r2
 8009fea:	4619      	mov	r1, r3
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7ff fe42 	bl	8009c76 <ld_clust>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ff8:	e7c0      	b.n	8009f7c <follow_path+0x50>
			if (res != FR_OK) break;
 8009ffa:	bf00      	nop
 8009ffc:	e002      	b.n	800a004 <follow_path+0xd8>
				break;
 8009ffe:	bf00      	nop
 800a000:	e000      	b.n	800a004 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a002:	bf00      	nop
			}
		}
	}

	return res;
 800a004:	7dfb      	ldrb	r3, [r7, #23]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a00e:	b480      	push	{r7}
 800a010:	b087      	sub	sp, #28
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a016:	f04f 33ff 	mov.w	r3, #4294967295
 800a01a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d031      	beq.n	800a088 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	e002      	b.n	800a032 <get_ldnumber+0x24>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	3301      	adds	r3, #1
 800a030:	617b      	str	r3, [r7, #20]
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b20      	cmp	r3, #32
 800a038:	d903      	bls.n	800a042 <get_ldnumber+0x34>
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b3a      	cmp	r3, #58	; 0x3a
 800a040:	d1f4      	bne.n	800a02c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b3a      	cmp	r3, #58	; 0x3a
 800a048:	d11c      	bne.n	800a084 <get_ldnumber+0x76>
			tp = *path;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	60fa      	str	r2, [r7, #12]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	3b30      	subs	r3, #48	; 0x30
 800a05a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2b09      	cmp	r3, #9
 800a060:	d80e      	bhi.n	800a080 <get_ldnumber+0x72>
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	429a      	cmp	r2, r3
 800a068:	d10a      	bne.n	800a080 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d107      	bne.n	800a080 <get_ldnumber+0x72>
					vol = (int)i;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	3301      	adds	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	e002      	b.n	800a08a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a084:	2300      	movs	r3, #0
 800a086:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a088:	693b      	ldr	r3, [r7, #16]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	371c      	adds	r7, #28
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
	...

0800a098 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	70da      	strb	r2, [r3, #3]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7ff f8d8 	bl	8009268 <move_window>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <check_fs+0x2a>
 800a0be:	2304      	movs	r3, #4
 800a0c0:	e038      	b.n	800a134 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3330      	adds	r3, #48	; 0x30
 800a0c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fe1c 	bl	8008d08 <ld_word>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d001      	beq.n	800a0e0 <check_fs+0x48>
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e029      	b.n	800a134 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0e6:	2be9      	cmp	r3, #233	; 0xe9
 800a0e8:	d009      	beq.n	800a0fe <check_fs+0x66>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0f0:	2beb      	cmp	r3, #235	; 0xeb
 800a0f2:	d11e      	bne.n	800a132 <check_fs+0x9a>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a0fa:	2b90      	cmp	r3, #144	; 0x90
 800a0fc:	d119      	bne.n	800a132 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	3330      	adds	r3, #48	; 0x30
 800a102:	3336      	adds	r3, #54	; 0x36
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe fe17 	bl	8008d38 <ld_dword>
 800a10a:	4603      	mov	r3, r0
 800a10c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a110:	4a0a      	ldr	r2, [pc, #40]	; (800a13c <check_fs+0xa4>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d101      	bne.n	800a11a <check_fs+0x82>
 800a116:	2300      	movs	r3, #0
 800a118:	e00c      	b.n	800a134 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3330      	adds	r3, #48	; 0x30
 800a11e:	3352      	adds	r3, #82	; 0x52
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fe09 	bl	8008d38 <ld_dword>
 800a126:	4603      	mov	r3, r0
 800a128:	4a05      	ldr	r2, [pc, #20]	; (800a140 <check_fs+0xa8>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d101      	bne.n	800a132 <check_fs+0x9a>
 800a12e:	2300      	movs	r3, #0
 800a130:	e000      	b.n	800a134 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a132:	2302      	movs	r3, #2
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	00544146 	.word	0x00544146
 800a140:	33544146 	.word	0x33544146

0800a144 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b096      	sub	sp, #88	; 0x58
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	4613      	mov	r3, r2
 800a150:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff ff58 	bl	800a00e <get_ldnumber>
 800a15e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a162:	2b00      	cmp	r3, #0
 800a164:	da01      	bge.n	800a16a <find_volume+0x26>
 800a166:	230b      	movs	r3, #11
 800a168:	e22d      	b.n	800a5c6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a16a:	4aa1      	ldr	r2, [pc, #644]	; (800a3f0 <find_volume+0x2ac>)
 800a16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a172:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <find_volume+0x3a>
 800a17a:	230c      	movs	r3, #12
 800a17c:	e223      	b.n	800a5c6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a182:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	f023 0301 	bic.w	r3, r3, #1
 800a18a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01a      	beq.n	800a1ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	785b      	ldrb	r3, [r3, #1]
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe fd17 	bl	8008bcc <disk_status>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a1a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10c      	bne.n	800a1ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a1b0:	79fb      	ldrb	r3, [r7, #7]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d007      	beq.n	800a1c6 <find_volume+0x82>
 800a1b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1ba:	f003 0304 	and.w	r3, r3, #4
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a1c2:	230a      	movs	r3, #10
 800a1c4:	e1ff      	b.n	800a5c6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e1fd      	b.n	800a5c6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	785b      	ldrb	r3, [r3, #1]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe fd0f 	bl	8008c00 <disk_initialize>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a1e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e1e6      	b.n	800a5c6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a1f8:	79fb      	ldrb	r3, [r7, #7]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <find_volume+0xca>
 800a1fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a20a:	230a      	movs	r3, #10
 800a20c:	e1db      	b.n	800a5c6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a212:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a214:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a216:	f7ff ff3f 	bl	800a098 <check_fs>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a224:	2b02      	cmp	r3, #2
 800a226:	d149      	bne.n	800a2bc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a228:	2300      	movs	r3, #0
 800a22a:	643b      	str	r3, [r7, #64]	; 0x40
 800a22c:	e01e      	b.n	800a26c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a236:	011b      	lsls	r3, r3, #4
 800a238:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a23c:	4413      	add	r3, r2
 800a23e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	3304      	adds	r3, #4
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d006      	beq.n	800a258 <find_volume+0x114>
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	3308      	adds	r3, #8
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe fd72 	bl	8008d38 <ld_dword>
 800a254:	4602      	mov	r2, r0
 800a256:	e000      	b.n	800a25a <find_volume+0x116>
 800a258:	2200      	movs	r2, #0
 800a25a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	3358      	adds	r3, #88	; 0x58
 800a260:	443b      	add	r3, r7
 800a262:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a268:	3301      	adds	r3, #1
 800a26a:	643b      	str	r3, [r7, #64]	; 0x40
 800a26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d9dd      	bls.n	800a22e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a272:	2300      	movs	r3, #0
 800a274:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <find_volume+0x13e>
 800a27c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a27e:	3b01      	subs	r3, #1
 800a280:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	3358      	adds	r3, #88	; 0x58
 800a288:	443b      	add	r3, r7
 800a28a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a28e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a292:	2b00      	cmp	r3, #0
 800a294:	d005      	beq.n	800a2a2 <find_volume+0x15e>
 800a296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a298:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a29a:	f7ff fefd 	bl	800a098 <check_fs>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	e000      	b.n	800a2a4 <find_volume+0x160>
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a2a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d905      	bls.n	800a2bc <find_volume+0x178>
 800a2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	d9e2      	bls.n	800a282 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a2bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	d101      	bne.n	800a2c8 <find_volume+0x184>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e17e      	b.n	800a5c6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a2c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d901      	bls.n	800a2d4 <find_volume+0x190>
 800a2d0:	230d      	movs	r3, #13
 800a2d2:	e178      	b.n	800a5c6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	3330      	adds	r3, #48	; 0x30
 800a2d8:	330b      	adds	r3, #11
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe fd14 	bl	8008d08 <ld_word>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2e6:	d001      	beq.n	800a2ec <find_volume+0x1a8>
 800a2e8:	230d      	movs	r3, #13
 800a2ea:	e16c      	b.n	800a5c6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	3330      	adds	r3, #48	; 0x30
 800a2f0:	3316      	adds	r3, #22
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe fd08 	bl	8008d08 <ld_word>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d106      	bne.n	800a310 <find_volume+0x1cc>
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	3330      	adds	r3, #48	; 0x30
 800a306:	3324      	adds	r3, #36	; 0x24
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fe fd15 	bl	8008d38 <ld_dword>
 800a30e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a314:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	789b      	ldrb	r3, [r3, #2]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d005      	beq.n	800a334 <find_volume+0x1f0>
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	789b      	ldrb	r3, [r3, #2]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d001      	beq.n	800a334 <find_volume+0x1f0>
 800a330:	230d      	movs	r3, #13
 800a332:	e148      	b.n	800a5c6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	789b      	ldrb	r3, [r3, #2]
 800a338:	461a      	mov	r2, r3
 800a33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a33c:	fb02 f303 	mul.w	r3, r2, r3
 800a340:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a348:	b29a      	uxth	r2, r3
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a350:	895b      	ldrh	r3, [r3, #10]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d008      	beq.n	800a368 <find_volume+0x224>
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	895b      	ldrh	r3, [r3, #10]
 800a35a:	461a      	mov	r2, r3
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	895b      	ldrh	r3, [r3, #10]
 800a360:	3b01      	subs	r3, #1
 800a362:	4013      	ands	r3, r2
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <find_volume+0x228>
 800a368:	230d      	movs	r3, #13
 800a36a:	e12c      	b.n	800a5c6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	3330      	adds	r3, #48	; 0x30
 800a370:	3311      	adds	r3, #17
 800a372:	4618      	mov	r0, r3
 800a374:	f7fe fcc8 	bl	8008d08 <ld_word>
 800a378:	4603      	mov	r3, r0
 800a37a:	461a      	mov	r2, r3
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	891b      	ldrh	r3, [r3, #8]
 800a384:	f003 030f 	and.w	r3, r3, #15
 800a388:	b29b      	uxth	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <find_volume+0x24e>
 800a38e:	230d      	movs	r3, #13
 800a390:	e119      	b.n	800a5c6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	3330      	adds	r3, #48	; 0x30
 800a396:	3313      	adds	r3, #19
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fcb5 	bl	8008d08 <ld_word>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a3a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d106      	bne.n	800a3b6 <find_volume+0x272>
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	3330      	adds	r3, #48	; 0x30
 800a3ac:	3320      	adds	r3, #32
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fcc2 	bl	8008d38 <ld_dword>
 800a3b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	3330      	adds	r3, #48	; 0x30
 800a3ba:	330e      	adds	r3, #14
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fe fca3 	bl	8008d08 <ld_word>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a3c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <find_volume+0x28c>
 800a3cc:	230d      	movs	r3, #13
 800a3ce:	e0fa      	b.n	800a5c6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a3d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d4:	4413      	add	r3, r2
 800a3d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3d8:	8912      	ldrh	r2, [r2, #8]
 800a3da:	0912      	lsrs	r2, r2, #4
 800a3dc:	b292      	uxth	r2, r2
 800a3de:	4413      	add	r3, r2
 800a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a3e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d204      	bcs.n	800a3f4 <find_volume+0x2b0>
 800a3ea:	230d      	movs	r3, #13
 800a3ec:	e0eb      	b.n	800a5c6 <find_volume+0x482>
 800a3ee:	bf00      	nop
 800a3f0:	24000148 	.word	0x24000148
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a3f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3fc:	8952      	ldrh	r2, [r2, #10]
 800a3fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800a402:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <find_volume+0x2ca>
 800a40a:	230d      	movs	r3, #13
 800a40c:	e0db      	b.n	800a5c6 <find_volume+0x482>
		fmt = FS_FAT32;
 800a40e:	2303      	movs	r3, #3
 800a410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d802      	bhi.n	800a424 <find_volume+0x2e0>
 800a41e:	2302      	movs	r3, #2
 800a420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d802      	bhi.n	800a434 <find_volume+0x2f0>
 800a42e:	2301      	movs	r3, #1
 800a430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	1c9a      	adds	r2, r3, #2
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a440:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a442:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a446:	441a      	add	r2, r3
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a44c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	441a      	add	r2, r3
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d11e      	bne.n	800a49c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a460:	3330      	adds	r3, #48	; 0x30
 800a462:	332a      	adds	r3, #42	; 0x2a
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe fc4f 	bl	8008d08 <ld_word>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <find_volume+0x330>
 800a470:	230d      	movs	r3, #13
 800a472:	e0a8      	b.n	800a5c6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	891b      	ldrh	r3, [r3, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <find_volume+0x33c>
 800a47c:	230d      	movs	r3, #13
 800a47e:	e0a2      	b.n	800a5c6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	3330      	adds	r3, #48	; 0x30
 800a484:	332c      	adds	r3, #44	; 0x2c
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fc56 	bl	8008d38 <ld_dword>
 800a48c:	4602      	mov	r2, r0
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	647b      	str	r3, [r7, #68]	; 0x44
 800a49a:	e01f      	b.n	800a4dc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	891b      	ldrh	r3, [r3, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <find_volume+0x364>
 800a4a4:	230d      	movs	r3, #13
 800a4a6:	e08e      	b.n	800a5c6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	6a1a      	ldr	r2, [r3, #32]
 800a4ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ae:	441a      	add	r2, r3
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a4b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d103      	bne.n	800a4c4 <find_volume+0x380>
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	e00a      	b.n	800a4da <find_volume+0x396>
 800a4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c6:	695a      	ldr	r2, [r3, #20]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	4413      	add	r3, r2
 800a4ce:	085a      	lsrs	r2, r3, #1
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a4da:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	699a      	ldr	r2, [r3, #24]
 800a4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4e6:	0a5b      	lsrs	r3, r3, #9
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d201      	bcs.n	800a4f0 <find_volume+0x3ac>
 800a4ec:	230d      	movs	r3, #13
 800a4ee:	e06a      	b.n	800a5c6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f6:	611a      	str	r2, [r3, #16]
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	691a      	ldr	r2, [r3, #16]
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	2280      	movs	r2, #128	; 0x80
 800a504:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a506:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d149      	bne.n	800a5a2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	3330      	adds	r3, #48	; 0x30
 800a512:	3330      	adds	r3, #48	; 0x30
 800a514:	4618      	mov	r0, r3
 800a516:	f7fe fbf7 	bl	8008d08 <ld_word>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d140      	bne.n	800a5a2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a522:	3301      	adds	r3, #1
 800a524:	4619      	mov	r1, r3
 800a526:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a528:	f7fe fe9e 	bl	8009268 <move_window>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d137      	bne.n	800a5a2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a534:	2200      	movs	r2, #0
 800a536:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	3330      	adds	r3, #48	; 0x30
 800a53c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe fbe1 	bl	8008d08 <ld_word>
 800a546:	4603      	mov	r3, r0
 800a548:	461a      	mov	r2, r3
 800a54a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a54e:	429a      	cmp	r2, r3
 800a550:	d127      	bne.n	800a5a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a554:	3330      	adds	r3, #48	; 0x30
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe fbee 	bl	8008d38 <ld_dword>
 800a55c:	4603      	mov	r3, r0
 800a55e:	4a1c      	ldr	r2, [pc, #112]	; (800a5d0 <find_volume+0x48c>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d11e      	bne.n	800a5a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	3330      	adds	r3, #48	; 0x30
 800a568:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fbe3 	bl	8008d38 <ld_dword>
 800a572:	4603      	mov	r3, r0
 800a574:	4a17      	ldr	r2, [pc, #92]	; (800a5d4 <find_volume+0x490>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d113      	bne.n	800a5a2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	3330      	adds	r3, #48	; 0x30
 800a57e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe fbd8 	bl	8008d38 <ld_dword>
 800a588:	4602      	mov	r2, r0
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a590:	3330      	adds	r3, #48	; 0x30
 800a592:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe fbce 	bl	8008d38 <ld_dword>
 800a59c:	4602      	mov	r2, r0
 800a59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a5a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a5aa:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <find_volume+0x494>)
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <find_volume+0x494>)
 800a5b4:	801a      	strh	r2, [r3, #0]
 800a5b6:	4b08      	ldr	r3, [pc, #32]	; (800a5d8 <find_volume+0x494>)
 800a5b8:	881a      	ldrh	r2, [r3, #0]
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a5be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5c0:	f7fe fdea 	bl	8009198 <clear_lock>
#endif
	return FR_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3758      	adds	r7, #88	; 0x58
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	41615252 	.word	0x41615252
 800a5d4:	61417272 	.word	0x61417272
 800a5d8:	2400014c 	.word	0x2400014c

0800a5dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a5e6:	2309      	movs	r3, #9
 800a5e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01c      	beq.n	800a62a <validate+0x4e>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d018      	beq.n	800a62a <validate+0x4e>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d013      	beq.n	800a62a <validate+0x4e>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	889a      	ldrh	r2, [r3, #4]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	88db      	ldrh	r3, [r3, #6]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d10c      	bne.n	800a62a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	785b      	ldrb	r3, [r3, #1]
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe fad8 	bl	8008bcc <disk_status>
 800a61c:	4603      	mov	r3, r0
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <validate+0x4e>
			res = FR_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <validate+0x5a>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	e000      	b.n	800a638 <validate+0x5c>
 800a636:	2300      	movs	r3, #0
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	6013      	str	r3, [r2, #0]
	return res;
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
	...

0800a648 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b088      	sub	sp, #32
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	4613      	mov	r3, r2
 800a654:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a65a:	f107 0310 	add.w	r3, r7, #16
 800a65e:	4618      	mov	r0, r3
 800a660:	f7ff fcd5 	bl	800a00e <get_ldnumber>
 800a664:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	da01      	bge.n	800a670 <f_mount+0x28>
 800a66c:	230b      	movs	r3, #11
 800a66e:	e02b      	b.n	800a6c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a670:	4a17      	ldr	r2, [pc, #92]	; (800a6d0 <f_mount+0x88>)
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a678:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d005      	beq.n	800a68c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a680:	69b8      	ldr	r0, [r7, #24]
 800a682:	f7fe fd89 	bl	8009198 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	2200      	movs	r2, #0
 800a68a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	490d      	ldr	r1, [pc, #52]	; (800a6d0 <f_mount+0x88>)
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <f_mount+0x66>
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d001      	beq.n	800a6b2 <f_mount+0x6a>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e00a      	b.n	800a6c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a6b2:	f107 010c 	add.w	r1, r7, #12
 800a6b6:	f107 0308 	add.w	r3, r7, #8
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff fd41 	bl	800a144 <find_volume>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3720      	adds	r7, #32
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	24000148 	.word	0x24000148

0800a6d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b098      	sub	sp, #96	; 0x60
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <f_open+0x18>
 800a6e8:	2309      	movs	r3, #9
 800a6ea:	e1ad      	b.n	800aa48 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a6f4:	79fa      	ldrb	r2, [r7, #7]
 800a6f6:	f107 0110 	add.w	r1, r7, #16
 800a6fa:	f107 0308 	add.w	r3, r7, #8
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff fd20 	bl	800a144 <find_volume>
 800a704:	4603      	mov	r3, r0
 800a706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a70a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f040 8191 	bne.w	800aa36 <f_open+0x362>
		dj.obj.fs = fs;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	f107 0314 	add.w	r3, r7, #20
 800a71e:	4611      	mov	r1, r2
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff fc03 	bl	8009f2c <follow_path>
 800a726:	4603      	mov	r3, r0
 800a728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a72c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a730:	2b00      	cmp	r3, #0
 800a732:	d11a      	bne.n	800a76a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a734:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a738:	b25b      	sxtb	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	da03      	bge.n	800a746 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a73e:	2306      	movs	r3, #6
 800a740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a744:	e011      	b.n	800a76a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	f023 0301 	bic.w	r3, r3, #1
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	bf14      	ite	ne
 800a750:	2301      	movne	r3, #1
 800a752:	2300      	moveq	r3, #0
 800a754:	b2db      	uxtb	r3, r3
 800a756:	461a      	mov	r2, r3
 800a758:	f107 0314 	add.w	r3, r7, #20
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fbd2 	bl	8008f08 <chk_lock>
 800a764:	4603      	mov	r3, r0
 800a766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a76a:	79fb      	ldrb	r3, [r7, #7]
 800a76c:	f003 031c 	and.w	r3, r3, #28
 800a770:	2b00      	cmp	r3, #0
 800a772:	d07f      	beq.n	800a874 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d017      	beq.n	800a7ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a77c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a780:	2b04      	cmp	r3, #4
 800a782:	d10e      	bne.n	800a7a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a784:	f7fe fc1c 	bl	8008fc0 <enq_lock>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d006      	beq.n	800a79c <f_open+0xc8>
 800a78e:	f107 0314 	add.w	r3, r7, #20
 800a792:	4618      	mov	r0, r3
 800a794:	f7ff fb03 	bl	8009d9e <dir_register>
 800a798:	4603      	mov	r3, r0
 800a79a:	e000      	b.n	800a79e <f_open+0xca>
 800a79c:	2312      	movs	r3, #18
 800a79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	f043 0308 	orr.w	r3, r3, #8
 800a7a8:	71fb      	strb	r3, [r7, #7]
 800a7aa:	e010      	b.n	800a7ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a7ac:	7ebb      	ldrb	r3, [r7, #26]
 800a7ae:	f003 0311 	and.w	r3, r3, #17
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <f_open+0xea>
					res = FR_DENIED;
 800a7b6:	2307      	movs	r3, #7
 800a7b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7bc:	e007      	b.n	800a7ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <f_open+0xfa>
 800a7c8:	2308      	movs	r3, #8
 800a7ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a7ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d168      	bne.n	800a8a8 <f_open+0x1d4>
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	f003 0308 	and.w	r3, r3, #8
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d063      	beq.n	800a8a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a7e0:	f7fe f860 	bl	80088a4 <get_fattime>
 800a7e4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e8:	330e      	adds	r3, #14
 800a7ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fe fae1 	bl	8008db4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f4:	3316      	adds	r3, #22
 800a7f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fe fadb 	bl	8008db4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a800:	330b      	adds	r3, #11
 800a802:	2220      	movs	r2, #32
 800a804:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a80a:	4611      	mov	r1, r2
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7ff fa32 	bl	8009c76 <ld_clust>
 800a812:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a818:	2200      	movs	r2, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff fa4a 	bl	8009cb4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a822:	331c      	adds	r3, #28
 800a824:	2100      	movs	r1, #0
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe fac4 	bl	8008db4 <st_dword>
					fs->wflag = 1;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2201      	movs	r2, #1
 800a830:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d037      	beq.n	800a8a8 <f_open+0x1d4>
						dw = fs->winsect;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a83e:	f107 0314 	add.w	r3, r7, #20
 800a842:	2200      	movs	r2, #0
 800a844:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe ff5d 	bl	8009706 <remove_chain>
 800a84c:	4603      	mov	r3, r0
 800a84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a856:	2b00      	cmp	r3, #0
 800a858:	d126      	bne.n	800a8a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe fd02 	bl	8009268 <move_window>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a86e:	3a01      	subs	r2, #1
 800a870:	60da      	str	r2, [r3, #12]
 800a872:	e019      	b.n	800a8a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d115      	bne.n	800a8a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a87c:	7ebb      	ldrb	r3, [r7, #26]
 800a87e:	f003 0310 	and.w	r3, r3, #16
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a886:	2304      	movs	r3, #4
 800a888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a88c:	e00c      	b.n	800a8a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d007      	beq.n	800a8a8 <f_open+0x1d4>
 800a898:	7ebb      	ldrb	r3, [r7, #26]
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d002      	beq.n	800a8a8 <f_open+0x1d4>
						res = FR_DENIED;
 800a8a2:	2307      	movs	r3, #7
 800a8a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a8a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d128      	bne.n	800a902 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	f003 0308 	and.w	r3, r3, #8
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a8ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8d0:	79fb      	ldrb	r3, [r7, #7]
 800a8d2:	f023 0301 	bic.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bf14      	ite	ne
 800a8da:	2301      	movne	r3, #1
 800a8dc:	2300      	moveq	r3, #0
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	f107 0314 	add.w	r3, r7, #20
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fe fb8b 	bl	8009004 <inc_lock>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d102      	bne.n	800a902 <f_open+0x22e>
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a906:	2b00      	cmp	r3, #0
 800a908:	f040 8095 	bne.w	800aa36 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a910:	4611      	mov	r1, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff f9af 	bl	8009c76 <ld_clust>
 800a918:	4602      	mov	r2, r0
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a920:	331c      	adds	r3, #28
 800a922:	4618      	mov	r0, r3
 800a924:	f7fe fa08 	bl	8008d38 <ld_dword>
 800a928:	4602      	mov	r2, r0
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	88da      	ldrh	r2, [r3, #6]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	79fa      	ldrb	r2, [r7, #7]
 800a946:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3330      	adds	r3, #48	; 0x30
 800a95e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a962:	2100      	movs	r1, #0
 800a964:	4618      	mov	r0, r3
 800a966:	f7fe fa72 	bl	8008e4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	f003 0320 	and.w	r3, r3, #32
 800a970:	2b00      	cmp	r3, #0
 800a972:	d060      	beq.n	800aa36 <f_open+0x362>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d05c      	beq.n	800aa36 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	895b      	ldrh	r3, [r3, #10]
 800a988:	025b      	lsls	r3, r3, #9
 800a98a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	657b      	str	r3, [r7, #84]	; 0x54
 800a998:	e016      	b.n	800a9c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe fd1d 	bl	80093de <get_fat>
 800a9a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a9a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d802      	bhi.n	800a9b2 <f_open+0x2de>
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a9b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b8:	d102      	bne.n	800a9c0 <f_open+0x2ec>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a9c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	657b      	str	r3, [r7, #84]	; 0x54
 800a9c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d103      	bne.n	800a9d8 <f_open+0x304>
 800a9d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d8e0      	bhi.n	800a99a <f_open+0x2c6>
				}
				fp->clust = clst;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a9de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d127      	bne.n	800aa36 <f_open+0x362>
 800a9e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d022      	beq.n	800aa36 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fcd3 	bl	80093a0 <clust2sect>
 800a9fa:	6478      	str	r0, [r7, #68]	; 0x44
 800a9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d103      	bne.n	800aa0a <f_open+0x336>
						res = FR_INT_ERR;
 800aa02:	2302      	movs	r3, #2
 800aa04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa08:	e015      	b.n	800aa36 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aa0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa0c:	0a5a      	lsrs	r2, r3, #9
 800aa0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa10:	441a      	add	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	7858      	ldrb	r0, [r3, #1]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a1a      	ldr	r2, [r3, #32]
 800aa24:	2301      	movs	r3, #1
 800aa26:	f7fe f911 	bl	8008c4c <disk_read>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <f_open+0x362>
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aa36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <f_open+0x370>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aa44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3760      	adds	r7, #96	; 0x60
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08e      	sub	sp, #56	; 0x38
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f107 0214 	add.w	r2, r7, #20
 800aa6e:	4611      	mov	r1, r2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fdb3 	bl	800a5dc <validate>
 800aa76:	4603      	mov	r3, r0
 800aa78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aa7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d107      	bne.n	800aa94 <f_read+0x44>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	7d5b      	ldrb	r3, [r3, #21]
 800aa88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800aa8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <f_read+0x4a>
 800aa94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa98:	e115      	b.n	800acc6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	7d1b      	ldrb	r3, [r3, #20]
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <f_read+0x5a>
 800aaa6:	2307      	movs	r3, #7
 800aaa8:	e10d      	b.n	800acc6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	68da      	ldr	r2, [r3, #12]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	f240 80fe 	bls.w	800acbc <f_read+0x26c>
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800aac4:	e0fa      	b.n	800acbc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f040 80c6 	bne.w	800ac60 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	0a5b      	lsrs	r3, r3, #9
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	8952      	ldrh	r2, [r2, #10]
 800aade:	3a01      	subs	r2, #1
 800aae0:	4013      	ands	r3, r2
 800aae2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d12f      	bne.n	800ab4a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d103      	bne.n	800aafa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	633b      	str	r3, [r7, #48]	; 0x30
 800aaf8:	e013      	b.n	800ab22 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d007      	beq.n	800ab12 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	4619      	mov	r1, r3
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7fe fef9 	bl	8009900 <clmt_clust>
 800ab0e:	6338      	str	r0, [r7, #48]	; 0x30
 800ab10:	e007      	b.n	800ab22 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	f7fe fc5f 	bl	80093de <get_fat>
 800ab20:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d804      	bhi.n	800ab32 <f_read+0xe2>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	755a      	strb	r2, [r3, #21]
 800ab2e:	2302      	movs	r3, #2
 800ab30:	e0c9      	b.n	800acc6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab38:	d104      	bne.n	800ab44 <f_read+0xf4>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	755a      	strb	r2, [r3, #21]
 800ab40:	2301      	movs	r3, #1
 800ab42:	e0c0      	b.n	800acc6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab48:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	4619      	mov	r1, r3
 800ab52:	4610      	mov	r0, r2
 800ab54:	f7fe fc24 	bl	80093a0 <clust2sect>
 800ab58:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d104      	bne.n	800ab6a <f_read+0x11a>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2202      	movs	r2, #2
 800ab64:	755a      	strb	r2, [r3, #21]
 800ab66:	2302      	movs	r3, #2
 800ab68:	e0ad      	b.n	800acc6 <f_read+0x276>
			sect += csect;
 800ab6a:	69ba      	ldr	r2, [r7, #24]
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	4413      	add	r3, r2
 800ab70:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	0a5b      	lsrs	r3, r3, #9
 800ab76:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d039      	beq.n	800abf2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab82:	4413      	add	r3, r2
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	8952      	ldrh	r2, [r2, #10]
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d905      	bls.n	800ab98 <f_read+0x148>
					cc = fs->csize - csect;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	895b      	ldrh	r3, [r3, #10]
 800ab90:	461a      	mov	r2, r3
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	7858      	ldrb	r0, [r3, #1]
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aba2:	f7fe f853 	bl	8008c4c <disk_read>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d004      	beq.n	800abb6 <f_read+0x166>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2201      	movs	r2, #1
 800abb0:	755a      	strb	r2, [r3, #21]
 800abb2:	2301      	movs	r3, #1
 800abb4:	e087      	b.n	800acc6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	7d1b      	ldrb	r3, [r3, #20]
 800abba:	b25b      	sxtb	r3, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	da14      	bge.n	800abea <f_read+0x19a>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a1a      	ldr	r2, [r3, #32]
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abca:	429a      	cmp	r2, r3
 800abcc:	d90d      	bls.n	800abea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6a1a      	ldr	r2, [r3, #32]
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	025b      	lsls	r3, r3, #9
 800abd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abda:	18d0      	adds	r0, r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3330      	adds	r3, #48	; 0x30
 800abe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abe4:	4619      	mov	r1, r3
 800abe6:	f7fe f911 	bl	8008e0c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	025b      	lsls	r3, r3, #9
 800abee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800abf0:	e050      	b.n	800ac94 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	69ba      	ldr	r2, [r7, #24]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d02e      	beq.n	800ac5a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	7d1b      	ldrb	r3, [r3, #20]
 800ac00:	b25b      	sxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	da18      	bge.n	800ac38 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	7858      	ldrb	r0, [r3, #1]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a1a      	ldr	r2, [r3, #32]
 800ac14:	2301      	movs	r3, #1
 800ac16:	f7fe f839 	bl	8008c8c <disk_write>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <f_read+0x1da>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2201      	movs	r2, #1
 800ac24:	755a      	strb	r2, [r3, #21]
 800ac26:	2301      	movs	r3, #1
 800ac28:	e04d      	b.n	800acc6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	7d1b      	ldrb	r3, [r3, #20]
 800ac2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	7858      	ldrb	r0, [r3, #1]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac42:	2301      	movs	r3, #1
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	f7fe f801 	bl	8008c4c <disk_read>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d004      	beq.n	800ac5a <f_read+0x20a>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2201      	movs	r2, #1
 800ac54:	755a      	strb	r2, [r3, #21]
 800ac56:	2301      	movs	r3, #1
 800ac58:	e035      	b.n	800acc6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ac6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ac6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d901      	bls.n	800ac7a <f_read+0x22a>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac88:	4413      	add	r3, r2
 800ac8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac90:	f7fe f8bc 	bl	8008e0c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ac94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	4413      	add	r3, r2
 800ac9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	699a      	ldr	r2, [r3, #24]
 800aca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca2:	441a      	add	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	619a      	str	r2, [r3, #24]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acae:	441a      	add	r2, r3
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f47f af01 	bne.w	800aac6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3738      	adds	r7, #56	; 0x38
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b08c      	sub	sp, #48	; 0x30
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	607a      	str	r2, [r7, #4]
 800acda:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f107 0210 	add.w	r2, r7, #16
 800acec:	4611      	mov	r1, r2
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff fc74 	bl	800a5dc <validate>
 800acf4:	4603      	mov	r3, r0
 800acf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800acfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d107      	bne.n	800ad12 <f_write+0x44>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	7d5b      	ldrb	r3, [r3, #21]
 800ad06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ad0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d002      	beq.n	800ad18 <f_write+0x4a>
 800ad12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad16:	e14b      	b.n	800afb0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	7d1b      	ldrb	r3, [r3, #20]
 800ad1c:	f003 0302 	and.w	r3, r3, #2
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <f_write+0x5a>
 800ad24:	2307      	movs	r3, #7
 800ad26:	e143      	b.n	800afb0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	699a      	ldr	r2, [r3, #24]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	441a      	add	r2, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	f080 812d 	bcs.w	800af94 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	43db      	mvns	r3, r3
 800ad40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ad42:	e127      	b.n	800af94 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f040 80e3 	bne.w	800af18 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	0a5b      	lsrs	r3, r3, #9
 800ad58:	693a      	ldr	r2, [r7, #16]
 800ad5a:	8952      	ldrh	r2, [r2, #10]
 800ad5c:	3a01      	subs	r2, #1
 800ad5e:	4013      	ands	r3, r2
 800ad60:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d143      	bne.n	800adf0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10c      	bne.n	800ad8a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d11a      	bne.n	800adb2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2100      	movs	r1, #0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fe fd25 	bl	80097d0 <create_chain>
 800ad86:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad88:	e013      	b.n	800adb2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d007      	beq.n	800ada2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	4619      	mov	r1, r3
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f7fe fdb1 	bl	8009900 <clmt_clust>
 800ad9e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ada0:	e007      	b.n	800adb2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	69db      	ldr	r3, [r3, #28]
 800ada8:	4619      	mov	r1, r3
 800adaa:	4610      	mov	r0, r2
 800adac:	f7fe fd10 	bl	80097d0 <create_chain>
 800adb0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800adb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80f2 	beq.w	800af9e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d104      	bne.n	800adca <f_write+0xfc>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2202      	movs	r2, #2
 800adc4:	755a      	strb	r2, [r3, #21]
 800adc6:	2302      	movs	r3, #2
 800adc8:	e0f2      	b.n	800afb0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add0:	d104      	bne.n	800addc <f_write+0x10e>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2201      	movs	r2, #1
 800add6:	755a      	strb	r2, [r3, #21]
 800add8:	2301      	movs	r3, #1
 800adda:	e0e9      	b.n	800afb0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ade0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d102      	bne.n	800adf0 <f_write+0x122>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	7d1b      	ldrb	r3, [r3, #20]
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	da18      	bge.n	800ae2c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	7858      	ldrb	r0, [r3, #1]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6a1a      	ldr	r2, [r3, #32]
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f7fd ff3f 	bl	8008c8c <disk_write>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d004      	beq.n	800ae1e <f_write+0x150>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2201      	movs	r2, #1
 800ae18:	755a      	strb	r2, [r3, #21]
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e0c8      	b.n	800afb0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	7d1b      	ldrb	r3, [r3, #20]
 800ae22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	4619      	mov	r1, r3
 800ae34:	4610      	mov	r0, r2
 800ae36:	f7fe fab3 	bl	80093a0 <clust2sect>
 800ae3a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d104      	bne.n	800ae4c <f_write+0x17e>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2202      	movs	r2, #2
 800ae46:	755a      	strb	r2, [r3, #21]
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e0b1      	b.n	800afb0 <f_write+0x2e2>
			sect += csect;
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	4413      	add	r3, r2
 800ae52:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	0a5b      	lsrs	r3, r3, #9
 800ae58:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d03c      	beq.n	800aeda <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ae60:	69ba      	ldr	r2, [r7, #24]
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	4413      	add	r3, r2
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	8952      	ldrh	r2, [r2, #10]
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d905      	bls.n	800ae7a <f_write+0x1ac>
					cc = fs->csize - csect;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	895b      	ldrh	r3, [r3, #10]
 800ae72:	461a      	mov	r2, r3
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	7858      	ldrb	r0, [r3, #1]
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	69f9      	ldr	r1, [r7, #28]
 800ae84:	f7fd ff02 	bl	8008c8c <disk_write>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d004      	beq.n	800ae98 <f_write+0x1ca>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2201      	movs	r2, #1
 800ae92:	755a      	strb	r2, [r3, #21]
 800ae94:	2301      	movs	r3, #1
 800ae96:	e08b      	b.n	800afb0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6a1a      	ldr	r2, [r3, #32]
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	6a3a      	ldr	r2, [r7, #32]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d915      	bls.n	800aed2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6a1a      	ldr	r2, [r3, #32]
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	025b      	lsls	r3, r3, #9
 800aeb6:	69fa      	ldr	r2, [r7, #28]
 800aeb8:	4413      	add	r3, r2
 800aeba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aebe:	4619      	mov	r1, r3
 800aec0:	f7fd ffa4 	bl	8008e0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	7d1b      	ldrb	r3, [r3, #20]
 800aec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aed2:	6a3b      	ldr	r3, [r7, #32]
 800aed4:	025b      	lsls	r3, r3, #9
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800aed8:	e03f      	b.n	800af5a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d016      	beq.n	800af12 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	699a      	ldr	r2, [r3, #24]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d210      	bcs.n	800af12 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	7858      	ldrb	r0, [r3, #1]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aefa:	2301      	movs	r3, #1
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	f7fd fea5 	bl	8008c4c <disk_read>
 800af02:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800af04:	2b00      	cmp	r3, #0
 800af06:	d004      	beq.n	800af12 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2201      	movs	r2, #1
 800af0c:	755a      	strb	r2, [r3, #21]
 800af0e:	2301      	movs	r3, #1
 800af10:	e04e      	b.n	800afb0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af20:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800af24:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800af26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d901      	bls.n	800af32 <f_write+0x264>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af40:	4413      	add	r3, r2
 800af42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af44:	69f9      	ldr	r1, [r7, #28]
 800af46:	4618      	mov	r0, r3
 800af48:	f7fd ff60 	bl	8008e0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	7d1b      	ldrb	r3, [r3, #20]
 800af50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af54:	b2da      	uxtb	r2, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800af5a:	69fa      	ldr	r2, [r7, #28]
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	4413      	add	r3, r2
 800af60:	61fb      	str	r3, [r7, #28]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	699a      	ldr	r2, [r3, #24]
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	441a      	add	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	619a      	str	r2, [r3, #24]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	68da      	ldr	r2, [r3, #12]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	429a      	cmp	r2, r3
 800af78:	bf38      	it	cc
 800af7a:	461a      	movcc	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	60da      	str	r2, [r3, #12]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af86:	441a      	add	r2, r3
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f47f aed4 	bne.w	800ad44 <f_write+0x76>
 800af9c:	e000      	b.n	800afa0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af9e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	7d1b      	ldrb	r3, [r3, #20]
 800afa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3730      	adds	r7, #48	; 0x30
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f107 0208 	add.w	r2, r7, #8
 800afc6:	4611      	mov	r1, r2
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff fb07 	bl	800a5dc <validate>
 800afce:	4603      	mov	r3, r0
 800afd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d168      	bne.n	800b0aa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	7d1b      	ldrb	r3, [r3, #20]
 800afdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d062      	beq.n	800b0aa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	7d1b      	ldrb	r3, [r3, #20]
 800afe8:	b25b      	sxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	da15      	bge.n	800b01a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	7858      	ldrb	r0, [r3, #1]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a1a      	ldr	r2, [r3, #32]
 800affc:	2301      	movs	r3, #1
 800affe:	f7fd fe45 	bl	8008c8c <disk_write>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d001      	beq.n	800b00c <f_sync+0x54>
 800b008:	2301      	movs	r3, #1
 800b00a:	e04f      	b.n	800b0ac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	7d1b      	ldrb	r3, [r3, #20]
 800b010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b014:	b2da      	uxtb	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b01a:	f7fd fc43 	bl	80088a4 <get_fattime>
 800b01e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	f7fe f91d 	bl	8009268 <move_window>
 800b02e:	4603      	mov	r3, r0
 800b030:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b032:	7dfb      	ldrb	r3, [r7, #23]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d138      	bne.n	800b0aa <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	330b      	adds	r3, #11
 800b042:	781a      	ldrb	r2, [r3, #0]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	330b      	adds	r3, #11
 800b048:	f042 0220 	orr.w	r2, r2, #32
 800b04c:	b2d2      	uxtb	r2, r2
 800b04e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6818      	ldr	r0, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	461a      	mov	r2, r3
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	f7fe fe2a 	bl	8009cb4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f103 021c 	add.w	r2, r3, #28
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f7fd fea1 	bl	8008db4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3316      	adds	r3, #22
 800b076:	6939      	ldr	r1, [r7, #16]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fd fe9b 	bl	8008db4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3312      	adds	r3, #18
 800b082:	2100      	movs	r1, #0
 800b084:	4618      	mov	r0, r3
 800b086:	f7fd fe7a 	bl	8008d7e <st_word>
					fs->wflag = 1;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2201      	movs	r2, #1
 800b08e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4618      	mov	r0, r3
 800b094:	f7fe f916 	bl	80092c4 <sync_fs>
 800b098:	4603      	mov	r3, r0
 800b09a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	7d1b      	ldrb	r3, [r3, #20]
 800b0a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7ff ff7b 	bl	800afb8 <f_sync>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d118      	bne.n	800b0fe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f107 0208 	add.w	r2, r7, #8
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fa81 	bl	800a5dc <validate>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10c      	bne.n	800b0fe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fe f819 	bl	8009120 <dec_lock>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d102      	bne.n	800b0fe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b108:	b480      	push	{r7}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	4613      	mov	r3, r2
 800b114:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b116:	2301      	movs	r3, #1
 800b118:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b11e:	4b1f      	ldr	r3, [pc, #124]	; (800b19c <FATFS_LinkDriverEx+0x94>)
 800b120:	7a5b      	ldrb	r3, [r3, #9]
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b00      	cmp	r3, #0
 800b126:	d131      	bne.n	800b18c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b128:	4b1c      	ldr	r3, [pc, #112]	; (800b19c <FATFS_LinkDriverEx+0x94>)
 800b12a:	7a5b      	ldrb	r3, [r3, #9]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	461a      	mov	r2, r3
 800b130:	4b1a      	ldr	r3, [pc, #104]	; (800b19c <FATFS_LinkDriverEx+0x94>)
 800b132:	2100      	movs	r1, #0
 800b134:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b136:	4b19      	ldr	r3, [pc, #100]	; (800b19c <FATFS_LinkDriverEx+0x94>)
 800b138:	7a5b      	ldrb	r3, [r3, #9]
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	4a17      	ldr	r2, [pc, #92]	; (800b19c <FATFS_LinkDriverEx+0x94>)
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b146:	4b15      	ldr	r3, [pc, #84]	; (800b19c <FATFS_LinkDriverEx+0x94>)
 800b148:	7a5b      	ldrb	r3, [r3, #9]
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	461a      	mov	r2, r3
 800b14e:	4b13      	ldr	r3, [pc, #76]	; (800b19c <FATFS_LinkDriverEx+0x94>)
 800b150:	4413      	add	r3, r2
 800b152:	79fa      	ldrb	r2, [r7, #7]
 800b154:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b156:	4b11      	ldr	r3, [pc, #68]	; (800b19c <FATFS_LinkDriverEx+0x94>)
 800b158:	7a5b      	ldrb	r3, [r3, #9]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	1c5a      	adds	r2, r3, #1
 800b15e:	b2d1      	uxtb	r1, r2
 800b160:	4a0e      	ldr	r2, [pc, #56]	; (800b19c <FATFS_LinkDriverEx+0x94>)
 800b162:	7251      	strb	r1, [r2, #9]
 800b164:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b166:	7dbb      	ldrb	r3, [r7, #22]
 800b168:	3330      	adds	r3, #48	; 0x30
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	3301      	adds	r3, #1
 800b174:	223a      	movs	r2, #58	; 0x3a
 800b176:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	3302      	adds	r3, #2
 800b17c:	222f      	movs	r2, #47	; 0x2f
 800b17e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	3303      	adds	r3, #3
 800b184:	2200      	movs	r2, #0
 800b186:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	371c      	adds	r7, #28
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	24000170 	.word	0x24000170

0800b1a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7ff ffaa 	bl	800b108 <FATFS_LinkDriverEx>
 800b1b4:	4603      	mov	r3, r0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
	...

0800b1c0 <__libc_init_array>:
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	4d0d      	ldr	r5, [pc, #52]	; (800b1f8 <__libc_init_array+0x38>)
 800b1c4:	4c0d      	ldr	r4, [pc, #52]	; (800b1fc <__libc_init_array+0x3c>)
 800b1c6:	1b64      	subs	r4, r4, r5
 800b1c8:	10a4      	asrs	r4, r4, #2
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	42a6      	cmp	r6, r4
 800b1ce:	d109      	bne.n	800b1e4 <__libc_init_array+0x24>
 800b1d0:	4d0b      	ldr	r5, [pc, #44]	; (800b200 <__libc_init_array+0x40>)
 800b1d2:	4c0c      	ldr	r4, [pc, #48]	; (800b204 <__libc_init_array+0x44>)
 800b1d4:	f000 f820 	bl	800b218 <_init>
 800b1d8:	1b64      	subs	r4, r4, r5
 800b1da:	10a4      	asrs	r4, r4, #2
 800b1dc:	2600      	movs	r6, #0
 800b1de:	42a6      	cmp	r6, r4
 800b1e0:	d105      	bne.n	800b1ee <__libc_init_array+0x2e>
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}
 800b1e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e8:	4798      	blx	r3
 800b1ea:	3601      	adds	r6, #1
 800b1ec:	e7ee      	b.n	800b1cc <__libc_init_array+0xc>
 800b1ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1f2:	4798      	blx	r3
 800b1f4:	3601      	adds	r6, #1
 800b1f6:	e7f2      	b.n	800b1de <__libc_init_array+0x1e>
 800b1f8:	0800b570 	.word	0x0800b570
 800b1fc:	0800b570 	.word	0x0800b570
 800b200:	0800b570 	.word	0x0800b570
 800b204:	0800b574 	.word	0x0800b574

0800b208 <memset>:
 800b208:	4402      	add	r2, r0
 800b20a:	4603      	mov	r3, r0
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d100      	bne.n	800b212 <memset+0xa>
 800b210:	4770      	bx	lr
 800b212:	f803 1b01 	strb.w	r1, [r3], #1
 800b216:	e7f9      	b.n	800b20c <memset+0x4>

0800b218 <_init>:
 800b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21a:	bf00      	nop
 800b21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21e:	bc08      	pop	{r3}
 800b220:	469e      	mov	lr, r3
 800b222:	4770      	bx	lr

0800b224 <_fini>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	bf00      	nop
 800b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22a:	bc08      	pop	{r3}
 800b22c:	469e      	mov	lr, r3
 800b22e:	4770      	bx	lr
