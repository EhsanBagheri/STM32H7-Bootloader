
stm32h747i-bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800387c  0800387c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800387c  0800387c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800387c  0800387c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  08003894  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  08003894  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b571  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001827  00000000  00000000  0002b5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002d600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003eb26  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a26b  00000000  00000000  0006c896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198794  00000000  00000000  00076b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020f295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb0  00000000  00000000  0020f2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003854 	.word	0x08003854

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003854 	.word	0x08003854

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
//	app_reset_handler();

	pFunction appEntry;
	uint32_t appStack;

	appStack = (uint32_t) *((__IO uint32_t*)APPLICATION_ADDRESS);
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <goto_application+0x30>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	60fb      	str	r3, [r7, #12]
	appEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <goto_application+0x34>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	60bb      	str	r3, [r7, #8]
//	__DMB();
	SCB->VTOR = APPLICATION_ADDRESS;
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <goto_application+0x38>)
 8000418:	4a06      	ldr	r2, [pc, #24]	; (8000434 <goto_application+0x30>)
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f383 8808 	msr	MSP, r3
}
 8000426:	bf00      	nop
//	__DSB();
//	SysTick->CTRL = 0x0;
//	HAL_DeInit();
	__set_MSP(appStack);
	appEntry();
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	4798      	blx	r3
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	08040000 	.word	0x08040000
 8000438:	08040004 	.word	0x08040004
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <boot_main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int boot_main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800044a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800044c:	bf00      	nop
 800044e:	4b30      	ldr	r3, [pc, #192]	; (8000510 <boot_main+0xd0>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000456:	2b00      	cmp	r3, #0
 8000458:	d004      	beq.n	8000464 <boot_main+0x24>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	1e5a      	subs	r2, r3, #1
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	2b00      	cmp	r3, #0
 8000462:	dcf4      	bgt.n	800044e <boot_main+0xe>
  if ( timeout < 0 )
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	da01      	bge.n	800046e <boot_main+0x2e>
  {
  Error_Handler();
 800046a:	f000 f99f 	bl	80007ac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f000 fa11 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 f851 	bl	8000518 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000476:	f000 f8d5 	bl	8000624 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800047a:	4b25      	ldr	r3, [pc, #148]	; (8000510 <boot_main+0xd0>)
 800047c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000480:	4a23      	ldr	r2, [pc, #140]	; (8000510 <boot_main+0xd0>)
 8000482:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <boot_main+0xd0>)
 800048c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000498:	2000      	movs	r0, #0
 800049a:	f000 fd85 	bl	8000fa8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800049e:	2100      	movs	r1, #0
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 fd9b 	bl	8000fdc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004aa:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004ac:	bf00      	nop
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <boot_main+0xd0>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d104      	bne.n	80004c4 <boot_main+0x84>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	1e5a      	subs	r2, r3, #1
 80004be:	607a      	str	r2, [r7, #4]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	dcf4      	bgt.n	80004ae <boot_main+0x6e>
if ( timeout < 0 )
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	da01      	bge.n	80004ce <boot_main+0x8e>
{
Error_Handler();
 80004ca:	f000 f96f 	bl	80007ac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8d9 	bl	8000684 <MX_GPIO_Init>
//  f_close(&file);
//
//  // Unmount the SD card
//  f_mount(NULL, SD_CARD_PATH, 1);

  HAL_Delay(1500);
 80004d2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80004d6:	f000 fa6f 	bl	80009b8 <HAL_Delay>
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80004da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <boot_main+0xd4>)
 80004e0:	f000 fd47 	bl	8000f72 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80004e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <boot_main+0xd4>)
 80004ea:	f000 fd42 	bl	8000f72 <HAL_GPIO_TogglePin>
  HAL_Delay(1500);
 80004ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80004f2:	f000 fa61 	bl	80009b8 <HAL_Delay>
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80004f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <boot_main+0xd4>)
 80004fc:	f000 fd39 	bl	8000f72 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <boot_main+0xd4>)
 8000506:	f000 fd34 	bl	8000f72 <HAL_GPIO_TogglePin>
  goto_application();
 800050a:	f7ff ff7b 	bl	8000404 <goto_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050e:	e7fe      	b.n	800050e <boot_main+0xce>
 8000510:	58024400 	.word	0x58024400
 8000514:	58022000 	.word	0x58022000

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b09c      	sub	sp, #112	; 0x70
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000522:	224c      	movs	r2, #76	; 0x4c
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 f98c 	bl	8003844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2220      	movs	r2, #32
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 f986 	bl	8003844 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000538:	2004      	movs	r0, #4
 800053a:	f000 fd63 	bl	8001004 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053e:	2300      	movs	r3, #0
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	4b36      	ldr	r3, [pc, #216]	; (800061c <SystemClock_Config+0x104>)
 8000544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000546:	4a35      	ldr	r2, [pc, #212]	; (800061c <SystemClock_Config+0x104>)
 8000548:	f023 0301 	bic.w	r3, r3, #1
 800054c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800054e:	4b33      	ldr	r3, [pc, #204]	; (800061c <SystemClock_Config+0x104>)
 8000550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	4b31      	ldr	r3, [pc, #196]	; (8000620 <SystemClock_Config+0x108>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a30      	ldr	r2, [pc, #192]	; (8000620 <SystemClock_Config+0x108>)
 800055e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <SystemClock_Config+0x108>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000570:	bf00      	nop
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <SystemClock_Config+0x108>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800057a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800057e:	d1f8      	bne.n	8000572 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000580:	230b      	movs	r3, #11
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800058a:	2301      	movs	r3, #1
 800058c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2340      	movs	r3, #64	; 0x40
 8000590:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	2302      	movs	r3, #2
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800059e:	2304      	movs	r3, #4
 80005a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 41;
 80005a2:	2329      	movs	r3, #41	; 0x29
 80005a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005aa:	2305      	movs	r3, #5
 80005ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005b2:	2308      	movs	r3, #8
 80005b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fd78 	bl	80010b8 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005ce:	f000 f8ed 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	233f      	movs	r3, #63	; 0x3f
 80005d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f9b8 	bl	800196c <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000602:	f000 f8d3 	bl	80007ac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000606:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800060a:	2100      	movs	r1, #0
 800060c:	2000      	movs	r0, #0
 800060e:	f001 fb63 	bl	8001cd8 <HAL_RCC_MCOConfig>
}
 8000612:	bf00      	nop
 8000614:	3770      	adds	r7, #112	; 0x70
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	58000400 	.word	0x58000400
 8000620:	58024800 	.word	0x58024800

08000624 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0b2      	sub	sp, #200	; 0xc8
 8000628:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800062a:	463b      	mov	r3, r7
 800062c:	22c8      	movs	r2, #200	; 0xc8
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f003 f907 	bl	8003844 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000636:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800063a:	f04f 0300 	mov.w	r3, #0
 800063e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000646:	230c      	movs	r3, #12
 8000648:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000656:	23c0      	movs	r3, #192	; 0xc0
 8000658:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800065a:	2320      	movs	r3, #32
 800065c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fd18 	bl	80020a0 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000676:	f000 f899 	bl	80007ac <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	37c8      	adds	r7, #200	; 0xc8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <MX_GPIO_Init+0x11c>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	4a3f      	ldr	r2, [pc, #252]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006aa:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b8:	4b39      	ldr	r3, [pc, #228]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	4a38      	ldr	r2, [pc, #224]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c8:	4b35      	ldr	r3, [pc, #212]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b32      	ldr	r3, [pc, #200]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e6:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006f4:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <MX_GPIO_Init+0x11c>)
 80006fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <MX_GPIO_Init+0x11c>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_GPIO_Init+0x11c>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <MX_GPIO_Init+0x11c>)
 800071a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_GPIO_Init+0x11c>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000736:	481b      	ldr	r0, [pc, #108]	; (80007a4 <MX_GPIO_Init+0x120>)
 8000738:	f000 fc02 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800073c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4814      	ldr	r0, [pc, #80]	; (80007a4 <MX_GPIO_Init+0x120>)
 8000752:	f000 fa45 	bl	8000be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_GPIO_Init+0x124>)
 8000774:	f000 fa34 	bl	8000be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000778:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0x120>)
 8000792:	f000 fa25 	bl	8000be0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58024400 	.word	0x58024400
 80007a4:	58022000 	.word	0x58022000
 80007a8:	58020000 	.word	0x58020000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <HAL_MspInit+0x30>)
 80007c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x30>)
 80007c6:	f043 0302 	orr.w	r3, r3, #2
 80007ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x30>)
 80007d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	58024400 	.word	0x58024400

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000838:	f000 f89e 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <Boot_Reset_Handler>:

    .section  .text.Boot_Reset_Handler
  .weak  Boot_Reset_Handler
  .type  Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000878 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000844:	f7ff fd48 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	; (8000880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	; (800088c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086e:	f002 ffc5 	bl	80037fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  boot_main
 8000872:	f7ff fde5 	bl	8000440 <boot_main>
  bx  lr
 8000876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000878:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800087c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000880:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000884:	08003884 	.word	0x08003884
  ldr r2, =_sbss
 8000888:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800088c:	24000030 	.word	0x24000030

08000890 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC3_IRQHandler>
	...

08000894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089a:	2003      	movs	r0, #3
 800089c:	f000 f96e 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008a0:	f001 fa84 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 80008a4:	4602      	mov	r2, r0
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_Init+0x68>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	f003 030f 	and.w	r3, r3, #15
 80008b0:	4913      	ldr	r1, [pc, #76]	; (8000900 <HAL_Init+0x6c>)
 80008b2:	5ccb      	ldrb	r3, [r1, r3]
 80008b4:	f003 031f 	and.w	r3, r3, #31
 80008b8:	fa22 f303 	lsr.w	r3, r2, r3
 80008bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_Init+0x68>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_Init+0x6c>)
 80008c8:	5cd3      	ldrb	r3, [r2, r3]
 80008ca:	f003 031f 	and.w	r3, r3, #31
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	fa22 f303 	lsr.w	r3, r2, r3
 80008d4:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <HAL_Init+0x70>)
 80008d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008d8:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <HAL_Init+0x74>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f814 	bl	800090c <HAL_InitTick>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e002      	b.n	80008f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008ee:	f7ff ff63 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	58024400 	.word	0x58024400
 8000900:	0800386c 	.word	0x0800386c
 8000904:	24000004 	.word	0x24000004
 8000908:	24000000 	.word	0x24000000

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_InitTick+0x60>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	e021      	b.n	8000964 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_InitTick+0x64>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_InitTick+0x60>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f945 	bl	8000bc6 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f91d 	bl	8000b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_InitTick+0x68>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2400000c 	.word	0x2400000c
 8000970:	24000000 	.word	0x24000000
 8000974:	24000008 	.word	0x24000008

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2400000c 	.word	0x2400000c
 800099c:	2400002c 	.word	0x2400002c

080009a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	2400002c 	.word	0x2400002c

080009b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff ffee 	bl	80009a0 <HAL_GetTick>
 80009c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d0:	d005      	beq.n	80009de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_Delay+0x44>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009de:	bf00      	nop
 80009e0:	f7ff ffde 	bl	80009a0 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f7      	bhi.n	80009e0 <HAL_Delay+0x28>
  {
  }
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2400000c 	.word	0x2400000c

08000a00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_GetREVID+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	0c1b      	lsrs	r3, r3, #16
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	5c001000 	.word	0x5c001000

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <__NVIC_SetPriorityGrouping+0x40>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	4313      	orrs	r3, r2
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x40>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00
 8000a5c:	05fa0000 	.word	0x05fa0000

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff8e 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff47 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff5e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff90 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffb2 	bl	8000b38 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bee:	4b89      	ldr	r3, [pc, #548]	; (8000e14 <HAL_GPIO_Init+0x234>)
 8000bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bf2:	e194      	b.n	8000f1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 8186 	beq.w	8000f18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d005      	beq.n	8000c24 <HAL_GPIO_Init+0x44>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d130      	bne.n	8000c86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	f003 0201 	and.w	r2, r3, #1
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d017      	beq.n	8000cc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d123      	bne.n	8000d16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	69b9      	ldr	r1, [r7, #24]
 8000d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0203 	and.w	r2, r3, #3
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 80e0 	beq.w	8000f18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <HAL_GPIO_Init+0x238>)
 8000d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d5e:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <HAL_GPIO_Init+0x238>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <HAL_GPIO_Init+0x238>)
 8000d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d76:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <HAL_GPIO_Init+0x23c>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <HAL_GPIO_Init+0x240>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d052      	beq.n	8000e48 <HAL_GPIO_Init+0x268>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_GPIO_Init+0x244>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d031      	beq.n	8000e0e <HAL_GPIO_Init+0x22e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <HAL_GPIO_Init+0x248>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d02b      	beq.n	8000e0a <HAL_GPIO_Init+0x22a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <HAL_GPIO_Init+0x24c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d025      	beq.n	8000e06 <HAL_GPIO_Init+0x226>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <HAL_GPIO_Init+0x250>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01f      	beq.n	8000e02 <HAL_GPIO_Init+0x222>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <HAL_GPIO_Init+0x254>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d019      	beq.n	8000dfe <HAL_GPIO_Init+0x21e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_GPIO_Init+0x258>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x21a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <HAL_GPIO_Init+0x25c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x216>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_GPIO_Init+0x260>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x212>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_GPIO_Init+0x264>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x20e>
 8000dea:	2309      	movs	r3, #9
 8000dec:	e02d      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000dee:	230a      	movs	r3, #10
 8000df0:	e02b      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000df2:	2308      	movs	r3, #8
 8000df4:	e029      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e027      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	e025      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000dfe:	2305      	movs	r3, #5
 8000e00:	e023      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e02:	2304      	movs	r3, #4
 8000e04:	e021      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e01f      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e01d      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e01b      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e12:	bf00      	nop
 8000e14:	58000080 	.word	0x58000080
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58000400 	.word	0x58000400
 8000e20:	58020000 	.word	0x58020000
 8000e24:	58020400 	.word	0x58020400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58020c00 	.word	0x58020c00
 8000e30:	58021000 	.word	0x58021000
 8000e34:	58021400 	.word	0x58021400
 8000e38:	58021800 	.word	0x58021800
 8000e3c:	58021c00 	.word	0x58021c00
 8000e40:	58022000 	.word	0x58022000
 8000e44:	58022400 	.word	0x58022400
 8000e48:	2300      	movs	r3, #0
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	f002 0203 	and.w	r2, r2, #3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4093      	lsls	r3, r2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5a:	4938      	ldr	r1, [pc, #224]	; (8000f3c <HAL_GPIO_Init+0x35c>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f47f ae63 	bne.w	8000bf4 <HAL_GPIO_Init+0x14>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3724      	adds	r7, #36	; 0x24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	58000400 	.word	0x58000400

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	041a      	lsls	r2, r3, #16
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f84:	887a      	ldrh	r2, [r7, #2]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	041a      	lsls	r2, r3, #16
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	400b      	ands	r3, r1
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	619a      	str	r2, [r3, #24]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000fb0:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_HSEM_FastTake+0x2c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3320      	adds	r3, #32
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_HSEM_FastTake+0x30>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e000      	b.n	8000fc6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	58026400 	.word	0x58026400
 8000fd8:	80000300 	.word	0x80000300

08000fdc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000fe6:	4906      	ldr	r1, [pc, #24]	; (8001000 <HAL_HSEM_Release+0x24>)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	58026400 	.word	0x58026400

08001004 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	2b06      	cmp	r3, #6
 8001016:	d00a      	beq.n	800102e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	429a      	cmp	r2, r3
 8001024:	d001      	beq.n	800102a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e040      	b.n	80010ac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e03e      	b.n	80010ac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001036:	491f      	ldr	r1, [pc, #124]	; (80010b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4313      	orrs	r3, r2
 800103c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800103e:	f7ff fcaf 	bl	80009a0 <HAL_GetTick>
 8001042:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001044:	e009      	b.n	800105a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001046:	f7ff fcab 	bl	80009a0 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001054:	d901      	bls.n	800105a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e028      	b.n	80010ac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001066:	d1ee      	bne.n	8001046 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b1e      	cmp	r3, #30
 800106c:	d008      	beq.n	8001080 <HAL_PWREx_ConfigSupply+0x7c>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b2e      	cmp	r3, #46	; 0x2e
 8001072:	d005      	beq.n	8001080 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b1d      	cmp	r3, #29
 8001078:	d002      	beq.n	8001080 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b2d      	cmp	r3, #45	; 0x2d
 800107e:	d114      	bne.n	80010aa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001080:	f7ff fc8e 	bl	80009a0 <HAL_GetTick>
 8001084:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001086:	e009      	b.n	800109c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001088:	f7ff fc8a 	bl	80009a0 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001096:	d901      	bls.n	800109c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e007      	b.n	80010ac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d1ee      	bne.n	8001088 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58024800 	.word	0x58024800

080010b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f000 bc48 	b.w	800195c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 8088 	beq.w	80011ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010da:	4b99      	ldr	r3, [pc, #612]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010e4:	4b96      	ldr	r3, [pc, #600]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	2b10      	cmp	r3, #16
 80010ee:	d007      	beq.n	8001100 <HAL_RCC_OscConfig+0x48>
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	2b18      	cmp	r3, #24
 80010f4:	d111      	bne.n	800111a <HAL_RCC_OscConfig+0x62>
 80010f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d10c      	bne.n	800111a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	4b8f      	ldr	r3, [pc, #572]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d06d      	beq.n	80011e8 <HAL_RCC_OscConfig+0x130>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d169      	bne.n	80011e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	f000 bc21 	b.w	800195c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001122:	d106      	bne.n	8001132 <HAL_RCC_OscConfig+0x7a>
 8001124:	4b86      	ldr	r3, [pc, #536]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a85      	ldr	r2, [pc, #532]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800112a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e02e      	b.n	8001190 <HAL_RCC_OscConfig+0xd8>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0x9c>
 800113a:	4b81      	ldr	r3, [pc, #516]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a80      	ldr	r2, [pc, #512]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b7e      	ldr	r3, [pc, #504]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a7d      	ldr	r2, [pc, #500]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800114c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e01d      	b.n	8001190 <HAL_RCC_OscConfig+0xd8>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0xc0>
 800115e:	4b78      	ldr	r3, [pc, #480]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a77      	ldr	r2, [pc, #476]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b75      	ldr	r3, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a74      	ldr	r2, [pc, #464]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0xd8>
 8001178:	4b71      	ldr	r3, [pc, #452]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a70      	ldr	r2, [pc, #448]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b6e      	ldr	r3, [pc, #440]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a6d      	ldr	r2, [pc, #436]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d013      	beq.n	80011c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001198:	f7ff fc02 	bl	80009a0 <HAL_GetTick>
 800119c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fbfe 	bl	80009a0 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e3d4      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0xe8>
 80011be:	e014      	b.n	80011ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fbee 	bl	80009a0 <HAL_GetTick>
 80011c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fbea 	bl	80009a0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e3c0      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011da:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x110>
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80ca 	beq.w	800138c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f8:	4b51      	ldr	r3, [pc, #324]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001200:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001202:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <HAL_RCC_OscConfig+0x166>
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	2b18      	cmp	r3, #24
 8001212:	d156      	bne.n	80012c2 <HAL_RCC_OscConfig+0x20a>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d151      	bne.n	80012c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800121e:	4b48      	ldr	r3, [pc, #288]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_RCC_OscConfig+0x17e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e392      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001236:	4b42      	ldr	r3, [pc, #264]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 0219 	bic.w	r2, r3, #25
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	493f      	ldr	r1, [pc, #252]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fbaa 	bl	80009a0 <HAL_GetTick>
 800124c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001250:	f7ff fba6 	bl	80009a0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e37c      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	f7ff fbc7 	bl	8000a00 <HAL_GetREVID>
 8001272:	4603      	mov	r3, r0
 8001274:	f241 0203 	movw	r2, #4099	; 0x1003
 8001278:	4293      	cmp	r3, r2
 800127a:	d817      	bhi.n	80012ac <HAL_RCC_OscConfig+0x1f4>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	2b40      	cmp	r3, #64	; 0x40
 8001282:	d108      	bne.n	8001296 <HAL_RCC_OscConfig+0x1de>
 8001284:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800128c:	4a2c      	ldr	r2, [pc, #176]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800128e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001292:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001294:	e07a      	b.n	800138c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	031b      	lsls	r3, r3, #12
 80012a4:	4926      	ldr	r1, [pc, #152]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012aa:	e06f      	b.n	800138c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	4921      	ldr	r1, [pc, #132]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c0:	e064      	b.n	800138c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d047      	beq.n	800135a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 0219 	bic.w	r2, r3, #25
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	491a      	ldr	r1, [pc, #104]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fb60 	bl	80009a0 <HAL_GetTick>
 80012e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fb5c 	bl	80009a0 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e332      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	f7ff fb7d 	bl	8000a00 <HAL_GetREVID>
 8001306:	4603      	mov	r3, r0
 8001308:	f241 0203 	movw	r2, #4099	; 0x1003
 800130c:	4293      	cmp	r3, r2
 800130e:	d819      	bhi.n	8001344 <HAL_RCC_OscConfig+0x28c>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b40      	cmp	r3, #64	; 0x40
 8001316:	d108      	bne.n	800132a <HAL_RCC_OscConfig+0x272>
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	6053      	str	r3, [r2, #4]
 8001328:	e030      	b.n	800138c <HAL_RCC_OscConfig+0x2d4>
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	4901      	ldr	r1, [pc, #4]	; (8001340 <HAL_RCC_OscConfig+0x288>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
 800133e:	e025      	b.n	800138c <HAL_RCC_OscConfig+0x2d4>
 8001340:	58024400 	.word	0x58024400
 8001344:	4b9a      	ldr	r3, [pc, #616]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	4997      	ldr	r1, [pc, #604]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	e018      	b.n	800138c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135a:	4b95      	ldr	r3, [pc, #596]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a94      	ldr	r2, [pc, #592]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fb1b 	bl	80009a0 <HAL_GetTick>
 800136a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fb17 	bl	80009a0 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e2ed      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001380:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a9 	beq.w	80014ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800139a:	4b85      	ldr	r3, [pc, #532]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013a4:	4b82      	ldr	r3, [pc, #520]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d007      	beq.n	80013c0 <HAL_RCC_OscConfig+0x308>
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b18      	cmp	r3, #24
 80013b4:	d13a      	bne.n	800142c <HAL_RCC_OscConfig+0x374>
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d135      	bne.n	800142c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013c0:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x320>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b80      	cmp	r3, #128	; 0x80
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e2c1      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013d8:	f7ff fb12 	bl	8000a00 <HAL_GetREVID>
 80013dc:	4603      	mov	r3, r0
 80013de:	f241 0203 	movw	r2, #4099	; 0x1003
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d817      	bhi.n	8001416 <HAL_RCC_OscConfig+0x35e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d108      	bne.n	8001400 <HAL_RCC_OscConfig+0x348>
 80013ee:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013f6:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013fe:	e075      	b.n	80014ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001400:	4b6b      	ldr	r3, [pc, #428]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	069b      	lsls	r3, r3, #26
 800140e:	4968      	ldr	r1, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001414:	e06a      	b.n	80014ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001416:	4b66      	ldr	r3, [pc, #408]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	061b      	lsls	r3, r3, #24
 8001424:	4962      	ldr	r1, [pc, #392]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001426:	4313      	orrs	r3, r2
 8001428:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800142a:	e05f      	b.n	80014ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d042      	beq.n	80014ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001434:	4b5e      	ldr	r3, [pc, #376]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a5d      	ldr	r2, [pc, #372]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 800143a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff faae 	bl	80009a0 <HAL_GetTick>
 8001444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001448:	f7ff faaa 	bl	80009a0 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e280      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800145a:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001466:	f7ff facb 	bl	8000a00 <HAL_GetREVID>
 800146a:	4603      	mov	r3, r0
 800146c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001470:	4293      	cmp	r3, r2
 8001472:	d817      	bhi.n	80014a4 <HAL_RCC_OscConfig+0x3ec>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	2b20      	cmp	r3, #32
 800147a:	d108      	bne.n	800148e <HAL_RCC_OscConfig+0x3d6>
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001484:	4a4a      	ldr	r2, [pc, #296]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800148a:	6053      	str	r3, [r2, #4]
 800148c:	e02e      	b.n	80014ec <HAL_RCC_OscConfig+0x434>
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	069b      	lsls	r3, r3, #26
 800149c:	4944      	ldr	r1, [pc, #272]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
 80014a2:	e023      	b.n	80014ec <HAL_RCC_OscConfig+0x434>
 80014a4:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	493f      	ldr	r1, [pc, #252]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
 80014b8:	e018      	b.n	80014ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a3c      	ldr	r2, [pc, #240]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fa6b 	bl	80009a0 <HAL_GetTick>
 80014ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014ce:	f7ff fa67 	bl	80009a0 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e23d      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d036      	beq.n	8001566 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d019      	beq.n	8001534 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001504:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff fa48 	bl	80009a0 <HAL_GetTick>
 8001510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001514:	f7ff fa44 	bl	80009a0 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e21a      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x45c>
 8001532:	e018      	b.n	8001566 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001540:	f7ff fa2e 	bl	80009a0 <HAL_GetTick>
 8001544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff fa2a 	bl	80009a0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e200      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 800155c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	2b00      	cmp	r3, #0
 8001570:	d039      	beq.n	80015e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 8001580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001584:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001586:	f7ff fa0b 	bl	80009a0 <HAL_GetTick>
 800158a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800158e:	f7ff fa07 	bl	80009a0 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e1dd      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_RCC_OscConfig+0x4f8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x4d6>
 80015ac:	e01b      	b.n	80015e6 <HAL_RCC_OscConfig+0x52e>
 80015ae:	bf00      	nop
 80015b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015b4:	4b9b      	ldr	r3, [pc, #620]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a9a      	ldr	r2, [pc, #616]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80015ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015c0:	f7ff f9ee 	bl	80009a0 <HAL_GetTick>
 80015c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c8:	f7ff f9ea 	bl	80009a0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1c0      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015da:	4b92      	ldr	r3, [pc, #584]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8081 	beq.w	80016f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015f4:	4b8c      	ldr	r3, [pc, #560]	; (8001828 <HAL_RCC_OscConfig+0x770>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a8b      	ldr	r2, [pc, #556]	; (8001828 <HAL_RCC_OscConfig+0x770>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001600:	f7ff f9ce 	bl	80009a0 <HAL_GetTick>
 8001604:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001608:	f7ff f9ca 	bl	80009a0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1a0      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800161a:	4b83      	ldr	r3, [pc, #524]	; (8001828 <HAL_RCC_OscConfig+0x770>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d106      	bne.n	800163c <HAL_RCC_OscConfig+0x584>
 800162e:	4b7d      	ldr	r3, [pc, #500]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4a7c      	ldr	r2, [pc, #496]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6713      	str	r3, [r2, #112]	; 0x70
 800163a:	e02d      	b.n	8001698 <HAL_RCC_OscConfig+0x5e0>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10c      	bne.n	800165e <HAL_RCC_OscConfig+0x5a6>
 8001644:	4b77      	ldr	r3, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a76      	ldr	r2, [pc, #472]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
 8001650:	4b74      	ldr	r3, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	4a73      	ldr	r2, [pc, #460]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001656:	f023 0304 	bic.w	r3, r3, #4
 800165a:	6713      	str	r3, [r2, #112]	; 0x70
 800165c:	e01c      	b.n	8001698 <HAL_RCC_OscConfig+0x5e0>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x5c8>
 8001666:	4b6f      	ldr	r3, [pc, #444]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
 8001672:	4b6c      	ldr	r3, [pc, #432]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a6b      	ldr	r2, [pc, #428]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0x5e0>
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a67      	ldr	r2, [pc, #412]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b65      	ldr	r3, [pc, #404]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a64      	ldr	r2, [pc, #400]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001692:	f023 0304 	bic.w	r3, r3, #4
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d015      	beq.n	80016cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff f97e 	bl	80009a0 <HAL_GetTick>
 80016a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7ff f97a 	bl	80009a0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e14e      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016be:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0ee      	beq.n	80016a8 <HAL_RCC_OscConfig+0x5f0>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff f968 	bl	80009a0 <HAL_GetTick>
 80016d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff f964 	bl	80009a0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e138      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ee      	bne.n	80016d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 812d 	beq.w	800195a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001708:	2b18      	cmp	r3, #24
 800170a:	f000 80bd 	beq.w	8001888 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	2b02      	cmp	r3, #2
 8001714:	f040 809e 	bne.w	8001854 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a41      	ldr	r2, [pc, #260]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 800171e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff f93c 	bl	80009a0 <HAL_GetTick>
 8001728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff f938 	bl	80009a0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e10e      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800173e:	4b39      	ldr	r3, [pc, #228]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800174a:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 800174c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_RCC_OscConfig+0x774>)
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	430a      	orrs	r2, r1
 800175e:	4931      	ldr	r1, [pc, #196]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001760:	4313      	orrs	r3, r2
 8001762:	628b      	str	r3, [r1, #40]	; 0x28
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	3b01      	subs	r3, #1
 800176a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001772:	3b01      	subs	r3, #1
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	b29b      	uxth	r3, r3
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	3b01      	subs	r3, #1
 8001780:	041b      	lsls	r3, r3, #16
 8001782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	3b01      	subs	r3, #1
 800178e:	061b      	lsls	r3, r3, #24
 8001790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001794:	4923      	ldr	r1, [pc, #140]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001796:	4313      	orrs	r3, r2
 8001798:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	4a21      	ldr	r2, [pc, #132]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_RCC_OscConfig+0x778>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017b2:	00d2      	lsls	r2, r2, #3
 80017b4:	491b      	ldr	r1, [pc, #108]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f023 020c 	bic.w	r2, r3, #12
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4917      	ldr	r1, [pc, #92]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	f023 0202 	bic.w	r2, r3, #2
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	4912      	ldr	r1, [pc, #72]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	4a10      	ldr	r2, [pc, #64]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001800:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_RCC_OscConfig+0x76c>)
 8001814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff f8c1 	bl	80009a0 <HAL_GetTick>
 800181e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001820:	e011      	b.n	8001846 <HAL_RCC_OscConfig+0x78e>
 8001822:	bf00      	nop
 8001824:	58024400 	.word	0x58024400
 8001828:	58024800 	.word	0x58024800
 800182c:	fffffc0c 	.word	0xfffffc0c
 8001830:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f8b4 	bl	80009a0 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e08a      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x77c>
 8001852:	e082      	b.n	800195a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a42      	ldr	r2, [pc, #264]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 800185a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff f89e 	bl	80009a0 <HAL_GetTick>
 8001864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff f89a 	bl	80009a0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e070      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x7b0>
 8001886:	e068      	b.n	800195a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800188e:	4b35      	ldr	r3, [pc, #212]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	2b01      	cmp	r3, #1
 800189a:	d031      	beq.n	8001900 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0203 	and.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d12a      	bne.n	8001900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d122      	bne.n	8001900 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d11a      	bne.n	8001900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	0a5b      	lsrs	r3, r3, #9
 80018ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d111      	bne.n	8001900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d108      	bne.n	8001900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	0e1b      	lsrs	r3, r3, #24
 80018f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e02b      	b.n	800195c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800190e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	429a      	cmp	r2, r3
 8001918:	d01f      	beq.n	800195a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001926:	f7ff f83b 	bl	80009a0 <HAL_GetTick>
 800192a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800192c:	bf00      	nop
 800192e:	f7ff f837 	bl	80009a0 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	4293      	cmp	r3, r2
 8001938:	d0f9      	beq.n	800192e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 800193c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_OscConfig+0x8b0>)
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001946:	00d2      	lsls	r2, r2, #3
 8001948:	4906      	ldr	r1, [pc, #24]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 800194a:	4313      	orrs	r3, r2
 800194c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_RCC_OscConfig+0x8ac>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3730      	adds	r7, #48	; 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	58024400 	.word	0x58024400
 8001968:	ffff0007 	.word	0xffff0007

0800196c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e19c      	b.n	8001cba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b8a      	ldr	r3, [pc, #552]	; (8001bac <HAL_RCC_ClockConfig+0x240>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b87      	ldr	r3, [pc, #540]	; (8001bac <HAL_RCC_ClockConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 020f 	bic.w	r2, r3, #15
 8001996:	4985      	ldr	r1, [pc, #532]	; (8001bac <HAL_RCC_ClockConfig+0x240>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b83      	ldr	r3, [pc, #524]	; (8001bac <HAL_RCC_ClockConfig+0x240>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e184      	b.n	8001cba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d010      	beq.n	80019de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d908      	bls.n	80019de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019cc:	4b78      	ldr	r3, [pc, #480]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	4975      	ldr	r1, [pc, #468]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d010      	beq.n	8001a0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d908      	bls.n	8001a0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019fa:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	496a      	ldr	r1, [pc, #424]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d908      	bls.n	8001a3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a28:	4b61      	ldr	r3, [pc, #388]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	495e      	ldr	r1, [pc, #376]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d010      	beq.n	8001a68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d908      	bls.n	8001a68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a56:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4953      	ldr	r1, [pc, #332]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d010      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d908      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f023 020f 	bic.w	r2, r3, #15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4947      	ldr	r1, [pc, #284]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d055      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001aa2:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4940      	ldr	r1, [pc, #256]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001abc:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d121      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0f6      	b.n	8001cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d115      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0ea      	b.n	8001cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0de      	b.n	8001cba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0d6      	b.n	8001cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f023 0207 	bic.w	r2, r3, #7
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b1e:	f7fe ff3f 	bl	80009a0 <HAL_GetTick>
 8001b22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b26:	f7fe ff3b 	bl	80009a0 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0be      	b.n	8001cba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d1eb      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d010      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d208      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f023 020f 	bic.w	r2, r3, #15
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <HAL_RCC_ClockConfig+0x244>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_ClockConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d214      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_RCC_ClockConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 020f 	bic.w	r2, r3, #15
 8001b92:	4906      	ldr	r1, [pc, #24]	; (8001bac <HAL_RCC_ClockConfig+0x240>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_RCC_ClockConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e086      	b.n	8001cba <HAL_RCC_ClockConfig+0x34e>
 8001bac:	52002000 	.word	0x52002000
 8001bb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d208      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	4939      	ldr	r1, [pc, #228]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d010      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d208      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	492e      	ldr	r1, [pc, #184]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d010      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d208      	bcs.n	8001c3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4922      	ldr	r1, [pc, #136]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d010      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69da      	ldr	r2, [r3, #28]
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d208      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4917      	ldr	r1, [pc, #92]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c6c:	f000 f89e 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	4912      	ldr	r1, [pc, #72]	; (8001cc8 <HAL_RCC_ClockConfig+0x35c>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_RCC_ClockConfig+0x358>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <HAL_RCC_ClockConfig+0x35c>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_RCC_ClockConfig+0x360>)
 8001ca2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <HAL_RCC_ClockConfig+0x364>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x368>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fe2c 	bl	800090c <HAL_InitTick>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	0800386c 	.word	0x0800386c
 8001ccc:	24000004 	.word	0x24000004
 8001cd0:	24000000 	.word	0x24000000
 8001cd4:	24000008 	.word	0x24000008

08001cd8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d12a      	bne.n	8001d40 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfa:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	481f      	ldr	r0, [pc, #124]	; (8001da4 <HAL_RCC_MCOConfig+0xcc>)
 8001d26:	f7fe ff5b 	bl	8000be0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	430b      	orrs	r3, r1
 8001d38:	4919      	ldr	r1, [pc, #100]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001d3e:	e02a      	b.n	8001d96 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480b      	ldr	r0, [pc, #44]	; (8001da8 <HAL_RCC_MCOConfig+0xd0>)
 8001d7c:	f7fe ff30 	bl	8000be0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	01d9      	lsls	r1, r3, #7
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	4903      	ldr	r1, [pc, #12]	; (8001da0 <HAL_RCC_MCOConfig+0xc8>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	610b      	str	r3, [r1, #16]
}
 8001d96:	bf00      	nop
 8001d98:	3730      	adds	r7, #48	; 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	58024400 	.word	0x58024400
 8001da4:	58020000 	.word	0x58020000
 8001da8:	58020800 	.word	0x58020800

08001dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001db2:	4bb3      	ldr	r3, [pc, #716]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dba:	2b18      	cmp	r3, #24
 8001dbc:	f200 8155 	bhi.w	800206a <HAL_RCC_GetSysClockFreq+0x2be>
 8001dc0:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001e2d 	.word	0x08001e2d
 8001dcc:	0800206b 	.word	0x0800206b
 8001dd0:	0800206b 	.word	0x0800206b
 8001dd4:	0800206b 	.word	0x0800206b
 8001dd8:	0800206b 	.word	0x0800206b
 8001ddc:	0800206b 	.word	0x0800206b
 8001de0:	0800206b 	.word	0x0800206b
 8001de4:	0800206b 	.word	0x0800206b
 8001de8:	08001e53 	.word	0x08001e53
 8001dec:	0800206b 	.word	0x0800206b
 8001df0:	0800206b 	.word	0x0800206b
 8001df4:	0800206b 	.word	0x0800206b
 8001df8:	0800206b 	.word	0x0800206b
 8001dfc:	0800206b 	.word	0x0800206b
 8001e00:	0800206b 	.word	0x0800206b
 8001e04:	0800206b 	.word	0x0800206b
 8001e08:	08001e59 	.word	0x08001e59
 8001e0c:	0800206b 	.word	0x0800206b
 8001e10:	0800206b 	.word	0x0800206b
 8001e14:	0800206b 	.word	0x0800206b
 8001e18:	0800206b 	.word	0x0800206b
 8001e1c:	0800206b 	.word	0x0800206b
 8001e20:	0800206b 	.word	0x0800206b
 8001e24:	0800206b 	.word	0x0800206b
 8001e28:	08001e5f 	.word	0x08001e5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e2c:	4b94      	ldr	r3, [pc, #592]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e38:	4b91      	ldr	r3, [pc, #580]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	4a90      	ldr	r2, [pc, #576]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e4a:	e111      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e4c:	4b8d      	ldr	r3, [pc, #564]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e4e:	61bb      	str	r3, [r7, #24]
      break;
 8001e50:	e10e      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e52:	4b8d      	ldr	r3, [pc, #564]	; (8002088 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e54:	61bb      	str	r3, [r7, #24]
      break;
 8001e56:	e10b      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e58:	4b8c      	ldr	r3, [pc, #560]	; (800208c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e5a:	61bb      	str	r3, [r7, #24]
      break;
 8001e5c:	e108      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e5e:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e68:	4b85      	ldr	r3, [pc, #532]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e74:	4b82      	ldr	r3, [pc, #520]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e7e:	4b80      	ldr	r3, [pc, #512]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80e1 	beq.w	8002064 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	f000 8083 	beq.w	8001fb0 <HAL_RCC_GetSysClockFreq+0x204>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	f200 80a1 	bhi.w	8001ff4 <HAL_RCC_GetSysClockFreq+0x248>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x114>
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d056      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001ebe:	e099      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ec0:	4b6f      	ldr	r3, [pc, #444]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d02d      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	08db      	lsrs	r3, r3, #3
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	4a6b      	ldr	r2, [pc, #428]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8001edc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef6:	4b62      	ldr	r3, [pc, #392]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f26:	e087      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002094 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f3a:	4b51      	ldr	r3, [pc, #324]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f6a:	e065      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002098 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001faa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fae:	e043      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800209c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ff2:	e021      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002098 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002016:	ed97 6a02 	vldr	s12, [r7, #8]
 800201a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002090 <HAL_RCC_GetSysClockFreq+0x2e4>
 800201e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800202a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800202e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002036:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	0a5b      	lsrs	r3, r3, #9
 800203e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002042:	3301      	adds	r3, #1
 8002044:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002050:	edd7 6a07 	vldr	s13, [r7, #28]
 8002054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800205c:	ee17 3a90 	vmov	r3, s15
 8002060:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002062:	e005      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
      break;
 8002068:	e002      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800206c:	61bb      	str	r3, [r7, #24]
      break;
 800206e:	bf00      	nop
  }

  return sysclockfreq;
 8002070:	69bb      	ldr	r3, [r7, #24]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	58024400 	.word	0x58024400
 8002084:	03d09000 	.word	0x03d09000
 8002088:	003d0900 	.word	0x003d0900
 800208c:	017d7840 	.word	0x017d7840
 8002090:	46000000 	.word	0x46000000
 8002094:	4c742400 	.word	0x4c742400
 8002098:	4a742400 	.word	0x4a742400
 800209c:	4bbebc20 	.word	0x4bbebc20

080020a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a4:	b0cc      	sub	sp, #304	; 0x130
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80020c4:	2500      	movs	r5, #0
 80020c6:	ea54 0305 	orrs.w	r3, r4, r5
 80020ca:	d049      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80020cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80020d6:	d02f      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80020d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80020dc:	d828      	bhi.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80020de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020e2:	d01a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80020e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020e8:	d822      	bhi.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020f2:	d007      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020f4:	e01c      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020f6:	4bb8      	ldr	r3, [pc, #736]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	4ab7      	ldr	r2, [pc, #732]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002102:	e01a      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002104:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002108:	3308      	adds	r3, #8
 800210a:	2102      	movs	r1, #2
 800210c:	4618      	mov	r0, r3
 800210e:	f001 fa11 	bl	8003534 <RCCEx_PLL2_Config>
 8002112:	4603      	mov	r3, r0
 8002114:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002118:	e00f      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800211a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800211e:	3328      	adds	r3, #40	; 0x28
 8002120:	2102      	movs	r1, #2
 8002122:	4618      	mov	r0, r3
 8002124:	f001 fab8 	bl	8003698 <RCCEx_PLL3_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800212e:	e004      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002136:	e000      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800213a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002142:	4ba5      	ldr	r3, [pc, #660]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002146:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800214a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800214e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002150:	4aa1      	ldr	r2, [pc, #644]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002152:	430b      	orrs	r3, r1
 8002154:	6513      	str	r3, [r2, #80]	; 0x50
 8002156:	e003      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002158:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800215c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002160:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800216c:	f04f 0900 	mov.w	r9, #0
 8002170:	ea58 0309 	orrs.w	r3, r8, r9
 8002174:	d047      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002176:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	2b04      	cmp	r3, #4
 800217e:	d82a      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	0800219d 	.word	0x0800219d
 800218c:	080021ab 	.word	0x080021ab
 8002190:	080021c1 	.word	0x080021c1
 8002194:	080021df 	.word	0x080021df
 8002198:	080021df 	.word	0x080021df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800219c:	4b8e      	ldr	r3, [pc, #568]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	4a8d      	ldr	r2, [pc, #564]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021a8:	e01a      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021ae:	3308      	adds	r3, #8
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 f9be 	bl	8003534 <RCCEx_PLL2_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021be:	e00f      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021c4:	3328      	adds	r3, #40	; 0x28
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 fa65 	bl	8003698 <RCCEx_PLL3_Config>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021d4:	e004      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80021dc:	e000      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80021de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e8:	4b7b      	ldr	r3, [pc, #492]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ec:	f023 0107 	bic.w	r1, r3, #7
 80021f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	4a78      	ldr	r2, [pc, #480]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6513      	str	r3, [r2, #80]	; 0x50
 80021fc:	e003      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002202:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002206:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002212:	f04f 0b00 	mov.w	fp, #0
 8002216:	ea5a 030b 	orrs.w	r3, sl, fp
 800221a:	d04c      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800221c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002226:	d030      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800222c:	d829      	bhi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800222e:	2bc0      	cmp	r3, #192	; 0xc0
 8002230:	d02d      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002232:	2bc0      	cmp	r3, #192	; 0xc0
 8002234:	d825      	bhi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002236:	2b80      	cmp	r3, #128	; 0x80
 8002238:	d018      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800223a:	2b80      	cmp	r3, #128	; 0x80
 800223c:	d821      	bhi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	d007      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002246:	e01c      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002248:	4b63      	ldr	r3, [pc, #396]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	4a62      	ldr	r2, [pc, #392]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800224e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002254:	e01c      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002256:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800225a:	3308      	adds	r3, #8
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f001 f968 	bl	8003534 <RCCEx_PLL2_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800226a:	e011      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800226c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002270:	3328      	adds	r3, #40	; 0x28
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f001 fa0f 	bl	8003698 <RCCEx_PLL3_Config>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002280:	e006      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002288:	e002      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800228e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002290:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002298:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800229a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80022a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	4a4c      	ldr	r2, [pc, #304]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6513      	str	r3, [r2, #80]	; 0x50
 80022ac:	e003      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80022b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80022c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80022cc:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80022d0:	460b      	mov	r3, r1
 80022d2:	4313      	orrs	r3, r2
 80022d4:	d053      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80022d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80022de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e2:	d035      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80022e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e8:	d82e      	bhi.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80022ee:	d031      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80022f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80022f4:	d828      	bhi.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fa:	d01a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80022fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002300:	d822      	bhi.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800230a:	d007      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800230c:	e01c      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800230e:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800231a:	e01c      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800231c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002320:	3308      	adds	r3, #8
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f001 f905 	bl	8003534 <RCCEx_PLL2_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002330:	e011      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002332:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002336:	3328      	adds	r3, #40	; 0x28
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f001 f9ac 	bl	8003698 <RCCEx_PLL3_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002346:	e006      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800234e:	e002      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002350:	bf00      	nop
 8002352:	e000      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002356:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10b      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002366:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800236a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800236e:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002370:	430b      	orrs	r3, r1
 8002372:	6593      	str	r3, [r2, #88]	; 0x58
 8002374:	e003      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002376:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800237a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800237e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800238a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002394:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002398:	460b      	mov	r3, r1
 800239a:	4313      	orrs	r3, r2
 800239c:	d056      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800239e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80023a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023aa:	d038      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80023ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023b0:	d831      	bhi.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023b6:	d034      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80023b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023bc:	d82b      	bhi.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023c2:	d01d      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80023c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023c8:	d825      	bhi.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80023ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80023d4:	e01f      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023d6:	bf00      	nop
 80023d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023dc:	4ba2      	ldr	r3, [pc, #648]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	4aa1      	ldr	r2, [pc, #644]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023e8:	e01c      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023ee:	3308      	adds	r3, #8
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f001 f89e 	bl	8003534 <RCCEx_PLL2_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80023fe:	e011      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002400:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002404:	3328      	adds	r3, #40	; 0x28
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f001 f945 	bl	8003698 <RCCEx_PLL3_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002414:	e006      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800241c:	e002      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800241e:	bf00      	nop
 8002420:	e000      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002424:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800242c:	4b8e      	ldr	r3, [pc, #568]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002434:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002438:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800243c:	4a8a      	ldr	r2, [pc, #552]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800243e:	430b      	orrs	r3, r1
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
 8002442:	e003      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002444:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002448:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800244c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002458:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002462:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002466:	460b      	mov	r3, r1
 8002468:	4313      	orrs	r3, r2
 800246a:	d03a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800246c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	2b30      	cmp	r3, #48	; 0x30
 8002474:	d01f      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002476:	2b30      	cmp	r3, #48	; 0x30
 8002478:	d819      	bhi.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800247a:	2b20      	cmp	r3, #32
 800247c:	d00c      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800247e:	2b20      	cmp	r3, #32
 8002480:	d815      	bhi.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d019      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002486:	2b10      	cmp	r3, #16
 8002488:	d111      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800248a:	4b77      	ldr	r3, [pc, #476]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	4a76      	ldr	r2, [pc, #472]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002496:	e011      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002498:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800249c:	3308      	adds	r3, #8
 800249e:	2102      	movs	r1, #2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 f847 	bl	8003534 <RCCEx_PLL2_Config>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80024ac:	e006      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80024b4:	e002      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80024ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024c4:	4b68      	ldr	r3, [pc, #416]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80024cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024d4:	430b      	orrs	r3, r1
 80024d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d8:	e003      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80024de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80024e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80024ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80024f8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80024fc:	460b      	mov	r3, r1
 80024fe:	4313      	orrs	r3, r2
 8002500:	d051      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002502:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800250c:	d035      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800250e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002512:	d82e      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002514:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002518:	d031      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800251a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800251e:	d828      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002524:	d01a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252a:	d822      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002534:	d007      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002536:	e01c      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800253e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002544:	e01c      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002546:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800254a:	3308      	adds	r3, #8
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fff0 	bl	8003534 <RCCEx_PLL2_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800255a:	e011      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800255c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002560:	3328      	adds	r3, #40	; 0x28
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f001 f897 	bl	8003698 <RCCEx_PLL3_Config>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002570:	e006      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002578:	e002      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800257e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002580:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002588:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800258a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002590:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002596:	4a34      	ldr	r2, [pc, #208]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002598:	430b      	orrs	r3, r1
 800259a:	6513      	str	r3, [r2, #80]	; 0x50
 800259c:	e003      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800259e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80025a2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80025a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80025b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80025bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4313      	orrs	r3, r2
 80025c4:	d056      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80025c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d0:	d033      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80025d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d6:	d82c      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025dc:	d02f      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80025de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025e2:	d826      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025e8:	d02b      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80025ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025ee:	d820      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025f4:	d012      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80025f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025fa:	d81a      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d022      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d115      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800260a:	3308      	adds	r3, #8
 800260c:	2101      	movs	r1, #1
 800260e:	4618      	mov	r0, r3
 8002610:	f000 ff90 	bl	8003534 <RCCEx_PLL2_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800261a:	e015      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800261c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002620:	3328      	adds	r3, #40	; 0x28
 8002622:	2101      	movs	r1, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f001 f837 	bl	8003698 <RCCEx_PLL3_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002630:	e00a      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002638:	e006      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800263a:	bf00      	nop
 800263c:	e004      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800263e:	bf00      	nop
 8002640:	e002      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002648:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002654:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002658:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800265c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800265e:	4a02      	ldr	r2, [pc, #8]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002660:	430b      	orrs	r3, r1
 8002662:	6513      	str	r3, [r2, #80]	; 0x50
 8002664:	e006      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002666:	bf00      	nop
 8002668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002670:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002674:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002680:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800268a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800268e:	460b      	mov	r3, r1
 8002690:	4313      	orrs	r3, r2
 8002692:	d055      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002694:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800269c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a0:	d033      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80026a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a6:	d82c      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d02f      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b2:	d826      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80026b8:	d02b      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80026ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80026be:	d820      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c4:	d012      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80026c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ca:	d81a      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d022      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80026d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026d4:	d115      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80026d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026da:	3308      	adds	r3, #8
 80026dc:	2101      	movs	r1, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 ff28 	bl	8003534 <RCCEx_PLL2_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80026ea:	e015      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80026ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026f0:	3328      	adds	r3, #40	; 0x28
 80026f2:	2101      	movs	r1, #1
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 ffcf 	bl	8003698 <RCCEx_PLL3_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002700:	e00a      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002708:	e006      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800270a:	bf00      	nop
 800270c:	e004      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800270e:	bf00      	nop
 8002710:	e002      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002718:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002720:	4bb6      	ldr	r3, [pc, #728]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002728:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800272c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002730:	4ab2      	ldr	r2, [pc, #712]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002732:	430b      	orrs	r3, r1
 8002734:	6593      	str	r3, [r2, #88]	; 0x58
 8002736:	e003      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002738:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800273c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002740:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800274c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002756:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800275a:	460b      	mov	r3, r1
 800275c:	4313      	orrs	r3, r2
 800275e:	d02a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002760:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002766:	2b00      	cmp	r3, #0
 8002768:	d011      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800276a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276e:	d10a      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002770:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002774:	3308      	adds	r3, #8
 8002776:	2101      	movs	r1, #1
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fedb 	bl	8003534 <RCCEx_PLL2_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002784:	e004      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800278c:	e000      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800278e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002790:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002798:	4b98      	ldr	r3, [pc, #608]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800279a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80027a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a6:	4a95      	ldr	r2, [pc, #596]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027a8:	430b      	orrs	r3, r1
 80027aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ac:	e003      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80027b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80027c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80027cc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027d0:	460b      	mov	r3, r1
 80027d2:	4313      	orrs	r3, r2
 80027d4:	d037      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80027d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e0:	d00e      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80027e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e6:	d816      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d018      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80027ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f0:	d111      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027f2:	4b82      	ldr	r3, [pc, #520]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	4a81      	ldr	r2, [pc, #516]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80027fe:	e00f      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002804:	3308      	adds	r3, #8
 8002806:	2101      	movs	r1, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fe93 	bl	8003534 <RCCEx_PLL2_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002814:	e004      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800281c:	e000      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800281e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002820:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002828:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800282a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002830:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002836:	4a71      	ldr	r2, [pc, #452]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002838:	430b      	orrs	r3, r1
 800283a:	6513      	str	r3, [r2, #80]	; 0x50
 800283c:	e003      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002842:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002846:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002852:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800285c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002860:	460b      	mov	r3, r1
 8002862:	4313      	orrs	r3, r2
 8002864:	d03a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002866:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800286a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286c:	2b03      	cmp	r3, #3
 800286e:	d81d      	bhi.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002870:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	080028b5 	.word	0x080028b5
 800287c:	08002889 	.word	0x08002889
 8002880:	08002897 	.word	0x08002897
 8002884:	080028b5 	.word	0x080028b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002888:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	4a5b      	ldr	r2, [pc, #364]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800288e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002894:	e00f      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002896:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800289a:	3308      	adds	r3, #8
 800289c:	2102      	movs	r1, #2
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fe48 	bl	8003534 <RCCEx_PLL2_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80028aa:	e004      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80028b2:	e000      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80028b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80028be:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	f023 0103 	bic.w	r1, r3, #3
 80028c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028cc:	4a4b      	ldr	r2, [pc, #300]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80028ce:	430b      	orrs	r3, r1
 80028d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d2:	e003      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028d8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80028e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80028f6:	460b      	mov	r3, r1
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f000 80a0 	beq.w	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028fe:	4b40      	ldr	r3, [pc, #256]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a3f      	ldr	r2, [pc, #252]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800290a:	f7fe f849 	bl	80009a0 <HAL_GetTick>
 800290e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002912:	e00b      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002914:	f7fe f844 	bl	80009a0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b64      	cmp	r3, #100	; 0x64
 8002922:	d903      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800292a:	e005      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800292c:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ed      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002938:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800293c:	2b00      	cmp	r3, #0
 800293e:	d17a      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002940:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002944:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002948:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800294c:	4053      	eors	r3, r2
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002956:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	4a25      	ldr	r2, [pc, #148]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800297a:	4a20      	ldr	r2, [pc, #128]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800297c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002982:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002986:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	d118      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe f806 	bl	80009a0 <HAL_GetTick>
 8002994:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002998:	e00d      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fe f801 	bl	80009a0 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029a4:	1ad2      	subs	r2, r2, r3
 80029a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d903      	bls.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 80029b4:	e005      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0eb      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80029c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d130      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80029d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029da:	d115      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80029e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80029ec:	091a      	lsrs	r2, r3, #4
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	4a02      	ldr	r2, [pc, #8]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6113      	str	r3, [r2, #16]
 80029f8:	e00c      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80029fa:	bf00      	nop
 80029fc:	58024400 	.word	0x58024400
 8002a00:	58024800 	.word	0x58024800
 8002a04:	00ffffcf 	.word	0x00ffffcf
 8002a08:	4bd4      	ldr	r3, [pc, #848]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	4ad3      	ldr	r2, [pc, #844]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a12:	6113      	str	r3, [r2, #16]
 8002a14:	4bd1      	ldr	r3, [pc, #836]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a16:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	4acd      	ldr	r2, [pc, #820]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a26:	430b      	orrs	r3, r1
 8002a28:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2a:	e008      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a30:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8002a34:	e003      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a36:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a3a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f002 0301 	and.w	r3, r2, #1
 8002a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f000 808b 	beq.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a68:	2b28      	cmp	r3, #40	; 0x28
 8002a6a:	d86b      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002b4d 	.word	0x08002b4d
 8002a78:	08002b45 	.word	0x08002b45
 8002a7c:	08002b45 	.word	0x08002b45
 8002a80:	08002b45 	.word	0x08002b45
 8002a84:	08002b45 	.word	0x08002b45
 8002a88:	08002b45 	.word	0x08002b45
 8002a8c:	08002b45 	.word	0x08002b45
 8002a90:	08002b45 	.word	0x08002b45
 8002a94:	08002b19 	.word	0x08002b19
 8002a98:	08002b45 	.word	0x08002b45
 8002a9c:	08002b45 	.word	0x08002b45
 8002aa0:	08002b45 	.word	0x08002b45
 8002aa4:	08002b45 	.word	0x08002b45
 8002aa8:	08002b45 	.word	0x08002b45
 8002aac:	08002b45 	.word	0x08002b45
 8002ab0:	08002b45 	.word	0x08002b45
 8002ab4:	08002b2f 	.word	0x08002b2f
 8002ab8:	08002b45 	.word	0x08002b45
 8002abc:	08002b45 	.word	0x08002b45
 8002ac0:	08002b45 	.word	0x08002b45
 8002ac4:	08002b45 	.word	0x08002b45
 8002ac8:	08002b45 	.word	0x08002b45
 8002acc:	08002b45 	.word	0x08002b45
 8002ad0:	08002b45 	.word	0x08002b45
 8002ad4:	08002b4d 	.word	0x08002b4d
 8002ad8:	08002b45 	.word	0x08002b45
 8002adc:	08002b45 	.word	0x08002b45
 8002ae0:	08002b45 	.word	0x08002b45
 8002ae4:	08002b45 	.word	0x08002b45
 8002ae8:	08002b45 	.word	0x08002b45
 8002aec:	08002b45 	.word	0x08002b45
 8002af0:	08002b45 	.word	0x08002b45
 8002af4:	08002b4d 	.word	0x08002b4d
 8002af8:	08002b45 	.word	0x08002b45
 8002afc:	08002b45 	.word	0x08002b45
 8002b00:	08002b45 	.word	0x08002b45
 8002b04:	08002b45 	.word	0x08002b45
 8002b08:	08002b45 	.word	0x08002b45
 8002b0c:	08002b45 	.word	0x08002b45
 8002b10:	08002b45 	.word	0x08002b45
 8002b14:	08002b4d 	.word	0x08002b4d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	2101      	movs	r1, #1
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fd07 	bl	8003534 <RCCEx_PLL2_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b2c:	e00f      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b32:	3328      	adds	r3, #40	; 0x28
 8002b34:	2101      	movs	r1, #1
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fdae 	bl	8003698 <RCCEx_PLL3_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b42:	e004      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b4a:	e000      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b4e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10b      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b56:	4b81      	ldr	r3, [pc, #516]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b66:	4a7d      	ldr	r2, [pc, #500]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6553      	str	r3, [r2, #84]	; 0x54
 8002b6c:	e003      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b72:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f002 0302 	and.w	r3, r2, #2
 8002b82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002b8c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002b90:	460b      	mov	r3, r1
 8002b92:	4313      	orrs	r3, r2
 8002b94:	d042      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d825      	bhi.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002ba0:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bf5 	.word	0x08002bf5
 8002bac:	08002bc1 	.word	0x08002bc1
 8002bb0:	08002bd7 	.word	0x08002bd7
 8002bb4:	08002bf5 	.word	0x08002bf5
 8002bb8:	08002bf5 	.word	0x08002bf5
 8002bbc:	08002bf5 	.word	0x08002bf5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fcb3 	bl	8003534 <RCCEx_PLL2_Config>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002bd4:	e00f      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bda:	3328      	adds	r3, #40	; 0x28
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fd5a 	bl	8003698 <RCCEx_PLL3_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002bea:	e004      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002bfe:	4b57      	ldr	r3, [pc, #348]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f023 0107 	bic.w	r1, r3, #7
 8002c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0c:	4a53      	ldr	r2, [pc, #332]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	6553      	str	r3, [r2, #84]	; 0x54
 8002c12:	e003      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c18:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f002 0304 	and.w	r3, r2, #4
 8002c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	d044      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d825      	bhi.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c9d 	.word	0x08002c9d
 8002c54:	08002c69 	.word	0x08002c69
 8002c58:	08002c7f 	.word	0x08002c7f
 8002c5c:	08002c9d 	.word	0x08002c9d
 8002c60:	08002c9d 	.word	0x08002c9d
 8002c64:	08002c9d 	.word	0x08002c9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fc5f 	bl	8003534 <RCCEx_PLL2_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c7c:	e00f      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c82:	3328      	adds	r3, #40	; 0x28
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fd06 	bl	8003698 <RCCEx_PLL3_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c92:	e004      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8002c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10b      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	f023 0107 	bic.w	r1, r3, #7
 8002cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cb6:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6593      	str	r3, [r2, #88]	; 0x58
 8002cbc:	e003      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002cc2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f002 0320 	and.w	r3, r2, #32
 8002cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	d057      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf2:	d035      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf8:	d82c      	bhi.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d031      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d826      	bhi.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d0a:	d02d      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8002d0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d10:	d820      	bhi.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d16:	d012      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8002d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d1c:	d81a      	bhi.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d024      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8002d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d26:	d115      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fbff 	bl	8003534 <RCCEx_PLL2_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d3c:	e017      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d42:	3328      	adds	r3, #40	; 0x28
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fca6 	bl	8003698 <RCCEx_PLL3_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d52:	e00c      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d5a:	e008      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8002d5c:	58024400 	.word	0x58024400
        break;
 8002d60:	bf00      	nop
 8002d62:	e004      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002d64:	bf00      	nop
 8002d66:	e002      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002d68:	bf00      	nop
 8002d6a:	e000      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d6e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10b      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d76:	4bc2      	ldr	r3, [pc, #776]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d86:	4abe      	ldr	r2, [pc, #760]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6553      	str	r3, [r2, #84]	; 0x54
 8002d8c:	e003      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d92:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002dac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4313      	orrs	r3, r2
 8002db4:	d055      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002dc2:	d033      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8002dc4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002dc8:	d82c      	bhi.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dce:	d02f      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd4:	d826      	bhi.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002dd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dda:	d02b      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8002ddc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002de0:	d820      	bhi.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de6:	d012      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8002de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dec:	d81a      	bhi.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d022      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df6:	d115      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fb97 	bl	8003534 <RCCEx_PLL2_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e0c:	e015      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e12:	3328      	adds	r3, #40	; 0x28
 8002e14:	2102      	movs	r1, #2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fc3e 	bl	8003698 <RCCEx_PLL3_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e22:	e00a      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002e2a:	e006      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e2c:	bf00      	nop
 8002e2e:	e004      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e30:	bf00      	nop
 8002e32:	e002      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e42:	4b8f      	ldr	r3, [pc, #572]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e52:	4a8b      	ldr	r2, [pc, #556]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6593      	str	r3, [r2, #88]	; 0x58
 8002e58:	e003      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e5e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002e6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e78:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	d055      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e8e:	d033      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8002e90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e94:	d82c      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9a:	d02f      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8002e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea0:	d826      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002ea2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ea6:	d02b      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8002ea8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002eac:	d820      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb2:	d012      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8002eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb8:	d81a      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d022      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8002ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec2:	d115      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ec4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ec8:	3308      	adds	r3, #8
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fb31 	bl	8003534 <RCCEx_PLL2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002ed8:	e015      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ede:	3328      	adds	r3, #40	; 0x28
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fbd8 	bl	8003698 <RCCEx_PLL3_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002eee:	e00a      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ef6:	e006      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002ef8:	bf00      	nop
 8002efa:	e004      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002efc:	bf00      	nop
 8002efe:	e002      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f00:	bf00      	nop
 8002f02:	e000      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f06:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f0e:	4b5c      	ldr	r3, [pc, #368]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f1e:	4a58      	ldr	r2, [pc, #352]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6593      	str	r3, [r2, #88]	; 0x58
 8002f24:	e003      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f26:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f2a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f002 0308 	and.w	r3, r2, #8
 8002f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f44:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	d01e      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f60:	3328      	adds	r3, #40	; 0x28
 8002f62:	2102      	movs	r1, #2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fb97 	bl	8003698 <RCCEx_PLL3_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f76:	4b42      	ldr	r3, [pc, #264]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	4a3e      	ldr	r2, [pc, #248]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f002 0310 	and.w	r3, r2, #16
 8002f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002fa2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	d01e      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fbe:	3328      	adds	r3, #40	; 0x28
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fb68 	bl	8003698 <RCCEx_PLL3_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003000:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003004:	460b      	mov	r3, r1
 8003006:	4313      	orrs	r3, r2
 8003008:	d040      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800300a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800300e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003016:	d022      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800301c:	d81b      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003026:	d00b      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003028:	e015      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800302a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800302e:	3308      	adds	r3, #8
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fa7e 	bl	8003534 <RCCEx_PLL2_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800303e:	e00f      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003040:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003044:	3328      	adds	r3, #40	; 0x28
 8003046:	2102      	movs	r1, #2
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fb25 	bl	8003698 <RCCEx_PLL3_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003054:	e004      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800305e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003060:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10d      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003070:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003074:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003078:	4a01      	ldr	r2, [pc, #4]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800307a:	430b      	orrs	r3, r1
 800307c:	6593      	str	r3, [r2, #88]	; 0x58
 800307e:	e005      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003088:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800308c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003098:	67bb      	str	r3, [r7, #120]	; 0x78
 800309a:	2300      	movs	r3, #0
 800309c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800309e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80030a2:	460b      	mov	r3, r1
 80030a4:	4313      	orrs	r3, r2
 80030a6:	d03b      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80030a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030b4:	d01f      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80030b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030ba:	d818      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80030bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c0:	d003      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80030c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030c6:	d007      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80030c8:	e011      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ca:	4b64      	ldr	r3, [pc, #400]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	4a63      	ldr	r2, [pc, #396]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80030d6:	e00f      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030dc:	3328      	adds	r3, #40	; 0x28
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fad9 	bl	8003698 <RCCEx_PLL3_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80030ec:	e004      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030f4:	e000      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80030f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10b      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003100:	4b56      	ldr	r3, [pc, #344]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003108:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800310c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003112:	430b      	orrs	r3, r1
 8003114:	6553      	str	r3, [r2, #84]	; 0x54
 8003116:	e003      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003118:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800311c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003120:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800312c:	673b      	str	r3, [r7, #112]	; 0x70
 800312e:	2300      	movs	r3, #0
 8003130:	677b      	str	r3, [r7, #116]	; 0x74
 8003132:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d031      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800313c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314a:	d007      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800314c:	e011      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800314e:	4b43      	ldr	r3, [pc, #268]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	4a42      	ldr	r2, [pc, #264]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800315a:	e00e      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800315c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003160:	3308      	adds	r3, #8
 8003162:	2102      	movs	r1, #2
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f9e5 	bl	8003534 <RCCEx_PLL2_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003170:	e003      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800317a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003182:	4b36      	ldr	r3, [pc, #216]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800318a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	4a32      	ldr	r2, [pc, #200]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003192:	430b      	orrs	r3, r1
 8003194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003196:	e003      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800319c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80031ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80031ae:	2300      	movs	r3, #0
 80031b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80031b6:	460b      	mov	r3, r1
 80031b8:	4313      	orrs	r3, r2
 80031ba:	d00c      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031c0:	3328      	adds	r3, #40	; 0x28
 80031c2:	2102      	movs	r1, #2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fa67 	bl	8003698 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80031d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80031e2:	663b      	str	r3, [r7, #96]	; 0x60
 80031e4:	2300      	movs	r3, #0
 80031e6:	667b      	str	r3, [r7, #100]	; 0x64
 80031e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80031ec:	460b      	mov	r3, r1
 80031ee:	4313      	orrs	r3, r2
 80031f0:	d03a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80031f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031fe:	d018      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003204:	d811      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320a:	d014      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800320c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003210:	d80b      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d011      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321a:	d106      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	4a0e      	ldr	r2, [pc, #56]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003228:	e008      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003230:	e004      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800323a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800324c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003254:	4a01      	ldr	r2, [pc, #4]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003256:	430b      	orrs	r3, r1
 8003258:	6553      	str	r3, [r2, #84]	; 0x54
 800325a:	e005      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800325c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003264:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003268:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003274:	65bb      	str	r3, [r7, #88]	; 0x58
 8003276:	2300      	movs	r3, #0
 8003278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800327a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800327e:	460b      	mov	r3, r1
 8003280:	4313      	orrs	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003284:	4baa      	ldr	r3, [pc, #680]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003288:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800328c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003292:	4aa7      	ldr	r2, [pc, #668]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003294:	430b      	orrs	r3, r1
 8003296:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003298:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80032a4:	653b      	str	r3, [r7, #80]	; 0x50
 80032a6:	2300      	movs	r3, #0
 80032a8:	657b      	str	r3, [r7, #84]	; 0x54
 80032aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80032ae:	460b      	mov	r3, r1
 80032b0:	4313      	orrs	r3, r2
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80032b4:	4b9e      	ldr	r3, [pc, #632]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80032bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80032c4:	4a9a      	ldr	r2, [pc, #616]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80032d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032d8:	2300      	movs	r3, #0
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80032e0:	460b      	mov	r3, r1
 80032e2:	4313      	orrs	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032e6:	4b92      	ldr	r3, [pc, #584]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80032ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a8e      	ldr	r2, [pc, #568]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032f6:	430b      	orrs	r3, r1
 80032f8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003306:	643b      	str	r3, [r7, #64]	; 0x40
 8003308:	2300      	movs	r3, #0
 800330a:	647b      	str	r3, [r7, #68]	; 0x44
 800330c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003310:	460b      	mov	r3, r1
 8003312:	4313      	orrs	r3, r2
 8003314:	d00e      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003316:	4b86      	ldr	r3, [pc, #536]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	4a85      	ldr	r2, [pc, #532]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800331c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003320:	6113      	str	r3, [r2, #16]
 8003322:	4b83      	ldr	r3, [pc, #524]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003324:	6919      	ldr	r1, [r3, #16]
 8003326:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800332a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800332e:	4a80      	ldr	r2, [pc, #512]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003330:	430b      	orrs	r3, r1
 8003332:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003334:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003340:	63bb      	str	r3, [r7, #56]	; 0x38
 8003342:	2300      	movs	r3, #0
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003346:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800334a:	460b      	mov	r3, r1
 800334c:	4313      	orrs	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003350:	4b77      	ldr	r3, [pc, #476]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003354:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003358:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	4a74      	ldr	r2, [pc, #464]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003360:	430b      	orrs	r3, r1
 8003362:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003364:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
 8003372:	2300      	movs	r3, #0
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
 8003376:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800337a:	460b      	mov	r3, r1
 800337c:	4313      	orrs	r3, r2
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003380:	4b6b      	ldr	r3, [pc, #428]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	4a67      	ldr	r2, [pc, #412]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003392:	430b      	orrs	r3, r1
 8003394:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003396:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	2100      	movs	r1, #0
 80033a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80033ac:	460b      	mov	r3, r1
 80033ae:	4313      	orrs	r3, r2
 80033b0:	d011      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033b6:	3308      	adds	r3, #8
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f8ba 	bl	8003534 <RCCEx_PLL2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80033c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80033d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	2100      	movs	r1, #0
 80033e0:	6239      	str	r1, [r7, #32]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033ec:	460b      	mov	r3, r1
 80033ee:	4313      	orrs	r3, r2
 80033f0:	d011      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033f6:	3308      	adds	r3, #8
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f89a 	bl	8003534 <RCCEx_PLL2_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003406:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003412:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003416:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	2100      	movs	r1, #0
 8003420:	61b9      	str	r1, [r7, #24]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800342c:	460b      	mov	r3, r1
 800342e:	4313      	orrs	r3, r2
 8003430:	d011      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003432:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003436:	3308      	adds	r3, #8
 8003438:	2102      	movs	r1, #2
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f87a 	bl	8003534 <RCCEx_PLL2_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003446:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003452:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003456:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	2100      	movs	r1, #0
 8003460:	6139      	str	r1, [r7, #16]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800346c:	460b      	mov	r3, r1
 800346e:	4313      	orrs	r3, r2
 8003470:	d011      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003472:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003476:	3328      	adds	r3, #40	; 0x28
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f90c 	bl	8003698 <RCCEx_PLL3_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8003486:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003492:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003496:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349e:	2100      	movs	r1, #0
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80034ac:	460b      	mov	r3, r1
 80034ae:	4313      	orrs	r3, r2
 80034b0:	d011      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034b6:	3328      	adds	r3, #40	; 0x28
 80034b8:	2101      	movs	r1, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f8ec 	bl	8003698 <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80034c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80034d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	2100      	movs	r1, #0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034ec:	460b      	mov	r3, r1
 80034ee:	4313      	orrs	r3, r2
 80034f0:	d011      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034f6:	3328      	adds	r3, #40	; 0x28
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f8cc 	bl	8003698 <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003506:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003512:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8003516:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
}
 8003524:	4618      	mov	r0, r3
 8003526:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800352a:	46bd      	mov	sp, r7
 800352c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003530:	58024400 	.word	0x58024400

08003534 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003542:	4b53      	ldr	r3, [pc, #332]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b03      	cmp	r3, #3
 800354c:	d101      	bne.n	8003552 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e099      	b.n	8003686 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003552:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a4e      	ldr	r2, [pc, #312]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003558:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800355c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355e:	f7fd fa1f 	bl	80009a0 <HAL_GetTick>
 8003562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003564:	e008      	b.n	8003578 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003566:	f7fd fa1b 	bl	80009a0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e086      	b.n	8003686 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003578:	4b45      	ldr	r3, [pc, #276]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f0      	bne.n	8003566 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003584:	4b42      	ldr	r3, [pc, #264]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	031b      	lsls	r3, r3, #12
 8003592:	493f      	ldr	r1, [pc, #252]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003594:	4313      	orrs	r3, r2
 8003596:	628b      	str	r3, [r1, #40]	; 0x28
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	3b01      	subs	r3, #1
 800359e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035c8:	4931      	ldr	r1, [pc, #196]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80035ce:	4b30      	ldr	r3, [pc, #192]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	492d      	ldr	r1, [pc, #180]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	f023 0220 	bic.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	4928      	ldr	r1, [pc, #160]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	4a26      	ldr	r2, [pc, #152]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 80035f8:	f023 0310 	bic.w	r3, r3, #16
 80035fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <RCCEx_PLL2_Config+0x160>)
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	69d2      	ldr	r2, [r2, #28]
 800360a:	00d2      	lsls	r2, r2, #3
 800360c:	4920      	ldr	r1, [pc, #128]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003618:	f043 0310 	orr.w	r3, r3, #16
 800361c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003624:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 800362a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800362e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003630:	e00f      	b.n	8003652 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d106      	bne.n	8003646 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003638:	4b15      	ldr	r3, [pc, #84]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	4a14      	ldr	r2, [pc, #80]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 800363e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003644:	e005      	b.n	8003652 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	4a11      	ldr	r2, [pc, #68]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 800364c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003650:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003652:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 8003658:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800365c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365e:	f7fd f99f 	bl	80009a0 <HAL_GetTick>
 8003662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003664:	e008      	b.n	8003678 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003666:	f7fd f99b 	bl	80009a0 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e006      	b.n	8003686 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <RCCEx_PLL2_Config+0x15c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	58024400 	.word	0x58024400
 8003694:	ffff0007 	.word	0xffff0007

08003698 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036a6:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d101      	bne.n	80036b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e099      	b.n	80037ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80036b6:	4b4f      	ldr	r3, [pc, #316]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4e      	ldr	r2, [pc, #312]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80036bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c2:	f7fd f96d 	bl	80009a0 <HAL_GetTick>
 80036c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036c8:	e008      	b.n	80036dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80036ca:	f7fd f969 	bl	80009a0 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e086      	b.n	80037ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036dc:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f0      	bne.n	80036ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	051b      	lsls	r3, r3, #20
 80036f6:	493f      	ldr	r1, [pc, #252]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	628b      	str	r3, [r1, #40]	; 0x28
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	3b01      	subs	r3, #1
 8003702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	3b01      	subs	r3, #1
 800370c:	025b      	lsls	r3, r3, #9
 800370e:	b29b      	uxth	r3, r3
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	3b01      	subs	r3, #1
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	3b01      	subs	r3, #1
 8003726:	061b      	lsls	r3, r3, #24
 8003728:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800372c:	4931      	ldr	r1, [pc, #196]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003732:	4b30      	ldr	r3, [pc, #192]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	492d      	ldr	r1, [pc, #180]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003744:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4928      	ldr	r1, [pc, #160]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003756:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 800375c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003760:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 8003764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003766:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <RCCEx_PLL3_Config+0x160>)
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	69d2      	ldr	r2, [r2, #28]
 800376e:	00d2      	lsls	r2, r2, #3
 8003770:	4920      	ldr	r1, [pc, #128]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 8003772:	4313      	orrs	r3, r2
 8003774:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003776:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003788:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 800378e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003792:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003794:	e00f      	b.n	80037b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80037a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037a8:	e005      	b.n	80037b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80037b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c2:	f7fd f8ed 	bl	80009a0 <HAL_GetTick>
 80037c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037c8:	e008      	b.n	80037dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80037ca:	f7fd f8e9 	bl	80009a0 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e006      	b.n	80037ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <RCCEx_PLL3_Config+0x15c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	58024400 	.word	0x58024400
 80037f8:	ffff0007 	.word	0xffff0007

080037fc <__libc_init_array>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4d0d      	ldr	r5, [pc, #52]	; (8003834 <__libc_init_array+0x38>)
 8003800:	4c0d      	ldr	r4, [pc, #52]	; (8003838 <__libc_init_array+0x3c>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	2600      	movs	r6, #0
 8003808:	42a6      	cmp	r6, r4
 800380a:	d109      	bne.n	8003820 <__libc_init_array+0x24>
 800380c:	4d0b      	ldr	r5, [pc, #44]	; (800383c <__libc_init_array+0x40>)
 800380e:	4c0c      	ldr	r4, [pc, #48]	; (8003840 <__libc_init_array+0x44>)
 8003810:	f000 f820 	bl	8003854 <_init>
 8003814:	1b64      	subs	r4, r4, r5
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	2600      	movs	r6, #0
 800381a:	42a6      	cmp	r6, r4
 800381c:	d105      	bne.n	800382a <__libc_init_array+0x2e>
 800381e:	bd70      	pop	{r4, r5, r6, pc}
 8003820:	f855 3b04 	ldr.w	r3, [r5], #4
 8003824:	4798      	blx	r3
 8003826:	3601      	adds	r6, #1
 8003828:	e7ee      	b.n	8003808 <__libc_init_array+0xc>
 800382a:	f855 3b04 	ldr.w	r3, [r5], #4
 800382e:	4798      	blx	r3
 8003830:	3601      	adds	r6, #1
 8003832:	e7f2      	b.n	800381a <__libc_init_array+0x1e>
 8003834:	0800387c 	.word	0x0800387c
 8003838:	0800387c 	.word	0x0800387c
 800383c:	0800387c 	.word	0x0800387c
 8003840:	08003880 	.word	0x08003880

08003844 <memset>:
 8003844:	4402      	add	r2, r0
 8003846:	4603      	mov	r3, r0
 8003848:	4293      	cmp	r3, r2
 800384a:	d100      	bne.n	800384e <memset+0xa>
 800384c:	4770      	bx	lr
 800384e:	f803 1b01 	strb.w	r1, [r3], #1
 8003852:	e7f9      	b.n	8003848 <memset+0x4>

08003854 <_init>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	bf00      	nop
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr

08003860 <_fini>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	bf00      	nop
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr
