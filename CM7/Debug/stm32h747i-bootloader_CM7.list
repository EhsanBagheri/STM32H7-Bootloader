
stm32h747i-bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbe4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800de84  0800de84  0001de84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e008  0800e008  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800e008  0800e008  0001e008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e010  0800e010  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e010  0800e010  0001e010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e014  0800e014  0001e014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800e018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  24000074  0800e08c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000268  0800e08c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fff1  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ac  00000000  00000000  00040093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00044340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  00045ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044323  00000000  00000000  00047098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b64  00000000  00000000  0008b3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a21d9  00000000  00000000  000adf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002500f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b8  00000000  00000000  00250148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800de6c 	.word	0x0800de6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800de6c 	.word	0x0800de6c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <erase_app_memory>:
#include "flash.h"

HAL_StatusTypeDef erase_app_memory(uint32_t bank, uint32_t sector, uint32_t NbSectors){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	
	HAL_StatusTypeDef ret;
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	
	HAL_FLASH_Unlock();
 80007bc:	f001 fffe 	bl	80027bc <HAL_FLASH_Unlock>
	
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Banks = bank;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Sector = sector;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbSectors = NbSectors;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80007d0:	2320      	movs	r3, #32
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80007d4:	f107 0214 	add.w	r2, r7, #20
 80007d8:	f107 0318 	add.w	r3, r7, #24
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 f8ec 	bl	80029bc <HAL_FLASHEx_Erase>
 80007e4:	4603      	mov	r3, r0
 80007e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	HAL_FLASH_Lock();
 80007ea:	f002 f821 	bl	8002830 <HAL_FLASH_Lock>
	return ret;
 80007ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <Flash_write32B>:


HAL_StatusTypeDef Flash_write32B(uint8_t const *src, uint32_t dst){
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b084      	sub	sp, #16
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	6039      	str	r1, [r7, #0]
    uint32_t FlashAddress = dst;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	60fb      	str	r3, [r7, #12]

    if (FlashAddress & (32-1)) {
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <Flash_write32B+0x1c>
        return HAL_ERROR; // bad alignment
 8000812:	2301      	movs	r3, #1
 8000814:	e00c      	b.n	8000830 <Flash_write32B+0x36>
    }
	
	HAL_StatusTypeDef ret;
	
	HAL_FLASH_Unlock();
 8000816:	f001 ffd1 	bl	80027bc <HAL_FLASH_Unlock>
	
	ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FlashAddress, (uint32_t)src);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	461a      	mov	r2, r3
 800081e:	68f9      	ldr	r1, [r7, #12]
 8000820:	2001      	movs	r0, #1
 8000822:	f001 ff39 	bl	8002698 <HAL_FLASH_Program>
 8000826:	4603      	mov	r3, r0
 8000828:	72fb      	strb	r3, [r7, #11]

	HAL_FLASH_Lock();
 800082a:	f002 f801 	bl	8002830 <HAL_FLASH_Lock>

	return ret;
 800082e:	7afb      	ldrb	r3, [r7, #11]
	
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	; 0x38
 800083c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	4b57      	ldr	r3, [pc, #348]	; (80009ac <MX_GPIO_Init+0x174>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a55      	ldr	r2, [pc, #340]	; (80009ac <MX_GPIO_Init+0x174>)
 8000856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b53      	ldr	r3, [pc, #332]	; (80009ac <MX_GPIO_Init+0x174>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000868:	623b      	str	r3, [r7, #32]
 800086a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086c:	4b4f      	ldr	r3, [pc, #316]	; (80009ac <MX_GPIO_Init+0x174>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a4e      	ldr	r2, [pc, #312]	; (80009ac <MX_GPIO_Init+0x174>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b4b      	ldr	r3, [pc, #300]	; (80009ac <MX_GPIO_Init+0x174>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	4b48      	ldr	r3, [pc, #288]	; (80009ac <MX_GPIO_Init+0x174>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a46      	ldr	r2, [pc, #280]	; (80009ac <MX_GPIO_Init+0x174>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b44      	ldr	r3, [pc, #272]	; (80009ac <MX_GPIO_Init+0x174>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_GPIO_Init+0x174>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a3f      	ldr	r2, [pc, #252]	; (80009ac <MX_GPIO_Init+0x174>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <MX_GPIO_Init+0x174>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008c6:	4b39      	ldr	r3, [pc, #228]	; (80009ac <MX_GPIO_Init+0x174>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a37      	ldr	r2, [pc, #220]	; (80009ac <MX_GPIO_Init+0x174>)
 80008ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <MX_GPIO_Init+0x174>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <MX_GPIO_Init+0x174>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a30      	ldr	r2, [pc, #192]	; (80009ac <MX_GPIO_Init+0x174>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <MX_GPIO_Init+0x174>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_GPIO_Init+0x174>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a28      	ldr	r2, [pc, #160]	; (80009ac <MX_GPIO_Init+0x174>)
 800090a:	f043 0320 	orr.w	r3, r3, #32
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <MX_GPIO_Init+0x174>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0320 	and.w	r3, r3, #32
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_GPIO_Init+0x174>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <MX_GPIO_Init+0x174>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_GPIO_Init+0x174>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <MX_GPIO_Init+0x178>)
 8000946:	f002 fc7d 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x178>)
 8000960:	f002 f99e 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000976:	2300      	movs	r3, #0
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_GPIO_Init+0x17c>)
 8000982:	f002 f98d 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000986:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_GPIO_Init+0x178>)
 80009a0:	f002 f97e 	bl	8002ca0 <HAL_GPIO_Init>

}
 80009a4:	bf00      	nop
 80009a6:	3738      	adds	r7, #56	; 0x38
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	58024400 	.word	0x58024400
 80009b0:	58022000 	.word	0x58022000
 80009b4:	58020000 	.word	0x58020000

080009b8 <gotoFirmware>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void gotoFirmware(uint32_t fwFlashStartAdd)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
//	app_reset_handler();

	pFunction appEntry;
	uint32_t appStack;

	appStack = (uint32_t) *((__IO uint32_t*)fwFlashStartAdd);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	617b      	str	r3, [r7, #20]
	appEntry = (pFunction) *(__IO uint32_t*) (fwFlashStartAdd + 4);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3304      	adds	r3, #4
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	613b      	str	r3, [r7, #16]
//	__DMB();
	SCB->VTOR = fwFlashStartAdd;
 80009ce:	4a07      	ldr	r2, [pc, #28]	; (80009ec <gotoFirmware+0x34>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6093      	str	r3, [r2, #8]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f383 8808 	msr	MSP, r3
}
 80009de:	bf00      	nop
//	__DSB();
//	SysTick->CTRL = 0x0;
//	HAL_DeInit();
	__set_MSP(appStack);
	appEntry();
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4798      	blx	r3
}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <updateFirmware>:


bool updateFirmware(const TCHAR* fwPath, uint32_t flashBank, uint32_t flashSector, uint32_t NbSectors, uint32_t fwFlashStartAdd)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	f507 6491 	add.w	r4, r7, #1160	; 0x488
 80009fc:	f2a4 447c 	subw	r4, r4, #1148	; 0x47c
 8000a00:	6020      	str	r0, [r4, #0]
 8000a02:	f507 6091 	add.w	r0, r7, #1160	; 0x488
 8000a06:	f5a0 6090 	sub.w	r0, r0, #1152	; 0x480
 8000a0a:	6001      	str	r1, [r0, #0]
 8000a0c:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8000a10:	f2a1 4184 	subw	r1, r1, #1156	; 0x484
 8000a14:	600a      	str	r2, [r1, #0]
 8000a16:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8000a1a:	f5a2 6291 	sub.w	r2, r2, #1160	; 0x488
 8000a1e:	6013      	str	r3, [r2, #0]
	UINT bytesRead;
	FSIZE_t file_size;
	FIL file;
	uint32_t flashAdd, addCNTR;

	if (f_open(&file, fwPath, FA_READ) == FR_OK) {
 8000a20:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a24:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000a28:	f107 0010 	add.w	r0, r7, #16
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6819      	ldr	r1, [r3, #0]
 8000a30:	f00c f97a 	bl	800cd28 <f_open>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d16f      	bne.n	8000b1a <updateFirmware+0x12a>

		file_size = f_size(&file);
 8000a3a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a3e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c

		sprintf(binFileRes, ".bin Size: %lu bytes \n\r", file_size);
 8000a48:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8000a4c:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8000a50:	4935      	ldr	r1, [pc, #212]	; (8000b28 <updateFirmware+0x138>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00c fd9c 	bl	800d590 <siprintf>
		HAL_UART_Transmit(&huart1, binFileRes, 20, 100);
 8000a58:	f207 4144 	addw	r1, r7, #1092	; 0x444
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	2214      	movs	r2, #20
 8000a60:	4832      	ldr	r0, [pc, #200]	; (8000b2c <updateFirmware+0x13c>)
 8000a62:	f008 fb59 	bl	8009118 <HAL_UART_Transmit>

		erase_app_memory(flashBank, flashSector, NbSectors);
 8000a66:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a6a:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 8000a6e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a72:	f2a3 4184 	subw	r1, r3, #1156	; 0x484
 8000a76:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000a7a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	6809      	ldr	r1, [r1, #0]
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	f7ff fe94 	bl	80007b0 <erase_app_memory>

		flashAdd = fwFlashStartAdd;
 8000a88:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8000a8c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		addCNTR  = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000a96:	e027      	b.n	8000ae8 <updateFirmware+0xf8>
			// Process the read data here
			for(uint32_t i=0; i<16; i++){
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000a9e:	e017      	b.n	8000ad0 <updateFirmware+0xe0>
				Flash_write32B(readBytes+(i*32), flashAdd+addCNTR);
 8000aa0:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000aa4:	015b      	lsls	r3, r3, #5
 8000aa6:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8000aaa:	18d0      	adds	r0, r2, r3
 8000aac:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8000ab0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f7ff fe9f 	bl	80007fa <Flash_write32B>
				addCNTR += 32;
 8000abc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000ac0:	3320      	adds	r3, #32
 8000ac2:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
			for(uint32_t i=0; i<16; i++){
 8000ac6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000aca:	3301      	adds	r3, #1
 8000acc:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000ad0:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d9e3      	bls.n	8000aa0 <updateFirmware+0xb0>
			}
			memset(readBytes, 0xFF, sizeof(readBytes));
 8000ad8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8000adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae0:	21ff      	movs	r1, #255	; 0xff
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f00c fd4c 	bl	800d580 <memset>
		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000ae8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000aec:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8000af0:	f107 0010 	add.w	r0, r7, #16
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	f00c fad4 	bl	800d0a4 <f_read>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d106      	bne.n	8000b10 <updateFirmware+0x120>
 8000b02:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000b06:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1c3      	bne.n	8000a98 <updateFirmware+0xa8>
		}
		f_close(&file);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00c fc82 	bl	800d41e <f_close>
	}

	return true;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f207 478c 	addw	r7, r7, #1164	; 0x48c
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	bf00      	nop
 8000b28:	0800de84 	.word	0x0800de84
 8000b2c:	24000168 	.word	0x24000168

08000b30 <updateExternalFlash>:


bool updateExternalFlash(const TCHAR* fwPath)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000b3c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000b40:	6018      	str	r0, [r3, #0]
	UINT bytesRead;
	FSIZE_t file_size;
	FIL file;
	uint32_t addCNTR;

	if (f_open(&file, fwPath, FA_READ) == FR_OK) {
 8000b42:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000b46:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000b4a:	f107 0008 	add.w	r0, r7, #8
 8000b4e:	2201      	movs	r2, #1
 8000b50:	6819      	ldr	r1, [r3, #0]
 8000b52:	f00c f8e9 	bl	800cd28 <f_open>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d155      	bne.n	8000c08 <updateExternalFlash+0xd8>

		file_size = f_size(&file);
 8000b5c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000b60:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470

		sprintf(binFileRes, ".bin Size: %lu bytes \n\r", file_size);
 8000b6a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8000b6e:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8000b72:	4928      	ldr	r1, [pc, #160]	; (8000c14 <updateExternalFlash+0xe4>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00c fd0b 	bl	800d590 <siprintf>
		HAL_UART_Transmit(&huart1, binFileRes, 20, 100);
 8000b7a:	f207 413c 	addw	r1, r7, #1084	; 0x43c
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	2214      	movs	r2, #20
 8000b82:	4825      	ldr	r0, [pc, #148]	; (8000c18 <updateExternalFlash+0xe8>)
 8000b84:	f008 fac8 	bl	8009118 <HAL_UART_Transmit>

		if (CSP_QSPI_Erase_Chip() != HAL_OK)
 8000b88:	f001 f9be 	bl	8001f08 <CSP_QSPI_Erase_Chip>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <updateExternalFlash+0x66>
		{
			Error_Handler();
 8000b92:	f000 f9d1 	bl	8000f38 <Error_Handler>
		}

		addCNTR  = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000b9c:	e01b      	b.n	8000bd6 <updateExternalFlash+0xa6>
			// Process the read data here

			if (CSP_QSPI_WriteMemory(readBytes, addCNTR, sizeof(readBytes)) != HAL_OK)
 8000b9e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba6:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 f9b5 	bl	8001f1a <CSP_QSPI_WriteMemory>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <updateExternalFlash+0x8a>
			{
				Error_Handler();
 8000bb6:	f000 f9bf 	bl	8000f38 <Error_Handler>
			}

			addCNTR += BUFFER_SIZE;
 8000bba:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8000bbe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc2:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
			memset(readBytes, 0xFF, sizeof(readBytes));
 8000bc6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bce:	21ff      	movs	r1, #255	; 0xff
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00c fcd5 	bl	800d580 <memset>
		while (f_read(&file, readBytes, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000bd6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000bda:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8000bde:	f107 0008 	add.w	r0, r7, #8
 8000be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be6:	f00c fa5d 	bl	800d0a4 <f_read>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d106      	bne.n	8000bfe <updateExternalFlash+0xce>
 8000bf0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000bf4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1cf      	bne.n	8000b9e <updateExternalFlash+0x6e>
		}
		f_close(&file);
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00c fc0b 	bl	800d41e <f_close>
	}

	return true;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f507 678f 	add.w	r7, r7, #1144	; 0x478
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	0800de84 	.word	0x0800de84
 8000c18:	24000168 	.word	0x24000168

08000c1c <boot_main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int boot_main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8000c22:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c24:	4b7a      	ldr	r3, [pc, #488]	; (8000e10 <boot_main+0x1f4>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d11b      	bne.n	8000c68 <boot_main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c30:	f3bf 8f4f 	dsb	sy
}
 8000c34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c36:	f3bf 8f6f 	isb	sy
}
 8000c3a:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c3c:	4b74      	ldr	r3, [pc, #464]	; (8000e10 <boot_main+0x1f4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c44:	f3bf 8f4f 	dsb	sy
}
 8000c48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c4a:	f3bf 8f6f 	isb	sy
}
 8000c4e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c50:	4b6f      	ldr	r3, [pc, #444]	; (8000e10 <boot_main+0x1f4>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	4a6e      	ldr	r2, [pc, #440]	; (8000e10 <boot_main+0x1f4>)
 8000c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5c:	f3bf 8f4f 	dsb	sy
}
 8000c60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c62:	f3bf 8f6f 	isb	sy
}
 8000c66:	e000      	b.n	8000c6a <boot_main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c68:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c6a:	4b69      	ldr	r3, [pc, #420]	; (8000e10 <boot_main+0x1f4>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d143      	bne.n	8000cfe <boot_main+0xe2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c76:	4b66      	ldr	r3, [pc, #408]	; (8000e10 <boot_main+0x1f4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c7e:	f3bf 8f4f 	dsb	sy
}
 8000c82:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c84:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <boot_main+0x1f4>)
 8000c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c8a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000c92:	0b5b      	lsrs	r3, r3, #13
 8000c94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c98:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c9c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ca6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000caa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000cae:	015a      	lsls	r2, r3, #5
 8000cb0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000cb4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cb6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8000cba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cbc:	4954      	ldr	r1, [pc, #336]	; (8000e10 <boot_main+0x1f4>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cc4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1eb      	bne.n	8000caa <boot_main+0x8e>
    } while(sets-- != 0U);
 8000cd2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1dd      	bne.n	8000c9c <boot_main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce0:	f3bf 8f4f 	dsb	sy
}
 8000ce4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ce6:	4b4a      	ldr	r3, [pc, #296]	; (8000e10 <boot_main+0x1f4>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a49      	ldr	r2, [pc, #292]	; (8000e10 <boot_main+0x1f4>)
 8000cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf2:	f3bf 8f4f 	dsb	sy
}
 8000cf6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cf8:	f3bf 8f6f 	isb	sy
}
 8000cfc:	e000      	b.n	8000d00 <boot_main+0xe4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000cfe:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d04:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d08:	bf00      	nop
 8000d0a:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <boot_main+0x1f8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <boot_main+0x108>
 8000d16:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d1a:	1e5a      	subs	r2, r3, #1
 8000d1c:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	dcf2      	bgt.n	8000d0a <boot_main+0xee>
  if ( timeout < 0 )
 8000d24:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da01      	bge.n	8000d30 <boot_main+0x114>
  {
  	Error_Handler();
 8000d2c:	f000 f904 	bl	8000f38 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d30:	f001 fb0c 	bl	800234c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d34:	f000 f87a 	bl	8000e2c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <boot_main+0x1f8>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a35      	ldr	r2, [pc, #212]	; (8000e14 <boot_main+0x1f8>)
 8000d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <boot_main+0x1f8>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000d52:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000d56:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000d60:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000d64:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f002 fa86 	bl	8003278 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f002 fa9c 	bl	80032ac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d78:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d7c:	bf00      	nop
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <boot_main+0x1f8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d106      	bne.n	8000d98 <boot_main+0x17c>
 8000d8a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d8e:	1e5a      	subs	r2, r3, #1
 8000d90:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	dcf2      	bgt.n	8000d7e <boot_main+0x162>
if ( timeout < 0 )
 8000d98:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da01      	bge.n	8000da4 <boot_main+0x188>
{
	Error_Handler();
 8000da0:	f000 f8ca 	bl	8000f38 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da4:	f7ff fd48 	bl	8000838 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000da8:	f001 f9f0 	bl	800218c <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8000dac:	f000 fb7e 	bl	80014ac <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 8000db0:	f001 f8c6 	bl	8001f40 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000db4:	f00a f88e 	bl	800aed4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

//	HAL_Delay(3000);

	if (CSP_QUADSPI_Init() != HAL_OK)
 8000db8:	f001 f87e 	bl	8001eb8 <CSP_QUADSPI_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <boot_main+0x1aa>
	{
		Error_Handler();
 8000dc2:	f000 f8b9 	bl	8000f38 <Error_Handler>

  // Mount the SD card
  FATFS fs;
  uint8_t mountRes;

  mountRes = f_mount(&fs, SD_CARD_PATH, 1);
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4913      	ldr	r1, [pc, #76]	; (8000e18 <boot_main+0x1fc>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00b ff65 	bl	800cc9c <f_mount>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
  if (mountRes == FR_OK) {
 8000dd8:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d113      	bne.n	8000e08 <boot_main+0x1ec>

	  updateFirmware(FILE_NAME_2, FLASH_BANK_1, FLASH_SECTOR_1, 7, FW_CM7_START_ADD);
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <boot_main+0x200>)
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2307      	movs	r3, #7
 8000de6:	2201      	movs	r2, #1
 8000de8:	2101      	movs	r1, #1
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <boot_main+0x204>)
 8000dec:	f7ff fe00 	bl	80009f0 <updateFirmware>

	  updateFirmware(FILE_NAME_3, FLASH_BANK_2, FLASH_SECTOR_0, 8, FW_CM4_START_ADD);
 8000df0:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2308      	movs	r3, #8
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <boot_main+0x208>)
 8000dfe:	f7ff fdf7 	bl	80009f0 <updateFirmware>

	  updateExternalFlash(FILE_NAME_4);
 8000e02:	4809      	ldr	r0, [pc, #36]	; (8000e28 <boot_main+0x20c>)
 8000e04:	f7ff fe94 	bl	8000b30 <updateExternalFlash>
  }
  gotoFirmware(FW_CM7_START_ADD);
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <boot_main+0x200>)
 8000e0a:	f7ff fdd5 	bl	80009b8 <gotoFirmware>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <boot_main+0x1f2>
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	58024400 	.word	0x58024400
 8000e18:	0800de9c 	.word	0x0800de9c
 8000e1c:	08020000 	.word	0x08020000
 8000e20:	0800dea0 	.word	0x0800dea0
 8000e24:	0800deac 	.word	0x0800deac
 8000e28:	0800deb8 	.word	0x0800deb8

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b09c      	sub	sp, #112	; 0x70
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	224c      	movs	r2, #76	; 0x4c
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f00c fba0 	bl	800d580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2220      	movs	r2, #32
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f00c fb9a 	bl	800d580 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e4c:	2004      	movs	r0, #4
 8000e4e:	f002 fa9d 	bl	800338c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <SystemClock_Config+0x104>)
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5a:	4a35      	ldr	r2, [pc, #212]	; (8000f30 <SystemClock_Config+0x104>)
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e62:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <SystemClock_Config+0x104>)
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <SystemClock_Config+0x108>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a30      	ldr	r2, [pc, #192]	; (8000f34 <SystemClock_Config+0x108>)
 8000e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <SystemClock_Config+0x108>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e84:	bf00      	nop
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <SystemClock_Config+0x108>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e92:	d1f8      	bne.n	8000e86 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e94:	230b      	movs	r3, #11
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea2:	2340      	movs	r3, #64	; 0x40
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 ff8e 	bl	8003df8 <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ee2:	f000 f829 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	233f      	movs	r3, #63	; 0x3f
 8000ee8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2303      	movs	r3, #3
 8000eec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 fbce 	bl	80046ac <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f16:	f000 f80f 	bl	8000f38 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000f1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2000      	movs	r0, #0
 8000f22:	f003 fd79 	bl	8004a18 <HAL_RCC_MCOConfig>
}
 8000f26:	bf00      	nop
 8000f28:	3770      	adds	r7, #112	; 0x70
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	58000400 	.word	0x58000400
 8000f34:	58024800 	.word	0x58024800

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>

08000f42 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b090      	sub	sp, #64	; 0x40
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d102      	bne.n	8000f5a <MT25TL01G_Enter4BytesAddressMode+0x18>
 8000f54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f58:	e001      	b.n	8000f5e <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8000f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8000f60:	23b7      	movs	r3, #183	; 0xb7
 8000f62:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f860 	bl	800104a <MT25TL01G_WriteEnable>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000f90:	f06f 0301 	mvn.w	r3, #1
 8000f94:	e019      	b.n	8000fca <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f002 fae1 	bl	8003568 <HAL_QSPI_Command>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000fac:	f06f 0301 	mvn.w	r3, #1
 8000fb0:	e00b      	b.n	8000fca <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f80b 	bl	8000fd2 <MT25TL01G_AutoPollingMemReady>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000fc2:	f06f 0301 	mvn.w	r3, #1
 8000fc6:	e000      	b.n	8000fca <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3740      	adds	r7, #64	; 0x40
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b096      	sub	sp, #88	; 0x58
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000ff0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ffe:	2300      	movs	r3, #0
 8001000:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001002:	2300      	movs	r3, #0
 8001004:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800100e:	2310      	movs	r3, #16
 8001010:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001016:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8001018:	f240 1301 	movw	r3, #257	; 0x101
 800101c:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001022:	f107 0208 	add.w	r2, r7, #8
 8001026:	f107 0120 	add.w	r1, r7, #32
 800102a:	f241 3388 	movw	r3, #5000	; 0x1388
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f002 fc27 	bl	8003882 <HAL_QSPI_AutoPolling>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800103a:	f06f 0304 	mvn.w	r3, #4
 800103e:	e000      	b.n	8001042 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8001040:	2300      	movs	r3, #0

}
 8001042:	4618      	mov	r0, r3
 8001044:	3758      	adds	r7, #88	; 0x58
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b096      	sub	sp, #88	; 0x58
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	2b03      	cmp	r3, #3
 800105a:	d102      	bne.n	8001062 <MT25TL01G_WriteEnable+0x18>
 800105c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001060:	e001      	b.n	8001066 <MT25TL01G_WriteEnable+0x1c>
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8001068:	2306      	movs	r3, #6
 800106a:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8001074:	2300      	movs	r3, #0
 8001076:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001080:	2300      	movs	r3, #0
 8001082:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001084:	2300      	movs	r3, #0
 8001086:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f002 fa68 	bl	8003568 <HAL_QSPI_Command>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800109e:	f06f 0301 	mvn.w	r3, #1
 80010a2:	e029      	b.n	80010f8 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80010a4:	f240 2302 	movw	r3, #514	; 0x202
 80010a8:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80010aa:	f240 2302 	movw	r3, #514	; 0x202
 80010ae:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80010b8:	2310      	movs	r3, #16
 80010ba:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80010bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c0:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80010c2:	2305      	movs	r3, #5
 80010c4:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d102      	bne.n	80010d2 <MT25TL01G_WriteEnable+0x88>
 80010cc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80010d0:	e001      	b.n	80010d6 <MT25TL01G_WriteEnable+0x8c>
 80010d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	f107 0120 	add.w	r1, r7, #32
 80010e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f002 fbcc 	bl	8003882 <HAL_QSPI_AutoPolling>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 80010f0:	f06f 0304 	mvn.w	r3, #4
 80010f4:	e000      	b.n	80010f8 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3758      	adds	r7, #88	; 0x58
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <MT25TL01G_PageProgram>:
  * @param  Size Size of data to write. Range 1 ~ 256
  * @retval QSPI memory status
  */

int32_t MT25TL01G_PageProgram(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b092      	sub	sp, #72	; 0x48
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	460b      	mov	r3, r1
 800110e:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d83a      	bhi.n	800118c <MT25TL01G_PageProgram+0x8c>
 8001116:	a201      	add	r2, pc, #4	; (adr r2, 800111c <MT25TL01G_PageProgram+0x1c>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001145 	.word	0x08001145
 8001124:	0800115d 	.word	0x0800115d
 8001128:	08001175 	.word	0x08001175
  {

  case MT25TL01G_SPI_MODE :                   /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800112c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_PAGE_PROG_CMD;
 8001132:	2302      	movs	r3, #2
 8001134:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8001136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_1_LINE;
 800113c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8001142:	e023      	b.n	800118c <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_2IO_MODE :               /*  1-2-2 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_EXT_DUAL_IN_FAST_PROG_CMD;
 800114a:	23d2      	movs	r3, #210	; 0xd2
 800114c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_2_LINES;
 800114e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8001154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800115a:	e017      	b.n	800118c <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_4IO_MODE :               /* 1-4-4 program commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_EXT_QUAD_IN_FAST_PROG_CMD;
 8001162:	2338      	movs	r3, #56	; 0x38
 8001164:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8001166:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 800116c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8001172:	e00b      	b.n	800118c <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_QPI_MODE :                   /* 4-4-4 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001174:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25TL01G_QUAD_IN_FAST_PROG_4_BYTE_ADDR_CMD;
 800117a:	2334      	movs	r3, #52	; 0x34
 800117c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 800117e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8001184:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001188:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800118a:	bf00      	nop

  }

  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800118c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001190:	61fb      	str	r3, [r7, #28]
  s_command.Address           = WriteAddr;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	617b      	str	r3, [r7, #20]
  s_command.NbData            = Size;
 8001196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80011a6:	2300      	movs	r3, #0
 80011a8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80011aa:	2300      	movs	r3, #0
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b6:	4619      	mov	r1, r3
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f002 f9d5 	bl	8003568 <HAL_QSPI_Command>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <MT25TL01G_PageProgram+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 80011c4:	f06f 0301 	mvn.w	r3, #1
 80011c8:	e00c      	b.n	80011e4 <MT25TL01G_PageProgram+0xe4>
  }
  if (HAL_QSPI_Transmit(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f002 fa27 	bl	8003624 <HAL_QSPI_Transmit>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <MT25TL01G_PageProgram+0xe2>
  {
    return MT25TL01G_ERROR_TRANSMIT;
 80011dc:	f06f 0302 	mvn.w	r3, #2
 80011e0:	e000      	b.n	80011e4 <MT25TL01G_PageProgram+0xe4>
  }
  return MT25TL01G_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3748      	adds	r7, #72	; 0x48
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <MT25TL01G_ReadSTR>:
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ReadSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b092      	sub	sp, #72	; 0x48
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	460b      	mov	r3, r1
 80011fa:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 80011fc:	7afb      	ldrb	r3, [r7, #11]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d83a      	bhi.n	8001278 <MT25TL01G_ReadSTR+0x8c>
 8001202:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <MT25TL01G_ReadSTR+0x1c>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001219 	.word	0x08001219
 800120c:	08001231 	.word	0x08001231
 8001210:	08001249 	.word	0x08001249
 8001214:	08001261 	.word	0x08001261
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800121e:	230c      	movs	r3, #12
 8001220:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800122c:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800122e:	e023      	b.n	8001278 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8001236:	23bc      	movs	r3, #188	; 0xbc
 8001238:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800123a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8001240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001244:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001246:	e017      	b.n	8001278 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800124e:	23ec      	movs	r3, #236	; 0xec
 8001250:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001252:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001258:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800125c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800125e:	e00b      	b.n	8001278 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001260:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8001266:	23eb      	movs	r3, #235	; 0xeb
 8001268:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800126a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001270:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001274:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001276:	bf00      	nop
  }
  /* Initialize the read command */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8001278:	2308      	movs	r3, #8
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800127c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001280:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001286:	2300      	movs	r3, #0
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.NbData            = Size;
 800128a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001292:	2300      	movs	r3, #0
 8001294:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001296:	2300      	movs	r3, #0
 8001298:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	4619      	mov	r1, r3
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f002 f95f 	bl	8003568 <HAL_QSPI_Command>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <MT25TL01G_ReadSTR+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 80012b0:	f06f 0301 	mvn.w	r3, #1
 80012b4:	e00c      	b.n	80012d0 <MT25TL01G_ReadSTR+0xe4>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f002 fa43 	bl	8003748 <HAL_QSPI_Receive>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <MT25TL01G_ReadSTR+0xe2>
  {
    return MT25TL01G_ERROR_RECEIVE;
 80012c8:	f06f 0303 	mvn.w	r3, #3
 80012cc:	e000      	b.n	80012d0 <MT25TL01G_ReadSTR+0xe4>
  }


  return MT25TL01G_OK;
 80012ce:	2300      	movs	r3, #0

}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3748      	adds	r7, #72	; 0x48
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <MT25TL01G_ChipErase>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ChipErase(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b090      	sub	sp, #64	; 0x40
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d102      	bne.n	80012f0 <MT25TL01G_ChipErase+0x18>
 80012ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ee:	e001      	b.n	80012f4 <MT25TL01G_ChipErase+0x1c>
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_DIE_ERASE_CMD;
 80012f6:	23c7      	movs	r3, #199	; 0xc7
 80012f8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800130e:	2300      	movs	r3, #0
 8001310:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001312:	2300      	movs	r3, #0
 8001314:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	f241 3288 	movw	r2, #5000	; 0x1388
 800131e:	4619      	mov	r1, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f002 f921 	bl	8003568 <HAL_QSPI_Command>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <MT25TL01G_ChipErase+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800132c:	f06f 0301 	mvn.w	r3, #1
 8001330:	e000      	b.n	8001334 <MT25TL01G_ChipErase+0x5c>
  }

  return MT25TL01G_OK;
 8001332:	2300      	movs	r3, #0

}
 8001334:	4618      	mov	r0, r3
 8001336:	3740      	adds	r7, #64	; 0x40
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b090      	sub	sp, #64	; 0x40
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001348:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800134a:	2335      	movs	r3, #53	; 0x35
 800134c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001362:	2300      	movs	r3, #0
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001366:	2300      	movs	r3, #0
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f002 f8f7 	bl	8003568 <HAL_QSPI_Command>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001380:	f06f 0301 	mvn.w	r3, #1
 8001384:	e000      	b.n	8001388 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3740      	adds	r7, #64	; 0x40
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	; 0x40
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800139e:	23f5      	movs	r3, #245	; 0xf5
 80013a0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f002 f8cd 	bl	8003568 <HAL_QSPI_Command>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80013d4:	f06f 0301 	mvn.w	r3, #1
 80013d8:	e000      	b.n	80013dc <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3740      	adds	r7, #64	; 0x40
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b090      	sub	sp, #64	; 0x40
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d102      	bne.n	80013fc <MT25TL01G_ResetEnable+0x18>
 80013f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fa:	e001      	b.n	8001400 <MT25TL01G_ResetEnable+0x1c>
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8001402:	2366      	movs	r3, #102	; 0x66
 8001404:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800141e:	2300      	movs	r3, #0
 8001420:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	f241 3288 	movw	r2, #5000	; 0x1388
 800142a:	4619      	mov	r1, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f002 f89b 	bl	8003568 <HAL_QSPI_Command>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001438:	f06f 0301 	mvn.w	r3, #1
 800143c:	e000      	b.n	8001440 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3740      	adds	r7, #64	; 0x40
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b090      	sub	sp, #64	; 0x40
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d102      	bne.n	8001460 <MT25TL01G_ResetMemory+0x18>
 800145a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800145e:	e001      	b.n	8001464 <MT25TL01G_ResetMemory+0x1c>
 8001460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001464:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8001466:	2399      	movs	r3, #153	; 0x99
 8001468:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800147e:	2300      	movs	r3, #0
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001482:	2300      	movs	r3, #0
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4619      	mov	r1, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f002 f869 	bl	8003568 <HAL_QSPI_Command>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800149c:	f06f 0301 	mvn.w	r3, #1
 80014a0:	e000      	b.n	80014a4 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3740      	adds	r7, #64	; 0x40
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_QUADSPI_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_QUADSPI_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_QUADSPI_Init+0x4c>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_QUADSPI_Init+0x4c>)
 80014be:	2204      	movs	r2, #4
 80014c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MX_QUADSPI_Init+0x4c>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_QUADSPI_Init+0x4c>)
 80014ca:	2219      	movs	r2, #25
 80014cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_QUADSPI_Init+0x4c>)
 80014d0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80014d4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_QUADSPI_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_QUADSPI_Init+0x4c>)
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_QUADSPI_Init+0x4c>)
 80014e4:	f001 ffac 	bl	8003440 <HAL_QSPI_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 80014ee:	f7ff fd23 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	24000090 	.word	0x24000090
 80014fc:	52005000 	.word	0x52005000

08001500 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b0c0      	sub	sp, #256	; 0x100
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	22c8      	movs	r2, #200	; 0xc8
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00c f82d 	bl	800d580 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a85      	ldr	r2, [pc, #532]	; (8001740 <HAL_QSPI_MspInit+0x240>)
 800152c:	4293      	cmp	r3, r2
 800152e:	f040 8102 	bne.w	8001736 <HAL_QSPI_MspInit+0x236>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800153e:	2300      	movs	r3, #0
 8001540:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	4618      	mov	r0, r3
 8001548:	f003 fca6 	bl	8004e98 <HAL_RCCEx_PeriphCLKConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001552:	f7ff fcf1 	bl	8000f38 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001556:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 8001558:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800155c:	4a79      	ldr	r2, [pc, #484]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001562:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001566:	4b77      	ldr	r3, [pc, #476]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 8001568:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800156c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001574:	4b73      	ldr	r3, [pc, #460]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	4a72      	ldr	r2, [pc, #456]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 800157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001584:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001592:	4b6c      	ldr	r3, [pc, #432]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4a6a      	ldr	r2, [pc, #424]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 800159a:	f043 0320 	orr.w	r3, r3, #32
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0320 	and.w	r3, r3, #32
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b0:	4b64      	ldr	r3, [pc, #400]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	4a63      	ldr	r2, [pc, #396]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c0:	4b60      	ldr	r3, [pc, #384]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015de:	4b59      	ldr	r3, [pc, #356]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ec:	4b55      	ldr	r3, [pc, #340]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	4a54      	ldr	r2, [pc, #336]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fc:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_QSPI_MspInit+0x244>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 800160a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800160e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001624:	2309      	movs	r3, #9
 8001626:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800162e:	4619      	mov	r1, r3
 8001630:	4845      	ldr	r0, [pc, #276]	; (8001748 <HAL_QSPI_MspInit+0x248>)
 8001632:	f001 fb35 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001636:	2340      	movs	r3, #64	; 0x40
 8001638:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800164e:	230a      	movs	r3, #10
 8001650:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001658:	4619      	mov	r1, r3
 800165a:	483b      	ldr	r0, [pc, #236]	; (8001748 <HAL_QSPI_MspInit+0x248>)
 800165c:	f001 fb20 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8001660:	23c0      	movs	r3, #192	; 0xc0
 8001662:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001678:	2309      	movs	r3, #9
 800167a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800167e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001682:	4619      	mov	r1, r3
 8001684:	4831      	ldr	r0, [pc, #196]	; (800174c <HAL_QSPI_MspInit+0x24c>)
 8001686:	f001 fb0b 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 800168a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800168e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016a4:	230a      	movs	r3, #10
 80016a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016ae:	4619      	mov	r1, r3
 80016b0:	4826      	ldr	r0, [pc, #152]	; (800174c <HAL_QSPI_MspInit+0x24c>)
 80016b2:	f001 faf5 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 80016b6:	230c      	movs	r3, #12
 80016b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ce:	2309      	movs	r3, #9
 80016d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016d8:	4619      	mov	r1, r3
 80016da:	481d      	ldr	r0, [pc, #116]	; (8001750 <HAL_QSPI_MspInit+0x250>)
 80016dc:	f001 fae0 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80016e0:	2304      	movs	r3, #4
 80016e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016f8:	2309      	movs	r3, #9
 80016fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001702:	4619      	mov	r1, r3
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <HAL_QSPI_MspInit+0x254>)
 8001706:	f001 facb 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 800170a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800170e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001724:	2309      	movs	r3, #9
 8001726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800172e:	4619      	mov	r1, r3
 8001730:	4809      	ldr	r0, [pc, #36]	; (8001758 <HAL_QSPI_MspInit+0x258>)
 8001732:	f001 fab5 	bl	8002ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001736:	bf00      	nop
 8001738:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	52005000 	.word	0x52005000
 8001744:	58024400 	.word	0x58024400
 8001748:	58021800 	.word	0x58021800
 800174c:	58021400 	.word	0x58021400
 8001750:	58021c00 	.word	0x58021c00
 8001754:	58020400 	.word	0x58020400
 8001758:	58020c00 	.word	0x58020c00

0800175c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <HAL_QSPI_MspDeInit+0x58>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d11e      	bne.n	80017ac <HAL_QSPI_MspDeInit+0x50>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_QSPI_MspDeInit+0x5c>)
 8001770:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001774:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_QSPI_MspDeInit+0x5c>)
 8001776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800177a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin|QSPI_BK1_NCS_Pin);
 800177e:	f244 2140 	movw	r1, #16960	; 0x4240
 8001782:	480e      	ldr	r0, [pc, #56]	; (80017bc <HAL_QSPI_MspDeInit+0x60>)
 8001784:	f001 fc3c 	bl	8003000 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO1_Pin);
 8001788:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <HAL_QSPI_MspDeInit+0x64>)
 800178e:	f001 fc37 	bl	8003000 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin);
 8001792:	210c      	movs	r1, #12
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <HAL_QSPI_MspDeInit+0x68>)
 8001796:	f001 fc33 	bl	8003000 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin);
 800179a:	2104      	movs	r1, #4
 800179c:	480a      	ldr	r0, [pc, #40]	; (80017c8 <HAL_QSPI_MspDeInit+0x6c>)
 800179e:	f001 fc2f 	bl	8003000 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_BK1_IO0_GPIO_Port, QSPI_BK1_IO0_Pin);
 80017a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a6:	4809      	ldr	r0, [pc, #36]	; (80017cc <HAL_QSPI_MspDeInit+0x70>)
 80017a8:	f001 fc2a 	bl	8003000 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	52005000 	.word	0x52005000
 80017b8:	58024400 	.word	0x58024400
 80017bc:	58021800 	.word	0x58021800
 80017c0:	58021400 	.word	0x58021400
 80017c4:	58021c00 	.word	0x58021c00
 80017c8:	58020400 	.word	0x58020400
 80017cc:	58020c00 	.word	0x58020c00

080017d0 <QSPI_Init>:

static int32_t QSPI_ResetMemory(uint32_t Instance);
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance, QSPI_Interface_t Mode);

int32_t QSPI_Init(uint32_t Instance, QSPI_Init_t *Init)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  int32_t ret = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  */

//  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <QSPI_Init+0x1a>
  {
    ret = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e060      	b.n	80018ac <QSPI_Init+0xdc>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80017ea:	4933      	ldr	r1, [pc, #204]	; (80018b8 <QSPI_Init+0xe8>)
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d156      	bne.n	80018ac <QSPI_Init+0xdc>
    {
      /* Msp QSPI initialization */
    	HAL_QSPI_MspInit(&hqspi);
 80017fe:	482f      	ldr	r0, [pc, #188]	; (80018bc <QSPI_Init+0xec>)
 8001800:	f7ff fe7e 	bl	8001500 <HAL_QSPI_MspInit>

      if(ret == HAL_OK)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d150      	bne.n	80018ac <QSPI_Init+0xdc>
//        if(PMX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
//        {
//          ret = HAL_ERROR;
//        }

    	MX_QUADSPI_Init ();
 800180a:	f7ff fe4f 	bl	80014ac <MX_QUADSPI_Init>

        /* QSPI memory reset */
        if(QSPI_ResetMemory(Instance) != HAL_OK)
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fa6c 	bl	8001cec <QSPI_ResetMemory>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <QSPI_Init+0x50>
        {
          ret = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e045      	b.n	80018ac <QSPI_Init+0xdc>
        }

        /* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001820:	4925      	ldr	r1, [pc, #148]	; (80018b8 <QSPI_Init+0xe8>)
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3301      	adds	r3, #1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4619      	mov	r1, r3
 8001834:	4821      	ldr	r0, [pc, #132]	; (80018bc <QSPI_Init+0xec>)
 8001836:	f7ff fb84 	bl	8000f42 <MT25TL01G_Enter4BytesAddressMode>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <QSPI_Init+0x76>
        {
          ret = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e032      	b.n	80018ac <QSPI_Init+0xdc>
        }

      	/* Configuration of the dummy cycles on QSPI memory side */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001846:	491c      	ldr	r1, [pc, #112]	; (80018b8 <QSPI_Init+0xe8>)
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	3301      	adds	r3, #1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	4818      	ldr	r0, [pc, #96]	; (80018bc <QSPI_Init+0xec>)
 800185c:	f7ff fbb9 	bl	8000fd2 <MT25TL01G_AutoPollingMemReady>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <QSPI_Init+0x9c>
        {
          ret = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e01f      	b.n	80018ac <QSPI_Init+0xdc>
        }

        else if(QSPI_DummyCyclesCfg(Instance, QSPI_Ctx[Instance].InterfaceMode) != HAL_OK)
 800186c:	4912      	ldr	r1, [pc, #72]	; (80018b8 <QSPI_Init+0xe8>)
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3301      	adds	r3, #1
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fa9b 	bl	8001dbc <QSPI_DummyCyclesCfg>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <QSPI_Init+0xc2>
        {
          ret = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e00c      	b.n	80018ac <QSPI_Init+0xdc>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != HAL_OK)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	7819      	ldrb	r1, [r3, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	461a      	mov	r2, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f9a7 	bl	8001bf0 <QSPI_ConfigFlash>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <QSPI_Init+0xdc>
          {
            ret = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80018ac:	68fb      	ldr	r3, [r7, #12]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	240000dc 	.word	0x240000dc
 80018bc:	24000090 	.word	0x24000090

080018c0 <QSPI_DeInit>:

int32_t QSPI_DeInit(uint32_t Instance)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  int32_t ret = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <QSPI_DeInit+0x18>
  {
    ret = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e046      	b.n	8001966 <QSPI_DeInit+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80018d8:	4925      	ldr	r1, [pc, #148]	; (8001970 <QSPI_DeInit+0xb0>)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d107      	bne.n	80018fc <QSPI_DeInit+0x3c>
    {
      if(QSPI_DisableMemoryMappedMode(Instance) != HAL_OK)
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f927 	bl	8001b40 <QSPI_DisableMemoryMappedMode>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <QSPI_DeInit+0x3c>
      {
        ret = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == HAL_OK)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d131      	bne.n	8001966 <QSPI_DeInit+0xa6>
    {
      /* Set default QSPI_Ctx values */
      QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_NONE;
 8001902:	491b      	ldr	r1, [pc, #108]	; (8001970 <QSPI_DeInit+0xb0>)
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
      QSPI_Ctx[Instance].InterfaceMode = QSPI_SPI_MODE;
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <QSPI_DeInit+0xb0>)
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	3301      	adds	r3, #1
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
      QSPI_Ctx[Instance].TransferRate  = QSPI_STR_TRANSFER;
 8001928:	4911      	ldr	r1, [pc, #68]	; (8001970 <QSPI_DeInit+0xb0>)
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	3302      	adds	r3, #2
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
      QSPI_Ctx[Instance].DualFlashMode = QSPI_DUALFLASH_ENABLE;
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <QSPI_DeInit+0xb0>)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3304      	adds	r3, #4
 800194c:	2240      	movs	r2, #64	; 0x40
 800194e:	601a      	str	r2, [r3, #0]

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 0)
      HAL_QSPI_MspDeInit(&hqspi);
 8001950:	4808      	ldr	r0, [pc, #32]	; (8001974 <QSPI_DeInit+0xb4>)
 8001952:	f7ff ff03 	bl	800175c <HAL_QSPI_MspDeInit>
#endif /* (USE_HAL_QSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_QSPI_DeInit(&hqspi) != HAL_OK)
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <QSPI_DeInit+0xb4>)
 8001958:	f001 fde6 	bl	8003528 <HAL_QSPI_DeInit>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <QSPI_DeInit+0xa6>
      {
        ret = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	240000dc 	.word	0x240000dc
 8001974:	24000090 	.word	0x24000090

08001978 <QSPI_Write>:
  * @param  WriteAddr  Write start address
  * @param  Size       Size of data to write
  * @retval BSP status
  */
int32_t QSPI_Write(uint32_t Instance, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  int32_t ret = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t end_addr, current_size, current_addr;
  uint8_t *write_data;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <QSPI_Write+0x1e>
  {
    ret = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
 8001994:	e07d      	b.n	8001a92 <QSPI_Write+0x11a>
  }
  else
  {
    /* Calculation of the size between the write address and the end of the page */
    current_size = MT25TL01G_PAGE_SIZE - (WriteAddr % MT25TL01G_PAGE_SIZE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800199e:	623b      	str	r3, [r7, #32]

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > Size)
 80019a0:	6a3a      	ldr	r2, [r7, #32]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d901      	bls.n	80019ac <QSPI_Write+0x34>
    {
      current_size = Size;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	623b      	str	r3, [r7, #32]
    }

    /* Initialize the address variables */
    current_addr = WriteAddr;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	61fb      	str	r3, [r7, #28]
    end_addr = WriteAddr + Size;
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
    write_data = pData;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	61bb      	str	r3, [r7, #24]

    /* Perform the write page by page */
    do
    {
      /* Check if Flash busy ? */
      if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80019bc:	4937      	ldr	r1, [pc, #220]	; (8001a9c <QSPI_Write+0x124>)
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	3301      	adds	r3, #1
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	4833      	ldr	r0, [pc, #204]	; (8001aa0 <QSPI_Write+0x128>)
 80019d2:	f7ff fafe 	bl	8000fd2 <MT25TL01G_AutoPollingMemReady>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <QSPI_Write+0x6a>
      {
        ret = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e050      	b.n	8001a84 <QSPI_Write+0x10c>
      }/* Enable write operations */
      else if(MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80019e2:	492e      	ldr	r1, [pc, #184]	; (8001a9c <QSPI_Write+0x124>)
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3301      	adds	r3, #1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	482a      	ldr	r0, [pc, #168]	; (8001aa0 <QSPI_Write+0x128>)
 80019f8:	f7ff fb27 	bl	800104a <MT25TL01G_WriteEnable>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <QSPI_Write+0x90>
      {
        ret = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
 8001a06:	e03d      	b.n	8001a84 <QSPI_Write+0x10c>
      }/* Issue page program command */
      else if(MT25TL01G_PageProgram(&hqspi, QSPI_Ctx[Instance].InterfaceMode, write_data, current_addr, current_size) != MT25TL01G_OK)
 8001a08:	4924      	ldr	r1, [pc, #144]	; (8001a9c <QSPI_Write+0x124>)
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	3301      	adds	r3, #1
 8001a18:	7819      	ldrb	r1, [r3, #0]
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	481f      	ldr	r0, [pc, #124]	; (8001aa0 <QSPI_Write+0x128>)
 8001a24:	f7ff fb6c 	bl	8001100 <MT25TL01G_PageProgram>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <QSPI_Write+0xbc>
      {
        ret = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
 8001a32:	e027      	b.n	8001a84 <QSPI_Write+0x10c>
      }/* Configure automatic polling mode to wait for end of program */
      else if (MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a34:	4919      	ldr	r1, [pc, #100]	; (8001a9c <QSPI_Write+0x124>)
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3301      	adds	r3, #1
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4815      	ldr	r0, [pc, #84]	; (8001aa0 <QSPI_Write+0x128>)
 8001a4a:	f7ff fac2 	bl	8000fd2 <MT25TL01G_AutoPollingMemReady>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <QSPI_Write+0xe2>
      {
        ret = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
 8001a58:	e014      	b.n	8001a84 <QSPI_Write+0x10c>
      }
      else
      {
        /* Update the address and size variables for next page programming */
        current_addr += current_size;
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	4413      	add	r3, r2
 8001a60:	61fb      	str	r3, [r7, #28]
        write_data += current_size;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	4413      	add	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        current_size = ((current_addr + MT25TL01G_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MT25TL01G_PAGE_SIZE;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d203      	bcs.n	8001a7e <QSPI_Write+0x106>
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	e001      	b.n	8001a82 <QSPI_Write+0x10a>
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a82:	623b      	str	r3, [r7, #32]
      }
    } while ((current_addr < end_addr) && (ret == HAL_OK));
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d202      	bcs.n	8001a92 <QSPI_Write+0x11a>
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d094      	beq.n	80019bc <QSPI_Write+0x44>
  }

  /* Return BSP status */
  return ret;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3728      	adds	r7, #40	; 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	240000dc 	.word	0x240000dc
 8001aa0:	24000090 	.word	0x24000090

08001aa4 <QSPI_EraseChip>:
  * @brief  Erases the entire QSPI memory.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t QSPI_EraseChip(uint32_t Instance)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  int32_t ret = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <QSPI_EraseChip+0x18>
  {
    ret = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e037      	b.n	8001b2c <QSPI_EraseChip+0x88>
  }
  else
  {
    /* Check Flash busy ? */
    if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001abc:	491e      	ldr	r1, [pc, #120]	; (8001b38 <QSPI_EraseChip+0x94>)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	3301      	adds	r3, #1
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481a      	ldr	r0, [pc, #104]	; (8001b3c <QSPI_EraseChip+0x98>)
 8001ad2:	f7ff fa7e 	bl	8000fd2 <MT25TL01G_AutoPollingMemReady>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <QSPI_EraseChip+0x3e>
    {
      ret = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e024      	b.n	8001b2c <QSPI_EraseChip+0x88>
    }/* Enable write operations */
    else if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001ae2:	4915      	ldr	r1, [pc, #84]	; (8001b38 <QSPI_EraseChip+0x94>)
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3301      	adds	r3, #1
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4811      	ldr	r0, [pc, #68]	; (8001b3c <QSPI_EraseChip+0x98>)
 8001af8:	f7ff faa7 	bl	800104a <MT25TL01G_WriteEnable>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <QSPI_EraseChip+0x64>
    {
      ret = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e011      	b.n	8001b2c <QSPI_EraseChip+0x88>
    }
    else
    {
      /* Issue Chip erase command */
      if(MT25TL01G_ChipErase(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001b08:	490b      	ldr	r1, [pc, #44]	; (8001b38 <QSPI_EraseChip+0x94>)
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3301      	adds	r3, #1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4807      	ldr	r0, [pc, #28]	; (8001b3c <QSPI_EraseChip+0x98>)
 8001b1e:	f7ff fbdb 	bl	80012d8 <MT25TL01G_ChipErase>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <QSPI_EraseChip+0x88>
      {
        ret = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	240000dc 	.word	0x240000dc
 8001b3c:	24000090 	.word	0x24000090

08001b40 <QSPI_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t QSPI_DisableMemoryMappedMode(uint32_t Instance)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	6078      	str	r0, [r7, #4]
  uint8_t Dummy;
  int32_t ret = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <QSPI_DisableMemoryMappedMode+0x18>
  {
    ret = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	e041      	b.n	8001bdc <QSPI_DisableMemoryMappedMode+0x9c>
  }
  else
  {
    if(QSPI_Ctx[Instance].IsInitialized != QSPI_ACCESS_MMP)
 8001b58:	4923      	ldr	r1, [pc, #140]	; (8001be8 <QSPI_DisableMemoryMappedMode+0xa8>)
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d002      	beq.n	8001b72 <QSPI_DisableMemoryMappedMode+0x32>
    {
      ret = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e034      	b.n	8001bdc <QSPI_DisableMemoryMappedMode+0x9c>
    }/* Abort MMP back to indirect mode */
    else if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
 8001b72:	481e      	ldr	r0, [pc, #120]	; (8001bec <QSPI_DisableMemoryMappedMode+0xac>)
 8001b74:	f001 fefc 	bl	8003970 <HAL_QSPI_Abort>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <QSPI_DisableMemoryMappedMode+0x44>
    {
      ret = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	e02b      	b.n	8001bdc <QSPI_DisableMemoryMappedMode+0x9c>
    }
    else
    {
      /* Force QSPI interface Sampling Shift to half cycle */
      hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <QSPI_DisableMemoryMappedMode+0xac>)
 8001b86:	2210      	movs	r2, #16
 8001b88:	60da      	str	r2, [r3, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001b8a:	4818      	ldr	r0, [pc, #96]	; (8001bec <QSPI_DisableMemoryMappedMode+0xac>)
 8001b8c:	f001 fc58 	bl	8003440 <HAL_QSPI_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <QSPI_DisableMemoryMappedMode+0x5c>
      {
        ret = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e01f      	b.n	8001bdc <QSPI_DisableMemoryMappedMode+0x9c>
      }
      /* Dummy read for exit from Performance Enhance mode */
      else if(MT25TL01G_ReadSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode, &Dummy, 0, 1) != MT25TL01G_OK)
 8001b9c:	4912      	ldr	r1, [pc, #72]	; (8001be8 <QSPI_DisableMemoryMappedMode+0xa8>)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3301      	adds	r3, #1
 8001bac:	7819      	ldrb	r1, [r3, #0]
 8001bae:	f107 020b 	add.w	r2, r7, #11
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <QSPI_DisableMemoryMappedMode+0xac>)
 8001bba:	f7ff fb17 	bl	80011ec <MT25TL01G_ReadSTR>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <QSPI_DisableMemoryMappedMode+0x8a>
      {
        ret = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e008      	b.n	8001bdc <QSPI_DisableMemoryMappedMode+0x9c>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001bca:	4907      	ldr	r1, [pc, #28]	; (8001be8 <QSPI_DisableMemoryMappedMode+0xa8>)
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* Return BSP status */
  return ret;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	240000dc 	.word	0x240000dc
 8001bec:	24000090 	.word	0x24000090

08001bf0 <QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t QSPI_ConfigFlash(uint32_t Instance, QSPI_Interface_t Mode, QSPI_Transfer_t Rate)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	70bb      	strb	r3, [r7, #2]
  int32_t ret = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <QSPI_ConfigFlash+0x20>
  {
    ret = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	e063      	b.n	8001cd8 <QSPI_ConfigFlash+0xe8>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8001c10:	4934      	ldr	r1, [pc, #208]	; (8001ce4 <QSPI_ConfigFlash+0xf4>)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d102      	bne.n	8001c2a <QSPI_ConfigFlash+0x3a>
    {
      ret = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e056      	b.n	8001cd8 <QSPI_ConfigFlash+0xe8>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001c2a:	78bb      	ldrb	r3, [r7, #2]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <QSPI_ConfigFlash+0x44>
 8001c30:	2310      	movs	r3, #16
 8001c32:	e000      	b.n	8001c36 <QSPI_ConfigFlash+0x46>
 8001c34:	2300      	movs	r3, #0
 8001c36:	4a2c      	ldr	r2, [pc, #176]	; (8001ce8 <QSPI_ConfigFlash+0xf8>)
 8001c38:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001c3a:	482b      	ldr	r0, [pc, #172]	; (8001ce8 <QSPI_ConfigFlash+0xf8>)
 8001c3c:	f001 fc00 	bl	8003440 <HAL_QSPI_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <QSPI_ConfigFlash+0x5c>
      {
        ret = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e045      	b.n	8001cd8 <QSPI_ConfigFlash+0xe8>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8001c4c:	4925      	ldr	r1, [pc, #148]	; (8001ce4 <QSPI_ConfigFlash+0xf4>)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d10b      	bne.n	8001c7a <QSPI_ConfigFlash+0x8a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d014      	beq.n	8001c92 <QSPI_ConfigFlash+0xa2>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8001c68:	481f      	ldr	r0, [pc, #124]	; (8001ce8 <QSPI_ConfigFlash+0xf8>)
 8001c6a:	f7ff fb91 	bl	8001390 <MT25TL01G_ExitQPIMode>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00e      	beq.n	8001c92 <QSPI_ConfigFlash+0xa2>
            {
              ret = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001c78:	e00b      	b.n	8001c92 <QSPI_ConfigFlash+0xa2>

        case QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d10a      	bne.n	8001c96 <QSPI_ConfigFlash+0xa6>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8001c80:	4819      	ldr	r0, [pc, #100]	; (8001ce8 <QSPI_ConfigFlash+0xf8>)
 8001c82:	f7ff fb5b 	bl	800133c <MT25TL01G_EnterQPIMode>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <QSPI_ConfigFlash+0xa6>
            {
              ret = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001c90:	e001      	b.n	8001c96 <QSPI_ConfigFlash+0xa6>
          break;
 8001c92:	bf00      	nop
 8001c94:	e000      	b.n	8001c98 <QSPI_ConfigFlash+0xa8>
          break;
 8001c96:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == HAL_OK)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11c      	bne.n	8001cd8 <QSPI_ConfigFlash+0xe8>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001c9e:	4911      	ldr	r1, [pc, #68]	; (8001ce4 <QSPI_ConfigFlash+0xf4>)
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <QSPI_ConfigFlash+0xf4>)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <QSPI_ConfigFlash+0xf4>)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	78ba      	ldrb	r2, [r7, #2]
 8001cd6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	240000dc 	.word	0x240000dc
 8001ce8:	24000090 	.word	0x24000090

08001cec <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  int32_t ret = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	482e      	ldr	r0, [pc, #184]	; (8001db4 <QSPI_ResetMemory+0xc8>)
 8001cfc:	f7ff fb72 	bl	80013e4 <MT25TL01G_ResetEnable>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <QSPI_ResetMemory+0x20>
  {
    ret =HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e04d      	b.n	8001da8 <QSPI_ResetMemory+0xbc>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001d0c:	2103      	movs	r1, #3
 8001d0e:	4829      	ldr	r0, [pc, #164]	; (8001db4 <QSPI_ResetMemory+0xc8>)
 8001d10:	f7ff fb9a 	bl	8001448 <MT25TL01G_ResetMemory>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <QSPI_ResetMemory+0x34>
  {
    ret = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e043      	b.n	8001da8 <QSPI_ResetMemory+0xbc>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001d20:	4925      	ldr	r1, [pc, #148]	; (8001db8 <QSPI_ResetMemory+0xcc>)
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	481f      	ldr	r0, [pc, #124]	; (8001db4 <QSPI_ResetMemory+0xc8>)
 8001d36:	f7ff f94c 	bl	8000fd2 <MT25TL01G_AutoPollingMemReady>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <QSPI_ResetMemory+0x5a>
  {
    ret = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e030      	b.n	8001da8 <QSPI_ResetMemory+0xbc>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, QSPI_SPI_MODE) != MT25TL01G_OK)
 8001d46:	2100      	movs	r1, #0
 8001d48:	481a      	ldr	r0, [pc, #104]	; (8001db4 <QSPI_ResetMemory+0xc8>)
 8001d4a:	f7ff fb4b 	bl	80013e4 <MT25TL01G_ResetEnable>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <QSPI_ResetMemory+0x6e>
  {
    ret = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e026      	b.n	8001da8 <QSPI_ResetMemory+0xbc>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, QSPI_SPI_MODE) != MT25TL01G_OK)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4815      	ldr	r0, [pc, #84]	; (8001db4 <QSPI_ResetMemory+0xc8>)
 8001d5e:	f7ff fb73 	bl	8001448 <MT25TL01G_ResetMemory>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <QSPI_ResetMemory+0x82>
  {
    ret = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e01c      	b.n	8001da8 <QSPI_ResetMemory+0xbc>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8001d6e:	4912      	ldr	r1, [pc, #72]	; (8001db8 <QSPI_ResetMemory+0xcc>)
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8001d80:	490d      	ldr	r1, [pc, #52]	; (8001db8 <QSPI_ResetMemory+0xcc>)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3301      	adds	r3, #1
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8001d94:	4908      	ldr	r1, [pc, #32]	; (8001db8 <QSPI_ResetMemory+0xcc>)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3302      	adds	r3, #2
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 8001da8:	68fb      	ldr	r3, [r7, #12]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	24000090 	.word	0x24000090
 8001db8:	240000dc 	.word	0x240000dc

08001dbc <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance, QSPI_Interface_t Mode)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b092      	sub	sp, #72	; 0x48
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
    int32_t ret= HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d102      	bne.n	8001ddc <QSPI_DummyCyclesCfg+0x20>
 8001dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dda:	e001      	b.n	8001de0 <QSPI_DummyCyclesCfg+0x24>
 8001ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8001de2:	2385      	movs	r3, #133	; 0x85
 8001de4:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d102      	bne.n	8001dfa <QSPI_DummyCyclesCfg+0x3e>
 8001df4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001df8:	e001      	b.n	8001dfe <QSPI_DummyCyclesCfg+0x42>
 8001dfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8001e04:	2302      	movs	r3, #2
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001e10:	2300      	movs	r3, #0
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4824      	ldr	r0, [pc, #144]	; (8001eb0 <QSPI_DummyCyclesCfg+0xf4>)
 8001e20:	f001 fba2 	bl	8003568 <HAL_QSPI_Command>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <QSPI_DummyCyclesCfg+0x72>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e03c      	b.n	8001ea8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e2e:	f107 030a 	add.w	r3, r7, #10
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4619      	mov	r1, r3
 8001e38:	481d      	ldr	r0, [pc, #116]	; (8001eb0 <QSPI_DummyCyclesCfg+0xf4>)
 8001e3a:	f001 fc85 	bl	8003748 <HAL_QSPI_Receive>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <QSPI_DummyCyclesCfg+0x8c>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e02f      	b.n	8001ea8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, Mode) != MT25TL01G_OK)
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <QSPI_DummyCyclesCfg+0xf4>)
 8001e4e:	f7ff f8fc 	bl	800104a <MT25TL01G_WriteEnable>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <QSPI_DummyCyclesCfg+0xa0>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e025      	b.n	8001ea8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8001e5c:	2381      	movs	r3, #129	; 0x81
 8001e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8001e60:	897a      	ldrh	r2, [r7, #10]
 8001e62:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001e66:	4013      	ands	r3, r2
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <QSPI_DummyCyclesCfg+0xf8>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <QSPI_DummyCyclesCfg+0xf4>)
 8001e7e:	f001 fb73 	bl	8003568 <HAL_QSPI_Command>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <QSPI_DummyCyclesCfg+0xd0>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e00d      	b.n	8001ea8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e8c:	f107 030a 	add.w	r3, r7, #10
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4619      	mov	r1, r3
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <QSPI_DummyCyclesCfg+0xf4>)
 8001e98:	f001 fbc4 	bl	8003624 <HAL_QSPI_Transmit>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <QSPI_DummyCyclesCfg+0xea>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <QSPI_DummyCyclesCfg+0xec>
  }

  /* Return BSP status */
  return ret;
 8001ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3748      	adds	r7, #72	; 0x48
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	24000090 	.word	0x24000090
 8001eb4:	ffff8080 	.word	0xffff8080

08001eb8 <CSP_QUADSPI_Init>:
  * @}
  */


uint8_t CSP_QUADSPI_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
	hqspi.Instance = QUADSPI;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <CSP_QUADSPI_Init+0x48>)
 8001ec0:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <CSP_QUADSPI_Init+0x4c>)
 8001ec2:	601a      	str	r2, [r3, #0]
    if (QSPI_DeInit(0) != HAL_OK) {
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff fcfb 	bl	80018c0 <QSPI_DeInit>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <CSP_QUADSPI_Init+0x1c>
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e010      	b.n	8001ef6 <CSP_QUADSPI_Init+0x3e>
    }

    QSPI_Init_t qspi_Init;

    qspi_Init.InterfaceMode = QSPI_QPI_MODE;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	713b      	strb	r3, [r7, #4]
    qspi_Init.TransferRate = QSPI_STR_TRANSFER;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	717b      	strb	r3, [r7, #5]
    qspi_Init.DualFlashMode = QSPI_DUALFLASH_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	71bb      	strb	r3, [r7, #6]

    if (QSPI_Init(0, &qspi_Init) != HAL_OK)
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fc73 	bl	80017d0 <QSPI_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <CSP_QUADSPI_Init+0x3c>
    {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <CSP_QUADSPI_Init+0x3e>
    }

    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	24000090 	.word	0x24000090
 8001f04:	52005000 	.word	0x52005000

08001f08 <CSP_QSPI_Erase_Chip>:

uint8_t CSP_QSPI_Erase_Chip(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	return QSPI_EraseChip(0);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fdc9 	bl	8001aa4 <QSPI_EraseChip>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b2db      	uxtb	r3, r3
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address, uint32_t buffer_size)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
	return QSPI_Write(0, buffer, address, buffer_size);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	68f9      	ldr	r1, [r7, #12]
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff fd23 	bl	8001978 <QSPI_Write>
 8001f32:	4603      	mov	r3, r0
 8001f34:	b2db      	uxtb	r3, r3
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_SDMMC1_SD_Init+0x34>)
 8001f46:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <MX_SDMMC1_SD_Init+0x38>)
 8001f48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <MX_SDMMC1_SD_Init+0x34>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <MX_SDMMC1_SD_Init+0x34>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_SDMMC1_SD_Init+0x34>)
 8001f58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f5c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <MX_SDMMC1_SD_Init+0x34>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <MX_SDMMC1_SD_Init+0x34>)
 8001f66:	2208      	movs	r2, #8
 8001f68:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001f6a:	4802      	ldr	r0, [pc, #8]	; (8001f74 <MX_SDMMC1_SD_Init+0x34>)
 8001f6c:	f005 fcd2 	bl	8007914 <HAL_SD_Init>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	240000e8 	.word	0x240000e8
 8001f78:	52007000 	.word	0x52007000

08001f7c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0be      	sub	sp, #248	; 0xf8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	22c8      	movs	r2, #200	; 0xc8
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00b faef 	bl	800d580 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a38      	ldr	r2, [pc, #224]	; (8002088 <HAL_SD_MspInit+0x10c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d169      	bne.n	8002080 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001fac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 ff69 	bl	8004e98 <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001fcc:	f7fe ffb4 	bl	8000f38 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_SD_MspInit+0x110>)
 8001fd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	; (800208c <HAL_SD_MspInit+0x110>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fdc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_SD_MspInit+0x110>)
 8001fe2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_SD_MspInit+0x110>)
 8001ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff4:	4a25      	ldr	r2, [pc, #148]	; (800208c <HAL_SD_MspInit+0x110>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_SD_MspInit+0x110>)
 8002000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_SD_MspInit+0x110>)
 800200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <HAL_SD_MspInit+0x110>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_SD_MspInit+0x110>)
 800201e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 800202a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800202e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002044:	230c      	movs	r3, #12
 8002046:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800204e:	4619      	mov	r1, r3
 8002050:	480f      	ldr	r0, [pc, #60]	; (8002090 <HAL_SD_MspInit+0x114>)
 8002052:	f000 fe25 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8002056:	2304      	movs	r3, #4
 8002058:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800206e:	230c      	movs	r3, #12
 8002070:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8002074:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002078:	4619      	mov	r1, r3
 800207a:	4806      	ldr	r0, [pc, #24]	; (8002094 <HAL_SD_MspInit+0x118>)
 800207c:	f000 fe10 	bl	8002ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002080:	bf00      	nop
 8002082:	37f8      	adds	r7, #248	; 0xf8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	52007000 	.word	0x52007000
 800208c:	58024400 	.word	0x58024400
 8002090:	58020800 	.word	0x58020800
 8002094:	58020c00 	.word	0x58020c00

08002098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_MspInit+0x30>)
 80020a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020a4:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_MspInit+0x30>)
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_MspInit+0x30>)
 80020b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	58024400 	.word	0x58024400

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <NMI_Handler+0x4>

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 f98a 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f00b f9ec 	bl	800d52c <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	24080000 	.word	0x24080000
 8002180:	00000400 	.word	0x00000400
 8002184:	24000164 	.word	0x24000164
 8002188:	24000268 	.word	0x24000268

0800218c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <MX_USART1_UART_Init+0x90>)
 8002192:	4a23      	ldr	r2, [pc, #140]	; (8002220 <MX_USART1_UART_Init+0x94>)
 8002194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <MX_USART1_UART_Init+0x90>)
 8002198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800219c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d4:	4811      	ldr	r0, [pc, #68]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021d6:	f006 ff4f 	bl	8009078 <HAL_UART_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021e0:	f7fe feaa 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021e4:	2100      	movs	r1, #0
 80021e6:	480d      	ldr	r0, [pc, #52]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021e8:	f007 ffdf 	bl	800a1aa <HAL_UARTEx_SetTxFifoThreshold>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80021f2:	f7fe fea1 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f6:	2100      	movs	r1, #0
 80021f8:	4808      	ldr	r0, [pc, #32]	; (800221c <MX_USART1_UART_Init+0x90>)
 80021fa:	f008 f814 	bl	800a226 <HAL_UARTEx_SetRxFifoThreshold>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002204:	f7fe fe98 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <MX_USART1_UART_Init+0x90>)
 800220a:	f007 ff95 	bl	800a138 <HAL_UARTEx_DisableFifoMode>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002214:	f7fe fe90 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	24000168 	.word	0x24000168
 8002220:	40011000 	.word	0x40011000

08002224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0bc      	sub	sp, #240	; 0xf0
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	22c8      	movs	r2, #200	; 0xc8
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f00b f99b 	bl	800d580 <memset>
  if(uartHandle->Instance==USART1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a27      	ldr	r2, [pc, #156]	; (80022ec <HAL_UART_MspInit+0xc8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d146      	bne.n	80022e2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002254:	f04f 0201 	mov.w	r2, #1
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fe14 	bl	8004e98 <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002276:	f7fe fe5f 	bl	8000f38 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_UART_MspInit+0xcc>)
 800227c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002280:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <HAL_UART_MspInit+0xcc>)
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_UART_MspInit+0xcc>)
 800228c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_UART_MspInit+0xcc>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_UART_MspInit+0xcc>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_UART_MspInit+0xcc>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80022b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022d0:	2307      	movs	r3, #7
 80022d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	; (80022f4 <HAL_UART_MspInit+0xd0>)
 80022de:	f000 fcdf 	bl	8002ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022e2:	bf00      	nop
 80022e4:	37f0      	adds	r7, #240	; 0xf0
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40011000 	.word	0x40011000
 80022f0:	58024400 	.word	0x58024400
 80022f4:	58020000 	.word	0x58020000

080022f8 <Boot_Reset_Handler>:

    .section  .text.Boot_Reset_Handler
  .weak  Boot_Reset_Handler
  .type  Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022fc:	f7fe f9c2 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002300:	480c      	ldr	r0, [pc, #48]	; (8002334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002302:	490d      	ldr	r1, [pc, #52]	; (8002338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002308:	e002      	b.n	8002310 <LoopCopyDataInit>

0800230a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800230c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230e:	3304      	adds	r3, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002314:	d3f9      	bcc.n	800230a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002318:	4c0a      	ldr	r4, [pc, #40]	; (8002344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800231c:	e001      	b.n	8002322 <LoopFillZerobss>

0800231e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002320:	3204      	adds	r2, #4

08002322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002324:	d3fb      	bcc.n	800231e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002326:	f00b f907 	bl	800d538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  boot_main
 800232a:	f7fe fc77 	bl	8000c1c <boot_main>
  bx  lr
 800232e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002330:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002334:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002338:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800233c:	0800e018 	.word	0x0800e018
  ldr r2, =_sbss
 8002340:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8002344:	24000268 	.word	0x24000268

08002348 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC3_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002352:	2003      	movs	r0, #3
 8002354:	f000 f96e 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002358:	f002 fbc8 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_Init+0x68>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	4913      	ldr	r1, [pc, #76]	; (80023b8 <HAL_Init+0x6c>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_Init+0x68>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_Init+0x6c>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_Init+0x70>)
 800238e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002390:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <HAL_Init+0x74>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002396:	2000      	movs	r0, #0
 8002398:	f000 f814 	bl	80023c4 <HAL_InitTick>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e002      	b.n	80023ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023a6:	f7ff fe77 	bl	8002098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	58024400 	.word	0x58024400
 80023b8:	0800df08 	.word	0x0800df08
 80023bc:	24000004 	.word	0x24000004
 80023c0:	24000000 	.word	0x24000000

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_InitTick+0x60>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e021      	b.n	800241c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_InitTick+0x64>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_InitTick+0x60>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f945 	bl	800267e <HAL_SYSTICK_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00e      	b.n	800241c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d80a      	bhi.n	800241a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f000 f91d 	bl	800264a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <HAL_InitTick+0x68>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	2400000c 	.word	0x2400000c
 8002428:	24000000 	.word	0x24000000
 800242c:	24000008 	.word	0x24000008

08002430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	2400000c 	.word	0x2400000c
 8002454:	240001fc 	.word	0x240001fc

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	240001fc 	.word	0x240001fc

08002470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff ffee 	bl	8002458 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d005      	beq.n	8002496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_Delay+0x44>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002496:	bf00      	nop
 8002498:	f7ff ffde 	bl	8002458 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f7      	bhi.n	8002498 <HAL_Delay+0x28>
  {
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2400000c 	.word	0x2400000c

080024b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetREVID+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0c1b      	lsrs	r3, r3, #16
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	5c001000 	.word	0x5c001000

080024d0 <__NVIC_SetPriorityGrouping>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <__NVIC_SetPriorityGrouping+0x40>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	; (8002510 <__NVIC_SetPriorityGrouping+0x40>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00
 8002514:	05fa0000 	.word	0x05fa0000

08002518 <__NVIC_GetPriorityGrouping>:
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_SetPriority>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff47 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff5e 	bl	8002518 <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff90 	bl	8002588 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5f 	bl	8002534 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffb2 	bl	80025f0 <SysTick_Config>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80026ac:	2308      	movs	r3, #8
 80026ae:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_FLASH_Program+0x11c>)
 80026b2:	7d1b      	ldrb	r3, [r3, #20]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_FLASH_Program+0x24>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e076      	b.n	80027aa <HAL_FLASH_Program+0x112>
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_FLASH_Program+0x11c>)
 80026be:	2201      	movs	r2, #1
 80026c0:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c8:	d306      	bcc.n	80026d8 <HAL_FLASH_Program+0x40>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80026d0:	d202      	bcs.n	80026d8 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	e00c      	b.n	80026f2 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80026de:	d306      	bcc.n	80026ee <HAL_FLASH_Program+0x56>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 80026e6:	d202      	bcs.n	80026ee <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 80026e8:	2302      	movs	r3, #2
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	e001      	b.n	80026f2 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e05b      	b.n	80027aa <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_FLASH_Program+0x11c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80026f8:	69b9      	ldr	r1, [r7, #24]
 80026fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026fe:	f000 f8c1 	bl	8002884 <FLASH_WaitForLastOperation>
 8002702:	4603      	mov	r3, r0
 8002704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8002708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800270c:	2b00      	cmp	r3, #0
 800270e:	d147      	bne.n	80027a0 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d106      	bne.n	8002724 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <HAL_FLASH_Program+0x120>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <HAL_FLASH_Program+0x120>)
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	60d3      	str	r3, [r2, #12]
 8002722:	e007      	b.n	8002734 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_FLASH_Program+0x120>)
 8002726:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800272a:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <HAL_FLASH_Program+0x120>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8002734:	f3bf 8f6f 	isb	sy
}
 8002738:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800273a:	f3bf 8f4f 	dsb	sy
}
 800273e:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	3304      	adds	r3, #4
 800274c:	623b      	str	r3, [r7, #32]
        src_addr++;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	61fb      	str	r3, [r7, #28]
        row_index--;
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	3b01      	subs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ef      	bne.n	8002740 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8002760:	f3bf 8f6f 	isb	sy
}
 8002764:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002766:	f3bf 8f4f 	dsb	sy
}
 800276a:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800276c:	69b9      	ldr	r1, [r7, #24]
 800276e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002772:	f000 f887 	bl	8002884 <FLASH_WaitForLastOperation>
 8002776:	4603      	mov	r3, r0
 8002778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d106      	bne.n	8002790 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_FLASH_Program+0x120>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <HAL_FLASH_Program+0x120>)
 8002788:	f023 0302 	bic.w	r3, r3, #2
 800278c:	60d3      	str	r3, [r2, #12]
 800278e:	e007      	b.n	80027a0 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_FLASH_Program+0x120>)
 8002792:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <HAL_FLASH_Program+0x120>)
 8002798:	f023 0302 	bic.w	r3, r3, #2
 800279c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <HAL_FLASH_Program+0x11c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	751a      	strb	r2, [r3, #20]

  return status;
 80027a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	24000200 	.word	0x24000200
 80027b8:	52002000 	.word	0x52002000

080027bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <HAL_FLASH_Unlock+0x68>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_FLASH_Unlock+0x68>)
 80027ce:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_FLASH_Unlock+0x6c>)
 80027d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_FLASH_Unlock+0x68>)
 80027d4:	4a15      	ldr	r2, [pc, #84]	; (800282c <HAL_FLASH_Unlock+0x70>)
 80027d6:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_FLASH_Unlock+0x68>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e018      	b.n	800281a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_FLASH_Unlock+0x68>)
 80027ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_FLASH_Unlock+0x68>)
 80027f8:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <HAL_FLASH_Unlock+0x6c>)
 80027fa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_FLASH_Unlock+0x68>)
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_FLASH_Unlock+0x70>)
 8002802:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_FLASH_Unlock+0x68>)
 8002808:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	52002000 	.word	0x52002000
 8002828:	45670123 	.word	0x45670123
 800282c:	cdef89ab 	.word	0xcdef89ab

08002830 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_FLASH_Lock+0x50>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a11      	ldr	r2, [pc, #68]	; (8002880 <HAL_FLASH_Lock+0x50>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_FLASH_Lock+0x50>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e011      	b.n	8002874 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_FLASH_Lock+0x50>)
 8002852:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_FLASH_Lock+0x50>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_FLASH_Lock+0x50>)
 8002862:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	52002000 	.word	0x52002000

08002884 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800288e:	2304      	movs	r3, #4
 8002890:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8002896:	f7ff fddf 	bl	8002458 <HAL_GetTick>
 800289a:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d113      	bne.n	80028ca <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <FLASH_WaitForLastOperation+0x124>)
 80028a4:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80028a6:	e010      	b.n	80028ca <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d00c      	beq.n	80028ca <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028b0:	f7ff fdd2 	bl	8002458 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d302      	bcc.n	80028c6 <FLASH_WaitForLastOperation+0x42>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e06a      	b.n	80029a0 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4b37      	ldr	r3, [pc, #220]	; (80029ac <FLASH_WaitForLastOperation+0x128>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10a      	bne.n	80028ec <FLASH_WaitForLastOperation+0x68>
 80028d6:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4013      	ands	r3, r2
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e00c      	b.n	8002906 <FLASH_WaitForLastOperation+0x82>
 80028ec:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 80028ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80028f2:	43da      	mvns	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4013      	ands	r3, r2
 80028f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ce      	bne.n	80028a8 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <FLASH_WaitForLastOperation+0x130>)
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	e007      	b.n	800292c <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 800291e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <FLASH_WaitForLastOperation+0x130>)
 8002924:	4013      	ands	r3, r2
 8002926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800292a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d017      	beq.n	8002966 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <FLASH_WaitForLastOperation+0x134>)
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <FLASH_WaitForLastOperation+0x134>)
 8002940:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <FLASH_WaitForLastOperation+0x128>)
 8002946:	4013      	ands	r3, r2
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	429a      	cmp	r2, r3
 800294c:	d103      	bne.n	8002956 <FLASH_WaitForLastOperation+0xd2>
 800294e:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	6153      	str	r3, [r2, #20]
 8002954:	e005      	b.n	8002962 <FLASH_WaitForLastOperation+0xde>
 8002956:	4a16      	ldr	r2, [pc, #88]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800295e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e01c      	b.n	80029a0 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d10b      	bne.n	8002984 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d111      	bne.n	800299e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 800297c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002980:	615a      	str	r2, [r3, #20]
 8002982:	e00c      	b.n	800299e <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 8002986:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d104      	bne.n	800299e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <FLASH_WaitForLastOperation+0x12c>)
 8002996:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800299a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	80000004 	.word	0x80000004
 80029ac:	1fef000f 	.word	0x1fef000f
 80029b0:	52002000 	.word	0x52002000
 80029b4:	17ee0000 	.word	0x17ee0000
 80029b8:	24000200 	.word	0x24000200

080029bc <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029ca:	4b5e      	ldr	r3, [pc, #376]	; (8002b44 <HAL_FLASHEx_Erase+0x188>)
 80029cc:	7d1b      	ldrb	r3, [r3, #20]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_FLASHEx_Erase+0x1a>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e0b2      	b.n	8002b3c <HAL_FLASHEx_Erase+0x180>
 80029d6:	4b5b      	ldr	r3, [pc, #364]	; (8002b44 <HAL_FLASHEx_Erase+0x188>)
 80029d8:	2201      	movs	r2, #1
 80029da:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_FLASHEx_Erase+0x188>)
 80029de:	2200      	movs	r2, #0
 80029e0:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80029ee:	2101      	movs	r1, #1
 80029f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029f4:	f7ff ff46 	bl	8002884 <FLASH_WaitForLastOperation>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002a0e:	2102      	movs	r1, #2
 8002a10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a14:	f7ff ff36 	bl	8002884 <FLASH_WaitForLastOperation>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f040 8085 	bne.w	8002b34 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d136      	bne.n	8002aa0 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f000 f887 	bl	8002b50 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00f      	beq.n	8002a6e <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8002a4e:	2101      	movs	r1, #1
 8002a50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a54:	f7ff ff16 	bl	8002884 <FLASH_WaitForLastOperation>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8002a62:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <HAL_FLASHEx_Erase+0x18c>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	4a38      	ldr	r2, [pc, #224]	; (8002b48 <HAL_FLASHEx_Erase+0x18c>)
 8002a68:	f023 0308 	bic.w	r3, r3, #8
 8002a6c:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d05c      	beq.n	8002b34 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a80:	f7ff ff00 	bl	8002884 <FLASH_WaitForLastOperation>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8002a8e:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_FLASHEx_Erase+0x18c>)
 8002a90:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002a94:	4a2c      	ldr	r2, [pc, #176]	; (8002b48 <HAL_FLASHEx_Erase+0x18c>)
 8002a96:	f023 0308 	bic.w	r3, r3, #8
 8002a9a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8002a9e:	e049      	b.n	8002b34 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	e039      	b.n	8002b24 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68b8      	ldr	r0, [r7, #8]
 8002abc:	f000 f8b2 	bl	8002c24 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00c      	beq.n	8002ae6 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8002acc:	2101      	movs	r1, #1
 8002ace:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ad2:	f7ff fed7 	bl	8002884 <FLASH_WaitForLastOperation>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_FLASHEx_Erase+0x18c>)
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	491a      	ldr	r1, [pc, #104]	; (8002b48 <HAL_FLASHEx_Erase+0x18c>)
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <HAL_FLASHEx_Erase+0x190>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8002af2:	2102      	movs	r1, #2
 8002af4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002af8:	f7ff fec4 	bl	8002884 <FLASH_WaitForLastOperation>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_FLASHEx_Erase+0x18c>)
 8002b02:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002b06:	4910      	ldr	r1, [pc, #64]	; (8002b48 <HAL_FLASHEx_Erase+0x18c>)
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_FLASHEx_Erase+0x190>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	601a      	str	r2, [r3, #0]
          break;
 8002b1c:	e00a      	b.n	8002b34 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d3bd      	bcc.n	8002ab0 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_FLASHEx_Erase+0x188>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	751a      	strb	r2, [r3, #20]

  return status;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	24000200 	.word	0x24000200
 8002b48:	52002000 	.word	0x52002000
 8002b4c:	fffff8fb 	.word	0xfffff8fb

08002b50 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d122      	bne.n	8002baa <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002b64:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a2d      	ldr	r2, [pc, #180]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002b6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b6e:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002b72:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002b76:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002b78:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b7c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	4926      	ldr	r1, [pc, #152]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002b8e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002b92:	4923      	ldr	r1, [pc, #140]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8002b9c:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002ba2:	f043 0310 	orr.w	r3, r3, #16
 8002ba6:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8002ba8:	e033      	b.n	8002c12 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d011      	beq.n	8002bd8 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002bba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bbe:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8002bc0:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	4916      	ldr	r1, [pc, #88]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002bd2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002bd6:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d017      	beq.n	8002c12 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002be4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002bea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bee:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002bf4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002bf8:	4909      	ldr	r1, [pc, #36]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002c04:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002c08:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <FLASH_MassErase+0xd0>)
 8002c0a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002c0e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	52002000 	.word	0x52002000

08002c24 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <FLASH_Erase_Sector+0x78>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <FLASH_Erase_Sector+0x78>)
 8002c40:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8002c44:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <FLASH_Erase_Sector+0x78>)
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0219      	lsls	r1, r3, #8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	4313      	orrs	r3, r2
 8002c54:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <FLASH_Erase_Sector+0x78>)
 8002c56:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8002c5a:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d014      	beq.n	8002c90 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <FLASH_Erase_Sector+0x78>)
 8002c68:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002c6c:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <FLASH_Erase_Sector+0x78>)
 8002c6e:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8002c72:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <FLASH_Erase_Sector+0x78>)
 8002c78:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	0219      	lsls	r1, r3, #8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	430b      	orrs	r3, r1
 8002c84:	4313      	orrs	r3, r2
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <FLASH_Erase_Sector+0x78>)
 8002c88:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8002c8c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	52002000 	.word	0x52002000

08002ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cae:	4b89      	ldr	r3, [pc, #548]	; (8002ed4 <HAL_GPIO_Init+0x234>)
 8002cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cb2:	e194      	b.n	8002fde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8186 	beq.w	8002fd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d005      	beq.n	8002ce4 <HAL_GPIO_Init+0x44>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d130      	bne.n	8002d46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f003 0201 	and.w	r2, r3, #1
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d017      	beq.n	8002d82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d123      	bne.n	8002dd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	08da      	lsrs	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3208      	adds	r2, #8
 8002d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	220f      	movs	r2, #15
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	08da      	lsrs	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3208      	adds	r2, #8
 8002dd0:	69b9      	ldr	r1, [r7, #24]
 8002dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2203      	movs	r2, #3
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0203 	and.w	r2, r3, #3
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80e0 	beq.w	8002fd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e18:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <HAL_GPIO_Init+0x238>)
 8002e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <HAL_GPIO_Init+0x238>)
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_GPIO_Init+0x238>)
 8002e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e36:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_GPIO_Init+0x23c>)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <HAL_GPIO_Init+0x240>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d052      	beq.n	8002f08 <HAL_GPIO_Init+0x268>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <HAL_GPIO_Init+0x244>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d031      	beq.n	8002ece <HAL_GPIO_Init+0x22e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <HAL_GPIO_Init+0x248>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d02b      	beq.n	8002eca <HAL_GPIO_Init+0x22a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_GPIO_Init+0x24c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d025      	beq.n	8002ec6 <HAL_GPIO_Init+0x226>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ef0 <HAL_GPIO_Init+0x250>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01f      	beq.n	8002ec2 <HAL_GPIO_Init+0x222>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <HAL_GPIO_Init+0x254>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d019      	beq.n	8002ebe <HAL_GPIO_Init+0x21e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <HAL_GPIO_Init+0x258>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_GPIO_Init+0x21a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_GPIO_Init+0x25c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00d      	beq.n	8002eb6 <HAL_GPIO_Init+0x216>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <HAL_GPIO_Init+0x260>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d007      	beq.n	8002eb2 <HAL_GPIO_Init+0x212>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_GPIO_Init+0x264>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_GPIO_Init+0x20e>
 8002eaa:	2309      	movs	r3, #9
 8002eac:	e02d      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002eae:	230a      	movs	r3, #10
 8002eb0:	e02b      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	e029      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002eb6:	2307      	movs	r3, #7
 8002eb8:	e027      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002eba:	2306      	movs	r3, #6
 8002ebc:	e025      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	e023      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e021      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e01f      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e01d      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e01b      	b.n	8002f0a <HAL_GPIO_Init+0x26a>
 8002ed2:	bf00      	nop
 8002ed4:	58000080 	.word	0x58000080
 8002ed8:	58024400 	.word	0x58024400
 8002edc:	58000400 	.word	0x58000400
 8002ee0:	58020000 	.word	0x58020000
 8002ee4:	58020400 	.word	0x58020400
 8002ee8:	58020800 	.word	0x58020800
 8002eec:	58020c00 	.word	0x58020c00
 8002ef0:	58021000 	.word	0x58021000
 8002ef4:	58021400 	.word	0x58021400
 8002ef8:	58021800 	.word	0x58021800
 8002efc:	58021c00 	.word	0x58021c00
 8002f00:	58022000 	.word	0x58022000
 8002f04:	58022400 	.word	0x58022400
 8002f08:	2300      	movs	r3, #0
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f1a:	4938      	ldr	r1, [pc, #224]	; (8002ffc <HAL_GPIO_Init+0x35c>)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f ae63 	bne.w	8002cb4 <HAL_GPIO_Init+0x14>
  }
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	3724      	adds	r7, #36	; 0x24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	58000400 	.word	0x58000400

08003000 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800300e:	4b75      	ldr	r3, [pc, #468]	; (80031e4 <HAL_GPIO_DeInit+0x1e4>)
 8003010:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8003012:	e0d9      	b.n	80031c8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003014:	2201      	movs	r2, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	4013      	ands	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80cc 	beq.w	80031c2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800302a:	4a6f      	ldr	r2, [pc, #444]	; (80031e8 <HAL_GPIO_DeInit+0x1e8>)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003036:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	220f      	movs	r2, #15
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a67      	ldr	r2, [pc, #412]	; (80031ec <HAL_GPIO_DeInit+0x1ec>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d037      	beq.n	80030c4 <HAL_GPIO_DeInit+0xc4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a66      	ldr	r2, [pc, #408]	; (80031f0 <HAL_GPIO_DeInit+0x1f0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d031      	beq.n	80030c0 <HAL_GPIO_DeInit+0xc0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a65      	ldr	r2, [pc, #404]	; (80031f4 <HAL_GPIO_DeInit+0x1f4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02b      	beq.n	80030bc <HAL_GPIO_DeInit+0xbc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a64      	ldr	r2, [pc, #400]	; (80031f8 <HAL_GPIO_DeInit+0x1f8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d025      	beq.n	80030b8 <HAL_GPIO_DeInit+0xb8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a63      	ldr	r2, [pc, #396]	; (80031fc <HAL_GPIO_DeInit+0x1fc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d01f      	beq.n	80030b4 <HAL_GPIO_DeInit+0xb4>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a62      	ldr	r2, [pc, #392]	; (8003200 <HAL_GPIO_DeInit+0x200>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d019      	beq.n	80030b0 <HAL_GPIO_DeInit+0xb0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a61      	ldr	r2, [pc, #388]	; (8003204 <HAL_GPIO_DeInit+0x204>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <HAL_GPIO_DeInit+0xac>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a60      	ldr	r2, [pc, #384]	; (8003208 <HAL_GPIO_DeInit+0x208>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00d      	beq.n	80030a8 <HAL_GPIO_DeInit+0xa8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a5f      	ldr	r2, [pc, #380]	; (800320c <HAL_GPIO_DeInit+0x20c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <HAL_GPIO_DeInit+0xa4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a5e      	ldr	r2, [pc, #376]	; (8003210 <HAL_GPIO_DeInit+0x210>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_GPIO_DeInit+0xa0>
 800309c:	2309      	movs	r3, #9
 800309e:	e012      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030a0:	230a      	movs	r3, #10
 80030a2:	e010      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030a4:	2308      	movs	r3, #8
 80030a6:	e00e      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030a8:	2307      	movs	r3, #7
 80030aa:	e00c      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030ac:	2306      	movs	r3, #6
 80030ae:	e00a      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030b0:	2305      	movs	r3, #5
 80030b2:	e008      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030b4:	2304      	movs	r3, #4
 80030b6:	e006      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030b8:	2303      	movs	r3, #3
 80030ba:	e004      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030bc:	2302      	movs	r3, #2
 80030be:	e002      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_GPIO_DeInit+0xc6>
 80030c4:	2300      	movs	r3, #0
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	f002 0203 	and.w	r2, r2, #3
 80030cc:	0092      	lsls	r2, r2, #2
 80030ce:	4093      	lsls	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d136      	bne.n	8003144 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	401a      	ands	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	401a      	ands	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003100:	4013      	ands	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	43db      	mvns	r3, r3
 800310e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003112:	4013      	ands	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003126:	4a30      	ldr	r2, [pc, #192]	; (80031e8 <HAL_GPIO_DeInit+0x1e8>)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3302      	adds	r3, #2
 800312e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	43da      	mvns	r2, r3
 8003136:	482c      	ldr	r0, [pc, #176]	; (80031e8 <HAL_GPIO_DeInit+0x1e8>)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	400a      	ands	r2, r1
 800313e:	3302      	adds	r3, #2
 8003140:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2103      	movs	r1, #3
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	08da      	lsrs	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3208      	adds	r2, #8
 8003160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	08d2      	lsrs	r2, r2, #3
 8003178:	4019      	ands	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3208      	adds	r2, #8
 800317e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2103      	movs	r1, #3
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	401a      	ands	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	2101      	movs	r1, #1
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2103      	movs	r1, #3
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	401a      	ands	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	3301      	adds	r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f af1f 	bne.w	8003014 <HAL_GPIO_DeInit+0x14>
  }
}
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	58000080 	.word	0x58000080
 80031e8:	58000400 	.word	0x58000400
 80031ec:	58020000 	.word	0x58020000
 80031f0:	58020400 	.word	0x58020400
 80031f4:	58020800 	.word	0x58020800
 80031f8:	58020c00 	.word	0x58020c00
 80031fc:	58021000 	.word	0x58021000
 8003200:	58021400 	.word	0x58021400
 8003204:	58021800 	.word	0x58021800
 8003208:	58021c00 	.word	0x58021c00
 800320c:	58022000 	.word	0x58022000
 8003210:	58022400 	.word	0x58022400

08003214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	887b      	ldrh	r3, [r7, #2]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e001      	b.n	8003236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
 8003250:	4613      	mov	r3, r2
 8003252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003254:	787b      	ldrb	r3, [r7, #1]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003260:	e003      	b.n	800326a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	041a      	lsls	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	619a      	str	r2, [r3, #24]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003280:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <HAL_HSEM_FastTake+0x2c>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3320      	adds	r3, #32
 8003286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_HSEM_FastTake+0x30>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	58026400 	.word	0x58026400
 80032a8:	80000300 	.word	0x80000300

080032ac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80032b6:	4906      	ldr	r1, [pc, #24]	; (80032d0 <HAL_HSEM_Release+0x24>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	58026400 	.word	0x58026400

080032d4 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 80032dc:	f7ff f8bc 	bl	8002458 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e04a      	b.n	8003382 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d008      	beq.n	800330a <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e03b      	b.n	8003382 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8003318:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800332a:	e016      	b.n	800335a <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800332c:	f7ff f894 	bl	8002458 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b05      	cmp	r3, #5
 8003338:	d90f      	bls.n	800335a <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800333e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2203      	movs	r2, #3
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e013      	b.n	8003382 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e1      	bne.n	800332c <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	221f      	movs	r2, #31
 800336e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003394:	4b29      	ldr	r3, [pc, #164]	; (800343c <HAL_PWREx_ConfigSupply+0xb0>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	2b06      	cmp	r3, #6
 800339e:	d00a      	beq.n	80033b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033a0:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_PWREx_ConfigSupply+0xb0>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d001      	beq.n	80033b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e040      	b.n	8003434 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e03e      	b.n	8003434 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80033b6:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_PWREx_ConfigSupply+0xb0>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80033be:	491f      	ldr	r1, [pc, #124]	; (800343c <HAL_PWREx_ConfigSupply+0xb0>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80033c6:	f7ff f847 	bl	8002458 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033cc:	e009      	b.n	80033e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80033ce:	f7ff f843 	bl	8002458 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033dc:	d901      	bls.n	80033e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e028      	b.n	8003434 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_PWREx_ConfigSupply+0xb0>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ee:	d1ee      	bne.n	80033ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b1e      	cmp	r3, #30
 80033f4:	d008      	beq.n	8003408 <HAL_PWREx_ConfigSupply+0x7c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b2e      	cmp	r3, #46	; 0x2e
 80033fa:	d005      	beq.n	8003408 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b1d      	cmp	r3, #29
 8003400:	d002      	beq.n	8003408 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b2d      	cmp	r3, #45	; 0x2d
 8003406:	d114      	bne.n	8003432 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003408:	f7ff f826 	bl	8002458 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800340e:	e009      	b.n	8003424 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003410:	f7ff f822 	bl	8002458 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800341e:	d901      	bls.n	8003424 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e007      	b.n	8003434 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_PWREx_ConfigSupply+0xb0>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d1ee      	bne.n	8003410 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	58024800 	.word	0x58024800

08003440 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af02      	add	r7, sp, #8
 8003446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003448:	f7ff f806 	bl	8002458 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e05f      	b.n	8003518 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fe f84b 	bl	8001500 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800346a:	f241 3188 	movw	r1, #5000	; 0x1388
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 faf7 	bl	8003a62 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	3b01      	subs	r3, #1
 8003484:	021a      	lsls	r2, r3, #8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	2120      	movs	r1, #32
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 faef 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80034a4:	7afb      	ldrb	r3, [r7, #11]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d135      	bne.n	8003516 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_QSPI_Init+0xe0>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6852      	ldr	r2, [r2, #4]
 80034b8:	0611      	lsls	r1, r2, #24
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68d2      	ldr	r2, [r2, #12]
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	69d2      	ldr	r2, [r2, #28]
 80034c4:	4311      	orrs	r1, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6a12      	ldr	r2, [r2, #32]
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4b12      	ldr	r3, [pc, #72]	; (8003524 <HAL_QSPI_Init+0xe4>)
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6912      	ldr	r2, [r2, #16]
 80034e2:	0411      	lsls	r1, r2, #16
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6952      	ldr	r2, [r2, #20]
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6992      	ldr	r2, [r2, #24]
 80034ee:	4311      	orrs	r1, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003516:	7afb      	ldrb	r3, [r7, #11]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	00ffff2f 	.word	0x00ffff2f
 8003524:	ffe0f8fe 	.word	0xffe0f8fe

08003528 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e012      	b.n	8003560 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe f906 	bl	800175c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003574:	f7fe ff70 	bl	8002458 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_QSPI_Command+0x22>
 8003586:	2302      	movs	r3, #2
 8003588:	e048      	b.n	800361c <HAL_QSPI_Command+0xb4>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d137      	bne.n	800360e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2200      	movs	r2, #0
 80035b4:	2120      	movs	r1, #32
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fa61 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d125      	bne.n	8003612 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80035c6:	2200      	movs	r2, #0
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fa8e 	bl	8003aec <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d115      	bne.n	8003604 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2201      	movs	r2, #1
 80035e0:	2102      	movs	r1, #2
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fa4b 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2202      	movs	r2, #2
 80035f8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003602:	e006      	b.n	8003612 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800360c:	e001      	b.n	8003612 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800360e:	2302      	movs	r3, #2
 8003610:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7fe ff10 	bl	8002458 <HAL_GetTick>
 8003638:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3320      	adds	r3, #32
 8003640:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_QSPI_Transmit+0x2e>
 800364e:	2302      	movs	r3, #2
 8003650:	e076      	b.n	8003740 <HAL_QSPI_Transmit+0x11c>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d165      	bne.n	8003732 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d056      	beq.n	8003720 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2212      	movs	r2, #18
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80036a6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80036a8:	e01b      	b.n	80036e2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2201      	movs	r2, #1
 80036b2:	2104      	movs	r1, #4
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f9e2 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80036be:	7ffb      	ldrb	r3, [r7, #31]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d113      	bne.n	80036ec <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	1e5a      	subs	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1df      	bne.n	80036aa <HAL_QSPI_Transmit+0x86>
 80036ea:	e000      	b.n	80036ee <HAL_QSPI_Transmit+0xca>
          break;
 80036ec:	bf00      	nop
      }

      if (status == HAL_OK)
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d110      	bne.n	8003716 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2201      	movs	r2, #1
 80036fc:	2102      	movs	r1, #2
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f9bd 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003708:	7ffb      	ldrb	r3, [r7, #31]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2202      	movs	r2, #2
 8003714:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800371e:	e00a      	b.n	8003736 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	f043 0208 	orr.w	r2, r3, #8
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e001      	b.n	8003736 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003732:	2302      	movs	r3, #2
 8003734:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800373e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7fe fe7e 	bl	8002458 <HAL_GetTick>
 800375c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3320      	adds	r3, #32
 800376c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_QSPI_Receive+0x36>
 800377a:	2302      	movs	r3, #2
 800377c:	e07d      	b.n	800387a <HAL_QSPI_Receive+0x132>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d16c      	bne.n	800386c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d05d      	beq.n	800385a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2222      	movs	r2, #34	; 0x22
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037d6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80037e0:	e01c      	b.n	800381c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2201      	movs	r2, #1
 80037ea:	2106      	movs	r1, #6
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f946 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80037f6:	7ffb      	ldrb	r3, [r7, #31]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d114      	bne.n	8003826 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	1e5a      	subs	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1de      	bne.n	80037e2 <HAL_QSPI_Receive+0x9a>
 8003824:	e000      	b.n	8003828 <HAL_QSPI_Receive+0xe0>
          break;
 8003826:	bf00      	nop
      }

      if (status == HAL_OK)
 8003828:	7ffb      	ldrb	r3, [r7, #31]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d110      	bne.n	8003850 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2201      	movs	r2, #1
 8003836:	2102      	movs	r1, #2
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f920 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003842:	7ffb      	ldrb	r3, [r7, #31]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2202      	movs	r2, #2
 800384e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003858:	e00a      	b.n	8003870 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f043 0208 	orr.w	r2, r3, #8
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e001      	b.n	8003870 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003878:	7ffb      	ldrb	r3, [r7, #31]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b088      	sub	sp, #32
 8003886:	af02      	add	r7, sp, #8
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7fe fde2 	bl	8002458 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_QSPI_AutoPolling+0x24>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e060      	b.n	8003968 <HAL_QSPI_AutoPolling+0xe6>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d14f      	bne.n	800395a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2242      	movs	r2, #66	; 0x42
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2200      	movs	r2, #0
 80038d0:	2120      	movs	r1, #32
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f8d3 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d13d      	bne.n	800395e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6852      	ldr	r2, [r2, #4]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6892      	ldr	r2, [r2, #8]
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	431a      	orrs	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003918:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f8df 	bl	8003aec <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2201      	movs	r2, #1
 8003936:	2108      	movs	r1, #8
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f8a0 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2208      	movs	r2, #8
 800394e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003958:	e001      	b.n	800395e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800397c:	f7fe fd6c 	bl	8002458 <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d062      	beq.n	8003a58 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d017      	beq.n	80039d8 <HAL_QSPI_Abort+0x68>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0204 	bic.w	r2, r2, #4
 80039b6:	601a      	str	r2, [r3, #0]

      /* Abort MDMA */
      status = HAL_MDMA_Abort(hqspi->hmdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff fc89 	bl	80032d4 <HAL_MDMA_Abort>
 80039c2:	4603      	mov	r3, r0
 80039c4:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d034      	beq.n	8003a50 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0202 	orr.w	r2, r2, #2
 80039f4:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2201      	movs	r2, #1
 8003a00:	2102      	movs	r1, #2
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f83b 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10e      	bne.n	8003a30 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2202      	movs	r2, #2
 8003a18:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2200      	movs	r2, #0
 8003a24:	2120      	movs	r1, #32
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f829 	bl	8003a7e <QSPI_WaitFlagStateUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d110      	bne.n	8003a58 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003a44:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a4e:	e003      	b.n	8003a58 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a8e:	e01a      	b.n	8003ac6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d016      	beq.n	8003ac6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a98:	f7fe fcde 	bl	8002458 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d302      	bcc.n	8003aae <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00e      	b.n	8003ae4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d1d6      	bne.n	8003a90 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <QSPI_Config+0x28>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b06:	d005      	beq.n	8003b14 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3a01      	subs	r2, #1
 8003b12:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80b9 	beq.w	8003c90 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d05f      	beq.n	8003be6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	6892      	ldr	r2, [r2, #8]
 8003b2e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d031      	beq.n	8003b9c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	431a      	orrs	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	431a      	orrs	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	049b      	lsls	r3, r3, #18
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	ea42 0103 	orr.w	r1, r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b8c:	f000 812e 	beq.w	8003dec <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	6852      	ldr	r2, [r2, #4]
 8003b98:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003b9a:	e127      	b.n	8003dec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	049b      	lsls	r3, r3, #18
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	ea42 0103 	orr.w	r1, r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	615a      	str	r2, [r3, #20]
}
 8003be4:	e102      	b.n	8003dec <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d02e      	beq.n	8003c4c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	049b      	lsls	r3, r3, #18
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	ea42 0103 	orr.w	r1, r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c3c:	f000 80d6 	beq.w	8003dec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	6852      	ldr	r2, [r2, #4]
 8003c48:	619a      	str	r2, [r3, #24]
}
 8003c4a:	e0cf      	b.n	8003dec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	049b      	lsls	r3, r3, #18
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	ea42 0103 	orr.w	r1, r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	615a      	str	r2, [r3, #20]
}
 8003c8e:	e0ad      	b.n	8003dec <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d058      	beq.n	8003d4a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	6892      	ldr	r2, [r2, #8]
 8003ca0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d02d      	beq.n	8003d06 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	049b      	lsls	r3, r3, #18
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	ea42 0103 	orr.w	r1, r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cf8:	d078      	beq.n	8003dec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	619a      	str	r2, [r3, #24]
}
 8003d04:	e072      	b.n	8003dec <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	049b      	lsls	r3, r3, #18
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	ea42 0103 	orr.w	r1, r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	615a      	str	r2, [r3, #20]
}
 8003d48:	e050      	b.n	8003dec <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d02a      	beq.n	8003da8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	049b      	lsls	r3, r3, #18
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	ea42 0103 	orr.w	r1, r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d9a:	d027      	beq.n	8003dec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	6852      	ldr	r2, [r2, #4]
 8003da4:	619a      	str	r2, [r3, #24]
}
 8003da6:	e021      	b.n	8003dec <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01d      	beq.n	8003dec <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	049b      	lsls	r3, r3, #18
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	ea42 0103 	orr.w	r1, r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	615a      	str	r2, [r3, #20]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	; 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f000 bc48 	b.w	800469c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8088 	beq.w	8003f2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1a:	4b99      	ldr	r3, [pc, #612]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e24:	4b96      	ldr	r3, [pc, #600]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d007      	beq.n	8003e40 <HAL_RCC_OscConfig+0x48>
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	2b18      	cmp	r3, #24
 8003e34:	d111      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62>
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d10c      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	4b8f      	ldr	r3, [pc, #572]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d06d      	beq.n	8003f28 <HAL_RCC_OscConfig+0x130>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d169      	bne.n	8003f28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f000 bc21 	b.w	800469c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x7a>
 8003e64:	4b86      	ldr	r3, [pc, #536]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a85      	ldr	r2, [pc, #532]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e02e      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x9c>
 8003e7a:	4b81      	ldr	r3, [pc, #516]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a80      	ldr	r2, [pc, #512]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b7e      	ldr	r3, [pc, #504]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a7d      	ldr	r2, [pc, #500]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e01d      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	4b78      	ldr	r3, [pc, #480]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a77      	ldr	r2, [pc, #476]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	4b75      	ldr	r3, [pc, #468]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a74      	ldr	r2, [pc, #464]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd8>
 8003eb8:	4b71      	ldr	r3, [pc, #452]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a70      	ldr	r2, [pc, #448]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b6e      	ldr	r3, [pc, #440]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6d      	ldr	r2, [pc, #436]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fabe 	bl	8002458 <HAL_GetTick>
 8003edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee0:	f7fe faba 	bl	8002458 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e3d4      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ef2:	4b63      	ldr	r3, [pc, #396]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe8>
 8003efe:	e014      	b.n	8003f2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe faaa 	bl	8002458 <HAL_GetTick>
 8003f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f08:	f7fe faa6 	bl	8002458 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e3c0      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f1a:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x110>
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80ca 	beq.w	80040cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f38:	4b51      	ldr	r3, [pc, #324]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f42:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_RCC_OscConfig+0x166>
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	2b18      	cmp	r3, #24
 8003f52:	d156      	bne.n	8004002 <HAL_RCC_OscConfig+0x20a>
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d151      	bne.n	8004002 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f5e:	4b48      	ldr	r3, [pc, #288]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_RCC_OscConfig+0x17e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e392      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f76:	4b42      	ldr	r3, [pc, #264]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 0219 	bic.w	r2, r3, #25
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	493f      	ldr	r1, [pc, #252]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe fa66 	bl	8002458 <HAL_GetTick>
 8003f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fe fa62 	bl	8002458 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e37c      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fae:	f7fe fa83 	bl	80024b8 <HAL_GetREVID>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d817      	bhi.n	8003fec <HAL_RCC_OscConfig+0x1f4>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d108      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x1de>
 8003fc4:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd4:	e07a      	b.n	80040cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	031b      	lsls	r3, r3, #12
 8003fe4:	4926      	ldr	r1, [pc, #152]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fea:	e06f      	b.n	80040cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b24      	ldr	r3, [pc, #144]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4921      	ldr	r1, [pc, #132]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004000:	e064      	b.n	80040cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d047      	beq.n	800409a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800400a:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 0219 	bic.w	r2, r3, #25
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	491a      	ldr	r1, [pc, #104]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe fa1c 	bl	8002458 <HAL_GetTick>
 8004020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004024:	f7fe fa18 	bl	8002458 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e332      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	f7fe fa39 	bl	80024b8 <HAL_GetREVID>
 8004046:	4603      	mov	r3, r0
 8004048:	f241 0203 	movw	r2, #4099	; 0x1003
 800404c:	4293      	cmp	r3, r2
 800404e:	d819      	bhi.n	8004084 <HAL_RCC_OscConfig+0x28c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d108      	bne.n	800406a <HAL_RCC_OscConfig+0x272>
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004060:	4a07      	ldr	r2, [pc, #28]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 8004062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004066:	6053      	str	r3, [r2, #4]
 8004068:	e030      	b.n	80040cc <HAL_RCC_OscConfig+0x2d4>
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	031b      	lsls	r3, r3, #12
 8004078:	4901      	ldr	r1, [pc, #4]	; (8004080 <HAL_RCC_OscConfig+0x288>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
 800407e:	e025      	b.n	80040cc <HAL_RCC_OscConfig+0x2d4>
 8004080:	58024400 	.word	0x58024400
 8004084:	4b9a      	ldr	r3, [pc, #616]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	4997      	ldr	r1, [pc, #604]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
 8004098:	e018      	b.n	80040cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409a:	4b95      	ldr	r3, [pc, #596]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a94      	ldr	r2, [pc, #592]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fe f9d7 	bl	8002458 <HAL_GetTick>
 80040aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fe f9d3 	bl	8002458 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e2ed      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040c0:	4b8b      	ldr	r3, [pc, #556]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80a9 	beq.w	800422c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040da:	4b85      	ldr	r3, [pc, #532]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040e4:	4b82      	ldr	r3, [pc, #520]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d007      	beq.n	8004100 <HAL_RCC_OscConfig+0x308>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b18      	cmp	r3, #24
 80040f4:	d13a      	bne.n	800416c <HAL_RCC_OscConfig+0x374>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d135      	bne.n	800416c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004100:	4b7b      	ldr	r3, [pc, #492]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_OscConfig+0x320>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2b80      	cmp	r3, #128	; 0x80
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e2c1      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004118:	f7fe f9ce 	bl	80024b8 <HAL_GetREVID>
 800411c:	4603      	mov	r3, r0
 800411e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004122:	4293      	cmp	r3, r2
 8004124:	d817      	bhi.n	8004156 <HAL_RCC_OscConfig+0x35e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	2b20      	cmp	r3, #32
 800412c:	d108      	bne.n	8004140 <HAL_RCC_OscConfig+0x348>
 800412e:	4b70      	ldr	r3, [pc, #448]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004136:	4a6e      	ldr	r2, [pc, #440]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800413c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800413e:	e075      	b.n	800422c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004140:	4b6b      	ldr	r3, [pc, #428]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	069b      	lsls	r3, r3, #26
 800414e:	4968      	ldr	r1, [pc, #416]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004154:	e06a      	b.n	800422c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004156:	4b66      	ldr	r3, [pc, #408]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	4962      	ldr	r1, [pc, #392]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800416a:	e05f      	b.n	800422c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d042      	beq.n	80041fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004174:	4b5e      	ldr	r3, [pc, #376]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5d      	ldr	r2, [pc, #372]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 800417a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe f96a 	bl	8002458 <HAL_GetTick>
 8004184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004188:	f7fe f966 	bl	8002458 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e280      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800419a:	4b55      	ldr	r3, [pc, #340]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041a6:	f7fe f987 	bl	80024b8 <HAL_GetREVID>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d817      	bhi.n	80041e4 <HAL_RCC_OscConfig+0x3ec>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d108      	bne.n	80041ce <HAL_RCC_OscConfig+0x3d6>
 80041bc:	4b4c      	ldr	r3, [pc, #304]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80041c4:	4a4a      	ldr	r2, [pc, #296]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80041c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ca:	6053      	str	r3, [r2, #4]
 80041cc:	e02e      	b.n	800422c <HAL_RCC_OscConfig+0x434>
 80041ce:	4b48      	ldr	r3, [pc, #288]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	069b      	lsls	r3, r3, #26
 80041dc:	4944      	ldr	r1, [pc, #272]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
 80041e2:	e023      	b.n	800422c <HAL_RCC_OscConfig+0x434>
 80041e4:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	493f      	ldr	r1, [pc, #252]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
 80041f8:	e018      	b.n	800422c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a3c      	ldr	r2, [pc, #240]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fe f927 	bl	8002458 <HAL_GetTick>
 800420a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800420e:	f7fe f923 	bl	8002458 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e23d      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004220:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f0      	bne.n	800420e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d036      	beq.n	80042a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d019      	beq.n	8004274 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004244:	4a2a      	ldr	r2, [pc, #168]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fe f904 	bl	8002458 <HAL_GetTick>
 8004250:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004254:	f7fe f900 	bl	8002458 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e21a      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004266:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x45c>
 8004272:	e018      	b.n	80042a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004274:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fe f8ea 	bl	8002458 <HAL_GetTick>
 8004284:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004288:	f7fe f8e6 	bl	8002458 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e200      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d039      	beq.n	8004326 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a0c      	ldr	r2, [pc, #48]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80042c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042c6:	f7fe f8c7 	bl	8002458 <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ce:	f7fe f8c3 	bl	8002458 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e1dd      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <HAL_RCC_OscConfig+0x4f8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x4d6>
 80042ec:	e01b      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
 80042ee:	bf00      	nop
 80042f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042f4:	4b9b      	ldr	r3, [pc, #620]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a9a      	ldr	r2, [pc, #616]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80042fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004300:	f7fe f8aa 	bl	8002458 <HAL_GetTick>
 8004304:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004308:	f7fe f8a6 	bl	8002458 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1c0      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800431a:	4b92      	ldr	r3, [pc, #584]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8081 	beq.w	8004436 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004334:	4b8c      	ldr	r3, [pc, #560]	; (8004568 <HAL_RCC_OscConfig+0x770>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a8b      	ldr	r2, [pc, #556]	; (8004568 <HAL_RCC_OscConfig+0x770>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004340:	f7fe f88a 	bl	8002458 <HAL_GetTick>
 8004344:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004348:	f7fe f886 	bl	8002458 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1a0      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435a:	4b83      	ldr	r3, [pc, #524]	; (8004568 <HAL_RCC_OscConfig+0x770>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x584>
 800436e:	4b7d      	ldr	r3, [pc, #500]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a7c      	ldr	r2, [pc, #496]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
 800437a:	e02d      	b.n	80043d8 <HAL_RCC_OscConfig+0x5e0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10c      	bne.n	800439e <HAL_RCC_OscConfig+0x5a6>
 8004384:	4b77      	ldr	r3, [pc, #476]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a76      	ldr	r2, [pc, #472]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
 8004390:	4b74      	ldr	r3, [pc, #464]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4a73      	ldr	r2, [pc, #460]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004396:	f023 0304 	bic.w	r3, r3, #4
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
 800439c:	e01c      	b.n	80043d8 <HAL_RCC_OscConfig+0x5e0>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b05      	cmp	r3, #5
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5c8>
 80043a6:	4b6f      	ldr	r3, [pc, #444]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	4a6e      	ldr	r2, [pc, #440]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	6713      	str	r3, [r2, #112]	; 0x70
 80043b2:	4b6c      	ldr	r3, [pc, #432]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a6b      	ldr	r2, [pc, #428]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0x5e0>
 80043c0:	4b68      	ldr	r3, [pc, #416]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	4a67      	ldr	r2, [pc, #412]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	6713      	str	r3, [r2, #112]	; 0x70
 80043cc:	4b65      	ldr	r3, [pc, #404]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	4a64      	ldr	r2, [pc, #400]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80043d2:	f023 0304 	bic.w	r3, r3, #4
 80043d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d015      	beq.n	800440c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fe f83a 	bl	8002458 <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fe f836 	bl	8002458 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e14e      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043fe:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ee      	beq.n	80043e8 <HAL_RCC_OscConfig+0x5f0>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fe f824 	bl	8002458 <HAL_GetTick>
 8004410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004412:	e00a      	b.n	800442a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004414:	f7fe f820 	bl	8002458 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e138      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800442a:	4b4e      	ldr	r3, [pc, #312]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1ee      	bne.n	8004414 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 812d 	beq.w	800469a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004440:	4b48      	ldr	r3, [pc, #288]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004448:	2b18      	cmp	r3, #24
 800444a:	f000 80bd 	beq.w	80045c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b02      	cmp	r3, #2
 8004454:	f040 809e 	bne.w	8004594 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004458:	4b42      	ldr	r3, [pc, #264]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a41      	ldr	r2, [pc, #260]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800445e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fd fff8 	bl	8002458 <HAL_GetTick>
 8004468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446c:	f7fd fff4 	bl	8002458 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e10e      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800447e:	4b39      	ldr	r3, [pc, #228]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800448c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448e:	4b37      	ldr	r3, [pc, #220]	; (800456c <HAL_RCC_OscConfig+0x774>)
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800449a:	0112      	lsls	r2, r2, #4
 800449c:	430a      	orrs	r2, r1
 800449e:	4931      	ldr	r1, [pc, #196]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	628b      	str	r3, [r1, #40]	; 0x28
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	3b01      	subs	r3, #1
 80044aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	3b01      	subs	r3, #1
 80044b4:	025b      	lsls	r3, r3, #9
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	3b01      	subs	r3, #1
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	3b01      	subs	r3, #1
 80044ce:	061b      	lsls	r3, r3, #24
 80044d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044d4:	4923      	ldr	r1, [pc, #140]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80044da:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	4a21      	ldr	r2, [pc, #132]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80044e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ea:	4b21      	ldr	r3, [pc, #132]	; (8004570 <HAL_RCC_OscConfig+0x778>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044f2:	00d2      	lsls	r2, r2, #3
 80044f4:	491b      	ldr	r1, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044fa:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f023 020c 	bic.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	4917      	ldr	r1, [pc, #92]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800450c:	4b15      	ldr	r3, [pc, #84]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	f023 0202 	bic.w	r2, r3, #2
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004518:	4912      	ldr	r1, [pc, #72]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800451a:	4313      	orrs	r3, r2
 800451c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800451e:	4b11      	ldr	r3, [pc, #68]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452a:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 800453c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a04      	ldr	r2, [pc, #16]	; (8004564 <HAL_RCC_OscConfig+0x76c>)
 8004554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fd ff7d 	bl	8002458 <HAL_GetTick>
 800455e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004560:	e011      	b.n	8004586 <HAL_RCC_OscConfig+0x78e>
 8004562:	bf00      	nop
 8004564:	58024400 	.word	0x58024400
 8004568:	58024800 	.word	0x58024800
 800456c:	fffffc0c 	.word	0xfffffc0c
 8004570:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004574:	f7fd ff70 	bl	8002458 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e08a      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x77c>
 8004592:	e082      	b.n	800469a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004594:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a42      	ldr	r2, [pc, #264]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 800459a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800459e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fd ff5a 	bl	8002458 <HAL_GetTick>
 80045a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fd ff56 	bl	8002458 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e070      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ba:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x7b0>
 80045c6:	e068      	b.n	800469a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045c8:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045ce:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d031      	beq.n	8004640 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f003 0203 	and.w	r2, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d12a      	bne.n	8004640 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d122      	bne.n	8004640 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d11a      	bne.n	8004640 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	0a5b      	lsrs	r3, r3, #9
 800460e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d111      	bne.n	8004640 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d108      	bne.n	8004640 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	0e1b      	lsrs	r3, r3, #24
 8004632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e02b      	b.n	800469c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004644:	4b17      	ldr	r3, [pc, #92]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	08db      	lsrs	r3, r3, #3
 800464a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800464e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	d01f      	beq.n	800469a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004666:	f7fd fef7 	bl	8002458 <HAL_GetTick>
 800466a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800466c:	bf00      	nop
 800466e:	f7fd fef3 	bl	8002458 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	4293      	cmp	r3, r2
 8004678:	d0f9      	beq.n	800466e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 800467c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HAL_RCC_OscConfig+0x8b0>)
 8004680:	4013      	ands	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004686:	00d2      	lsls	r2, r2, #3
 8004688:	4906      	ldr	r1, [pc, #24]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 800468a:	4313      	orrs	r3, r2
 800468c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <HAL_RCC_OscConfig+0x8ac>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3730      	adds	r7, #48	; 0x30
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	58024400 	.word	0x58024400
 80046a8:	ffff0007 	.word	0xffff0007

080046ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e19c      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c0:	4b8a      	ldr	r3, [pc, #552]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d910      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b87      	ldr	r3, [pc, #540]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 020f 	bic.w	r2, r3, #15
 80046d6:	4985      	ldr	r1, [pc, #532]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b83      	ldr	r3, [pc, #524]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e184      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d010      	beq.n	800471e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	4b7b      	ldr	r3, [pc, #492]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004708:	429a      	cmp	r2, r3
 800470a:	d908      	bls.n	800471e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800470c:	4b78      	ldr	r3, [pc, #480]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	4975      	ldr	r1, [pc, #468]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800471a:	4313      	orrs	r3, r2
 800471c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d010      	beq.n	800474c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	4b70      	ldr	r3, [pc, #448]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004736:	429a      	cmp	r2, r3
 8004738:	d908      	bls.n	800474c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800473a:	4b6d      	ldr	r3, [pc, #436]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	496a      	ldr	r1, [pc, #424]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004748:	4313      	orrs	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d010      	beq.n	800477a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	4b64      	ldr	r3, [pc, #400]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004764:	429a      	cmp	r2, r3
 8004766:	d908      	bls.n	800477a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004768:	4b61      	ldr	r3, [pc, #388]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	495e      	ldr	r1, [pc, #376]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004776:	4313      	orrs	r3, r2
 8004778:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004792:	429a      	cmp	r2, r3
 8004794:	d908      	bls.n	80047a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004796:	4b56      	ldr	r3, [pc, #344]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4953      	ldr	r1, [pc, #332]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	4b4d      	ldr	r3, [pc, #308]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d908      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b4a      	ldr	r3, [pc, #296]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	f023 020f 	bic.w	r2, r3, #15
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4947      	ldr	r1, [pc, #284]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d055      	beq.n	800488e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047e2:	4b43      	ldr	r3, [pc, #268]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4940      	ldr	r1, [pc, #256]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d107      	bne.n	800480c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047fc:	4b3c      	ldr	r3, [pc, #240]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d121      	bne.n	800484c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0f6      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d107      	bne.n	8004824 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004814:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d115      	bne.n	800484c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0ea      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d107      	bne.n	800483c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800482c:	4b30      	ldr	r3, [pc, #192]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0de      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800483c:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0d6      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800484c:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f023 0207 	bic.w	r2, r3, #7
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4925      	ldr	r1, [pc, #148]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800485a:	4313      	orrs	r3, r2
 800485c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485e:	f7fd fdfb 	bl	8002458 <HAL_GetTick>
 8004862:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004864:	e00a      	b.n	800487c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004866:	f7fd fdf7 	bl	8002458 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0be      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487c:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	429a      	cmp	r2, r3
 800488c:	d1eb      	bne.n	8004866 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d010      	beq.n	80048bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d208      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048aa:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f023 020f 	bic.w	r2, r3, #15
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	490e      	ldr	r1, [pc, #56]	; (80048f0 <HAL_RCC_ClockConfig+0x244>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d214      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 020f 	bic.w	r2, r3, #15
 80048d2:	4906      	ldr	r1, [pc, #24]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b04      	ldr	r3, [pc, #16]	; (80048ec <HAL_RCC_ClockConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e086      	b.n	80049fa <HAL_RCC_ClockConfig+0x34e>
 80048ec:	52002000 	.word	0x52002000
 80048f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800490c:	429a      	cmp	r2, r3
 800490e:	d208      	bcs.n	8004922 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004910:	4b3c      	ldr	r3, [pc, #240]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	4939      	ldr	r1, [pc, #228]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800491e:	4313      	orrs	r3, r2
 8004920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d010      	beq.n	8004950 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	4b34      	ldr	r3, [pc, #208]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800493a:	429a      	cmp	r2, r3
 800493c:	d208      	bcs.n	8004950 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800493e:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	492e      	ldr	r1, [pc, #184]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800494c:	4313      	orrs	r3, r2
 800494e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d010      	beq.n	800497e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004968:	429a      	cmp	r2, r3
 800496a:	d208      	bcs.n	800497e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800496c:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	4922      	ldr	r1, [pc, #136]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800497a:	4313      	orrs	r3, r2
 800497c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004996:	429a      	cmp	r2, r3
 8004998:	d208      	bcs.n	80049ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800499a:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	4917      	ldr	r1, [pc, #92]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049ac:	f000 f89e 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	4912      	ldr	r1, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x35c>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
 80049c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_RCC_ClockConfig+0x358>)
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <HAL_RCC_ClockConfig+0x35c>)
 80049d4:	5cd3      	ldrb	r3, [r2, r3]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x360>)
 80049e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049e4:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x364>)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_ClockConfig+0x368>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fd fce8 	bl	80023c4 <HAL_InitTick>
 80049f4:	4603      	mov	r3, r0
 80049f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400
 8004a08:	0800df08 	.word	0x0800df08
 8004a0c:	24000004 	.word	0x24000004
 8004a10:	24000000 	.word	0x24000000
 8004a14:	24000008 	.word	0x24000008

08004a18 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08c      	sub	sp, #48	; 0x30
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d12a      	bne.n	8004a80 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8004a2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a30:	4a2b      	ldr	r2, [pc, #172]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a3a:	4b29      	ldr	r3, [pc, #164]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a52:	2303      	movs	r3, #3
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004a5e:	f107 031c 	add.w	r3, r7, #28
 8004a62:	4619      	mov	r1, r3
 8004a64:	481f      	ldr	r0, [pc, #124]	; (8004ae4 <HAL_RCC_MCOConfig+0xcc>)
 8004a66:	f7fe f91b 	bl	8002ca0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	430b      	orrs	r3, r1
 8004a78:	4919      	ldr	r1, [pc, #100]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004a7e:	e02a      	b.n	8004ad6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004a80:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a86:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004ab4:	f107 031c 	add.w	r3, r7, #28
 8004ab8:	4619      	mov	r1, r3
 8004aba:	480b      	ldr	r0, [pc, #44]	; (8004ae8 <HAL_RCC_MCOConfig+0xd0>)
 8004abc:	f7fe f8f0 	bl	8002ca0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	01d9      	lsls	r1, r3, #7
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <HAL_RCC_MCOConfig+0xc8>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	610b      	str	r3, [r1, #16]
}
 8004ad6:	bf00      	nop
 8004ad8:	3730      	adds	r7, #48	; 0x30
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	58020000 	.word	0x58020000
 8004ae8:	58020800 	.word	0x58020800

08004aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	; 0x24
 8004af0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af2:	4bb3      	ldr	r3, [pc, #716]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004afa:	2b18      	cmp	r3, #24
 8004afc:	f200 8155 	bhi.w	8004daa <HAL_RCC_GetSysClockFreq+0x2be>
 8004b00:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004b6d 	.word	0x08004b6d
 8004b0c:	08004dab 	.word	0x08004dab
 8004b10:	08004dab 	.word	0x08004dab
 8004b14:	08004dab 	.word	0x08004dab
 8004b18:	08004dab 	.word	0x08004dab
 8004b1c:	08004dab 	.word	0x08004dab
 8004b20:	08004dab 	.word	0x08004dab
 8004b24:	08004dab 	.word	0x08004dab
 8004b28:	08004b93 	.word	0x08004b93
 8004b2c:	08004dab 	.word	0x08004dab
 8004b30:	08004dab 	.word	0x08004dab
 8004b34:	08004dab 	.word	0x08004dab
 8004b38:	08004dab 	.word	0x08004dab
 8004b3c:	08004dab 	.word	0x08004dab
 8004b40:	08004dab 	.word	0x08004dab
 8004b44:	08004dab 	.word	0x08004dab
 8004b48:	08004b99 	.word	0x08004b99
 8004b4c:	08004dab 	.word	0x08004dab
 8004b50:	08004dab 	.word	0x08004dab
 8004b54:	08004dab 	.word	0x08004dab
 8004b58:	08004dab 	.word	0x08004dab
 8004b5c:	08004dab 	.word	0x08004dab
 8004b60:	08004dab 	.word	0x08004dab
 8004b64:	08004dab 	.word	0x08004dab
 8004b68:	08004b9f 	.word	0x08004b9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b6c:	4b94      	ldr	r3, [pc, #592]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b78:	4b91      	ldr	r3, [pc, #580]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	08db      	lsrs	r3, r3, #3
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	4a90      	ldr	r2, [pc, #576]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b8a:	e111      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b8c:	4b8d      	ldr	r3, [pc, #564]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b8e:	61bb      	str	r3, [r7, #24]
      break;
 8004b90:	e10e      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b92:	4b8d      	ldr	r3, [pc, #564]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b94:	61bb      	str	r3, [r7, #24]
      break;
 8004b96:	e10b      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b98:	4b8c      	ldr	r3, [pc, #560]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b9a:	61bb      	str	r3, [r7, #24]
      break;
 8004b9c:	e108      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b9e:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004ba8:	4b85      	ldr	r3, [pc, #532]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004bb4:	4b82      	ldr	r3, [pc, #520]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004bbe:	4b80      	ldr	r3, [pc, #512]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	08db      	lsrs	r3, r3, #3
 8004bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80e1 	beq.w	8004da4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	f000 8083 	beq.w	8004cf0 <HAL_RCC_GetSysClockFreq+0x204>
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	f200 80a1 	bhi.w	8004d34 <HAL_RCC_GetSysClockFreq+0x248>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x114>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d056      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bfe:	e099      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c00:	4b6f      	ldr	r3, [pc, #444]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d02d      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c0c:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	08db      	lsrs	r3, r3, #3
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	4a6b      	ldr	r2, [pc, #428]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c36:	4b62      	ldr	r3, [pc, #392]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c66:	e087      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004dd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7a:	4b51      	ldr	r3, [pc, #324]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004caa:	e065      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004dd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbe:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cd2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cee:	e043      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ddc <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d02:	4b2f      	ldr	r3, [pc, #188]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d32:	e021      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004dd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d78:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	0a5b      	lsrs	r3, r3, #9
 8004d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d82:	3301      	adds	r3, #1
 8004d84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9c:	ee17 3a90 	vmov	r3, s15
 8004da0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004da2:	e005      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61bb      	str	r3, [r7, #24]
      break;
 8004da8:	e002      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004dac:	61bb      	str	r3, [r7, #24]
      break;
 8004dae:	bf00      	nop
  }

  return sysclockfreq;
 8004db0:	69bb      	ldr	r3, [r7, #24]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	03d09000 	.word	0x03d09000
 8004dc8:	003d0900 	.word	0x003d0900
 8004dcc:	017d7840 	.word	0x017d7840
 8004dd0:	46000000 	.word	0x46000000
 8004dd4:	4c742400 	.word	0x4c742400
 8004dd8:	4a742400 	.word	0x4a742400
 8004ddc:	4bbebc20 	.word	0x4bbebc20

08004de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004de6:	f7ff fe81 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004dea:	4602      	mov	r2, r0
 8004dec:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	0a1b      	lsrs	r3, r3, #8
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	490f      	ldr	r1, [pc, #60]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x54>)
 8004df8:	5ccb      	ldrb	r3, [r1, r3]
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004e02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x54>)
 8004e0e:	5cd3      	ldrb	r3, [r2, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1a:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e1e:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	58024400 	.word	0x58024400
 8004e34:	0800df08 	.word	0x0800df08
 8004e38:	24000004 	.word	0x24000004
 8004e3c:	24000000 	.word	0x24000000

08004e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e44:	f7ff ffcc 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4904      	ldr	r1, [pc, #16]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	58024400 	.word	0x58024400
 8004e68:	0800df08 	.word	0x0800df08

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e70:	f7ff ffb6 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4904      	ldr	r1, [pc, #16]	; (8004e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	58024400 	.word	0x58024400
 8004e94:	0800df08 	.word	0x0800df08

08004e98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e9c:	b0cc      	sub	sp, #304	; 0x130
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004ebc:	2500      	movs	r5, #0
 8004ebe:	ea54 0305 	orrs.w	r3, r4, r5
 8004ec2:	d049      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ec4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ece:	d02f      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ed0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ed4:	d828      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eda:	d01a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004edc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee0:	d822      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eea:	d007      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eec:	e01c      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eee:	4bb8      	ldr	r3, [pc, #736]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	4ab7      	ldr	r2, [pc, #732]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004efa:	e01a      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f00:	3308      	adds	r3, #8
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f002 fba1 	bl	800764c <RCCEx_PLL2_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f10:	e00f      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f16:	3328      	adds	r3, #40	; 0x28
 8004f18:	2102      	movs	r1, #2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f002 fc48 	bl	80077b0 <RCCEx_PLL3_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f26:	e004      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004f2e:	e000      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f3a:	4ba5      	ldr	r3, [pc, #660]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f48:	4aa1      	ldr	r2, [pc, #644]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	6513      	str	r3, [r2, #80]	; 0x50
 8004f4e:	e003      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f50:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f54:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004f64:	f04f 0900 	mov.w	r9, #0
 8004f68:	ea58 0309 	orrs.w	r3, r8, r9
 8004f6c:	d047      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d82a      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004f95 	.word	0x08004f95
 8004f84:	08004fa3 	.word	0x08004fa3
 8004f88:	08004fb9 	.word	0x08004fb9
 8004f8c:	08004fd7 	.word	0x08004fd7
 8004f90:	08004fd7 	.word	0x08004fd7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f94:	4b8e      	ldr	r3, [pc, #568]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	4a8d      	ldr	r2, [pc, #564]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fa0:	e01a      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f002 fb4e 	bl	800764c <RCCEx_PLL2_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fb6:	e00f      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fbc:	3328      	adds	r3, #40	; 0x28
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f002 fbf5 	bl	80077b0 <RCCEx_PLL3_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe0:	4b7b      	ldr	r3, [pc, #492]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe4:	f023 0107 	bic.w	r1, r3, #7
 8004fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fee:	4a78      	ldr	r2, [pc, #480]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6513      	str	r3, [r2, #80]	; 0x50
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ffa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800500a:	f04f 0b00 	mov.w	fp, #0
 800500e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005012:	d04c      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005014:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501e:	d030      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005024:	d829      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005026:	2bc0      	cmp	r3, #192	; 0xc0
 8005028:	d02d      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800502a:	2bc0      	cmp	r3, #192	; 0xc0
 800502c:	d825      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800502e:	2b80      	cmp	r3, #128	; 0x80
 8005030:	d018      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d821      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	d007      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800503e:	e01c      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005040:	4b63      	ldr	r3, [pc, #396]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	4a62      	ldr	r2, [pc, #392]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800504a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800504c:	e01c      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800504e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005052:	3308      	adds	r3, #8
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f002 faf8 	bl	800764c <RCCEx_PLL2_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005062:	e011      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005064:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005068:	3328      	adds	r3, #40	; 0x28
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f002 fb9f 	bl	80077b0 <RCCEx_PLL3_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005080:	e002      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005088:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005090:	4b4f      	ldr	r3, [pc, #316]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005094:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005098:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800509c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509e:	4a4c      	ldr	r2, [pc, #304]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6513      	str	r3, [r2, #80]	; 0x50
 80050a4:	e003      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050aa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80050ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80050c4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80050c8:	460b      	mov	r3, r1
 80050ca:	4313      	orrs	r3, r2
 80050cc:	d053      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80050ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050da:	d035      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80050dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050e0:	d82e      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80050e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050e6:	d031      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80050e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050ec:	d828      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80050ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f2:	d01a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80050f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f8:	d822      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80050fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005102:	d007      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005104:	e01c      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005106:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	4a31      	ldr	r2, [pc, #196]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800510c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005112:	e01c      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005114:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005118:	3308      	adds	r3, #8
 800511a:	2100      	movs	r1, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f002 fa95 	bl	800764c <RCCEx_PLL2_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005128:	e011      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800512a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800512e:	3328      	adds	r3, #40	; 0x28
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f002 fb3c 	bl	80077b0 <RCCEx_PLL3_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800513e:	e006      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005146:	e002      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800514c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800515e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005166:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005168:	430b      	orrs	r3, r1
 800516a:	6593      	str	r3, [r2, #88]	; 0x58
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005172:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005176:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005182:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800518c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005190:	460b      	mov	r3, r1
 8005192:	4313      	orrs	r3, r2
 8005194:	d056      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005196:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800519a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800519e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051a2:	d038      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80051a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051a8:	d831      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051ae:	d034      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80051b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051b4:	d82b      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ba:	d01d      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80051bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051c0:	d825      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80051c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80051cc:	e01f      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051ce:	bf00      	nop
 80051d0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d4:	4ba2      	ldr	r3, [pc, #648]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4aa1      	ldr	r2, [pc, #644]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051e0:	e01c      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051e6:	3308      	adds	r3, #8
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f002 fa2e 	bl	800764c <RCCEx_PLL2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80051f6:	e011      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051fc:	3328      	adds	r3, #40	; 0x28
 80051fe:	2100      	movs	r1, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f002 fad5 	bl	80077b0 <RCCEx_PLL3_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800520c:	e006      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800521a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005224:	4b8e      	ldr	r3, [pc, #568]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800522c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005230:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005234:	4a8a      	ldr	r2, [pc, #552]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005236:	430b      	orrs	r3, r1
 8005238:	6593      	str	r3, [r2, #88]	; 0x58
 800523a:	e003      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005240:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005244:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005250:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005254:	2300      	movs	r3, #0
 8005256:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800525a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800525e:	460b      	mov	r3, r1
 8005260:	4313      	orrs	r3, r2
 8005262:	d03a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005264:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526a:	2b30      	cmp	r3, #48	; 0x30
 800526c:	d01f      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x416>
 800526e:	2b30      	cmp	r3, #48	; 0x30
 8005270:	d819      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005272:	2b20      	cmp	r3, #32
 8005274:	d00c      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005276:	2b20      	cmp	r3, #32
 8005278:	d815      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d019      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800527e:	2b10      	cmp	r3, #16
 8005280:	d111      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005282:	4b77      	ldr	r3, [pc, #476]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	4a76      	ldr	r2, [pc, #472]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800528e:	e011      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005290:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005294:	3308      	adds	r3, #8
 8005296:	2102      	movs	r1, #2
 8005298:	4618      	mov	r0, r3
 800529a:	f002 f9d7 	bl	800764c <RCCEx_PLL2_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80052a4:	e006      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80052ac:	e002      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80052ae:	bf00      	nop
 80052b0:	e000      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80052b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052bc:	4b68      	ldr	r3, [pc, #416]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80052c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ca:	4a65      	ldr	r2, [pc, #404]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052cc:	430b      	orrs	r3, r1
 80052ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052d0:	e003      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80052da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80052e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052ea:	2300      	movs	r3, #0
 80052ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052f0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80052f4:	460b      	mov	r3, r1
 80052f6:	4313      	orrs	r3, r2
 80052f8:	d051      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80052fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005304:	d035      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800530a:	d82e      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800530c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005310:	d031      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005316:	d828      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800531c:	d01a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005322:	d822      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d007      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800532e:	e01c      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005330:	4b4b      	ldr	r3, [pc, #300]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4a4a      	ldr	r2, [pc, #296]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800533c:	e01c      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800533e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005342:	3308      	adds	r3, #8
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f002 f980 	bl	800764c <RCCEx_PLL2_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005352:	e011      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005354:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005358:	3328      	adds	r3, #40	; 0x28
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f002 fa27 	bl	80077b0 <RCCEx_PLL3_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005370:	e002      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005378:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005380:	4b37      	ldr	r3, [pc, #220]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005384:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800538c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538e:	4a34      	ldr	r2, [pc, #208]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005390:	430b      	orrs	r3, r1
 8005392:	6513      	str	r3, [r2, #80]	; 0x50
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005396:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800539a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800539e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80053aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	d056      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80053be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c8:	d033      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80053ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ce:	d82c      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053d4:	d02f      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80053d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053da:	d826      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053e0:	d02b      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80053e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053e6:	d820      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ec:	d012      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80053ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053f2:	d81a      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d022      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d115      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005402:	3308      	adds	r3, #8
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f002 f920 	bl	800764c <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005412:	e015      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005414:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005418:	3328      	adds	r3, #40	; 0x28
 800541a:	2101      	movs	r1, #1
 800541c:	4618      	mov	r0, r3
 800541e:	f002 f9c7 	bl	80077b0 <RCCEx_PLL3_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005428:	e00a      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005430:	e006      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005432:	bf00      	nop
 8005434:	e004      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800543e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005440:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10d      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800544a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005450:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005456:	4a02      	ldr	r2, [pc, #8]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005458:	430b      	orrs	r3, r1
 800545a:	6513      	str	r3, [r2, #80]	; 0x50
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800545e:	bf00      	nop
 8005460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005468:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800546c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800547c:	2300      	movs	r3, #0
 800547e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005482:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005486:	460b      	mov	r3, r1
 8005488:	4313      	orrs	r3, r2
 800548a:	d055      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800548c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005490:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005498:	d033      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800549a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800549e:	d82c      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d02f      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d826      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054b0:	d02b      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80054b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054b6:	d820      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054bc:	d012      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80054be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c2:	d81a      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d022      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80054c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054cc:	d115      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054d2:	3308      	adds	r3, #8
 80054d4:	2101      	movs	r1, #1
 80054d6:	4618      	mov	r0, r3
 80054d8:	f002 f8b8 	bl	800764c <RCCEx_PLL2_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80054e2:	e015      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054e8:	3328      	adds	r3, #40	; 0x28
 80054ea:	2101      	movs	r1, #1
 80054ec:	4618      	mov	r0, r3
 80054ee:	f002 f95f 	bl	80077b0 <RCCEx_PLL3_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80054f8:	e00a      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005500:	e006      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005502:	bf00      	nop
 8005504:	e004      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005506:	bf00      	nop
 8005508:	e002      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800550e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005510:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10b      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005518:	4bb6      	ldr	r3, [pc, #728]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005520:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005524:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005528:	4ab2      	ldr	r2, [pc, #712]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800552a:	430b      	orrs	r3, r1
 800552c:	6593      	str	r3, [r2, #88]	; 0x58
 800552e:	e003      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005534:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005538:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800554e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005552:	460b      	mov	r3, r1
 8005554:	4313      	orrs	r3, r2
 8005556:	d02a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800555c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555e:	2b00      	cmp	r3, #0
 8005560:	d011      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005566:	d10a      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005568:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800556c:	3308      	adds	r3, #8
 800556e:	2101      	movs	r1, #1
 8005570:	4618      	mov	r0, r3
 8005572:	f002 f86b 	bl	800764c <RCCEx_PLL2_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800557c:	e004      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005588:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005590:	4b98      	ldr	r3, [pc, #608]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005594:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005598:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559e:	4a95      	ldr	r2, [pc, #596]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055a0:	430b      	orrs	r3, r1
 80055a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055a4:	e003      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055aa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80055ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055be:	2300      	movs	r3, #0
 80055c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055c8:	460b      	mov	r3, r1
 80055ca:	4313      	orrs	r3, r2
 80055cc:	d037      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80055ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d8:	d00e      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80055da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055de:	d816      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x776>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d018      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80055e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e8:	d111      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ea:	4b82      	ldr	r3, [pc, #520]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a81      	ldr	r2, [pc, #516]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80055f6:	e00f      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055fc:	3308      	adds	r3, #8
 80055fe:	2101      	movs	r1, #1
 8005600:	4618      	mov	r0, r3
 8005602:	f002 f823 	bl	800764c <RCCEx_PLL2_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800560c:	e004      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005614:	e000      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005618:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005620:	4b74      	ldr	r3, [pc, #464]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005628:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800562c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562e:	4a71      	ldr	r2, [pc, #452]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005630:	430b      	orrs	r3, r1
 8005632:	6513      	str	r3, [r2, #80]	; 0x50
 8005634:	e003      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005636:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800563a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800563e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800564a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800564e:	2300      	movs	r3, #0
 8005650:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005654:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005658:	460b      	mov	r3, r1
 800565a:	4313      	orrs	r3, r2
 800565c:	d03a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800565e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005664:	2b03      	cmp	r3, #3
 8005666:	d81d      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	080056ad 	.word	0x080056ad
 8005674:	08005681 	.word	0x08005681
 8005678:	0800568f 	.word	0x0800568f
 800567c:	080056ad 	.word	0x080056ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005680:	4b5c      	ldr	r3, [pc, #368]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	4a5b      	ldr	r2, [pc, #364]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800568a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800568c:	e00f      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800568e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005692:	3308      	adds	r3, #8
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f001 ffd8 	bl	800764c <RCCEx_PLL2_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80056ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056b6:	4b4f      	ldr	r3, [pc, #316]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ba:	f023 0103 	bic.w	r1, r3, #3
 80056be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c4:	4a4b      	ldr	r2, [pc, #300]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056c6:	430b      	orrs	r3, r1
 80056c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056ca:	e003      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056d0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80056e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f000 80a0 	beq.w	8005836 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056f6:	4b40      	ldr	r3, [pc, #256]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a3f      	ldr	r2, [pc, #252]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80056fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005700:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005702:	f7fc fea9 	bl	8002458 <HAL_GetTick>
 8005706:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800570a:	e00b      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800570c:	f7fc fea4 	bl	8002458 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b64      	cmp	r3, #100	; 0x64
 800571a:	d903      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005722:	e005      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005724:	4b34      	ldr	r3, [pc, #208]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ed      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005730:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005734:	2b00      	cmp	r3, #0
 8005736:	d17a      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005738:	4b2e      	ldr	r3, [pc, #184]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800573a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800573c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005740:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005744:	4053      	eors	r3, r2
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	2b00      	cmp	r3, #0
 800574c:	d015      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800574e:	4b29      	ldr	r3, [pc, #164]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005756:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a25      	ldr	r2, [pc, #148]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005766:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800576c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005772:	4a20      	ldr	r2, [pc, #128]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005774:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800577a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800577e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005786:	d118      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fc fe66 	bl	8002458 <HAL_GetTick>
 800578c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005790:	e00d      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fc fe61 	bl	8002458 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800579c:	1ad2      	subs	r2, r2, r3
 800579e:	f241 3388 	movw	r3, #5000	; 0x1388
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d903      	bls.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 80057ac:	e005      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ae:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0eb      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80057ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d130      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d2:	d115      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80057dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057e4:	091a      	lsrs	r2, r3, #4
 80057e6:	4b05      	ldr	r3, [pc, #20]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	4a02      	ldr	r2, [pc, #8]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6113      	str	r3, [r2, #16]
 80057f0:	e00c      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x974>
 80057f2:	bf00      	nop
 80057f4:	58024400 	.word	0x58024400
 80057f8:	58024800 	.word	0x58024800
 80057fc:	00ffffcf 	.word	0x00ffffcf
 8005800:	4bd4      	ldr	r3, [pc, #848]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	4ad3      	ldr	r2, [pc, #844]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005806:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800580a:	6113      	str	r3, [r2, #16]
 800580c:	4bd1      	ldr	r3, [pc, #836]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800580e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005810:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005814:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800581c:	4acd      	ldr	r2, [pc, #820]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800581e:	430b      	orrs	r3, r1
 8005820:	6713      	str	r3, [r2, #112]	; 0x70
 8005822:	e008      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005824:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005828:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 800582c:	e003      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005832:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f002 0301 	and.w	r3, r2, #1
 8005842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005846:	2300      	movs	r3, #0
 8005848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800584c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005850:	460b      	mov	r3, r1
 8005852:	4313      	orrs	r3, r2
 8005854:	f000 808b 	beq.w	800596e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005858:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800585c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005860:	2b28      	cmp	r3, #40	; 0x28
 8005862:	d86b      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005945 	.word	0x08005945
 8005870:	0800593d 	.word	0x0800593d
 8005874:	0800593d 	.word	0x0800593d
 8005878:	0800593d 	.word	0x0800593d
 800587c:	0800593d 	.word	0x0800593d
 8005880:	0800593d 	.word	0x0800593d
 8005884:	0800593d 	.word	0x0800593d
 8005888:	0800593d 	.word	0x0800593d
 800588c:	08005911 	.word	0x08005911
 8005890:	0800593d 	.word	0x0800593d
 8005894:	0800593d 	.word	0x0800593d
 8005898:	0800593d 	.word	0x0800593d
 800589c:	0800593d 	.word	0x0800593d
 80058a0:	0800593d 	.word	0x0800593d
 80058a4:	0800593d 	.word	0x0800593d
 80058a8:	0800593d 	.word	0x0800593d
 80058ac:	08005927 	.word	0x08005927
 80058b0:	0800593d 	.word	0x0800593d
 80058b4:	0800593d 	.word	0x0800593d
 80058b8:	0800593d 	.word	0x0800593d
 80058bc:	0800593d 	.word	0x0800593d
 80058c0:	0800593d 	.word	0x0800593d
 80058c4:	0800593d 	.word	0x0800593d
 80058c8:	0800593d 	.word	0x0800593d
 80058cc:	08005945 	.word	0x08005945
 80058d0:	0800593d 	.word	0x0800593d
 80058d4:	0800593d 	.word	0x0800593d
 80058d8:	0800593d 	.word	0x0800593d
 80058dc:	0800593d 	.word	0x0800593d
 80058e0:	0800593d 	.word	0x0800593d
 80058e4:	0800593d 	.word	0x0800593d
 80058e8:	0800593d 	.word	0x0800593d
 80058ec:	08005945 	.word	0x08005945
 80058f0:	0800593d 	.word	0x0800593d
 80058f4:	0800593d 	.word	0x0800593d
 80058f8:	0800593d 	.word	0x0800593d
 80058fc:	0800593d 	.word	0x0800593d
 8005900:	0800593d 	.word	0x0800593d
 8005904:	0800593d 	.word	0x0800593d
 8005908:	0800593d 	.word	0x0800593d
 800590c:	08005945 	.word	0x08005945
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005914:	3308      	adds	r3, #8
 8005916:	2101      	movs	r1, #1
 8005918:	4618      	mov	r0, r3
 800591a:	f001 fe97 	bl	800764c <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005924:	e00f      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800592a:	3328      	adds	r3, #40	; 0x28
 800592c:	2101      	movs	r1, #1
 800592e:	4618      	mov	r0, r3
 8005930:	f001 ff3e 	bl	80077b0 <RCCEx_PLL3_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800593a:	e004      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005942:	e000      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005946:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800594e:	4b81      	ldr	r3, [pc, #516]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005956:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800595a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595e:	4a7d      	ldr	r2, [pc, #500]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005960:	430b      	orrs	r3, r1
 8005962:	6553      	str	r3, [r2, #84]	; 0x54
 8005964:	e003      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005966:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800596a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800596e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f002 0302 	and.w	r3, r2, #2
 800597a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800597e:	2300      	movs	r3, #0
 8005980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005984:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005988:	460b      	mov	r3, r1
 800598a:	4313      	orrs	r3, r2
 800598c:	d042      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800598e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005994:	2b05      	cmp	r3, #5
 8005996:	d825      	bhi.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059ed 	.word	0x080059ed
 80059a4:	080059b9 	.word	0x080059b9
 80059a8:	080059cf 	.word	0x080059cf
 80059ac:	080059ed 	.word	0x080059ed
 80059b0:	080059ed 	.word	0x080059ed
 80059b4:	080059ed 	.word	0x080059ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059bc:	3308      	adds	r3, #8
 80059be:	2101      	movs	r1, #1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 fe43 	bl	800764c <RCCEx_PLL2_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059cc:	e00f      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059d2:	3328      	adds	r3, #40	; 0x28
 80059d4:	2101      	movs	r1, #1
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 feea 	bl	80077b0 <RCCEx_PLL3_Config>
 80059dc:	4603      	mov	r3, r0
 80059de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059e2:	e004      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80059ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80059f6:	4b57      	ldr	r3, [pc, #348]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	f023 0107 	bic.w	r1, r3, #7
 80059fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a04:	4a53      	ldr	r2, [pc, #332]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a06:	430b      	orrs	r3, r1
 8005a08:	6553      	str	r3, [r2, #84]	; 0x54
 8005a0a:	e003      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a10:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	f002 0304 	and.w	r3, r2, #4
 8005a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a24:	2300      	movs	r3, #0
 8005a26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4313      	orrs	r3, r2
 8005a32:	d044      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a3c:	2b05      	cmp	r3, #5
 8005a3e:	d825      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005a40:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005a95 	.word	0x08005a95
 8005a4c:	08005a61 	.word	0x08005a61
 8005a50:	08005a77 	.word	0x08005a77
 8005a54:	08005a95 	.word	0x08005a95
 8005a58:	08005a95 	.word	0x08005a95
 8005a5c:	08005a95 	.word	0x08005a95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a64:	3308      	adds	r3, #8
 8005a66:	2101      	movs	r1, #1
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 fdef 	bl	800764c <RCCEx_PLL2_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a74:	e00f      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a7a:	3328      	adds	r3, #40	; 0x28
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f001 fe96 	bl	80077b0 <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a8a:	e004      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005a92:	e000      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a96:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a9e:	4b2d      	ldr	r3, [pc, #180]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	f023 0107 	bic.w	r1, r3, #7
 8005aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aae:	4a29      	ldr	r2, [pc, #164]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ab4:	e003      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005aba:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	f002 0320 	and.w	r3, r2, #32
 8005aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4313      	orrs	r3, r2
 8005adc:	d057      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aea:	d035      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af0:	d82c      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d031      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afc:	d826      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005afe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b02:	d02d      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005b04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b08:	d820      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0e:	d012      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b14:	d81a      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d024      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b1e:	d115      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b24:	3308      	adds	r3, #8
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fd8f 	bl	800764c <RCCEx_PLL2_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b34:	e017      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b3a:	3328      	adds	r3, #40	; 0x28
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 fe36 	bl	80077b0 <RCCEx_PLL3_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b4a:	e00c      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005b52:	e008      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005b54:	58024400 	.word	0x58024400
        break;
 8005b58:	bf00      	nop
 8005b5a:	e004      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005b5c:	bf00      	nop
 8005b5e:	e002      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005b60:	bf00      	nop
 8005b62:	e000      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b66:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b6e:	4bc2      	ldr	r3, [pc, #776]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b7e:	4abe      	ldr	r2, [pc, #760]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b80:	430b      	orrs	r3, r1
 8005b82:	6553      	str	r3, [r2, #84]	; 0x54
 8005b84:	e003      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b86:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b8a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ba4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4313      	orrs	r3, r2
 8005bac:	d055      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005bb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bba:	d033      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005bbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bc0:	d82c      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc6:	d02f      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bcc:	d826      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005bce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd2:	d02b      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005bd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd8:	d820      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bde:	d012      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be4:	d81a      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d022      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bee:	d115      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 fd27 	bl	800764c <RCCEx_PLL2_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c04:	e015      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c0a:	3328      	adds	r3, #40	; 0x28
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 fdce 	bl	80077b0 <RCCEx_PLL3_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c1a:	e00a      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005c22:	e006      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005c24:	bf00      	nop
 8005c26:	e004      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005c28:	bf00      	nop
 8005c2a:	e002      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005c2c:	bf00      	nop
 8005c2e:	e000      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c3a:	4b8f      	ldr	r3, [pc, #572]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c4a:	4a8b      	ldr	r2, [pc, #556]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c50:	e003      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005c66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c70:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005c74:	460b      	mov	r3, r1
 8005c76:	4313      	orrs	r3, r2
 8005c78:	d055      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c86:	d033      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005c88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c8c:	d82c      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c92:	d02f      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c98:	d826      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005c9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c9e:	d02b      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005ca0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ca4:	d820      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005caa:	d012      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb0:	d81a      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d022      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cba:	d115      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fcc1 	bl	800764c <RCCEx_PLL2_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005cd0:	e015      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cd6:	3328      	adds	r3, #40	; 0x28
 8005cd8:	2102      	movs	r1, #2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 fd68 	bl	80077b0 <RCCEx_PLL3_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ce6:	e00a      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005cee:	e006      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005cf0:	bf00      	nop
 8005cf2:	e004      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d06:	4b5c      	ldr	r3, [pc, #368]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0a:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d16:	4a58      	ldr	r2, [pc, #352]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d1c:	e003      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d22:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f002 0308 	and.w	r3, r2, #8
 8005d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d36:	2300      	movs	r3, #0
 8005d38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d3c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005d40:	460b      	mov	r3, r1
 8005d42:	4313      	orrs	r3, r2
 8005d44:	d01e      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d52:	d10c      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d58:	3328      	adds	r3, #40	; 0x28
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 fd27 	bl	80077b0 <RCCEx_PLL3_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d6e:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	4a3e      	ldr	r2, [pc, #248]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f002 0310 	and.w	r3, r2, #16
 8005d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d94:	2300      	movs	r3, #0
 8005d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d9a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	d01e      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db0:	d10c      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005db6:	3328      	adds	r3, #40	; 0x28
 8005db8:	2102      	movs	r1, #2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 fcf8 	bl	80077b0 <RCCEx_PLL3_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dcc:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ddc:	4a26      	ldr	r2, [pc, #152]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dde:	430b      	orrs	r3, r1
 8005de0:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005df2:	2300      	movs	r3, #0
 8005df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005df8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	d040      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e0e:	d022      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e14:	d81b      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1e:	d00b      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005e20:	e015      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e26:	3308      	adds	r3, #8
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fc0e 	bl	800764c <RCCEx_PLL2_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e36:	e00f      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e3c:	3328      	adds	r3, #40	; 0x28
 8005e3e:	2102      	movs	r1, #2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 fcb5 	bl	80077b0 <RCCEx_PLL3_Config>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e4c:	e004      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005e54:	e000      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10d      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e64:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005e68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e70:	4a01      	ldr	r2, [pc, #4]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e72:	430b      	orrs	r3, r1
 8005e74:	6593      	str	r3, [r2, #88]	; 0x58
 8005e76:	e005      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e80:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005e90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e92:	2300      	movs	r3, #0
 8005e94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e96:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	d03b      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eac:	d01f      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005eae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eb2:	d818      	bhi.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ebe:	d007      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005ec0:	e011      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec2:	4b64      	ldr	r3, [pc, #400]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	4a63      	ldr	r2, [pc, #396]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ece:	e00f      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ed4:	3328      	adds	r3, #40	; 0x28
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f001 fc69 	bl	80077b0 <RCCEx_PLL3_Config>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ee4:	e004      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005eec:	e000      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ef8:	4b56      	ldr	r3, [pc, #344]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f08:	4a52      	ldr	r2, [pc, #328]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	6553      	str	r3, [r2, #84]	; 0x54
 8005f0e:	e003      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f14:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005f24:	673b      	str	r3, [r7, #112]	; 0x70
 8005f26:	2300      	movs	r3, #0
 8005f28:	677b      	str	r3, [r7, #116]	; 0x74
 8005f2a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4313      	orrs	r3, r2
 8005f32:	d031      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f42:	d007      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005f44:	e011      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f46:	4b43      	ldr	r3, [pc, #268]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	4a42      	ldr	r2, [pc, #264]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f52:	e00e      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f58:	3308      	adds	r3, #8
 8005f5a:	2102      	movs	r1, #2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fb75 	bl	800764c <RCCEx_PLL2_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f68:	e003      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f7a:	4b36      	ldr	r3, [pc, #216]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	4a32      	ldr	r2, [pc, #200]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f8e:	e003      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f90:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f94:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005faa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	d00c      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fb8:	3328      	adds	r3, #40	; 0x28
 8005fba:	2102      	movs	r1, #2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 fbf7 	bl	80077b0 <RCCEx_PLL3_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005fda:	663b      	str	r3, [r7, #96]	; 0x60
 8005fdc:	2300      	movs	r3, #0
 8005fde:	667b      	str	r3, [r7, #100]	; 0x64
 8005fe0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d03a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff6:	d018      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ffc:	d811      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006002:	d014      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006008:	d80b      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d011      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800600e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006012:	d106      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006014:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	4a0e      	ldr	r2, [pc, #56]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800601a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800601e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006020:	e008      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006028:	e004      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800602a:	bf00      	nop
 800602c:	e002      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800602e:	bf00      	nop
 8006030:	e000      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006034:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10d      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800603e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006040:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006044:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800604c:	4a01      	ldr	r2, [pc, #4]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800604e:	430b      	orrs	r3, r1
 8006050:	6553      	str	r3, [r2, #84]	; 0x54
 8006052:	e005      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006058:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800605c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006060:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800606c:	65bb      	str	r3, [r7, #88]	; 0x58
 800606e:	2300      	movs	r3, #0
 8006070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006072:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006076:	460b      	mov	r3, r1
 8006078:	4313      	orrs	r3, r2
 800607a:	d009      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800607c:	4baa      	ldr	r3, [pc, #680]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006084:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800608a:	4aa7      	ldr	r2, [pc, #668]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800608c:	430b      	orrs	r3, r1
 800608e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006090:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800609c:	653b      	str	r3, [r7, #80]	; 0x50
 800609e:	2300      	movs	r3, #0
 80060a0:	657b      	str	r3, [r7, #84]	; 0x54
 80060a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	d00a      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80060ac:	4b9e      	ldr	r3, [pc, #632]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80060b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80060bc:	4a9a      	ldr	r2, [pc, #616]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80060be:	430b      	orrs	r3, r1
 80060c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80060ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d0:	2300      	movs	r3, #0
 80060d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d009      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060de:	4b92      	ldr	r3, [pc, #584]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80060e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a8e      	ldr	r2, [pc, #568]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80060ee:	430b      	orrs	r3, r1
 80060f0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80060f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80060fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006100:	2300      	movs	r3, #0
 8006102:	647b      	str	r3, [r7, #68]	; 0x44
 8006104:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006108:	460b      	mov	r3, r1
 800610a:	4313      	orrs	r3, r2
 800610c:	d00e      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800610e:	4b86      	ldr	r3, [pc, #536]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	4a85      	ldr	r2, [pc, #532]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006114:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006118:	6113      	str	r3, [r2, #16]
 800611a:	4b83      	ldr	r3, [pc, #524]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800611c:	6919      	ldr	r1, [r3, #16]
 800611e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006122:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006126:	4a80      	ldr	r2, [pc, #512]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006128:	430b      	orrs	r3, r1
 800612a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800612c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006138:	63bb      	str	r3, [r7, #56]	; 0x38
 800613a:	2300      	movs	r3, #0
 800613c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800613e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006142:	460b      	mov	r3, r1
 8006144:	4313      	orrs	r3, r2
 8006146:	d009      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006148:	4b77      	ldr	r3, [pc, #476]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800614a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006150:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006156:	4a74      	ldr	r2, [pc, #464]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006158:	430b      	orrs	r3, r1
 800615a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800615c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006168:	633b      	str	r3, [r7, #48]	; 0x30
 800616a:	2300      	movs	r3, #0
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
 800616e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006172:	460b      	mov	r3, r1
 8006174:	4313      	orrs	r3, r2
 8006176:	d00a      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006178:	4b6b      	ldr	r3, [pc, #428]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006180:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	4a67      	ldr	r2, [pc, #412]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800618a:	430b      	orrs	r3, r1
 800618c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800618e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	2100      	movs	r1, #0
 8006198:	62b9      	str	r1, [r7, #40]	; 0x28
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d011      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061ae:	3308      	adds	r3, #8
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fa4a 	bl	800764c <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80061be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061ca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80061ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	2100      	movs	r1, #0
 80061d8:	6239      	str	r1, [r7, #32]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
 80061e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80061e4:	460b      	mov	r3, r1
 80061e6:	4313      	orrs	r3, r2
 80061e8:	d011      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061ee:	3308      	adds	r3, #8
 80061f0:	2101      	movs	r1, #1
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 fa2a 	bl	800764c <RCCEx_PLL2_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80061fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006206:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800620a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800620e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	2100      	movs	r1, #0
 8006218:	61b9      	str	r1, [r7, #24]
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	61fb      	str	r3, [r7, #28]
 8006220:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d011      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800622a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800622e:	3308      	adds	r3, #8
 8006230:	2102      	movs	r1, #2
 8006232:	4618      	mov	r0, r3
 8006234:	f001 fa0a 	bl	800764c <RCCEx_PLL2_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800623e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800624a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800624e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	2100      	movs	r1, #0
 8006258:	6139      	str	r1, [r7, #16]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006264:	460b      	mov	r3, r1
 8006266:	4313      	orrs	r3, r2
 8006268:	d011      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800626a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800626e:	3328      	adds	r3, #40	; 0x28
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f001 fa9c 	bl	80077b0 <RCCEx_PLL3_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 800627e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006286:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800628a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800628e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	2100      	movs	r1, #0
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062a4:	460b      	mov	r3, r1
 80062a6:	4313      	orrs	r3, r2
 80062a8:	d011      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062ae:	3328      	adds	r3, #40	; 0x28
 80062b0:	2101      	movs	r1, #1
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 fa7c 	bl	80077b0 <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80062be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062ca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80062ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	2100      	movs	r1, #0
 80062d8:	6039      	str	r1, [r7, #0]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	607b      	str	r3, [r7, #4]
 80062e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80062e4:	460b      	mov	r3, r1
 80062e6:	4313      	orrs	r3, r2
 80062e8:	d011      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062ee:	3328      	adds	r3, #40	; 0x28
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 fa5c 	bl	80077b0 <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80062fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006306:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800630a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800630e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	e000      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
}
 800631c:	4618      	mov	r0, r3
 800631e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006322:	46bd      	mov	sp, r7
 8006324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006328:	58024400 	.word	0x58024400

0800632c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b090      	sub	sp, #64	; 0x40
 8006330:	af00      	add	r7, sp, #0
 8006332:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800633a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800633e:	430b      	orrs	r3, r1
 8006340:	f040 8094 	bne.w	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006344:	4b9e      	ldr	r3, [pc, #632]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2b04      	cmp	r3, #4
 8006352:	f200 8087 	bhi.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	08006371 	.word	0x08006371
 8006360:	08006399 	.word	0x08006399
 8006364:	080063c1 	.word	0x080063c1
 8006368:	0800645d 	.word	0x0800645d
 800636c:	080063e9 	.word	0x080063e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006370:	4b93      	ldr	r3, [pc, #588]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800637c:	d108      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800637e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006382:	4618      	mov	r0, r3
 8006384:	f001 f810 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800638c:	f000 bd45 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006394:	f000 bd41 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006398:	4b89      	ldr	r3, [pc, #548]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a4:	d108      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063a6:	f107 0318 	add.w	r3, r7, #24
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fd54 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063b4:	f000 bd31 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063bc:	f000 bd2d 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063c0:	4b7f      	ldr	r3, [pc, #508]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063cc:	d108      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ce:	f107 030c 	add.w	r3, r7, #12
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fe94 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063dc:	f000 bd1d 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063e4:	f000 bd19 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063e8:	4b75      	ldr	r3, [pc, #468]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063f2:	4b73      	ldr	r3, [pc, #460]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d10c      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80063fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006400:	2b00      	cmp	r3, #0
 8006402:	d109      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006404:	4b6e      	ldr	r3, [pc, #440]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	08db      	lsrs	r3, r3, #3
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	4a6d      	ldr	r2, [pc, #436]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
 8006414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006416:	e01f      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006418:	4b69      	ldr	r3, [pc, #420]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006424:	d106      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800642c:	d102      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800642e:	4b66      	ldr	r3, [pc, #408]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006432:	e011      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006434:	4b62      	ldr	r3, [pc, #392]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006440:	d106      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006448:	d102      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800644a:	4b60      	ldr	r3, [pc, #384]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800644e:	e003      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006454:	f000 bce1 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006458:	f000 bcdf 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800645c:	4b5c      	ldr	r3, [pc, #368]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006460:	f000 bcdb 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006468:	f000 bcd7 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800646c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006470:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006474:	430b      	orrs	r3, r1
 8006476:	f040 80ad 	bne.w	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800647a:	4b51      	ldr	r3, [pc, #324]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006482:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648a:	d056      	beq.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006492:	f200 8090 	bhi.w	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2bc0      	cmp	r3, #192	; 0xc0
 800649a:	f000 8088 	beq.w	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2bc0      	cmp	r3, #192	; 0xc0
 80064a2:	f200 8088 	bhi.w	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	2b80      	cmp	r3, #128	; 0x80
 80064aa:	d032      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	f200 8081 	bhi.w	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d014      	beq.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80064c0:	e079      	b.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064c2:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ce:	d108      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 ff67 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064de:	f000 bc9c 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e6:	f000 bc98 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064ea:	4b35      	ldr	r3, [pc, #212]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064f6:	d108      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064f8:	f107 0318 	add.w	r3, r7, #24
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fcab 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006506:	f000 bc88 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800650e:	f000 bc84 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006512:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800651a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800651e:	d108      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006520:	f107 030c 	add.w	r3, r7, #12
 8006524:	4618      	mov	r0, r3
 8006526:	f000 fdeb 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800652e:	f000 bc74 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006536:	f000 bc70 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800653a:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006542:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006544:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b04      	cmp	r3, #4
 800654e:	d10c      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006556:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	08db      	lsrs	r3, r3, #3
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	4a18      	ldr	r2, [pc, #96]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006562:	fa22 f303 	lsr.w	r3, r2, r3
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006568:	e01f      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006576:	d106      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800657e:	d102      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006580:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006584:	e011      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006586:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006592:	d106      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800659a:	d102      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a0:	e003      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80065a6:	f000 bc38 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065aa:	f000 bc36 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065ae:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065b2:	f000 bc32 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ba:	f000 bc2e 	b.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065be:	bf00      	nop
 80065c0:	58024400 	.word	0x58024400
 80065c4:	03d09000 	.word	0x03d09000
 80065c8:	003d0900 	.word	0x003d0900
 80065cc:	017d7840 	.word	0x017d7840
 80065d0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80065d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80065dc:	430b      	orrs	r3, r1
 80065de:	f040 809c 	bne.w	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80065e2:	4b9e      	ldr	r3, [pc, #632]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80065ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065f2:	d054      	beq.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065fa:	f200 808b 	bhi.w	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006604:	f000 8083 	beq.w	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800660e:	f200 8081 	bhi.w	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006618:	d02f      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006620:	d878      	bhi.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800662e:	d012      	beq.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006630:	e070      	b.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006632:	4b8a      	ldr	r3, [pc, #552]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800663e:	d107      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006644:	4618      	mov	r0, r3
 8006646:	f000 feaf 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800664e:	e3e4      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006654:	e3e1      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006656:	4b81      	ldr	r3, [pc, #516]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800665e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006662:	d107      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006664:	f107 0318 	add.w	r3, r7, #24
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fbf5 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006672:	e3d2      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006678:	e3cf      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800667a:	4b78      	ldr	r3, [pc, #480]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006686:	d107      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006688:	f107 030c 	add.w	r3, r7, #12
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fd37 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006696:	e3c0      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800669c:	e3bd      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800669e:	4b6f      	ldr	r3, [pc, #444]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066a8:	4b6c      	ldr	r3, [pc, #432]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d10c      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80066b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066ba:	4b68      	ldr	r3, [pc, #416]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	08db      	lsrs	r3, r3, #3
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	4a66      	ldr	r2, [pc, #408]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80066c6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066cc:	e01e      	b.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066ce:	4b63      	ldr	r3, [pc, #396]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066da:	d106      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80066dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e2:	d102      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066e4:	4b5f      	ldr	r3, [pc, #380]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e8:	e010      	b.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066ea:	4b5c      	ldr	r3, [pc, #368]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066f6:	d106      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80066f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066fe:	d102      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006700:	4b59      	ldr	r3, [pc, #356]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006704:	e002      	b.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800670a:	e386      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800670c:	e385      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800670e:	4b57      	ldr	r3, [pc, #348]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006712:	e382      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006718:	e37f      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800671a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800671e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006722:	430b      	orrs	r3, r1
 8006724:	f040 80a7 	bne.w	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006728:	4b4c      	ldr	r3, [pc, #304]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006730:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006738:	d055      	beq.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006740:	f200 8096 	bhi.w	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800674a:	f000 8084 	beq.w	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006754:	f200 808c 	bhi.w	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800675e:	d030      	beq.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006766:	f200 8083 	bhi.w	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006776:	d012      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006778:	e07a      	b.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800677a:	4b38      	ldr	r3, [pc, #224]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006786:	d107      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fe0b 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006796:	e340      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800679c:	e33d      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800679e:	4b2f      	ldr	r3, [pc, #188]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067aa:	d107      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ac:	f107 0318 	add.w	r3, r7, #24
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fb51 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ba:	e32e      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c0:	e32b      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067c2:	4b26      	ldr	r3, [pc, #152]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ce:	d107      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067d0:	f107 030c 	add.w	r3, r7, #12
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fc93 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067de:	e31c      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e4:	e319      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067e6:	4b1d      	ldr	r3, [pc, #116]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067f0:	4b1a      	ldr	r3, [pc, #104]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d10c      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80067fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006802:	4b16      	ldr	r3, [pc, #88]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	08db      	lsrs	r3, r3, #3
 8006808:	f003 0303 	and.w	r3, r3, #3
 800680c:	4a14      	ldr	r2, [pc, #80]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800680e:	fa22 f303 	lsr.w	r3, r2, r3
 8006812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006814:	e01e      	b.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006816:	4b11      	ldr	r3, [pc, #68]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006822:	d106      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800682a:	d102      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800682c:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006830:	e010      	b.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006832:	4b0a      	ldr	r3, [pc, #40]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800683e:	d106      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006846:	d102      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006848:	4b07      	ldr	r3, [pc, #28]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684c:	e002      	b.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006852:	e2e2      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006854:	e2e1      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800685a:	e2de      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800685c:	58024400 	.word	0x58024400
 8006860:	03d09000 	.word	0x03d09000
 8006864:	003d0900 	.word	0x003d0900
 8006868:	017d7840 	.word	0x017d7840
 800686c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006874:	e2d1      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800687e:	430b      	orrs	r3, r1
 8006880:	f040 809c 	bne.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006884:	4b93      	ldr	r3, [pc, #588]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006888:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800688c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006894:	d054      	beq.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800689c:	f200 808b 	bhi.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a6:	f000 8083 	beq.w	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068b0:	f200 8081 	bhi.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ba:	d02f      	beq.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c2:	d878      	bhi.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d004      	beq.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d0:	d012      	beq.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80068d2:	e070      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068d4:	4b7f      	ldr	r3, [pc, #508]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068e0:	d107      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fd5e 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f0:	e293      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068f6:	e290      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068f8:	4b76      	ldr	r3, [pc, #472]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006904:	d107      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006906:	f107 0318 	add.w	r3, r7, #24
 800690a:	4618      	mov	r0, r3
 800690c:	f000 faa4 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006914:	e281      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800691a:	e27e      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800691c:	4b6d      	ldr	r3, [pc, #436]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006928:	d107      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800692a:	f107 030c 	add.w	r3, r7, #12
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fbe6 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006938:	e26f      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800693e:	e26c      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006940:	4b64      	ldr	r3, [pc, #400]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006948:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800694a:	4b62      	ldr	r3, [pc, #392]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b04      	cmp	r3, #4
 8006954:	d10c      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800695c:	4b5d      	ldr	r3, [pc, #372]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	08db      	lsrs	r3, r3, #3
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	4a5c      	ldr	r2, [pc, #368]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006968:	fa22 f303 	lsr.w	r3, r2, r3
 800696c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800696e:	e01e      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006970:	4b58      	ldr	r3, [pc, #352]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697c:	d106      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006984:	d102      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006986:	4b55      	ldr	r3, [pc, #340]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800698a:	e010      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800698c:	4b51      	ldr	r3, [pc, #324]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006998:	d106      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a0:	d102      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069a2:	4b4f      	ldr	r3, [pc, #316]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a6:	e002      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069ac:	e235      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069ae:	e234      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069b0:	4b4c      	ldr	r3, [pc, #304]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069b4:	e231      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ba:	e22e      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80069bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80069c4:	430b      	orrs	r3, r1
 80069c6:	f040 808f 	bne.w	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80069ca:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069da:	d06b      	beq.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069e2:	d874      	bhi.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069ea:	d056      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069f2:	d86c      	bhi.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069fa:	d03b      	beq.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a02:	d864      	bhi.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a0a:	d021      	beq.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a12:	d85c      	bhi.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a20:	d004      	beq.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006a22:	e054      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006a24:	f7fe fa0c 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8006a28:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a2a:	e1f6      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a2c:	4b29      	ldr	r3, [pc, #164]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a38:	d107      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a3a:	f107 0318 	add.w	r3, r7, #24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fa0a 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a48:	e1e7      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a4e:	e1e4      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a50:	4b20      	ldr	r3, [pc, #128]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a5e:	f107 030c 	add.w	r3, r7, #12
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fb4c 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a6c:	e1d5      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a72:	e1d2      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a74:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d109      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a80:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	08db      	lsrs	r3, r3, #3
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a92:	e1c2      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a98:	e1bf      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a9a:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa6:	d102      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aac:	e1b5      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab2:	e1b2      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac0:	d102      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac6:	e1a8      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006acc:	e1a5      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ad2:	e1a2      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	03d09000 	.word	0x03d09000
 8006adc:	003d0900 	.word	0x003d0900
 8006ae0:	017d7840 	.word	0x017d7840
 8006ae4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aec:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006af0:	430b      	orrs	r3, r1
 8006af2:	d173      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006af4:	4b9c      	ldr	r3, [pc, #624]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b04:	d02f      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b0c:	d863      	bhi.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b1a:	d012      	beq.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006b1c:	e05b      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b1e:	4b92      	ldr	r3, [pc, #584]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b2c:	f107 0318 	add.w	r3, r7, #24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f991 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b3a:	e16e      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b40:	e16b      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b42:	4b89      	ldr	r3, [pc, #548]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b50:	f107 030c 	add.w	r3, r7, #12
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fad3 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5e:	e15c      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b64:	e159      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b66:	4b80      	ldr	r3, [pc, #512]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b70:	4b7d      	ldr	r3, [pc, #500]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d10c      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b82:	4b79      	ldr	r3, [pc, #484]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	08db      	lsrs	r3, r3, #3
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	4a77      	ldr	r2, [pc, #476]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b94:	e01e      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b96:	4b74      	ldr	r3, [pc, #464]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba2:	d106      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006baa:	d102      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bac:	4b70      	ldr	r3, [pc, #448]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb0:	e010      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bb2:	4b6d      	ldr	r3, [pc, #436]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bbe:	d106      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bc6:	d102      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bc8:	4b6a      	ldr	r3, [pc, #424]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bcc:	e002      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bd2:	e122      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bd4:	e121      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bda:	e11e      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006be4:	430b      	orrs	r3, r1
 8006be6:	d133      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006be8:	4b5f      	ldr	r3, [pc, #380]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d004      	beq.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfe:	d012      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006c00:	e023      	b.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c02:	4b59      	ldr	r3, [pc, #356]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c0e:	d107      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fbc7 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1e:	e0fc      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c24:	e0f9      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c26:	4b50      	ldr	r3, [pc, #320]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c32:	d107      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c34:	f107 0318 	add.w	r3, r7, #24
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 f90d 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c42:	e0ea      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c48:	e0e7      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c4e:	e0e4      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c54:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	f040 808d 	bne.w	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006c5e:	4b42      	ldr	r3, [pc, #264]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c62:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006c66:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c6e:	d06b      	beq.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c76:	d874      	bhi.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7e:	d056      	beq.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c86:	d86c      	bhi.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c8e:	d03b      	beq.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c96:	d864      	bhi.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9e:	d021      	beq.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca6:	d85c      	bhi.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d004      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cb4:	d004      	beq.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006cb6:	e054      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006cb8:	f000 f8b8 	bl	8006e2c <HAL_RCCEx_GetD3PCLK1Freq>
 8006cbc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cbe:	e0ac      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cc0:	4b29      	ldr	r3, [pc, #164]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ccc:	d107      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cce:	f107 0318 	add.w	r3, r7, #24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 f8c0 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cdc:	e09d      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce2:	e09a      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ce4:	4b20      	ldr	r3, [pc, #128]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf0:	d107      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf2:	f107 030c 	add.w	r3, r7, #12
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fa02 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d00:	e08b      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d06:	e088      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d08:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d109      	bne.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d14:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	08db      	lsrs	r3, r3, #3
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d26:	e078      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d2c:	e075      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d2e:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3a:	d102      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d40:	e06b      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d46:	e068      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d54:	d102      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d5a:	e05e      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d60:	e05b      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d66:	e058      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d68:	58024400 	.word	0x58024400
 8006d6c:	03d09000 	.word	0x03d09000
 8006d70:	003d0900 	.word	0x003d0900
 8006d74:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d7c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006d80:	430b      	orrs	r3, r1
 8006d82:	d148      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006d84:	4b27      	ldr	r3, [pc, #156]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d94:	d02a      	beq.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d9c:	d838      	bhi.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006daa:	d00d      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006dac:	e030      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006dae:	4b1d      	ldr	r3, [pc, #116]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dba:	d102      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006dbc:	4b1a      	ldr	r3, [pc, #104]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dc0:	e02b      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc6:	e028      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dc8:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dd4:	d107      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fae4 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de4:	e019      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dea:	e016      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df8:	d107      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dfa:	f107 0318 	add.w	r3, r7, #24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 f82a 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e08:	e007      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e0e:	e004      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e14:	e001      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3740      	adds	r7, #64	; 0x40
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	58024400 	.word	0x58024400
 8006e28:	017d7840 	.word	0x017d7840

08006e2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e30:	f7fd ffd6 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8006e34:	4602      	mov	r2, r0
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	091b      	lsrs	r3, r3, #4
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	4904      	ldr	r1, [pc, #16]	; (8006e54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e42:	5ccb      	ldrb	r3, [r1, r3]
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	58024400 	.word	0x58024400
 8006e54:	0800df08 	.word	0x0800df08

08006e58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	; 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e60:	4ba1      	ldr	r3, [pc, #644]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e6a:	4b9f      	ldr	r3, [pc, #636]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	0b1b      	lsrs	r3, r3, #12
 8006e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e76:	4b9c      	ldr	r3, [pc, #624]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	091b      	lsrs	r3, r3, #4
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e82:	4b99      	ldr	r3, [pc, #612]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e86:	08db      	lsrs	r3, r3, #3
 8006e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8111 	beq.w	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	f000 8083 	beq.w	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	f200 80a1 	bhi.w	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d056      	beq.n	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ec2:	e099      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec4:	4b88      	ldr	r3, [pc, #544]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d02d      	beq.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ed0:	4b85      	ldr	r3, [pc, #532]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	4a84      	ldr	r2, [pc, #528]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b7b      	ldr	r3, [pc, #492]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f2a:	e087      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b6a      	ldr	r3, [pc, #424]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f52:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f6e:	e065      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b59      	ldr	r3, [pc, #356]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb2:	e043      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b48      	ldr	r3, [pc, #288]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff6:	e021      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800703a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800703c:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	0a5b      	lsrs	r3, r3, #9
 8007042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007056:	edd7 6a07 	vldr	s13, [r7, #28]
 800705a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007062:	ee17 2a90 	vmov	r2, s15
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800706a:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	0c1b      	lsrs	r3, r3, #16
 8007070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007080:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007084:	edd7 6a07 	vldr	s13, [r7, #28]
 8007088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007090:	ee17 2a90 	vmov	r2, s15
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	0e1b      	lsrs	r3, r3, #24
 800709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070be:	ee17 2a90 	vmov	r2, s15
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070c6:	e008      	b.n	80070da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
}
 80070da:	bf00      	nop
 80070dc:	3724      	adds	r7, #36	; 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	58024400 	.word	0x58024400
 80070ec:	03d09000 	.word	0x03d09000
 80070f0:	46000000 	.word	0x46000000
 80070f4:	4c742400 	.word	0x4c742400
 80070f8:	4a742400 	.word	0x4a742400
 80070fc:	4bbebc20 	.word	0x4bbebc20

08007100 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	; 0x24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007108:	4ba1      	ldr	r3, [pc, #644]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007112:	4b9f      	ldr	r3, [pc, #636]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	0d1b      	lsrs	r3, r3, #20
 8007118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800711c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800711e:	4b9c      	ldr	r3, [pc, #624]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800712a:	4b99      	ldr	r3, [pc, #612]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 8111 	beq.w	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b02      	cmp	r3, #2
 8007152:	f000 8083 	beq.w	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b02      	cmp	r3, #2
 800715a:	f200 80a1 	bhi.w	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d056      	beq.n	8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800716a:	e099      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800716c:	4b88      	ldr	r3, [pc, #544]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d02d      	beq.n	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007178:	4b85      	ldr	r3, [pc, #532]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	4a84      	ldr	r2, [pc, #528]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
 8007188:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a2:	4b7b      	ldr	r3, [pc, #492]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071d2:	e087      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b6a      	ldr	r3, [pc, #424]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007216:	e065      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b59      	ldr	r3, [pc, #356]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725a:	e043      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b48      	ldr	r3, [pc, #288]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729e:	e021      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b37      	ldr	r3, [pc, #220]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072e4:	4b2a      	ldr	r3, [pc, #168]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	0a5b      	lsrs	r3, r3, #9
 80072ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730a:	ee17 2a90 	vmov	r2, s15
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007312:	4b1f      	ldr	r3, [pc, #124]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	0c1b      	lsrs	r3, r3, #16
 8007318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731c:	ee07 3a90 	vmov	s15, r3
 8007320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007338:	ee17 2a90 	vmov	r2, s15
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007340:	4b13      	ldr	r3, [pc, #76]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	0e1b      	lsrs	r3, r3, #24
 8007346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735a:	edd7 6a07 	vldr	s13, [r7, #28]
 800735e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007366:	ee17 2a90 	vmov	r2, s15
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800736e:	e008      	b.n	8007382 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
}
 8007382:	bf00      	nop
 8007384:	3724      	adds	r7, #36	; 0x24
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	58024400 	.word	0x58024400
 8007394:	03d09000 	.word	0x03d09000
 8007398:	46000000 	.word	0x46000000
 800739c:	4c742400 	.word	0x4c742400
 80073a0:	4a742400 	.word	0x4a742400
 80073a4:	4bbebc20 	.word	0x4bbebc20

080073a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	; 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073b0:	4ba0      	ldr	r3, [pc, #640]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	f003 0303 	and.w	r3, r3, #3
 80073b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80073ba:	4b9e      	ldr	r3, [pc, #632]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073be:	091b      	lsrs	r3, r3, #4
 80073c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073c6:	4b9b      	ldr	r3, [pc, #620]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073d0:	4b98      	ldr	r3, [pc, #608]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d4:	08db      	lsrs	r3, r3, #3
 80073d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	fb02 f303 	mul.w	r3, r2, r3
 80073e0:	ee07 3a90 	vmov	s15, r3
 80073e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 8111 	beq.w	8007616 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	f000 8083 	beq.w	8007502 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	f200 80a1 	bhi.w	8007546 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d056      	beq.n	80074be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007410:	e099      	b.n	8007546 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007412:	4b88      	ldr	r3, [pc, #544]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b00      	cmp	r3, #0
 800741c:	d02d      	beq.n	800747a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800741e:	4b85      	ldr	r3, [pc, #532]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	08db      	lsrs	r3, r3, #3
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	4a83      	ldr	r2, [pc, #524]	; (8007638 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800742a:	fa22 f303 	lsr.w	r3, r2, r3
 800742e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	ee07 3a90 	vmov	s15, r3
 8007440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007448:	4b7a      	ldr	r3, [pc, #488]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007458:	ed97 6a03 	vldr	s12, [r7, #12]
 800745c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800763c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007474:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007478:	e087      	b.n	800758a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	ee07 3a90 	vmov	s15, r3
 8007480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007484:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007640 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748c:	4b69      	ldr	r3, [pc, #420]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749c:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800763c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074bc:	e065      	b.n	800758a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	ee07 3a90 	vmov	s15, r3
 80074c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007644 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80074cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d0:	4b58      	ldr	r3, [pc, #352]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800763c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007500:	e043      	b.n	800758a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	ee07 3a90 	vmov	s15, r3
 8007508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007514:	4b47      	ldr	r3, [pc, #284]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007524:	ed97 6a03 	vldr	s12, [r7, #12]
 8007528:	eddf 5a44 	vldr	s11, [pc, #272]	; 800763c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800752c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007540:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007544:	e021      	b.n	800758a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	ee07 3a90 	vmov	s15, r3
 800754c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007550:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007640 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007558:	4b36      	ldr	r3, [pc, #216]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007568:	ed97 6a03 	vldr	s12, [r7, #12]
 800756c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800763c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007584:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007588:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800758a:	4b2a      	ldr	r3, [pc, #168]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	0a5b      	lsrs	r3, r3, #9
 8007590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b0:	ee17 2a90 	vmov	r2, s15
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80075b8:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075bc:	0c1b      	lsrs	r3, r3, #16
 80075be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075de:	ee17 2a90 	vmov	r2, s15
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	0e1b      	lsrs	r3, r3, #24
 80075ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007600:	edd7 6a07 	vldr	s13, [r7, #28]
 8007604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800760c:	ee17 2a90 	vmov	r2, s15
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007614:	e008      	b.n	8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	609a      	str	r2, [r3, #8]
}
 8007628:	bf00      	nop
 800762a:	3724      	adds	r7, #36	; 0x24
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	58024400 	.word	0x58024400
 8007638:	03d09000 	.word	0x03d09000
 800763c:	46000000 	.word	0x46000000
 8007640:	4c742400 	.word	0x4c742400
 8007644:	4a742400 	.word	0x4a742400
 8007648:	4bbebc20 	.word	0x4bbebc20

0800764c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800765a:	4b53      	ldr	r3, [pc, #332]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b03      	cmp	r3, #3
 8007664:	d101      	bne.n	800766a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e099      	b.n	800779e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800766a:	4b4f      	ldr	r3, [pc, #316]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a4e      	ldr	r2, [pc, #312]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007670:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007676:	f7fa feef 	bl	8002458 <HAL_GetTick>
 800767a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800767c:	e008      	b.n	8007690 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800767e:	f7fa feeb 	bl	8002458 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e086      	b.n	800779e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007690:	4b45      	ldr	r3, [pc, #276]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f0      	bne.n	800767e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800769c:	4b42      	ldr	r3, [pc, #264]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	031b      	lsls	r3, r3, #12
 80076aa:	493f      	ldr	r1, [pc, #252]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	628b      	str	r3, [r1, #40]	; 0x28
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	3b01      	subs	r3, #1
 80076c0:	025b      	lsls	r3, r3, #9
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	041b      	lsls	r3, r3, #16
 80076ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	3b01      	subs	r3, #1
 80076da:	061b      	lsls	r3, r3, #24
 80076dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076e0:	4931      	ldr	r1, [pc, #196]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076e6:	4b30      	ldr	r3, [pc, #192]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	492d      	ldr	r1, [pc, #180]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076f8:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	f023 0220 	bic.w	r2, r3, #32
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	4928      	ldr	r1, [pc, #160]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007706:	4313      	orrs	r3, r2
 8007708:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800770a:	4b27      	ldr	r3, [pc, #156]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	4a26      	ldr	r2, [pc, #152]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007710:	f023 0310 	bic.w	r3, r3, #16
 8007714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007716:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800771a:	4b24      	ldr	r3, [pc, #144]	; (80077ac <RCCEx_PLL2_Config+0x160>)
 800771c:	4013      	ands	r3, r2
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	69d2      	ldr	r2, [r2, #28]
 8007722:	00d2      	lsls	r2, r2, #3
 8007724:	4920      	ldr	r1, [pc, #128]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800772a:	4b1f      	ldr	r3, [pc, #124]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	4a1e      	ldr	r2, [pc, #120]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007730:	f043 0310 	orr.w	r3, r3, #16
 8007734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800773c:	4b1a      	ldr	r3, [pc, #104]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	4a19      	ldr	r2, [pc, #100]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007746:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007748:	e00f      	b.n	800776a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d106      	bne.n	800775e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007750:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	4a14      	ldr	r2, [pc, #80]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800775a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800775c:	e005      	b.n	800776a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007768:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800776a:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a0e      	ldr	r2, [pc, #56]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007776:	f7fa fe6f 	bl	8002458 <HAL_GetTick>
 800777a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800777c:	e008      	b.n	8007790 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800777e:	f7fa fe6b 	bl	8002458 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e006      	b.n	800779e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007790:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <RCCEx_PLL2_Config+0x15c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0f0      	beq.n	800777e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	58024400 	.word	0x58024400
 80077ac:	ffff0007 	.word	0xffff0007

080077b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077be:	4b53      	ldr	r3, [pc, #332]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d101      	bne.n	80077ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e099      	b.n	8007902 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077ce:	4b4f      	ldr	r3, [pc, #316]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a4e      	ldr	r2, [pc, #312]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80077d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077da:	f7fa fe3d 	bl	8002458 <HAL_GetTick>
 80077de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077e0:	e008      	b.n	80077f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077e2:	f7fa fe39 	bl	8002458 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e086      	b.n	8007902 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077f4:	4b45      	ldr	r3, [pc, #276]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f0      	bne.n	80077e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007800:	4b42      	ldr	r3, [pc, #264]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	051b      	lsls	r3, r3, #20
 800780e:	493f      	ldr	r1, [pc, #252]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 8007810:	4313      	orrs	r3, r2
 8007812:	628b      	str	r3, [r1, #40]	; 0x28
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	3b01      	subs	r3, #1
 800781a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	3b01      	subs	r3, #1
 8007824:	025b      	lsls	r3, r3, #9
 8007826:	b29b      	uxth	r3, r3
 8007828:	431a      	orrs	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	3b01      	subs	r3, #1
 8007830:	041b      	lsls	r3, r3, #16
 8007832:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	3b01      	subs	r3, #1
 800783e:	061b      	lsls	r3, r3, #24
 8007840:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007844:	4931      	ldr	r1, [pc, #196]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 8007846:	4313      	orrs	r3, r2
 8007848:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800784a:	4b30      	ldr	r3, [pc, #192]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	492d      	ldr	r1, [pc, #180]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 8007858:	4313      	orrs	r3, r2
 800785a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800785c:	4b2b      	ldr	r3, [pc, #172]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	4928      	ldr	r1, [pc, #160]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 800786a:	4313      	orrs	r3, r2
 800786c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800786e:	4b27      	ldr	r3, [pc, #156]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 8007870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007872:	4a26      	ldr	r2, [pc, #152]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 8007874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007878:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800787a:	4b24      	ldr	r3, [pc, #144]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 800787c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787e:	4b24      	ldr	r3, [pc, #144]	; (8007910 <RCCEx_PLL3_Config+0x160>)
 8007880:	4013      	ands	r3, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	69d2      	ldr	r2, [r2, #28]
 8007886:	00d2      	lsls	r2, r2, #3
 8007888:	4920      	ldr	r1, [pc, #128]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800788e:	4b1f      	ldr	r3, [pc, #124]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	4a1e      	ldr	r2, [pc, #120]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 8007894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078a0:	4b1a      	ldr	r3, [pc, #104]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	4a19      	ldr	r2, [pc, #100]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80078a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078ac:	e00f      	b.n	80078ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d106      	bne.n	80078c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078b4:	4b15      	ldr	r3, [pc, #84]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	4a14      	ldr	r2, [pc, #80]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80078ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078c0:	e005      	b.n	80078ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078c2:	4b12      	ldr	r3, [pc, #72]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	4a11      	ldr	r2, [pc, #68]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80078c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078ce:	4b0f      	ldr	r3, [pc, #60]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a0e      	ldr	r2, [pc, #56]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80078d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078da:	f7fa fdbd 	bl	8002458 <HAL_GetTick>
 80078de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078e0:	e008      	b.n	80078f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078e2:	f7fa fdb9 	bl	8002458 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e006      	b.n	8007902 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <RCCEx_PLL3_Config+0x15c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	58024400 	.word	0x58024400
 8007910:	ffff0007 	.word	0xffff0007

08007914 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08a      	sub	sp, #40	; 0x28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e075      	b.n	8007a12 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fa fb1f 	bl	8001f7c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2204      	movs	r2, #4
 8007942:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f868 	bl	8007a1c <HAL_SD_InitCard>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e05d      	b.n	8007a12 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007956:	f107 0308 	add.w	r3, r7, #8
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fdb5 	bl	80084cc <HAL_SD_GetCardStatus>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e052      	b.n	8007a12 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800796c:	7e3b      	ldrb	r3, [r7, #24]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007972:	7e7b      	ldrb	r3, [r7, #25]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10a      	bne.n	8007996 <HAL_SD_Init+0x82>
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <HAL_SD_Init+0x78>
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007992:	659a      	str	r2, [r3, #88]	; 0x58
 8007994:	e00b      	b.n	80079ae <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799a:	2b01      	cmp	r3, #1
 800799c:	d104      	bne.n	80079a8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079a4:	659a      	str	r2, [r3, #88]	; 0x58
 80079a6:	e002      	b.n	80079ae <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fe73 	bl	80086a0 <HAL_SD_ConfigWideBusOperation>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e026      	b.n	8007a12 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80079c4:	f7fa fd48 	bl	8002458 <HAL_GetTick>
 80079c8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079ca:	e011      	b.n	80079f0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079cc:	f7fa fd44 	bl	8002458 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d109      	bne.n	80079f0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e010      	b.n	8007a12 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 ff67 	bl	80088c4 <HAL_SD_GetCardState>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d1e7      	bne.n	80079cc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3728      	adds	r7, #40	; 0x28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a1c:	b590      	push	{r4, r7, lr}
 8007a1e:	b08d      	sub	sp, #52	; 0x34
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a34:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007a38:	f04f 0100 	mov.w	r1, #0
 8007a3c:	f7fe fc76 	bl	800632c <HAL_RCCEx_GetPeriphCLKFreq>
 8007a40:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d109      	bne.n	8007a5c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a56:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e070      	b.n	8007b3e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	0a1b      	lsrs	r3, r3, #8
 8007a60:	4a39      	ldr	r2, [pc, #228]	; (8007b48 <HAL_SD_InitCard+0x12c>)
 8007a62:	fba2 2303 	umull	r2, r3, r2, r3
 8007a66:	091b      	lsrs	r3, r3, #4
 8007a68:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681c      	ldr	r4, [r3, #0]
 8007a6e:	466a      	mov	r2, sp
 8007a70:	f107 0318 	add.w	r3, r7, #24
 8007a74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a78:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a7c:	f107 030c 	add.w	r3, r7, #12
 8007a80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a82:	4620      	mov	r0, r4
 8007a84:	f002 fc5c 	bl	800a340 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f002 fc9f 	bl	800a3d0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d007      	beq.n	8007aba <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007aaa:	4a28      	ldr	r2, [pc, #160]	; (8007b4c <HAL_SD_InitCard+0x130>)
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fa fcdb 	bl	8002470 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fff0 	bl	8008aa0 <SD_PowerON>
 8007ac0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e02e      	b.n	8007b3e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 ff0f 	bl	8008904 <SD_InitCard>
 8007ae6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e01b      	b.n	8007b3e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f002 fcf4 	bl	800a4fc <SDMMC_CmdBlockLength>
 8007b14:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00f      	beq.n	8007b3c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a0b      	ldr	r2, [pc, #44]	; (8007b50 <HAL_SD_InitCard+0x134>)
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	372c      	adds	r7, #44	; 0x2c
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd90      	pop	{r4, r7, pc}
 8007b46:	bf00      	nop
 8007b48:	014f8b59 	.word	0x014f8b59
 8007b4c:	00012110 	.word	0x00012110
 8007b50:	1fe00fff 	.word	0x1fe00fff

08007b54 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b092      	sub	sp, #72	; 0x48
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b62:	f7fa fc79 	bl	8002458 <HAL_GetTick>
 8007b66:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d107      	bne.n	8007b86 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e167      	b.n	8007e56 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	f040 815a 	bne.w	8007e48 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	441a      	add	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d907      	bls.n	8007bb8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e14e      	b.n	8007e56 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d002      	beq.n	8007bd6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	025b      	lsls	r3, r3, #9
 8007bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	025b      	lsls	r3, r3, #9
 8007be0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007be2:	2390      	movs	r3, #144	; 0x90
 8007be4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007be6:	2302      	movs	r3, #2
 8007be8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f107 0214 	add.w	r2, r7, #20
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f002 fc51 	bl	800a4a4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c10:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d90a      	bls.n	8007c2e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c24:	4618      	mov	r0, r3
 8007c26:	f002 fcaf 	bl	800a588 <SDMMC_CmdReadMultiBlock>
 8007c2a:	6478      	str	r0, [r7, #68]	; 0x44
 8007c2c:	e009      	b.n	8007c42 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f002 fc81 	bl	800a542 <SDMMC_CmdReadSingleBlock>
 8007c40:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d012      	beq.n	8007c6e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a84      	ldr	r2, [pc, #528]	; (8007e60 <HAL_SD_ReadBlocks+0x30c>)
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c56:	431a      	orrs	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e0f3      	b.n	8007e56 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007c72:	e058      	b.n	8007d26 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d033      	beq.n	8007cea <HAL_SD_ReadBlocks+0x196>
 8007c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c84:	2b1f      	cmp	r3, #31
 8007c86:	d930      	bls.n	8007cea <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c8c:	e027      	b.n	8007cde <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f002 fb7e 	bl	800a394 <SDMMC_ReadFIFO>
 8007c98:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	0a1b      	lsrs	r3, r3, #8
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	0c1b      	lsrs	r3, r3, #16
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cca:	0e1b      	lsrs	r3, r3, #24
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8007cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cda:	3301      	adds	r3, #1
 8007cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8007cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce0:	2b07      	cmp	r3, #7
 8007ce2:	d9d4      	bls.n	8007c8e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce6:	3b20      	subs	r3, #32
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007cea:	f7fa fbb5 	bl	8002458 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d902      	bls.n	8007d00 <HAL_SD_ReadBlocks+0x1ac>
 8007cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d112      	bne.n	8007d26 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a56      	ldr	r2, [pc, #344]	; (8007e60 <HAL_SD_ReadBlocks+0x30c>)
 8007d06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e097      	b.n	8007e56 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d09f      	beq.n	8007c74 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d42:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d022      	beq.n	8007d98 <HAL_SD_ReadBlocks+0x244>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d91f      	bls.n	8007d98 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d01b      	beq.n	8007d98 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f002 fc79 	bl	800a65c <SDMMC_CmdStopTransfer>
 8007d6a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d012      	beq.n	8007d98 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a3a      	ldr	r2, [pc, #232]	; (8007e60 <HAL_SD_ReadBlocks+0x30c>)
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d80:	431a      	orrs	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e05e      	b.n	8007e56 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9e:	f003 0308 	and.w	r3, r3, #8
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d012      	beq.n	8007dcc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a2d      	ldr	r2, [pc, #180]	; (8007e60 <HAL_SD_ReadBlocks+0x30c>)
 8007dac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db2:	f043 0208 	orr.w	r2, r3, #8
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e044      	b.n	8007e56 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d012      	beq.n	8007e00 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a20      	ldr	r2, [pc, #128]	; (8007e60 <HAL_SD_ReadBlocks+0x30c>)
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de6:	f043 0202 	orr.w	r2, r3, #2
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e02a      	b.n	8007e56 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d012      	beq.n	8007e34 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <HAL_SD_ReadBlocks+0x30c>)
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f043 0220 	orr.w	r2, r3, #32
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e010      	b.n	8007e56 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a0a      	ldr	r2, [pc, #40]	; (8007e64 <HAL_SD_ReadBlocks+0x310>)
 8007e3a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	e006      	b.n	8007e56 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
  }
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3748      	adds	r7, #72	; 0x48
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	1fe00fff 	.word	0x1fe00fff
 8007e64:	18000f3a 	.word	0x18000f3a

08007e68 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b092      	sub	sp, #72	; 0x48
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e76:	f7fa faef 	bl	8002458 <HAL_GetTick>
 8007e7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e16b      	b.n	8008172 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	f040 815e 	bne.w	8008164 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	441a      	add	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d907      	bls.n	8007ecc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e152      	b.n	8008172 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2203      	movs	r2, #3
 8007ed0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d002      	beq.n	8007eea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	025b      	lsls	r3, r3, #9
 8007ee8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007eea:	f04f 33ff 	mov.w	r3, #4294967295
 8007eee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	025b      	lsls	r3, r3, #9
 8007ef4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ef6:	2390      	movs	r3, #144	; 0x90
 8007ef8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007efa:	2300      	movs	r3, #0
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007f02:	2300      	movs	r3, #0
 8007f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f107 0218 	add.w	r2, r7, #24
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 fac7 	bl	800a4a4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f24:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d90a      	bls.n	8007f42 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f002 fb6b 	bl	800a614 <SDMMC_CmdWriteMultiBlock>
 8007f3e:	6478      	str	r0, [r7, #68]	; 0x44
 8007f40:	e009      	b.n	8007f56 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2210      	movs	r2, #16
 8007f46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f002 fb3d 	bl	800a5ce <SDMMC_CmdWriteSingleBlock>
 8007f54:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d012      	beq.n	8007f82 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a86      	ldr	r2, [pc, #536]	; (800817c <HAL_SD_WriteBlocks+0x314>)
 8007f62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e0f7      	b.n	8008172 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007f86:	e05c      	b.n	8008042 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d037      	beq.n	8008006 <HAL_SD_WriteBlocks+0x19e>
 8007f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f98:	2b1f      	cmp	r3, #31
 8007f9a:	d934      	bls.n	8008006 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8007fa0:	e02b      	b.n	8007ffa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007faa:	3301      	adds	r3, #1
 8007fac:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	021a      	lsls	r2, r3, #8
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	041a      	lsls	r2, r3, #16
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fce:	3301      	adds	r3, #1
 8007fd0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	061a      	lsls	r2, r3, #24
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f107 0214 	add.w	r2, r7, #20
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f002 f9dd 	bl	800a3ae <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8007ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffc:	2b07      	cmp	r3, #7
 8007ffe:	d9d0      	bls.n	8007fa2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008002:	3b20      	subs	r3, #32
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008006:	f7fa fa27 	bl	8002458 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008012:	429a      	cmp	r2, r3
 8008014:	d902      	bls.n	800801c <HAL_SD_WriteBlocks+0x1b4>
 8008016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008018:	2b00      	cmp	r3, #0
 800801a:	d112      	bne.n	8008042 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a56      	ldr	r2, [pc, #344]	; (800817c <HAL_SD_WriteBlocks+0x314>)
 8008022:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800802a:	431a      	orrs	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e097      	b.n	8008172 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008048:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800804c:	2b00      	cmp	r3, #0
 800804e:	d09b      	beq.n	8007f88 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800805e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d022      	beq.n	80080b4 <HAL_SD_WriteBlocks+0x24c>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d91f      	bls.n	80080b4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	2b03      	cmp	r3, #3
 800807a:	d01b      	beq.n	80080b4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f002 faeb 	bl	800a65c <SDMMC_CmdStopTransfer>
 8008086:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800808a:	2b00      	cmp	r3, #0
 800808c:	d012      	beq.n	80080b4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3a      	ldr	r2, [pc, #232]	; (800817c <HAL_SD_WriteBlocks+0x314>)
 8008094:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800809a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800809c:	431a      	orrs	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e05e      	b.n	8008172 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ba:	f003 0308 	and.w	r3, r3, #8
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d012      	beq.n	80080e8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a2d      	ldr	r2, [pc, #180]	; (800817c <HAL_SD_WriteBlocks+0x314>)
 80080c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ce:	f043 0208 	orr.w	r2, r3, #8
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e044      	b.n	8008172 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d012      	beq.n	800811c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a20      	ldr	r2, [pc, #128]	; (800817c <HAL_SD_WriteBlocks+0x314>)
 80080fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008102:	f043 0202 	orr.w	r2, r3, #2
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e02a      	b.n	8008172 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	f003 0310 	and.w	r3, r3, #16
 8008126:	2b00      	cmp	r3, #0
 8008128:	d012      	beq.n	8008150 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a13      	ldr	r2, [pc, #76]	; (800817c <HAL_SD_WriteBlocks+0x314>)
 8008130:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008136:	f043 0210 	orr.w	r2, r3, #16
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e010      	b.n	8008172 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a0a      	ldr	r2, [pc, #40]	; (8008180 <HAL_SD_WriteBlocks+0x318>)
 8008156:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	e006      	b.n	8008172 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
  }
}
 8008172:	4618      	mov	r0, r3
 8008174:	3748      	adds	r7, #72	; 0x48
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	1fe00fff 	.word	0x1fe00fff
 8008180:	18000f3a 	.word	0x18000f3a

08008184 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008192:	0f9b      	lsrs	r3, r3, #30
 8008194:	b2da      	uxtb	r2, r3
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800819e:	0e9b      	lsrs	r3, r3, #26
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b0:	0e1b      	lsrs	r3, r3, #24
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e4:	0d1b      	lsrs	r3, r3, #20
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f0:	0c1b      	lsrs	r3, r3, #16
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008202:	0bdb      	lsrs	r3, r3, #15
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	b2da      	uxtb	r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008214:	0b9b      	lsrs	r3, r3, #14
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	b2da      	uxtb	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008226:	0b5b      	lsrs	r3, r3, #13
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	b2da      	uxtb	r2, r3
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008238:	0b1b      	lsrs	r3, r3, #12
 800823a:	b2db      	uxtb	r3, r3
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	b2da      	uxtb	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2200      	movs	r2, #0
 800824a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	2b00      	cmp	r3, #0
 8008252:	d163      	bne.n	800831c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008258:	009a      	lsls	r2, r3, #2
 800825a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800825e:	4013      	ands	r3, r2
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008264:	0f92      	lsrs	r2, r2, #30
 8008266:	431a      	orrs	r2, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008270:	0edb      	lsrs	r3, r3, #27
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	b2da      	uxtb	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008282:	0e1b      	lsrs	r3, r3, #24
 8008284:	b2db      	uxtb	r3, r3
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	b2da      	uxtb	r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008294:	0d5b      	lsrs	r3, r3, #21
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	b2da      	uxtb	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082a6:	0c9b      	lsrs	r3, r3, #18
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b8:	0bdb      	lsrs	r3, r3, #15
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	7e1b      	ldrb	r3, [r3, #24]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	3302      	adds	r3, #2
 80082dc:	2201      	movs	r2, #1
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80082e6:	fb03 f202 	mul.w	r2, r3, r2
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	7a1b      	ldrb	r3, [r3, #8]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f003 030f 	and.w	r3, r3, #15
 80082f8:	2201      	movs	r2, #1
 80082fa:	409a      	lsls	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008308:	0a52      	lsrs	r2, r2, #9
 800830a:	fb03 f202 	mul.w	r2, r3, r2
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008318:	655a      	str	r2, [r3, #84]	; 0x54
 800831a:	e031      	b.n	8008380 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008320:	2b01      	cmp	r3, #1
 8008322:	d11d      	bne.n	8008360 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008328:	041b      	lsls	r3, r3, #16
 800832a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008332:	0c1b      	lsrs	r3, r3, #16
 8008334:	431a      	orrs	r2, r3
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	3301      	adds	r3, #1
 8008340:	029a      	lsls	r2, r3, #10
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008354:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	655a      	str	r2, [r3, #84]	; 0x54
 800835e:	e00f      	b.n	8008380 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a58      	ldr	r2, [pc, #352]	; (80084c8 <HAL_SD_GetCardCSD+0x344>)
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e09d      	b.n	80084bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008384:	0b9b      	lsrs	r3, r3, #14
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	b2da      	uxtb	r2, r3
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008396:	09db      	lsrs	r3, r3, #7
 8008398:	b2db      	uxtb	r3, r3
 800839a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083b8:	0fdb      	lsrs	r3, r3, #31
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083c4:	0f5b      	lsrs	r3, r3, #29
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083d6:	0e9b      	lsrs	r3, r3, #26
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083e8:	0d9b      	lsrs	r3, r3, #22
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083fa:	0d5b      	lsrs	r3, r3, #21
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	b2da      	uxtb	r2, r3
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008416:	0c1b      	lsrs	r3, r3, #16
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	b2da      	uxtb	r2, r3
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800842a:	0bdb      	lsrs	r3, r3, #15
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	b2da      	uxtb	r2, r3
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800843e:	0b9b      	lsrs	r3, r3, #14
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	b2da      	uxtb	r2, r3
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008452:	0b5b      	lsrs	r3, r3, #13
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	b2da      	uxtb	r2, r3
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008466:	0b1b      	lsrs	r3, r3, #12
 8008468:	b2db      	uxtb	r3, r3
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	b2da      	uxtb	r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800847a:	0a9b      	lsrs	r3, r3, #10
 800847c:	b2db      	uxtb	r3, r3
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	b2da      	uxtb	r2, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800848e:	0a1b      	lsrs	r3, r3, #8
 8008490:	b2db      	uxtb	r3, r3
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	b2da      	uxtb	r2, r3
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084a2:	085b      	lsrs	r3, r3, #1
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	1fe00fff 	.word	0x1fe00fff

080084cc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b094      	sub	sp, #80	; 0x50
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d101      	bne.n	80084ec <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0a7      	b.n	800863c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80084ec:	f107 0308 	add.w	r3, r7, #8
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fb62 	bl	8008bbc <SD_SendSDStatus>
 80084f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80084fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d011      	beq.n	8008524 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a4f      	ldr	r2, [pc, #316]	; (8008644 <HAL_SD_GetCardStatus+0x178>)
 8008506:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800850c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008522:	e070      	b.n	8008606 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	099b      	lsrs	r3, r3, #6
 8008528:	b2db      	uxtb	r3, r3
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	b2da      	uxtb	r2, r3
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	095b      	lsrs	r3, r3, #5
 8008538:	b2db      	uxtb	r3, r3
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	b2da      	uxtb	r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	0a1b      	lsrs	r3, r3, #8
 8008548:	b29b      	uxth	r3, r3
 800854a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800854e:	b29a      	uxth	r2, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	0e1b      	lsrs	r3, r3, #24
 8008554:	b29b      	uxth	r3, r3
 8008556:	4313      	orrs	r3, r2
 8008558:	b29a      	uxth	r2, r3
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	061a      	lsls	r2, r3, #24
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800856a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	0a1b      	lsrs	r3, r3, #8
 8008570:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008574:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	0e1b      	lsrs	r3, r3, #24
 800857a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	b2da      	uxtb	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	0a1b      	lsrs	r3, r3, #8
 800858c:	b2da      	uxtb	r2, r3
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	0d1b      	lsrs	r3, r3, #20
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	b2da      	uxtb	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	0c1b      	lsrs	r3, r3, #16
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	0a9b      	lsrs	r3, r3, #10
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	0a1b      	lsrs	r3, r3, #8
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 0303 	and.w	r3, r3, #3
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	091b      	lsrs	r3, r3, #4
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 030f 	and.w	r3, r3, #15
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	0e1b      	lsrs	r3, r3, #24
 8008600:	b2da      	uxtb	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800860e:	4618      	mov	r0, r3
 8008610:	f001 ff74 	bl	800a4fc <SDMMC_CmdBlockLength>
 8008614:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00d      	beq.n	8008638 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a08      	ldr	r2, [pc, #32]	; (8008644 <HAL_SD_GetCardStatus+0x178>)
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008628:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008638:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800863c:	4618      	mov	r0, r3
 800863e:	3750      	adds	r7, #80	; 0x50
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	1fe00fff 	.word	0x1fe00fff

08008648 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80086a0:	b590      	push	{r4, r7, lr}
 80086a2:	b08d      	sub	sp, #52	; 0x34
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2203      	movs	r2, #3
 80086b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d02e      	beq.n	800871e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c6:	d106      	bne.n	80086d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	635a      	str	r2, [r3, #52]	; 0x34
 80086d4:	e029      	b.n	800872a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086dc:	d10a      	bne.n	80086f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fb64 	bl	8008dac <SD_WideBus_Enable>
 80086e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	635a      	str	r2, [r3, #52]	; 0x34
 80086f2:	e01a      	b.n	800872a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10a      	bne.n	8008710 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fba1 	bl	8008e42 <SD_WideBus_Disable>
 8008700:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	635a      	str	r2, [r3, #52]	; 0x34
 800870e:	e00c      	b.n	800872a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008714:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	635a      	str	r2, [r3, #52]	; 0x34
 800871c:	e005      	b.n	800872a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008722:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a5f      	ldr	r2, [pc, #380]	; (80088b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008738:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008740:	e096      	b.n	8008870 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008742:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008746:	f04f 0100 	mov.w	r1, #0
 800874a:	f7fd fdef 	bl	800632c <HAL_RCCEx_GetPeriphCLKFreq>
 800874e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 8083 	beq.w	800885e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	695a      	ldr	r2, [r3, #20]
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	4950      	ldr	r1, [pc, #320]	; (80088b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008776:	fba1 1303 	umull	r1, r3, r1, r3
 800877a:	0e1b      	lsrs	r3, r3, #24
 800877c:	429a      	cmp	r2, r3
 800877e:	d303      	bcc.n	8008788 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	61bb      	str	r3, [r7, #24]
 8008786:	e05a      	b.n	800883e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008790:	d103      	bne.n	800879a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	61bb      	str	r3, [r7, #24]
 8008798:	e051      	b.n	800883e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087a2:	d126      	bne.n	80087f2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10e      	bne.n	80087ca <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	4a43      	ldr	r2, [pc, #268]	; (80088bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d906      	bls.n	80087c2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	4a40      	ldr	r2, [pc, #256]	; (80088b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80087b8:	fba2 2303 	umull	r2, r3, r2, r3
 80087bc:	0e5b      	lsrs	r3, r3, #25
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	e03d      	b.n	800883e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	61bb      	str	r3, [r7, #24]
 80087c8:	e039      	b.n	800883e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d6:	4a39      	ldr	r2, [pc, #228]	; (80088bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d906      	bls.n	80087ea <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	4a36      	ldr	r2, [pc, #216]	; (80088b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80087e0:	fba2 2303 	umull	r2, r3, r2, r3
 80087e4:	0e5b      	lsrs	r3, r3, #25
 80087e6:	61bb      	str	r3, [r7, #24]
 80087e8:	e029      	b.n	800883e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	61bb      	str	r3, [r7, #24]
 80087f0:	e025      	b.n	800883e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10e      	bne.n	8008818 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4a30      	ldr	r2, [pc, #192]	; (80088c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d906      	bls.n	8008810 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	4a2c      	ldr	r2, [pc, #176]	; (80088b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008806:	fba2 2303 	umull	r2, r3, r2, r3
 800880a:	0e1b      	lsrs	r3, r3, #24
 800880c:	61bb      	str	r3, [r7, #24]
 800880e:	e016      	b.n	800883e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	61bb      	str	r3, [r7, #24]
 8008816:	e012      	b.n	800883e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	4a26      	ldr	r2, [pc, #152]	; (80088c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d906      	bls.n	8008838 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4a22      	ldr	r2, [pc, #136]	; (80088b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	0e1b      	lsrs	r3, r3, #24
 8008834:	61bb      	str	r3, [r7, #24]
 8008836:	e002      	b.n	800883e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681c      	ldr	r4, [r3, #0]
 8008842:	466a      	mov	r2, sp
 8008844:	f107 0314 	add.w	r3, r7, #20
 8008848:	e893 0003 	ldmia.w	r3, {r0, r1}
 800884c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008850:	f107 0308 	add.w	r3, r7, #8
 8008854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008856:	4620      	mov	r0, r4
 8008858:	f001 fd72 	bl	800a340 <SDMMC_Init>
 800885c:	e008      	b.n	8008870 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008862:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008878:	4618      	mov	r0, r3
 800887a:	f001 fe3f 	bl	800a4fc <SDMMC_CmdBlockLength>
 800887e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00c      	beq.n	80088a0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a0a      	ldr	r2, [pc, #40]	; (80088b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800888c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80088a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	372c      	adds	r7, #44	; 0x2c
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd90      	pop	{r4, r7, pc}
 80088b4:	1fe00fff 	.word	0x1fe00fff
 80088b8:	55e63b89 	.word	0x55e63b89
 80088bc:	02faf080 	.word	0x02faf080
 80088c0:	017d7840 	.word	0x017d7840

080088c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80088d0:	f107 030c 	add.w	r3, r7, #12
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fa40 	bl	8008d5c <SD_SendStatus>
 80088dc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	431a      	orrs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	0a5b      	lsrs	r3, r3, #9
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80088fa:	693b      	ldr	r3, [r7, #16]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b090      	sub	sp, #64	; 0x40
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008910:	f7f9 fda2 	bl	8002458 <HAL_GetTick>
 8008914:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fd69 	bl	800a3f2 <SDMMC_GetPowerState>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008926:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800892a:	e0b5      	b.n	8008a98 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	2b03      	cmp	r3, #3
 8008932:	d02e      	beq.n	8008992 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f001 ffb4 	bl	800a8a6 <SDMMC_CmdSendCID>
 800893e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <SD_InitCard+0x46>
    {
      return errorstate;
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	e0a6      	b.n	8008a98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2100      	movs	r1, #0
 8008950:	4618      	mov	r0, r3
 8008952:	f001 fd94 	bl	800a47e <SDMMC_GetResponse>
 8008956:	4602      	mov	r2, r0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2104      	movs	r1, #4
 8008962:	4618      	mov	r0, r3
 8008964:	f001 fd8b 	bl	800a47e <SDMMC_GetResponse>
 8008968:	4602      	mov	r2, r0
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2108      	movs	r1, #8
 8008974:	4618      	mov	r0, r3
 8008976:	f001 fd82 	bl	800a47e <SDMMC_GetResponse>
 800897a:	4602      	mov	r2, r0
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	210c      	movs	r1, #12
 8008986:	4618      	mov	r0, r3
 8008988:	f001 fd79 	bl	800a47e <SDMMC_GetResponse>
 800898c:	4602      	mov	r2, r0
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	2b03      	cmp	r3, #3
 8008998:	d01d      	beq.n	80089d6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800899a:	e019      	b.n	80089d0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f107 020a 	add.w	r2, r7, #10
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 ffbc 	bl	800a924 <SDMMC_CmdSetRelAdd>
 80089ac:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80089ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	e06f      	b.n	8008a98 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80089b8:	f7f9 fd4e 	bl	8002458 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d902      	bls.n	80089d0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80089ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089ce:	e063      	b.n	8008a98 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80089d0:	897b      	ldrh	r3, [r7, #10]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0e2      	beq.n	800899c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d036      	beq.n	8008a4c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80089de:	897b      	ldrh	r3, [r7, #10]
 80089e0:	461a      	mov	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ee:	041b      	lsls	r3, r3, #16
 80089f0:	4619      	mov	r1, r3
 80089f2:	4610      	mov	r0, r2
 80089f4:	f001 ff76 	bl	800a8e4 <SDMMC_CmdSendCSD>
 80089f8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <SD_InitCard+0x100>
    {
      return errorstate;
 8008a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a02:	e049      	b.n	8008a98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 fd37 	bl	800a47e <SDMMC_GetResponse>
 8008a10:	4602      	mov	r2, r0
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2104      	movs	r1, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f001 fd2e 	bl	800a47e <SDMMC_GetResponse>
 8008a22:	4602      	mov	r2, r0
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2108      	movs	r1, #8
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 fd25 	bl	800a47e <SDMMC_GetResponse>
 8008a34:	4602      	mov	r2, r0
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	210c      	movs	r1, #12
 8008a40:	4618      	mov	r0, r3
 8008a42:	f001 fd1c 	bl	800a47e <SDMMC_GetResponse>
 8008a46:	4602      	mov	r2, r0
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2104      	movs	r1, #4
 8008a52:	4618      	mov	r0, r3
 8008a54:	f001 fd13 	bl	800a47e <SDMMC_GetResponse>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	0d1a      	lsrs	r2, r3, #20
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008a60:	f107 030c 	add.w	r3, r7, #12
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff fb8c 	bl	8008184 <HAL_SD_GetCardCSD>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a76:	e00f      	b.n	8008a98 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a80:	041b      	lsls	r3, r3, #16
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f001 fe25 	bl	800a6d4 <SDMMC_CmdSelDesel>
 8008a8a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <SD_InitCard+0x192>
  {
    return errorstate;
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	e000      	b.n	8008a98 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3740      	adds	r7, #64	; 0x40
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f001 fe2e 	bl	800a71a <SDMMC_CmdGoIdleState>
 8008abe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <SD_PowerON+0x2a>
  {
    return errorstate;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	e072      	b.n	8008bb0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f001 fe41 	bl	800a756 <SDMMC_CmdOperCond>
 8008ad4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008adc:	d10d      	bne.n	8008afa <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 fe16 	bl	800a71a <SDMMC_CmdGoIdleState>
 8008aee:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d004      	beq.n	8008b00 <SD_PowerON+0x60>
    {
      return errorstate;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	e05a      	b.n	8008bb0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d137      	bne.n	8008b78 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 fe41 	bl	800a796 <SDMMC_CmdAppCommand>
 8008b14:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d02d      	beq.n	8008b78 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b20:	e046      	b.n	8008bb0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2100      	movs	r1, #0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 fe34 	bl	800a796 <SDMMC_CmdAppCommand>
 8008b2e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <SD_PowerON+0x9a>
    {
      return errorstate;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	e03a      	b.n	8008bb0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	491e      	ldr	r1, [pc, #120]	; (8008bb8 <SD_PowerON+0x118>)
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 fe4b 	bl	800a7dc <SDMMC_CmdAppOperCommand>
 8008b46:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b52:	e02d      	b.n	8008bb0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f001 fc8f 	bl	800a47e <SDMMC_GetResponse>
 8008b60:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	0fdb      	lsrs	r3, r3, #31
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d101      	bne.n	8008b6e <SD_PowerON+0xce>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <SD_PowerON+0xd0>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]

    count++;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3301      	adds	r3, #1
 8008b76:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d802      	bhi.n	8008b88 <SD_PowerON+0xe8>
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0cc      	beq.n	8008b22 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d902      	bls.n	8008b98 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b96:	e00b      	b.n	8008bb0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	c1100000 	.word	0xc1100000

08008bbc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08c      	sub	sp, #48	; 0x30
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bc6:	f7f9 fc47 	bl	8002458 <HAL_GetTick>
 8008bca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 fc51 	bl	800a47e <SDMMC_GetResponse>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008be6:	d102      	bne.n	8008bee <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bec:	e0b0      	b.n	8008d50 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2140      	movs	r1, #64	; 0x40
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f001 fc81 	bl	800a4fc <SDMMC_CmdBlockLength>
 8008bfa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d005      	beq.n	8008c0e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	e0a0      	b.n	8008d50 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c16:	041b      	lsls	r3, r3, #16
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	f001 fdbb 	bl	800a796 <SDMMC_CmdAppCommand>
 8008c20:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	e08d      	b.n	8008d50 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c34:	f04f 33ff 	mov.w	r3, #4294967295
 8008c38:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008c3a:	2340      	movs	r3, #64	; 0x40
 8008c3c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008c3e:	2360      	movs	r3, #96	; 0x60
 8008c40:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c42:	2302      	movs	r3, #2
 8008c44:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f107 0208 	add.w	r2, r7, #8
 8008c56:	4611      	mov	r1, r2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 fc23 	bl	800a4a4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 fea3 	bl	800a9ae <SDMMC_CmdStatusRegister>
 8008c68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d02b      	beq.n	8008cc8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	e069      	b.n	8008d50 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d013      	beq.n	8008cb2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c8e:	e00d      	b.n	8008cac <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 fb7d 	bl	800a394 <SDMMC_ReadFIFO>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	601a      	str	r2, [r3, #0]
        pData++;
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	3301      	adds	r3, #1
 8008caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cae:	2b07      	cmp	r3, #7
 8008cb0:	d9ee      	bls.n	8008c90 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cb2:	f7f9 fbd1 	bl	8002458 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d102      	bne.n	8008cc8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cc6:	e043      	b.n	8008d50 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cce:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0d2      	beq.n	8008c7c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cdc:	f003 0308 	and.w	r3, r3, #8
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008ce4:	2308      	movs	r3, #8
 8008ce6:	e033      	b.n	8008d50 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e02a      	b.n	8008d50 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d00:	f003 0320 	and.w	r3, r3, #32
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d017      	beq.n	8008d38 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008d08:	2320      	movs	r3, #32
 8008d0a:	e021      	b.n	8008d50 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f001 fb3f 	bl	800a394 <SDMMC_ReadFIFO>
 8008d16:	4602      	mov	r2, r0
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	601a      	str	r2, [r3, #0]
    pData++;
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	3304      	adds	r3, #4
 8008d20:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d22:	f7f9 fb99 	bl	8002458 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d30:	d102      	bne.n	8008d38 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d36:	e00b      	b.n	8008d50 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e2      	bne.n	8008d0c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a03      	ldr	r2, [pc, #12]	; (8008d58 <SD_SendSDStatus+0x19c>)
 8008d4c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3730      	adds	r7, #48	; 0x30
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	18000f3a 	.word	0x18000f3a

08008d5c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d70:	e018      	b.n	8008da4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7a:	041b      	lsls	r3, r3, #16
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f001 fdf2 	bl	800a968 <SDMMC_CmdSendStatus>
 8008d84:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	e009      	b.n	8008da4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4618      	mov	r0, r3
 8008d98:	f001 fb71 	bl	800a47e <SDMMC_GetResponse>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	2300      	movs	r3, #0
 8008dba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 fb5b 	bl	800a47e <SDMMC_GetResponse>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd2:	d102      	bne.n	8008dda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008dd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dd8:	e02f      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008dda:	f107 030c 	add.w	r3, r7, #12
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f879 	bl	8008ed8 <SD_FindSCR>
 8008de6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	e023      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01c      	beq.n	8008e36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f001 fcc4 	bl	800a796 <SDMMC_CmdAppCommand>
 8008e0e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	e00f      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2102      	movs	r1, #2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f001 fcfb 	bl	800a81c <SDMMC_CmdBusWidth>
 8008e26:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	e003      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e001      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b086      	sub	sp, #24
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2100      	movs	r1, #0
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f001 fb10 	bl	800a47e <SDMMC_GetResponse>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e68:	d102      	bne.n	8008e70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e6e:	e02f      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e70:	f107 030c 	add.w	r3, r7, #12
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f82e 	bl	8008ed8 <SD_FindSCR>
 8008e7c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	e023      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d01c      	beq.n	8008ecc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9a:	041b      	lsls	r3, r3, #16
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f001 fc79 	bl	800a796 <SDMMC_CmdAppCommand>
 8008ea4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	e00f      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f001 fcb0 	bl	800a81c <SDMMC_CmdBusWidth>
 8008ebc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	e003      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e001      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ecc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08e      	sub	sp, #56	; 0x38
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ee2:	f7f9 fab9 	bl	8002458 <HAL_GetTick>
 8008ee6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008eec:	2300      	movs	r3, #0
 8008eee:	60bb      	str	r3, [r7, #8]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2108      	movs	r1, #8
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 fafc 	bl	800a4fc <SDMMC_CmdBlockLength>
 8008f04:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	e0ad      	b.n	800906c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f18:	041b      	lsls	r3, r3, #16
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f001 fc3a 	bl	800a796 <SDMMC_CmdAppCommand>
 8008f22:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	e09e      	b.n	800906c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f32:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008f34:	2308      	movs	r3, #8
 8008f36:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008f38:	2330      	movs	r3, #48	; 0x30
 8008f3a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f44:	2301      	movs	r3, #1
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f107 0210 	add.w	r2, r7, #16
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 faa6 	bl	800a4a4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 fc80 	bl	800a862 <SDMMC_CmdSendSCR>
 8008f62:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d027      	beq.n	8008fba <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	e07e      	b.n	800906c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d113      	bne.n	8008fa4 <SD_FindSCR+0xcc>
 8008f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d110      	bne.n	8008fa4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 fa04 	bl	800a394 <SDMMC_ReadFIFO>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f001 f9fd 	bl	800a394 <SDMMC_ReadFIFO>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	60fb      	str	r3, [r7, #12]
      index++;
 8008f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fa4:	f7f9 fa58 	bl	8002458 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb2:	d102      	bne.n	8008fba <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fb8:	e058      	b.n	800906c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fc0:	f240 532a 	movw	r3, #1322	; 0x52a
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d0d1      	beq.n	8008f6e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	f003 0308 	and.w	r3, r3, #8
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2208      	movs	r2, #8
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008fe0:	2308      	movs	r3, #8
 8008fe2:	e043      	b.n	800906c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	e036      	b.n	800906c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009004:	f003 0320 	and.w	r3, r3, #32
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2220      	movs	r2, #32
 8009012:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009014:	2320      	movs	r3, #32
 8009016:	e029      	b.n	800906c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a15      	ldr	r2, [pc, #84]	; (8009074 <SD_FindSCR+0x19c>)
 800901e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	061a      	lsls	r2, r3, #24
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800902c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009036:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	0e1b      	lsrs	r3, r3, #24
 800903c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	601a      	str	r2, [r3, #0]
    scr++;
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009044:	3304      	adds	r3, #4
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	061a      	lsls	r2, r3, #24
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	021b      	lsls	r3, r3, #8
 8009050:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009054:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	0a1b      	lsrs	r3, r3, #8
 800905a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800905e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	0e1b      	lsrs	r3, r3, #24
 8009064:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3738      	adds	r7, #56	; 0x38
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	18000f3a 	.word	0x18000f3a

08009078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e042      	b.n	8009110 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009090:	2b00      	cmp	r3, #0
 8009092:	d106      	bne.n	80090a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7f9 f8c1 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2224      	movs	r2, #36	; 0x24
 80090a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0201 	bic.w	r2, r2, #1
 80090b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f8ba 	bl	8009234 <UART_SetConfig>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d101      	bne.n	80090ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e022      	b.n	8009110 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fe16 	bl	8009d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0201 	orr.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fe9d 	bl	8009e48 <UART_CheckIdleState>
 800910e:	4603      	mov	r3, r0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08a      	sub	sp, #40	; 0x28
 800911c:	af02      	add	r7, sp, #8
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	603b      	str	r3, [r7, #0]
 8009124:	4613      	mov	r3, r2
 8009126:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912e:	2b20      	cmp	r3, #32
 8009130:	d17b      	bne.n	800922a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <HAL_UART_Transmit+0x26>
 8009138:	88fb      	ldrh	r3, [r7, #6]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e074      	b.n	800922c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2221      	movs	r2, #33	; 0x21
 800914e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009152:	f7f9 f981 	bl	8002458 <HAL_GetTick>
 8009156:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	88fa      	ldrh	r2, [r7, #6]
 800915c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	88fa      	ldrh	r2, [r7, #6]
 8009164:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009170:	d108      	bne.n	8009184 <HAL_UART_Transmit+0x6c>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d104      	bne.n	8009184 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	61bb      	str	r3, [r7, #24]
 8009182:	e003      	b.n	800918c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009188:	2300      	movs	r3, #0
 800918a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800918c:	e030      	b.n	80091f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2200      	movs	r2, #0
 8009196:	2180      	movs	r1, #128	; 0x80
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 feff 	bl	8009f9c <UART_WaitOnFlagUntilTimeout>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e03d      	b.n	800922c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10b      	bne.n	80091ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	3302      	adds	r3, #2
 80091ca:	61bb      	str	r3, [r7, #24]
 80091cc:	e007      	b.n	80091de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	781a      	ldrb	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	3301      	adds	r3, #1
 80091dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	3b01      	subs	r3, #1
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1c8      	bne.n	800918e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2200      	movs	r2, #0
 8009204:	2140      	movs	r1, #64	; 0x40
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 fec8 	bl	8009f9c <UART_WaitOnFlagUntilTimeout>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d005      	beq.n	800921e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2220      	movs	r2, #32
 8009216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e006      	b.n	800922c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2220      	movs	r2, #32
 8009222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	e000      	b.n	800922c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800922a:	2302      	movs	r3, #2
  }
}
 800922c:	4618      	mov	r0, r3
 800922e:	3720      	adds	r7, #32
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009238:	b092      	sub	sp, #72	; 0x48
 800923a:	af00      	add	r7, sp, #0
 800923c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	431a      	orrs	r2, r3
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	431a      	orrs	r2, r3
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	4313      	orrs	r3, r2
 800925a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	4bbe      	ldr	r3, [pc, #760]	; (800955c <UART_SetConfig+0x328>)
 8009264:	4013      	ands	r3, r2
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	6812      	ldr	r2, [r2, #0]
 800926a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800926c:	430b      	orrs	r3, r1
 800926e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4ab3      	ldr	r2, [pc, #716]	; (8009560 <UART_SetConfig+0x32c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d004      	beq.n	80092a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800929c:	4313      	orrs	r3, r2
 800929e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	4baf      	ldr	r3, [pc, #700]	; (8009564 <UART_SetConfig+0x330>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	6812      	ldr	r2, [r2, #0]
 80092ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092b0:	430b      	orrs	r3, r1
 80092b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ba:	f023 010f 	bic.w	r1, r3, #15
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4aa6      	ldr	r2, [pc, #664]	; (8009568 <UART_SetConfig+0x334>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d177      	bne.n	80093c4 <UART_SetConfig+0x190>
 80092d4:	4ba5      	ldr	r3, [pc, #660]	; (800956c <UART_SetConfig+0x338>)
 80092d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092dc:	2b28      	cmp	r3, #40	; 0x28
 80092de:	d86d      	bhi.n	80093bc <UART_SetConfig+0x188>
 80092e0:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <UART_SetConfig+0xb4>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	0800938d 	.word	0x0800938d
 80092ec:	080093bd 	.word	0x080093bd
 80092f0:	080093bd 	.word	0x080093bd
 80092f4:	080093bd 	.word	0x080093bd
 80092f8:	080093bd 	.word	0x080093bd
 80092fc:	080093bd 	.word	0x080093bd
 8009300:	080093bd 	.word	0x080093bd
 8009304:	080093bd 	.word	0x080093bd
 8009308:	08009395 	.word	0x08009395
 800930c:	080093bd 	.word	0x080093bd
 8009310:	080093bd 	.word	0x080093bd
 8009314:	080093bd 	.word	0x080093bd
 8009318:	080093bd 	.word	0x080093bd
 800931c:	080093bd 	.word	0x080093bd
 8009320:	080093bd 	.word	0x080093bd
 8009324:	080093bd 	.word	0x080093bd
 8009328:	0800939d 	.word	0x0800939d
 800932c:	080093bd 	.word	0x080093bd
 8009330:	080093bd 	.word	0x080093bd
 8009334:	080093bd 	.word	0x080093bd
 8009338:	080093bd 	.word	0x080093bd
 800933c:	080093bd 	.word	0x080093bd
 8009340:	080093bd 	.word	0x080093bd
 8009344:	080093bd 	.word	0x080093bd
 8009348:	080093a5 	.word	0x080093a5
 800934c:	080093bd 	.word	0x080093bd
 8009350:	080093bd 	.word	0x080093bd
 8009354:	080093bd 	.word	0x080093bd
 8009358:	080093bd 	.word	0x080093bd
 800935c:	080093bd 	.word	0x080093bd
 8009360:	080093bd 	.word	0x080093bd
 8009364:	080093bd 	.word	0x080093bd
 8009368:	080093ad 	.word	0x080093ad
 800936c:	080093bd 	.word	0x080093bd
 8009370:	080093bd 	.word	0x080093bd
 8009374:	080093bd 	.word	0x080093bd
 8009378:	080093bd 	.word	0x080093bd
 800937c:	080093bd 	.word	0x080093bd
 8009380:	080093bd 	.word	0x080093bd
 8009384:	080093bd 	.word	0x080093bd
 8009388:	080093b5 	.word	0x080093b5
 800938c:	2301      	movs	r3, #1
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009392:	e222      	b.n	80097da <UART_SetConfig+0x5a6>
 8009394:	2304      	movs	r3, #4
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800939a:	e21e      	b.n	80097da <UART_SetConfig+0x5a6>
 800939c:	2308      	movs	r3, #8
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093a2:	e21a      	b.n	80097da <UART_SetConfig+0x5a6>
 80093a4:	2310      	movs	r3, #16
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093aa:	e216      	b.n	80097da <UART_SetConfig+0x5a6>
 80093ac:	2320      	movs	r3, #32
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093b2:	e212      	b.n	80097da <UART_SetConfig+0x5a6>
 80093b4:	2340      	movs	r3, #64	; 0x40
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ba:	e20e      	b.n	80097da <UART_SetConfig+0x5a6>
 80093bc:	2380      	movs	r3, #128	; 0x80
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093c2:	e20a      	b.n	80097da <UART_SetConfig+0x5a6>
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a69      	ldr	r2, [pc, #420]	; (8009570 <UART_SetConfig+0x33c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d130      	bne.n	8009430 <UART_SetConfig+0x1fc>
 80093ce:	4b67      	ldr	r3, [pc, #412]	; (800956c <UART_SetConfig+0x338>)
 80093d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	2b05      	cmp	r3, #5
 80093d8:	d826      	bhi.n	8009428 <UART_SetConfig+0x1f4>
 80093da:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <UART_SetConfig+0x1ac>)
 80093dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e0:	080093f9 	.word	0x080093f9
 80093e4:	08009401 	.word	0x08009401
 80093e8:	08009409 	.word	0x08009409
 80093ec:	08009411 	.word	0x08009411
 80093f0:	08009419 	.word	0x08009419
 80093f4:	08009421 	.word	0x08009421
 80093f8:	2300      	movs	r3, #0
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093fe:	e1ec      	b.n	80097da <UART_SetConfig+0x5a6>
 8009400:	2304      	movs	r3, #4
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009406:	e1e8      	b.n	80097da <UART_SetConfig+0x5a6>
 8009408:	2308      	movs	r3, #8
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800940e:	e1e4      	b.n	80097da <UART_SetConfig+0x5a6>
 8009410:	2310      	movs	r3, #16
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009416:	e1e0      	b.n	80097da <UART_SetConfig+0x5a6>
 8009418:	2320      	movs	r3, #32
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800941e:	e1dc      	b.n	80097da <UART_SetConfig+0x5a6>
 8009420:	2340      	movs	r3, #64	; 0x40
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009426:	e1d8      	b.n	80097da <UART_SetConfig+0x5a6>
 8009428:	2380      	movs	r3, #128	; 0x80
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800942e:	e1d4      	b.n	80097da <UART_SetConfig+0x5a6>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a4f      	ldr	r2, [pc, #316]	; (8009574 <UART_SetConfig+0x340>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d130      	bne.n	800949c <UART_SetConfig+0x268>
 800943a:	4b4c      	ldr	r3, [pc, #304]	; (800956c <UART_SetConfig+0x338>)
 800943c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	2b05      	cmp	r3, #5
 8009444:	d826      	bhi.n	8009494 <UART_SetConfig+0x260>
 8009446:	a201      	add	r2, pc, #4	; (adr r2, 800944c <UART_SetConfig+0x218>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	08009465 	.word	0x08009465
 8009450:	0800946d 	.word	0x0800946d
 8009454:	08009475 	.word	0x08009475
 8009458:	0800947d 	.word	0x0800947d
 800945c:	08009485 	.word	0x08009485
 8009460:	0800948d 	.word	0x0800948d
 8009464:	2300      	movs	r3, #0
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946a:	e1b6      	b.n	80097da <UART_SetConfig+0x5a6>
 800946c:	2304      	movs	r3, #4
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009472:	e1b2      	b.n	80097da <UART_SetConfig+0x5a6>
 8009474:	2308      	movs	r3, #8
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800947a:	e1ae      	b.n	80097da <UART_SetConfig+0x5a6>
 800947c:	2310      	movs	r3, #16
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009482:	e1aa      	b.n	80097da <UART_SetConfig+0x5a6>
 8009484:	2320      	movs	r3, #32
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800948a:	e1a6      	b.n	80097da <UART_SetConfig+0x5a6>
 800948c:	2340      	movs	r3, #64	; 0x40
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009492:	e1a2      	b.n	80097da <UART_SetConfig+0x5a6>
 8009494:	2380      	movs	r3, #128	; 0x80
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949a:	e19e      	b.n	80097da <UART_SetConfig+0x5a6>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a35      	ldr	r2, [pc, #212]	; (8009578 <UART_SetConfig+0x344>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d130      	bne.n	8009508 <UART_SetConfig+0x2d4>
 80094a6:	4b31      	ldr	r3, [pc, #196]	; (800956c <UART_SetConfig+0x338>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d826      	bhi.n	8009500 <UART_SetConfig+0x2cc>
 80094b2:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <UART_SetConfig+0x284>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	080094d1 	.word	0x080094d1
 80094bc:	080094d9 	.word	0x080094d9
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	080094f1 	.word	0x080094f1
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d6:	e180      	b.n	80097da <UART_SetConfig+0x5a6>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094de:	e17c      	b.n	80097da <UART_SetConfig+0x5a6>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e6:	e178      	b.n	80097da <UART_SetConfig+0x5a6>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ee:	e174      	b.n	80097da <UART_SetConfig+0x5a6>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f6:	e170      	b.n	80097da <UART_SetConfig+0x5a6>
 80094f8:	2340      	movs	r3, #64	; 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fe:	e16c      	b.n	80097da <UART_SetConfig+0x5a6>
 8009500:	2380      	movs	r3, #128	; 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009506:	e168      	b.n	80097da <UART_SetConfig+0x5a6>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a1b      	ldr	r2, [pc, #108]	; (800957c <UART_SetConfig+0x348>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d142      	bne.n	8009598 <UART_SetConfig+0x364>
 8009512:	4b16      	ldr	r3, [pc, #88]	; (800956c <UART_SetConfig+0x338>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b05      	cmp	r3, #5
 800951c:	d838      	bhi.n	8009590 <UART_SetConfig+0x35c>
 800951e:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <UART_SetConfig+0x2f0>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009545 	.word	0x08009545
 800952c:	0800954d 	.word	0x0800954d
 8009530:	08009555 	.word	0x08009555
 8009534:	08009581 	.word	0x08009581
 8009538:	08009589 	.word	0x08009589
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009542:	e14a      	b.n	80097da <UART_SetConfig+0x5a6>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954a:	e146      	b.n	80097da <UART_SetConfig+0x5a6>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009552:	e142      	b.n	80097da <UART_SetConfig+0x5a6>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955a:	e13e      	b.n	80097da <UART_SetConfig+0x5a6>
 800955c:	cfff69f3 	.word	0xcfff69f3
 8009560:	58000c00 	.word	0x58000c00
 8009564:	11fff4ff 	.word	0x11fff4ff
 8009568:	40011000 	.word	0x40011000
 800956c:	58024400 	.word	0x58024400
 8009570:	40004400 	.word	0x40004400
 8009574:	40004800 	.word	0x40004800
 8009578:	40004c00 	.word	0x40004c00
 800957c:	40005000 	.word	0x40005000
 8009580:	2320      	movs	r3, #32
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009586:	e128      	b.n	80097da <UART_SetConfig+0x5a6>
 8009588:	2340      	movs	r3, #64	; 0x40
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958e:	e124      	b.n	80097da <UART_SetConfig+0x5a6>
 8009590:	2380      	movs	r3, #128	; 0x80
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009596:	e120      	b.n	80097da <UART_SetConfig+0x5a6>
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4acb      	ldr	r2, [pc, #812]	; (80098cc <UART_SetConfig+0x698>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d176      	bne.n	8009690 <UART_SetConfig+0x45c>
 80095a2:	4bcb      	ldr	r3, [pc, #812]	; (80098d0 <UART_SetConfig+0x69c>)
 80095a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095aa:	2b28      	cmp	r3, #40	; 0x28
 80095ac:	d86c      	bhi.n	8009688 <UART_SetConfig+0x454>
 80095ae:	a201      	add	r2, pc, #4	; (adr r2, 80095b4 <UART_SetConfig+0x380>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	08009659 	.word	0x08009659
 80095b8:	08009689 	.word	0x08009689
 80095bc:	08009689 	.word	0x08009689
 80095c0:	08009689 	.word	0x08009689
 80095c4:	08009689 	.word	0x08009689
 80095c8:	08009689 	.word	0x08009689
 80095cc:	08009689 	.word	0x08009689
 80095d0:	08009689 	.word	0x08009689
 80095d4:	08009661 	.word	0x08009661
 80095d8:	08009689 	.word	0x08009689
 80095dc:	08009689 	.word	0x08009689
 80095e0:	08009689 	.word	0x08009689
 80095e4:	08009689 	.word	0x08009689
 80095e8:	08009689 	.word	0x08009689
 80095ec:	08009689 	.word	0x08009689
 80095f0:	08009689 	.word	0x08009689
 80095f4:	08009669 	.word	0x08009669
 80095f8:	08009689 	.word	0x08009689
 80095fc:	08009689 	.word	0x08009689
 8009600:	08009689 	.word	0x08009689
 8009604:	08009689 	.word	0x08009689
 8009608:	08009689 	.word	0x08009689
 800960c:	08009689 	.word	0x08009689
 8009610:	08009689 	.word	0x08009689
 8009614:	08009671 	.word	0x08009671
 8009618:	08009689 	.word	0x08009689
 800961c:	08009689 	.word	0x08009689
 8009620:	08009689 	.word	0x08009689
 8009624:	08009689 	.word	0x08009689
 8009628:	08009689 	.word	0x08009689
 800962c:	08009689 	.word	0x08009689
 8009630:	08009689 	.word	0x08009689
 8009634:	08009679 	.word	0x08009679
 8009638:	08009689 	.word	0x08009689
 800963c:	08009689 	.word	0x08009689
 8009640:	08009689 	.word	0x08009689
 8009644:	08009689 	.word	0x08009689
 8009648:	08009689 	.word	0x08009689
 800964c:	08009689 	.word	0x08009689
 8009650:	08009689 	.word	0x08009689
 8009654:	08009681 	.word	0x08009681
 8009658:	2301      	movs	r3, #1
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965e:	e0bc      	b.n	80097da <UART_SetConfig+0x5a6>
 8009660:	2304      	movs	r3, #4
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009666:	e0b8      	b.n	80097da <UART_SetConfig+0x5a6>
 8009668:	2308      	movs	r3, #8
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966e:	e0b4      	b.n	80097da <UART_SetConfig+0x5a6>
 8009670:	2310      	movs	r3, #16
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009676:	e0b0      	b.n	80097da <UART_SetConfig+0x5a6>
 8009678:	2320      	movs	r3, #32
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967e:	e0ac      	b.n	80097da <UART_SetConfig+0x5a6>
 8009680:	2340      	movs	r3, #64	; 0x40
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009686:	e0a8      	b.n	80097da <UART_SetConfig+0x5a6>
 8009688:	2380      	movs	r3, #128	; 0x80
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968e:	e0a4      	b.n	80097da <UART_SetConfig+0x5a6>
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a8f      	ldr	r2, [pc, #572]	; (80098d4 <UART_SetConfig+0x6a0>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d130      	bne.n	80096fc <UART_SetConfig+0x4c8>
 800969a:	4b8d      	ldr	r3, [pc, #564]	; (80098d0 <UART_SetConfig+0x69c>)
 800969c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	d826      	bhi.n	80096f4 <UART_SetConfig+0x4c0>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <UART_SetConfig+0x478>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	080096c5 	.word	0x080096c5
 80096b0:	080096cd 	.word	0x080096cd
 80096b4:	080096d5 	.word	0x080096d5
 80096b8:	080096dd 	.word	0x080096dd
 80096bc:	080096e5 	.word	0x080096e5
 80096c0:	080096ed 	.word	0x080096ed
 80096c4:	2300      	movs	r3, #0
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ca:	e086      	b.n	80097da <UART_SetConfig+0x5a6>
 80096cc:	2304      	movs	r3, #4
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d2:	e082      	b.n	80097da <UART_SetConfig+0x5a6>
 80096d4:	2308      	movs	r3, #8
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096da:	e07e      	b.n	80097da <UART_SetConfig+0x5a6>
 80096dc:	2310      	movs	r3, #16
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096e2:	e07a      	b.n	80097da <UART_SetConfig+0x5a6>
 80096e4:	2320      	movs	r3, #32
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ea:	e076      	b.n	80097da <UART_SetConfig+0x5a6>
 80096ec:	2340      	movs	r3, #64	; 0x40
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096f2:	e072      	b.n	80097da <UART_SetConfig+0x5a6>
 80096f4:	2380      	movs	r3, #128	; 0x80
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fa:	e06e      	b.n	80097da <UART_SetConfig+0x5a6>
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a75      	ldr	r2, [pc, #468]	; (80098d8 <UART_SetConfig+0x6a4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d130      	bne.n	8009768 <UART_SetConfig+0x534>
 8009706:	4b72      	ldr	r3, [pc, #456]	; (80098d0 <UART_SetConfig+0x69c>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	2b05      	cmp	r3, #5
 8009710:	d826      	bhi.n	8009760 <UART_SetConfig+0x52c>
 8009712:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <UART_SetConfig+0x4e4>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009731 	.word	0x08009731
 800971c:	08009739 	.word	0x08009739
 8009720:	08009741 	.word	0x08009741
 8009724:	08009749 	.word	0x08009749
 8009728:	08009751 	.word	0x08009751
 800972c:	08009759 	.word	0x08009759
 8009730:	2300      	movs	r3, #0
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009736:	e050      	b.n	80097da <UART_SetConfig+0x5a6>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973e:	e04c      	b.n	80097da <UART_SetConfig+0x5a6>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009746:	e048      	b.n	80097da <UART_SetConfig+0x5a6>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974e:	e044      	b.n	80097da <UART_SetConfig+0x5a6>
 8009750:	2320      	movs	r3, #32
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009756:	e040      	b.n	80097da <UART_SetConfig+0x5a6>
 8009758:	2340      	movs	r3, #64	; 0x40
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975e:	e03c      	b.n	80097da <UART_SetConfig+0x5a6>
 8009760:	2380      	movs	r3, #128	; 0x80
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009766:	e038      	b.n	80097da <UART_SetConfig+0x5a6>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a5b      	ldr	r2, [pc, #364]	; (80098dc <UART_SetConfig+0x6a8>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d130      	bne.n	80097d4 <UART_SetConfig+0x5a0>
 8009772:	4b57      	ldr	r3, [pc, #348]	; (80098d0 <UART_SetConfig+0x69c>)
 8009774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b05      	cmp	r3, #5
 800977c:	d826      	bhi.n	80097cc <UART_SetConfig+0x598>
 800977e:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <UART_SetConfig+0x550>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097ad 	.word	0x080097ad
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2302      	movs	r3, #2
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a2:	e01a      	b.n	80097da <UART_SetConfig+0x5a6>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097aa:	e016      	b.n	80097da <UART_SetConfig+0x5a6>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b2:	e012      	b.n	80097da <UART_SetConfig+0x5a6>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ba:	e00e      	b.n	80097da <UART_SetConfig+0x5a6>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c2:	e00a      	b.n	80097da <UART_SetConfig+0x5a6>
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ca:	e006      	b.n	80097da <UART_SetConfig+0x5a6>
 80097cc:	2380      	movs	r3, #128	; 0x80
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d2:	e002      	b.n	80097da <UART_SetConfig+0x5a6>
 80097d4:	2380      	movs	r3, #128	; 0x80
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a3f      	ldr	r2, [pc, #252]	; (80098dc <UART_SetConfig+0x6a8>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	f040 80f8 	bne.w	80099d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	dc46      	bgt.n	800987c <UART_SetConfig+0x648>
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	f2c0 8082 	blt.w	80098f8 <UART_SetConfig+0x6c4>
 80097f4:	3b02      	subs	r3, #2
 80097f6:	2b1e      	cmp	r3, #30
 80097f8:	d87e      	bhi.n	80098f8 <UART_SetConfig+0x6c4>
 80097fa:	a201      	add	r2, pc, #4	; (adr r2, 8009800 <UART_SetConfig+0x5cc>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	08009883 	.word	0x08009883
 8009804:	080098f9 	.word	0x080098f9
 8009808:	0800988b 	.word	0x0800988b
 800980c:	080098f9 	.word	0x080098f9
 8009810:	080098f9 	.word	0x080098f9
 8009814:	080098f9 	.word	0x080098f9
 8009818:	0800989b 	.word	0x0800989b
 800981c:	080098f9 	.word	0x080098f9
 8009820:	080098f9 	.word	0x080098f9
 8009824:	080098f9 	.word	0x080098f9
 8009828:	080098f9 	.word	0x080098f9
 800982c:	080098f9 	.word	0x080098f9
 8009830:	080098f9 	.word	0x080098f9
 8009834:	080098f9 	.word	0x080098f9
 8009838:	080098ab 	.word	0x080098ab
 800983c:	080098f9 	.word	0x080098f9
 8009840:	080098f9 	.word	0x080098f9
 8009844:	080098f9 	.word	0x080098f9
 8009848:	080098f9 	.word	0x080098f9
 800984c:	080098f9 	.word	0x080098f9
 8009850:	080098f9 	.word	0x080098f9
 8009854:	080098f9 	.word	0x080098f9
 8009858:	080098f9 	.word	0x080098f9
 800985c:	080098f9 	.word	0x080098f9
 8009860:	080098f9 	.word	0x080098f9
 8009864:	080098f9 	.word	0x080098f9
 8009868:	080098f9 	.word	0x080098f9
 800986c:	080098f9 	.word	0x080098f9
 8009870:	080098f9 	.word	0x080098f9
 8009874:	080098f9 	.word	0x080098f9
 8009878:	080098eb 	.word	0x080098eb
 800987c:	2b40      	cmp	r3, #64	; 0x40
 800987e:	d037      	beq.n	80098f0 <UART_SetConfig+0x6bc>
 8009880:	e03a      	b.n	80098f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009882:	f7fd fad3 	bl	8006e2c <HAL_RCCEx_GetD3PCLK1Freq>
 8009886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009888:	e03c      	b.n	8009904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800988a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800988e:	4618      	mov	r0, r3
 8009890:	f7fd fae2 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009898:	e034      	b.n	8009904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800989a:	f107 0318 	add.w	r3, r7, #24
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fd fc2e 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098a8:	e02c      	b.n	8009904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <UART_SetConfig+0x69c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d016      	beq.n	80098e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <UART_SetConfig+0x69c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	08db      	lsrs	r3, r3, #3
 80098bc:	f003 0303 	and.w	r3, r3, #3
 80098c0:	4a07      	ldr	r2, [pc, #28]	; (80098e0 <UART_SetConfig+0x6ac>)
 80098c2:	fa22 f303 	lsr.w	r3, r2, r3
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098c8:	e01c      	b.n	8009904 <UART_SetConfig+0x6d0>
 80098ca:	bf00      	nop
 80098cc:	40011400 	.word	0x40011400
 80098d0:	58024400 	.word	0x58024400
 80098d4:	40007800 	.word	0x40007800
 80098d8:	40007c00 	.word	0x40007c00
 80098dc:	58000c00 	.word	0x58000c00
 80098e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80098e4:	4b9d      	ldr	r3, [pc, #628]	; (8009b5c <UART_SetConfig+0x928>)
 80098e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098e8:	e00c      	b.n	8009904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098ea:	4b9d      	ldr	r3, [pc, #628]	; (8009b60 <UART_SetConfig+0x92c>)
 80098ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ee:	e009      	b.n	8009904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098f6:	e005      	b.n	8009904 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009902:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 81de 	beq.w	8009cc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	4a94      	ldr	r2, [pc, #592]	; (8009b64 <UART_SetConfig+0x930>)
 8009912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009916:	461a      	mov	r2, r3
 8009918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991a:	fbb3 f3f2 	udiv	r3, r3, r2
 800991e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	4613      	mov	r3, r2
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	4413      	add	r3, r2
 800992a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992c:	429a      	cmp	r2, r3
 800992e:	d305      	bcc.n	800993c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009938:	429a      	cmp	r2, r3
 800993a:	d903      	bls.n	8009944 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009942:	e1c1      	b.n	8009cc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009946:	2200      	movs	r2, #0
 8009948:	60bb      	str	r3, [r7, #8]
 800994a:	60fa      	str	r2, [r7, #12]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	4a84      	ldr	r2, [pc, #528]	; (8009b64 <UART_SetConfig+0x930>)
 8009952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009956:	b29b      	uxth	r3, r3
 8009958:	2200      	movs	r2, #0
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	607a      	str	r2, [r7, #4]
 800995e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009966:	f7f6 fd0b 	bl	8000380 <__aeabi_uldivmod>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4610      	mov	r0, r2
 8009970:	4619      	mov	r1, r3
 8009972:	f04f 0200 	mov.w	r2, #0
 8009976:	f04f 0300 	mov.w	r3, #0
 800997a:	020b      	lsls	r3, r1, #8
 800997c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009980:	0202      	lsls	r2, r0, #8
 8009982:	6979      	ldr	r1, [r7, #20]
 8009984:	6849      	ldr	r1, [r1, #4]
 8009986:	0849      	lsrs	r1, r1, #1
 8009988:	2000      	movs	r0, #0
 800998a:	460c      	mov	r4, r1
 800998c:	4605      	mov	r5, r0
 800998e:	eb12 0804 	adds.w	r8, r2, r4
 8009992:	eb43 0905 	adc.w	r9, r3, r5
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	469a      	mov	sl, r3
 800999e:	4693      	mov	fp, r2
 80099a0:	4652      	mov	r2, sl
 80099a2:	465b      	mov	r3, fp
 80099a4:	4640      	mov	r0, r8
 80099a6:	4649      	mov	r1, r9
 80099a8:	f7f6 fcea 	bl	8000380 <__aeabi_uldivmod>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4613      	mov	r3, r2
 80099b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ba:	d308      	bcc.n	80099ce <UART_SetConfig+0x79a>
 80099bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099c2:	d204      	bcs.n	80099ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099ca:	60da      	str	r2, [r3, #12]
 80099cc:	e17c      	b.n	8009cc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80099d4:	e178      	b.n	8009cc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099de:	f040 80c5 	bne.w	8009b6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80099e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	dc48      	bgt.n	8009a7c <UART_SetConfig+0x848>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	db7b      	blt.n	8009ae6 <UART_SetConfig+0x8b2>
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	d879      	bhi.n	8009ae6 <UART_SetConfig+0x8b2>
 80099f2:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <UART_SetConfig+0x7c4>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a83 	.word	0x08009a83
 80099fc:	08009a8b 	.word	0x08009a8b
 8009a00:	08009ae7 	.word	0x08009ae7
 8009a04:	08009ae7 	.word	0x08009ae7
 8009a08:	08009a93 	.word	0x08009a93
 8009a0c:	08009ae7 	.word	0x08009ae7
 8009a10:	08009ae7 	.word	0x08009ae7
 8009a14:	08009ae7 	.word	0x08009ae7
 8009a18:	08009aa3 	.word	0x08009aa3
 8009a1c:	08009ae7 	.word	0x08009ae7
 8009a20:	08009ae7 	.word	0x08009ae7
 8009a24:	08009ae7 	.word	0x08009ae7
 8009a28:	08009ae7 	.word	0x08009ae7
 8009a2c:	08009ae7 	.word	0x08009ae7
 8009a30:	08009ae7 	.word	0x08009ae7
 8009a34:	08009ae7 	.word	0x08009ae7
 8009a38:	08009ab3 	.word	0x08009ab3
 8009a3c:	08009ae7 	.word	0x08009ae7
 8009a40:	08009ae7 	.word	0x08009ae7
 8009a44:	08009ae7 	.word	0x08009ae7
 8009a48:	08009ae7 	.word	0x08009ae7
 8009a4c:	08009ae7 	.word	0x08009ae7
 8009a50:	08009ae7 	.word	0x08009ae7
 8009a54:	08009ae7 	.word	0x08009ae7
 8009a58:	08009ae7 	.word	0x08009ae7
 8009a5c:	08009ae7 	.word	0x08009ae7
 8009a60:	08009ae7 	.word	0x08009ae7
 8009a64:	08009ae7 	.word	0x08009ae7
 8009a68:	08009ae7 	.word	0x08009ae7
 8009a6c:	08009ae7 	.word	0x08009ae7
 8009a70:	08009ae7 	.word	0x08009ae7
 8009a74:	08009ae7 	.word	0x08009ae7
 8009a78:	08009ad9 	.word	0x08009ad9
 8009a7c:	2b40      	cmp	r3, #64	; 0x40
 8009a7e:	d02e      	beq.n	8009ade <UART_SetConfig+0x8aa>
 8009a80:	e031      	b.n	8009ae6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a82:	f7fb f9dd 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8009a86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009a88:	e033      	b.n	8009af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a8a:	f7fb f9ef 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8009a8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009a90:	e02f      	b.n	8009af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fd f9de 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aa0:	e027      	b.n	8009af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aa2:	f107 0318 	add.w	r3, r7, #24
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fd fb2a 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ab0:	e01f      	b.n	8009af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab2:	4b2d      	ldr	r3, [pc, #180]	; (8009b68 <UART_SetConfig+0x934>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d009      	beq.n	8009ad2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009abe:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <UART_SetConfig+0x934>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	08db      	lsrs	r3, r3, #3
 8009ac4:	f003 0303 	and.w	r3, r3, #3
 8009ac8:	4a24      	ldr	r2, [pc, #144]	; (8009b5c <UART_SetConfig+0x928>)
 8009aca:	fa22 f303 	lsr.w	r3, r2, r3
 8009ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ad0:	e00f      	b.n	8009af2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009ad2:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <UART_SetConfig+0x928>)
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ad6:	e00c      	b.n	8009af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ad8:	4b21      	ldr	r3, [pc, #132]	; (8009b60 <UART_SetConfig+0x92c>)
 8009ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009adc:	e009      	b.n	8009af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ae4:	e005      	b.n	8009af2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009af0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80e7 	beq.w	8009cc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	4a19      	ldr	r2, [pc, #100]	; (8009b64 <UART_SetConfig+0x930>)
 8009b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b04:	461a      	mov	r2, r3
 8009b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b0c:	005a      	lsls	r2, r3, #1
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	085b      	lsrs	r3, r3, #1
 8009b14:	441a      	add	r2, r3
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	2b0f      	cmp	r3, #15
 8009b24:	d916      	bls.n	8009b54 <UART_SetConfig+0x920>
 8009b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b2c:	d212      	bcs.n	8009b54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f023 030f 	bic.w	r3, r3, #15
 8009b36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	085b      	lsrs	r3, r3, #1
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	f003 0307 	and.w	r3, r3, #7
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b46:	4313      	orrs	r3, r2
 8009b48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009b50:	60da      	str	r2, [r3, #12]
 8009b52:	e0b9      	b.n	8009cc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009b5a:	e0b5      	b.n	8009cc8 <UART_SetConfig+0xa94>
 8009b5c:	03d09000 	.word	0x03d09000
 8009b60:	003d0900 	.word	0x003d0900
 8009b64:	0800df18 	.word	0x0800df18
 8009b68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b70:	2b20      	cmp	r3, #32
 8009b72:	dc49      	bgt.n	8009c08 <UART_SetConfig+0x9d4>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	db7c      	blt.n	8009c72 <UART_SetConfig+0xa3e>
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d87a      	bhi.n	8009c72 <UART_SetConfig+0xa3e>
 8009b7c:	a201      	add	r2, pc, #4	; (adr r2, 8009b84 <UART_SetConfig+0x950>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009c0f 	.word	0x08009c0f
 8009b88:	08009c17 	.word	0x08009c17
 8009b8c:	08009c73 	.word	0x08009c73
 8009b90:	08009c73 	.word	0x08009c73
 8009b94:	08009c1f 	.word	0x08009c1f
 8009b98:	08009c73 	.word	0x08009c73
 8009b9c:	08009c73 	.word	0x08009c73
 8009ba0:	08009c73 	.word	0x08009c73
 8009ba4:	08009c2f 	.word	0x08009c2f
 8009ba8:	08009c73 	.word	0x08009c73
 8009bac:	08009c73 	.word	0x08009c73
 8009bb0:	08009c73 	.word	0x08009c73
 8009bb4:	08009c73 	.word	0x08009c73
 8009bb8:	08009c73 	.word	0x08009c73
 8009bbc:	08009c73 	.word	0x08009c73
 8009bc0:	08009c73 	.word	0x08009c73
 8009bc4:	08009c3f 	.word	0x08009c3f
 8009bc8:	08009c73 	.word	0x08009c73
 8009bcc:	08009c73 	.word	0x08009c73
 8009bd0:	08009c73 	.word	0x08009c73
 8009bd4:	08009c73 	.word	0x08009c73
 8009bd8:	08009c73 	.word	0x08009c73
 8009bdc:	08009c73 	.word	0x08009c73
 8009be0:	08009c73 	.word	0x08009c73
 8009be4:	08009c73 	.word	0x08009c73
 8009be8:	08009c73 	.word	0x08009c73
 8009bec:	08009c73 	.word	0x08009c73
 8009bf0:	08009c73 	.word	0x08009c73
 8009bf4:	08009c73 	.word	0x08009c73
 8009bf8:	08009c73 	.word	0x08009c73
 8009bfc:	08009c73 	.word	0x08009c73
 8009c00:	08009c73 	.word	0x08009c73
 8009c04:	08009c65 	.word	0x08009c65
 8009c08:	2b40      	cmp	r3, #64	; 0x40
 8009c0a:	d02e      	beq.n	8009c6a <UART_SetConfig+0xa36>
 8009c0c:	e031      	b.n	8009c72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c0e:	f7fb f917 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8009c12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c14:	e033      	b.n	8009c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c16:	f7fb f929 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8009c1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c1c:	e02f      	b.n	8009c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fd f918 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c2c:	e027      	b.n	8009c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c2e:	f107 0318 	add.w	r3, r7, #24
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fd fa64 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c3c:	e01f      	b.n	8009c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c3e:	4b2d      	ldr	r3, [pc, #180]	; (8009cf4 <UART_SetConfig+0xac0>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 0320 	and.w	r3, r3, #32
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c4a:	4b2a      	ldr	r3, [pc, #168]	; (8009cf4 <UART_SetConfig+0xac0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	08db      	lsrs	r3, r3, #3
 8009c50:	f003 0303 	and.w	r3, r3, #3
 8009c54:	4a28      	ldr	r2, [pc, #160]	; (8009cf8 <UART_SetConfig+0xac4>)
 8009c56:	fa22 f303 	lsr.w	r3, r2, r3
 8009c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c5c:	e00f      	b.n	8009c7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009c5e:	4b26      	ldr	r3, [pc, #152]	; (8009cf8 <UART_SetConfig+0xac4>)
 8009c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c62:	e00c      	b.n	8009c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c64:	4b25      	ldr	r3, [pc, #148]	; (8009cfc <UART_SetConfig+0xac8>)
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c68:	e009      	b.n	8009c7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c70:	e005      	b.n	8009c7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c7c:	bf00      	nop
    }

    if (pclk != 0U)
 8009c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d021      	beq.n	8009cc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c88:	4a1d      	ldr	r2, [pc, #116]	; (8009d00 <UART_SetConfig+0xacc>)
 8009c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c92:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	085b      	lsrs	r3, r3, #1
 8009c9c:	441a      	add	r2, r3
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009caa:	2b0f      	cmp	r3, #15
 8009cac:	d909      	bls.n	8009cc2 <UART_SetConfig+0xa8e>
 8009cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb4:	d205      	bcs.n	8009cc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60da      	str	r2, [r3, #12]
 8009cc0:	e002      	b.n	8009cc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009ce4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3748      	adds	r7, #72	; 0x48
 8009cec:	46bd      	mov	sp, r7
 8009cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cf2:	bf00      	nop
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	03d09000 	.word	0x03d09000
 8009cfc:	003d0900 	.word	0x003d0900
 8009d00:	0800df18 	.word	0x0800df18

08009d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00a      	beq.n	8009d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d76:	f003 0308 	and.w	r3, r3, #8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	f003 0310 	and.w	r3, r3, #16
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01a      	beq.n	8009e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e02:	d10a      	bne.n	8009e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	605a      	str	r2, [r3, #4]
  }
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b098      	sub	sp, #96	; 0x60
 8009e4c:	af02      	add	r7, sp, #8
 8009e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e58:	f7f8 fafe 	bl	8002458 <HAL_GetTick>
 8009e5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b08      	cmp	r3, #8
 8009e6a:	d12f      	bne.n	8009ecc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e74:	2200      	movs	r2, #0
 8009e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f88e 	bl	8009f9c <UART_WaitOnFlagUntilTimeout>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d022      	beq.n	8009ecc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ea6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009eac:	e841 2300 	strex	r3, r2, [r1]
 8009eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e6      	bne.n	8009e86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2220      	movs	r2, #32
 8009ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e063      	b.n	8009f94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0304 	and.w	r3, r3, #4
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d149      	bne.n	8009f6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f857 	bl	8009f9c <UART_WaitOnFlagUntilTimeout>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d03c      	beq.n	8009f6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	623b      	str	r3, [r7, #32]
   return(result);
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f12:	633b      	str	r3, [r7, #48]	; 0x30
 8009f14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e6      	bne.n	8009ef4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	e853 3f00 	ldrex	r3, [r3]
 8009f34:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f023 0301 	bic.w	r3, r3, #1
 8009f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3308      	adds	r3, #8
 8009f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f46:	61fa      	str	r2, [r7, #28]
 8009f48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	69b9      	ldr	r1, [r7, #24]
 8009f4c:	69fa      	ldr	r2, [r7, #28]
 8009f4e:	e841 2300 	strex	r3, r2, [r1]
 8009f52:	617b      	str	r3, [r7, #20]
   return(result);
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1e5      	bne.n	8009f26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2220      	movs	r2, #32
 8009f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e012      	b.n	8009f94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2220      	movs	r2, #32
 8009f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3758      	adds	r7, #88	; 0x58
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fac:	e049      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb4:	d045      	beq.n	800a042 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fb6:	f7f8 fa4f 	bl	8002458 <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d302      	bcc.n	8009fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e048      	b.n	800a062 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0304 	and.w	r3, r3, #4
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d031      	beq.n	800a042 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	f003 0308 	and.w	r3, r3, #8
 8009fe8:	2b08      	cmp	r3, #8
 8009fea:	d110      	bne.n	800a00e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 f839 	bl	800a06c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2208      	movs	r2, #8
 8009ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e029      	b.n	800a062 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a01c:	d111      	bne.n	800a042 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f81f 	bl	800a06c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2220      	movs	r2, #32
 800a032:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e00f      	b.n	800a062 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	69da      	ldr	r2, [r3, #28]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4013      	ands	r3, r2
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	429a      	cmp	r2, r3
 800a050:	bf0c      	ite	eq
 800a052:	2301      	moveq	r3, #1
 800a054:	2300      	movne	r3, #0
 800a056:	b2db      	uxtb	r3, r3
 800a058:	461a      	mov	r2, r3
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d0a6      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b095      	sub	sp, #84	; 0x54
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	461a      	mov	r2, r3
 800a090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a092:	643b      	str	r3, [r7, #64]	; 0x40
 800a094:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e6      	bne.n	800a074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3308      	adds	r3, #8
 800a0ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	4b1e      	ldr	r3, [pc, #120]	; (800a134 <UART_EndRxTransfer+0xc8>)
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e5      	bne.n	800a0a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d118      	bne.n	800a114 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	e853 3f00 	ldrex	r3, [r3]
 800a0ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f023 0310 	bic.w	r3, r3, #16
 800a0f6:	647b      	str	r3, [r7, #68]	; 0x44
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a100:	61bb      	str	r3, [r7, #24]
 800a102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	6979      	ldr	r1, [r7, #20]
 800a106:	69ba      	ldr	r2, [r7, #24]
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	613b      	str	r3, [r7, #16]
   return(result);
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1e6      	bne.n	800a0e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a128:	bf00      	nop
 800a12a:	3754      	adds	r7, #84	; 0x54
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	effffffe 	.word	0xeffffffe

0800a138 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a146:	2b01      	cmp	r3, #1
 800a148:	d101      	bne.n	800a14e <HAL_UARTEx_DisableFifoMode+0x16>
 800a14a:	2302      	movs	r3, #2
 800a14c:	e027      	b.n	800a19e <HAL_UARTEx_DisableFifoMode+0x66>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2224      	movs	r2, #36	; 0x24
 800a15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f022 0201 	bic.w	r2, r2, #1
 800a174:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a17c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2220      	movs	r2, #32
 800a190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d101      	bne.n	800a1c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1be:	2302      	movs	r3, #2
 800a1c0:	e02d      	b.n	800a21e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2224      	movs	r2, #36	; 0x24
 800a1ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 0201 	bic.w	r2, r2, #1
 800a1e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f850 	bl	800a2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a236:	2b01      	cmp	r3, #1
 800a238:	d101      	bne.n	800a23e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a23a:	2302      	movs	r3, #2
 800a23c:	e02d      	b.n	800a29a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2224      	movs	r2, #36	; 0x24
 800a24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0201 	bic.w	r2, r2, #1
 800a264:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f812 	bl	800a2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2220      	movs	r2, #32
 800a28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d108      	bne.n	800a2c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2c4:	e031      	b.n	800a32a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2c6:	2310      	movs	r3, #16
 800a2c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2ca:	2310      	movs	r3, #16
 800a2cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	0e5b      	lsrs	r3, r3, #25
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	f003 0307 	and.w	r3, r3, #7
 800a2dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	0f5b      	lsrs	r3, r3, #29
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
 800a2f0:	7b3a      	ldrb	r2, [r7, #12]
 800a2f2:	4911      	ldr	r1, [pc, #68]	; (800a338 <UARTEx_SetNbDataToProcess+0x94>)
 800a2f4:	5c8a      	ldrb	r2, [r1, r2]
 800a2f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2fa:	7b3a      	ldrb	r2, [r7, #12]
 800a2fc:	490f      	ldr	r1, [pc, #60]	; (800a33c <UARTEx_SetNbDataToProcess+0x98>)
 800a2fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a300:	fb93 f3f2 	sdiv	r3, r3, r2
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	7b7a      	ldrb	r2, [r7, #13]
 800a310:	4909      	ldr	r1, [pc, #36]	; (800a338 <UARTEx_SetNbDataToProcess+0x94>)
 800a312:	5c8a      	ldrb	r2, [r1, r2]
 800a314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a318:	7b7a      	ldrb	r2, [r7, #13]
 800a31a:	4908      	ldr	r1, [pc, #32]	; (800a33c <UARTEx_SetNbDataToProcess+0x98>)
 800a31c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a31e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a322:	b29a      	uxth	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a32a:	bf00      	nop
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	0800df30 	.word	0x0800df30
 800a33c:	0800df38 	.word	0x0800df38

0800a340 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a340:	b084      	sub	sp, #16
 800a342:	b480      	push	{r7}
 800a344:	b085      	sub	sp, #20
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	f107 001c 	add.w	r0, r7, #28
 800a34e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a356:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a358:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a35a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a35e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a362:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a366:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	4b07      	ldr	r3, [pc, #28]	; (800a390 <SDMMC_Init+0x50>)
 800a374:	4013      	ands	r3, r2
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	431a      	orrs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	b004      	add	sp, #16
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	ffc02c00 	.word	0xffc02c00

0800a394 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b083      	sub	sp, #12
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f043 0203 	orr.w	r2, r3, #3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0303 	and.w	r3, r3, #3
}
 800a402:	4618      	mov	r0, r3
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
	...

0800a410 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a42e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a434:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a43a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	4b06      	ldr	r3, [pc, #24]	; (800a460 <SDMMC_SendCommand+0x50>)
 800a448:	4013      	ands	r3, r2
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	431a      	orrs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	fffee0c0 	.word	0xfffee0c0

0800a464 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	b2db      	uxtb	r3, r3
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3314      	adds	r3, #20
 800a48c:	461a      	mov	r2, r3
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	4413      	add	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a4ca:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a4d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a4d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0

}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a50a:	2310      	movs	r3, #16
 800a50c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a50e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a514:	2300      	movs	r3, #0
 800a516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a51c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a51e:	f107 0308 	add.w	r3, r7, #8
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff ff73 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a52a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a52e:	2110      	movs	r1, #16
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fa5f 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a538:	69fb      	ldr	r3, [r7, #28]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3720      	adds	r7, #32
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b088      	sub	sp, #32
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a550:	2311      	movs	r3, #17
 800a552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a554:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a55a:	2300      	movs	r3, #0
 800a55c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a55e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a562:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a564:	f107 0308 	add.w	r3, r7, #8
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7ff ff50 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a570:	f241 3288 	movw	r2, #5000	; 0x1388
 800a574:	2111      	movs	r1, #17
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fa3c 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a57c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a57e:	69fb      	ldr	r3, [r7, #28]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3720      	adds	r7, #32
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a596:	2312      	movs	r3, #18
 800a598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a59a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a59e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5aa:	f107 0308 	add.w	r3, r7, #8
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f7ff ff2d 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a5b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ba:	2112      	movs	r1, #18
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fa19 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a5c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3720      	adds	r7, #32
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b088      	sub	sp, #32
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a5dc:	2318      	movs	r3, #24
 800a5de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5f0:	f107 0308 	add.w	r3, r7, #8
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7ff ff0a 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a600:	2118      	movs	r1, #24
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f9f6 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a60a:	69fb      	ldr	r3, [r7, #28]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3720      	adds	r7, #32
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a622:	2319      	movs	r3, #25
 800a624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a62a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a62c:	2300      	movs	r3, #0
 800a62e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a636:	f107 0308 	add.w	r3, r7, #8
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff fee7 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a642:	f241 3288 	movw	r2, #5000	; 0x1388
 800a646:	2119      	movs	r1, #25
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f9d3 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a64e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a650:	69fb      	ldr	r3, [r7, #28]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3720      	adds	r7, #32
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a668:	230c      	movs	r3, #12
 800a66a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a66c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a67a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a694:	f107 0308 	add.w	r3, r7, #8
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff feb8 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a6a0:	4a0b      	ldr	r2, [pc, #44]	; (800a6d0 <SDMMC_CmdStopTransfer+0x74>)
 800a6a2:	210c      	movs	r1, #12
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f9a5 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a6aa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6be:	d101      	bne.n	800a6c4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a6c4:	69fb      	ldr	r3, [r7, #28]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3720      	adds	r7, #32
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	05f5e100 	.word	0x05f5e100

0800a6d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b088      	sub	sp, #32
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a6e2:	2307      	movs	r3, #7
 800a6e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6f6:	f107 0308 	add.w	r3, r7, #8
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff fe87 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a702:	f241 3288 	movw	r2, #5000	; 0x1388
 800a706:	2107      	movs	r1, #7
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 f973 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a70e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a710:	69fb      	ldr	r3, [r7, #28]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3720      	adds	r7, #32
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b088      	sub	sp, #32
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a726:	2300      	movs	r3, #0
 800a728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a72a:	2300      	movs	r3, #0
 800a72c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a72e:	2300      	movs	r3, #0
 800a730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a738:	f107 0308 	add.w	r3, r7, #8
 800a73c:	4619      	mov	r1, r3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fe66 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fb97 	bl	800ae78 <SDMMC_GetCmdError>
 800a74a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a74c:	69fb      	ldr	r3, [r7, #28]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3720      	adds	r7, #32
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b088      	sub	sp, #32
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a75e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a764:	2308      	movs	r3, #8
 800a766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a76c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a76e:	2300      	movs	r3, #0
 800a770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a776:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a778:	f107 0308 	add.w	r3, r7, #8
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7ff fe46 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fb29 	bl	800addc <SDMMC_GetCmdResp7>
 800a78a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a78c:	69fb      	ldr	r3, [r7, #28]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3720      	adds	r7, #32
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b088      	sub	sp, #32
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a7a4:	2337      	movs	r3, #55	; 0x37
 800a7a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7b8:	f107 0308 	add.w	r3, r7, #8
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff fe26 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7c8:	2137      	movs	r1, #55	; 0x37
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f912 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a7d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3720      	adds	r7, #32
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a7ea:	2329      	movs	r3, #41	; 0x29
 800a7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7ff fe03 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fa2e 	bl	800ac6c <SDMMC_GetCmdResp3>
 800a810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a812:	69fb      	ldr	r3, [r7, #28]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3720      	adds	r7, #32
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b088      	sub	sp, #32
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a82a:	2306      	movs	r3, #6
 800a82c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a82e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a834:	2300      	movs	r3, #0
 800a836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a83c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a83e:	f107 0308 	add.w	r3, r7, #8
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff fde3 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a84a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a84e:	2106      	movs	r1, #6
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f8cf 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a858:	69fb      	ldr	r3, [r7, #28]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b088      	sub	sp, #32
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a86e:	2333      	movs	r3, #51	; 0x33
 800a870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a872:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a878:	2300      	movs	r3, #0
 800a87a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a87c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a880:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff fdc1 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a88e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a892:	2133      	movs	r1, #51	; 0x33
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f8ad 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a89a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a89c:	69fb      	ldr	r3, [r7, #28]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b088      	sub	sp, #32
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a8b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a8ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c6:	f107 0308 	add.w	r3, r7, #8
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff fd9f 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f980 	bl	800abd8 <SDMMC_GetCmdResp2>
 800a8d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8da:	69fb      	ldr	r3, [r7, #28]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3720      	adds	r7, #32
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b088      	sub	sp, #32
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a8f2:	2309      	movs	r3, #9
 800a8f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a8f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a8fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a904:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a906:	f107 0308 	add.w	r3, r7, #8
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff fd7f 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f960 	bl	800abd8 <SDMMC_GetCmdResp2>
 800a918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a91a:	69fb      	ldr	r3, [r7, #28]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b088      	sub	sp, #32
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a932:	2303      	movs	r3, #3
 800a934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a93a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a93c:	2300      	movs	r3, #0
 800a93e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a944:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a946:	f107 0308 	add.w	r3, r7, #8
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7ff fd5f 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	2103      	movs	r1, #3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f9c8 	bl	800acec <SDMMC_GetCmdResp6>
 800a95c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a95e:	69fb      	ldr	r3, [r7, #28]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a976:	230d      	movs	r3, #13
 800a978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a97a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a97e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a980:	2300      	movs	r3, #0
 800a982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a988:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fd3d 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a996:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99a:	210d      	movs	r1, #13
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f829 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a9a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3720      	adds	r7, #32
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b088      	sub	sp, #32
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a9ba:	230d      	movs	r3, #13
 800a9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff fd1b 	bl	800a410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9de:	210d      	movs	r1, #13
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f807 	bl	800a9f4 <SDMMC_GetCmdResp1>
 800a9e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3720      	adds	r7, #32
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800aa02:	4b70      	ldr	r3, [pc, #448]	; (800abc4 <SDMMC_GetCmdResp1+0x1d0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a70      	ldr	r2, [pc, #448]	; (800abc8 <SDMMC_GetCmdResp1+0x1d4>)
 800aa08:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0c:	0a5a      	lsrs	r2, r3, #9
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	fb02 f303 	mul.w	r3, r2, r3
 800aa14:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	1e5a      	subs	r2, r3, #1
 800aa1a:	61fa      	str	r2, [r7, #28]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa24:	e0c9      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	4b67      	ldr	r3, [pc, #412]	; (800abcc <SDMMC_GetCmdResp1+0x1d8>)
 800aa30:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d0ef      	beq.n	800aa16 <SDMMC_GetCmdResp1+0x22>
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1ea      	bne.n	800aa16 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa44:	f003 0304 	and.w	r3, r3, #4
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d004      	beq.n	800aa56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2204      	movs	r2, #4
 800aa50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa52:	2304      	movs	r3, #4
 800aa54:	e0b1      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d004      	beq.n	800aa6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2201      	movs	r2, #1
 800aa66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e0a6      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4a58      	ldr	r2, [pc, #352]	; (800abd0 <SDMMC_GetCmdResp1+0x1dc>)
 800aa70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f7ff fcf6 	bl	800a464 <SDMMC_GetCommandResponse>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	7afb      	ldrb	r3, [r7, #11]
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d001      	beq.n	800aa86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e099      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aa86:	2100      	movs	r1, #0
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f7ff fcf8 	bl	800a47e <SDMMC_GetResponse>
 800aa8e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	4b50      	ldr	r3, [pc, #320]	; (800abd4 <SDMMC_GetCmdResp1+0x1e0>)
 800aa94:	4013      	ands	r3, r2
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e08d      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	da02      	bge.n	800aaaa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aaa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aaa8:	e087      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aab4:	2340      	movs	r3, #64	; 0x40
 800aab6:	e080      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aac2:	2380      	movs	r3, #128	; 0x80
 800aac4:	e079      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aad4:	e071      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aae4:	e069      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aaf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf4:	e061      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ab00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab04:	e059      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab14:	e051      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab24:	e049      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab34:	e041      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab44:	e039      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab54:	e031      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab64:	e029      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab74:	e021      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ab80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ab84:	e019      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ab90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab94:	e011      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aba0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aba4:	e009      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f003 0308 	and.w	r3, r3, #8
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800abb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abb4:	e001      	b.n	800abba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3720      	adds	r7, #32
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	24000000 	.word	0x24000000
 800abc8:	10624dd3 	.word	0x10624dd3
 800abcc:	00200045 	.word	0x00200045
 800abd0:	002000c5 	.word	0x002000c5
 800abd4:	fdffe008 	.word	0xfdffe008

0800abd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800abe0:	4b1f      	ldr	r3, [pc, #124]	; (800ac60 <SDMMC_GetCmdResp2+0x88>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a1f      	ldr	r2, [pc, #124]	; (800ac64 <SDMMC_GetCmdResp2+0x8c>)
 800abe6:	fba2 2303 	umull	r2, r3, r2, r3
 800abea:	0a5b      	lsrs	r3, r3, #9
 800abec:	f241 3288 	movw	r2, #5000	; 0x1388
 800abf0:	fb02 f303 	mul.w	r3, r2, r3
 800abf4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	1e5a      	subs	r2, r3, #1
 800abfa:	60fa      	str	r2, [r7, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d102      	bne.n	800ac06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac04:	e026      	b.n	800ac54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac0a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0ef      	beq.n	800abf6 <SDMMC_GetCmdResp2+0x1e>
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1ea      	bne.n	800abf6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac24:	f003 0304 	and.w	r3, r3, #4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d004      	beq.n	800ac36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2204      	movs	r2, #4
 800ac30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac32:	2304      	movs	r3, #4
 800ac34:	e00e      	b.n	800ac54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d004      	beq.n	800ac4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e003      	b.n	800ac54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a06      	ldr	r2, [pc, #24]	; (800ac68 <SDMMC_GetCmdResp2+0x90>)
 800ac50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	24000000 	.word	0x24000000
 800ac64:	10624dd3 	.word	0x10624dd3
 800ac68:	002000c5 	.word	0x002000c5

0800ac6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac74:	4b1a      	ldr	r3, [pc, #104]	; (800ace0 <SDMMC_GetCmdResp3+0x74>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a1a      	ldr	r2, [pc, #104]	; (800ace4 <SDMMC_GetCmdResp3+0x78>)
 800ac7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac7e:	0a5b      	lsrs	r3, r3, #9
 800ac80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac84:	fb02 f303 	mul.w	r3, r2, r3
 800ac88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	1e5a      	subs	r2, r3, #1
 800ac8e:	60fa      	str	r2, [r7, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac98:	e01b      	b.n	800acd2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0ef      	beq.n	800ac8a <SDMMC_GetCmdResp3+0x1e>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1ea      	bne.n	800ac8a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb8:	f003 0304 	and.w	r3, r3, #4
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d004      	beq.n	800acca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2204      	movs	r2, #4
 800acc4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acc6:	2304      	movs	r3, #4
 800acc8:	e003      	b.n	800acd2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a06      	ldr	r2, [pc, #24]	; (800ace8 <SDMMC_GetCmdResp3+0x7c>)
 800acce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3714      	adds	r7, #20
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	24000000 	.word	0x24000000
 800ace4:	10624dd3 	.word	0x10624dd3
 800ace8:	002000c5 	.word	0x002000c5

0800acec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	460b      	mov	r3, r1
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800acfa:	4b35      	ldr	r3, [pc, #212]	; (800add0 <SDMMC_GetCmdResp6+0xe4>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a35      	ldr	r2, [pc, #212]	; (800add4 <SDMMC_GetCmdResp6+0xe8>)
 800ad00:	fba2 2303 	umull	r2, r3, r2, r3
 800ad04:	0a5b      	lsrs	r3, r3, #9
 800ad06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0a:	fb02 f303 	mul.w	r3, r2, r3
 800ad0e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	1e5a      	subs	r2, r3, #1
 800ad14:	61fa      	str	r2, [r7, #28]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d102      	bne.n	800ad20 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad1e:	e052      	b.n	800adc6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad24:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d0ef      	beq.n	800ad10 <SDMMC_GetCmdResp6+0x24>
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1ea      	bne.n	800ad10 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad3e:	f003 0304 	and.w	r3, r3, #4
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d004      	beq.n	800ad50 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2204      	movs	r2, #4
 800ad4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad4c:	2304      	movs	r3, #4
 800ad4e:	e03a      	b.n	800adc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e02f      	b.n	800adc6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7ff fb7c 	bl	800a464 <SDMMC_GetCommandResponse>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d001      	beq.n	800ad7a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e025      	b.n	800adc6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	4a16      	ldr	r2, [pc, #88]	; (800add8 <SDMMC_GetCmdResp6+0xec>)
 800ad7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ad80:	2100      	movs	r1, #0
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f7ff fb7b 	bl	800a47e <SDMMC_GetResponse>
 800ad88:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d106      	bne.n	800ada2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	0c1b      	lsrs	r3, r3, #16
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e011      	b.n	800adc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800adac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adb0:	e009      	b.n	800adc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800adbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc0:	e001      	b.n	800adc6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800adc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3720      	adds	r7, #32
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	24000000 	.word	0x24000000
 800add4:	10624dd3 	.word	0x10624dd3
 800add8:	002000c5 	.word	0x002000c5

0800addc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ade4:	4b22      	ldr	r3, [pc, #136]	; (800ae70 <SDMMC_GetCmdResp7+0x94>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a22      	ldr	r2, [pc, #136]	; (800ae74 <SDMMC_GetCmdResp7+0x98>)
 800adea:	fba2 2303 	umull	r2, r3, r2, r3
 800adee:	0a5b      	lsrs	r3, r3, #9
 800adf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf4:	fb02 f303 	mul.w	r3, r2, r3
 800adf8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	1e5a      	subs	r2, r3, #1
 800adfe:	60fa      	str	r2, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae08:	e02c      	b.n	800ae64 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0ef      	beq.n	800adfa <SDMMC_GetCmdResp7+0x1e>
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1ea      	bne.n	800adfa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d004      	beq.n	800ae3a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2204      	movs	r2, #4
 800ae34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae36:	2304      	movs	r3, #4
 800ae38:	e014      	b.n	800ae64 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e009      	b.n	800ae64 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2240      	movs	r2, #64	; 0x40
 800ae60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae62:	2300      	movs	r3, #0

}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	24000000 	.word	0x24000000
 800ae74:	10624dd3 	.word	0x10624dd3

0800ae78 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae80:	4b11      	ldr	r3, [pc, #68]	; (800aec8 <SDMMC_GetCmdError+0x50>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a11      	ldr	r2, [pc, #68]	; (800aecc <SDMMC_GetCmdError+0x54>)
 800ae86:	fba2 2303 	umull	r2, r3, r2, r3
 800ae8a:	0a5b      	lsrs	r3, r3, #9
 800ae8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae90:	fb02 f303 	mul.w	r3, r2, r3
 800ae94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	1e5a      	subs	r2, r3, #1
 800ae9a:	60fa      	str	r2, [r7, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d102      	bne.n	800aea6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aea4:	e009      	b.n	800aeba <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0f1      	beq.n	800ae96 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a06      	ldr	r2, [pc, #24]	; (800aed0 <SDMMC_GetCmdError+0x58>)
 800aeb6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	24000000 	.word	0x24000000
 800aecc:	10624dd3 	.word	0x10624dd3
 800aed0:	002000c5 	.word	0x002000c5

0800aed4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aed8:	4904      	ldr	r1, [pc, #16]	; (800aeec <MX_FATFS_Init+0x18>)
 800aeda:	4805      	ldr	r0, [pc, #20]	; (800aef0 <MX_FATFS_Init+0x1c>)
 800aedc:	f002 fb16 	bl	800d50c <FATFS_LinkDriver>
 800aee0:	4603      	mov	r3, r0
 800aee2:	461a      	mov	r2, r3
 800aee4:	4b03      	ldr	r3, [pc, #12]	; (800aef4 <MX_FATFS_Init+0x20>)
 800aee6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aee8:	bf00      	nop
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	24000220 	.word	0x24000220
 800aef0:	0800df40 	.word	0x0800df40
 800aef4:	2400021c 	.word	0x2400021c

0800aef8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aef8:	b480      	push	{r7}
 800aefa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aefc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aefe:	4618      	mov	r0, r3
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af12:	f000 f879 	bl	800b008 <BSP_SD_IsDetected>
 800af16:	4603      	mov	r3, r0
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d001      	beq.n	800af20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800af1c:	2302      	movs	r3, #2
 800af1e:	e012      	b.n	800af46 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800af20:	480b      	ldr	r0, [pc, #44]	; (800af50 <BSP_SD_Init+0x48>)
 800af22:	f7fc fcf7 	bl	8007914 <HAL_SD_Init>
 800af26:	4603      	mov	r3, r0
 800af28:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af2a:	79fb      	ldrb	r3, [r7, #7]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d109      	bne.n	800af44 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800af30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800af34:	4806      	ldr	r0, [pc, #24]	; (800af50 <BSP_SD_Init+0x48>)
 800af36:	f7fd fbb3 	bl	80086a0 <HAL_SD_ConfigWideBusOperation>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af44:	79fb      	ldrb	r3, [r7, #7]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	240000e8 	.word	0x240000e8

0800af54 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b088      	sub	sp, #32
 800af58:	af02      	add	r7, sp, #8
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	68f9      	ldr	r1, [r7, #12]
 800af70:	4806      	ldr	r0, [pc, #24]	; (800af8c <BSP_SD_ReadBlocks+0x38>)
 800af72:	f7fc fdef 	bl	8007b54 <HAL_SD_ReadBlocks>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	240000e8 	.word	0x240000e8

0800af90 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af02      	add	r7, sp, #8
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	68f9      	ldr	r1, [r7, #12]
 800afac:	4806      	ldr	r0, [pc, #24]	; (800afc8 <BSP_SD_WriteBlocks+0x38>)
 800afae:	f7fc ff5b 	bl	8007e68 <HAL_SD_WriteBlocks>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3718      	adds	r7, #24
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	240000e8 	.word	0x240000e8

0800afcc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afd0:	4805      	ldr	r0, [pc, #20]	; (800afe8 <BSP_SD_GetCardState+0x1c>)
 800afd2:	f7fd fc77 	bl	80088c4 <HAL_SD_GetCardState>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b04      	cmp	r3, #4
 800afda:	bf14      	ite	ne
 800afdc:	2301      	movne	r3, #1
 800afde:	2300      	moveq	r3, #0
 800afe0:	b2db      	uxtb	r3, r3
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	240000e8 	.word	0x240000e8

0800afec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	4803      	ldr	r0, [pc, #12]	; (800b004 <BSP_SD_GetCardInfo+0x18>)
 800aff8:	f7fd fb26 	bl	8008648 <HAL_SD_GetCardInfo>
}
 800affc:	bf00      	nop
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	240000e8 	.word	0x240000e8

0800b008 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b00e:	2301      	movs	r3, #1
 800b010:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b012:	f000 f80b 	bl	800b02c <BSP_PlatformIsDetected>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b01c:	2300      	movs	r3, #0
 800b01e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b020:	79fb      	ldrb	r3, [r7, #7]
 800b022:	b2db      	uxtb	r3, r3
}
 800b024:	4618      	mov	r0, r3
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b032:	2301      	movs	r3, #1
 800b034:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b03a:	4806      	ldr	r0, [pc, #24]	; (800b054 <BSP_PlatformIsDetected+0x28>)
 800b03c:	f7f8 f8ea 	bl	8003214 <HAL_GPIO_ReadPin>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b046:	2300      	movs	r3, #0
 800b048:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b04a:	79fb      	ldrb	r3, [r7, #7]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	58022000 	.word	0x58022000

0800b058 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b062:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <SD_CheckStatus+0x38>)
 800b064:	2201      	movs	r2, #1
 800b066:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b068:	f7ff ffb0 	bl	800afcc <BSP_SD_GetCardState>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d107      	bne.n	800b082 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b072:	4b07      	ldr	r3, [pc, #28]	; (800b090 <SD_CheckStatus+0x38>)
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f023 0301 	bic.w	r3, r3, #1
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	4b04      	ldr	r3, [pc, #16]	; (800b090 <SD_CheckStatus+0x38>)
 800b080:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b082:	4b03      	ldr	r3, [pc, #12]	; (800b090 <SD_CheckStatus+0x38>)
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	b2db      	uxtb	r3, r3
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	2400000d 	.word	0x2400000d

0800b094 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	4603      	mov	r3, r0
 800b09c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b09e:	4b0b      	ldr	r3, [pc, #44]	; (800b0cc <SD_initialize+0x38>)
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b0a4:	f7ff ff30 	bl	800af08 <BSP_SD_Init>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d107      	bne.n	800b0be <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b0ae:	79fb      	ldrb	r3, [r7, #7]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff ffd1 	bl	800b058 <SD_CheckStatus>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4b04      	ldr	r3, [pc, #16]	; (800b0cc <SD_initialize+0x38>)
 800b0bc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b0be:	4b03      	ldr	r3, [pc, #12]	; (800b0cc <SD_initialize+0x38>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b2db      	uxtb	r3, r3
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	2400000d 	.word	0x2400000d

0800b0d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b0da:	79fb      	ldrb	r3, [r7, #7]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff ffbb 	bl	800b058 <SD_CheckStatus>
 800b0e2:	4603      	mov	r3, r0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	607a      	str	r2, [r7, #4]
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b100:	f04f 33ff 	mov.w	r3, #4294967295
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	68b8      	ldr	r0, [r7, #8]
 800b10a:	f7ff ff23 	bl	800af54 <BSP_SD_ReadBlocks>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d107      	bne.n	800b124 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b114:	bf00      	nop
 800b116:	f7ff ff59 	bl	800afcc <BSP_SD_GetCardState>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1fa      	bne.n	800b116 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b124:	7dfb      	ldrb	r3, [r7, #23]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b086      	sub	sp, #24
 800b132:	af00      	add	r7, sp, #0
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
 800b13a:	4603      	mov	r3, r0
 800b13c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b142:	f04f 33ff 	mov.w	r3, #4294967295
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	68b8      	ldr	r0, [r7, #8]
 800b14c:	f7ff ff20 	bl	800af90 <BSP_SD_WriteBlocks>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d107      	bne.n	800b166 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b156:	bf00      	nop
 800b158:	f7ff ff38 	bl	800afcc <BSP_SD_GetCardState>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1fa      	bne.n	800b158 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b166:	7dfb      	ldrb	r3, [r7, #23]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08c      	sub	sp, #48	; 0x30
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	603a      	str	r2, [r7, #0]
 800b17a:	71fb      	strb	r3, [r7, #7]
 800b17c:	460b      	mov	r3, r1
 800b17e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b186:	4b25      	ldr	r3, [pc, #148]	; (800b21c <SD_ioctl+0xac>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	f003 0301 	and.w	r3, r3, #1
 800b190:	2b00      	cmp	r3, #0
 800b192:	d001      	beq.n	800b198 <SD_ioctl+0x28>
 800b194:	2303      	movs	r3, #3
 800b196:	e03c      	b.n	800b212 <SD_ioctl+0xa2>

  switch (cmd)
 800b198:	79bb      	ldrb	r3, [r7, #6]
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d834      	bhi.n	800b208 <SD_ioctl+0x98>
 800b19e:	a201      	add	r2, pc, #4	; (adr r2, 800b1a4 <SD_ioctl+0x34>)
 800b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a4:	0800b1b5 	.word	0x0800b1b5
 800b1a8:	0800b1bd 	.word	0x0800b1bd
 800b1ac:	0800b1d5 	.word	0x0800b1d5
 800b1b0:	0800b1ef 	.word	0x0800b1ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1ba:	e028      	b.n	800b20e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1bc:	f107 0308 	add.w	r3, r7, #8
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff ff13 	bl	800afec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b1c6:	6a3a      	ldr	r2, [r7, #32]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1d2:	e01c      	b.n	800b20e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1d4:	f107 0308 	add.w	r3, r7, #8
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff ff07 	bl	800afec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1ec:	e00f      	b.n	800b20e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1ee:	f107 0308 	add.w	r3, r7, #8
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff fefa 	bl	800afec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fa:	0a5a      	lsrs	r2, r3, #9
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b206:	e002      	b.n	800b20e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b208:	2304      	movs	r3, #4
 800b20a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b20e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b212:	4618      	mov	r0, r3
 800b214:	3730      	adds	r7, #48	; 0x30
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	2400000d 	.word	0x2400000d

0800b220 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	4603      	mov	r3, r0
 800b228:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b22a:	79fb      	ldrb	r3, [r7, #7]
 800b22c:	4a08      	ldr	r2, [pc, #32]	; (800b250 <disk_status+0x30>)
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	79fa      	ldrb	r2, [r7, #7]
 800b238:	4905      	ldr	r1, [pc, #20]	; (800b250 <disk_status+0x30>)
 800b23a:	440a      	add	r2, r1
 800b23c:	7a12      	ldrb	r2, [r2, #8]
 800b23e:	4610      	mov	r0, r2
 800b240:	4798      	blx	r3
 800b242:	4603      	mov	r3, r0
 800b244:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	2400024c 	.word	0x2400024c

0800b254 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	4603      	mov	r3, r0
 800b25c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	4a0d      	ldr	r2, [pc, #52]	; (800b29c <disk_initialize+0x48>)
 800b266:	5cd3      	ldrb	r3, [r2, r3]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d111      	bne.n	800b290 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	4a0b      	ldr	r2, [pc, #44]	; (800b29c <disk_initialize+0x48>)
 800b270:	2101      	movs	r1, #1
 800b272:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b274:	79fb      	ldrb	r3, [r7, #7]
 800b276:	4a09      	ldr	r2, [pc, #36]	; (800b29c <disk_initialize+0x48>)
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	79fa      	ldrb	r2, [r7, #7]
 800b282:	4906      	ldr	r1, [pc, #24]	; (800b29c <disk_initialize+0x48>)
 800b284:	440a      	add	r2, r1
 800b286:	7a12      	ldrb	r2, [r2, #8]
 800b288:	4610      	mov	r0, r2
 800b28a:	4798      	blx	r3
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b290:	7bfb      	ldrb	r3, [r7, #15]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	2400024c 	.word	0x2400024c

0800b2a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b2a0:	b590      	push	{r4, r7, lr}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	607a      	str	r2, [r7, #4]
 800b2aa:	603b      	str	r3, [r7, #0]
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
 800b2b2:	4a0a      	ldr	r2, [pc, #40]	; (800b2dc <disk_read+0x3c>)
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	689c      	ldr	r4, [r3, #8]
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	4a07      	ldr	r2, [pc, #28]	; (800b2dc <disk_read+0x3c>)
 800b2c0:	4413      	add	r3, r2
 800b2c2:	7a18      	ldrb	r0, [r3, #8]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	68b9      	ldr	r1, [r7, #8]
 800b2ca:	47a0      	blx	r4
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd90      	pop	{r4, r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	2400024c 	.word	0x2400024c

0800b2e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	607a      	str	r2, [r7, #4]
 800b2ea:	603b      	str	r3, [r7, #0]
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	4a0a      	ldr	r2, [pc, #40]	; (800b31c <disk_write+0x3c>)
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	68dc      	ldr	r4, [r3, #12]
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	4a07      	ldr	r2, [pc, #28]	; (800b31c <disk_write+0x3c>)
 800b300:	4413      	add	r3, r2
 800b302:	7a18      	ldrb	r0, [r3, #8]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	68b9      	ldr	r1, [r7, #8]
 800b30a:	47a0      	blx	r4
 800b30c:	4603      	mov	r3, r0
 800b30e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b310:	7dfb      	ldrb	r3, [r7, #23]
}
 800b312:	4618      	mov	r0, r3
 800b314:	371c      	adds	r7, #28
 800b316:	46bd      	mov	sp, r7
 800b318:	bd90      	pop	{r4, r7, pc}
 800b31a:	bf00      	nop
 800b31c:	2400024c 	.word	0x2400024c

0800b320 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	603a      	str	r2, [r7, #0]
 800b32a:	71fb      	strb	r3, [r7, #7]
 800b32c:	460b      	mov	r3, r1
 800b32e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b330:	79fb      	ldrb	r3, [r7, #7]
 800b332:	4a09      	ldr	r2, [pc, #36]	; (800b358 <disk_ioctl+0x38>)
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	79fa      	ldrb	r2, [r7, #7]
 800b33e:	4906      	ldr	r1, [pc, #24]	; (800b358 <disk_ioctl+0x38>)
 800b340:	440a      	add	r2, r1
 800b342:	7a10      	ldrb	r0, [r2, #8]
 800b344:	79b9      	ldrb	r1, [r7, #6]
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	4798      	blx	r3
 800b34a:	4603      	mov	r3, r0
 800b34c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	2400024c 	.word	0x2400024c

0800b35c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3301      	adds	r3, #1
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b36c:	89fb      	ldrh	r3, [r7, #14]
 800b36e:	021b      	lsls	r3, r3, #8
 800b370:	b21a      	sxth	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	b21b      	sxth	r3, r3
 800b378:	4313      	orrs	r3, r2
 800b37a:	b21b      	sxth	r3, r3
 800b37c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b37e:	89fb      	ldrh	r3, [r7, #14]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	3303      	adds	r3, #3
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	021b      	lsls	r3, r3, #8
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	3202      	adds	r2, #2
 800b3a4:	7812      	ldrb	r2, [r2, #0]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	021b      	lsls	r3, r3, #8
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	3201      	adds	r2, #1
 800b3b2:	7812      	ldrb	r2, [r2, #0]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	021b      	lsls	r3, r3, #8
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	7812      	ldrb	r2, [r2, #0]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]
	return rv;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b083      	sub	sp, #12
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	607a      	str	r2, [r7, #4]
 800b3e4:	887a      	ldrh	r2, [r7, #2]
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	701a      	strb	r2, [r3, #0]
 800b3ea:	887b      	ldrh	r3, [r7, #2]
 800b3ec:	0a1b      	lsrs	r3, r3, #8
 800b3ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	887a      	ldrh	r2, [r7, #2]
 800b3f8:	b2d2      	uxtb	r2, r2
 800b3fa:	701a      	strb	r2, [r3, #0]
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	1c5a      	adds	r2, r3, #1
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	b2d2      	uxtb	r2, r2
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	0a1b      	lsrs	r3, r3, #8
 800b422:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	1c5a      	adds	r2, r3, #1
 800b428:	607a      	str	r2, [r7, #4]
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	b2d2      	uxtb	r2, r2
 800b42e:	701a      	strb	r2, [r3, #0]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	0a1b      	lsrs	r3, r3, #8
 800b434:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	b2d2      	uxtb	r2, r2
 800b440:	701a      	strb	r2, [r3, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	0a1b      	lsrs	r3, r3, #8
 800b446:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	607a      	str	r2, [r7, #4]
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	b2d2      	uxtb	r2, r2
 800b452:	701a      	strb	r2, [r3, #0]
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b460:	b480      	push	{r7}
 800b462:	b087      	sub	sp, #28
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00d      	beq.n	800b496 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	1c53      	adds	r3, r2, #1
 800b47e:	613b      	str	r3, [r7, #16]
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	1c59      	adds	r1, r3, #1
 800b484:	6179      	str	r1, [r7, #20]
 800b486:	7812      	ldrb	r2, [r2, #0]
 800b488:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	607b      	str	r3, [r7, #4]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1f1      	bne.n	800b47a <mem_cpy+0x1a>
	}
}
 800b496:	bf00      	nop
 800b498:	371c      	adds	r7, #28
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b4a2:	b480      	push	{r7}
 800b4a4:	b087      	sub	sp, #28
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	1c5a      	adds	r2, r3, #1
 800b4b6:	617a      	str	r2, [r7, #20]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	607b      	str	r3, [r7, #4]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1f3      	bne.n	800b4b2 <mem_set+0x10>
}
 800b4ca:	bf00      	nop
 800b4cc:	bf00      	nop
 800b4ce:	371c      	adds	r7, #28
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b4d8:	b480      	push	{r7}
 800b4da:	b089      	sub	sp, #36	; 0x24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	61fb      	str	r3, [r7, #28]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	61fa      	str	r2, [r7, #28]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	61ba      	str	r2, [r7, #24]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	1acb      	subs	r3, r1, r3
 800b504:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3b01      	subs	r3, #1
 800b50a:	607b      	str	r3, [r7, #4]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <mem_cmp+0x40>
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d0eb      	beq.n	800b4f0 <mem_cmp+0x18>

	return r;
 800b518:	697b      	ldr	r3, [r7, #20]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3724      	adds	r7, #36	; 0x24
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b526:	b480      	push	{r7}
 800b528:	b083      	sub	sp, #12
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b530:	e002      	b.n	800b538 <chk_chr+0x12>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	3301      	adds	r3, #1
 800b536:	607b      	str	r3, [r7, #4]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d005      	beq.n	800b54c <chk_chr+0x26>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	461a      	mov	r2, r3
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	4293      	cmp	r3, r2
 800b54a:	d1f2      	bne.n	800b532 <chk_chr+0xc>
	return *str;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	781b      	ldrb	r3, [r3, #0]
}
 800b550:	4618      	mov	r0, r3
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b566:	2300      	movs	r3, #0
 800b568:	60bb      	str	r3, [r7, #8]
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	e029      	b.n	800b5c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b570:	4a27      	ldr	r2, [pc, #156]	; (800b610 <chk_lock+0xb4>)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	011b      	lsls	r3, r3, #4
 800b576:	4413      	add	r3, r2
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d01d      	beq.n	800b5ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b57e:	4a24      	ldr	r2, [pc, #144]	; (800b610 <chk_lock+0xb4>)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	4413      	add	r3, r2
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d116      	bne.n	800b5be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b590:	4a1f      	ldr	r2, [pc, #124]	; (800b610 <chk_lock+0xb4>)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	011b      	lsls	r3, r3, #4
 800b596:	4413      	add	r3, r2
 800b598:	3304      	adds	r3, #4
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d10c      	bne.n	800b5be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b5a4:	4a1a      	ldr	r2, [pc, #104]	; (800b610 <chk_lock+0xb4>)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	011b      	lsls	r3, r3, #4
 800b5aa:	4413      	add	r3, r2
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d102      	bne.n	800b5be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b5b8:	e007      	b.n	800b5ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	60fb      	str	r3, [r7, #12]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d9d2      	bls.n	800b570 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d109      	bne.n	800b5e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d102      	bne.n	800b5dc <chk_lock+0x80>
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d101      	bne.n	800b5e0 <chk_lock+0x84>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e010      	b.n	800b602 <chk_lock+0xa6>
 800b5e0:	2312      	movs	r3, #18
 800b5e2:	e00e      	b.n	800b602 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d108      	bne.n	800b5fc <chk_lock+0xa0>
 800b5ea:	4a09      	ldr	r2, [pc, #36]	; (800b610 <chk_lock+0xb4>)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	011b      	lsls	r3, r3, #4
 800b5f0:	4413      	add	r3, r2
 800b5f2:	330c      	adds	r3, #12
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5fa:	d101      	bne.n	800b600 <chk_lock+0xa4>
 800b5fc:	2310      	movs	r3, #16
 800b5fe:	e000      	b.n	800b602 <chk_lock+0xa6>
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	2400022c 	.word	0x2400022c

0800b614 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b61a:	2300      	movs	r3, #0
 800b61c:	607b      	str	r3, [r7, #4]
 800b61e:	e002      	b.n	800b626 <enq_lock+0x12>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3301      	adds	r3, #1
 800b624:	607b      	str	r3, [r7, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d806      	bhi.n	800b63a <enq_lock+0x26>
 800b62c:	4a09      	ldr	r2, [pc, #36]	; (800b654 <enq_lock+0x40>)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	011b      	lsls	r3, r3, #4
 800b632:	4413      	add	r3, r2
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1f2      	bne.n	800b620 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	bf14      	ite	ne
 800b640:	2301      	movne	r3, #1
 800b642:	2300      	moveq	r3, #0
 800b644:	b2db      	uxtb	r3, r3
}
 800b646:	4618      	mov	r0, r3
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	2400022c 	.word	0x2400022c

0800b658 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	e01f      	b.n	800b6a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b668:	4a41      	ldr	r2, [pc, #260]	; (800b770 <inc_lock+0x118>)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	4413      	add	r3, r2
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d113      	bne.n	800b6a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b67a:	4a3d      	ldr	r2, [pc, #244]	; (800b770 <inc_lock+0x118>)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	011b      	lsls	r3, r3, #4
 800b680:	4413      	add	r3, r2
 800b682:	3304      	adds	r3, #4
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d109      	bne.n	800b6a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b68e:	4a38      	ldr	r2, [pc, #224]	; (800b770 <inc_lock+0x118>)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	011b      	lsls	r3, r3, #4
 800b694:	4413      	add	r3, r2
 800b696:	3308      	adds	r3, #8
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d006      	beq.n	800b6b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d9dc      	bls.n	800b668 <inc_lock+0x10>
 800b6ae:	e000      	b.n	800b6b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b6b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d132      	bne.n	800b71e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	e002      	b.n	800b6c4 <inc_lock+0x6c>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d806      	bhi.n	800b6d8 <inc_lock+0x80>
 800b6ca:	4a29      	ldr	r2, [pc, #164]	; (800b770 <inc_lock+0x118>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	4413      	add	r3, r2
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1f2      	bne.n	800b6be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d101      	bne.n	800b6e2 <inc_lock+0x8a>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e040      	b.n	800b764 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4922      	ldr	r1, [pc, #136]	; (800b770 <inc_lock+0x118>)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	011b      	lsls	r3, r3, #4
 800b6ec:	440b      	add	r3, r1
 800b6ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689a      	ldr	r2, [r3, #8]
 800b6f4:	491e      	ldr	r1, [pc, #120]	; (800b770 <inc_lock+0x118>)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	011b      	lsls	r3, r3, #4
 800b6fa:	440b      	add	r3, r1
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	695a      	ldr	r2, [r3, #20]
 800b704:	491a      	ldr	r1, [pc, #104]	; (800b770 <inc_lock+0x118>)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	011b      	lsls	r3, r3, #4
 800b70a:	440b      	add	r3, r1
 800b70c:	3308      	adds	r3, #8
 800b70e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b710:	4a17      	ldr	r2, [pc, #92]	; (800b770 <inc_lock+0x118>)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	011b      	lsls	r3, r3, #4
 800b716:	4413      	add	r3, r2
 800b718:	330c      	adds	r3, #12
 800b71a:	2200      	movs	r2, #0
 800b71c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d009      	beq.n	800b738 <inc_lock+0xe0>
 800b724:	4a12      	ldr	r2, [pc, #72]	; (800b770 <inc_lock+0x118>)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	011b      	lsls	r3, r3, #4
 800b72a:	4413      	add	r3, r2
 800b72c:	330c      	adds	r3, #12
 800b72e:	881b      	ldrh	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <inc_lock+0xe0>
 800b734:	2300      	movs	r3, #0
 800b736:	e015      	b.n	800b764 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d108      	bne.n	800b750 <inc_lock+0xf8>
 800b73e:	4a0c      	ldr	r2, [pc, #48]	; (800b770 <inc_lock+0x118>)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	011b      	lsls	r3, r3, #4
 800b744:	4413      	add	r3, r2
 800b746:	330c      	adds	r3, #12
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	3301      	adds	r3, #1
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	e001      	b.n	800b754 <inc_lock+0xfc>
 800b750:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b754:	4906      	ldr	r1, [pc, #24]	; (800b770 <inc_lock+0x118>)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	440b      	add	r3, r1
 800b75c:	330c      	adds	r3, #12
 800b75e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	3301      	adds	r3, #1
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	2400022c 	.word	0x2400022c

0800b774 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	3b01      	subs	r3, #1
 800b780:	607b      	str	r3, [r7, #4]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d825      	bhi.n	800b7d4 <dec_lock+0x60>
		n = Files[i].ctr;
 800b788:	4a17      	ldr	r2, [pc, #92]	; (800b7e8 <dec_lock+0x74>)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	011b      	lsls	r3, r3, #4
 800b78e:	4413      	add	r3, r2
 800b790:	330c      	adds	r3, #12
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b796:	89fb      	ldrh	r3, [r7, #14]
 800b798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b79c:	d101      	bne.n	800b7a2 <dec_lock+0x2e>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b7a2:	89fb      	ldrh	r3, [r7, #14]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <dec_lock+0x3a>
 800b7a8:	89fb      	ldrh	r3, [r7, #14]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b7ae:	4a0e      	ldr	r2, [pc, #56]	; (800b7e8 <dec_lock+0x74>)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	011b      	lsls	r3, r3, #4
 800b7b4:	4413      	add	r3, r2
 800b7b6:	330c      	adds	r3, #12
 800b7b8:	89fa      	ldrh	r2, [r7, #14]
 800b7ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b7bc:	89fb      	ldrh	r3, [r7, #14]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d105      	bne.n	800b7ce <dec_lock+0x5a>
 800b7c2:	4a09      	ldr	r2, [pc, #36]	; (800b7e8 <dec_lock+0x74>)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	011b      	lsls	r3, r3, #4
 800b7c8:	4413      	add	r3, r2
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	737b      	strb	r3, [r7, #13]
 800b7d2:	e001      	b.n	800b7d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b7d8:	7b7b      	ldrb	r3, [r7, #13]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	2400022c 	.word	0x2400022c

0800b7ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	e010      	b.n	800b81c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b7fa:	4a0d      	ldr	r2, [pc, #52]	; (800b830 <clear_lock+0x44>)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	011b      	lsls	r3, r3, #4
 800b800:	4413      	add	r3, r2
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	429a      	cmp	r2, r3
 800b808:	d105      	bne.n	800b816 <clear_lock+0x2a>
 800b80a:	4a09      	ldr	r2, [pc, #36]	; (800b830 <clear_lock+0x44>)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	011b      	lsls	r3, r3, #4
 800b810:	4413      	add	r3, r2
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3301      	adds	r3, #1
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d9eb      	bls.n	800b7fa <clear_lock+0xe>
	}
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	2400022c 	.word	0x2400022c

0800b834 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	78db      	ldrb	r3, [r3, #3]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d034      	beq.n	800b8b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	7858      	ldrb	r0, [r3, #1]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b858:	2301      	movs	r3, #1
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	f7ff fd40 	bl	800b2e0 <disk_write>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d002      	beq.n	800b86c <sync_window+0x38>
			res = FR_DISK_ERR;
 800b866:	2301      	movs	r3, #1
 800b868:	73fb      	strb	r3, [r7, #15]
 800b86a:	e022      	b.n	800b8b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	1ad2      	subs	r2, r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d217      	bcs.n	800b8b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	789b      	ldrb	r3, [r3, #2]
 800b886:	613b      	str	r3, [r7, #16]
 800b888:	e010      	b.n	800b8ac <sync_window+0x78>
					wsect += fs->fsize;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	697a      	ldr	r2, [r7, #20]
 800b890:	4413      	add	r3, r2
 800b892:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	7858      	ldrb	r0, [r3, #1]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b89e:	2301      	movs	r3, #1
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	f7ff fd1d 	bl	800b2e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	613b      	str	r3, [r7, #16]
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d8eb      	bhi.n	800b88a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d01b      	beq.n	800b90c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7ff ffad 	bl	800b834 <sync_window>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d113      	bne.n	800b90c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	7858      	ldrb	r0, [r3, #1]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	f7ff fcd5 	bl	800b2a0 <disk_read>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d004      	beq.n	800b906 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b900:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b902:	2301      	movs	r3, #1
 800b904:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
	...

0800b918 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff ff87 	bl	800b834 <sync_window>
 800b926:	4603      	mov	r3, r0
 800b928:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d158      	bne.n	800b9e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	2b03      	cmp	r3, #3
 800b936:	d148      	bne.n	800b9ca <sync_fs+0xb2>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	791b      	ldrb	r3, [r3, #4]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d144      	bne.n	800b9ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	3330      	adds	r3, #48	; 0x30
 800b944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b948:	2100      	movs	r1, #0
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7ff fda9 	bl	800b4a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	3330      	adds	r3, #48	; 0x30
 800b954:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b958:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fd38 	bl	800b3d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	3330      	adds	r3, #48	; 0x30
 800b966:	4921      	ldr	r1, [pc, #132]	; (800b9ec <sync_fs+0xd4>)
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff fd4d 	bl	800b408 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3330      	adds	r3, #48	; 0x30
 800b972:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b976:	491e      	ldr	r1, [pc, #120]	; (800b9f0 <sync_fs+0xd8>)
 800b978:	4618      	mov	r0, r3
 800b97a:	f7ff fd45 	bl	800b408 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	3330      	adds	r3, #48	; 0x30
 800b982:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	4619      	mov	r1, r3
 800b98c:	4610      	mov	r0, r2
 800b98e:	f7ff fd3b 	bl	800b408 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3330      	adds	r3, #48	; 0x30
 800b996:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	4619      	mov	r1, r3
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	f7ff fd31 	bl	800b408 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	69db      	ldr	r3, [r3, #28]
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	7858      	ldrb	r0, [r3, #1]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9be:	2301      	movs	r3, #1
 800b9c0:	f7ff fc8e 	bl	800b2e0 <disk_write>
			fs->fsi_flag = 0;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	785b      	ldrb	r3, [r3, #1]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fca4 	bl	800b320 <disk_ioctl>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <sync_fs+0xca>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	41615252 	.word	0x41615252
 800b9f0:	61417272 	.word	0x61417272

0800b9f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	3b02      	subs	r3, #2
 800ba02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	3b02      	subs	r3, #2
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d301      	bcc.n	800ba14 <clust2sect+0x20>
 800ba10:	2300      	movs	r3, #0
 800ba12:	e008      	b.n	800ba26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	895b      	ldrh	r3, [r3, #10]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	fb03 f202 	mul.w	r2, r3, r2
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba24:	4413      	add	r3, r2
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b086      	sub	sp, #24
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d904      	bls.n	800ba52 <get_fat+0x20>
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	695b      	ldr	r3, [r3, #20]
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d302      	bcc.n	800ba58 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ba52:	2301      	movs	r3, #1
 800ba54:	617b      	str	r3, [r7, #20]
 800ba56:	e08f      	b.n	800bb78 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ba58:	f04f 33ff 	mov.w	r3, #4294967295
 800ba5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d062      	beq.n	800bb2c <get_fat+0xfa>
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	dc7c      	bgt.n	800bb64 <get_fat+0x132>
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d002      	beq.n	800ba74 <get_fat+0x42>
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d042      	beq.n	800baf8 <get_fat+0xc6>
 800ba72:	e077      	b.n	800bb64 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	085b      	lsrs	r3, r3, #1
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	6a1a      	ldr	r2, [r3, #32]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	0a5b      	lsrs	r3, r3, #9
 800ba8a:	4413      	add	r3, r2
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6938      	ldr	r0, [r7, #16]
 800ba90:	f7ff ff14 	bl	800b8bc <move_window>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d167      	bne.n	800bb6a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	60fa      	str	r2, [r7, #12]
 800baa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	4413      	add	r3, r2
 800baa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800baac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	6a1a      	ldr	r2, [r3, #32]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	0a5b      	lsrs	r3, r3, #9
 800bab6:	4413      	add	r3, r2
 800bab8:	4619      	mov	r1, r3
 800baba:	6938      	ldr	r0, [r7, #16]
 800babc:	f7ff fefe 	bl	800b8bc <move_window>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d153      	bne.n	800bb6e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	4413      	add	r3, r2
 800bad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bad4:	021b      	lsls	r3, r3, #8
 800bad6:	461a      	mov	r2, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	4313      	orrs	r3, r2
 800badc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <get_fat+0xbc>
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	091b      	lsrs	r3, r3, #4
 800baec:	e002      	b.n	800baf4 <get_fat+0xc2>
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800baf4:	617b      	str	r3, [r7, #20]
			break;
 800baf6:	e03f      	b.n	800bb78 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	6a1a      	ldr	r2, [r3, #32]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	0a1b      	lsrs	r3, r3, #8
 800bb00:	4413      	add	r3, r2
 800bb02:	4619      	mov	r1, r3
 800bb04:	6938      	ldr	r0, [r7, #16]
 800bb06:	f7ff fed9 	bl	800b8bc <move_window>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d130      	bne.n	800bb72 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bb1e:	4413      	add	r3, r2
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff fc1b 	bl	800b35c <ld_word>
 800bb26:	4603      	mov	r3, r0
 800bb28:	617b      	str	r3, [r7, #20]
			break;
 800bb2a:	e025      	b.n	800bb78 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	6a1a      	ldr	r2, [r3, #32]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	09db      	lsrs	r3, r3, #7
 800bb34:	4413      	add	r3, r2
 800bb36:	4619      	mov	r1, r3
 800bb38:	6938      	ldr	r0, [r7, #16]
 800bb3a:	f7ff febf 	bl	800b8bc <move_window>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d118      	bne.n	800bb76 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bb52:	4413      	add	r3, r2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff fc19 	bl	800b38c <ld_dword>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb60:	617b      	str	r3, [r7, #20]
			break;
 800bb62:	e009      	b.n	800bb78 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bb64:	2301      	movs	r3, #1
 800bb66:	617b      	str	r3, [r7, #20]
 800bb68:	e006      	b.n	800bb78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb6a:	bf00      	nop
 800bb6c:	e004      	b.n	800bb78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb6e:	bf00      	nop
 800bb70:	e002      	b.n	800bb78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb72:	bf00      	nop
 800bb74:	e000      	b.n	800bb78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bb76:	bf00      	nop
		}
	}

	return val;
 800bb78:	697b      	ldr	r3, [r7, #20]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bb82:	b590      	push	{r4, r7, lr}
 800bb84:	b089      	sub	sp, #36	; 0x24
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	60f8      	str	r0, [r7, #12]
 800bb8a:	60b9      	str	r1, [r7, #8]
 800bb8c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bb8e:	2302      	movs	r3, #2
 800bb90:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	f240 80d2 	bls.w	800bd3e <put_fat+0x1bc>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	f080 80cc 	bcs.w	800bd3e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	f000 8096 	beq.w	800bcdc <put_fat+0x15a>
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	f300 80cd 	bgt.w	800bd50 <put_fat+0x1ce>
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d002      	beq.n	800bbc0 <put_fat+0x3e>
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d06e      	beq.n	800bc9c <put_fat+0x11a>
 800bbbe:	e0c7      	b.n	800bd50 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	61bb      	str	r3, [r7, #24]
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	085b      	lsrs	r3, r3, #1
 800bbc8:	69ba      	ldr	r2, [r7, #24]
 800bbca:	4413      	add	r3, r2
 800bbcc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6a1a      	ldr	r2, [r3, #32]
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	0a5b      	lsrs	r3, r3, #9
 800bbd6:	4413      	add	r3, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7ff fe6e 	bl	800b8bc <move_window>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bbe4:	7ffb      	ldrb	r3, [r7, #31]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f040 80ab 	bne.w	800bd42 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	1c59      	adds	r1, r3, #1
 800bbf6:	61b9      	str	r1, [r7, #24]
 800bbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbfc:	4413      	add	r3, r2
 800bbfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00d      	beq.n	800bc26 <put_fat+0xa4>
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	b25b      	sxtb	r3, r3
 800bc10:	f003 030f 	and.w	r3, r3, #15
 800bc14:	b25a      	sxtb	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	011b      	lsls	r3, r3, #4
 800bc1c:	b25b      	sxtb	r3, r3
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	b25b      	sxtb	r3, r3
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	e001      	b.n	800bc2a <put_fat+0xa8>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2201      	movs	r2, #1
 800bc32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6a1a      	ldr	r2, [r3, #32]
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	0a5b      	lsrs	r3, r3, #9
 800bc3c:	4413      	add	r3, r2
 800bc3e:	4619      	mov	r1, r3
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f7ff fe3b 	bl	800b8bc <move_window>
 800bc46:	4603      	mov	r3, r0
 800bc48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc4a:	7ffb      	ldrb	r3, [r7, #31]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d17a      	bne.n	800bd46 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc5c:	4413      	add	r3, r2
 800bc5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <put_fat+0xf0>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	091b      	lsrs	r3, r3, #4
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	e00e      	b.n	800bc90 <put_fat+0x10e>
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	b25b      	sxtb	r3, r3
 800bc78:	f023 030f 	bic.w	r3, r3, #15
 800bc7c:	b25a      	sxtb	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	0a1b      	lsrs	r3, r3, #8
 800bc82:	b25b      	sxtb	r3, r3
 800bc84:	f003 030f 	and.w	r3, r3, #15
 800bc88:	b25b      	sxtb	r3, r3
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	b25b      	sxtb	r3, r3
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2201      	movs	r2, #1
 800bc98:	70da      	strb	r2, [r3, #3]
			break;
 800bc9a:	e059      	b.n	800bd50 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6a1a      	ldr	r2, [r3, #32]
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	0a1b      	lsrs	r3, r3, #8
 800bca4:	4413      	add	r3, r2
 800bca6:	4619      	mov	r1, r3
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f7ff fe07 	bl	800b8bc <move_window>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcb2:	7ffb      	ldrb	r3, [r7, #31]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d148      	bne.n	800bd4a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bcc6:	4413      	add	r3, r2
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	b292      	uxth	r2, r2
 800bccc:	4611      	mov	r1, r2
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7ff fb7f 	bl	800b3d2 <st_word>
			fs->wflag = 1;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	70da      	strb	r2, [r3, #3]
			break;
 800bcda:	e039      	b.n	800bd50 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6a1a      	ldr	r2, [r3, #32]
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	09db      	lsrs	r3, r3, #7
 800bce4:	4413      	add	r3, r2
 800bce6:	4619      	mov	r1, r3
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f7ff fde7 	bl	800b8bc <move_window>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcf2:	7ffb      	ldrb	r3, [r7, #31]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d12a      	bne.n	800bd4e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bd0c:	4413      	add	r3, r2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff fb3c 	bl	800b38c <ld_dword>
 800bd14:	4603      	mov	r3, r0
 800bd16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bd1a:	4323      	orrs	r3, r4
 800bd1c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bd2c:	4413      	add	r3, r2
 800bd2e:	6879      	ldr	r1, [r7, #4]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fb69 	bl	800b408 <st_dword>
			fs->wflag = 1;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	70da      	strb	r2, [r3, #3]
			break;
 800bd3c:	e008      	b.n	800bd50 <put_fat+0x1ce>
		}
	}
 800bd3e:	bf00      	nop
 800bd40:	e006      	b.n	800bd50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bd42:	bf00      	nop
 800bd44:	e004      	b.n	800bd50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bd46:	bf00      	nop
 800bd48:	e002      	b.n	800bd50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bd4a:	bf00      	nop
 800bd4c:	e000      	b.n	800bd50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bd4e:	bf00      	nop
	return res;
 800bd50:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3724      	adds	r7, #36	; 0x24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd90      	pop	{r4, r7, pc}

0800bd5a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b088      	sub	sp, #32
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d904      	bls.n	800bd80 <remove_chain+0x26>
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d301      	bcc.n	800bd84 <remove_chain+0x2a>
 800bd80:	2302      	movs	r3, #2
 800bd82:	e04b      	b.n	800be1c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00c      	beq.n	800bda4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	69b8      	ldr	r0, [r7, #24]
 800bd92:	f7ff fef6 	bl	800bb82 <put_fat>
 800bd96:	4603      	mov	r3, r0
 800bd98:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bd9a:	7ffb      	ldrb	r3, [r7, #31]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <remove_chain+0x4a>
 800bda0:	7ffb      	ldrb	r3, [r7, #31]
 800bda2:	e03b      	b.n	800be1c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bda4:	68b9      	ldr	r1, [r7, #8]
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f7ff fe43 	bl	800ba32 <get_fat>
 800bdac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d031      	beq.n	800be18 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d101      	bne.n	800bdbe <remove_chain+0x64>
 800bdba:	2302      	movs	r3, #2
 800bdbc:	e02e      	b.n	800be1c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc4:	d101      	bne.n	800bdca <remove_chain+0x70>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e028      	b.n	800be1c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bdca:	2200      	movs	r2, #0
 800bdcc:	68b9      	ldr	r1, [r7, #8]
 800bdce:	69b8      	ldr	r0, [r7, #24]
 800bdd0:	f7ff fed7 	bl	800bb82 <put_fat>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bdd8:	7ffb      	ldrb	r3, [r7, #31]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <remove_chain+0x88>
 800bdde:	7ffb      	ldrb	r3, [r7, #31]
 800bde0:	e01c      	b.n	800be1c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	691a      	ldr	r2, [r3, #16]
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	3b02      	subs	r3, #2
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d20b      	bcs.n	800be08 <remove_chain+0xae>
			fs->free_clst++;
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	791b      	ldrb	r3, [r3, #4]
 800bdfe:	f043 0301 	orr.w	r3, r3, #1
 800be02:	b2da      	uxtb	r2, r3
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	429a      	cmp	r2, r3
 800be14:	d3c6      	bcc.n	800bda4 <remove_chain+0x4a>
 800be16:	e000      	b.n	800be1a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800be18:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3720      	adds	r7, #32
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10d      	bne.n	800be56 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d004      	beq.n	800be50 <create_chain+0x2c>
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	69ba      	ldr	r2, [r7, #24]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d31b      	bcc.n	800be88 <create_chain+0x64>
 800be50:	2301      	movs	r3, #1
 800be52:	61bb      	str	r3, [r7, #24]
 800be54:	e018      	b.n	800be88 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7ff fdea 	bl	800ba32 <get_fat>
 800be5e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d801      	bhi.n	800be6a <create_chain+0x46>
 800be66:	2301      	movs	r3, #1
 800be68:	e070      	b.n	800bf4c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be70:	d101      	bne.n	800be76 <create_chain+0x52>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	e06a      	b.n	800bf4c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d201      	bcs.n	800be84 <create_chain+0x60>
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	e063      	b.n	800bf4c <create_chain+0x128>
		scl = clst;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	3301      	adds	r3, #1
 800be90:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	69fa      	ldr	r2, [r7, #28]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d307      	bcc.n	800beac <create_chain+0x88>
				ncl = 2;
 800be9c:	2302      	movs	r3, #2
 800be9e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bea0:	69fa      	ldr	r2, [r7, #28]
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d901      	bls.n	800beac <create_chain+0x88>
 800bea8:	2300      	movs	r3, #0
 800beaa:	e04f      	b.n	800bf4c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800beac:	69f9      	ldr	r1, [r7, #28]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f7ff fdbf 	bl	800ba32 <get_fat>
 800beb4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00e      	beq.n	800beda <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d003      	beq.n	800beca <create_chain+0xa6>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec8:	d101      	bne.n	800bece <create_chain+0xaa>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	e03e      	b.n	800bf4c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d1da      	bne.n	800be8c <create_chain+0x68>
 800bed6:	2300      	movs	r3, #0
 800bed8:	e038      	b.n	800bf4c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800beda:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bedc:	f04f 32ff 	mov.w	r2, #4294967295
 800bee0:	69f9      	ldr	r1, [r7, #28]
 800bee2:	6938      	ldr	r0, [r7, #16]
 800bee4:	f7ff fe4d 	bl	800bb82 <put_fat>
 800bee8:	4603      	mov	r3, r0
 800beea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d109      	bne.n	800bf06 <create_chain+0xe2>
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d006      	beq.n	800bf06 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bef8:	69fa      	ldr	r2, [r7, #28]
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	6938      	ldr	r0, [r7, #16]
 800befe:	f7ff fe40 	bl	800bb82 <put_fat>
 800bf02:	4603      	mov	r3, r0
 800bf04:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d116      	bne.n	800bf3a <create_chain+0x116>
		fs->last_clst = ncl;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	69fa      	ldr	r2, [r7, #28]
 800bf10:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	691a      	ldr	r2, [r3, #16]
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	3b02      	subs	r3, #2
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d804      	bhi.n	800bf2a <create_chain+0x106>
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	1e5a      	subs	r2, r3, #1
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	791b      	ldrb	r3, [r3, #4]
 800bf2e:	f043 0301 	orr.w	r3, r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	711a      	strb	r2, [r3, #4]
 800bf38:	e007      	b.n	800bf4a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bf3a:	7dfb      	ldrb	r3, [r7, #23]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d102      	bne.n	800bf46 <create_chain+0x122>
 800bf40:	f04f 33ff 	mov.w	r3, #4294967295
 800bf44:	e000      	b.n	800bf48 <create_chain+0x124>
 800bf46:	2301      	movs	r3, #1
 800bf48:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bf4a:	69fb      	ldr	r3, [r7, #28]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3720      	adds	r7, #32
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b087      	sub	sp, #28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf68:	3304      	adds	r3, #4
 800bf6a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	0a5b      	lsrs	r3, r3, #9
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	8952      	ldrh	r2, [r2, #10]
 800bf74:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	1d1a      	adds	r2, r3, #4
 800bf7e:	613a      	str	r2, [r7, #16]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <clmt_clust+0x3a>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e010      	b.n	800bfb0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d307      	bcc.n	800bfa6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bfa4:	e7e9      	b.n	800bf7a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bfa6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	4413      	add	r3, r2
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	371c      	adds	r7, #28
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfd2:	d204      	bcs.n	800bfde <dir_sdi+0x22>
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	f003 031f 	and.w	r3, r3, #31
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e063      	b.n	800c0aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d106      	bne.n	800c002 <dir_sdi+0x46>
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d902      	bls.n	800c002 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c000:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10c      	bne.n	800c022 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	095b      	lsrs	r3, r3, #5
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	8912      	ldrh	r2, [r2, #8]
 800c010:	4293      	cmp	r3, r2
 800c012:	d301      	bcc.n	800c018 <dir_sdi+0x5c>
 800c014:	2302      	movs	r3, #2
 800c016:	e048      	b.n	800c0aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	61da      	str	r2, [r3, #28]
 800c020:	e029      	b.n	800c076 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	895b      	ldrh	r3, [r3, #10]
 800c026:	025b      	lsls	r3, r3, #9
 800c028:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c02a:	e019      	b.n	800c060 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6979      	ldr	r1, [r7, #20]
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff fcfe 	bl	800ba32 <get_fat>
 800c036:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03e:	d101      	bne.n	800c044 <dir_sdi+0x88>
 800c040:	2301      	movs	r3, #1
 800c042:	e032      	b.n	800c0aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d904      	bls.n	800c054 <dir_sdi+0x98>
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	429a      	cmp	r2, r3
 800c052:	d301      	bcc.n	800c058 <dir_sdi+0x9c>
 800c054:	2302      	movs	r3, #2
 800c056:	e028      	b.n	800c0aa <dir_sdi+0xee>
			ofs -= csz;
 800c058:	683a      	ldr	r2, [r7, #0]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	429a      	cmp	r2, r3
 800c066:	d2e1      	bcs.n	800c02c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c068:	6979      	ldr	r1, [r7, #20]
 800c06a:	6938      	ldr	r0, [r7, #16]
 800c06c:	f7ff fcc2 	bl	800b9f4 <clust2sect>
 800c070:	4602      	mov	r2, r0
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	697a      	ldr	r2, [r7, #20]
 800c07a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	69db      	ldr	r3, [r3, #28]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <dir_sdi+0xcc>
 800c084:	2302      	movs	r3, #2
 800c086:	e010      	b.n	800c0aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	69da      	ldr	r2, [r3, #28]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	0a5b      	lsrs	r3, r3, #9
 800c090:	441a      	add	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a2:	441a      	add	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b086      	sub	sp, #24
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	3320      	adds	r3, #32
 800c0c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d003      	beq.n	800c0da <dir_next+0x28>
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0d8:	d301      	bcc.n	800c0de <dir_next+0x2c>
 800c0da:	2304      	movs	r3, #4
 800c0dc:	e0aa      	b.n	800c234 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f040 8098 	bne.w	800c21a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10b      	bne.n	800c114 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	095b      	lsrs	r3, r3, #5
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	8912      	ldrh	r2, [r2, #8]
 800c104:	4293      	cmp	r3, r2
 800c106:	f0c0 8088 	bcc.w	800c21a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	61da      	str	r2, [r3, #28]
 800c110:	2304      	movs	r3, #4
 800c112:	e08f      	b.n	800c234 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	0a5b      	lsrs	r3, r3, #9
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	8952      	ldrh	r2, [r2, #10]
 800c11c:	3a01      	subs	r2, #1
 800c11e:	4013      	ands	r3, r2
 800c120:	2b00      	cmp	r3, #0
 800c122:	d17a      	bne.n	800c21a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	4619      	mov	r1, r3
 800c12c:	4610      	mov	r0, r2
 800c12e:	f7ff fc80 	bl	800ba32 <get_fat>
 800c132:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d801      	bhi.n	800c13e <dir_next+0x8c>
 800c13a:	2302      	movs	r3, #2
 800c13c:	e07a      	b.n	800c234 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c144:	d101      	bne.n	800c14a <dir_next+0x98>
 800c146:	2301      	movs	r3, #1
 800c148:	e074      	b.n	800c234 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	695b      	ldr	r3, [r3, #20]
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	429a      	cmp	r2, r3
 800c152:	d358      	bcc.n	800c206 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d104      	bne.n	800c164 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	61da      	str	r2, [r3, #28]
 800c160:	2304      	movs	r3, #4
 800c162:	e067      	b.n	800c234 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	699b      	ldr	r3, [r3, #24]
 800c16a:	4619      	mov	r1, r3
 800c16c:	4610      	mov	r0, r2
 800c16e:	f7ff fe59 	bl	800be24 <create_chain>
 800c172:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <dir_next+0xcc>
 800c17a:	2307      	movs	r3, #7
 800c17c:	e05a      	b.n	800c234 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d101      	bne.n	800c188 <dir_next+0xd6>
 800c184:	2302      	movs	r3, #2
 800c186:	e055      	b.n	800c234 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18e:	d101      	bne.n	800c194 <dir_next+0xe2>
 800c190:	2301      	movs	r3, #1
 800c192:	e04f      	b.n	800c234 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f7ff fb4d 	bl	800b834 <sync_window>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <dir_next+0xf2>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e047      	b.n	800c234 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	3330      	adds	r3, #48	; 0x30
 800c1a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff f977 	bl	800b4a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	613b      	str	r3, [r7, #16]
 800c1b8:	6979      	ldr	r1, [r7, #20]
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f7ff fc1a 	bl	800b9f4 <clust2sect>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	62da      	str	r2, [r3, #44]	; 0x2c
 800c1c6:	e012      	b.n	800c1ee <dir_next+0x13c>
						fs->wflag = 1;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c1ce:	68f8      	ldr	r0, [r7, #12]
 800c1d0:	f7ff fb30 	bl	800b834 <sync_window>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <dir_next+0x12c>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e02a      	b.n	800c234 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	613b      	str	r3, [r7, #16]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e8:	1c5a      	adds	r2, r3, #1
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	62da      	str	r2, [r3, #44]	; 0x2c
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	895b      	ldrh	r3, [r3, #10]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d3e6      	bcc.n	800c1c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	1ad2      	subs	r2, r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c20c:	6979      	ldr	r1, [r7, #20]
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f7ff fbf0 	bl	800b9f4 <clust2sect>
 800c214:	4602      	mov	r2, r0
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c22c:	441a      	add	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3718      	adds	r7, #24
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c24c:	2100      	movs	r1, #0
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7ff feb4 	bl	800bfbc <dir_sdi>
 800c254:	4603      	mov	r3, r0
 800c256:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c258:	7dfb      	ldrb	r3, [r7, #23]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d12b      	bne.n	800c2b6 <dir_alloc+0x7a>
		n = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	4619      	mov	r1, r3
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7ff fb27 	bl	800b8bc <move_window>
 800c26e:	4603      	mov	r3, r0
 800c270:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c272:	7dfb      	ldrb	r3, [r7, #23]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d11d      	bne.n	800c2b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a1b      	ldr	r3, [r3, #32]
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	2be5      	cmp	r3, #229	; 0xe5
 800c280:	d004      	beq.n	800c28c <dir_alloc+0x50>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d107      	bne.n	800c29c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	3301      	adds	r3, #1
 800c290:	613b      	str	r3, [r7, #16]
 800c292:	693a      	ldr	r2, [r7, #16]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	429a      	cmp	r2, r3
 800c298:	d102      	bne.n	800c2a0 <dir_alloc+0x64>
 800c29a:	e00c      	b.n	800c2b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c29c:	2300      	movs	r3, #0
 800c29e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff ff05 	bl	800c0b2 <dir_next>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d0d7      	beq.n	800c262 <dir_alloc+0x26>
 800c2b2:	e000      	b.n	800c2b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c2b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
 800c2b8:	2b04      	cmp	r3, #4
 800c2ba:	d101      	bne.n	800c2c0 <dir_alloc+0x84>
 800c2bc:	2307      	movs	r3, #7
 800c2be:	75fb      	strb	r3, [r7, #23]
	return res;
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3718      	adds	r7, #24
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	331a      	adds	r3, #26
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7ff f83f 	bl	800b35c <ld_word>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	2b03      	cmp	r3, #3
 800c2e8:	d109      	bne.n	800c2fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	3314      	adds	r3, #20
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7ff f834 	bl	800b35c <ld_word>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	041b      	lsls	r3, r3, #16
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	331a      	adds	r3, #26
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	b292      	uxth	r2, r2
 800c31c:	4611      	mov	r1, r2
 800c31e:	4618      	mov	r0, r3
 800c320:	f7ff f857 	bl	800b3d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d109      	bne.n	800c340 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	f103 0214 	add.w	r2, r3, #20
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	0c1b      	lsrs	r3, r3, #16
 800c336:	b29b      	uxth	r3, r3
 800c338:	4619      	mov	r1, r3
 800c33a:	4610      	mov	r0, r2
 800c33c:	f7ff f849 	bl	800b3d2 <st_word>
	}
}
 800c340:	bf00      	nop
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c356:	2100      	movs	r1, #0
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff fe2f 	bl	800bfbc <dir_sdi>
 800c35e:	4603      	mov	r3, r0
 800c360:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c362:	7dfb      	ldrb	r3, [r7, #23]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <dir_find+0x24>
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	e03e      	b.n	800c3ea <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	69db      	ldr	r3, [r3, #28]
 800c370:	4619      	mov	r1, r3
 800c372:	6938      	ldr	r0, [r7, #16]
 800c374:	f7ff faa2 	bl	800b8bc <move_window>
 800c378:	4603      	mov	r3, r0
 800c37a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d12f      	bne.n	800c3e2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d102      	bne.n	800c396 <dir_find+0x4e>
 800c390:	2304      	movs	r3, #4
 800c392:	75fb      	strb	r3, [r7, #23]
 800c394:	e028      	b.n	800c3e8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a1b      	ldr	r3, [r3, #32]
 800c39a:	330b      	adds	r3, #11
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3a2:	b2da      	uxtb	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a1b      	ldr	r3, [r3, #32]
 800c3ac:	330b      	adds	r3, #11
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	f003 0308 	and.w	r3, r3, #8
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10a      	bne.n	800c3ce <dir_find+0x86>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6a18      	ldr	r0, [r3, #32]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3324      	adds	r3, #36	; 0x24
 800c3c0:	220b      	movs	r2, #11
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	f7ff f888 	bl	800b4d8 <mem_cmp>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00b      	beq.n	800c3e6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7ff fe6e 	bl	800c0b2 <dir_next>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c3da:	7dfb      	ldrb	r3, [r7, #23]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d0c5      	beq.n	800c36c <dir_find+0x24>
 800c3e0:	e002      	b.n	800c3e8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c3e2:	bf00      	nop
 800c3e4:	e000      	b.n	800c3e8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c3e6:	bf00      	nop

	return res;
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c400:	2101      	movs	r1, #1
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff ff1a 	bl	800c23c <dir_alloc>
 800c408:	4603      	mov	r3, r0
 800c40a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d11c      	bne.n	800c44c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	4619      	mov	r1, r3
 800c418:	68b8      	ldr	r0, [r7, #8]
 800c41a:	f7ff fa4f 	bl	800b8bc <move_window>
 800c41e:	4603      	mov	r3, r0
 800c420:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d111      	bne.n	800c44c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	2220      	movs	r2, #32
 800c42e:	2100      	movs	r1, #0
 800c430:	4618      	mov	r0, r3
 800c432:	f7ff f836 	bl	800b4a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a18      	ldr	r0, [r3, #32]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	3324      	adds	r3, #36	; 0x24
 800c43e:	220b      	movs	r2, #11
 800c440:	4619      	mov	r1, r3
 800c442:	f7ff f80d 	bl	800b460 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2201      	movs	r2, #1
 800c44a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	3324      	adds	r3, #36	; 0x24
 800c46c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c46e:	220b      	movs	r2, #11
 800c470:	2120      	movs	r1, #32
 800c472:	68b8      	ldr	r0, [r7, #8]
 800c474:	f7ff f815 	bl	800b4a2 <mem_set>
	si = i = 0; ni = 8;
 800c478:	2300      	movs	r3, #0
 800c47a:	613b      	str	r3, [r7, #16]
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	61fb      	str	r3, [r7, #28]
 800c480:	2308      	movs	r3, #8
 800c482:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	61fa      	str	r2, [r7, #28]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	4413      	add	r3, r2
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c492:	7efb      	ldrb	r3, [r7, #27]
 800c494:	2b20      	cmp	r3, #32
 800c496:	d94e      	bls.n	800c536 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c498:	7efb      	ldrb	r3, [r7, #27]
 800c49a:	2b2f      	cmp	r3, #47	; 0x2f
 800c49c:	d006      	beq.n	800c4ac <create_name+0x54>
 800c49e:	7efb      	ldrb	r3, [r7, #27]
 800c4a0:	2b5c      	cmp	r3, #92	; 0x5c
 800c4a2:	d110      	bne.n	800c4c6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c4a4:	e002      	b.n	800c4ac <create_name+0x54>
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	61fb      	str	r3, [r7, #28]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	2b2f      	cmp	r3, #47	; 0x2f
 800c4b6:	d0f6      	beq.n	800c4a6 <create_name+0x4e>
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	4413      	add	r3, r2
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b5c      	cmp	r3, #92	; 0x5c
 800c4c2:	d0f0      	beq.n	800c4a6 <create_name+0x4e>
			break;
 800c4c4:	e038      	b.n	800c538 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c4c6:	7efb      	ldrb	r3, [r7, #27]
 800c4c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c4ca:	d003      	beq.n	800c4d4 <create_name+0x7c>
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d30c      	bcc.n	800c4ee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2b0b      	cmp	r3, #11
 800c4d8:	d002      	beq.n	800c4e0 <create_name+0x88>
 800c4da:	7efb      	ldrb	r3, [r7, #27]
 800c4dc:	2b2e      	cmp	r3, #46	; 0x2e
 800c4de:	d001      	beq.n	800c4e4 <create_name+0x8c>
 800c4e0:	2306      	movs	r3, #6
 800c4e2:	e044      	b.n	800c56e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c4e4:	2308      	movs	r3, #8
 800c4e6:	613b      	str	r3, [r7, #16]
 800c4e8:	230b      	movs	r3, #11
 800c4ea:	617b      	str	r3, [r7, #20]
			continue;
 800c4ec:	e022      	b.n	800c534 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c4ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	da04      	bge.n	800c500 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c4f6:	7efb      	ldrb	r3, [r7, #27]
 800c4f8:	3b80      	subs	r3, #128	; 0x80
 800c4fa:	4a1f      	ldr	r2, [pc, #124]	; (800c578 <create_name+0x120>)
 800c4fc:	5cd3      	ldrb	r3, [r2, r3]
 800c4fe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c500:	7efb      	ldrb	r3, [r7, #27]
 800c502:	4619      	mov	r1, r3
 800c504:	481d      	ldr	r0, [pc, #116]	; (800c57c <create_name+0x124>)
 800c506:	f7ff f80e 	bl	800b526 <chk_chr>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <create_name+0xbc>
 800c510:	2306      	movs	r3, #6
 800c512:	e02c      	b.n	800c56e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c514:	7efb      	ldrb	r3, [r7, #27]
 800c516:	2b60      	cmp	r3, #96	; 0x60
 800c518:	d905      	bls.n	800c526 <create_name+0xce>
 800c51a:	7efb      	ldrb	r3, [r7, #27]
 800c51c:	2b7a      	cmp	r3, #122	; 0x7a
 800c51e:	d802      	bhi.n	800c526 <create_name+0xce>
 800c520:	7efb      	ldrb	r3, [r7, #27]
 800c522:	3b20      	subs	r3, #32
 800c524:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	1c5a      	adds	r2, r3, #1
 800c52a:	613a      	str	r2, [r7, #16]
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	4413      	add	r3, r2
 800c530:	7efa      	ldrb	r2, [r7, #27]
 800c532:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c534:	e7a6      	b.n	800c484 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c536:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	441a      	add	r2, r3
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <create_name+0xf4>
 800c548:	2306      	movs	r3, #6
 800c54a:	e010      	b.n	800c56e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2be5      	cmp	r3, #229	; 0xe5
 800c552:	d102      	bne.n	800c55a <create_name+0x102>
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	2205      	movs	r2, #5
 800c558:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c55a:	7efb      	ldrb	r3, [r7, #27]
 800c55c:	2b20      	cmp	r3, #32
 800c55e:	d801      	bhi.n	800c564 <create_name+0x10c>
 800c560:	2204      	movs	r2, #4
 800c562:	e000      	b.n	800c566 <create_name+0x10e>
 800c564:	2200      	movs	r2, #0
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	330b      	adds	r3, #11
 800c56a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c56c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3720      	adds	r7, #32
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	0800df54 	.word	0x0800df54
 800c57c:	0800dec4 	.word	0x0800dec4

0800c580 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c594:	e002      	b.n	800c59c <follow_path+0x1c>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	3301      	adds	r3, #1
 800c59a:	603b      	str	r3, [r7, #0]
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	2b2f      	cmp	r3, #47	; 0x2f
 800c5a2:	d0f8      	beq.n	800c596 <follow_path+0x16>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b5c      	cmp	r3, #92	; 0x5c
 800c5aa:	d0f4      	beq.n	800c596 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	2b1f      	cmp	r3, #31
 800c5b8:	d80a      	bhi.n	800c5d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2280      	movs	r2, #128	; 0x80
 800c5be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff fcf9 	bl	800bfbc <dir_sdi>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	75fb      	strb	r3, [r7, #23]
 800c5ce:	e043      	b.n	800c658 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c5d0:	463b      	mov	r3, r7
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff ff3f 	bl	800c458 <create_name>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5de:	7dfb      	ldrb	r3, [r7, #23]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d134      	bne.n	800c64e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff feaf 	bl	800c348 <dir_find>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c5f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00a      	beq.n	800c612 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c5fc:	7dfb      	ldrb	r3, [r7, #23]
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	d127      	bne.n	800c652 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c602:	7afb      	ldrb	r3, [r7, #11]
 800c604:	f003 0304 	and.w	r3, r3, #4
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d122      	bne.n	800c652 <follow_path+0xd2>
 800c60c:	2305      	movs	r3, #5
 800c60e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c610:	e01f      	b.n	800c652 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c612:	7afb      	ldrb	r3, [r7, #11]
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d11c      	bne.n	800c656 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	799b      	ldrb	r3, [r3, #6]
 800c620:	f003 0310 	and.w	r3, r3, #16
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c628:	2305      	movs	r3, #5
 800c62a:	75fb      	strb	r3, [r7, #23]
 800c62c:	e014      	b.n	800c658 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c63c:	4413      	add	r3, r2
 800c63e:	4619      	mov	r1, r3
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f7ff fe42 	bl	800c2ca <ld_clust>
 800c646:	4602      	mov	r2, r0
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c64c:	e7c0      	b.n	800c5d0 <follow_path+0x50>
			if (res != FR_OK) break;
 800c64e:	bf00      	nop
 800c650:	e002      	b.n	800c658 <follow_path+0xd8>
				break;
 800c652:	bf00      	nop
 800c654:	e000      	b.n	800c658 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c656:	bf00      	nop
			}
		}
	}

	return res;
 800c658:	7dfb      	ldrb	r3, [r7, #23]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c662:	b480      	push	{r7}
 800c664:	b087      	sub	sp, #28
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c66a:	f04f 33ff 	mov.w	r3, #4294967295
 800c66e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d031      	beq.n	800c6dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	617b      	str	r3, [r7, #20]
 800c67e:	e002      	b.n	800c686 <get_ldnumber+0x24>
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	3301      	adds	r3, #1
 800c684:	617b      	str	r3, [r7, #20]
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	2b20      	cmp	r3, #32
 800c68c:	d903      	bls.n	800c696 <get_ldnumber+0x34>
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b3a      	cmp	r3, #58	; 0x3a
 800c694:	d1f4      	bne.n	800c680 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2b3a      	cmp	r3, #58	; 0x3a
 800c69c:	d11c      	bne.n	800c6d8 <get_ldnumber+0x76>
			tp = *path;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	1c5a      	adds	r2, r3, #1
 800c6a8:	60fa      	str	r2, [r7, #12]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	3b30      	subs	r3, #48	; 0x30
 800c6ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	2b09      	cmp	r3, #9
 800c6b4:	d80e      	bhi.n	800c6d4 <get_ldnumber+0x72>
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d10a      	bne.n	800c6d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d107      	bne.n	800c6d4 <get_ldnumber+0x72>
					vol = (int)i;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	617b      	str	r3, [r7, #20]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	e002      	b.n	800c6de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c6d8:	2300      	movs	r3, #0
 800c6da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c6dc:	693b      	ldr	r3, [r7, #16]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	371c      	adds	r7, #28
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
	...

0800c6ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	70da      	strb	r2, [r3, #3]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c702:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7ff f8d8 	bl	800b8bc <move_window>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d001      	beq.n	800c716 <check_fs+0x2a>
 800c712:	2304      	movs	r3, #4
 800c714:	e038      	b.n	800c788 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3330      	adds	r3, #48	; 0x30
 800c71a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fe fe1c 	bl	800b35c <ld_word>
 800c724:	4603      	mov	r3, r0
 800c726:	461a      	mov	r2, r3
 800c728:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d001      	beq.n	800c734 <check_fs+0x48>
 800c730:	2303      	movs	r3, #3
 800c732:	e029      	b.n	800c788 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c73a:	2be9      	cmp	r3, #233	; 0xe9
 800c73c:	d009      	beq.n	800c752 <check_fs+0x66>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c744:	2beb      	cmp	r3, #235	; 0xeb
 800c746:	d11e      	bne.n	800c786 <check_fs+0x9a>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c74e:	2b90      	cmp	r3, #144	; 0x90
 800c750:	d119      	bne.n	800c786 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	3330      	adds	r3, #48	; 0x30
 800c756:	3336      	adds	r3, #54	; 0x36
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fe fe17 	bl	800b38c <ld_dword>
 800c75e:	4603      	mov	r3, r0
 800c760:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c764:	4a0a      	ldr	r2, [pc, #40]	; (800c790 <check_fs+0xa4>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d101      	bne.n	800c76e <check_fs+0x82>
 800c76a:	2300      	movs	r3, #0
 800c76c:	e00c      	b.n	800c788 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	3330      	adds	r3, #48	; 0x30
 800c772:	3352      	adds	r3, #82	; 0x52
 800c774:	4618      	mov	r0, r3
 800c776:	f7fe fe09 	bl	800b38c <ld_dword>
 800c77a:	4603      	mov	r3, r0
 800c77c:	4a05      	ldr	r2, [pc, #20]	; (800c794 <check_fs+0xa8>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d101      	bne.n	800c786 <check_fs+0x9a>
 800c782:	2300      	movs	r3, #0
 800c784:	e000      	b.n	800c788 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c786:	2302      	movs	r3, #2
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	00544146 	.word	0x00544146
 800c794:	33544146 	.word	0x33544146

0800c798 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b096      	sub	sp, #88	; 0x58
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f7ff ff58 	bl	800c662 <get_ldnumber>
 800c7b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	da01      	bge.n	800c7be <find_volume+0x26>
 800c7ba:	230b      	movs	r3, #11
 800c7bc:	e22d      	b.n	800cc1a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c7be:	4aa1      	ldr	r2, [pc, #644]	; (800ca44 <find_volume+0x2ac>)
 800c7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d101      	bne.n	800c7d2 <find_volume+0x3a>
 800c7ce:	230c      	movs	r3, #12
 800c7d0:	e223      	b.n	800cc1a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c7d8:	79fb      	ldrb	r3, [r7, #7]
 800c7da:	f023 0301 	bic.w	r3, r3, #1
 800c7de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d01a      	beq.n	800c81e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	785b      	ldrb	r3, [r3, #1]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe fd17 	bl	800b220 <disk_status>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c7f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10c      	bne.n	800c81e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c804:	79fb      	ldrb	r3, [r7, #7]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d007      	beq.n	800c81a <find_volume+0x82>
 800c80a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c80e:	f003 0304 	and.w	r3, r3, #4
 800c812:	2b00      	cmp	r3, #0
 800c814:	d001      	beq.n	800c81a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c816:	230a      	movs	r3, #10
 800c818:	e1ff      	b.n	800cc1a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c81a:	2300      	movs	r3, #0
 800c81c:	e1fd      	b.n	800cc1a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c820:	2200      	movs	r2, #0
 800c822:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c826:	b2da      	uxtb	r2, r3
 800c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82e:	785b      	ldrb	r3, [r3, #1]
 800c830:	4618      	mov	r0, r3
 800c832:	f7fe fd0f 	bl	800b254 <disk_initialize>
 800c836:	4603      	mov	r3, r0
 800c838:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c83c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c848:	2303      	movs	r3, #3
 800c84a:	e1e6      	b.n	800cc1a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c84c:	79fb      	ldrb	r3, [r7, #7]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d007      	beq.n	800c862 <find_volume+0xca>
 800c852:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c856:	f003 0304 	and.w	r3, r3, #4
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c85e:	230a      	movs	r3, #10
 800c860:	e1db      	b.n	800cc1a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c866:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c868:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c86a:	f7ff ff3f 	bl	800c6ec <check_fs>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d149      	bne.n	800c910 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c87c:	2300      	movs	r3, #0
 800c87e:	643b      	str	r3, [r7, #64]	; 0x40
 800c880:	e01e      	b.n	800c8c0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c884:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c88a:	011b      	lsls	r3, r3, #4
 800c88c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c890:	4413      	add	r3, r2
 800c892:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	3304      	adds	r3, #4
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d006      	beq.n	800c8ac <find_volume+0x114>
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe fd72 	bl	800b38c <ld_dword>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	e000      	b.n	800c8ae <find_volume+0x116>
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	3358      	adds	r3, #88	; 0x58
 800c8b4:	443b      	add	r3, r7
 800c8b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8bc:	3301      	adds	r3, #1
 800c8be:	643b      	str	r3, [r7, #64]	; 0x40
 800c8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d9dd      	bls.n	800c882 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <find_volume+0x13e>
 800c8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c8d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	3358      	adds	r3, #88	; 0x58
 800c8dc:	443b      	add	r3, r7
 800c8de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c8e2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d005      	beq.n	800c8f6 <find_volume+0x15e>
 800c8ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8ee:	f7ff fefd 	bl	800c6ec <check_fs>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	e000      	b.n	800c8f8 <find_volume+0x160>
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c8fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c900:	2b01      	cmp	r3, #1
 800c902:	d905      	bls.n	800c910 <find_volume+0x178>
 800c904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c906:	3301      	adds	r3, #1
 800c908:	643b      	str	r3, [r7, #64]	; 0x40
 800c90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c90c:	2b03      	cmp	r3, #3
 800c90e:	d9e2      	bls.n	800c8d6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c914:	2b04      	cmp	r3, #4
 800c916:	d101      	bne.n	800c91c <find_volume+0x184>
 800c918:	2301      	movs	r3, #1
 800c91a:	e17e      	b.n	800cc1a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c91c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c920:	2b01      	cmp	r3, #1
 800c922:	d901      	bls.n	800c928 <find_volume+0x190>
 800c924:	230d      	movs	r3, #13
 800c926:	e178      	b.n	800cc1a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92a:	3330      	adds	r3, #48	; 0x30
 800c92c:	330b      	adds	r3, #11
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe fd14 	bl	800b35c <ld_word>
 800c934:	4603      	mov	r3, r0
 800c936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c93a:	d001      	beq.n	800c940 <find_volume+0x1a8>
 800c93c:	230d      	movs	r3, #13
 800c93e:	e16c      	b.n	800cc1a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c942:	3330      	adds	r3, #48	; 0x30
 800c944:	3316      	adds	r3, #22
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe fd08 	bl	800b35c <ld_word>
 800c94c:	4603      	mov	r3, r0
 800c94e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c952:	2b00      	cmp	r3, #0
 800c954:	d106      	bne.n	800c964 <find_volume+0x1cc>
 800c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c958:	3330      	adds	r3, #48	; 0x30
 800c95a:	3324      	adds	r3, #36	; 0x24
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fe fd15 	bl	800b38c <ld_dword>
 800c962:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c968:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c972:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c976:	789b      	ldrb	r3, [r3, #2]
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d005      	beq.n	800c988 <find_volume+0x1f0>
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	789b      	ldrb	r3, [r3, #2]
 800c980:	2b02      	cmp	r3, #2
 800c982:	d001      	beq.n	800c988 <find_volume+0x1f0>
 800c984:	230d      	movs	r3, #13
 800c986:	e148      	b.n	800cc1a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	789b      	ldrb	r3, [r3, #2]
 800c98c:	461a      	mov	r2, r3
 800c98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c990:	fb02 f303 	mul.w	r3, r2, r3
 800c994:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a4:	895b      	ldrh	r3, [r3, #10]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d008      	beq.n	800c9bc <find_volume+0x224>
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ac:	895b      	ldrh	r3, [r3, #10]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b2:	895b      	ldrh	r3, [r3, #10]
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <find_volume+0x228>
 800c9bc:	230d      	movs	r3, #13
 800c9be:	e12c      	b.n	800cc1a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	3330      	adds	r3, #48	; 0x30
 800c9c4:	3311      	adds	r3, #17
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe fcc8 	bl	800b35c <ld_word>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	891b      	ldrh	r3, [r3, #8]
 800c9d8:	f003 030f 	and.w	r3, r3, #15
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <find_volume+0x24e>
 800c9e2:	230d      	movs	r3, #13
 800c9e4:	e119      	b.n	800cc1a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	3330      	adds	r3, #48	; 0x30
 800c9ea:	3313      	adds	r3, #19
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fe fcb5 	bl	800b35c <ld_word>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c9f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d106      	bne.n	800ca0a <find_volume+0x272>
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	3330      	adds	r3, #48	; 0x30
 800ca00:	3320      	adds	r3, #32
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe fcc2 	bl	800b38c <ld_dword>
 800ca08:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	3330      	adds	r3, #48	; 0x30
 800ca0e:	330e      	adds	r3, #14
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fe fca3 	bl	800b35c <ld_word>
 800ca16:	4603      	mov	r3, r0
 800ca18:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d101      	bne.n	800ca24 <find_volume+0x28c>
 800ca20:	230d      	movs	r3, #13
 800ca22:	e0fa      	b.n	800cc1a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ca24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca28:	4413      	add	r3, r2
 800ca2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca2c:	8912      	ldrh	r2, [r2, #8]
 800ca2e:	0912      	lsrs	r2, r2, #4
 800ca30:	b292      	uxth	r2, r2
 800ca32:	4413      	add	r3, r2
 800ca34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ca36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d204      	bcs.n	800ca48 <find_volume+0x2b0>
 800ca3e:	230d      	movs	r3, #13
 800ca40:	e0eb      	b.n	800cc1a <find_volume+0x482>
 800ca42:	bf00      	nop
 800ca44:	24000224 	.word	0x24000224
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ca48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4c:	1ad3      	subs	r3, r2, r3
 800ca4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca50:	8952      	ldrh	r2, [r2, #10]
 800ca52:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca56:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <find_volume+0x2ca>
 800ca5e:	230d      	movs	r3, #13
 800ca60:	e0db      	b.n	800cc1a <find_volume+0x482>
		fmt = FS_FAT32;
 800ca62:	2303      	movs	r3, #3
 800ca64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d802      	bhi.n	800ca78 <find_volume+0x2e0>
 800ca72:	2302      	movs	r3, #2
 800ca74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d802      	bhi.n	800ca88 <find_volume+0x2f0>
 800ca82:	2301      	movs	r3, #1
 800ca84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	1c9a      	adds	r2, r3, #2
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca94:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ca96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca9a:	441a      	add	r2, r3
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800caa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800caa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa4:	441a      	add	r2, r3
 800caa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800caaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d11e      	bne.n	800caf0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	3330      	adds	r3, #48	; 0x30
 800cab6:	332a      	adds	r3, #42	; 0x2a
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fe fc4f 	bl	800b35c <ld_word>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d001      	beq.n	800cac8 <find_volume+0x330>
 800cac4:	230d      	movs	r3, #13
 800cac6:	e0a8      	b.n	800cc1a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	891b      	ldrh	r3, [r3, #8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <find_volume+0x33c>
 800cad0:	230d      	movs	r3, #13
 800cad2:	e0a2      	b.n	800cc1a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	3330      	adds	r3, #48	; 0x30
 800cad8:	332c      	adds	r3, #44	; 0x2c
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe fc56 	bl	800b38c <ld_dword>
 800cae0:	4602      	mov	r2, r0
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	647b      	str	r3, [r7, #68]	; 0x44
 800caee:	e01f      	b.n	800cb30 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	891b      	ldrh	r3, [r3, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <find_volume+0x364>
 800caf8:	230d      	movs	r3, #13
 800cafa:	e08e      	b.n	800cc1a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafe:	6a1a      	ldr	r2, [r3, #32]
 800cb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb02:	441a      	add	r2, r3
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d103      	bne.n	800cb18 <find_volume+0x380>
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	e00a      	b.n	800cb2e <find_volume+0x396>
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	695a      	ldr	r2, [r3, #20]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	4413      	add	r3, r2
 800cb22:	085a      	lsrs	r2, r3, #1
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	f003 0301 	and.w	r3, r3, #1
 800cb2c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cb2e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb32:	699a      	ldr	r2, [r3, #24]
 800cb34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb36:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb3a:	0a5b      	lsrs	r3, r3, #9
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d201      	bcs.n	800cb44 <find_volume+0x3ac>
 800cb40:	230d      	movs	r3, #13
 800cb42:	e06a      	b.n	800cc1a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb46:	f04f 32ff 	mov.w	r2, #4294967295
 800cb4a:	611a      	str	r2, [r3, #16]
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4e:	691a      	ldr	r2, [r3, #16]
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb56:	2280      	movs	r2, #128	; 0x80
 800cb58:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cb5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d149      	bne.n	800cbf6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	3330      	adds	r3, #48	; 0x30
 800cb66:	3330      	adds	r3, #48	; 0x30
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fe fbf7 	bl	800b35c <ld_word>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d140      	bne.n	800cbf6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cb74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb76:	3301      	adds	r3, #1
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb7c:	f7fe fe9e 	bl	800b8bc <move_window>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d137      	bne.n	800cbf6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	2200      	movs	r2, #0
 800cb8a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	3330      	adds	r3, #48	; 0x30
 800cb90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fe fbe1 	bl	800b35c <ld_word>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d127      	bne.n	800cbf6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	3330      	adds	r3, #48	; 0x30
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fe fbee 	bl	800b38c <ld_dword>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	4a1c      	ldr	r2, [pc, #112]	; (800cc24 <find_volume+0x48c>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d11e      	bne.n	800cbf6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	3330      	adds	r3, #48	; 0x30
 800cbbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fe fbe3 	bl	800b38c <ld_dword>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	4a17      	ldr	r2, [pc, #92]	; (800cc28 <find_volume+0x490>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d113      	bne.n	800cbf6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	3330      	adds	r3, #48	; 0x30
 800cbd2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7fe fbd8 	bl	800b38c <ld_dword>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	3330      	adds	r3, #48	; 0x30
 800cbe6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe fbce 	bl	800b38c <ld_dword>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cbfc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cbfe:	4b0b      	ldr	r3, [pc, #44]	; (800cc2c <find_volume+0x494>)
 800cc00:	881b      	ldrh	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	4b09      	ldr	r3, [pc, #36]	; (800cc2c <find_volume+0x494>)
 800cc08:	801a      	strh	r2, [r3, #0]
 800cc0a:	4b08      	ldr	r3, [pc, #32]	; (800cc2c <find_volume+0x494>)
 800cc0c:	881a      	ldrh	r2, [r3, #0]
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc14:	f7fe fdea 	bl	800b7ec <clear_lock>
#endif
	return FR_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3758      	adds	r7, #88	; 0x58
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	41615252 	.word	0x41615252
 800cc28:	61417272 	.word	0x61417272
 800cc2c:	24000228 	.word	0x24000228

0800cc30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cc3a:	2309      	movs	r3, #9
 800cc3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d01c      	beq.n	800cc7e <validate+0x4e>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d018      	beq.n	800cc7e <validate+0x4e>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d013      	beq.n	800cc7e <validate+0x4e>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	889a      	ldrh	r2, [r3, #4]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	88db      	ldrh	r3, [r3, #6]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d10c      	bne.n	800cc7e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	785b      	ldrb	r3, [r3, #1]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fad8 	bl	800b220 <disk_status>
 800cc70:	4603      	mov	r3, r0
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d101      	bne.n	800cc7e <validate+0x4e>
			res = FR_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <validate+0x5a>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	e000      	b.n	800cc8c <validate+0x5c>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	6013      	str	r3, [r2, #0]
	return res;
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
	...

0800cc9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	4613      	mov	r3, r2
 800cca8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ccae:	f107 0310 	add.w	r3, r7, #16
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7ff fcd5 	bl	800c662 <get_ldnumber>
 800ccb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	da01      	bge.n	800ccc4 <f_mount+0x28>
 800ccc0:	230b      	movs	r3, #11
 800ccc2:	e02b      	b.n	800cd1c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ccc4:	4a17      	ldr	r2, [pc, #92]	; (800cd24 <f_mount+0x88>)
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cccc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d005      	beq.n	800cce0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ccd4:	69b8      	ldr	r0, [r7, #24]
 800ccd6:	f7fe fd89 	bl	800b7ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	490d      	ldr	r1, [pc, #52]	; (800cd24 <f_mount+0x88>)
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <f_mount+0x66>
 800ccfc:	79fb      	ldrb	r3, [r7, #7]
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d001      	beq.n	800cd06 <f_mount+0x6a>
 800cd02:	2300      	movs	r3, #0
 800cd04:	e00a      	b.n	800cd1c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd06:	f107 010c 	add.w	r1, r7, #12
 800cd0a:	f107 0308 	add.w	r3, r7, #8
 800cd0e:	2200      	movs	r2, #0
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff fd41 	bl	800c798 <find_volume>
 800cd16:	4603      	mov	r3, r0
 800cd18:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3720      	adds	r7, #32
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	24000224 	.word	0x24000224

0800cd28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b098      	sub	sp, #96	; 0x60
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	4613      	mov	r3, r2
 800cd34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d101      	bne.n	800cd40 <f_open+0x18>
 800cd3c:	2309      	movs	r3, #9
 800cd3e:	e1ad      	b.n	800d09c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cd48:	79fa      	ldrb	r2, [r7, #7]
 800cd4a:	f107 0110 	add.w	r1, r7, #16
 800cd4e:	f107 0308 	add.w	r3, r7, #8
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff fd20 	bl	800c798 <find_volume>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cd5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f040 8191 	bne.w	800d08a <f_open+0x362>
		dj.obj.fs = fs;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cd6c:	68ba      	ldr	r2, [r7, #8]
 800cd6e:	f107 0314 	add.w	r3, r7, #20
 800cd72:	4611      	mov	r1, r2
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7ff fc03 	bl	800c580 <follow_path>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cd80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d11a      	bne.n	800cdbe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cd88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cd8c:	b25b      	sxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	da03      	bge.n	800cd9a <f_open+0x72>
				res = FR_INVALID_NAME;
 800cd92:	2306      	movs	r3, #6
 800cd94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cd98:	e011      	b.n	800cdbe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd9a:	79fb      	ldrb	r3, [r7, #7]
 800cd9c:	f023 0301 	bic.w	r3, r3, #1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	bf14      	ite	ne
 800cda4:	2301      	movne	r3, #1
 800cda6:	2300      	moveq	r3, #0
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f107 0314 	add.w	r3, r7, #20
 800cdb0:	4611      	mov	r1, r2
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fe fbd2 	bl	800b55c <chk_lock>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cdbe:	79fb      	ldrb	r3, [r7, #7]
 800cdc0:	f003 031c 	and.w	r3, r3, #28
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d07f      	beq.n	800cec8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cdc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d017      	beq.n	800ce00 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cdd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdd4:	2b04      	cmp	r3, #4
 800cdd6:	d10e      	bne.n	800cdf6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cdd8:	f7fe fc1c 	bl	800b614 <enq_lock>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d006      	beq.n	800cdf0 <f_open+0xc8>
 800cde2:	f107 0314 	add.w	r3, r7, #20
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7ff fb03 	bl	800c3f2 <dir_register>
 800cdec:	4603      	mov	r3, r0
 800cdee:	e000      	b.n	800cdf2 <f_open+0xca>
 800cdf0:	2312      	movs	r3, #18
 800cdf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	f043 0308 	orr.w	r3, r3, #8
 800cdfc:	71fb      	strb	r3, [r7, #7]
 800cdfe:	e010      	b.n	800ce22 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ce00:	7ebb      	ldrb	r3, [r7, #26]
 800ce02:	f003 0311 	and.w	r3, r3, #17
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d003      	beq.n	800ce12 <f_open+0xea>
					res = FR_DENIED;
 800ce0a:	2307      	movs	r3, #7
 800ce0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce10:	e007      	b.n	800ce22 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ce12:	79fb      	ldrb	r3, [r7, #7]
 800ce14:	f003 0304 	and.w	r3, r3, #4
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d002      	beq.n	800ce22 <f_open+0xfa>
 800ce1c:	2308      	movs	r3, #8
 800ce1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ce22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d168      	bne.n	800cefc <f_open+0x1d4>
 800ce2a:	79fb      	ldrb	r3, [r7, #7]
 800ce2c:	f003 0308 	and.w	r3, r3, #8
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d063      	beq.n	800cefc <f_open+0x1d4>
				dw = GET_FATTIME();
 800ce34:	f7fe f860 	bl	800aef8 <get_fattime>
 800ce38:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ce3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3c:	330e      	adds	r3, #14
 800ce3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fe fae1 	bl	800b408 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ce46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce48:	3316      	adds	r3, #22
 800ce4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fe fadb 	bl	800b408 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ce52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce54:	330b      	adds	r3, #11
 800ce56:	2220      	movs	r2, #32
 800ce58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff fa32 	bl	800c2ca <ld_clust>
 800ce66:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7ff fa4a 	bl	800c308 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ce74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce76:	331c      	adds	r3, #28
 800ce78:	2100      	movs	r1, #0
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fe fac4 	bl	800b408 <st_dword>
					fs->wflag = 1;
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	2201      	movs	r2, #1
 800ce84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ce86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d037      	beq.n	800cefc <f_open+0x1d4>
						dw = fs->winsect;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ce92:	f107 0314 	add.w	r3, r7, #20
 800ce96:	2200      	movs	r2, #0
 800ce98:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fe ff5d 	bl	800bd5a <remove_chain>
 800cea0:	4603      	mov	r3, r0
 800cea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d126      	bne.n	800cefc <f_open+0x1d4>
							res = move_window(fs, dw);
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe fd02 	bl	800b8bc <move_window>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cec2:	3a01      	subs	r2, #1
 800cec4:	60da      	str	r2, [r3, #12]
 800cec6:	e019      	b.n	800cefc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cec8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d115      	bne.n	800cefc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ced0:	7ebb      	ldrb	r3, [r7, #26]
 800ced2:	f003 0310 	and.w	r3, r3, #16
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d003      	beq.n	800cee2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ceda:	2304      	movs	r3, #4
 800cedc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cee0:	e00c      	b.n	800cefc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	f003 0302 	and.w	r3, r3, #2
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d007      	beq.n	800cefc <f_open+0x1d4>
 800ceec:	7ebb      	ldrb	r3, [r7, #26]
 800ceee:	f003 0301 	and.w	r3, r3, #1
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <f_open+0x1d4>
						res = FR_DENIED;
 800cef6:	2307      	movs	r3, #7
 800cef8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cefc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d128      	bne.n	800cf56 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	f003 0308 	and.w	r3, r3, #8
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cf1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	f023 0301 	bic.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	bf14      	ite	ne
 800cf2e:	2301      	movne	r3, #1
 800cf30:	2300      	moveq	r3, #0
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	461a      	mov	r2, r3
 800cf36:	f107 0314 	add.w	r3, r7, #20
 800cf3a:	4611      	mov	r1, r2
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fe fb8b 	bl	800b658 <inc_lock>
 800cf42:	4602      	mov	r2, r0
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d102      	bne.n	800cf56 <f_open+0x22e>
 800cf50:	2302      	movs	r3, #2
 800cf52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cf56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f040 8095 	bne.w	800d08a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf64:	4611      	mov	r1, r2
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff f9af 	bl	800c2ca <ld_clust>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf74:	331c      	adds	r3, #28
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fe fa08 	bl	800b38c <ld_dword>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cf88:	693a      	ldr	r2, [r7, #16]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	88da      	ldrh	r2, [r3, #6]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	79fa      	ldrb	r2, [r7, #7]
 800cf9a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	3330      	adds	r3, #48	; 0x30
 800cfb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fe fa72 	bl	800b4a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cfbe:	79fb      	ldrb	r3, [r7, #7]
 800cfc0:	f003 0320 	and.w	r3, r3, #32
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d060      	beq.n	800d08a <f_open+0x362>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d05c      	beq.n	800d08a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	68da      	ldr	r2, [r3, #12]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	895b      	ldrh	r3, [r3, #10]
 800cfdc:	025b      	lsls	r3, r3, #9
 800cfde:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	657b      	str	r3, [r7, #84]	; 0x54
 800cfec:	e016      	b.n	800d01c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fd1d 	bl	800ba32 <get_fat>
 800cff8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d802      	bhi.n	800d006 <f_open+0x2de>
 800d000:	2302      	movs	r3, #2
 800d002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00c:	d102      	bne.n	800d014 <f_open+0x2ec>
 800d00e:	2301      	movs	r3, #1
 800d010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	657b      	str	r3, [r7, #84]	; 0x54
 800d01c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d020:	2b00      	cmp	r3, #0
 800d022:	d103      	bne.n	800d02c <f_open+0x304>
 800d024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d028:	429a      	cmp	r2, r3
 800d02a:	d8e0      	bhi.n	800cfee <f_open+0x2c6>
				}
				fp->clust = clst;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d030:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d036:	2b00      	cmp	r3, #0
 800d038:	d127      	bne.n	800d08a <f_open+0x362>
 800d03a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d040:	2b00      	cmp	r3, #0
 800d042:	d022      	beq.n	800d08a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe fcd3 	bl	800b9f4 <clust2sect>
 800d04e:	6478      	str	r0, [r7, #68]	; 0x44
 800d050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d052:	2b00      	cmp	r3, #0
 800d054:	d103      	bne.n	800d05e <f_open+0x336>
						res = FR_INT_ERR;
 800d056:	2302      	movs	r3, #2
 800d058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d05c:	e015      	b.n	800d08a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d05e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d060:	0a5a      	lsrs	r2, r3, #9
 800d062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d064:	441a      	add	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	7858      	ldrb	r0, [r3, #1]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6a1a      	ldr	r2, [r3, #32]
 800d078:	2301      	movs	r3, #1
 800d07a:	f7fe f911 	bl	800b2a0 <disk_read>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d002      	beq.n	800d08a <f_open+0x362>
 800d084:	2301      	movs	r3, #1
 800d086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d08a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d002      	beq.n	800d098 <f_open+0x370>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2200      	movs	r2, #0
 800d096:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3760      	adds	r7, #96	; 0x60
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08e      	sub	sp, #56	; 0x38
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
 800d0b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f107 0214 	add.w	r2, r7, #20
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7ff fdb3 	bl	800cc30 <validate>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d0d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d107      	bne.n	800d0e8 <f_read+0x44>
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	7d5b      	ldrb	r3, [r3, #21]
 800d0dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d0e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d002      	beq.n	800d0ee <f_read+0x4a>
 800d0e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0ec:	e115      	b.n	800d31a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	7d1b      	ldrb	r3, [r3, #20]
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <f_read+0x5a>
 800d0fa:	2307      	movs	r3, #7
 800d0fc:	e10d      	b.n	800d31a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	68da      	ldr	r2, [r3, #12]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	699b      	ldr	r3, [r3, #24]
 800d106:	1ad3      	subs	r3, r2, r3
 800d108:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	429a      	cmp	r2, r3
 800d110:	f240 80fe 	bls.w	800d310 <f_read+0x26c>
 800d114:	6a3b      	ldr	r3, [r7, #32]
 800d116:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d118:	e0fa      	b.n	800d310 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d122:	2b00      	cmp	r3, #0
 800d124:	f040 80c6 	bne.w	800d2b4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	0a5b      	lsrs	r3, r3, #9
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	8952      	ldrh	r2, [r2, #10]
 800d132:	3a01      	subs	r2, #1
 800d134:	4013      	ands	r3, r2
 800d136:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d12f      	bne.n	800d19e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d103      	bne.n	800d14e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	633b      	str	r3, [r7, #48]	; 0x30
 800d14c:	e013      	b.n	800d176 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d152:	2b00      	cmp	r3, #0
 800d154:	d007      	beq.n	800d166 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	699b      	ldr	r3, [r3, #24]
 800d15a:	4619      	mov	r1, r3
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f7fe fef9 	bl	800bf54 <clmt_clust>
 800d162:	6338      	str	r0, [r7, #48]	; 0x30
 800d164:	e007      	b.n	800d176 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	69db      	ldr	r3, [r3, #28]
 800d16c:	4619      	mov	r1, r3
 800d16e:	4610      	mov	r0, r2
 800d170:	f7fe fc5f 	bl	800ba32 <get_fat>
 800d174:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d804      	bhi.n	800d186 <f_read+0xe2>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2202      	movs	r2, #2
 800d180:	755a      	strb	r2, [r3, #21]
 800d182:	2302      	movs	r3, #2
 800d184:	e0c9      	b.n	800d31a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18c:	d104      	bne.n	800d198 <f_read+0xf4>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2201      	movs	r2, #1
 800d192:	755a      	strb	r2, [r3, #21]
 800d194:	2301      	movs	r3, #1
 800d196:	e0c0      	b.n	800d31a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d19c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	69db      	ldr	r3, [r3, #28]
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4610      	mov	r0, r2
 800d1a8:	f7fe fc24 	bl	800b9f4 <clust2sect>
 800d1ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d104      	bne.n	800d1be <f_read+0x11a>
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	755a      	strb	r2, [r3, #21]
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	e0ad      	b.n	800d31a <f_read+0x276>
			sect += csect;
 800d1be:	69ba      	ldr	r2, [r7, #24]
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	0a5b      	lsrs	r3, r3, #9
 800d1ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d039      	beq.n	800d246 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d1d2:	69fa      	ldr	r2, [r7, #28]
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	4413      	add	r3, r2
 800d1d8:	697a      	ldr	r2, [r7, #20]
 800d1da:	8952      	ldrh	r2, [r2, #10]
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d905      	bls.n	800d1ec <f_read+0x148>
					cc = fs->csize - csect;
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	895b      	ldrh	r3, [r3, #10]
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	7858      	ldrb	r0, [r3, #1]
 800d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f2:	69ba      	ldr	r2, [r7, #24]
 800d1f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1f6:	f7fe f853 	bl	800b2a0 <disk_read>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d004      	beq.n	800d20a <f_read+0x166>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2201      	movs	r2, #1
 800d204:	755a      	strb	r2, [r3, #21]
 800d206:	2301      	movs	r3, #1
 800d208:	e087      	b.n	800d31a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	7d1b      	ldrb	r3, [r3, #20]
 800d20e:	b25b      	sxtb	r3, r3
 800d210:	2b00      	cmp	r3, #0
 800d212:	da14      	bge.n	800d23e <f_read+0x19a>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6a1a      	ldr	r2, [r3, #32]
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d21e:	429a      	cmp	r2, r3
 800d220:	d90d      	bls.n	800d23e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6a1a      	ldr	r2, [r3, #32]
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	025b      	lsls	r3, r3, #9
 800d22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d22e:	18d0      	adds	r0, r2, r3
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	3330      	adds	r3, #48	; 0x30
 800d234:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d238:	4619      	mov	r1, r3
 800d23a:	f7fe f911 	bl	800b460 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	025b      	lsls	r3, r3, #9
 800d242:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d244:	e050      	b.n	800d2e8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	6a1b      	ldr	r3, [r3, #32]
 800d24a:	69ba      	ldr	r2, [r7, #24]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d02e      	beq.n	800d2ae <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	7d1b      	ldrb	r3, [r3, #20]
 800d254:	b25b      	sxtb	r3, r3
 800d256:	2b00      	cmp	r3, #0
 800d258:	da18      	bge.n	800d28c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	7858      	ldrb	r0, [r3, #1]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6a1a      	ldr	r2, [r3, #32]
 800d268:	2301      	movs	r3, #1
 800d26a:	f7fe f839 	bl	800b2e0 <disk_write>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d004      	beq.n	800d27e <f_read+0x1da>
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2201      	movs	r2, #1
 800d278:	755a      	strb	r2, [r3, #21]
 800d27a:	2301      	movs	r3, #1
 800d27c:	e04d      	b.n	800d31a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	7d1b      	ldrb	r3, [r3, #20]
 800d282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d286:	b2da      	uxtb	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	7858      	ldrb	r0, [r3, #1]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d296:	2301      	movs	r3, #1
 800d298:	69ba      	ldr	r2, [r7, #24]
 800d29a:	f7fe f801 	bl	800b2a0 <disk_read>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d004      	beq.n	800d2ae <f_read+0x20a>
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	755a      	strb	r2, [r3, #21]
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e035      	b.n	800d31a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	69ba      	ldr	r2, [r7, #24]
 800d2b2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d2c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d901      	bls.n	800d2ce <f_read+0x22a>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2dc:	4413      	add	r3, r2
 800d2de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2e4:	f7fe f8bc 	bl	800b460 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ec:	4413      	add	r3, r2
 800d2ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	699a      	ldr	r2, [r3, #24]
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	441a      	add	r2, r3
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	619a      	str	r2, [r3, #24]
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	441a      	add	r2, r3
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2b00      	cmp	r3, #0
 800d314:	f47f af01 	bne.w	800d11a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3738      	adds	r7, #56	; 0x38
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b086      	sub	sp, #24
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f107 0208 	add.w	r2, r7, #8
 800d330:	4611      	mov	r1, r2
 800d332:	4618      	mov	r0, r3
 800d334:	f7ff fc7c 	bl	800cc30 <validate>
 800d338:	4603      	mov	r3, r0
 800d33a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d33c:	7dfb      	ldrb	r3, [r7, #23]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d168      	bne.n	800d414 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	7d1b      	ldrb	r3, [r3, #20]
 800d346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d062      	beq.n	800d414 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	7d1b      	ldrb	r3, [r3, #20]
 800d352:	b25b      	sxtb	r3, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	da15      	bge.n	800d384 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	7858      	ldrb	r0, [r3, #1]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a1a      	ldr	r2, [r3, #32]
 800d366:	2301      	movs	r3, #1
 800d368:	f7fd ffba 	bl	800b2e0 <disk_write>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <f_sync+0x54>
 800d372:	2301      	movs	r3, #1
 800d374:	e04f      	b.n	800d416 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7d1b      	ldrb	r3, [r3, #20]
 800d37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d384:	f7fd fdb8 	bl	800aef8 <get_fattime>
 800d388:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d390:	4619      	mov	r1, r3
 800d392:	4610      	mov	r0, r2
 800d394:	f7fe fa92 	bl	800b8bc <move_window>
 800d398:	4603      	mov	r3, r0
 800d39a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d39c:	7dfb      	ldrb	r3, [r7, #23]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d138      	bne.n	800d414 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	330b      	adds	r3, #11
 800d3ac:	781a      	ldrb	r2, [r3, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	330b      	adds	r3, #11
 800d3b2:	f042 0220 	orr.w	r2, r2, #32
 800d3b6:	b2d2      	uxtb	r2, r2
 800d3b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6818      	ldr	r0, [r3, #0]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	68f9      	ldr	r1, [r7, #12]
 800d3c6:	f7fe ff9f 	bl	800c308 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f103 021c 	add.w	r2, r3, #28
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	4610      	mov	r0, r2
 800d3d8:	f7fe f816 	bl	800b408 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	3316      	adds	r3, #22
 800d3e0:	6939      	ldr	r1, [r7, #16]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fe f810 	bl	800b408 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	3312      	adds	r3, #18
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fd ffef 	bl	800b3d2 <st_word>
					fs->wflag = 1;
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe fa8b 	bl	800b918 <sync_fs>
 800d402:	4603      	mov	r3, r0
 800d404:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	7d1b      	ldrb	r3, [r3, #20]
 800d40a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d40e:	b2da      	uxtb	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d414:	7dfb      	ldrb	r3, [r7, #23]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b084      	sub	sp, #16
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff ff7b 	bl	800d322 <f_sync>
 800d42c:	4603      	mov	r3, r0
 800d42e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d430:	7bfb      	ldrb	r3, [r7, #15]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d118      	bne.n	800d468 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f107 0208 	add.w	r2, r7, #8
 800d43c:	4611      	mov	r1, r2
 800d43e:	4618      	mov	r0, r3
 800d440:	f7ff fbf6 	bl	800cc30 <validate>
 800d444:	4603      	mov	r3, r0
 800d446:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10c      	bne.n	800d468 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe f98e 	bl	800b774 <dec_lock>
 800d458:	4603      	mov	r3, r0
 800d45a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d102      	bne.n	800d468 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d468:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
	...

0800d474 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d474:	b480      	push	{r7}
 800d476:	b087      	sub	sp, #28
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	4613      	mov	r3, r2
 800d480:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d482:	2301      	movs	r3, #1
 800d484:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d48a:	4b1f      	ldr	r3, [pc, #124]	; (800d508 <FATFS_LinkDriverEx+0x94>)
 800d48c:	7a5b      	ldrb	r3, [r3, #9]
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2b00      	cmp	r3, #0
 800d492:	d131      	bne.n	800d4f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d494:	4b1c      	ldr	r3, [pc, #112]	; (800d508 <FATFS_LinkDriverEx+0x94>)
 800d496:	7a5b      	ldrb	r3, [r3, #9]
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	461a      	mov	r2, r3
 800d49c:	4b1a      	ldr	r3, [pc, #104]	; (800d508 <FATFS_LinkDriverEx+0x94>)
 800d49e:	2100      	movs	r1, #0
 800d4a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d4a2:	4b19      	ldr	r3, [pc, #100]	; (800d508 <FATFS_LinkDriverEx+0x94>)
 800d4a4:	7a5b      	ldrb	r3, [r3, #9]
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	4a17      	ldr	r2, [pc, #92]	; (800d508 <FATFS_LinkDriverEx+0x94>)
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	4413      	add	r3, r2
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4b2:	4b15      	ldr	r3, [pc, #84]	; (800d508 <FATFS_LinkDriverEx+0x94>)
 800d4b4:	7a5b      	ldrb	r3, [r3, #9]
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	4b13      	ldr	r3, [pc, #76]	; (800d508 <FATFS_LinkDriverEx+0x94>)
 800d4bc:	4413      	add	r3, r2
 800d4be:	79fa      	ldrb	r2, [r7, #7]
 800d4c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d4c2:	4b11      	ldr	r3, [pc, #68]	; (800d508 <FATFS_LinkDriverEx+0x94>)
 800d4c4:	7a5b      	ldrb	r3, [r3, #9]
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	b2d1      	uxtb	r1, r2
 800d4cc:	4a0e      	ldr	r2, [pc, #56]	; (800d508 <FATFS_LinkDriverEx+0x94>)
 800d4ce:	7251      	strb	r1, [r2, #9]
 800d4d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d4d2:	7dbb      	ldrb	r3, [r7, #22]
 800d4d4:	3330      	adds	r3, #48	; 0x30
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	223a      	movs	r2, #58	; 0x3a
 800d4e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	3302      	adds	r3, #2
 800d4e8:	222f      	movs	r2, #47	; 0x2f
 800d4ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	3303      	adds	r3, #3
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d4f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	371c      	adds	r7, #28
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop
 800d508:	2400024c 	.word	0x2400024c

0800d50c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d516:	2200      	movs	r2, #0
 800d518:	6839      	ldr	r1, [r7, #0]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7ff ffaa 	bl	800d474 <FATFS_LinkDriverEx>
 800d520:	4603      	mov	r3, r0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
	...

0800d52c <__errno>:
 800d52c:	4b01      	ldr	r3, [pc, #4]	; (800d534 <__errno+0x8>)
 800d52e:	6818      	ldr	r0, [r3, #0]
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	24000010 	.word	0x24000010

0800d538 <__libc_init_array>:
 800d538:	b570      	push	{r4, r5, r6, lr}
 800d53a:	4d0d      	ldr	r5, [pc, #52]	; (800d570 <__libc_init_array+0x38>)
 800d53c:	4c0d      	ldr	r4, [pc, #52]	; (800d574 <__libc_init_array+0x3c>)
 800d53e:	1b64      	subs	r4, r4, r5
 800d540:	10a4      	asrs	r4, r4, #2
 800d542:	2600      	movs	r6, #0
 800d544:	42a6      	cmp	r6, r4
 800d546:	d109      	bne.n	800d55c <__libc_init_array+0x24>
 800d548:	4d0b      	ldr	r5, [pc, #44]	; (800d578 <__libc_init_array+0x40>)
 800d54a:	4c0c      	ldr	r4, [pc, #48]	; (800d57c <__libc_init_array+0x44>)
 800d54c:	f000 fc8e 	bl	800de6c <_init>
 800d550:	1b64      	subs	r4, r4, r5
 800d552:	10a4      	asrs	r4, r4, #2
 800d554:	2600      	movs	r6, #0
 800d556:	42a6      	cmp	r6, r4
 800d558:	d105      	bne.n	800d566 <__libc_init_array+0x2e>
 800d55a:	bd70      	pop	{r4, r5, r6, pc}
 800d55c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d560:	4798      	blx	r3
 800d562:	3601      	adds	r6, #1
 800d564:	e7ee      	b.n	800d544 <__libc_init_array+0xc>
 800d566:	f855 3b04 	ldr.w	r3, [r5], #4
 800d56a:	4798      	blx	r3
 800d56c:	3601      	adds	r6, #1
 800d56e:	e7f2      	b.n	800d556 <__libc_init_array+0x1e>
 800d570:	0800e010 	.word	0x0800e010
 800d574:	0800e010 	.word	0x0800e010
 800d578:	0800e010 	.word	0x0800e010
 800d57c:	0800e014 	.word	0x0800e014

0800d580 <memset>:
 800d580:	4402      	add	r2, r0
 800d582:	4603      	mov	r3, r0
 800d584:	4293      	cmp	r3, r2
 800d586:	d100      	bne.n	800d58a <memset+0xa>
 800d588:	4770      	bx	lr
 800d58a:	f803 1b01 	strb.w	r1, [r3], #1
 800d58e:	e7f9      	b.n	800d584 <memset+0x4>

0800d590 <siprintf>:
 800d590:	b40e      	push	{r1, r2, r3}
 800d592:	b500      	push	{lr}
 800d594:	b09c      	sub	sp, #112	; 0x70
 800d596:	ab1d      	add	r3, sp, #116	; 0x74
 800d598:	9002      	str	r0, [sp, #8]
 800d59a:	9006      	str	r0, [sp, #24]
 800d59c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5a0:	4809      	ldr	r0, [pc, #36]	; (800d5c8 <siprintf+0x38>)
 800d5a2:	9107      	str	r1, [sp, #28]
 800d5a4:	9104      	str	r1, [sp, #16]
 800d5a6:	4909      	ldr	r1, [pc, #36]	; (800d5cc <siprintf+0x3c>)
 800d5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ac:	9105      	str	r1, [sp, #20]
 800d5ae:	6800      	ldr	r0, [r0, #0]
 800d5b0:	9301      	str	r3, [sp, #4]
 800d5b2:	a902      	add	r1, sp, #8
 800d5b4:	f000 f868 	bl	800d688 <_svfiprintf_r>
 800d5b8:	9b02      	ldr	r3, [sp, #8]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	701a      	strb	r2, [r3, #0]
 800d5be:	b01c      	add	sp, #112	; 0x70
 800d5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5c4:	b003      	add	sp, #12
 800d5c6:	4770      	bx	lr
 800d5c8:	24000010 	.word	0x24000010
 800d5cc:	ffff0208 	.word	0xffff0208

0800d5d0 <__ssputs_r>:
 800d5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d4:	688e      	ldr	r6, [r1, #8]
 800d5d6:	429e      	cmp	r6, r3
 800d5d8:	4682      	mov	sl, r0
 800d5da:	460c      	mov	r4, r1
 800d5dc:	4690      	mov	r8, r2
 800d5de:	461f      	mov	r7, r3
 800d5e0:	d838      	bhi.n	800d654 <__ssputs_r+0x84>
 800d5e2:	898a      	ldrh	r2, [r1, #12]
 800d5e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5e8:	d032      	beq.n	800d650 <__ssputs_r+0x80>
 800d5ea:	6825      	ldr	r5, [r4, #0]
 800d5ec:	6909      	ldr	r1, [r1, #16]
 800d5ee:	eba5 0901 	sub.w	r9, r5, r1
 800d5f2:	6965      	ldr	r5, [r4, #20]
 800d5f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	444b      	add	r3, r9
 800d600:	106d      	asrs	r5, r5, #1
 800d602:	429d      	cmp	r5, r3
 800d604:	bf38      	it	cc
 800d606:	461d      	movcc	r5, r3
 800d608:	0553      	lsls	r3, r2, #21
 800d60a:	d531      	bpl.n	800d670 <__ssputs_r+0xa0>
 800d60c:	4629      	mov	r1, r5
 800d60e:	f000 fb63 	bl	800dcd8 <_malloc_r>
 800d612:	4606      	mov	r6, r0
 800d614:	b950      	cbnz	r0, 800d62c <__ssputs_r+0x5c>
 800d616:	230c      	movs	r3, #12
 800d618:	f8ca 3000 	str.w	r3, [sl]
 800d61c:	89a3      	ldrh	r3, [r4, #12]
 800d61e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d622:	81a3      	strh	r3, [r4, #12]
 800d624:	f04f 30ff 	mov.w	r0, #4294967295
 800d628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d62c:	6921      	ldr	r1, [r4, #16]
 800d62e:	464a      	mov	r2, r9
 800d630:	f000 fabe 	bl	800dbb0 <memcpy>
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d63e:	81a3      	strh	r3, [r4, #12]
 800d640:	6126      	str	r6, [r4, #16]
 800d642:	6165      	str	r5, [r4, #20]
 800d644:	444e      	add	r6, r9
 800d646:	eba5 0509 	sub.w	r5, r5, r9
 800d64a:	6026      	str	r6, [r4, #0]
 800d64c:	60a5      	str	r5, [r4, #8]
 800d64e:	463e      	mov	r6, r7
 800d650:	42be      	cmp	r6, r7
 800d652:	d900      	bls.n	800d656 <__ssputs_r+0x86>
 800d654:	463e      	mov	r6, r7
 800d656:	6820      	ldr	r0, [r4, #0]
 800d658:	4632      	mov	r2, r6
 800d65a:	4641      	mov	r1, r8
 800d65c:	f000 fab6 	bl	800dbcc <memmove>
 800d660:	68a3      	ldr	r3, [r4, #8]
 800d662:	1b9b      	subs	r3, r3, r6
 800d664:	60a3      	str	r3, [r4, #8]
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	4433      	add	r3, r6
 800d66a:	6023      	str	r3, [r4, #0]
 800d66c:	2000      	movs	r0, #0
 800d66e:	e7db      	b.n	800d628 <__ssputs_r+0x58>
 800d670:	462a      	mov	r2, r5
 800d672:	f000 fba5 	bl	800ddc0 <_realloc_r>
 800d676:	4606      	mov	r6, r0
 800d678:	2800      	cmp	r0, #0
 800d67a:	d1e1      	bne.n	800d640 <__ssputs_r+0x70>
 800d67c:	6921      	ldr	r1, [r4, #16]
 800d67e:	4650      	mov	r0, sl
 800d680:	f000 fabe 	bl	800dc00 <_free_r>
 800d684:	e7c7      	b.n	800d616 <__ssputs_r+0x46>
	...

0800d688 <_svfiprintf_r>:
 800d688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68c:	4698      	mov	r8, r3
 800d68e:	898b      	ldrh	r3, [r1, #12]
 800d690:	061b      	lsls	r3, r3, #24
 800d692:	b09d      	sub	sp, #116	; 0x74
 800d694:	4607      	mov	r7, r0
 800d696:	460d      	mov	r5, r1
 800d698:	4614      	mov	r4, r2
 800d69a:	d50e      	bpl.n	800d6ba <_svfiprintf_r+0x32>
 800d69c:	690b      	ldr	r3, [r1, #16]
 800d69e:	b963      	cbnz	r3, 800d6ba <_svfiprintf_r+0x32>
 800d6a0:	2140      	movs	r1, #64	; 0x40
 800d6a2:	f000 fb19 	bl	800dcd8 <_malloc_r>
 800d6a6:	6028      	str	r0, [r5, #0]
 800d6a8:	6128      	str	r0, [r5, #16]
 800d6aa:	b920      	cbnz	r0, 800d6b6 <_svfiprintf_r+0x2e>
 800d6ac:	230c      	movs	r3, #12
 800d6ae:	603b      	str	r3, [r7, #0]
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b4:	e0d1      	b.n	800d85a <_svfiprintf_r+0x1d2>
 800d6b6:	2340      	movs	r3, #64	; 0x40
 800d6b8:	616b      	str	r3, [r5, #20]
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d6be:	2320      	movs	r3, #32
 800d6c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6c8:	2330      	movs	r3, #48	; 0x30
 800d6ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d874 <_svfiprintf_r+0x1ec>
 800d6ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6d2:	f04f 0901 	mov.w	r9, #1
 800d6d6:	4623      	mov	r3, r4
 800d6d8:	469a      	mov	sl, r3
 800d6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6de:	b10a      	cbz	r2, 800d6e4 <_svfiprintf_r+0x5c>
 800d6e0:	2a25      	cmp	r2, #37	; 0x25
 800d6e2:	d1f9      	bne.n	800d6d8 <_svfiprintf_r+0x50>
 800d6e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d6e8:	d00b      	beq.n	800d702 <_svfiprintf_r+0x7a>
 800d6ea:	465b      	mov	r3, fp
 800d6ec:	4622      	mov	r2, r4
 800d6ee:	4629      	mov	r1, r5
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f7ff ff6d 	bl	800d5d0 <__ssputs_r>
 800d6f6:	3001      	adds	r0, #1
 800d6f8:	f000 80aa 	beq.w	800d850 <_svfiprintf_r+0x1c8>
 800d6fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6fe:	445a      	add	r2, fp
 800d700:	9209      	str	r2, [sp, #36]	; 0x24
 800d702:	f89a 3000 	ldrb.w	r3, [sl]
 800d706:	2b00      	cmp	r3, #0
 800d708:	f000 80a2 	beq.w	800d850 <_svfiprintf_r+0x1c8>
 800d70c:	2300      	movs	r3, #0
 800d70e:	f04f 32ff 	mov.w	r2, #4294967295
 800d712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d716:	f10a 0a01 	add.w	sl, sl, #1
 800d71a:	9304      	str	r3, [sp, #16]
 800d71c:	9307      	str	r3, [sp, #28]
 800d71e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d722:	931a      	str	r3, [sp, #104]	; 0x68
 800d724:	4654      	mov	r4, sl
 800d726:	2205      	movs	r2, #5
 800d728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d72c:	4851      	ldr	r0, [pc, #324]	; (800d874 <_svfiprintf_r+0x1ec>)
 800d72e:	f7f2 fdd7 	bl	80002e0 <memchr>
 800d732:	9a04      	ldr	r2, [sp, #16]
 800d734:	b9d8      	cbnz	r0, 800d76e <_svfiprintf_r+0xe6>
 800d736:	06d0      	lsls	r0, r2, #27
 800d738:	bf44      	itt	mi
 800d73a:	2320      	movmi	r3, #32
 800d73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d740:	0711      	lsls	r1, r2, #28
 800d742:	bf44      	itt	mi
 800d744:	232b      	movmi	r3, #43	; 0x2b
 800d746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d74a:	f89a 3000 	ldrb.w	r3, [sl]
 800d74e:	2b2a      	cmp	r3, #42	; 0x2a
 800d750:	d015      	beq.n	800d77e <_svfiprintf_r+0xf6>
 800d752:	9a07      	ldr	r2, [sp, #28]
 800d754:	4654      	mov	r4, sl
 800d756:	2000      	movs	r0, #0
 800d758:	f04f 0c0a 	mov.w	ip, #10
 800d75c:	4621      	mov	r1, r4
 800d75e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d762:	3b30      	subs	r3, #48	; 0x30
 800d764:	2b09      	cmp	r3, #9
 800d766:	d94e      	bls.n	800d806 <_svfiprintf_r+0x17e>
 800d768:	b1b0      	cbz	r0, 800d798 <_svfiprintf_r+0x110>
 800d76a:	9207      	str	r2, [sp, #28]
 800d76c:	e014      	b.n	800d798 <_svfiprintf_r+0x110>
 800d76e:	eba0 0308 	sub.w	r3, r0, r8
 800d772:	fa09 f303 	lsl.w	r3, r9, r3
 800d776:	4313      	orrs	r3, r2
 800d778:	9304      	str	r3, [sp, #16]
 800d77a:	46a2      	mov	sl, r4
 800d77c:	e7d2      	b.n	800d724 <_svfiprintf_r+0x9c>
 800d77e:	9b03      	ldr	r3, [sp, #12]
 800d780:	1d19      	adds	r1, r3, #4
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	9103      	str	r1, [sp, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	bfbb      	ittet	lt
 800d78a:	425b      	neglt	r3, r3
 800d78c:	f042 0202 	orrlt.w	r2, r2, #2
 800d790:	9307      	strge	r3, [sp, #28]
 800d792:	9307      	strlt	r3, [sp, #28]
 800d794:	bfb8      	it	lt
 800d796:	9204      	strlt	r2, [sp, #16]
 800d798:	7823      	ldrb	r3, [r4, #0]
 800d79a:	2b2e      	cmp	r3, #46	; 0x2e
 800d79c:	d10c      	bne.n	800d7b8 <_svfiprintf_r+0x130>
 800d79e:	7863      	ldrb	r3, [r4, #1]
 800d7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d7a2:	d135      	bne.n	800d810 <_svfiprintf_r+0x188>
 800d7a4:	9b03      	ldr	r3, [sp, #12]
 800d7a6:	1d1a      	adds	r2, r3, #4
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	9203      	str	r2, [sp, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	bfb8      	it	lt
 800d7b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7b4:	3402      	adds	r4, #2
 800d7b6:	9305      	str	r3, [sp, #20]
 800d7b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d884 <_svfiprintf_r+0x1fc>
 800d7bc:	7821      	ldrb	r1, [r4, #0]
 800d7be:	2203      	movs	r2, #3
 800d7c0:	4650      	mov	r0, sl
 800d7c2:	f7f2 fd8d 	bl	80002e0 <memchr>
 800d7c6:	b140      	cbz	r0, 800d7da <_svfiprintf_r+0x152>
 800d7c8:	2340      	movs	r3, #64	; 0x40
 800d7ca:	eba0 000a 	sub.w	r0, r0, sl
 800d7ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d7d2:	9b04      	ldr	r3, [sp, #16]
 800d7d4:	4303      	orrs	r3, r0
 800d7d6:	3401      	adds	r4, #1
 800d7d8:	9304      	str	r3, [sp, #16]
 800d7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7de:	4826      	ldr	r0, [pc, #152]	; (800d878 <_svfiprintf_r+0x1f0>)
 800d7e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7e4:	2206      	movs	r2, #6
 800d7e6:	f7f2 fd7b 	bl	80002e0 <memchr>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d038      	beq.n	800d860 <_svfiprintf_r+0x1d8>
 800d7ee:	4b23      	ldr	r3, [pc, #140]	; (800d87c <_svfiprintf_r+0x1f4>)
 800d7f0:	bb1b      	cbnz	r3, 800d83a <_svfiprintf_r+0x1b2>
 800d7f2:	9b03      	ldr	r3, [sp, #12]
 800d7f4:	3307      	adds	r3, #7
 800d7f6:	f023 0307 	bic.w	r3, r3, #7
 800d7fa:	3308      	adds	r3, #8
 800d7fc:	9303      	str	r3, [sp, #12]
 800d7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d800:	4433      	add	r3, r6
 800d802:	9309      	str	r3, [sp, #36]	; 0x24
 800d804:	e767      	b.n	800d6d6 <_svfiprintf_r+0x4e>
 800d806:	fb0c 3202 	mla	r2, ip, r2, r3
 800d80a:	460c      	mov	r4, r1
 800d80c:	2001      	movs	r0, #1
 800d80e:	e7a5      	b.n	800d75c <_svfiprintf_r+0xd4>
 800d810:	2300      	movs	r3, #0
 800d812:	3401      	adds	r4, #1
 800d814:	9305      	str	r3, [sp, #20]
 800d816:	4619      	mov	r1, r3
 800d818:	f04f 0c0a 	mov.w	ip, #10
 800d81c:	4620      	mov	r0, r4
 800d81e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d822:	3a30      	subs	r2, #48	; 0x30
 800d824:	2a09      	cmp	r2, #9
 800d826:	d903      	bls.n	800d830 <_svfiprintf_r+0x1a8>
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d0c5      	beq.n	800d7b8 <_svfiprintf_r+0x130>
 800d82c:	9105      	str	r1, [sp, #20]
 800d82e:	e7c3      	b.n	800d7b8 <_svfiprintf_r+0x130>
 800d830:	fb0c 2101 	mla	r1, ip, r1, r2
 800d834:	4604      	mov	r4, r0
 800d836:	2301      	movs	r3, #1
 800d838:	e7f0      	b.n	800d81c <_svfiprintf_r+0x194>
 800d83a:	ab03      	add	r3, sp, #12
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	462a      	mov	r2, r5
 800d840:	4b0f      	ldr	r3, [pc, #60]	; (800d880 <_svfiprintf_r+0x1f8>)
 800d842:	a904      	add	r1, sp, #16
 800d844:	4638      	mov	r0, r7
 800d846:	f3af 8000 	nop.w
 800d84a:	1c42      	adds	r2, r0, #1
 800d84c:	4606      	mov	r6, r0
 800d84e:	d1d6      	bne.n	800d7fe <_svfiprintf_r+0x176>
 800d850:	89ab      	ldrh	r3, [r5, #12]
 800d852:	065b      	lsls	r3, r3, #25
 800d854:	f53f af2c 	bmi.w	800d6b0 <_svfiprintf_r+0x28>
 800d858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d85a:	b01d      	add	sp, #116	; 0x74
 800d85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d860:	ab03      	add	r3, sp, #12
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	462a      	mov	r2, r5
 800d866:	4b06      	ldr	r3, [pc, #24]	; (800d880 <_svfiprintf_r+0x1f8>)
 800d868:	a904      	add	r1, sp, #16
 800d86a:	4638      	mov	r0, r7
 800d86c:	f000 f87a 	bl	800d964 <_printf_i>
 800d870:	e7eb      	b.n	800d84a <_svfiprintf_r+0x1c2>
 800d872:	bf00      	nop
 800d874:	0800dfd4 	.word	0x0800dfd4
 800d878:	0800dfde 	.word	0x0800dfde
 800d87c:	00000000 	.word	0x00000000
 800d880:	0800d5d1 	.word	0x0800d5d1
 800d884:	0800dfda 	.word	0x0800dfda

0800d888 <_printf_common>:
 800d888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d88c:	4616      	mov	r6, r2
 800d88e:	4699      	mov	r9, r3
 800d890:	688a      	ldr	r2, [r1, #8]
 800d892:	690b      	ldr	r3, [r1, #16]
 800d894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d898:	4293      	cmp	r3, r2
 800d89a:	bfb8      	it	lt
 800d89c:	4613      	movlt	r3, r2
 800d89e:	6033      	str	r3, [r6, #0]
 800d8a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8a4:	4607      	mov	r7, r0
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	b10a      	cbz	r2, 800d8ae <_printf_common+0x26>
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	6033      	str	r3, [r6, #0]
 800d8ae:	6823      	ldr	r3, [r4, #0]
 800d8b0:	0699      	lsls	r1, r3, #26
 800d8b2:	bf42      	ittt	mi
 800d8b4:	6833      	ldrmi	r3, [r6, #0]
 800d8b6:	3302      	addmi	r3, #2
 800d8b8:	6033      	strmi	r3, [r6, #0]
 800d8ba:	6825      	ldr	r5, [r4, #0]
 800d8bc:	f015 0506 	ands.w	r5, r5, #6
 800d8c0:	d106      	bne.n	800d8d0 <_printf_common+0x48>
 800d8c2:	f104 0a19 	add.w	sl, r4, #25
 800d8c6:	68e3      	ldr	r3, [r4, #12]
 800d8c8:	6832      	ldr	r2, [r6, #0]
 800d8ca:	1a9b      	subs	r3, r3, r2
 800d8cc:	42ab      	cmp	r3, r5
 800d8ce:	dc26      	bgt.n	800d91e <_printf_common+0x96>
 800d8d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8d4:	1e13      	subs	r3, r2, #0
 800d8d6:	6822      	ldr	r2, [r4, #0]
 800d8d8:	bf18      	it	ne
 800d8da:	2301      	movne	r3, #1
 800d8dc:	0692      	lsls	r2, r2, #26
 800d8de:	d42b      	bmi.n	800d938 <_printf_common+0xb0>
 800d8e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8e4:	4649      	mov	r1, r9
 800d8e6:	4638      	mov	r0, r7
 800d8e8:	47c0      	blx	r8
 800d8ea:	3001      	adds	r0, #1
 800d8ec:	d01e      	beq.n	800d92c <_printf_common+0xa4>
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	68e5      	ldr	r5, [r4, #12]
 800d8f2:	6832      	ldr	r2, [r6, #0]
 800d8f4:	f003 0306 	and.w	r3, r3, #6
 800d8f8:	2b04      	cmp	r3, #4
 800d8fa:	bf08      	it	eq
 800d8fc:	1aad      	subeq	r5, r5, r2
 800d8fe:	68a3      	ldr	r3, [r4, #8]
 800d900:	6922      	ldr	r2, [r4, #16]
 800d902:	bf0c      	ite	eq
 800d904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d908:	2500      	movne	r5, #0
 800d90a:	4293      	cmp	r3, r2
 800d90c:	bfc4      	itt	gt
 800d90e:	1a9b      	subgt	r3, r3, r2
 800d910:	18ed      	addgt	r5, r5, r3
 800d912:	2600      	movs	r6, #0
 800d914:	341a      	adds	r4, #26
 800d916:	42b5      	cmp	r5, r6
 800d918:	d11a      	bne.n	800d950 <_printf_common+0xc8>
 800d91a:	2000      	movs	r0, #0
 800d91c:	e008      	b.n	800d930 <_printf_common+0xa8>
 800d91e:	2301      	movs	r3, #1
 800d920:	4652      	mov	r2, sl
 800d922:	4649      	mov	r1, r9
 800d924:	4638      	mov	r0, r7
 800d926:	47c0      	blx	r8
 800d928:	3001      	adds	r0, #1
 800d92a:	d103      	bne.n	800d934 <_printf_common+0xac>
 800d92c:	f04f 30ff 	mov.w	r0, #4294967295
 800d930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d934:	3501      	adds	r5, #1
 800d936:	e7c6      	b.n	800d8c6 <_printf_common+0x3e>
 800d938:	18e1      	adds	r1, r4, r3
 800d93a:	1c5a      	adds	r2, r3, #1
 800d93c:	2030      	movs	r0, #48	; 0x30
 800d93e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d942:	4422      	add	r2, r4
 800d944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d94c:	3302      	adds	r3, #2
 800d94e:	e7c7      	b.n	800d8e0 <_printf_common+0x58>
 800d950:	2301      	movs	r3, #1
 800d952:	4622      	mov	r2, r4
 800d954:	4649      	mov	r1, r9
 800d956:	4638      	mov	r0, r7
 800d958:	47c0      	blx	r8
 800d95a:	3001      	adds	r0, #1
 800d95c:	d0e6      	beq.n	800d92c <_printf_common+0xa4>
 800d95e:	3601      	adds	r6, #1
 800d960:	e7d9      	b.n	800d916 <_printf_common+0x8e>
	...

0800d964 <_printf_i>:
 800d964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d968:	7e0f      	ldrb	r7, [r1, #24]
 800d96a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d96c:	2f78      	cmp	r7, #120	; 0x78
 800d96e:	4691      	mov	r9, r2
 800d970:	4680      	mov	r8, r0
 800d972:	460c      	mov	r4, r1
 800d974:	469a      	mov	sl, r3
 800d976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d97a:	d807      	bhi.n	800d98c <_printf_i+0x28>
 800d97c:	2f62      	cmp	r7, #98	; 0x62
 800d97e:	d80a      	bhi.n	800d996 <_printf_i+0x32>
 800d980:	2f00      	cmp	r7, #0
 800d982:	f000 80d8 	beq.w	800db36 <_printf_i+0x1d2>
 800d986:	2f58      	cmp	r7, #88	; 0x58
 800d988:	f000 80a3 	beq.w	800dad2 <_printf_i+0x16e>
 800d98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d994:	e03a      	b.n	800da0c <_printf_i+0xa8>
 800d996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d99a:	2b15      	cmp	r3, #21
 800d99c:	d8f6      	bhi.n	800d98c <_printf_i+0x28>
 800d99e:	a101      	add	r1, pc, #4	; (adr r1, 800d9a4 <_printf_i+0x40>)
 800d9a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9a4:	0800d9fd 	.word	0x0800d9fd
 800d9a8:	0800da11 	.word	0x0800da11
 800d9ac:	0800d98d 	.word	0x0800d98d
 800d9b0:	0800d98d 	.word	0x0800d98d
 800d9b4:	0800d98d 	.word	0x0800d98d
 800d9b8:	0800d98d 	.word	0x0800d98d
 800d9bc:	0800da11 	.word	0x0800da11
 800d9c0:	0800d98d 	.word	0x0800d98d
 800d9c4:	0800d98d 	.word	0x0800d98d
 800d9c8:	0800d98d 	.word	0x0800d98d
 800d9cc:	0800d98d 	.word	0x0800d98d
 800d9d0:	0800db1d 	.word	0x0800db1d
 800d9d4:	0800da41 	.word	0x0800da41
 800d9d8:	0800daff 	.word	0x0800daff
 800d9dc:	0800d98d 	.word	0x0800d98d
 800d9e0:	0800d98d 	.word	0x0800d98d
 800d9e4:	0800db3f 	.word	0x0800db3f
 800d9e8:	0800d98d 	.word	0x0800d98d
 800d9ec:	0800da41 	.word	0x0800da41
 800d9f0:	0800d98d 	.word	0x0800d98d
 800d9f4:	0800d98d 	.word	0x0800d98d
 800d9f8:	0800db07 	.word	0x0800db07
 800d9fc:	682b      	ldr	r3, [r5, #0]
 800d9fe:	1d1a      	adds	r2, r3, #4
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	602a      	str	r2, [r5, #0]
 800da04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da0c:	2301      	movs	r3, #1
 800da0e:	e0a3      	b.n	800db58 <_printf_i+0x1f4>
 800da10:	6820      	ldr	r0, [r4, #0]
 800da12:	6829      	ldr	r1, [r5, #0]
 800da14:	0606      	lsls	r6, r0, #24
 800da16:	f101 0304 	add.w	r3, r1, #4
 800da1a:	d50a      	bpl.n	800da32 <_printf_i+0xce>
 800da1c:	680e      	ldr	r6, [r1, #0]
 800da1e:	602b      	str	r3, [r5, #0]
 800da20:	2e00      	cmp	r6, #0
 800da22:	da03      	bge.n	800da2c <_printf_i+0xc8>
 800da24:	232d      	movs	r3, #45	; 0x2d
 800da26:	4276      	negs	r6, r6
 800da28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da2c:	485e      	ldr	r0, [pc, #376]	; (800dba8 <_printf_i+0x244>)
 800da2e:	230a      	movs	r3, #10
 800da30:	e019      	b.n	800da66 <_printf_i+0x102>
 800da32:	680e      	ldr	r6, [r1, #0]
 800da34:	602b      	str	r3, [r5, #0]
 800da36:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da3a:	bf18      	it	ne
 800da3c:	b236      	sxthne	r6, r6
 800da3e:	e7ef      	b.n	800da20 <_printf_i+0xbc>
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	6820      	ldr	r0, [r4, #0]
 800da44:	1d19      	adds	r1, r3, #4
 800da46:	6029      	str	r1, [r5, #0]
 800da48:	0601      	lsls	r1, r0, #24
 800da4a:	d501      	bpl.n	800da50 <_printf_i+0xec>
 800da4c:	681e      	ldr	r6, [r3, #0]
 800da4e:	e002      	b.n	800da56 <_printf_i+0xf2>
 800da50:	0646      	lsls	r6, r0, #25
 800da52:	d5fb      	bpl.n	800da4c <_printf_i+0xe8>
 800da54:	881e      	ldrh	r6, [r3, #0]
 800da56:	4854      	ldr	r0, [pc, #336]	; (800dba8 <_printf_i+0x244>)
 800da58:	2f6f      	cmp	r7, #111	; 0x6f
 800da5a:	bf0c      	ite	eq
 800da5c:	2308      	moveq	r3, #8
 800da5e:	230a      	movne	r3, #10
 800da60:	2100      	movs	r1, #0
 800da62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da66:	6865      	ldr	r5, [r4, #4]
 800da68:	60a5      	str	r5, [r4, #8]
 800da6a:	2d00      	cmp	r5, #0
 800da6c:	bfa2      	ittt	ge
 800da6e:	6821      	ldrge	r1, [r4, #0]
 800da70:	f021 0104 	bicge.w	r1, r1, #4
 800da74:	6021      	strge	r1, [r4, #0]
 800da76:	b90e      	cbnz	r6, 800da7c <_printf_i+0x118>
 800da78:	2d00      	cmp	r5, #0
 800da7a:	d04d      	beq.n	800db18 <_printf_i+0x1b4>
 800da7c:	4615      	mov	r5, r2
 800da7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800da82:	fb03 6711 	mls	r7, r3, r1, r6
 800da86:	5dc7      	ldrb	r7, [r0, r7]
 800da88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da8c:	4637      	mov	r7, r6
 800da8e:	42bb      	cmp	r3, r7
 800da90:	460e      	mov	r6, r1
 800da92:	d9f4      	bls.n	800da7e <_printf_i+0x11a>
 800da94:	2b08      	cmp	r3, #8
 800da96:	d10b      	bne.n	800dab0 <_printf_i+0x14c>
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	07de      	lsls	r6, r3, #31
 800da9c:	d508      	bpl.n	800dab0 <_printf_i+0x14c>
 800da9e:	6923      	ldr	r3, [r4, #16]
 800daa0:	6861      	ldr	r1, [r4, #4]
 800daa2:	4299      	cmp	r1, r3
 800daa4:	bfde      	ittt	le
 800daa6:	2330      	movle	r3, #48	; 0x30
 800daa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800daac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dab0:	1b52      	subs	r2, r2, r5
 800dab2:	6122      	str	r2, [r4, #16]
 800dab4:	f8cd a000 	str.w	sl, [sp]
 800dab8:	464b      	mov	r3, r9
 800daba:	aa03      	add	r2, sp, #12
 800dabc:	4621      	mov	r1, r4
 800dabe:	4640      	mov	r0, r8
 800dac0:	f7ff fee2 	bl	800d888 <_printf_common>
 800dac4:	3001      	adds	r0, #1
 800dac6:	d14c      	bne.n	800db62 <_printf_i+0x1fe>
 800dac8:	f04f 30ff 	mov.w	r0, #4294967295
 800dacc:	b004      	add	sp, #16
 800dace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad2:	4835      	ldr	r0, [pc, #212]	; (800dba8 <_printf_i+0x244>)
 800dad4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dad8:	6829      	ldr	r1, [r5, #0]
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	f851 6b04 	ldr.w	r6, [r1], #4
 800dae0:	6029      	str	r1, [r5, #0]
 800dae2:	061d      	lsls	r5, r3, #24
 800dae4:	d514      	bpl.n	800db10 <_printf_i+0x1ac>
 800dae6:	07df      	lsls	r7, r3, #31
 800dae8:	bf44      	itt	mi
 800daea:	f043 0320 	orrmi.w	r3, r3, #32
 800daee:	6023      	strmi	r3, [r4, #0]
 800daf0:	b91e      	cbnz	r6, 800dafa <_printf_i+0x196>
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	f023 0320 	bic.w	r3, r3, #32
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	2310      	movs	r3, #16
 800dafc:	e7b0      	b.n	800da60 <_printf_i+0xfc>
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	f043 0320 	orr.w	r3, r3, #32
 800db04:	6023      	str	r3, [r4, #0]
 800db06:	2378      	movs	r3, #120	; 0x78
 800db08:	4828      	ldr	r0, [pc, #160]	; (800dbac <_printf_i+0x248>)
 800db0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db0e:	e7e3      	b.n	800dad8 <_printf_i+0x174>
 800db10:	0659      	lsls	r1, r3, #25
 800db12:	bf48      	it	mi
 800db14:	b2b6      	uxthmi	r6, r6
 800db16:	e7e6      	b.n	800dae6 <_printf_i+0x182>
 800db18:	4615      	mov	r5, r2
 800db1a:	e7bb      	b.n	800da94 <_printf_i+0x130>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	6826      	ldr	r6, [r4, #0]
 800db20:	6961      	ldr	r1, [r4, #20]
 800db22:	1d18      	adds	r0, r3, #4
 800db24:	6028      	str	r0, [r5, #0]
 800db26:	0635      	lsls	r5, r6, #24
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	d501      	bpl.n	800db30 <_printf_i+0x1cc>
 800db2c:	6019      	str	r1, [r3, #0]
 800db2e:	e002      	b.n	800db36 <_printf_i+0x1d2>
 800db30:	0670      	lsls	r0, r6, #25
 800db32:	d5fb      	bpl.n	800db2c <_printf_i+0x1c8>
 800db34:	8019      	strh	r1, [r3, #0]
 800db36:	2300      	movs	r3, #0
 800db38:	6123      	str	r3, [r4, #16]
 800db3a:	4615      	mov	r5, r2
 800db3c:	e7ba      	b.n	800dab4 <_printf_i+0x150>
 800db3e:	682b      	ldr	r3, [r5, #0]
 800db40:	1d1a      	adds	r2, r3, #4
 800db42:	602a      	str	r2, [r5, #0]
 800db44:	681d      	ldr	r5, [r3, #0]
 800db46:	6862      	ldr	r2, [r4, #4]
 800db48:	2100      	movs	r1, #0
 800db4a:	4628      	mov	r0, r5
 800db4c:	f7f2 fbc8 	bl	80002e0 <memchr>
 800db50:	b108      	cbz	r0, 800db56 <_printf_i+0x1f2>
 800db52:	1b40      	subs	r0, r0, r5
 800db54:	6060      	str	r0, [r4, #4]
 800db56:	6863      	ldr	r3, [r4, #4]
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	2300      	movs	r3, #0
 800db5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db60:	e7a8      	b.n	800dab4 <_printf_i+0x150>
 800db62:	6923      	ldr	r3, [r4, #16]
 800db64:	462a      	mov	r2, r5
 800db66:	4649      	mov	r1, r9
 800db68:	4640      	mov	r0, r8
 800db6a:	47d0      	blx	sl
 800db6c:	3001      	adds	r0, #1
 800db6e:	d0ab      	beq.n	800dac8 <_printf_i+0x164>
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	079b      	lsls	r3, r3, #30
 800db74:	d413      	bmi.n	800db9e <_printf_i+0x23a>
 800db76:	68e0      	ldr	r0, [r4, #12]
 800db78:	9b03      	ldr	r3, [sp, #12]
 800db7a:	4298      	cmp	r0, r3
 800db7c:	bfb8      	it	lt
 800db7e:	4618      	movlt	r0, r3
 800db80:	e7a4      	b.n	800dacc <_printf_i+0x168>
 800db82:	2301      	movs	r3, #1
 800db84:	4632      	mov	r2, r6
 800db86:	4649      	mov	r1, r9
 800db88:	4640      	mov	r0, r8
 800db8a:	47d0      	blx	sl
 800db8c:	3001      	adds	r0, #1
 800db8e:	d09b      	beq.n	800dac8 <_printf_i+0x164>
 800db90:	3501      	adds	r5, #1
 800db92:	68e3      	ldr	r3, [r4, #12]
 800db94:	9903      	ldr	r1, [sp, #12]
 800db96:	1a5b      	subs	r3, r3, r1
 800db98:	42ab      	cmp	r3, r5
 800db9a:	dcf2      	bgt.n	800db82 <_printf_i+0x21e>
 800db9c:	e7eb      	b.n	800db76 <_printf_i+0x212>
 800db9e:	2500      	movs	r5, #0
 800dba0:	f104 0619 	add.w	r6, r4, #25
 800dba4:	e7f5      	b.n	800db92 <_printf_i+0x22e>
 800dba6:	bf00      	nop
 800dba8:	0800dfe5 	.word	0x0800dfe5
 800dbac:	0800dff6 	.word	0x0800dff6

0800dbb0 <memcpy>:
 800dbb0:	440a      	add	r2, r1
 800dbb2:	4291      	cmp	r1, r2
 800dbb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbb8:	d100      	bne.n	800dbbc <memcpy+0xc>
 800dbba:	4770      	bx	lr
 800dbbc:	b510      	push	{r4, lr}
 800dbbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbc6:	4291      	cmp	r1, r2
 800dbc8:	d1f9      	bne.n	800dbbe <memcpy+0xe>
 800dbca:	bd10      	pop	{r4, pc}

0800dbcc <memmove>:
 800dbcc:	4288      	cmp	r0, r1
 800dbce:	b510      	push	{r4, lr}
 800dbd0:	eb01 0402 	add.w	r4, r1, r2
 800dbd4:	d902      	bls.n	800dbdc <memmove+0x10>
 800dbd6:	4284      	cmp	r4, r0
 800dbd8:	4623      	mov	r3, r4
 800dbda:	d807      	bhi.n	800dbec <memmove+0x20>
 800dbdc:	1e43      	subs	r3, r0, #1
 800dbde:	42a1      	cmp	r1, r4
 800dbe0:	d008      	beq.n	800dbf4 <memmove+0x28>
 800dbe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbea:	e7f8      	b.n	800dbde <memmove+0x12>
 800dbec:	4402      	add	r2, r0
 800dbee:	4601      	mov	r1, r0
 800dbf0:	428a      	cmp	r2, r1
 800dbf2:	d100      	bne.n	800dbf6 <memmove+0x2a>
 800dbf4:	bd10      	pop	{r4, pc}
 800dbf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbfe:	e7f7      	b.n	800dbf0 <memmove+0x24>

0800dc00 <_free_r>:
 800dc00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc02:	2900      	cmp	r1, #0
 800dc04:	d044      	beq.n	800dc90 <_free_r+0x90>
 800dc06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc0a:	9001      	str	r0, [sp, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f1a1 0404 	sub.w	r4, r1, #4
 800dc12:	bfb8      	it	lt
 800dc14:	18e4      	addlt	r4, r4, r3
 800dc16:	f000 f913 	bl	800de40 <__malloc_lock>
 800dc1a:	4a1e      	ldr	r2, [pc, #120]	; (800dc94 <_free_r+0x94>)
 800dc1c:	9801      	ldr	r0, [sp, #4]
 800dc1e:	6813      	ldr	r3, [r2, #0]
 800dc20:	b933      	cbnz	r3, 800dc30 <_free_r+0x30>
 800dc22:	6063      	str	r3, [r4, #4]
 800dc24:	6014      	str	r4, [r2, #0]
 800dc26:	b003      	add	sp, #12
 800dc28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc2c:	f000 b90e 	b.w	800de4c <__malloc_unlock>
 800dc30:	42a3      	cmp	r3, r4
 800dc32:	d908      	bls.n	800dc46 <_free_r+0x46>
 800dc34:	6825      	ldr	r5, [r4, #0]
 800dc36:	1961      	adds	r1, r4, r5
 800dc38:	428b      	cmp	r3, r1
 800dc3a:	bf01      	itttt	eq
 800dc3c:	6819      	ldreq	r1, [r3, #0]
 800dc3e:	685b      	ldreq	r3, [r3, #4]
 800dc40:	1949      	addeq	r1, r1, r5
 800dc42:	6021      	streq	r1, [r4, #0]
 800dc44:	e7ed      	b.n	800dc22 <_free_r+0x22>
 800dc46:	461a      	mov	r2, r3
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	b10b      	cbz	r3, 800dc50 <_free_r+0x50>
 800dc4c:	42a3      	cmp	r3, r4
 800dc4e:	d9fa      	bls.n	800dc46 <_free_r+0x46>
 800dc50:	6811      	ldr	r1, [r2, #0]
 800dc52:	1855      	adds	r5, r2, r1
 800dc54:	42a5      	cmp	r5, r4
 800dc56:	d10b      	bne.n	800dc70 <_free_r+0x70>
 800dc58:	6824      	ldr	r4, [r4, #0]
 800dc5a:	4421      	add	r1, r4
 800dc5c:	1854      	adds	r4, r2, r1
 800dc5e:	42a3      	cmp	r3, r4
 800dc60:	6011      	str	r1, [r2, #0]
 800dc62:	d1e0      	bne.n	800dc26 <_free_r+0x26>
 800dc64:	681c      	ldr	r4, [r3, #0]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	6053      	str	r3, [r2, #4]
 800dc6a:	4421      	add	r1, r4
 800dc6c:	6011      	str	r1, [r2, #0]
 800dc6e:	e7da      	b.n	800dc26 <_free_r+0x26>
 800dc70:	d902      	bls.n	800dc78 <_free_r+0x78>
 800dc72:	230c      	movs	r3, #12
 800dc74:	6003      	str	r3, [r0, #0]
 800dc76:	e7d6      	b.n	800dc26 <_free_r+0x26>
 800dc78:	6825      	ldr	r5, [r4, #0]
 800dc7a:	1961      	adds	r1, r4, r5
 800dc7c:	428b      	cmp	r3, r1
 800dc7e:	bf04      	itt	eq
 800dc80:	6819      	ldreq	r1, [r3, #0]
 800dc82:	685b      	ldreq	r3, [r3, #4]
 800dc84:	6063      	str	r3, [r4, #4]
 800dc86:	bf04      	itt	eq
 800dc88:	1949      	addeq	r1, r1, r5
 800dc8a:	6021      	streq	r1, [r4, #0]
 800dc8c:	6054      	str	r4, [r2, #4]
 800dc8e:	e7ca      	b.n	800dc26 <_free_r+0x26>
 800dc90:	b003      	add	sp, #12
 800dc92:	bd30      	pop	{r4, r5, pc}
 800dc94:	24000258 	.word	0x24000258

0800dc98 <sbrk_aligned>:
 800dc98:	b570      	push	{r4, r5, r6, lr}
 800dc9a:	4e0e      	ldr	r6, [pc, #56]	; (800dcd4 <sbrk_aligned+0x3c>)
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	6831      	ldr	r1, [r6, #0]
 800dca0:	4605      	mov	r5, r0
 800dca2:	b911      	cbnz	r1, 800dcaa <sbrk_aligned+0x12>
 800dca4:	f000 f8bc 	bl	800de20 <_sbrk_r>
 800dca8:	6030      	str	r0, [r6, #0]
 800dcaa:	4621      	mov	r1, r4
 800dcac:	4628      	mov	r0, r5
 800dcae:	f000 f8b7 	bl	800de20 <_sbrk_r>
 800dcb2:	1c43      	adds	r3, r0, #1
 800dcb4:	d00a      	beq.n	800dccc <sbrk_aligned+0x34>
 800dcb6:	1cc4      	adds	r4, r0, #3
 800dcb8:	f024 0403 	bic.w	r4, r4, #3
 800dcbc:	42a0      	cmp	r0, r4
 800dcbe:	d007      	beq.n	800dcd0 <sbrk_aligned+0x38>
 800dcc0:	1a21      	subs	r1, r4, r0
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f000 f8ac 	bl	800de20 <_sbrk_r>
 800dcc8:	3001      	adds	r0, #1
 800dcca:	d101      	bne.n	800dcd0 <sbrk_aligned+0x38>
 800dccc:	f04f 34ff 	mov.w	r4, #4294967295
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	bd70      	pop	{r4, r5, r6, pc}
 800dcd4:	2400025c 	.word	0x2400025c

0800dcd8 <_malloc_r>:
 800dcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcdc:	1ccd      	adds	r5, r1, #3
 800dcde:	f025 0503 	bic.w	r5, r5, #3
 800dce2:	3508      	adds	r5, #8
 800dce4:	2d0c      	cmp	r5, #12
 800dce6:	bf38      	it	cc
 800dce8:	250c      	movcc	r5, #12
 800dcea:	2d00      	cmp	r5, #0
 800dcec:	4607      	mov	r7, r0
 800dcee:	db01      	blt.n	800dcf4 <_malloc_r+0x1c>
 800dcf0:	42a9      	cmp	r1, r5
 800dcf2:	d905      	bls.n	800dd00 <_malloc_r+0x28>
 800dcf4:	230c      	movs	r3, #12
 800dcf6:	603b      	str	r3, [r7, #0]
 800dcf8:	2600      	movs	r6, #0
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd00:	4e2e      	ldr	r6, [pc, #184]	; (800ddbc <_malloc_r+0xe4>)
 800dd02:	f000 f89d 	bl	800de40 <__malloc_lock>
 800dd06:	6833      	ldr	r3, [r6, #0]
 800dd08:	461c      	mov	r4, r3
 800dd0a:	bb34      	cbnz	r4, 800dd5a <_malloc_r+0x82>
 800dd0c:	4629      	mov	r1, r5
 800dd0e:	4638      	mov	r0, r7
 800dd10:	f7ff ffc2 	bl	800dc98 <sbrk_aligned>
 800dd14:	1c43      	adds	r3, r0, #1
 800dd16:	4604      	mov	r4, r0
 800dd18:	d14d      	bne.n	800ddb6 <_malloc_r+0xde>
 800dd1a:	6834      	ldr	r4, [r6, #0]
 800dd1c:	4626      	mov	r6, r4
 800dd1e:	2e00      	cmp	r6, #0
 800dd20:	d140      	bne.n	800dda4 <_malloc_r+0xcc>
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	4631      	mov	r1, r6
 800dd26:	4638      	mov	r0, r7
 800dd28:	eb04 0803 	add.w	r8, r4, r3
 800dd2c:	f000 f878 	bl	800de20 <_sbrk_r>
 800dd30:	4580      	cmp	r8, r0
 800dd32:	d13a      	bne.n	800ddaa <_malloc_r+0xd2>
 800dd34:	6821      	ldr	r1, [r4, #0]
 800dd36:	3503      	adds	r5, #3
 800dd38:	1a6d      	subs	r5, r5, r1
 800dd3a:	f025 0503 	bic.w	r5, r5, #3
 800dd3e:	3508      	adds	r5, #8
 800dd40:	2d0c      	cmp	r5, #12
 800dd42:	bf38      	it	cc
 800dd44:	250c      	movcc	r5, #12
 800dd46:	4629      	mov	r1, r5
 800dd48:	4638      	mov	r0, r7
 800dd4a:	f7ff ffa5 	bl	800dc98 <sbrk_aligned>
 800dd4e:	3001      	adds	r0, #1
 800dd50:	d02b      	beq.n	800ddaa <_malloc_r+0xd2>
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	442b      	add	r3, r5
 800dd56:	6023      	str	r3, [r4, #0]
 800dd58:	e00e      	b.n	800dd78 <_malloc_r+0xa0>
 800dd5a:	6822      	ldr	r2, [r4, #0]
 800dd5c:	1b52      	subs	r2, r2, r5
 800dd5e:	d41e      	bmi.n	800dd9e <_malloc_r+0xc6>
 800dd60:	2a0b      	cmp	r2, #11
 800dd62:	d916      	bls.n	800dd92 <_malloc_r+0xba>
 800dd64:	1961      	adds	r1, r4, r5
 800dd66:	42a3      	cmp	r3, r4
 800dd68:	6025      	str	r5, [r4, #0]
 800dd6a:	bf18      	it	ne
 800dd6c:	6059      	strne	r1, [r3, #4]
 800dd6e:	6863      	ldr	r3, [r4, #4]
 800dd70:	bf08      	it	eq
 800dd72:	6031      	streq	r1, [r6, #0]
 800dd74:	5162      	str	r2, [r4, r5]
 800dd76:	604b      	str	r3, [r1, #4]
 800dd78:	4638      	mov	r0, r7
 800dd7a:	f104 060b 	add.w	r6, r4, #11
 800dd7e:	f000 f865 	bl	800de4c <__malloc_unlock>
 800dd82:	f026 0607 	bic.w	r6, r6, #7
 800dd86:	1d23      	adds	r3, r4, #4
 800dd88:	1af2      	subs	r2, r6, r3
 800dd8a:	d0b6      	beq.n	800dcfa <_malloc_r+0x22>
 800dd8c:	1b9b      	subs	r3, r3, r6
 800dd8e:	50a3      	str	r3, [r4, r2]
 800dd90:	e7b3      	b.n	800dcfa <_malloc_r+0x22>
 800dd92:	6862      	ldr	r2, [r4, #4]
 800dd94:	42a3      	cmp	r3, r4
 800dd96:	bf0c      	ite	eq
 800dd98:	6032      	streq	r2, [r6, #0]
 800dd9a:	605a      	strne	r2, [r3, #4]
 800dd9c:	e7ec      	b.n	800dd78 <_malloc_r+0xa0>
 800dd9e:	4623      	mov	r3, r4
 800dda0:	6864      	ldr	r4, [r4, #4]
 800dda2:	e7b2      	b.n	800dd0a <_malloc_r+0x32>
 800dda4:	4634      	mov	r4, r6
 800dda6:	6876      	ldr	r6, [r6, #4]
 800dda8:	e7b9      	b.n	800dd1e <_malloc_r+0x46>
 800ddaa:	230c      	movs	r3, #12
 800ddac:	603b      	str	r3, [r7, #0]
 800ddae:	4638      	mov	r0, r7
 800ddb0:	f000 f84c 	bl	800de4c <__malloc_unlock>
 800ddb4:	e7a1      	b.n	800dcfa <_malloc_r+0x22>
 800ddb6:	6025      	str	r5, [r4, #0]
 800ddb8:	e7de      	b.n	800dd78 <_malloc_r+0xa0>
 800ddba:	bf00      	nop
 800ddbc:	24000258 	.word	0x24000258

0800ddc0 <_realloc_r>:
 800ddc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	4614      	mov	r4, r2
 800ddc8:	460e      	mov	r6, r1
 800ddca:	b921      	cbnz	r1, 800ddd6 <_realloc_r+0x16>
 800ddcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	f7ff bf81 	b.w	800dcd8 <_malloc_r>
 800ddd6:	b92a      	cbnz	r2, 800dde4 <_realloc_r+0x24>
 800ddd8:	f7ff ff12 	bl	800dc00 <_free_r>
 800dddc:	4625      	mov	r5, r4
 800ddde:	4628      	mov	r0, r5
 800dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde4:	f000 f838 	bl	800de58 <_malloc_usable_size_r>
 800dde8:	4284      	cmp	r4, r0
 800ddea:	4607      	mov	r7, r0
 800ddec:	d802      	bhi.n	800ddf4 <_realloc_r+0x34>
 800ddee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddf2:	d812      	bhi.n	800de1a <_realloc_r+0x5a>
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	4640      	mov	r0, r8
 800ddf8:	f7ff ff6e 	bl	800dcd8 <_malloc_r>
 800ddfc:	4605      	mov	r5, r0
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d0ed      	beq.n	800ddde <_realloc_r+0x1e>
 800de02:	42bc      	cmp	r4, r7
 800de04:	4622      	mov	r2, r4
 800de06:	4631      	mov	r1, r6
 800de08:	bf28      	it	cs
 800de0a:	463a      	movcs	r2, r7
 800de0c:	f7ff fed0 	bl	800dbb0 <memcpy>
 800de10:	4631      	mov	r1, r6
 800de12:	4640      	mov	r0, r8
 800de14:	f7ff fef4 	bl	800dc00 <_free_r>
 800de18:	e7e1      	b.n	800ddde <_realloc_r+0x1e>
 800de1a:	4635      	mov	r5, r6
 800de1c:	e7df      	b.n	800ddde <_realloc_r+0x1e>
	...

0800de20 <_sbrk_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	4d06      	ldr	r5, [pc, #24]	; (800de3c <_sbrk_r+0x1c>)
 800de24:	2300      	movs	r3, #0
 800de26:	4604      	mov	r4, r0
 800de28:	4608      	mov	r0, r1
 800de2a:	602b      	str	r3, [r5, #0]
 800de2c:	f7f4 f978 	bl	8002120 <_sbrk>
 800de30:	1c43      	adds	r3, r0, #1
 800de32:	d102      	bne.n	800de3a <_sbrk_r+0x1a>
 800de34:	682b      	ldr	r3, [r5, #0]
 800de36:	b103      	cbz	r3, 800de3a <_sbrk_r+0x1a>
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	bd38      	pop	{r3, r4, r5, pc}
 800de3c:	24000260 	.word	0x24000260

0800de40 <__malloc_lock>:
 800de40:	4801      	ldr	r0, [pc, #4]	; (800de48 <__malloc_lock+0x8>)
 800de42:	f000 b811 	b.w	800de68 <__retarget_lock_acquire_recursive>
 800de46:	bf00      	nop
 800de48:	24000264 	.word	0x24000264

0800de4c <__malloc_unlock>:
 800de4c:	4801      	ldr	r0, [pc, #4]	; (800de54 <__malloc_unlock+0x8>)
 800de4e:	f000 b80c 	b.w	800de6a <__retarget_lock_release_recursive>
 800de52:	bf00      	nop
 800de54:	24000264 	.word	0x24000264

0800de58 <_malloc_usable_size_r>:
 800de58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de5c:	1f18      	subs	r0, r3, #4
 800de5e:	2b00      	cmp	r3, #0
 800de60:	bfbc      	itt	lt
 800de62:	580b      	ldrlt	r3, [r1, r0]
 800de64:	18c0      	addlt	r0, r0, r3
 800de66:	4770      	bx	lr

0800de68 <__retarget_lock_acquire_recursive>:
 800de68:	4770      	bx	lr

0800de6a <__retarget_lock_release_recursive>:
 800de6a:	4770      	bx	lr

0800de6c <_init>:
 800de6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6e:	bf00      	nop
 800de70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de72:	bc08      	pop	{r3}
 800de74:	469e      	mov	lr, r3
 800de76:	4770      	bx	lr

0800de78 <_fini>:
 800de78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7a:	bf00      	nop
 800de7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de7e:	bc08      	pop	{r3}
 800de80:	469e      	mov	lr, r3
 800de82:	4770      	bx	lr
