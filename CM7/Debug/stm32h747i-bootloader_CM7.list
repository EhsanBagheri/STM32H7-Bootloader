
stm32h747i-bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b99c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0800bc3c  0800bc3c  0001bc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfb8  0800bfb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfb8  0800bfb8  0001bfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfc0  0800bfc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfc0  0800bfc0  0001bfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfc4  0800bfc4  0001bfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800bfc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  24000074  0800c03c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001f4  0800c03c  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189fe  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f24  00000000  00000000  00038aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003cbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041a4a  00000000  00000000  0003dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a0b  00000000  00000000  0007f6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019ceab  00000000  00000000  000990d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00235f80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e00  00000000  00000000  00235fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bc24 	.word	0x0800bc24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800bc24 	.word	0x0800bc24

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
//	app_reset_handler();

	pFunction appEntry;
	uint32_t appStack;

	appStack = (uint32_t) *((__IO uint32_t*)APPLICATION_ADDRESS);
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <goto_application+0x30>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	60fb      	str	r3, [r7, #12]
	appEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <goto_application+0x34>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	60bb      	str	r3, [r7, #8]
//	__DMB();
	SCB->VTOR = APPLICATION_ADDRESS;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <goto_application+0x38>)
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <goto_application+0x30>)
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f383 8808 	msr	MSP, r3
}
 80007d2:	bf00      	nop
//	__DSB();
//	SysTick->CTRL = 0x0;
//	HAL_DeInit();
	__set_MSP(appStack);
	appEntry();
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4798      	blx	r3
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08020000 	.word	0x08020000
 80007e4:	08020004 	.word	0x08020004
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <boot_main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int boot_main(void)
{
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	f6ad 2dac 	subw	sp, sp, #2732	; 0xaac
 80007f2:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f8:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007fc:	bf00      	nop
 80007fe:	4b77      	ldr	r3, [pc, #476]	; (80009dc <boot_main+0x1f0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <boot_main+0x2c>
 800080a:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800080e:	1e5a      	subs	r2, r3, #1
 8000810:	f8c7 2aa4 	str.w	r2, [r7, #2724]	; 0xaa4
 8000814:	2b00      	cmp	r3, #0
 8000816:	dcf2      	bgt.n	80007fe <boot_main+0x12>
  if ( timeout < 0 )
 8000818:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800081c:	2b00      	cmp	r3, #0
 800081e:	da01      	bge.n	8000824 <boot_main+0x38>
  {
  Error_Handler();
 8000820:	f000 faa0 	bl	8000d64 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fc40 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f8e8 	bl	80009fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800082c:	f000 f96c 	bl	8000b08 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000830:	4b6a      	ldr	r3, [pc, #424]	; (80009dc <boot_main+0x1f0>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	4a69      	ldr	r2, [pc, #420]	; (80009dc <boot_main+0x1f0>)
 8000838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000840:	4b66      	ldr	r3, [pc, #408]	; (80009dc <boot_main+0x1f0>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800084a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800084e:	f6a3 23a8 	subw	r3, r3, #2728	; 0xaa8
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000858:	f6a3 23a8 	subw	r3, r3, #2728	; 0xaa8
 800085c:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800085e:	2000      	movs	r0, #0
 8000860:	f000 ffaa 	bl	80017b8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000864:	2100      	movs	r1, #0
 8000866:	2000      	movs	r0, #0
 8000868:	f000 ffc0 	bl	80017ec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800086c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000870:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000874:	bf00      	nop
 8000876:	4b59      	ldr	r3, [pc, #356]	; (80009dc <boot_main+0x1f0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d106      	bne.n	8000890 <boot_main+0xa4>
 8000882:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	f8c7 2aa4 	str.w	r2, [r7, #2724]	; 0xaa4
 800088c:	2b00      	cmp	r3, #0
 800088e:	dcf2      	bgt.n	8000876 <boot_main+0x8a>
if ( timeout < 0 )
 8000890:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8000894:	2b00      	cmp	r3, #0
 8000896:	da01      	bge.n	800089c <boot_main+0xb0>
{
Error_Handler();
 8000898:	f000 fa64 	bl	8000d64 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f000 f9ce 	bl	8000c3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008a0:	f000 f980 	bl	8000ba4 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80008a4:	f000 f960 	bl	8000b68 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008a8:	f008 f87c 	bl	80089a4 <MX_FATFS_Init>

  // Create a new file
  FIL file, file2;
  UINT bytesRead;
  UINT bytesWritten;
  uint8_t test[BUFFER_SIZE] = "hello             \n\r";
 80008ac:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80008b0:	f2a3 6674 	subw	r6, r3, #1652	; 0x674
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <boot_main+0x1f4>)
 80008b6:	4634      	mov	r4, r6
 80008b8:	461d      	mov	r5, r3
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008c2:	6020      	str	r0, [r4, #0]
 80008c4:	3404      	adds	r4, #4
 80008c6:	7021      	strb	r1, [r4, #0]
 80008c8:	f106 0315 	add.w	r3, r6, #21
 80008cc:	f240 12eb 	movw	r2, #491	; 0x1eb
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f00a fd30 	bl	800b338 <memset>
  FATFS fs;
  uint8_t mountRes, readByte[BUFFER_SIZE];

  FSIZE_t file_size;

  mountRes = f_mount(&fs, SD_CARD_PATH, 1);
 80008d8:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80008dc:	2201      	movs	r2, #1
 80008de:	4941      	ldr	r1, [pc, #260]	; (80009e4 <boot_main+0x1f8>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	f009 ff43 	bl	800a76c <f_mount>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f887 3aa3 	strb.w	r3, [r7, #2723]	; 0xaa3
  if (mountRes == FR_OK) {
 80008ec:	f897 3aa3 	ldrb.w	r3, [r7, #2723]	; 0xaa3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d170      	bne.n	80009d6 <boot_main+0x1ea>
	  if (f_open(&file, FILE_NAME_2, FA_READ) == FR_OK) {
 80008f4:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 80008f8:	2201      	movs	r2, #1
 80008fa:	493b      	ldr	r1, [pc, #236]	; (80009e8 <boot_main+0x1fc>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f009 ff7b 	bl	800a7f8 <f_open>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d166      	bne.n	80009d6 <boot_main+0x1ea>

		  file_size = f_size(&file);
 8000908:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800090c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c

		  sprintf(test, "Org: %lu", file_size);
 8000916:	f207 4334 	addw	r3, r7, #1076	; 0x434
 800091a:	f8d7 2a9c 	ldr.w	r2, [r7, #2716]	; 0xa9c
 800091e:	4933      	ldr	r1, [pc, #204]	; (80009ec <boot_main+0x200>)
 8000920:	4618      	mov	r0, r3
 8000922:	f00a fd11 	bl	800b348 <siprintf>
		  HAL_UART_Transmit(&huart1, test, 20, 100);
 8000926:	f207 4134 	addw	r1, r7, #1076	; 0x434
 800092a:	2364      	movs	r3, #100	; 0x64
 800092c:	2214      	movs	r2, #20
 800092e:	4830      	ldr	r0, [pc, #192]	; (80009f0 <boot_main+0x204>)
 8000930:	f006 f95a 	bl	8006be8 <HAL_UART_Transmit>

		  if (f_open(&file2, FILE_NAME_3, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8000934:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8000938:	220a      	movs	r2, #10
 800093a:	492e      	ldr	r1, [pc, #184]	; (80009f4 <boot_main+0x208>)
 800093c:	4618      	mov	r0, r3
 800093e:	f009 ff5b 	bl	800a7f8 <f_open>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d141      	bne.n	80009cc <boot_main+0x1e0>
			 while (f_read(&file, readByte, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000948:	e012      	b.n	8000970 <boot_main+0x184>
				// Process the read data here
				f_write(&file2, readByte, bytesRead, &bytesWritten);
 800094a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800094e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8000958:	1d39      	adds	r1, r7, #4
 800095a:	f207 603c 	addw	r0, r7, #1596	; 0x63c
 800095e:	f00a fa48 	bl	800adf2 <f_write>
				memset(readByte, 0xFF, sizeof(readByte));
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	21ff      	movs	r1, #255	; 0xff
 800096a:	4618      	mov	r0, r3
 800096c:	f00a fce4 	bl	800b338 <memset>
			 while (f_read(&file, readByte, BUFFER_SIZE, &bytesRead) == FR_OK && bytesRead > 0) {
 8000970:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000974:	1d39      	adds	r1, r7, #4
 8000976:	f607 006c 	addw	r0, r7, #2156	; 0x86c
 800097a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097e:	f00a f8f9 	bl	800ab74 <f_read>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d106      	bne.n	8000996 <boot_main+0x1aa>
 8000988:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800098c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1d9      	bne.n	800094a <boot_main+0x15e>
			 }

			 file_size = f_size(&file2);
 8000996:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800099a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c

			 sprintf(test, "Copy: %lu", file_size);
 80009a4:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80009a8:	f8d7 2a9c 	ldr.w	r2, [r7, #2716]	; 0xa9c
 80009ac:	4912      	ldr	r1, [pc, #72]	; (80009f8 <boot_main+0x20c>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a fcca 	bl	800b348 <siprintf>
			 HAL_UART_Transmit(&huart1, test, 20, 100);
 80009b4:	f207 4134 	addw	r1, r7, #1076	; 0x434
 80009b8:	2364      	movs	r3, #100	; 0x64
 80009ba:	2214      	movs	r2, #20
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <boot_main+0x204>)
 80009be:	f006 f913 	bl	8006be8 <HAL_UART_Transmit>

			 f_close(&file2);
 80009c2:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00a fc06 	bl	800b1d8 <f_close>
		  }

		  f_close(&file);
 80009cc:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 80009d0:	4618      	mov	r0, r3
 80009d2:	f00a fc01 	bl	800b1d8 <f_close>
	  }
  }
  goto_application();
 80009d6:	f7ff feeb 	bl	80007b0 <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009da:	e7fe      	b.n	80009da <boot_main+0x1ee>
 80009dc:	58024400 	.word	0x58024400
 80009e0:	0800bc74 	.word	0x0800bc74
 80009e4:	0800bc3c 	.word	0x0800bc3c
 80009e8:	0800bc40 	.word	0x0800bc40
 80009ec:	0800bc4c 	.word	0x0800bc4c
 80009f0:	2400010c 	.word	0x2400010c
 80009f4:	0800bc58 	.word	0x0800bc58
 80009f8:	0800bc68 	.word	0x0800bc68

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	; 0x70
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	224c      	movs	r2, #76	; 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f00a fc94 	bl	800b338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f00a fc8e 	bl	800b338 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f000 fef9 	bl	8001814 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <SystemClock_Config+0x104>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	4a35      	ldr	r2, [pc, #212]	; (8000b00 <SystemClock_Config+0x104>)
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a32:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <SystemClock_Config+0x104>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <SystemClock_Config+0x108>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a30      	ldr	r2, [pc, #192]	; (8000b04 <SystemClock_Config+0x108>)
 8000a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <SystemClock_Config+0x108>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a54:	bf00      	nop
 8000a56:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <SystemClock_Config+0x108>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a62:	d1f8      	bne.n	8000a56 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000a64:	230b      	movs	r3, #11
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a72:	2340      	movs	r3, #64	; 0x40
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a76:	2301      	movs	r3, #1
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 41;
 8000a86:	2329      	movs	r3, #41	; 0x29
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a8e:	2305      	movs	r3, #5
 8000a90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a96:	2308      	movs	r3, #8
 8000a98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 ff0e 	bl	80018c8 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ab2:	f000 f957 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	233f      	movs	r3, #63	; 0x3f
 8000ab8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fb4e 	bl	800217c <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000ae6:	f000 f93d 	bl	8000d64 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000aea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000aee:	2100      	movs	r1, #0
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 fcf9 	bl	80024e8 <HAL_RCC_MCOConfig>
}
 8000af6:	bf00      	nop
 8000af8:	3770      	adds	r7, #112	; 0x70
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	58000400 	.word	0x58000400
 8000b04:	58024800 	.word	0x58024800

08000b08 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0b2      	sub	sp, #200	; 0xc8
 8000b0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	22c8      	movs	r2, #200	; 0xc8
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00a fc0f 	bl	800b338 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b1e:	f04f 0300 	mov.w	r3, #0
 8000b22:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b3a:	23c0      	movs	r3, #192	; 0xc0
 8000b3c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 ff0a 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000b5a:	f000 f903 	bl	8000d64 <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	37c8      	adds	r7, #200	; 0xc8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SDMMC1_SD_Init+0x34>)
 8000b6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <MX_SDMMC1_SD_Init+0x38>)
 8000b70:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_SDMMC1_SD_Init+0x34>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SDMMC1_SD_Init+0x34>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_SDMMC1_SD_Init+0x34>)
 8000b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b84:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <MX_SDMMC1_SD_Init+0x34>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <MX_SDMMC1_SD_Init+0x34>)
 8000b8e:	2208      	movs	r2, #8
 8000b90:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000b92:	4802      	ldr	r0, [pc, #8]	; (8000b9c <MX_SDMMC1_SD_Init+0x34>)
 8000b94:	f004 fc26 	bl	80053e4 <HAL_SD_Init>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24000090 	.word	0x24000090
 8000ba0:	52007000 	.word	0x52007000

08000ba4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <MX_USART1_UART_Init+0x94>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000bee:	f005 ffab 	bl	8006b48 <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 f8b4 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000c00:	f007 f83b 	bl	8007c7a <HAL_UARTEx_SetTxFifoThreshold>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0a:	f000 f8ab 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000c12:	f007 f870 	bl	8007cf6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 f8a2 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_USART1_UART_Init+0x90>)
 8000c22:	f006 fff1 	bl	8007c08 <HAL_UARTEx_DisableFifoMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f000 f89a 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2400010c 	.word	0x2400010c
 8000c38:	40011000 	.word	0x40011000

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b41      	ldr	r3, [pc, #260]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a3f      	ldr	r2, [pc, #252]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c70:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a38      	ldr	r2, [pc, #224]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a30      	ldr	r2, [pc, #192]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a29      	ldr	r2, [pc, #164]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <MX_GPIO_Init+0x11c>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cee:	481b      	ldr	r0, [pc, #108]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000cf0:	f000 fd48 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000d0a:	f000 fb73 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_GPIO_Init+0x124>)
 8000d2c:	f000 fb62 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000d30:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000d4a:	f000 fb53 	bl	80013f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58022000 	.word	0x58022000
 8000d60:	58020000 	.word	0x58020000

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7c:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x30>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x30>)
 8000d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	58024400 	.word	0x58024400

08000da4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0be      	sub	sp, #248	; 0xf8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	22c8      	movs	r2, #200	; 0xc8
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00a fab7 	bl	800b338 <memset>
  if(hsd->Instance==SDMMC1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <HAL_SD_MspInit+0x10c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d169      	bne.n	8000ea8 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000dd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fdbd 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000df4:	f7ff ffb6 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000df8:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_SD_MspInit+0x110>)
 8000dfa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000dfe:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <HAL_SD_MspInit+0x110>)
 8000e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e04:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_SD_MspInit+0x110>)
 8000e0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_SD_MspInit+0x110>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <HAL_SD_MspInit+0x110>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_SD_MspInit+0x110>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_SD_MspInit+0x110>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_SD_MspInit+0x110>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_SD_MspInit+0x110>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000e52:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e76:	4619      	mov	r1, r3
 8000e78:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <HAL_SD_MspInit+0x114>)
 8000e7a:	f000 fabb 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e96:	230c      	movs	r3, #12
 8000e98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	; (8000ebc <HAL_SD_MspInit+0x118>)
 8000ea4:	f000 faa6 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	37f8      	adds	r7, #248	; 0xf8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	52007000 	.word	0x52007000
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020800 	.word	0x58020800
 8000ebc:	58020c00 	.word	0x58020c00

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0bc      	sub	sp, #240	; 0xf0
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	22c8      	movs	r2, #200	; 0xc8
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f00a fa29 	bl	800b338 <memset>
  if(huart->Instance==USART1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <HAL_UART_MspInit+0xc8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d146      	bne.n	8000f7e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ef0:	f04f 0201 	mov.w	r2, #1
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fd2e 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f12:	f7ff ff27 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_UART_MspInit+0xcc>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000f52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <HAL_UART_MspInit+0xd0>)
 8000f7a:	f000 fa3b 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	37f0      	adds	r7, #240	; 0xf0
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	58020000 	.word	0x58020000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f8d4 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f00a f964 	bl	800b2e4 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	24080000 	.word	0x24080000
 8001048:	00000400 	.word	0x00000400
 800104c:	240001a0 	.word	0x240001a0
 8001050:	240001f8 	.word	0x240001f8

08001054 <Boot_Reset_Handler>:

    .section  .text.Boot_Reset_Handler
  .weak  Boot_Reset_Handler
  .type  Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001058:	f7ff fb14 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001082:	f00a f935 	bl	800b2f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  boot_main
 8001086:	f7ff fbb1 	bl	80007ec <boot_main>
  bx  lr
 800108a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001090:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001094:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001098:	0800bfc8 	.word	0x0800bfc8
  ldr r2, =_sbss
 800109c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80010a0:	240001f4 	.word	0x240001f4

080010a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC3_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f000 f96e 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010b4:	f001 fa82 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_Init+0x68>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	4913      	ldr	r1, [pc, #76]	; (8001114 <HAL_Init+0x6c>)
 80010c6:	5ccb      	ldrb	r3, [r1, r3]
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_Init+0x68>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_Init+0x6c>)
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_Init+0x70>)
 80010ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_Init+0x74>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f814 	bl	8001120 <HAL_InitTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e002      	b.n	8001108 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001102:	f7ff fe35 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	58024400 	.word	0x58024400
 8001114:	0800beb8 	.word	0x0800beb8
 8001118:	24000004 	.word	0x24000004
 800111c:	24000000 	.word	0x24000000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_InitTick+0x60>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e021      	b.n	8001178 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_InitTick+0x64>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_InitTick+0x60>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f945 	bl	80013da <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f91d 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x68>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2400000c 	.word	0x2400000c
 8001184:	24000000 	.word	0x24000000
 8001188:	24000008 	.word	0x24000008

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2400000c 	.word	0x2400000c
 80011b0:	240001a4 	.word	0x240001a4

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	240001a4 	.word	0x240001a4

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2400000c 	.word	0x2400000c

08001214 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetREVID+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	0c1b      	lsrs	r3, r3, #16
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	5c001000 	.word	0x5c001000

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <__NVIC_SetPriorityGrouping+0x40>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	4313      	orrs	r3, r2
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x40>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00
 8001270:	05fa0000 	.word	0x05fa0000

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff47 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff5e 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff90 	bl	80012e4 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5f 	bl	8001290 <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffb2 	bl	800134c <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001402:	4b89      	ldr	r3, [pc, #548]	; (8001628 <HAL_GPIO_Init+0x234>)
 8001404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001406:	e194      	b.n	8001732 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8186 	beq.w	800172c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b01      	cmp	r3, #1
 800142a:	d005      	beq.n	8001438 <HAL_GPIO_Init+0x44>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d130      	bne.n	800149a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146e:	2201      	movs	r2, #1
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	f003 0201 	and.w	r2, r3, #1
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d017      	beq.n	80014d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d123      	bne.n	800152a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	220f      	movs	r2, #15
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	08da      	lsrs	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3208      	adds	r2, #8
 8001524:	69b9      	ldr	r1, [r7, #24]
 8001526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0203 	and.w	r2, r3, #3
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80e0 	beq.w	800172c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_GPIO_Init+0x238>)
 800156e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001572:	4a2e      	ldr	r2, [pc, #184]	; (800162c <HAL_GPIO_Init+0x238>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_GPIO_Init+0x238>)
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158a:	4a29      	ldr	r2, [pc, #164]	; (8001630 <HAL_GPIO_Init+0x23c>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a20      	ldr	r2, [pc, #128]	; (8001634 <HAL_GPIO_Init+0x240>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d052      	beq.n	800165c <HAL_GPIO_Init+0x268>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <HAL_GPIO_Init+0x244>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d031      	beq.n	8001622 <HAL_GPIO_Init+0x22e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_GPIO_Init+0x248>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d02b      	beq.n	800161e <HAL_GPIO_Init+0x22a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <HAL_GPIO_Init+0x24c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d025      	beq.n	800161a <HAL_GPIO_Init+0x226>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <HAL_GPIO_Init+0x250>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01f      	beq.n	8001616 <HAL_GPIO_Init+0x222>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <HAL_GPIO_Init+0x254>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x21e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <HAL_GPIO_Init+0x258>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x21a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_GPIO_Init+0x25c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x216>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_GPIO_Init+0x260>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x212>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_GPIO_Init+0x264>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x20e>
 80015fe:	2309      	movs	r3, #9
 8001600:	e02d      	b.n	800165e <HAL_GPIO_Init+0x26a>
 8001602:	230a      	movs	r3, #10
 8001604:	e02b      	b.n	800165e <HAL_GPIO_Init+0x26a>
 8001606:	2308      	movs	r3, #8
 8001608:	e029      	b.n	800165e <HAL_GPIO_Init+0x26a>
 800160a:	2307      	movs	r3, #7
 800160c:	e027      	b.n	800165e <HAL_GPIO_Init+0x26a>
 800160e:	2306      	movs	r3, #6
 8001610:	e025      	b.n	800165e <HAL_GPIO_Init+0x26a>
 8001612:	2305      	movs	r3, #5
 8001614:	e023      	b.n	800165e <HAL_GPIO_Init+0x26a>
 8001616:	2304      	movs	r3, #4
 8001618:	e021      	b.n	800165e <HAL_GPIO_Init+0x26a>
 800161a:	2303      	movs	r3, #3
 800161c:	e01f      	b.n	800165e <HAL_GPIO_Init+0x26a>
 800161e:	2302      	movs	r3, #2
 8001620:	e01d      	b.n	800165e <HAL_GPIO_Init+0x26a>
 8001622:	2301      	movs	r3, #1
 8001624:	e01b      	b.n	800165e <HAL_GPIO_Init+0x26a>
 8001626:	bf00      	nop
 8001628:	58000080 	.word	0x58000080
 800162c:	58024400 	.word	0x58024400
 8001630:	58000400 	.word	0x58000400
 8001634:	58020000 	.word	0x58020000
 8001638:	58020400 	.word	0x58020400
 800163c:	58020800 	.word	0x58020800
 8001640:	58020c00 	.word	0x58020c00
 8001644:	58021000 	.word	0x58021000
 8001648:	58021400 	.word	0x58021400
 800164c:	58021800 	.word	0x58021800
 8001650:	58021c00 	.word	0x58021c00
 8001654:	58022000 	.word	0x58022000
 8001658:	58022400 	.word	0x58022400
 800165c:	2300      	movs	r3, #0
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800166e:	4938      	ldr	r1, [pc, #224]	; (8001750 <HAL_GPIO_Init+0x35c>)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800167c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	f47f ae63 	bne.w	8001408 <HAL_GPIO_Init+0x14>
  }
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	3724      	adds	r7, #36	; 0x24
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	58000400 	.word	0x58000400

08001754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e001      	b.n	8001776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017a0:	e003      	b.n	80017aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_HSEM_FastTake+0x2c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3320      	adds	r3, #32
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_HSEM_FastTake+0x30>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	e000      	b.n	80017d6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	58026400 	.word	0x58026400
 80017e8:	80000300 	.word	0x80000300

080017ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80017f6:	4906      	ldr	r1, [pc, #24]	; (8001810 <HAL_HSEM_Release+0x24>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	58026400 	.word	0x58026400

08001814 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	2b06      	cmp	r3, #6
 8001826:	d00a      	beq.n	800183e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e040      	b.n	80018bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e03e      	b.n	80018bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001846:	491f      	ldr	r1, [pc, #124]	; (80018c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4313      	orrs	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800184e:	f7ff fcb1 	bl	80011b4 <HAL_GetTick>
 8001852:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001854:	e009      	b.n	800186a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001856:	f7ff fcad 	bl	80011b4 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001864:	d901      	bls.n	800186a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e028      	b.n	80018bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001876:	d1ee      	bne.n	8001856 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b1e      	cmp	r3, #30
 800187c:	d008      	beq.n	8001890 <HAL_PWREx_ConfigSupply+0x7c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b2e      	cmp	r3, #46	; 0x2e
 8001882:	d005      	beq.n	8001890 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b1d      	cmp	r3, #29
 8001888:	d002      	beq.n	8001890 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b2d      	cmp	r3, #45	; 0x2d
 800188e:	d114      	bne.n	80018ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001890:	f7ff fc90 	bl	80011b4 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001896:	e009      	b.n	80018ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001898:	f7ff fc8c 	bl	80011b4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018a6:	d901      	bls.n	80018ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e007      	b.n	80018bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d1ee      	bne.n	8001898 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	58024800 	.word	0x58024800

080018c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f000 bc48 	b.w	800216c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8088 	beq.w	80019fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ea:	4b99      	ldr	r3, [pc, #612]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018f4:	4b96      	ldr	r3, [pc, #600]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d007      	beq.n	8001910 <HAL_RCC_OscConfig+0x48>
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	2b18      	cmp	r3, #24
 8001904:	d111      	bne.n	800192a <HAL_RCC_OscConfig+0x62>
 8001906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d10c      	bne.n	800192a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4b8f      	ldr	r3, [pc, #572]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d06d      	beq.n	80019f8 <HAL_RCC_OscConfig+0x130>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d169      	bne.n	80019f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	f000 bc21 	b.w	800216c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x7a>
 8001934:	4b86      	ldr	r3, [pc, #536]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a85      	ldr	r2, [pc, #532]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 800193a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e02e      	b.n	80019a0 <HAL_RCC_OscConfig+0xd8>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x9c>
 800194a:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a80      	ldr	r2, [pc, #512]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b7e      	ldr	r3, [pc, #504]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a7d      	ldr	r2, [pc, #500]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 800195c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e01d      	b.n	80019a0 <HAL_RCC_OscConfig+0xd8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0xc0>
 800196e:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a77      	ldr	r2, [pc, #476]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b75      	ldr	r3, [pc, #468]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a74      	ldr	r2, [pc, #464]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0xd8>
 8001988:	4b71      	ldr	r3, [pc, #452]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a70      	ldr	r2, [pc, #448]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b6e      	ldr	r3, [pc, #440]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a6d      	ldr	r2, [pc, #436]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fc04 	bl	80011b4 <HAL_GetTick>
 80019ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fc00 	bl	80011b4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e3d4      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019c2:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0xe8>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fbf0 	bl	80011b4 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fbec 	bl	80011b4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e3c0      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ea:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x110>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80ca 	beq.w	8001b9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a08:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a12:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_RCC_OscConfig+0x166>
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	2b18      	cmp	r3, #24
 8001a22:	d156      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x20a>
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d151      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2e:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <HAL_RCC_OscConfig+0x17e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e392      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a46:	4b42      	ldr	r3, [pc, #264]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0219 	bic.w	r2, r3, #25
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	493f      	ldr	r1, [pc, #252]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fbac 	bl	80011b4 <HAL_GetTick>
 8001a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fba8 	bl	80011b4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e37c      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a72:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	f7ff fbc9 	bl	8001214 <HAL_GetREVID>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d817      	bhi.n	8001abc <HAL_RCC_OscConfig+0x1f4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b40      	cmp	r3, #64	; 0x40
 8001a92:	d108      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x1de>
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a9c:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa4:	e07a      	b.n	8001b9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	031b      	lsls	r3, r3, #12
 8001ab4:	4926      	ldr	r1, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aba:	e06f      	b.n	8001b9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	4921      	ldr	r1, [pc, #132]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad0:	e064      	b.n	8001b9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d047      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 0219 	bic.w	r2, r3, #25
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	491a      	ldr	r1, [pc, #104]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fb62 	bl	80011b4 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff fb5e 	bl	80011b4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e332      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	f7ff fb7f 	bl	8001214 <HAL_GetREVID>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d819      	bhi.n	8001b54 <HAL_RCC_OscConfig+0x28c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b40      	cmp	r3, #64	; 0x40
 8001b26:	d108      	bne.n	8001b3a <HAL_RCC_OscConfig+0x272>
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b36:	6053      	str	r3, [r2, #4]
 8001b38:	e030      	b.n	8001b9c <HAL_RCC_OscConfig+0x2d4>
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	031b      	lsls	r3, r3, #12
 8001b48:	4901      	ldr	r1, [pc, #4]	; (8001b50 <HAL_RCC_OscConfig+0x288>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
 8001b4e:	e025      	b.n	8001b9c <HAL_RCC_OscConfig+0x2d4>
 8001b50:	58024400 	.word	0x58024400
 8001b54:	4b9a      	ldr	r3, [pc, #616]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	061b      	lsls	r3, r3, #24
 8001b62:	4997      	ldr	r1, [pc, #604]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
 8001b68:	e018      	b.n	8001b9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6a:	4b95      	ldr	r3, [pc, #596]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a94      	ldr	r2, [pc, #592]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fb1d 	bl	80011b4 <HAL_GetTick>
 8001b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fb19 	bl	80011b4 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e2ed      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b90:	4b8b      	ldr	r3, [pc, #556]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a9 	beq.w	8001cfc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001baa:	4b85      	ldr	r3, [pc, #532]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bb4:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d007      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x308>
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b18      	cmp	r3, #24
 8001bc4:	d13a      	bne.n	8001c3c <HAL_RCC_OscConfig+0x374>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d135      	bne.n	8001c3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bd0:	4b7b      	ldr	r3, [pc, #492]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_OscConfig+0x320>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b80      	cmp	r3, #128	; 0x80
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e2c1      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001be8:	f7ff fb14 	bl	8001214 <HAL_GetREVID>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d817      	bhi.n	8001c26 <HAL_RCC_OscConfig+0x35e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_OscConfig+0x348>
 8001bfe:	4b70      	ldr	r3, [pc, #448]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c06:	4a6e      	ldr	r2, [pc, #440]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c0e:	e075      	b.n	8001cfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c10:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	069b      	lsls	r3, r3, #26
 8001c1e:	4968      	ldr	r1, [pc, #416]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c24:	e06a      	b.n	8001cfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c26:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	061b      	lsls	r3, r3, #24
 8001c34:	4962      	ldr	r1, [pc, #392]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c3a:	e05f      	b.n	8001cfc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d042      	beq.n	8001cca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c44:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a5d      	ldr	r2, [pc, #372]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fab0 	bl	80011b4 <HAL_GetTick>
 8001c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c58:	f7ff faac 	bl	80011b4 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e280      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c6a:	4b55      	ldr	r3, [pc, #340]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c76:	f7ff facd 	bl	8001214 <HAL_GetREVID>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d817      	bhi.n	8001cb4 <HAL_RCC_OscConfig+0x3ec>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d108      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3d6>
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c94:	4a4a      	ldr	r2, [pc, #296]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c9a:	6053      	str	r3, [r2, #4]
 8001c9c:	e02e      	b.n	8001cfc <HAL_RCC_OscConfig+0x434>
 8001c9e:	4b48      	ldr	r3, [pc, #288]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	4944      	ldr	r1, [pc, #272]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
 8001cb2:	e023      	b.n	8001cfc <HAL_RCC_OscConfig+0x434>
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	493f      	ldr	r1, [pc, #252]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
 8001cc8:	e018      	b.n	8001cfc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a3c      	ldr	r2, [pc, #240]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fa6d 	bl	80011b4 <HAL_GetTick>
 8001cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cde:	f7ff fa69 	bl	80011b4 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e23d      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d036      	beq.n	8001d76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d019      	beq.n	8001d44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d14:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fa4a 	bl	80011b4 <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff fa46 	bl	80011b4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e21a      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x45c>
 8001d42:	e018      	b.n	8001d76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff fa30 	bl	80011b4 <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fa2c 	bl	80011b4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e200      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d039      	beq.n	8001df6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d96:	f7ff fa0d 	bl	80011b4 <HAL_GetTick>
 8001d9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff fa09 	bl	80011b4 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1dd      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x4d6>
 8001dbc:	e01b      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
 8001dbe:	bf00      	nop
 8001dc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dc4:	4b9b      	ldr	r3, [pc, #620]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a9a      	ldr	r2, [pc, #616]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff f9f0 	bl	80011b4 <HAL_GetTick>
 8001dd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dd8:	f7ff f9ec 	bl	80011b4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1c0      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dea:	4b92      	ldr	r3, [pc, #584]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8081 	beq.w	8001f06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e04:	4b8c      	ldr	r3, [pc, #560]	; (8002038 <HAL_RCC_OscConfig+0x770>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a8b      	ldr	r2, [pc, #556]	; (8002038 <HAL_RCC_OscConfig+0x770>)
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e10:	f7ff f9d0 	bl	80011b4 <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e18:	f7ff f9cc 	bl	80011b4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1a0      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e2a:	4b83      	ldr	r3, [pc, #524]	; (8002038 <HAL_RCC_OscConfig+0x770>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x584>
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a7c      	ldr	r2, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4a:	e02d      	b.n	8001ea8 <HAL_RCC_OscConfig+0x5e0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5a6>
 8001e54:	4b77      	ldr	r3, [pc, #476]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a76      	ldr	r2, [pc, #472]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e60:	4b74      	ldr	r3, [pc, #464]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a73      	ldr	r2, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e66:	f023 0304 	bic.w	r3, r3, #4
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6c:	e01c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x5e0>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x5c8>
 8001e76:	4b6f      	ldr	r3, [pc, #444]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6713      	str	r3, [r2, #112]	; 0x70
 8001e82:	4b6c      	ldr	r3, [pc, #432]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a6b      	ldr	r2, [pc, #428]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x5e0>
 8001e90:	4b68      	ldr	r3, [pc, #416]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	4a67      	ldr	r2, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9c:	4b65      	ldr	r3, [pc, #404]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a64      	ldr	r2, [pc, #400]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d015      	beq.n	8001edc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff f980 	bl	80011b4 <HAL_GetTick>
 8001eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f97c 	bl	80011b4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e14e      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ece:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ee      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x5f0>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff f96a 	bl	80011b4 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f966 	bl	80011b4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e138      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001efa:	4b4e      	ldr	r3, [pc, #312]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ee      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 812d 	beq.w	800216a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f10:	4b48      	ldr	r3, [pc, #288]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f18:	2b18      	cmp	r3, #24
 8001f1a:	f000 80bd 	beq.w	8002098 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	f040 809e 	bne.w	8002064 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a41      	ldr	r2, [pc, #260]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff f93e 	bl	80011b4 <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff f93a 	bl	80011b4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e10e      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5a:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_RCC_OscConfig+0x774>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	4931      	ldr	r1, [pc, #196]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	628b      	str	r3, [r1, #40]	; 0x28
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	3b01      	subs	r3, #1
 8001f84:	025b      	lsls	r3, r3, #9
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	061b      	lsls	r3, r3, #24
 8001fa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fa4:	4923      	ldr	r1, [pc, #140]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	4a21      	ldr	r2, [pc, #132]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <HAL_RCC_OscConfig+0x778>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fc2:	00d2      	lsls	r2, r2, #3
 8001fc4:	491b      	ldr	r1, [pc, #108]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	f023 020c 	bic.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4917      	ldr	r1, [pc, #92]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	f023 0202 	bic.w	r2, r3, #2
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	4912      	ldr	r1, [pc, #72]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	4a10      	ldr	r2, [pc, #64]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_RCC_OscConfig+0x76c>)
 8002024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7ff f8c3 	bl	80011b4 <HAL_GetTick>
 800202e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002030:	e011      	b.n	8002056 <HAL_RCC_OscConfig+0x78e>
 8002032:	bf00      	nop
 8002034:	58024400 	.word	0x58024400
 8002038:	58024800 	.word	0x58024800
 800203c:	fffffc0c 	.word	0xfffffc0c
 8002040:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002044:	f7ff f8b6 	bl	80011b4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e08a      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002056:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x77c>
 8002062:	e082      	b.n	800216a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a42      	ldr	r2, [pc, #264]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 800206a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800206e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f8a0 	bl	80011b4 <HAL_GetTick>
 8002074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7ff f89c 	bl	80011b4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e070      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x7b0>
 8002096:	e068      	b.n	800216a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002098:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800209e:	4b35      	ldr	r3, [pc, #212]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d031      	beq.n	8002110 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f003 0203 	and.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d12a      	bne.n	8002110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d122      	bne.n	8002110 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d11a      	bne.n	8002110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	0a5b      	lsrs	r3, r3, #9
 80020de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d111      	bne.n	8002110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d108      	bne.n	8002110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0e1b      	lsrs	r3, r3, #24
 8002102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e02b      	b.n	800216c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800211e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	429a      	cmp	r2, r3
 8002128:	d01f      	beq.n	800216a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002136:	f7ff f83d 	bl	80011b4 <HAL_GetTick>
 800213a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800213c:	bf00      	nop
 800213e:	f7ff f839 	bl	80011b4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	4293      	cmp	r3, r2
 8002148:	d0f9      	beq.n	800213e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 800214c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_OscConfig+0x8b0>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002156:	00d2      	lsls	r2, r2, #3
 8002158:	4906      	ldr	r1, [pc, #24]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 800215a:	4313      	orrs	r3, r2
 800215c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_RCC_OscConfig+0x8ac>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3730      	adds	r7, #48	; 0x30
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	58024400 	.word	0x58024400
 8002178:	ffff0007 	.word	0xffff0007

0800217c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e19c      	b.n	80024ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b8a      	ldr	r3, [pc, #552]	; (80023bc <HAL_RCC_ClockConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b87      	ldr	r3, [pc, #540]	; (80023bc <HAL_RCC_ClockConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	4985      	ldr	r1, [pc, #532]	; (80023bc <HAL_RCC_ClockConfig+0x240>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b83      	ldr	r3, [pc, #524]	; (80023bc <HAL_RCC_ClockConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e184      	b.n	80024ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d010      	beq.n	80021ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d8:	429a      	cmp	r2, r3
 80021da:	d908      	bls.n	80021ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021dc:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4975      	ldr	r1, [pc, #468]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	4b70      	ldr	r3, [pc, #448]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002206:	429a      	cmp	r2, r3
 8002208:	d908      	bls.n	800221c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800220a:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	496a      	ldr	r1, [pc, #424]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 8002218:	4313      	orrs	r3, r2
 800221a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699a      	ldr	r2, [r3, #24]
 800222c:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002234:	429a      	cmp	r2, r3
 8002236:	d908      	bls.n	800224a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002238:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	495e      	ldr	r1, [pc, #376]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 8002246:	4313      	orrs	r3, r2
 8002248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002262:	429a      	cmp	r2, r3
 8002264:	d908      	bls.n	8002278 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002266:	4b56      	ldr	r3, [pc, #344]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4953      	ldr	r1, [pc, #332]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 8002274:	4313      	orrs	r3, r2
 8002276:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d010      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4b4d      	ldr	r3, [pc, #308]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	429a      	cmp	r2, r3
 8002292:	d908      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f023 020f 	bic.w	r2, r3, #15
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4947      	ldr	r1, [pc, #284]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d055      	beq.n	800235e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	4940      	ldr	r1, [pc, #256]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022cc:	4b3c      	ldr	r3, [pc, #240]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d121      	bne.n	800231c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0f6      	b.n	80024ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d115      	bne.n	800231c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0ea      	b.n	80024ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022fc:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0de      	b.n	80024ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0d6      	b.n	80024ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f023 0207 	bic.w	r2, r3, #7
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4925      	ldr	r1, [pc, #148]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800232a:	4313      	orrs	r3, r2
 800232c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232e:	f7fe ff41 	bl	80011b4 <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002334:	e00a      	b.n	800234c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002336:	f7fe ff3d 	bl	80011b4 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	; 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0be      	b.n	80024ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	429a      	cmp	r2, r3
 800235c:	d1eb      	bne.n	8002336 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d010      	beq.n	800238c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	429a      	cmp	r2, r3
 8002378:	d208      	bcs.n	800238c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	490e      	ldr	r1, [pc, #56]	; (80023c0 <HAL_RCC_ClockConfig+0x244>)
 8002388:	4313      	orrs	r3, r2
 800238a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_ClockConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d214      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_RCC_ClockConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 020f 	bic.w	r2, r3, #15
 80023a2:	4906      	ldr	r1, [pc, #24]	; (80023bc <HAL_RCC_ClockConfig+0x240>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_RCC_ClockConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e086      	b.n	80024ca <HAL_RCC_ClockConfig+0x34e>
 80023bc:	52002000 	.word	0x52002000
 80023c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d010      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023dc:	429a      	cmp	r2, r3
 80023de:	d208      	bcs.n	80023f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023e0:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	4939      	ldr	r1, [pc, #228]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d010      	beq.n	8002420 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800240a:	429a      	cmp	r2, r3
 800240c:	d208      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800240e:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	492e      	ldr	r1, [pc, #184]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 800241c:	4313      	orrs	r3, r2
 800241e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b00      	cmp	r3, #0
 800242a:	d010      	beq.n	800244e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002438:	429a      	cmp	r2, r3
 800243a:	d208      	bcs.n	800244e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4922      	ldr	r1, [pc, #136]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 800244a:	4313      	orrs	r3, r2
 800244c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002466:	429a      	cmp	r2, r3
 8002468:	d208      	bcs.n	800247c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4917      	ldr	r1, [pc, #92]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 8002478:	4313      	orrs	r3, r2
 800247a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800247c:	f000 f89e 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	4912      	ldr	r1, [pc, #72]	; (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <HAL_RCC_ClockConfig+0x358>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <HAL_RCC_ClockConfig+0x360>)
 80024b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <HAL_RCC_ClockConfig+0x364>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x368>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fe2e 	bl	8001120 <HAL_InitTick>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	58024400 	.word	0x58024400
 80024d8:	0800beb8 	.word	0x0800beb8
 80024dc:	24000004 	.word	0x24000004
 80024e0:	24000000 	.word	0x24000000
 80024e4:	24000008 	.word	0x24000008

080024e8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	; 0x30
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d12a      	bne.n	8002550 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800252a:	2300      	movs	r3, #0
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800252e:	f107 031c 	add.w	r3, r7, #28
 8002532:	4619      	mov	r1, r3
 8002534:	481f      	ldr	r0, [pc, #124]	; (80025b4 <HAL_RCC_MCOConfig+0xcc>)
 8002536:	f7fe ff5d 	bl	80013f4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	430b      	orrs	r3, r1
 8002548:	4919      	ldr	r1, [pc, #100]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800254e:	e02a      	b.n	80025a6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002556:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800256e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002580:	2300      	movs	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	480b      	ldr	r0, [pc, #44]	; (80025b8 <HAL_RCC_MCOConfig+0xd0>)
 800258c:	f7fe ff32 	bl	80013f4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	01d9      	lsls	r1, r3, #7
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	430b      	orrs	r3, r1
 80025a0:	4903      	ldr	r1, [pc, #12]	; (80025b0 <HAL_RCC_MCOConfig+0xc8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	610b      	str	r3, [r1, #16]
}
 80025a6:	bf00      	nop
 80025a8:	3730      	adds	r7, #48	; 0x30
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	58024400 	.word	0x58024400
 80025b4:	58020000 	.word	0x58020000
 80025b8:	58020800 	.word	0x58020800

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c2:	4bb3      	ldr	r3, [pc, #716]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ca:	2b18      	cmp	r3, #24
 80025cc:	f200 8155 	bhi.w	800287a <HAL_RCC_GetSysClockFreq+0x2be>
 80025d0:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d6:	bf00      	nop
 80025d8:	0800263d 	.word	0x0800263d
 80025dc:	0800287b 	.word	0x0800287b
 80025e0:	0800287b 	.word	0x0800287b
 80025e4:	0800287b 	.word	0x0800287b
 80025e8:	0800287b 	.word	0x0800287b
 80025ec:	0800287b 	.word	0x0800287b
 80025f0:	0800287b 	.word	0x0800287b
 80025f4:	0800287b 	.word	0x0800287b
 80025f8:	08002663 	.word	0x08002663
 80025fc:	0800287b 	.word	0x0800287b
 8002600:	0800287b 	.word	0x0800287b
 8002604:	0800287b 	.word	0x0800287b
 8002608:	0800287b 	.word	0x0800287b
 800260c:	0800287b 	.word	0x0800287b
 8002610:	0800287b 	.word	0x0800287b
 8002614:	0800287b 	.word	0x0800287b
 8002618:	08002669 	.word	0x08002669
 800261c:	0800287b 	.word	0x0800287b
 8002620:	0800287b 	.word	0x0800287b
 8002624:	0800287b 	.word	0x0800287b
 8002628:	0800287b 	.word	0x0800287b
 800262c:	0800287b 	.word	0x0800287b
 8002630:	0800287b 	.word	0x0800287b
 8002634:	0800287b 	.word	0x0800287b
 8002638:	0800266f 	.word	0x0800266f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800263c:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d009      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002648:	4b91      	ldr	r3, [pc, #580]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	4a90      	ldr	r2, [pc, #576]	; (8002894 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800265a:	e111      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800265c:	4b8d      	ldr	r3, [pc, #564]	; (8002894 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800265e:	61bb      	str	r3, [r7, #24]
      break;
 8002660:	e10e      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002662:	4b8d      	ldr	r3, [pc, #564]	; (8002898 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002664:	61bb      	str	r3, [r7, #24]
      break;
 8002666:	e10b      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002668:	4b8c      	ldr	r3, [pc, #560]	; (800289c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800266a:	61bb      	str	r3, [r7, #24]
      break;
 800266c:	e108      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800266e:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002678:	4b85      	ldr	r3, [pc, #532]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002682:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002684:	4b82      	ldr	r3, [pc, #520]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800268e:	4b80      	ldr	r3, [pc, #512]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	08db      	lsrs	r3, r3, #3
 8002694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80e1 	beq.w	8002874 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f000 8083 	beq.w	80027c0 <HAL_RCC_GetSysClockFreq+0x204>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	f200 80a1 	bhi.w	8002804 <HAL_RCC_GetSysClockFreq+0x248>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x114>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d056      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x1c0>
 80026ce:	e099      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026d0:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d02d      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026dc:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	4a6b      	ldr	r2, [pc, #428]	; (8002894 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002706:	4b62      	ldr	r3, [pc, #392]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002716:	ed97 6a02 	vldr	s12, [r7, #8]
 800271a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800271e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800272a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002736:	e087      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002742:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800274a:	4b51      	ldr	r3, [pc, #324]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275a:	ed97 6a02 	vldr	s12, [r7, #8]
 800275e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800276a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800276e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800277a:	e065      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800278a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278e:	4b40      	ldr	r3, [pc, #256]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800279e:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027be:	e043      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80027ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d2:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002802:	e021      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002826:	ed97 6a02 	vldr	s12, [r7, #8]
 800282a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800282e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800283a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002842:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002846:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	0a5b      	lsrs	r3, r3, #9
 800284e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002852:	3301      	adds	r3, #1
 8002854:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002860:	edd7 6a07 	vldr	s13, [r7, #28]
 8002864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286c:	ee17 3a90 	vmov	r3, s15
 8002870:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002872:	e005      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
      break;
 8002878:	e002      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800287c:	61bb      	str	r3, [r7, #24]
      break;
 800287e:	bf00      	nop
  }

  return sysclockfreq;
 8002880:	69bb      	ldr	r3, [r7, #24]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	58024400 	.word	0x58024400
 8002894:	03d09000 	.word	0x03d09000
 8002898:	003d0900 	.word	0x003d0900
 800289c:	017d7840 	.word	0x017d7840
 80028a0:	46000000 	.word	0x46000000
 80028a4:	4c742400 	.word	0x4c742400
 80028a8:	4a742400 	.word	0x4a742400
 80028ac:	4bbebc20 	.word	0x4bbebc20

080028b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028b6:	f7ff fe81 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_RCC_GetHCLKFreq+0x50>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	490f      	ldr	r1, [pc, #60]	; (8002904 <HAL_RCC_GetHCLKFreq+0x54>)
 80028c8:	5ccb      	ldrb	r3, [r1, r3]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_GetHCLKFreq+0x50>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_GetHCLKFreq+0x54>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	4a07      	ldr	r2, [pc, #28]	; (8002908 <HAL_RCC_GetHCLKFreq+0x58>)
 80028ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028ee:	4a07      	ldr	r2, [pc, #28]	; (800290c <HAL_RCC_GetHCLKFreq+0x5c>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <HAL_RCC_GetHCLKFreq+0x58>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	58024400 	.word	0x58024400
 8002904:	0800beb8 	.word	0x0800beb8
 8002908:	24000004 	.word	0x24000004
 800290c:	24000000 	.word	0x24000000

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002914:	f7ff ffcc 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4904      	ldr	r1, [pc, #16]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	58024400 	.word	0x58024400
 8002938:	0800beb8 	.word	0x0800beb8

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002940:	f7ff ffb6 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4904      	ldr	r1, [pc, #16]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	58024400 	.word	0x58024400
 8002964:	0800beb8 	.word	0x0800beb8

08002968 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b0cc      	sub	sp, #304	; 0x130
 800296e:	af00      	add	r7, sp, #0
 8002970:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002974:	2300      	movs	r3, #0
 8002976:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800297a:	2300      	movs	r3, #0
 800297c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002980:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800298c:	2500      	movs	r5, #0
 800298e:	ea54 0305 	orrs.w	r3, r4, r5
 8002992:	d049      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002994:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800299e:	d02f      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029a4:	d828      	bhi.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029aa:	d01a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029b0:	d822      	bhi.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ba:	d007      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029bc:	e01c      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029be:	4bb8      	ldr	r3, [pc, #736]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	4ab7      	ldr	r2, [pc, #732]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029ca:	e01a      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029d0:	3308      	adds	r3, #8
 80029d2:	2102      	movs	r1, #2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 fba1 	bl	800511c <RCCEx_PLL2_Config>
 80029da:	4603      	mov	r3, r0
 80029dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029e0:	e00f      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029e6:	3328      	adds	r3, #40	; 0x28
 80029e8:	2102      	movs	r1, #2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 fc48 	bl	8005280 <RCCEx_PLL3_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029f6:	e004      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80029fe:	e000      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a0a:	4ba5      	ldr	r3, [pc, #660]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a18:	4aa1      	ldr	r2, [pc, #644]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	6513      	str	r3, [r2, #80]	; 0x50
 8002a1e:	e003      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a24:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002a34:	f04f 0900 	mov.w	r9, #0
 8002a38:	ea58 0309 	orrs.w	r3, r8, r9
 8002a3c:	d047      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d82a      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a48:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4e:	bf00      	nop
 8002a50:	08002a65 	.word	0x08002a65
 8002a54:	08002a73 	.word	0x08002a73
 8002a58:	08002a89 	.word	0x08002a89
 8002a5c:	08002aa7 	.word	0x08002aa7
 8002a60:	08002aa7 	.word	0x08002aa7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a64:	4b8e      	ldr	r3, [pc, #568]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	4a8d      	ldr	r2, [pc, #564]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a70:	e01a      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a76:	3308      	adds	r3, #8
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 fb4e 	bl	800511c <RCCEx_PLL2_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a86:	e00f      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a8c:	3328      	adds	r3, #40	; 0x28
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f002 fbf5 	bl	8005280 <RCCEx_PLL3_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a9c:	e004      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab0:	4b7b      	ldr	r3, [pc, #492]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	f023 0107 	bic.w	r1, r3, #7
 8002ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	4a78      	ldr	r2, [pc, #480]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6513      	str	r3, [r2, #80]	; 0x50
 8002ac4:	e003      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002aca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002ada:	f04f 0b00 	mov.w	fp, #0
 8002ade:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ae2:	d04c      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aee:	d030      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af4:	d829      	bhi.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002af6:	2bc0      	cmp	r3, #192	; 0xc0
 8002af8:	d02d      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002afa:	2bc0      	cmp	r3, #192	; 0xc0
 8002afc:	d825      	bhi.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002afe:	2b80      	cmp	r3, #128	; 0x80
 8002b00:	d018      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b02:	2b80      	cmp	r3, #128	; 0x80
 8002b04:	d821      	bhi.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d007      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b0e:	e01c      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b10:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	4a62      	ldr	r2, [pc, #392]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b1c:	e01c      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b22:	3308      	adds	r3, #8
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f002 faf8 	bl	800511c <RCCEx_PLL2_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b32:	e011      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b38:	3328      	adds	r3, #40	; 0x28
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 fb9f 	bl	8005280 <RCCEx_PLL3_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b48:	e006      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b50:	e002      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10a      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6e:	4a4c      	ldr	r2, [pc, #304]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6513      	str	r3, [r2, #80]	; 0x50
 8002b74:	e003      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b76:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b7a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002b8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b94:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d053      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ba2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002baa:	d035      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb0:	d82e      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002bb6:	d031      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002bb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002bbc:	d828      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc2:	d01a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc8:	d822      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002bce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bd2:	d007      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002bd4:	e01c      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002be2:	e01c      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002be8:	3308      	adds	r3, #8
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 fa95 	bl	800511c <RCCEx_PLL2_Config>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bf8:	e011      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bfe:	3328      	adds	r3, #40	; 0x28
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fb3c 	bl	8005280 <RCCEx_PLL3_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c0e:	e006      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c16:	e002      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c18:	bf00      	nop
 8002c1a:	e000      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c1e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10b      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c36:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	e003      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c42:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002c52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002c5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002c60:	460b      	mov	r3, r1
 8002c62:	4313      	orrs	r3, r2
 8002c64:	d056      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c72:	d038      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c78:	d831      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c7e:	d034      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002c80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c84:	d82b      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c8a:	d01d      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c90:	d825      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c9c:	e01f      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c9e:	bf00      	nop
 8002ca0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca4:	4ba2      	ldr	r3, [pc, #648]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	4aa1      	ldr	r2, [pc, #644]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cb0:	e01c      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 fa2e 	bl	800511c <RCCEx_PLL2_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002cc6:	e011      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ccc:	3328      	adds	r3, #40	; 0x28
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 fad5 	bl	8005280 <RCCEx_PLL3_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cdc:	e006      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ce4:	e002      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cf4:	4b8e      	ldr	r3, [pc, #568]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d04:	4a8a      	ldr	r2, [pc, #552]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d06:	430b      	orrs	r3, r1
 8002d08:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0a:	e003      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d10:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002d20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d2a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4313      	orrs	r3, r2
 8002d32:	d03a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	2b30      	cmp	r3, #48	; 0x30
 8002d3c:	d01f      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d3e:	2b30      	cmp	r3, #48	; 0x30
 8002d40:	d819      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d00c      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d815      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d111      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d52:	4b77      	ldr	r3, [pc, #476]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	4a76      	ldr	r2, [pc, #472]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d5e:	e011      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d64:	3308      	adds	r3, #8
 8002d66:	2102      	movs	r1, #2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 f9d7 	bl	800511c <RCCEx_PLL2_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d74:	e006      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d7c:	e002      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d84:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	4a65      	ldr	r2, [pc, #404]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da0:	e003      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002da6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002db6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002dc0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	d051      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd4:	d035      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dda:	d82e      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ddc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002de0:	d031      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002de2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002de6:	d828      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dec:	d01a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df2:	d822      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfc:	d007      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002dfe:	e01c      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	4a4a      	ldr	r2, [pc, #296]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e0c:	e01c      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e12:	3308      	adds	r3, #8
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 f980 	bl	800511c <RCCEx_PLL2_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e22:	e011      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e28:	3328      	adds	r3, #40	; 0x28
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 fa27 	bl	8005280 <RCCEx_PLL3_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e38:	e006      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002e40:	e002      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e48:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e50:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e54:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e5e:	4a34      	ldr	r2, [pc, #208]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6513      	str	r3, [r2, #80]	; 0x50
 8002e64:	e003      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e66:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e6a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002e7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002e84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	d056      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e98:	d033      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e9e:	d82c      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ea0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ea4:	d02f      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eaa:	d826      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002eac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002eb0:	d02b      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002eb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002eb6:	d820      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ebc:	d012      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ec2:	d81a      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d022      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d115      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 f920 	bl	800511c <RCCEx_PLL2_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ee2:	e015      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ee8:	3328      	adds	r3, #40	; 0x28
 8002eea:	2101      	movs	r1, #1
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 f9c7 	bl	8005280 <RCCEx_PLL3_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f00:	e006      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f02:	bf00      	nop
 8002f04:	e004      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f06:	bf00      	nop
 8002f08:	e002      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f10:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10d      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f26:	4a02      	ldr	r2, [pc, #8]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	6513      	str	r3, [r2, #80]	; 0x50
 8002f2c:	e006      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f2e:	bf00      	nop
 8002f30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f38:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002f48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002f52:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002f56:	460b      	mov	r3, r1
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	d055      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f68:	d033      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f6e:	d82c      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d02f      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d826      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f80:	d02b      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002f82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f86:	d820      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f8c:	d012      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f92:	d81a      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d022      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f9c:	d115      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 f8b8 	bl	800511c <RCCEx_PLL2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fb2:	e015      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fb8:	3328      	adds	r3, #40	; 0x28
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f002 f95f 	bl	8005280 <RCCEx_PLL3_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002fd0:	e006      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fd2:	bf00      	nop
 8002fd4:	e004      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fd6:	bf00      	nop
 8002fd8:	e002      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002fe8:	4bb6      	ldr	r3, [pc, #728]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ff4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ff8:	4ab2      	ldr	r2, [pc, #712]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffe:	e003      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003000:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003004:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003008:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003018:	2300      	movs	r3, #0
 800301a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800301e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003022:	460b      	mov	r3, r1
 8003024:	4313      	orrs	r3, r2
 8003026:	d02a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003028:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800302c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302e:	2b00      	cmp	r3, #0
 8003030:	d011      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003036:	d10a      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003038:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800303c:	3308      	adds	r3, #8
 800303e:	2101      	movs	r1, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f002 f86b 	bl	800511c <RCCEx_PLL2_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800304c:	e004      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003054:	e000      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003058:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003060:	4b98      	ldr	r3, [pc, #608]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003064:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003068:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800306c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306e:	4a95      	ldr	r2, [pc, #596]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003070:	430b      	orrs	r3, r1
 8003072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003074:	e003      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003076:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800307a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800307e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800308a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800308e:	2300      	movs	r3, #0
 8003090:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003094:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003098:	460b      	mov	r3, r1
 800309a:	4313      	orrs	r3, r2
 800309c:	d037      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800309e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a8:	d00e      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80030aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ae:	d816      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x776>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d018      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80030b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b8:	d111      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ba:	4b82      	ldr	r3, [pc, #520]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	4a81      	ldr	r2, [pc, #516]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030c6:	e00f      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030cc:	3308      	adds	r3, #8
 80030ce:	2101      	movs	r1, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f002 f823 	bl	800511c <RCCEx_PLL2_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030dc:	e004      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030e4:	e000      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80030e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030f0:	4b74      	ldr	r3, [pc, #464]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80030f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fe:	4a71      	ldr	r2, [pc, #452]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003100:	430b      	orrs	r3, r1
 8003102:	6513      	str	r3, [r2, #80]	; 0x50
 8003104:	e003      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003106:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800310a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800310e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800311a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003124:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003128:	460b      	mov	r3, r1
 800312a:	4313      	orrs	r3, r2
 800312c:	d03a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800312e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003134:	2b03      	cmp	r3, #3
 8003136:	d81d      	bhi.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	0800317d 	.word	0x0800317d
 8003144:	08003151 	.word	0x08003151
 8003148:	0800315f 	.word	0x0800315f
 800314c:	0800317d 	.word	0x0800317d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003150:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	4a5b      	ldr	r2, [pc, #364]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800315c:	e00f      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800315e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003162:	3308      	adds	r3, #8
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f001 ffd8 	bl	800511c <RCCEx_PLL2_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003172:	e004      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800317a:	e000      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800317c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800317e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003186:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	f023 0103 	bic.w	r1, r3, #3
 800318e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	4a4b      	ldr	r2, [pc, #300]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003196:	430b      	orrs	r3, r1
 8003198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319a:	e003      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80031b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031b4:	2300      	movs	r3, #0
 80031b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80031be:	460b      	mov	r3, r1
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f000 80a0 	beq.w	8003306 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c6:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031d2:	f7fd ffef 	bl	80011b4 <HAL_GetTick>
 80031d6:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031da:	e00b      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031dc:	f7fd ffea 	bl	80011b4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d903      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80031f2:	e005      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031f4:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ed      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003200:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003204:	2b00      	cmp	r3, #0
 8003206:	d17a      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003208:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800320a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800320c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003210:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003214:	4053      	eors	r3, r2
 8003216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800321e:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003226:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a25      	ldr	r2, [pc, #148]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003236:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800323c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003242:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003244:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003248:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800324a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800324e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003256:	d118      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fd ffac 	bl	80011b4 <HAL_GetTick>
 800325c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003260:	e00d      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fd ffa7 	bl	80011b4 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800326c:	1ad2      	subs	r2, r2, r3
 800326e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003272:	429a      	cmp	r2, r3
 8003274:	d903      	bls.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 800327c:	e005      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0eb      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800328a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800328e:	2b00      	cmp	r3, #0
 8003290:	d130      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003296:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a2:	d115      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80032ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80032b4:	091a      	lsrs	r2, r3, #4
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	4a02      	ldr	r2, [pc, #8]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	6113      	str	r3, [r2, #16]
 80032c0:	e00c      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x974>
 80032c2:	bf00      	nop
 80032c4:	58024400 	.word	0x58024400
 80032c8:	58024800 	.word	0x58024800
 80032cc:	00ffffcf 	.word	0x00ffffcf
 80032d0:	4bd4      	ldr	r3, [pc, #848]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	4ad3      	ldr	r2, [pc, #844]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80032d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032da:	6113      	str	r3, [r2, #16]
 80032dc:	4bd1      	ldr	r3, [pc, #836]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80032de:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80032e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	4acd      	ldr	r2, [pc, #820]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80032ee:	430b      	orrs	r3, r1
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	e008      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032f8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80032fc:	e003      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003302:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003306:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	f002 0301 	and.w	r3, r2, #1
 8003312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003316:	2300      	movs	r3, #0
 8003318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800331c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003320:	460b      	mov	r3, r1
 8003322:	4313      	orrs	r3, r2
 8003324:	f000 808b 	beq.w	800343e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003328:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800332c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003330:	2b28      	cmp	r3, #40	; 0x28
 8003332:	d86b      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003334:	a201      	add	r2, pc, #4	; (adr r2, 800333c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	08003415 	.word	0x08003415
 8003340:	0800340d 	.word	0x0800340d
 8003344:	0800340d 	.word	0x0800340d
 8003348:	0800340d 	.word	0x0800340d
 800334c:	0800340d 	.word	0x0800340d
 8003350:	0800340d 	.word	0x0800340d
 8003354:	0800340d 	.word	0x0800340d
 8003358:	0800340d 	.word	0x0800340d
 800335c:	080033e1 	.word	0x080033e1
 8003360:	0800340d 	.word	0x0800340d
 8003364:	0800340d 	.word	0x0800340d
 8003368:	0800340d 	.word	0x0800340d
 800336c:	0800340d 	.word	0x0800340d
 8003370:	0800340d 	.word	0x0800340d
 8003374:	0800340d 	.word	0x0800340d
 8003378:	0800340d 	.word	0x0800340d
 800337c:	080033f7 	.word	0x080033f7
 8003380:	0800340d 	.word	0x0800340d
 8003384:	0800340d 	.word	0x0800340d
 8003388:	0800340d 	.word	0x0800340d
 800338c:	0800340d 	.word	0x0800340d
 8003390:	0800340d 	.word	0x0800340d
 8003394:	0800340d 	.word	0x0800340d
 8003398:	0800340d 	.word	0x0800340d
 800339c:	08003415 	.word	0x08003415
 80033a0:	0800340d 	.word	0x0800340d
 80033a4:	0800340d 	.word	0x0800340d
 80033a8:	0800340d 	.word	0x0800340d
 80033ac:	0800340d 	.word	0x0800340d
 80033b0:	0800340d 	.word	0x0800340d
 80033b4:	0800340d 	.word	0x0800340d
 80033b8:	0800340d 	.word	0x0800340d
 80033bc:	08003415 	.word	0x08003415
 80033c0:	0800340d 	.word	0x0800340d
 80033c4:	0800340d 	.word	0x0800340d
 80033c8:	0800340d 	.word	0x0800340d
 80033cc:	0800340d 	.word	0x0800340d
 80033d0:	0800340d 	.word	0x0800340d
 80033d4:	0800340d 	.word	0x0800340d
 80033d8:	0800340d 	.word	0x0800340d
 80033dc:	08003415 	.word	0x08003415
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e4:	3308      	adds	r3, #8
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fe97 	bl	800511c <RCCEx_PLL2_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033f4:	e00f      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033fa:	3328      	adds	r3, #40	; 0x28
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 ff3e 	bl	8005280 <RCCEx_PLL3_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800340a:	e004      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003416:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800341e:	4b81      	ldr	r3, [pc, #516]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003426:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	4a7d      	ldr	r2, [pc, #500]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003430:	430b      	orrs	r3, r1
 8003432:	6553      	str	r3, [r2, #84]	; 0x54
 8003434:	e003      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003436:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800343a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800343e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f002 0302 	and.w	r3, r2, #2
 800344a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003454:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003458:	460b      	mov	r3, r1
 800345a:	4313      	orrs	r3, r2
 800345c:	d042      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800345e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003464:	2b05      	cmp	r3, #5
 8003466:	d825      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	080034bd 	.word	0x080034bd
 8003474:	08003489 	.word	0x08003489
 8003478:	0800349f 	.word	0x0800349f
 800347c:	080034bd 	.word	0x080034bd
 8003480:	080034bd 	.word	0x080034bd
 8003484:	080034bd 	.word	0x080034bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003488:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800348c:	3308      	adds	r3, #8
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fe43 	bl	800511c <RCCEx_PLL2_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800349c:	e00f      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800349e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034a2:	3328      	adds	r3, #40	; 0x28
 80034a4:	2101      	movs	r1, #1
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 feea 	bl	8005280 <RCCEx_PLL3_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034b2:	e004      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80034bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80034c6:	4b57      	ldr	r3, [pc, #348]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	f023 0107 	bic.w	r1, r3, #7
 80034ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d4:	4a53      	ldr	r2, [pc, #332]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034d6:	430b      	orrs	r3, r1
 80034d8:	6553      	str	r3, [r2, #84]	; 0x54
 80034da:	e003      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034e0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f002 0304 	and.w	r3, r2, #4
 80034f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f4:	2300      	movs	r3, #0
 80034f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80034fe:	460b      	mov	r3, r1
 8003500:	4313      	orrs	r3, r2
 8003502:	d044      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003504:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800350c:	2b05      	cmp	r3, #5
 800350e:	d825      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	08003565 	.word	0x08003565
 800351c:	08003531 	.word	0x08003531
 8003520:	08003547 	.word	0x08003547
 8003524:	08003565 	.word	0x08003565
 8003528:	08003565 	.word	0x08003565
 800352c:	08003565 	.word	0x08003565
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003534:	3308      	adds	r3, #8
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f001 fdef 	bl	800511c <RCCEx_PLL2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003544:	e00f      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003546:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800354a:	3328      	adds	r3, #40	; 0x28
 800354c:	2101      	movs	r1, #1
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fe96 	bl	8005280 <RCCEx_PLL3_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800355a:	e004      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003566:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800356e:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	f023 0107 	bic.w	r1, r3, #7
 8003576:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800357a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800357e:	4a29      	ldr	r2, [pc, #164]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003580:	430b      	orrs	r3, r1
 8003582:	6593      	str	r3, [r2, #88]	; 0x58
 8003584:	e003      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800358a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800358e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f002 0320 	and.w	r3, r2, #32
 800359a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035a8:	460b      	mov	r3, r1
 80035aa:	4313      	orrs	r3, r2
 80035ac:	d057      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80035ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ba:	d035      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80035bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c0:	d82c      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d031      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d826      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80035ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035d2:	d02d      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80035d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035d8:	d820      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80035da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035de:	d012      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80035e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e4:	d81a      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d024      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80035ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ee:	d115      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035f4:	3308      	adds	r3, #8
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f001 fd8f 	bl	800511c <RCCEx_PLL2_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003604:	e017      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800360a:	3328      	adds	r3, #40	; 0x28
 800360c:	2102      	movs	r1, #2
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fe36 	bl	8005280 <RCCEx_PLL3_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800361a:	e00c      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003622:	e008      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003624:	58024400 	.word	0x58024400
        break;
 8003628:	bf00      	nop
 800362a:	e004      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800362c:	bf00      	nop
 800362e:	e002      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003630:	bf00      	nop
 8003632:	e000      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003636:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800363e:	4bc2      	ldr	r3, [pc, #776]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003646:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800364a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364e:	4abe      	ldr	r2, [pc, #760]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003650:	430b      	orrs	r3, r1
 8003652:	6553      	str	r3, [r2, #84]	; 0x54
 8003654:	e003      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003656:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800365a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800365e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003666:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800366a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003674:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003678:	460b      	mov	r3, r1
 800367a:	4313      	orrs	r3, r2
 800367c:	d055      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800367e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003686:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800368a:	d033      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800368c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003690:	d82c      	bhi.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003696:	d02f      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369c:	d826      	bhi.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800369e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a2:	d02b      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80036a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a8:	d820      	bhi.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80036aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ae:	d012      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80036b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b4:	d81a      	bhi.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d022      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d115      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c4:	3308      	adds	r3, #8
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 fd27 	bl	800511c <RCCEx_PLL2_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036d4:	e015      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036da:	3328      	adds	r3, #40	; 0x28
 80036dc:	2102      	movs	r1, #2
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fdce 	bl	8005280 <RCCEx_PLL3_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036ea:	e00a      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80036f2:	e006      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80036f4:	bf00      	nop
 80036f6:	e004      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80036f8:	bf00      	nop
 80036fa:	e002      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003702:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800370a:	4b8f      	ldr	r3, [pc, #572]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003716:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800371a:	4a8b      	ldr	r2, [pc, #556]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800371c:	430b      	orrs	r3, r1
 800371e:	6593      	str	r3, [r2, #88]	; 0x58
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003726:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003736:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003740:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d055      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800374a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800374e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003752:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003756:	d033      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003758:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800375c:	d82c      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800375e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003762:	d02f      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003768:	d826      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800376a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800376e:	d02b      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003770:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003774:	d820      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377a:	d012      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800377c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003780:	d81a      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d022      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378a:	d115      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800378c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003790:	3308      	adds	r3, #8
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fcc1 	bl	800511c <RCCEx_PLL2_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037a0:	e015      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037a6:	3328      	adds	r3, #40	; 0x28
 80037a8:	2102      	movs	r1, #2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fd68 	bl	8005280 <RCCEx_PLL3_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037b6:	e00a      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80037be:	e006      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80037c0:	bf00      	nop
 80037c2:	e004      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80037c4:	bf00      	nop
 80037c6:	e002      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80037c8:	bf00      	nop
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80037d6:	4b5c      	ldr	r3, [pc, #368]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80037de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037e6:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6593      	str	r3, [r2, #88]	; 0x58
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80037f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f002 0308 	and.w	r3, r2, #8
 8003802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800380c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d01e      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003816:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d10c      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003828:	3328      	adds	r3, #40	; 0x28
 800382a:	2102      	movs	r1, #2
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fd27 	bl	8005280 <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800383e:	4b42      	ldr	r3, [pc, #264]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003846:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	4a3e      	ldr	r2, [pc, #248]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003850:	430b      	orrs	r3, r1
 8003852:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003854:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f002 0310 	and.w	r3, r2, #16
 8003860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003864:	2300      	movs	r3, #0
 8003866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800386a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800386e:	460b      	mov	r3, r1
 8003870:	4313      	orrs	r3, r2
 8003872:	d01e      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003874:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800387c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003880:	d10c      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003882:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003886:	3328      	adds	r3, #40	; 0x28
 8003888:	2102      	movs	r1, #2
 800388a:	4618      	mov	r0, r3
 800388c:	f001 fcf8 	bl	8005280 <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ac:	4a26      	ldr	r2, [pc, #152]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038ae:	430b      	orrs	r3, r1
 80038b0:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80038be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80038cc:	460b      	mov	r3, r1
 80038ce:	4313      	orrs	r3, r2
 80038d0:	d040      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80038d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038de:	d022      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80038e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e4:	d81b      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80038ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ee:	d00b      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80038f0:	e015      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038f6:	3308      	adds	r3, #8
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fc0e 	bl	800511c <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003906:	e00f      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800390c:	3328      	adds	r3, #40	; 0x28
 800390e:	2102      	movs	r1, #2
 8003910:	4618      	mov	r0, r3
 8003912:	f001 fcb5 	bl	8005280 <RCCEx_PLL3_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800391c:	e004      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003924:	e000      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003928:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10d      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003938:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800393c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003940:	4a01      	ldr	r2, [pc, #4]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003942:	430b      	orrs	r3, r1
 8003944:	6593      	str	r3, [r2, #88]	; 0x58
 8003946:	e005      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003950:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003954:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003960:	67bb      	str	r3, [r7, #120]	; 0x78
 8003962:	2300      	movs	r3, #0
 8003964:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003966:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d03b      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003970:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003978:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800397c:	d01f      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800397e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003982:	d818      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003988:	d003      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800398a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800398e:	d007      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003990:	e011      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4b64      	ldr	r3, [pc, #400]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a63      	ldr	r2, [pc, #396]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800399e:	e00f      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039a4:	3328      	adds	r3, #40	; 0x28
 80039a6:	2101      	movs	r1, #1
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 fc69 	bl	8005280 <RCCEx_PLL3_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80039b4:	e004      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80039be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039c8:	4b56      	ldr	r3, [pc, #344]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80039d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d8:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	6553      	str	r3, [r2, #84]	; 0x54
 80039de:	e003      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039e4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80039f4:	673b      	str	r3, [r7, #112]	; 0x70
 80039f6:	2300      	movs	r3, #0
 80039f8:	677b      	str	r3, [r7, #116]	; 0x74
 80039fa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80039fe:	460b      	mov	r3, r1
 8003a00:	4313      	orrs	r3, r2
 8003a02:	d031      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a12:	d007      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003a14:	e011      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a16:	4b43      	ldr	r3, [pc, #268]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	4a42      	ldr	r2, [pc, #264]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a22:	e00e      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a28:	3308      	adds	r3, #8
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fb75 	bl	800511c <RCCEx_PLL2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a38:	e003      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a42:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a4a:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	4a32      	ldr	r2, [pc, #200]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a5e:	e003      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a64:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a76:	2300      	movs	r3, #0
 8003a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d00c      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a88:	3328      	adds	r3, #40	; 0x28
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fbf7 	bl	8005280 <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8003aac:	2300      	movs	r3, #0
 8003aae:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	d03a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac6:	d018      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003acc:	d811      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad2:	d014      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d80b      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d011      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003af0:	e008      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003af8:	e004      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003afa:	bf00      	nop
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10d      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1c:	4a01      	ldr	r2, [pc, #4]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6553      	str	r3, [r2, #84]	; 0x54
 8003b22:	e005      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b2c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b3e:	2300      	movs	r3, #0
 8003b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	d009      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b4c:	4baa      	ldr	r3, [pc, #680]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5a:	4aa7      	ldr	r2, [pc, #668]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b6e:	2300      	movs	r3, #0
 8003b70:	657b      	str	r3, [r7, #84]	; 0x54
 8003b72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003b76:	460b      	mov	r3, r1
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b7c:	4b9e      	ldr	r3, [pc, #632]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b8c:	4a9a      	ldr	r2, [pc, #616]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4313      	orrs	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bae:	4b92      	ldr	r3, [pc, #584]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a8e      	ldr	r2, [pc, #568]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003bce:	643b      	str	r3, [r7, #64]	; 0x40
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bde:	4b86      	ldr	r3, [pc, #536]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	4a85      	ldr	r2, [pc, #532]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003be4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003be8:	6113      	str	r3, [r2, #16]
 8003bea:	4b83      	ldr	r3, [pc, #524]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bec:	6919      	ldr	r1, [r3, #16]
 8003bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bf2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003bf6:	4a80      	ldr	r2, [pc, #512]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c0e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003c12:	460b      	mov	r3, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c18:	4b77      	ldr	r3, [pc, #476]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	4a74      	ldr	r2, [pc, #464]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003c38:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003c42:	460b      	mov	r3, r1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c48:	4b6b      	ldr	r3, [pc, #428]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003c50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	4a67      	ldr	r2, [pc, #412]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	2100      	movs	r1, #0
 8003c68:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c74:	460b      	mov	r3, r1
 8003c76:	4313      	orrs	r3, r2
 8003c78:	d011      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fa4a 	bl	800511c <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003c8e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c96:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c9a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	6239      	str	r1, [r7, #32]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	d011      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fa2a 	bl	800511c <RCCEx_PLL2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003cce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cda:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	61b9      	str	r1, [r7, #24]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	d011      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cfe:	3308      	adds	r3, #8
 8003d00:	2102      	movs	r1, #2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 fa0a 	bl	800511c <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003d0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d1a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	2100      	movs	r1, #0
 8003d28:	6139      	str	r1, [r7, #16]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d34:	460b      	mov	r3, r1
 8003d36:	4313      	orrs	r3, r2
 8003d38:	d011      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d3e:	3328      	adds	r3, #40	; 0x28
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fa9c 	bl	8005280 <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8003d4e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d56:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d5a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	2100      	movs	r1, #0
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d74:	460b      	mov	r3, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	d011      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d7e:	3328      	adds	r3, #40	; 0x28
 8003d80:	2101      	movs	r1, #1
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 fa7c 	bl	8005280 <RCCEx_PLL3_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003d8e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d96:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d9a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	2100      	movs	r1, #0
 8003da8:	6039      	str	r1, [r7, #0]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	607b      	str	r3, [r7, #4]
 8003db0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003db4:	460b      	mov	r3, r1
 8003db6:	4313      	orrs	r3, r2
 8003db8:	d011      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dbe:	3328      	adds	r3, #40	; 0x28
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 fa5c 	bl	8005280 <RCCEx_PLL3_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003dce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dda:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8003dde:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003df2:	46bd      	mov	sp, r7
 8003df4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df8:	58024400 	.word	0x58024400

08003dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b090      	sub	sp, #64	; 0x40
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e0a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	f040 8094 	bne.w	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8003e14:	4b9e      	ldr	r3, [pc, #632]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	f200 8087 	bhi.w	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e41 	.word	0x08003e41
 8003e30:	08003e69 	.word	0x08003e69
 8003e34:	08003e91 	.word	0x08003e91
 8003e38:	08003f2d 	.word	0x08003f2d
 8003e3c:	08003eb9 	.word	0x08003eb9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e40:	4b93      	ldr	r3, [pc, #588]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e4c:	d108      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f810 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e5c:	f000 bd45 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e64:	f000 bd41 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e68:	4b89      	ldr	r3, [pc, #548]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e74:	d108      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e76:	f107 0318 	add.w	r3, r7, #24
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fd54 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e84:	f000 bd31 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e8c:	f000 bd2d 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003e90:	4b7f      	ldr	r3, [pc, #508]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9c:	d108      	bne.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e9e:	f107 030c 	add.w	r3, r7, #12
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fe94 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003eac:	f000 bd1d 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003eb4:	f000 bd19 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003eb8:	4b75      	ldr	r3, [pc, #468]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003ec2:	4b73      	ldr	r3, [pc, #460]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ed4:	4b6e      	ldr	r3, [pc, #440]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	08db      	lsrs	r3, r3, #3
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	4a6d      	ldr	r2, [pc, #436]	; (8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee6:	e01f      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003ee8:	4b69      	ldr	r3, [pc, #420]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef4:	d106      	bne.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efc:	d102      	bne.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003efe:	4b66      	ldr	r3, [pc, #408]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f02:	e011      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f04:	4b62      	ldr	r3, [pc, #392]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f10:	d106      	bne.n	8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f18:	d102      	bne.n	8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003f1a:	4b60      	ldr	r3, [pc, #384]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f1e:	e003      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003f24:	f000 bce1 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003f28:	f000 bcdf 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003f2c:	4b5c      	ldr	r3, [pc, #368]	; (80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003f30:	f000 bcdb 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003f38:	f000 bcd7 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f40:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8003f44:	430b      	orrs	r3, r1
 8003f46:	f040 80ad 	bne.w	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8003f4a:	4b51      	ldr	r3, [pc, #324]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5a:	d056      	beq.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f62:	f200 8090 	bhi.w	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	2bc0      	cmp	r3, #192	; 0xc0
 8003f6a:	f000 8088 	beq.w	800407e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	2bc0      	cmp	r3, #192	; 0xc0
 8003f72:	f200 8088 	bhi.w	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	2b80      	cmp	r3, #128	; 0x80
 8003f7a:	d032      	beq.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	2b80      	cmp	r3, #128	; 0x80
 8003f80:	f200 8081 	bhi.w	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d014      	beq.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8003f90:	e079      	b.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f9e:	d108      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 ff67 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003fae:	f000 bc9c 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003fb6:	f000 bc98 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003fba:	4b35      	ldr	r3, [pc, #212]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc6:	d108      	bne.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fc8:	f107 0318 	add.w	r3, r7, #24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fcab 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003fd6:	f000 bc88 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003fde:	f000 bc84 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fee:	d108      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ff0:	f107 030c 	add.w	r3, r7, #12
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fdeb 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003ffe:	f000 bc74 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004006:	f000 bc70 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004012:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004014:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d10c      	bne.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004026:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	08db      	lsrs	r3, r3, #3
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004038:	e01f      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	d106      	bne.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404e:	d102      	bne.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004054:	e011      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004062:	d106      	bne.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800406a:	d102      	bne.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004070:	e003      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004076:	f000 bc38 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800407a:	f000 bc36 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800407e:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004082:	f000 bc32 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800408a:	f000 bc2e 	b.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800408e:	bf00      	nop
 8004090:	58024400 	.word	0x58024400
 8004094:	03d09000 	.word	0x03d09000
 8004098:	003d0900 	.word	0x003d0900
 800409c:	017d7840 	.word	0x017d7840
 80040a0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80040a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040a8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80040ac:	430b      	orrs	r3, r1
 80040ae:	f040 809c 	bne.w	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80040b2:	4b9e      	ldr	r3, [pc, #632]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c2:	d054      	beq.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ca:	f200 808b 	bhi.w	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040d4:	f000 8083 	beq.w	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040de:	f200 8081 	bhi.w	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e8:	d02f      	beq.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f0:	d878      	bhi.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d004      	beq.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040fe:	d012      	beq.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004100:	e070      	b.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004102:	4b8a      	ldr	r3, [pc, #552]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800410e:	d107      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004114:	4618      	mov	r0, r3
 8004116:	f000 feaf 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800411e:	e3e4      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004124:	e3e1      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004126:	4b81      	ldr	r3, [pc, #516]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800412e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004132:	d107      	bne.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004134:	f107 0318 	add.w	r3, r7, #24
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fbf5 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004142:	e3d2      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004148:	e3cf      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800414a:	4b78      	ldr	r3, [pc, #480]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004156:	d107      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004158:	f107 030c 	add.w	r3, r7, #12
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fd37 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004166:	e3c0      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800416c:	e3bd      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800416e:	4b6f      	ldr	r3, [pc, #444]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004176:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004178:	4b6c      	ldr	r3, [pc, #432]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b04      	cmp	r3, #4
 8004182:	d10c      	bne.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800418a:	4b68      	ldr	r3, [pc, #416]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	08db      	lsrs	r3, r3, #3
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	4a66      	ldr	r2, [pc, #408]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004196:	fa22 f303 	lsr.w	r3, r2, r3
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800419c:	e01e      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800419e:	4b63      	ldr	r3, [pc, #396]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041aa:	d106      	bne.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b2:	d102      	bne.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80041b4:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80041b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b8:	e010      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80041ba:	4b5c      	ldr	r3, [pc, #368]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c6:	d106      	bne.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80041c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ce:	d102      	bne.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80041d0:	4b59      	ldr	r3, [pc, #356]	; (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80041da:	e386      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80041dc:	e385      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80041de:	4b57      	ldr	r3, [pc, #348]	; (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041e2:	e382      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041e8:	e37f      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80041ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ee:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80041f2:	430b      	orrs	r3, r1
 80041f4:	f040 80a7 	bne.w	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80041f8:	4b4c      	ldr	r3, [pc, #304]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004200:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004208:	d055      	beq.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004210:	f200 8096 	bhi.w	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800421a:	f000 8084 	beq.w	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004224:	f200 808c 	bhi.w	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800422e:	d030      	beq.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004236:	f200 8083 	bhi.w	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	2b00      	cmp	r3, #0
 800423e:	d004      	beq.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004246:	d012      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004248:	e07a      	b.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800424a:	4b38      	ldr	r3, [pc, #224]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004256:	d107      	bne.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fe0b 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004266:	e340      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800426c:	e33d      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800426e:	4b2f      	ldr	r3, [pc, #188]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427a:	d107      	bne.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800427c:	f107 0318 	add.w	r3, r7, #24
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fb51 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800428a:	e32e      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004290:	e32b      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800429a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800429e:	d107      	bne.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042a0:	f107 030c 	add.w	r3, r7, #12
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fc93 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042ae:	e31c      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042b4:	e319      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	08db      	lsrs	r3, r3, #3
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	4a14      	ldr	r2, [pc, #80]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e4:	e01e      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f2:	d106      	bne.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80042f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fa:	d102      	bne.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004300:	e010      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430e:	d106      	bne.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004316:	d102      	bne.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800431a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004322:	e2e2      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004324:	e2e1      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800432a:	e2de      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800432c:	58024400 	.word	0x58024400
 8004330:	03d09000 	.word	0x03d09000
 8004334:	003d0900 	.word	0x003d0900
 8004338:	017d7840 	.word	0x017d7840
 800433c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004344:	e2d1      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800434a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800434e:	430b      	orrs	r3, r1
 8004350:	f040 809c 	bne.w	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004354:	4b93      	ldr	r3, [pc, #588]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004364:	d054      	beq.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800436c:	f200 808b 	bhi.w	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004376:	f000 8083 	beq.w	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004380:	f200 8081 	bhi.w	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438a:	d02f      	beq.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004392:	d878      	bhi.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a0:	d012      	beq.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80043a2:	e070      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80043a4:	4b7f      	ldr	r3, [pc, #508]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043b0:	d107      	bne.n	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fd5e 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80043c0:	e293      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043c6:	e290      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043c8:	4b76      	ldr	r3, [pc, #472]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d4:	d107      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043d6:	f107 0318 	add.w	r3, r7, #24
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 faa4 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80043e4:	e281      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043ea:	e27e      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80043ec:	4b6d      	ldr	r3, [pc, #436]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f8:	d107      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043fa:	f107 030c 	add.w	r3, r7, #12
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fbe6 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004408:	e26f      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800440e:	e26c      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004410:	4b64      	ldr	r3, [pc, #400]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004414:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004418:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800441a:	4b62      	ldr	r3, [pc, #392]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b04      	cmp	r3, #4
 8004424:	d10c      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d109      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800442c:	4b5d      	ldr	r3, [pc, #372]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	08db      	lsrs	r3, r3, #3
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	4a5c      	ldr	r2, [pc, #368]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443e:	e01e      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004440:	4b58      	ldr	r3, [pc, #352]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444c:	d106      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004454:	d102      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004456:	4b55      	ldr	r3, [pc, #340]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445a:	e010      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800445c:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004468:	d106      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004470:	d102      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004472:	4b4f      	ldr	r3, [pc, #316]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004476:	e002      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800447c:	e235      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800447e:	e234      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004480:	4b4c      	ldr	r3, [pc, #304]	; (80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004484:	e231      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800448a:	e22e      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800448c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004490:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004494:	430b      	orrs	r3, r1
 8004496:	f040 808f 	bne.w	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800449a:	4b42      	ldr	r3, [pc, #264]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800449c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80044a2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044aa:	d06b      	beq.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b2:	d874      	bhi.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ba:	d056      	beq.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044c2:	d86c      	bhi.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044ca:	d03b      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044d2:	d864      	bhi.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044da:	d021      	beq.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e2:	d85c      	bhi.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d004      	beq.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f0:	d004      	beq.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80044f2:	e054      	b.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80044f4:	f7fe fa0c 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 80044f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044fa:	e1f6      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044fc:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004508:	d107      	bne.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800450a:	f107 0318 	add.w	r3, r7, #24
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fa0a 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004518:	e1e7      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800451e:	e1e4      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800452c:	d107      	bne.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800452e:	f107 030c 	add.w	r3, r7, #12
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fb4c 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800453c:	e1d5      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004542:	e1d2      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004544:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d109      	bne.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	08db      	lsrs	r3, r3, #3
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004562:	e1c2      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004568:	e1bf      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800456a:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004576:	d102      	bne.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800457c:	e1b5      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004582:	e1b2      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004590:	d102      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8004592:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004596:	e1a8      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800459c:	e1a5      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045a2:	e1a2      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80045a4:	58024400 	.word	0x58024400
 80045a8:	03d09000 	.word	0x03d09000
 80045ac:	003d0900 	.word	0x003d0900
 80045b0:	017d7840 	.word	0x017d7840
 80045b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80045b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045bc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80045c0:	430b      	orrs	r3, r1
 80045c2:	d173      	bne.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80045c4:	4b9c      	ldr	r3, [pc, #624]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045d4:	d02f      	beq.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045dc:	d863      	bhi.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ea:	d012      	beq.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80045ec:	e05b      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80045ee:	4b92      	ldr	r3, [pc, #584]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045fa:	d107      	bne.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045fc:	f107 0318 	add.w	r3, r7, #24
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f991 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800460a:	e16e      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004610:	e16b      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004612:	4b89      	ldr	r3, [pc, #548]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800461a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461e:	d107      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004620:	f107 030c 	add.w	r3, r7, #12
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fad3 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800462e:	e15c      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004634:	e159      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004636:	4b80      	ldr	r3, [pc, #512]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800463e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004640:	4b7d      	ldr	r3, [pc, #500]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d10c      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004652:	4b79      	ldr	r3, [pc, #484]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	08db      	lsrs	r3, r3, #3
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	4a77      	ldr	r2, [pc, #476]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800465e:	fa22 f303 	lsr.w	r3, r2, r3
 8004662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004664:	e01e      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004666:	4b74      	ldr	r3, [pc, #464]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004672:	d106      	bne.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800467a:	d102      	bne.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800467c:	4b70      	ldr	r3, [pc, #448]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004680:	e010      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004682:	4b6d      	ldr	r3, [pc, #436]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800468e:	d106      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004696:	d102      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004698:	4b6a      	ldr	r3, [pc, #424]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469c:	e002      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80046a2:	e122      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80046a4:	e121      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046aa:	e11e      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80046ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80046b4:	430b      	orrs	r3, r1
 80046b6:	d133      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80046b8:	4b5f      	ldr	r3, [pc, #380]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ce:	d012      	beq.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80046d0:	e023      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80046d2:	4b59      	ldr	r3, [pc, #356]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046de:	d107      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fbc7 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046ee:	e0fc      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046f4:	e0f9      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046f6:	4b50      	ldr	r3, [pc, #320]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004702:	d107      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004704:	f107 0318 	add.w	r3, r7, #24
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f90d 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004712:	e0ea      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004718:	e0e7      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800471e:	e0e4      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004724:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004728:	430b      	orrs	r3, r1
 800472a:	f040 808d 	bne.w	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800472e:	4b42      	ldr	r3, [pc, #264]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004736:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800473e:	d06b      	beq.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004746:	d874      	bhi.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d056      	beq.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004756:	d86c      	bhi.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800475e:	d03b      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004766:	d864      	bhi.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800476e:	d021      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004776:	d85c      	bhi.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004784:	d004      	beq.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8004786:	e054      	b.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004788:	f000 f8b8 	bl	80048fc <HAL_RCCEx_GetD3PCLK1Freq>
 800478c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800478e:	e0ac      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004790:	4b29      	ldr	r3, [pc, #164]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800479c:	d107      	bne.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800479e:	f107 0318 	add.w	r3, r7, #24
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f8c0 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047ac:	e09d      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047b2:	e09a      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c0:	d107      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047c2:	f107 030c 	add.w	r3, r7, #12
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fa02 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047d0:	e08b      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047d6:	e088      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047d8:	4b17      	ldr	r3, [pc, #92]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d109      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047e4:	4b14      	ldr	r3, [pc, #80]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	08db      	lsrs	r3, r3, #3
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	4a13      	ldr	r2, [pc, #76]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047f6:	e078      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047fc:	e075      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80047fe:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480a:	d102      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004810:	e06b      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004816:	e068      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004818:	4b07      	ldr	r3, [pc, #28]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004824:	d102      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004828:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800482a:	e05e      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004830:	e05b      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004836:	e058      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004838:	58024400 	.word	0x58024400
 800483c:	03d09000 	.word	0x03d09000
 8004840:	003d0900 	.word	0x003d0900
 8004844:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800484c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004850:	430b      	orrs	r3, r1
 8004852:	d148      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004854:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004864:	d02a      	beq.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800486c:	d838      	bhi.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800487a:	d00d      	beq.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800487c:	e030      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800487e:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800488a:	d102      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004890:	e02b      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004896:	e028      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004898:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a4:	d107      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fae4 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048b4:	e019      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048ba:	e016      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c8:	d107      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048ca:	f107 0318 	add.w	r3, r7, #24
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f82a 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048d8:	e007      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048de:	e004      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048e4:	e001      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80048ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3740      	adds	r7, #64	; 0x40
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	58024400 	.word	0x58024400
 80048f8:	017d7840 	.word	0x017d7840

080048fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004900:	f7fd ffd6 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 8004904:	4602      	mov	r2, r0
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	091b      	lsrs	r3, r3, #4
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	4904      	ldr	r1, [pc, #16]	; (8004924 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004912:	5ccb      	ldrb	r3, [r1, r3]
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	58024400 	.word	0x58024400
 8004924:	0800beb8 	.word	0x0800beb8

08004928 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	; 0x24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004930:	4ba1      	ldr	r3, [pc, #644]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800493a:	4b9f      	ldr	r3, [pc, #636]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	0b1b      	lsrs	r3, r3, #12
 8004940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004944:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004946:	4b9c      	ldr	r3, [pc, #624]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004952:	4b99      	ldr	r3, [pc, #612]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	08db      	lsrs	r3, r3, #3
 8004958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8111 	beq.w	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b02      	cmp	r3, #2
 800497a:	f000 8083 	beq.w	8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b02      	cmp	r3, #2
 8004982:	f200 80a1 	bhi.w	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d056      	beq.n	8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004992:	e099      	b.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004994:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d02d      	beq.n	80049fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049a0:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	08db      	lsrs	r3, r3, #3
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	4a84      	ldr	r2, [pc, #528]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ca:	4b7b      	ldr	r3, [pc, #492]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049da:	ed97 6a03 	vldr	s12, [r7, #12]
 80049de:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049fa:	e087      	b.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0e:	4b6a      	ldr	r3, [pc, #424]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a3e:	e065      	b.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b59      	ldr	r3, [pc, #356]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a82:	e043      	b.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b48      	ldr	r3, [pc, #288]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac6:	e021      	b.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ada:	4b37      	ldr	r3, [pc, #220]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b0c:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	0a5b      	lsrs	r3, r3, #9
 8004b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b32:	ee17 2a90 	vmov	r2, s15
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b3a:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b44:	ee07 3a90 	vmov	s15, r3
 8004b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b60:	ee17 2a90 	vmov	r2, s15
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	0e1b      	lsrs	r3, r3, #24
 8004b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8e:	ee17 2a90 	vmov	r2, s15
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b96:	e008      	b.n	8004baa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	609a      	str	r2, [r3, #8]
}
 8004baa:	bf00      	nop
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	58024400 	.word	0x58024400
 8004bbc:	03d09000 	.word	0x03d09000
 8004bc0:	46000000 	.word	0x46000000
 8004bc4:	4c742400 	.word	0x4c742400
 8004bc8:	4a742400 	.word	0x4a742400
 8004bcc:	4bbebc20 	.word	0x4bbebc20

08004bd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bd8:	4ba1      	ldr	r3, [pc, #644]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004be2:	4b9f      	ldr	r3, [pc, #636]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	0d1b      	lsrs	r3, r3, #20
 8004be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bee:	4b9c      	ldr	r3, [pc, #624]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bfa:	4b99      	ldr	r3, [pc, #612]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	08db      	lsrs	r3, r3, #3
 8004c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8111 	beq.w	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	f000 8083 	beq.w	8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	f200 80a1 	bhi.w	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d056      	beq.n	8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c3a:	e099      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c3c:	4b88      	ldr	r3, [pc, #544]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d02d      	beq.n	8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c48:	4b85      	ldr	r3, [pc, #532]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	08db      	lsrs	r3, r3, #3
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	4a84      	ldr	r2, [pc, #528]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
 8004c58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c72:	4b7b      	ldr	r3, [pc, #492]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ca2:	e087      	b.n	8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb6:	4b6a      	ldr	r3, [pc, #424]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ce6:	e065      	b.n	8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfa:	4b59      	ldr	r3, [pc, #356]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d2a:	e043      	b.n	8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3e:	4b48      	ldr	r3, [pc, #288]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d6e:	e021      	b.n	8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d82:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004db4:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	0a5b      	lsrs	r3, r3, #9
 8004dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dda:	ee17 2a90 	vmov	r2, s15
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004de2:	4b1f      	ldr	r3, [pc, #124]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004df8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e08:	ee17 2a90 	vmov	r2, s15
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e10:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	0e1b      	lsrs	r3, r3, #24
 8004e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e36:	ee17 2a90 	vmov	r2, s15
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e3e:	e008      	b.n	8004e52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	609a      	str	r2, [r3, #8]
}
 8004e52:	bf00      	nop
 8004e54:	3724      	adds	r7, #36	; 0x24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	58024400 	.word	0x58024400
 8004e64:	03d09000 	.word	0x03d09000
 8004e68:	46000000 	.word	0x46000000
 8004e6c:	4c742400 	.word	0x4c742400
 8004e70:	4a742400 	.word	0x4a742400
 8004e74:	4bbebc20 	.word	0x4bbebc20

08004e78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e80:	4ba0      	ldr	r3, [pc, #640]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004e8a:	4b9e      	ldr	r3, [pc, #632]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e94:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004e96:	4b9b      	ldr	r3, [pc, #620]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ea0:	4b98      	ldr	r3, [pc, #608]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	08db      	lsrs	r3, r3, #3
 8004ea6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8111 	beq.w	80050e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	f000 8083 	beq.w	8004fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	f200 80a1 	bhi.w	8005016 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d056      	beq.n	8004f8e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004ee0:	e099      	b.n	8005016 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ee2:	4b88      	ldr	r3, [pc, #544]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02d      	beq.n	8004f4a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004eee:	4b85      	ldr	r3, [pc, #532]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	08db      	lsrs	r3, r3, #3
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	4a83      	ldr	r2, [pc, #524]	; (8005108 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004efa:	fa22 f303 	lsr.w	r3, r2, r3
 8004efe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f18:	4b7a      	ldr	r3, [pc, #488]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f28:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f2c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800510c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f44:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f48:	e087      	b.n	800505a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	ee07 3a90 	vmov	s15, r3
 8004f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f54:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005110 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5c:	4b69      	ldr	r3, [pc, #420]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f70:	eddf 5a66 	vldr	s11, [pc, #408]	; 800510c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f8c:	e065      	b.n	800505a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f98:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005114 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa0:	4b58      	ldr	r3, [pc, #352]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa8:	ee07 3a90 	vmov	s15, r3
 8004fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fb4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800510c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fd0:	e043      	b.n	800505a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fdc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005118 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe4:	4b47      	ldr	r3, [pc, #284]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ff8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800510c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800500c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005014:	e021      	b.n	800505a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005020:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005110 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005028:	4b36      	ldr	r3, [pc, #216]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005038:	ed97 6a03 	vldr	s12, [r7, #12]
 800503c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800510c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800504c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005058:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800505a:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	0a5b      	lsrs	r3, r3, #9
 8005060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005074:	edd7 6a07 	vldr	s13, [r7, #28]
 8005078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800507c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005080:	ee17 2a90 	vmov	r2, s15
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005088:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800509e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ae:	ee17 2a90 	vmov	r2, s15
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	0e1b      	lsrs	r3, r3, #24
 80050bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050dc:	ee17 2a90 	vmov	r2, s15
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80050e4:	e008      	b.n	80050f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	bf00      	nop
 80050fa:	3724      	adds	r7, #36	; 0x24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	58024400 	.word	0x58024400
 8005108:	03d09000 	.word	0x03d09000
 800510c:	46000000 	.word	0x46000000
 8005110:	4c742400 	.word	0x4c742400
 8005114:	4a742400 	.word	0x4a742400
 8005118:	4bbebc20 	.word	0x4bbebc20

0800511c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800512a:	4b53      	ldr	r3, [pc, #332]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b03      	cmp	r3, #3
 8005134:	d101      	bne.n	800513a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e099      	b.n	800526e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800513a:	4b4f      	ldr	r3, [pc, #316]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a4e      	ldr	r2, [pc, #312]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005146:	f7fc f835 	bl	80011b4 <HAL_GetTick>
 800514a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800514c:	e008      	b.n	8005160 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800514e:	f7fc f831 	bl	80011b4 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e086      	b.n	800526e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005160:	4b45      	ldr	r3, [pc, #276]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f0      	bne.n	800514e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800516c:	4b42      	ldr	r3, [pc, #264]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	031b      	lsls	r3, r3, #12
 800517a:	493f      	ldr	r1, [pc, #252]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 800517c:	4313      	orrs	r3, r2
 800517e:	628b      	str	r3, [r1, #40]	; 0x28
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	3b01      	subs	r3, #1
 8005186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	3b01      	subs	r3, #1
 8005190:	025b      	lsls	r3, r3, #9
 8005192:	b29b      	uxth	r3, r3
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	061b      	lsls	r3, r3, #24
 80051ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051b0:	4931      	ldr	r1, [pc, #196]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051b6:	4b30      	ldr	r3, [pc, #192]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	492d      	ldr	r1, [pc, #180]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	f023 0220 	bic.w	r2, r3, #32
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	4928      	ldr	r1, [pc, #160]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051da:	4b27      	ldr	r3, [pc, #156]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	4a26      	ldr	r2, [pc, #152]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051e0:	f023 0310 	bic.w	r3, r3, #16
 80051e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051e6:	4b24      	ldr	r3, [pc, #144]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ea:	4b24      	ldr	r3, [pc, #144]	; (800527c <RCCEx_PLL2_Config+0x160>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	69d2      	ldr	r2, [r2, #28]
 80051f2:	00d2      	lsls	r2, r2, #3
 80051f4:	4920      	ldr	r1, [pc, #128]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051fa:	4b1f      	ldr	r3, [pc, #124]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005200:	f043 0310 	orr.w	r3, r3, #16
 8005204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800520c:	4b1a      	ldr	r3, [pc, #104]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4a19      	ldr	r2, [pc, #100]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005218:	e00f      	b.n	800523a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d106      	bne.n	800522e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005220:	4b15      	ldr	r3, [pc, #84]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800522a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800522c:	e005      	b.n	800523a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	4a11      	ldr	r2, [pc, #68]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005238:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a0e      	ldr	r2, [pc, #56]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005246:	f7fb ffb5 	bl	80011b4 <HAL_GetTick>
 800524a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800524c:	e008      	b.n	8005260 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800524e:	f7fb ffb1 	bl	80011b4 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e006      	b.n	800526e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <RCCEx_PLL2_Config+0x15c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	58024400 	.word	0x58024400
 800527c:	ffff0007 	.word	0xffff0007

08005280 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800528e:	4b53      	ldr	r3, [pc, #332]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	2b03      	cmp	r3, #3
 8005298:	d101      	bne.n	800529e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e099      	b.n	80053d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800529e:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a4e      	ldr	r2, [pc, #312]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 80052a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052aa:	f7fb ff83 	bl	80011b4 <HAL_GetTick>
 80052ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052b0:	e008      	b.n	80052c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052b2:	f7fb ff7f 	bl	80011b4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e086      	b.n	80053d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052c4:	4b45      	ldr	r3, [pc, #276]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f0      	bne.n	80052b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052d0:	4b42      	ldr	r3, [pc, #264]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	051b      	lsls	r3, r3, #20
 80052de:	493f      	ldr	r1, [pc, #252]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	628b      	str	r3, [r1, #40]	; 0x28
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	025b      	lsls	r3, r3, #9
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	3b01      	subs	r3, #1
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	3b01      	subs	r3, #1
 800530e:	061b      	lsls	r3, r3, #24
 8005310:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005314:	4931      	ldr	r1, [pc, #196]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800531a:	4b30      	ldr	r3, [pc, #192]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	492d      	ldr	r1, [pc, #180]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800532c:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	4928      	ldr	r1, [pc, #160]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 800533a:	4313      	orrs	r3, r2
 800533c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800533e:	4b27      	ldr	r3, [pc, #156]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	4a26      	ldr	r2, [pc, #152]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800534a:	4b24      	ldr	r3, [pc, #144]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 800534c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <RCCEx_PLL3_Config+0x160>)
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	69d2      	ldr	r2, [r2, #28]
 8005356:	00d2      	lsls	r2, r2, #3
 8005358:	4920      	ldr	r1, [pc, #128]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 800535a:	4313      	orrs	r3, r2
 800535c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800535e:	4b1f      	ldr	r3, [pc, #124]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	4a1e      	ldr	r2, [pc, #120]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005368:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005370:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	4a19      	ldr	r2, [pc, #100]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005376:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800537a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800537c:	e00f      	b.n	800539e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d106      	bne.n	8005392 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005384:	4b15      	ldr	r3, [pc, #84]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	4a14      	ldr	r2, [pc, #80]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 800538a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800538e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005390:	e005      	b.n	800539e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005392:	4b12      	ldr	r3, [pc, #72]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	4a11      	ldr	r2, [pc, #68]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 8005398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800539c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a0e      	ldr	r2, [pc, #56]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 80053a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053aa:	f7fb ff03 	bl	80011b4 <HAL_GetTick>
 80053ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053b0:	e008      	b.n	80053c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053b2:	f7fb feff 	bl	80011b4 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e006      	b.n	80053d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <RCCEx_PLL3_Config+0x15c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f0      	beq.n	80053b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	58024400 	.word	0x58024400
 80053e0:	ffff0007 	.word	0xffff0007

080053e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e075      	b.n	80054e2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d105      	bne.n	800540e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fb fccb 	bl	8000da4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2204      	movs	r2, #4
 8005412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f868 	bl	80054ec <HAL_SD_InitCard>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e05d      	b.n	80054e2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005426:	f107 0308 	add.w	r3, r7, #8
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fdb5 	bl	8005f9c <HAL_SD_GetCardStatus>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e052      	b.n	80054e2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800543c:	7e3b      	ldrb	r3, [r7, #24]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005442:	7e7b      	ldrb	r3, [r7, #25]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10a      	bne.n	8005466 <HAL_SD_Init+0x82>
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <HAL_SD_Init+0x78>
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005462:	659a      	str	r2, [r3, #88]	; 0x58
 8005464:	e00b      	b.n	800547e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	2b01      	cmp	r3, #1
 800546c:	d104      	bne.n	8005478 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005474:	659a      	str	r2, [r3, #88]	; 0x58
 8005476:	e002      	b.n	800547e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4619      	mov	r1, r3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fe73 	bl	8006170 <HAL_SD_ConfigWideBusOperation>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e026      	b.n	80054e2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005494:	f7fb fe8e 	bl	80011b4 <HAL_GetTick>
 8005498:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800549a:	e011      	b.n	80054c0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800549c:	f7fb fe8a 	bl	80011b4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d109      	bne.n	80054c0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054b2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e010      	b.n	80054e2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 ff67 	bl	8006394 <HAL_SD_GetCardState>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d1e7      	bne.n	800549c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3728      	adds	r7, #40	; 0x28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b08d      	sub	sp, #52	; 0x34
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005504:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	f7fe fc76 	bl	8003dfc <HAL_RCCEx_GetPeriphCLKFreq>
 8005510:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d109      	bne.n	800552c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005526:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e070      	b.n	800560e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	4a39      	ldr	r2, [pc, #228]	; (8005618 <HAL_SD_InitCard+0x12c>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681c      	ldr	r4, [r3, #0]
 800553e:	466a      	mov	r2, sp
 8005540:	f107 0318 	add.w	r3, r7, #24
 8005544:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005548:	e882 0003 	stmia.w	r2, {r0, r1}
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005552:	4620      	mov	r0, r4
 8005554:	f002 fc5c 	bl	8007e10 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f002 fc9f 	bl	8007ea0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800557a:	4a28      	ldr	r2, [pc, #160]	; (800561c <HAL_SD_InitCard+0x130>)
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005582:	3301      	adds	r3, #1
 8005584:	4618      	mov	r0, r3
 8005586:	f7fb fe21 	bl	80011cc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fff0 	bl	8006570 <SD_PowerON>
 8005590:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e02e      	b.n	800560e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 ff0f 	bl	80063d4 <SD_InitCard>
 80055b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e01b      	b.n	800560e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055de:	4618      	mov	r0, r3
 80055e0:	f002 fcf4 	bl	8007fcc <SDMMC_CmdBlockLength>
 80055e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00f      	beq.n	800560c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <HAL_SD_InitCard+0x134>)
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	372c      	adds	r7, #44	; 0x2c
 8005612:	46bd      	mov	sp, r7
 8005614:	bd90      	pop	{r4, r7, pc}
 8005616:	bf00      	nop
 8005618:	014f8b59 	.word	0x014f8b59
 800561c:	00012110 	.word	0x00012110
 8005620:	1fe00fff 	.word	0x1fe00fff

08005624 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b092      	sub	sp, #72	; 0x48
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005632:	f7fb fdbf 	bl	80011b4 <HAL_GetTick>
 8005636:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e167      	b.n	8005926 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	f040 815a 	bne.w	8005918 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800566a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	441a      	add	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005674:	429a      	cmp	r2, r3
 8005676:	d907      	bls.n	8005688 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e14e      	b.n	8005926 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2203      	movs	r2, #3
 800568c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2200      	movs	r2, #0
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	2b01      	cmp	r3, #1
 800569e:	d002      	beq.n	80056a6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	025b      	lsls	r3, r3, #9
 80056a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295
 80056aa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	025b      	lsls	r3, r3, #9
 80056b0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80056b2:	2390      	movs	r3, #144	; 0x90
 80056b4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80056b6:	2302      	movs	r3, #2
 80056b8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80056be:	2300      	movs	r3, #0
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f107 0214 	add.w	r2, r7, #20
 80056ca:	4611      	mov	r1, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f002 fc51 	bl	8007f74 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d90a      	bls.n	80056fe <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2202      	movs	r2, #2
 80056ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056f4:	4618      	mov	r0, r3
 80056f6:	f002 fcaf 	bl	8008058 <SDMMC_CmdReadMultiBlock>
 80056fa:	6478      	str	r0, [r7, #68]	; 0x44
 80056fc:	e009      	b.n	8005712 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800570a:	4618      	mov	r0, r3
 800570c:	f002 fc81 	bl	8008012 <SDMMC_CmdReadSingleBlock>
 8005710:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005714:	2b00      	cmp	r3, #0
 8005716:	d012      	beq.n	800573e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a84      	ldr	r2, [pc, #528]	; (8005930 <HAL_SD_ReadBlocks+0x30c>)
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005726:	431a      	orrs	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e0f3      	b.n	8005926 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005742:	e058      	b.n	80057f6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d033      	beq.n	80057ba <HAL_SD_ReadBlocks+0x196>
 8005752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005754:	2b1f      	cmp	r3, #31
 8005756:	d930      	bls.n	80057ba <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005758:	2300      	movs	r3, #0
 800575a:	643b      	str	r3, [r7, #64]	; 0x40
 800575c:	e027      	b.n	80057ae <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f002 fb7e 	bl	8007e64 <SDMMC_ReadFIFO>
 8005768:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	b2da      	uxtb	r2, r3
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005774:	3301      	adds	r3, #1
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	b2da      	uxtb	r2, r3
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	3301      	adds	r3, #1
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	0c1b      	lsrs	r3, r3, #16
 800578c:	b2da      	uxtb	r2, r3
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	3301      	adds	r3, #1
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	0e1b      	lsrs	r3, r3, #24
 800579c:	b2da      	uxtb	r2, r3
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	3301      	adds	r3, #1
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 80057a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057aa:	3301      	adds	r3, #1
 80057ac:	643b      	str	r3, [r7, #64]	; 0x40
 80057ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b0:	2b07      	cmp	r3, #7
 80057b2:	d9d4      	bls.n	800575e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80057b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b6:	3b20      	subs	r3, #32
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80057ba:	f7fb fcfb 	bl	80011b4 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d902      	bls.n	80057d0 <HAL_SD_ReadBlocks+0x1ac>
 80057ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d112      	bne.n	80057f6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a56      	ldr	r2, [pc, #344]	; (8005930 <HAL_SD_ReadBlocks+0x30c>)
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e097      	b.n	8005926 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005800:	2b00      	cmp	r3, #0
 8005802:	d09f      	beq.n	8005744 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005812:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	2b00      	cmp	r3, #0
 8005820:	d022      	beq.n	8005868 <HAL_SD_ReadBlocks+0x244>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d91f      	bls.n	8005868 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	2b03      	cmp	r3, #3
 800582e:	d01b      	beq.n	8005868 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f002 fc79 	bl	800812c <SDMMC_CmdStopTransfer>
 800583a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800583c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800583e:	2b00      	cmp	r3, #0
 8005840:	d012      	beq.n	8005868 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3a      	ldr	r2, [pc, #232]	; (8005930 <HAL_SD_ReadBlocks+0x30c>)
 8005848:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e05e      	b.n	8005926 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d012      	beq.n	800589c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2d      	ldr	r2, [pc, #180]	; (8005930 <HAL_SD_ReadBlocks+0x30c>)
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005882:	f043 0208 	orr.w	r2, r3, #8
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e044      	b.n	8005926 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d012      	beq.n	80058d0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a20      	ldr	r2, [pc, #128]	; (8005930 <HAL_SD_ReadBlocks+0x30c>)
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	f043 0202 	orr.w	r2, r3, #2
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e02a      	b.n	8005926 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d012      	beq.n	8005904 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a13      	ldr	r2, [pc, #76]	; (8005930 <HAL_SD_ReadBlocks+0x30c>)
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ea:	f043 0220 	orr.w	r2, r3, #32
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e010      	b.n	8005926 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <HAL_SD_ReadBlocks+0x310>)
 800590a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	e006      	b.n	8005926 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3748      	adds	r7, #72	; 0x48
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	1fe00fff 	.word	0x1fe00fff
 8005934:	18000f3a 	.word	0x18000f3a

08005938 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b092      	sub	sp, #72	; 0x48
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005946:	f7fb fc35 	bl	80011b4 <HAL_GetTick>
 800594a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d107      	bne.n	800596a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e16b      	b.n	8005c42 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	f040 815e 	bne.w	8005c34 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800597e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	441a      	add	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005988:	429a      	cmp	r2, r3
 800598a:	d907      	bls.n	800599c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e152      	b.n	8005c42 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2203      	movs	r2, #3
 80059a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2200      	movs	r2, #0
 80059aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d002      	beq.n	80059ba <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	025b      	lsls	r3, r3, #9
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	025b      	lsls	r3, r3, #9
 80059c4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80059c6:	2390      	movs	r3, #144	; 0x90
 80059c8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80059ca:	2300      	movs	r3, #0
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f107 0218 	add.w	r2, r7, #24
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 fac7 	bl	8007f74 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d90a      	bls.n	8005a12 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f002 fb6b 	bl	80080e4 <SDMMC_CmdWriteMultiBlock>
 8005a0e:	6478      	str	r0, [r7, #68]	; 0x44
 8005a10:	e009      	b.n	8005a26 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2210      	movs	r2, #16
 8005a16:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 fb3d 	bl	800809e <SDMMC_CmdWriteSingleBlock>
 8005a24:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a86      	ldr	r2, [pc, #536]	; (8005c4c <HAL_SD_WriteBlocks+0x314>)
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0f7      	b.n	8005c42 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005a56:	e05c      	b.n	8005b12 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d037      	beq.n	8005ad6 <HAL_SD_WriteBlocks+0x19e>
 8005a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a68:	2b1f      	cmp	r3, #31
 8005a6a:	d934      	bls.n	8005ad6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a70:	e02b      	b.n	8005aca <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8005a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	021a      	lsls	r2, r3, #8
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	041a      	lsls	r2, r3, #16
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	061a      	lsls	r2, r3, #24
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f107 0214 	add.w	r2, r7, #20
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f002 f9dd 	bl	8007e7e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8005ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8005aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005acc:	2b07      	cmp	r3, #7
 8005ace:	d9d0      	bls.n	8005a72 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad2:	3b20      	subs	r3, #32
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005ad6:	f7fb fb6d 	bl	80011b4 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d902      	bls.n	8005aec <HAL_SD_WriteBlocks+0x1b4>
 8005ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d112      	bne.n	8005b12 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a56      	ldr	r2, [pc, #344]	; (8005c4c <HAL_SD_WriteBlocks+0x314>)
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afa:	431a      	orrs	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e097      	b.n	8005c42 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b18:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d09b      	beq.n	8005a58 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d022      	beq.n	8005b84 <HAL_SD_WriteBlocks+0x24c>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d91f      	bls.n	8005b84 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d01b      	beq.n	8005b84 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f002 faeb 	bl	800812c <SDMMC_CmdStopTransfer>
 8005b56:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d012      	beq.n	8005b84 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a3a      	ldr	r2, [pc, #232]	; (8005c4c <HAL_SD_WriteBlocks+0x314>)
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e05e      	b.n	8005c42 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d012      	beq.n	8005bb8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a2d      	ldr	r2, [pc, #180]	; (8005c4c <HAL_SD_WriteBlocks+0x314>)
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9e:	f043 0208 	orr.w	r2, r3, #8
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e044      	b.n	8005c42 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d012      	beq.n	8005bec <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a20      	ldr	r2, [pc, #128]	; (8005c4c <HAL_SD_WriteBlocks+0x314>)
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd2:	f043 0202 	orr.w	r2, r3, #2
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e02a      	b.n	8005c42 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d012      	beq.n	8005c20 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <HAL_SD_WriteBlocks+0x314>)
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c06:	f043 0210 	orr.w	r2, r3, #16
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e010      	b.n	8005c42 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <HAL_SD_WriteBlocks+0x318>)
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e006      	b.n	8005c42 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
  }
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3748      	adds	r7, #72	; 0x48
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	1fe00fff 	.word	0x1fe00fff
 8005c50:	18000f3a 	.word	0x18000f3a

08005c54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c62:	0f9b      	lsrs	r3, r3, #30
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6e:	0e9b      	lsrs	r3, r3, #26
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c80:	0e1b      	lsrs	r3, r3, #24
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c92:	0c1b      	lsrs	r3, r3, #16
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb4:	0d1b      	lsrs	r3, r3, #20
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd2:	0bdb      	lsrs	r3, r3, #15
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	0b9b      	lsrs	r3, r3, #14
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf6:	0b5b      	lsrs	r3, r3, #13
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d08:	0b1b      	lsrs	r3, r3, #12
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d163      	bne.n	8005dec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d28:	009a      	lsls	r2, r3, #2
 8005d2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d2e:	4013      	ands	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005d34:	0f92      	lsrs	r2, r2, #30
 8005d36:	431a      	orrs	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d40:	0edb      	lsrs	r3, r3, #27
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d52:	0e1b      	lsrs	r3, r3, #24
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d64:	0d5b      	lsrs	r3, r3, #21
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d76:	0c9b      	lsrs	r3, r3, #18
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d88:	0bdb      	lsrs	r3, r3, #15
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	7e1b      	ldrb	r3, [r3, #24]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	3302      	adds	r3, #2
 8005dac:	2201      	movs	r2, #1
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005db6:	fb03 f202 	mul.w	r2, r3, r2
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	7a1b      	ldrb	r3, [r3, #8]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	2201      	movs	r2, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005dd8:	0a52      	lsrs	r2, r2, #9
 8005dda:	fb03 f202 	mul.w	r2, r3, r2
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54
 8005dea:	e031      	b.n	8005e50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d11d      	bne.n	8005e30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df8:	041b      	lsls	r3, r3, #16
 8005dfa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	431a      	orrs	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	029a      	lsls	r2, r3, #10
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e24:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	655a      	str	r2, [r3, #84]	; 0x54
 8005e2e:	e00f      	b.n	8005e50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a58      	ldr	r2, [pc, #352]	; (8005f98 <HAL_SD_GetCardCSD+0x344>)
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e09d      	b.n	8005f8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e54:	0b9b      	lsrs	r3, r3, #14
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e66:	09db      	lsrs	r3, r3, #7
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e88:	0fdb      	lsrs	r3, r3, #31
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e94:	0f5b      	lsrs	r3, r3, #29
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea6:	0e9b      	lsrs	r3, r3, #26
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb8:	0d9b      	lsrs	r3, r3, #22
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eca:	0d5b      	lsrs	r3, r3, #21
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee6:	0c1b      	lsrs	r3, r3, #16
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efa:	0bdb      	lsrs	r3, r3, #15
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f0e:	0b9b      	lsrs	r3, r3, #14
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f22:	0b5b      	lsrs	r3, r3, #13
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f36:	0b1b      	lsrs	r3, r3, #12
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f4a:	0a9b      	lsrs	r3, r3, #10
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	1fe00fff 	.word	0x1fe00fff

08005f9c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b094      	sub	sp, #80	; 0x50
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d101      	bne.n	8005fbc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0a7      	b.n	800610c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005fbc:	f107 0308 	add.w	r3, r7, #8
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fb62 	bl	800668c <SD_SendSDStatus>
 8005fc8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d011      	beq.n	8005ff4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a4f      	ldr	r2, [pc, #316]	; (8006114 <HAL_SD_GetCardStatus+0x178>)
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005ff2:	e070      	b.n	80060d6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	099b      	lsrs	r3, r3, #6
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	b2db      	uxtb	r3, r3
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	b2da      	uxtb	r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	b29b      	uxth	r3, r3
 800601a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800601e:	b29a      	uxth	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	0e1b      	lsrs	r3, r3, #24
 8006024:	b29b      	uxth	r3, r3
 8006026:	4313      	orrs	r3, r2
 8006028:	b29a      	uxth	r2, r3
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	061a      	lsls	r2, r3, #24
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800603a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	0a1b      	lsrs	r3, r3, #8
 8006040:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006044:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	0e1b      	lsrs	r3, r3, #24
 800604a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	b2da      	uxtb	r2, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	b2da      	uxtb	r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	0d1b      	lsrs	r3, r3, #20
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	b2da      	uxtb	r2, r3
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	0c1b      	lsrs	r3, r3, #16
 8006076:	b29b      	uxth	r3, r3
 8006078:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800607c:	b29a      	uxth	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	b29b      	uxth	r3, r3
 8006082:	b2db      	uxtb	r3, r3
 8006084:	b29b      	uxth	r3, r3
 8006086:	4313      	orrs	r3, r2
 8006088:	b29a      	uxth	r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	0a9b      	lsrs	r3, r3, #10
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006098:	b2da      	uxtb	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	0a1b      	lsrs	r3, r3, #8
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	091b      	lsrs	r3, r3, #4
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	0e1b      	lsrs	r3, r3, #24
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 ff74 	bl	8007fcc <SDMMC_CmdBlockLength>
 80060e4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80060e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a08      	ldr	r2, [pc, #32]	; (8006114 <HAL_SD_GetCardStatus+0x178>)
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060f8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006108:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800610c:	4618      	mov	r0, r3
 800610e:	3750      	adds	r7, #80	; 0x50
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	1fe00fff 	.word	0x1fe00fff

08006118 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b08d      	sub	sp, #52	; 0x34
 8006174:	af02      	add	r7, sp, #8
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2203      	movs	r2, #3
 8006184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	2b03      	cmp	r3, #3
 800618e:	d02e      	beq.n	80061ee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006196:	d106      	bne.n	80061a6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	635a      	str	r2, [r3, #52]	; 0x34
 80061a4:	e029      	b.n	80061fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ac:	d10a      	bne.n	80061c4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fb64 	bl	800687c <SD_WideBus_Enable>
 80061b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	635a      	str	r2, [r3, #52]	; 0x34
 80061c2:	e01a      	b.n	80061fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fba1 	bl	8006912 <SD_WideBus_Disable>
 80061d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	635a      	str	r2, [r3, #52]	; 0x34
 80061de:	e00c      	b.n	80061fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	635a      	str	r2, [r3, #52]	; 0x34
 80061ec:	e005      	b.n	80061fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a5f      	ldr	r2, [pc, #380]	; (8006384 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006210:	e096      	b.n	8006340 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006212:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006216:	f04f 0100 	mov.w	r1, #0
 800621a:	f7fd fdef 	bl	8003dfc <HAL_RCCEx_GetPeriphCLKFreq>
 800621e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 8083 	beq.w	800632e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4950      	ldr	r1, [pc, #320]	; (8006388 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006246:	fba1 1303 	umull	r1, r3, r1, r3
 800624a:	0e1b      	lsrs	r3, r3, #24
 800624c:	429a      	cmp	r2, r3
 800624e:	d303      	bcc.n	8006258 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e05a      	b.n	800630e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006260:	d103      	bne.n	800626a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e051      	b.n	800630e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006272:	d126      	bne.n	80062c2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10e      	bne.n	800629a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4a43      	ldr	r2, [pc, #268]	; (800638c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d906      	bls.n	8006292 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4a40      	ldr	r2, [pc, #256]	; (8006388 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006288:	fba2 2303 	umull	r2, r3, r2, r3
 800628c:	0e5b      	lsrs	r3, r3, #25
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	e03d      	b.n	800630e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	e039      	b.n	800630e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a6:	4a39      	ldr	r2, [pc, #228]	; (800638c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d906      	bls.n	80062ba <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4a36      	ldr	r2, [pc, #216]	; (8006388 <HAL_SD_ConfigWideBusOperation+0x218>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	0e5b      	lsrs	r3, r3, #25
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	e029      	b.n	800630e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	e025      	b.n	800630e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10e      	bne.n	80062e8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4a30      	ldr	r2, [pc, #192]	; (8006390 <HAL_SD_ConfigWideBusOperation+0x220>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d906      	bls.n	80062e0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	4a2c      	ldr	r2, [pc, #176]	; (8006388 <HAL_SD_ConfigWideBusOperation+0x218>)
 80062d6:	fba2 2303 	umull	r2, r3, r2, r3
 80062da:	0e1b      	lsrs	r3, r3, #24
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	e016      	b.n	800630e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	e012      	b.n	800630e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	4a26      	ldr	r2, [pc, #152]	; (8006390 <HAL_SD_ConfigWideBusOperation+0x220>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d906      	bls.n	8006308 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4a22      	ldr	r2, [pc, #136]	; (8006388 <HAL_SD_ConfigWideBusOperation+0x218>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	0e1b      	lsrs	r3, r3, #24
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e002      	b.n	800630e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681c      	ldr	r4, [r3, #0]
 8006312:	466a      	mov	r2, sp
 8006314:	f107 0314 	add.w	r3, r7, #20
 8006318:	e893 0003 	ldmia.w	r3, {r0, r1}
 800631c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006320:	f107 0308 	add.w	r3, r7, #8
 8006324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006326:	4620      	mov	r0, r4
 8006328:	f001 fd72 	bl	8007e10 <SDMMC_Init>
 800632c:	e008      	b.n	8006340 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fe3f 	bl	8007fcc <SDMMC_CmdBlockLength>
 800634e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00c      	beq.n	8006370 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a0a      	ldr	r2, [pc, #40]	; (8006384 <HAL_SD_ConfigWideBusOperation+0x214>)
 800635c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800637c:	4618      	mov	r0, r3
 800637e:	372c      	adds	r7, #44	; 0x2c
 8006380:	46bd      	mov	sp, r7
 8006382:	bd90      	pop	{r4, r7, pc}
 8006384:	1fe00fff 	.word	0x1fe00fff
 8006388:	55e63b89 	.word	0x55e63b89
 800638c:	02faf080 	.word	0x02faf080
 8006390:	017d7840 	.word	0x017d7840

08006394 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80063a0:	f107 030c 	add.w	r3, r7, #12
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa40 	bl	800682c <SD_SendStatus>
 80063ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	0a5b      	lsrs	r3, r3, #9
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80063ca:	693b      	ldr	r3, [r7, #16]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b090      	sub	sp, #64	; 0x40
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80063e0:	f7fa fee8 	bl	80011b4 <HAL_GetTick>
 80063e4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 fd69 	bl	8007ec2 <SDMMC_GetPowerState>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063fa:	e0b5      	b.n	8006568 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	2b03      	cmp	r3, #3
 8006402:	d02e      	beq.n	8006462 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f001 ffb4 	bl	8008376 <SDMMC_CmdSendCID>
 800640e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <SD_InitCard+0x46>
    {
      return errorstate;
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	e0a6      	b.n	8006568 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2100      	movs	r1, #0
 8006420:	4618      	mov	r0, r3
 8006422:	f001 fd94 	bl	8007f4e <SDMMC_GetResponse>
 8006426:	4602      	mov	r2, r0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2104      	movs	r1, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f001 fd8b 	bl	8007f4e <SDMMC_GetResponse>
 8006438:	4602      	mov	r2, r0
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2108      	movs	r1, #8
 8006444:	4618      	mov	r0, r3
 8006446:	f001 fd82 	bl	8007f4e <SDMMC_GetResponse>
 800644a:	4602      	mov	r2, r0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	210c      	movs	r1, #12
 8006456:	4618      	mov	r0, r3
 8006458:	f001 fd79 	bl	8007f4e <SDMMC_GetResponse>
 800645c:	4602      	mov	r2, r0
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	2b03      	cmp	r3, #3
 8006468:	d01d      	beq.n	80064a6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800646a:	e019      	b.n	80064a0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f107 020a 	add.w	r2, r7, #10
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f001 ffbc 	bl	80083f4 <SDMMC_CmdSetRelAdd>
 800647c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	e06f      	b.n	8006568 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006488:	f7fa fe94 	bl	80011b4 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	f241 3287 	movw	r2, #4999	; 0x1387
 8006496:	4293      	cmp	r3, r2
 8006498:	d902      	bls.n	80064a0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800649a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800649e:	e063      	b.n	8006568 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80064a0:	897b      	ldrh	r3, [r7, #10]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0e2      	beq.n	800646c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d036      	beq.n	800651c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80064ae:	897b      	ldrh	r3, [r7, #10]
 80064b0:	461a      	mov	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064be:	041b      	lsls	r3, r3, #16
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f001 ff76 	bl	80083b4 <SDMMC_CmdSendCSD>
 80064c8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <SD_InitCard+0x100>
    {
      return errorstate;
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	e049      	b.n	8006568 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 fd37 	bl	8007f4e <SDMMC_GetResponse>
 80064e0:	4602      	mov	r2, r0
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2104      	movs	r1, #4
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 fd2e 	bl	8007f4e <SDMMC_GetResponse>
 80064f2:	4602      	mov	r2, r0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2108      	movs	r1, #8
 80064fe:	4618      	mov	r0, r3
 8006500:	f001 fd25 	bl	8007f4e <SDMMC_GetResponse>
 8006504:	4602      	mov	r2, r0
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	210c      	movs	r1, #12
 8006510:	4618      	mov	r0, r3
 8006512:	f001 fd1c 	bl	8007f4e <SDMMC_GetResponse>
 8006516:	4602      	mov	r2, r0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2104      	movs	r1, #4
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fd13 	bl	8007f4e <SDMMC_GetResponse>
 8006528:	4603      	mov	r3, r0
 800652a:	0d1a      	lsrs	r2, r3, #20
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fb8c 	bl	8005c54 <HAL_SD_GetCardCSD>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006542:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006546:	e00f      	b.n	8006568 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	041b      	lsls	r3, r3, #16
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f001 fe25 	bl	80081a4 <SDMMC_CmdSelDesel>
 800655a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <SD_InitCard+0x192>
  {
    return errorstate;
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	e000      	b.n	8006568 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3740      	adds	r7, #64	; 0x40
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f001 fe2e 	bl	80081ea <SDMMC_CmdGoIdleState>
 800658e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	e072      	b.n	8006680 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 fe41 	bl	8008226 <SDMMC_CmdOperCond>
 80065a4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ac:	d10d      	bne.n	80065ca <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fe16 	bl	80081ea <SDMMC_CmdGoIdleState>
 80065be:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <SD_PowerON+0x60>
    {
      return errorstate;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	e05a      	b.n	8006680 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d137      	bne.n	8006648 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2100      	movs	r1, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 fe41 	bl	8008266 <SDMMC_CmdAppCommand>
 80065e4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d02d      	beq.n	8006648 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065f0:	e046      	b.n	8006680 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2100      	movs	r1, #0
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 fe34 	bl	8008266 <SDMMC_CmdAppCommand>
 80065fe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <SD_PowerON+0x9a>
    {
      return errorstate;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	e03a      	b.n	8006680 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	491e      	ldr	r1, [pc, #120]	; (8006688 <SD_PowerON+0x118>)
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fe4b 	bl	80082ac <SDMMC_CmdAppOperCommand>
 8006616:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800661e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006622:	e02d      	b.n	8006680 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2100      	movs	r1, #0
 800662a:	4618      	mov	r0, r3
 800662c:	f001 fc8f 	bl	8007f4e <SDMMC_GetResponse>
 8006630:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	0fdb      	lsrs	r3, r3, #31
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <SD_PowerON+0xce>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <SD_PowerON+0xd0>
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]

    count++;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	3301      	adds	r3, #1
 8006646:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800664e:	4293      	cmp	r3, r2
 8006650:	d802      	bhi.n	8006658 <SD_PowerON+0xe8>
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0cc      	beq.n	80065f2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800665e:	4293      	cmp	r3, r2
 8006660:	d902      	bls.n	8006668 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006662:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006666:	e00b      	b.n	8006680 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	c1100000 	.word	0xc1100000

0800668c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08c      	sub	sp, #48	; 0x30
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006696:	f7fa fd8d 	bl	80011b4 <HAL_GetTick>
 800669a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2100      	movs	r1, #0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 fc51 	bl	8007f4e <SDMMC_GetResponse>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066b6:	d102      	bne.n	80066be <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80066b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066bc:	e0b0      	b.n	8006820 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2140      	movs	r1, #64	; 0x40
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 fc81 	bl	8007fcc <SDMMC_CmdBlockLength>
 80066ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	e0a0      	b.n	8006820 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	041b      	lsls	r3, r3, #16
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f001 fdbb 	bl	8008266 <SDMMC_CmdAppCommand>
 80066f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	e08d      	b.n	8006820 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006704:	f04f 33ff 	mov.w	r3, #4294967295
 8006708:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800670a:	2340      	movs	r3, #64	; 0x40
 800670c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800670e:	2360      	movs	r3, #96	; 0x60
 8006710:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006712:	2302      	movs	r3, #2
 8006714:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006716:	2300      	movs	r3, #0
 8006718:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800671a:	2301      	movs	r3, #1
 800671c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f107 0208 	add.w	r2, r7, #8
 8006726:	4611      	mov	r1, r2
 8006728:	4618      	mov	r0, r3
 800672a:	f001 fc23 	bl	8007f74 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fea3 	bl	800847e <SDMMC_CmdStatusRegister>
 8006738:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d02b      	beq.n	8006798 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	e069      	b.n	8006820 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d013      	beq.n	8006782 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800675a:	2300      	movs	r3, #0
 800675c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675e:	e00d      	b.n	800677c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f001 fb7d 	bl	8007e64 <SDMMC_ReadFIFO>
 800676a:	4602      	mov	r2, r0
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	601a      	str	r2, [r3, #0]
        pData++;
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	3304      	adds	r3, #4
 8006774:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	3301      	adds	r3, #1
 800677a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	2b07      	cmp	r3, #7
 8006780:	d9ee      	bls.n	8006760 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006782:	f7fa fd17 	bl	80011b4 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d102      	bne.n	8006798 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006792:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006796:	e043      	b.n	8006820 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0d2      	beq.n	800674c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80067b4:	2308      	movs	r3, #8
 80067b6:	e033      	b.n	8006820 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80067c6:	2302      	movs	r3, #2
 80067c8:	e02a      	b.n	8006820 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d017      	beq.n	8006808 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80067d8:	2320      	movs	r3, #32
 80067da:	e021      	b.n	8006820 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f001 fb3f 	bl	8007e64 <SDMMC_ReadFIFO>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	601a      	str	r2, [r3, #0]
    pData++;
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	3304      	adds	r3, #4
 80067f0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80067f2:	f7fa fcdf 	bl	80011b4 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d102      	bne.n	8006808 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006802:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006806:	e00b      	b.n	8006820 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e2      	bne.n	80067dc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a03      	ldr	r2, [pc, #12]	; (8006828 <SD_SendSDStatus+0x19c>)
 800681c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3730      	adds	r7, #48	; 0x30
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	18000f3a 	.word	0x18000f3a

0800682c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d102      	bne.n	8006842 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800683c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006840:	e018      	b.n	8006874 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f001 fdf2 	bl	8008438 <SDMMC_CmdSendStatus>
 8006854:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <SD_SendStatus+0x34>
  {
    return errorstate;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	e009      	b.n	8006874 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f001 fb71 	bl	8007f4e <SDMMC_GetResponse>
 800686c:	4602      	mov	r2, r0
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2100      	movs	r1, #0
 8006892:	4618      	mov	r0, r3
 8006894:	f001 fb5b 	bl	8007f4e <SDMMC_GetResponse>
 8006898:	4603      	mov	r3, r0
 800689a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068a2:	d102      	bne.n	80068aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80068a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068a8:	e02f      	b.n	800690a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80068aa:	f107 030c 	add.w	r3, r7, #12
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f879 	bl	80069a8 <SD_FindSCR>
 80068b6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	e023      	b.n	800690a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01c      	beq.n	8006906 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d4:	041b      	lsls	r3, r3, #16
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f001 fcc4 	bl	8008266 <SDMMC_CmdAppCommand>
 80068de:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	e00f      	b.n	800690a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2102      	movs	r1, #2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 fcfb 	bl	80082ec <SDMMC_CmdBusWidth>
 80068f6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	e003      	b.n	800690a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006902:	2300      	movs	r3, #0
 8006904:	e001      	b.n	800690a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006906:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	2300      	movs	r3, #0
 8006920:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f001 fb10 	bl	8007f4e <SDMMC_GetResponse>
 800692e:	4603      	mov	r3, r0
 8006930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006938:	d102      	bne.n	8006940 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800693a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800693e:	e02f      	b.n	80069a0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006940:	f107 030c 	add.w	r3, r7, #12
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f82e 	bl	80069a8 <SD_FindSCR>
 800694c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	e023      	b.n	80069a0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01c      	beq.n	800699c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f001 fc79 	bl	8008266 <SDMMC_CmdAppCommand>
 8006974:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	e00f      	b.n	80069a0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fcb0 	bl	80082ec <SDMMC_CmdBusWidth>
 800698c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	e003      	b.n	80069a0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006998:	2300      	movs	r3, #0
 800699a:	e001      	b.n	80069a0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800699c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08e      	sub	sp, #56	; 0x38
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80069b2:	f7fa fbff 	bl	80011b4 <HAL_GetTick>
 80069b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80069bc:	2300      	movs	r3, #0
 80069be:	60bb      	str	r3, [r7, #8]
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2108      	movs	r1, #8
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 fafc 	bl	8007fcc <SDMMC_CmdBlockLength>
 80069d4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	e0ad      	b.n	8006b3c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e8:	041b      	lsls	r3, r3, #16
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f001 fc3a 	bl	8008266 <SDMMC_CmdAppCommand>
 80069f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <SD_FindSCR+0x56>
  {
    return errorstate;
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	e09e      	b.n	8006b3c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006a02:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006a04:	2308      	movs	r3, #8
 8006a06:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006a08:	2330      	movs	r3, #48	; 0x30
 8006a0a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f107 0210 	add.w	r2, r7, #16
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 faa6 	bl	8007f74 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 fc80 	bl	8008332 <SDMMC_CmdSendSCR>
 8006a32:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d027      	beq.n	8006a8a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	e07e      	b.n	8006b3c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d113      	bne.n	8006a74 <SD_FindSCR+0xcc>
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d110      	bne.n	8006a74 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 fa04 	bl	8007e64 <SDMMC_ReadFIFO>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f001 f9fd 	bl	8007e64 <SDMMC_ReadFIFO>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	60fb      	str	r3, [r7, #12]
      index++;
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a70:	3301      	adds	r3, #1
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a74:	f7fa fb9e 	bl	80011b4 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d102      	bne.n	8006a8a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006a84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a88:	e058      	b.n	8006b3c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a90:	f240 532a 	movw	r3, #1322	; 0x52a
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0d1      	beq.n	8006a3e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2208      	movs	r2, #8
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	e043      	b.n	8006b3c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006aca:	2302      	movs	r3, #2
 8006acc:	e036      	b.n	8006b3c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	e029      	b.n	8006b3c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a15      	ldr	r2, [pc, #84]	; (8006b44 <SD_FindSCR+0x19c>)
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	061a      	lsls	r2, r3, #24
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006afc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	0a1b      	lsrs	r3, r3, #8
 8006b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006b06:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	0e1b      	lsrs	r3, r3, #24
 8006b0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	601a      	str	r2, [r3, #0]
    scr++;
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	3304      	adds	r3, #4
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	061a      	lsls	r2, r3, #24
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b24:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006b2e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	0e1b      	lsrs	r3, r3, #24
 8006b34:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3738      	adds	r7, #56	; 0x38
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	18000f3a 	.word	0x18000f3a

08006b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e042      	b.n	8006be0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d106      	bne.n	8006b72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7fa f9a7 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2224      	movs	r2, #36	; 0x24
 8006b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f8ba 	bl	8006d04 <UART_SetConfig>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e022      	b.n	8006be0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fe16 	bl	80077d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fe9d 	bl	8007918 <UART_CheckIdleState>
 8006bde:	4603      	mov	r3, r0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d17b      	bne.n	8006cfa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <HAL_UART_Transmit+0x26>
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e074      	b.n	8006cfc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2221      	movs	r2, #33	; 0x21
 8006c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c22:	f7fa fac7 	bl	80011b4 <HAL_GetTick>
 8006c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	88fa      	ldrh	r2, [r7, #6]
 8006c2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c40:	d108      	bne.n	8006c54 <HAL_UART_Transmit+0x6c>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	e003      	b.n	8006c5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c5c:	e030      	b.n	8006cc0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2200      	movs	r2, #0
 8006c66:	2180      	movs	r1, #128	; 0x80
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 feff 	bl	8007a6c <UART_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e03d      	b.n	8006cfc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	3302      	adds	r3, #2
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	e007      	b.n	8006cae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	3301      	adds	r3, #1
 8006cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1c8      	bne.n	8006c5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2140      	movs	r1, #64	; 0x40
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fec8 	bl	8007a6c <UART_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e006      	b.n	8006cfc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e000      	b.n	8006cfc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006cfa:	2302      	movs	r3, #2
  }
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3720      	adds	r7, #32
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d08:	b092      	sub	sp, #72	; 0x48
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4bbe      	ldr	r3, [pc, #760]	; (800702c <UART_SetConfig+0x328>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	6812      	ldr	r2, [r2, #0]
 8006d3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4ab3      	ldr	r2, [pc, #716]	; (8007030 <UART_SetConfig+0x32c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	4baf      	ldr	r3, [pc, #700]	; (8007034 <UART_SetConfig+0x330>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	f023 010f 	bic.w	r1, r3, #15
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4aa6      	ldr	r2, [pc, #664]	; (8007038 <UART_SetConfig+0x334>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d177      	bne.n	8006e94 <UART_SetConfig+0x190>
 8006da4:	4ba5      	ldr	r3, [pc, #660]	; (800703c <UART_SetConfig+0x338>)
 8006da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dac:	2b28      	cmp	r3, #40	; 0x28
 8006dae:	d86d      	bhi.n	8006e8c <UART_SetConfig+0x188>
 8006db0:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <UART_SetConfig+0xb4>)
 8006db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db6:	bf00      	nop
 8006db8:	08006e5d 	.word	0x08006e5d
 8006dbc:	08006e8d 	.word	0x08006e8d
 8006dc0:	08006e8d 	.word	0x08006e8d
 8006dc4:	08006e8d 	.word	0x08006e8d
 8006dc8:	08006e8d 	.word	0x08006e8d
 8006dcc:	08006e8d 	.word	0x08006e8d
 8006dd0:	08006e8d 	.word	0x08006e8d
 8006dd4:	08006e8d 	.word	0x08006e8d
 8006dd8:	08006e65 	.word	0x08006e65
 8006ddc:	08006e8d 	.word	0x08006e8d
 8006de0:	08006e8d 	.word	0x08006e8d
 8006de4:	08006e8d 	.word	0x08006e8d
 8006de8:	08006e8d 	.word	0x08006e8d
 8006dec:	08006e8d 	.word	0x08006e8d
 8006df0:	08006e8d 	.word	0x08006e8d
 8006df4:	08006e8d 	.word	0x08006e8d
 8006df8:	08006e6d 	.word	0x08006e6d
 8006dfc:	08006e8d 	.word	0x08006e8d
 8006e00:	08006e8d 	.word	0x08006e8d
 8006e04:	08006e8d 	.word	0x08006e8d
 8006e08:	08006e8d 	.word	0x08006e8d
 8006e0c:	08006e8d 	.word	0x08006e8d
 8006e10:	08006e8d 	.word	0x08006e8d
 8006e14:	08006e8d 	.word	0x08006e8d
 8006e18:	08006e75 	.word	0x08006e75
 8006e1c:	08006e8d 	.word	0x08006e8d
 8006e20:	08006e8d 	.word	0x08006e8d
 8006e24:	08006e8d 	.word	0x08006e8d
 8006e28:	08006e8d 	.word	0x08006e8d
 8006e2c:	08006e8d 	.word	0x08006e8d
 8006e30:	08006e8d 	.word	0x08006e8d
 8006e34:	08006e8d 	.word	0x08006e8d
 8006e38:	08006e7d 	.word	0x08006e7d
 8006e3c:	08006e8d 	.word	0x08006e8d
 8006e40:	08006e8d 	.word	0x08006e8d
 8006e44:	08006e8d 	.word	0x08006e8d
 8006e48:	08006e8d 	.word	0x08006e8d
 8006e4c:	08006e8d 	.word	0x08006e8d
 8006e50:	08006e8d 	.word	0x08006e8d
 8006e54:	08006e8d 	.word	0x08006e8d
 8006e58:	08006e85 	.word	0x08006e85
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e222      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006e64:	2304      	movs	r3, #4
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e21e      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006e6c:	2308      	movs	r3, #8
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e21a      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006e74:	2310      	movs	r3, #16
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7a:	e216      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006e7c:	2320      	movs	r3, #32
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e212      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006e84:	2340      	movs	r3, #64	; 0x40
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8a:	e20e      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e92:	e20a      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a69      	ldr	r2, [pc, #420]	; (8007040 <UART_SetConfig+0x33c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d130      	bne.n	8006f00 <UART_SetConfig+0x1fc>
 8006e9e:	4b67      	ldr	r3, [pc, #412]	; (800703c <UART_SetConfig+0x338>)
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b05      	cmp	r3, #5
 8006ea8:	d826      	bhi.n	8006ef8 <UART_SetConfig+0x1f4>
 8006eaa:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <UART_SetConfig+0x1ac>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006ec9 	.word	0x08006ec9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	08006ed9 	.word	0x08006ed9
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e1ec      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e1e8      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ede:	e1e4      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee6:	e1e0      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006ee8:	2320      	movs	r3, #32
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eee:	e1dc      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e1d8      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006ef8:	2380      	movs	r3, #128	; 0x80
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efe:	e1d4      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a4f      	ldr	r2, [pc, #316]	; (8007044 <UART_SetConfig+0x340>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d130      	bne.n	8006f6c <UART_SetConfig+0x268>
 8006f0a:	4b4c      	ldr	r3, [pc, #304]	; (800703c <UART_SetConfig+0x338>)
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	2b05      	cmp	r3, #5
 8006f14:	d826      	bhi.n	8006f64 <UART_SetConfig+0x260>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0x218>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f35 	.word	0x08006f35
 8006f20:	08006f3d 	.word	0x08006f3d
 8006f24:	08006f45 	.word	0x08006f45
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f55 	.word	0x08006f55
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	2300      	movs	r3, #0
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e1b6      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e1b2      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006f44:	2308      	movs	r3, #8
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e1ae      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e1aa      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006f54:	2320      	movs	r3, #32
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e1a6      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006f5c:	2340      	movs	r3, #64	; 0x40
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e1a2      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6a:	e19e      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a35      	ldr	r2, [pc, #212]	; (8007048 <UART_SetConfig+0x344>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d130      	bne.n	8006fd8 <UART_SetConfig+0x2d4>
 8006f76:	4b31      	ldr	r3, [pc, #196]	; (800703c <UART_SetConfig+0x338>)
 8006f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	2b05      	cmp	r3, #5
 8006f80:	d826      	bhi.n	8006fd0 <UART_SetConfig+0x2cc>
 8006f82:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <UART_SetConfig+0x284>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006fa1 	.word	0x08006fa1
 8006f8c:	08006fa9 	.word	0x08006fa9
 8006f90:	08006fb1 	.word	0x08006fb1
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fc1 	.word	0x08006fc1
 8006f9c:	08006fc9 	.word	0x08006fc9
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e180      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e17c      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e178      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e174      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e170      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006fc8:	2340      	movs	r3, #64	; 0x40
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e16c      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e168      	b.n	80072aa <UART_SetConfig+0x5a6>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1b      	ldr	r2, [pc, #108]	; (800704c <UART_SetConfig+0x348>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d142      	bne.n	8007068 <UART_SetConfig+0x364>
 8006fe2:	4b16      	ldr	r3, [pc, #88]	; (800703c <UART_SetConfig+0x338>)
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	d838      	bhi.n	8007060 <UART_SetConfig+0x35c>
 8006fee:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <UART_SetConfig+0x2f0>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	0800700d 	.word	0x0800700d
 8006ff8:	08007015 	.word	0x08007015
 8006ffc:	0800701d 	.word	0x0800701d
 8007000:	08007025 	.word	0x08007025
 8007004:	08007051 	.word	0x08007051
 8007008:	08007059 	.word	0x08007059
 800700c:	2300      	movs	r3, #0
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e14a      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e146      	b.n	80072aa <UART_SetConfig+0x5a6>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e142      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e13e      	b.n	80072aa <UART_SetConfig+0x5a6>
 800702c:	cfff69f3 	.word	0xcfff69f3
 8007030:	58000c00 	.word	0x58000c00
 8007034:	11fff4ff 	.word	0x11fff4ff
 8007038:	40011000 	.word	0x40011000
 800703c:	58024400 	.word	0x58024400
 8007040:	40004400 	.word	0x40004400
 8007044:	40004800 	.word	0x40004800
 8007048:	40004c00 	.word	0x40004c00
 800704c:	40005000 	.word	0x40005000
 8007050:	2320      	movs	r3, #32
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007056:	e128      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007058:	2340      	movs	r3, #64	; 0x40
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705e:	e124      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007060:	2380      	movs	r3, #128	; 0x80
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007066:	e120      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4acb      	ldr	r2, [pc, #812]	; (800739c <UART_SetConfig+0x698>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d176      	bne.n	8007160 <UART_SetConfig+0x45c>
 8007072:	4bcb      	ldr	r3, [pc, #812]	; (80073a0 <UART_SetConfig+0x69c>)
 8007074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800707a:	2b28      	cmp	r3, #40	; 0x28
 800707c:	d86c      	bhi.n	8007158 <UART_SetConfig+0x454>
 800707e:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0x380>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	08007129 	.word	0x08007129
 8007088:	08007159 	.word	0x08007159
 800708c:	08007159 	.word	0x08007159
 8007090:	08007159 	.word	0x08007159
 8007094:	08007159 	.word	0x08007159
 8007098:	08007159 	.word	0x08007159
 800709c:	08007159 	.word	0x08007159
 80070a0:	08007159 	.word	0x08007159
 80070a4:	08007131 	.word	0x08007131
 80070a8:	08007159 	.word	0x08007159
 80070ac:	08007159 	.word	0x08007159
 80070b0:	08007159 	.word	0x08007159
 80070b4:	08007159 	.word	0x08007159
 80070b8:	08007159 	.word	0x08007159
 80070bc:	08007159 	.word	0x08007159
 80070c0:	08007159 	.word	0x08007159
 80070c4:	08007139 	.word	0x08007139
 80070c8:	08007159 	.word	0x08007159
 80070cc:	08007159 	.word	0x08007159
 80070d0:	08007159 	.word	0x08007159
 80070d4:	08007159 	.word	0x08007159
 80070d8:	08007159 	.word	0x08007159
 80070dc:	08007159 	.word	0x08007159
 80070e0:	08007159 	.word	0x08007159
 80070e4:	08007141 	.word	0x08007141
 80070e8:	08007159 	.word	0x08007159
 80070ec:	08007159 	.word	0x08007159
 80070f0:	08007159 	.word	0x08007159
 80070f4:	08007159 	.word	0x08007159
 80070f8:	08007159 	.word	0x08007159
 80070fc:	08007159 	.word	0x08007159
 8007100:	08007159 	.word	0x08007159
 8007104:	08007149 	.word	0x08007149
 8007108:	08007159 	.word	0x08007159
 800710c:	08007159 	.word	0x08007159
 8007110:	08007159 	.word	0x08007159
 8007114:	08007159 	.word	0x08007159
 8007118:	08007159 	.word	0x08007159
 800711c:	08007159 	.word	0x08007159
 8007120:	08007159 	.word	0x08007159
 8007124:	08007151 	.word	0x08007151
 8007128:	2301      	movs	r3, #1
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e0bc      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007130:	2304      	movs	r3, #4
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e0b8      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007138:	2308      	movs	r3, #8
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e0b4      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007140:	2310      	movs	r3, #16
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e0b0      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007148:	2320      	movs	r3, #32
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e0ac      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007150:	2340      	movs	r3, #64	; 0x40
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e0a8      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007158:	2380      	movs	r3, #128	; 0x80
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e0a4      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a8f      	ldr	r2, [pc, #572]	; (80073a4 <UART_SetConfig+0x6a0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d130      	bne.n	80071cc <UART_SetConfig+0x4c8>
 800716a:	4b8d      	ldr	r3, [pc, #564]	; (80073a0 <UART_SetConfig+0x69c>)
 800716c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	2b05      	cmp	r3, #5
 8007174:	d826      	bhi.n	80071c4 <UART_SetConfig+0x4c0>
 8007176:	a201      	add	r2, pc, #4	; (adr r2, 800717c <UART_SetConfig+0x478>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	08007195 	.word	0x08007195
 8007180:	0800719d 	.word	0x0800719d
 8007184:	080071a5 	.word	0x080071a5
 8007188:	080071ad 	.word	0x080071ad
 800718c:	080071b5 	.word	0x080071b5
 8007190:	080071bd 	.word	0x080071bd
 8007194:	2300      	movs	r3, #0
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719a:	e086      	b.n	80072aa <UART_SetConfig+0x5a6>
 800719c:	2304      	movs	r3, #4
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a2:	e082      	b.n	80072aa <UART_SetConfig+0x5a6>
 80071a4:	2308      	movs	r3, #8
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071aa:	e07e      	b.n	80072aa <UART_SetConfig+0x5a6>
 80071ac:	2310      	movs	r3, #16
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b2:	e07a      	b.n	80072aa <UART_SetConfig+0x5a6>
 80071b4:	2320      	movs	r3, #32
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ba:	e076      	b.n	80072aa <UART_SetConfig+0x5a6>
 80071bc:	2340      	movs	r3, #64	; 0x40
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c2:	e072      	b.n	80072aa <UART_SetConfig+0x5a6>
 80071c4:	2380      	movs	r3, #128	; 0x80
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ca:	e06e      	b.n	80072aa <UART_SetConfig+0x5a6>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a75      	ldr	r2, [pc, #468]	; (80073a8 <UART_SetConfig+0x6a4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d130      	bne.n	8007238 <UART_SetConfig+0x534>
 80071d6:	4b72      	ldr	r3, [pc, #456]	; (80073a0 <UART_SetConfig+0x69c>)
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	2b05      	cmp	r3, #5
 80071e0:	d826      	bhi.n	8007230 <UART_SetConfig+0x52c>
 80071e2:	a201      	add	r2, pc, #4	; (adr r2, 80071e8 <UART_SetConfig+0x4e4>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	08007201 	.word	0x08007201
 80071ec:	08007209 	.word	0x08007209
 80071f0:	08007211 	.word	0x08007211
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007221 	.word	0x08007221
 80071fc:	08007229 	.word	0x08007229
 8007200:	2300      	movs	r3, #0
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e050      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007208:	2304      	movs	r3, #4
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e04c      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007210:	2308      	movs	r3, #8
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e048      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007218:	2310      	movs	r3, #16
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721e:	e044      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007220:	2320      	movs	r3, #32
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007226:	e040      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007228:	2340      	movs	r3, #64	; 0x40
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e03c      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007230:	2380      	movs	r3, #128	; 0x80
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e038      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a5b      	ldr	r2, [pc, #364]	; (80073ac <UART_SetConfig+0x6a8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d130      	bne.n	80072a4 <UART_SetConfig+0x5a0>
 8007242:	4b57      	ldr	r3, [pc, #348]	; (80073a0 <UART_SetConfig+0x69c>)
 8007244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	2b05      	cmp	r3, #5
 800724c:	d826      	bhi.n	800729c <UART_SetConfig+0x598>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <UART_SetConfig+0x550>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	0800726d 	.word	0x0800726d
 8007258:	08007275 	.word	0x08007275
 800725c:	0800727d 	.word	0x0800727d
 8007260:	08007285 	.word	0x08007285
 8007264:	0800728d 	.word	0x0800728d
 8007268:	08007295 	.word	0x08007295
 800726c:	2302      	movs	r3, #2
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e01a      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007274:	2304      	movs	r3, #4
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727a:	e016      	b.n	80072aa <UART_SetConfig+0x5a6>
 800727c:	2308      	movs	r3, #8
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007282:	e012      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007284:	2310      	movs	r3, #16
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728a:	e00e      	b.n	80072aa <UART_SetConfig+0x5a6>
 800728c:	2320      	movs	r3, #32
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e00a      	b.n	80072aa <UART_SetConfig+0x5a6>
 8007294:	2340      	movs	r3, #64	; 0x40
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e006      	b.n	80072aa <UART_SetConfig+0x5a6>
 800729c:	2380      	movs	r3, #128	; 0x80
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e002      	b.n	80072aa <UART_SetConfig+0x5a6>
 80072a4:	2380      	movs	r3, #128	; 0x80
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a3f      	ldr	r2, [pc, #252]	; (80073ac <UART_SetConfig+0x6a8>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	f040 80f8 	bne.w	80074a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	dc46      	bgt.n	800734c <UART_SetConfig+0x648>
 80072be:	2b02      	cmp	r3, #2
 80072c0:	f2c0 8082 	blt.w	80073c8 <UART_SetConfig+0x6c4>
 80072c4:	3b02      	subs	r3, #2
 80072c6:	2b1e      	cmp	r3, #30
 80072c8:	d87e      	bhi.n	80073c8 <UART_SetConfig+0x6c4>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <UART_SetConfig+0x5cc>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	08007353 	.word	0x08007353
 80072d4:	080073c9 	.word	0x080073c9
 80072d8:	0800735b 	.word	0x0800735b
 80072dc:	080073c9 	.word	0x080073c9
 80072e0:	080073c9 	.word	0x080073c9
 80072e4:	080073c9 	.word	0x080073c9
 80072e8:	0800736b 	.word	0x0800736b
 80072ec:	080073c9 	.word	0x080073c9
 80072f0:	080073c9 	.word	0x080073c9
 80072f4:	080073c9 	.word	0x080073c9
 80072f8:	080073c9 	.word	0x080073c9
 80072fc:	080073c9 	.word	0x080073c9
 8007300:	080073c9 	.word	0x080073c9
 8007304:	080073c9 	.word	0x080073c9
 8007308:	0800737b 	.word	0x0800737b
 800730c:	080073c9 	.word	0x080073c9
 8007310:	080073c9 	.word	0x080073c9
 8007314:	080073c9 	.word	0x080073c9
 8007318:	080073c9 	.word	0x080073c9
 800731c:	080073c9 	.word	0x080073c9
 8007320:	080073c9 	.word	0x080073c9
 8007324:	080073c9 	.word	0x080073c9
 8007328:	080073c9 	.word	0x080073c9
 800732c:	080073c9 	.word	0x080073c9
 8007330:	080073c9 	.word	0x080073c9
 8007334:	080073c9 	.word	0x080073c9
 8007338:	080073c9 	.word	0x080073c9
 800733c:	080073c9 	.word	0x080073c9
 8007340:	080073c9 	.word	0x080073c9
 8007344:	080073c9 	.word	0x080073c9
 8007348:	080073bb 	.word	0x080073bb
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d037      	beq.n	80073c0 <UART_SetConfig+0x6bc>
 8007350:	e03a      	b.n	80073c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007352:	f7fd fad3 	bl	80048fc <HAL_RCCEx_GetD3PCLK1Freq>
 8007356:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007358:	e03c      	b.n	80073d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800735a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800735e:	4618      	mov	r0, r3
 8007360:	f7fd fae2 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007368:	e034      	b.n	80073d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800736a:	f107 0318 	add.w	r3, r7, #24
 800736e:	4618      	mov	r0, r3
 8007370:	f7fd fc2e 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007378:	e02c      	b.n	80073d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800737a:	4b09      	ldr	r3, [pc, #36]	; (80073a0 <UART_SetConfig+0x69c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	d016      	beq.n	80073b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007386:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <UART_SetConfig+0x69c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	08db      	lsrs	r3, r3, #3
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	4a07      	ldr	r2, [pc, #28]	; (80073b0 <UART_SetConfig+0x6ac>)
 8007392:	fa22 f303 	lsr.w	r3, r2, r3
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007398:	e01c      	b.n	80073d4 <UART_SetConfig+0x6d0>
 800739a:	bf00      	nop
 800739c:	40011400 	.word	0x40011400
 80073a0:	58024400 	.word	0x58024400
 80073a4:	40007800 	.word	0x40007800
 80073a8:	40007c00 	.word	0x40007c00
 80073ac:	58000c00 	.word	0x58000c00
 80073b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80073b4:	4b9d      	ldr	r3, [pc, #628]	; (800762c <UART_SetConfig+0x928>)
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073b8:	e00c      	b.n	80073d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073ba:	4b9d      	ldr	r3, [pc, #628]	; (8007630 <UART_SetConfig+0x92c>)
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073be:	e009      	b.n	80073d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c6:	e005      	b.n	80073d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 81de 	beq.w	8007798 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	4a94      	ldr	r2, [pc, #592]	; (8007634 <UART_SetConfig+0x930>)
 80073e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e6:	461a      	mov	r2, r3
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	4413      	add	r3, r2
 80073fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d305      	bcc.n	800740c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007408:	429a      	cmp	r2, r3
 800740a:	d903      	bls.n	8007414 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007412:	e1c1      	b.n	8007798 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007416:	2200      	movs	r2, #0
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	60fa      	str	r2, [r7, #12]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	4a84      	ldr	r2, [pc, #528]	; (8007634 <UART_SetConfig+0x930>)
 8007422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007426:	b29b      	uxth	r3, r3
 8007428:	2200      	movs	r2, #0
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007436:	f7f8 ffa3 	bl	8000380 <__aeabi_uldivmod>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4610      	mov	r0, r2
 8007440:	4619      	mov	r1, r3
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	020b      	lsls	r3, r1, #8
 800744c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007450:	0202      	lsls	r2, r0, #8
 8007452:	6979      	ldr	r1, [r7, #20]
 8007454:	6849      	ldr	r1, [r1, #4]
 8007456:	0849      	lsrs	r1, r1, #1
 8007458:	2000      	movs	r0, #0
 800745a:	460c      	mov	r4, r1
 800745c:	4605      	mov	r5, r0
 800745e:	eb12 0804 	adds.w	r8, r2, r4
 8007462:	eb43 0905 	adc.w	r9, r3, r5
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	469a      	mov	sl, r3
 800746e:	4693      	mov	fp, r2
 8007470:	4652      	mov	r2, sl
 8007472:	465b      	mov	r3, fp
 8007474:	4640      	mov	r0, r8
 8007476:	4649      	mov	r1, r9
 8007478:	f7f8 ff82 	bl	8000380 <__aeabi_uldivmod>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4613      	mov	r3, r2
 8007482:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800748a:	d308      	bcc.n	800749e <UART_SetConfig+0x79a>
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007492:	d204      	bcs.n	800749e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800749a:	60da      	str	r2, [r3, #12]
 800749c:	e17c      	b.n	8007798 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074a4:	e178      	b.n	8007798 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ae:	f040 80c5 	bne.w	800763c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80074b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	dc48      	bgt.n	800754c <UART_SetConfig+0x848>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	db7b      	blt.n	80075b6 <UART_SetConfig+0x8b2>
 80074be:	2b20      	cmp	r3, #32
 80074c0:	d879      	bhi.n	80075b6 <UART_SetConfig+0x8b2>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <UART_SetConfig+0x7c4>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	08007553 	.word	0x08007553
 80074cc:	0800755b 	.word	0x0800755b
 80074d0:	080075b7 	.word	0x080075b7
 80074d4:	080075b7 	.word	0x080075b7
 80074d8:	08007563 	.word	0x08007563
 80074dc:	080075b7 	.word	0x080075b7
 80074e0:	080075b7 	.word	0x080075b7
 80074e4:	080075b7 	.word	0x080075b7
 80074e8:	08007573 	.word	0x08007573
 80074ec:	080075b7 	.word	0x080075b7
 80074f0:	080075b7 	.word	0x080075b7
 80074f4:	080075b7 	.word	0x080075b7
 80074f8:	080075b7 	.word	0x080075b7
 80074fc:	080075b7 	.word	0x080075b7
 8007500:	080075b7 	.word	0x080075b7
 8007504:	080075b7 	.word	0x080075b7
 8007508:	08007583 	.word	0x08007583
 800750c:	080075b7 	.word	0x080075b7
 8007510:	080075b7 	.word	0x080075b7
 8007514:	080075b7 	.word	0x080075b7
 8007518:	080075b7 	.word	0x080075b7
 800751c:	080075b7 	.word	0x080075b7
 8007520:	080075b7 	.word	0x080075b7
 8007524:	080075b7 	.word	0x080075b7
 8007528:	080075b7 	.word	0x080075b7
 800752c:	080075b7 	.word	0x080075b7
 8007530:	080075b7 	.word	0x080075b7
 8007534:	080075b7 	.word	0x080075b7
 8007538:	080075b7 	.word	0x080075b7
 800753c:	080075b7 	.word	0x080075b7
 8007540:	080075b7 	.word	0x080075b7
 8007544:	080075b7 	.word	0x080075b7
 8007548:	080075a9 	.word	0x080075a9
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d02e      	beq.n	80075ae <UART_SetConfig+0x8aa>
 8007550:	e031      	b.n	80075b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007552:	f7fb f9dd 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8007556:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007558:	e033      	b.n	80075c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800755a:	f7fb f9ef 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 800755e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007560:	e02f      	b.n	80075c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007566:	4618      	mov	r0, r3
 8007568:	f7fd f9de 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007570:	e027      	b.n	80075c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007572:	f107 0318 	add.w	r3, r7, #24
 8007576:	4618      	mov	r0, r3
 8007578:	f7fd fb2a 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007580:	e01f      	b.n	80075c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007582:	4b2d      	ldr	r3, [pc, #180]	; (8007638 <UART_SetConfig+0x934>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800758e:	4b2a      	ldr	r3, [pc, #168]	; (8007638 <UART_SetConfig+0x934>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	08db      	lsrs	r3, r3, #3
 8007594:	f003 0303 	and.w	r3, r3, #3
 8007598:	4a24      	ldr	r2, [pc, #144]	; (800762c <UART_SetConfig+0x928>)
 800759a:	fa22 f303 	lsr.w	r3, r2, r3
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075a0:	e00f      	b.n	80075c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80075a2:	4b22      	ldr	r3, [pc, #136]	; (800762c <UART_SetConfig+0x928>)
 80075a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a6:	e00c      	b.n	80075c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075a8:	4b21      	ldr	r3, [pc, #132]	; (8007630 <UART_SetConfig+0x92c>)
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ac:	e009      	b.n	80075c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b4:	e005      	b.n	80075c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80e7 	beq.w	8007798 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	4a19      	ldr	r2, [pc, #100]	; (8007634 <UART_SetConfig+0x930>)
 80075d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075d4:	461a      	mov	r2, r3
 80075d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075dc:	005a      	lsls	r2, r3, #1
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	441a      	add	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	2b0f      	cmp	r3, #15
 80075f4:	d916      	bls.n	8007624 <UART_SetConfig+0x920>
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fc:	d212      	bcs.n	8007624 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	b29b      	uxth	r3, r3
 8007602:	f023 030f 	bic.w	r3, r3, #15
 8007606:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	085b      	lsrs	r3, r3, #1
 800760c:	b29b      	uxth	r3, r3
 800760e:	f003 0307 	and.w	r3, r3, #7
 8007612:	b29a      	uxth	r2, r3
 8007614:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007616:	4313      	orrs	r3, r2
 8007618:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	e0b9      	b.n	8007798 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800762a:	e0b5      	b.n	8007798 <UART_SetConfig+0xa94>
 800762c:	03d09000 	.word	0x03d09000
 8007630:	003d0900 	.word	0x003d0900
 8007634:	0800bec8 	.word	0x0800bec8
 8007638:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800763c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007640:	2b20      	cmp	r3, #32
 8007642:	dc49      	bgt.n	80076d8 <UART_SetConfig+0x9d4>
 8007644:	2b00      	cmp	r3, #0
 8007646:	db7c      	blt.n	8007742 <UART_SetConfig+0xa3e>
 8007648:	2b20      	cmp	r3, #32
 800764a:	d87a      	bhi.n	8007742 <UART_SetConfig+0xa3e>
 800764c:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <UART_SetConfig+0x950>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	080076df 	.word	0x080076df
 8007658:	080076e7 	.word	0x080076e7
 800765c:	08007743 	.word	0x08007743
 8007660:	08007743 	.word	0x08007743
 8007664:	080076ef 	.word	0x080076ef
 8007668:	08007743 	.word	0x08007743
 800766c:	08007743 	.word	0x08007743
 8007670:	08007743 	.word	0x08007743
 8007674:	080076ff 	.word	0x080076ff
 8007678:	08007743 	.word	0x08007743
 800767c:	08007743 	.word	0x08007743
 8007680:	08007743 	.word	0x08007743
 8007684:	08007743 	.word	0x08007743
 8007688:	08007743 	.word	0x08007743
 800768c:	08007743 	.word	0x08007743
 8007690:	08007743 	.word	0x08007743
 8007694:	0800770f 	.word	0x0800770f
 8007698:	08007743 	.word	0x08007743
 800769c:	08007743 	.word	0x08007743
 80076a0:	08007743 	.word	0x08007743
 80076a4:	08007743 	.word	0x08007743
 80076a8:	08007743 	.word	0x08007743
 80076ac:	08007743 	.word	0x08007743
 80076b0:	08007743 	.word	0x08007743
 80076b4:	08007743 	.word	0x08007743
 80076b8:	08007743 	.word	0x08007743
 80076bc:	08007743 	.word	0x08007743
 80076c0:	08007743 	.word	0x08007743
 80076c4:	08007743 	.word	0x08007743
 80076c8:	08007743 	.word	0x08007743
 80076cc:	08007743 	.word	0x08007743
 80076d0:	08007743 	.word	0x08007743
 80076d4:	08007735 	.word	0x08007735
 80076d8:	2b40      	cmp	r3, #64	; 0x40
 80076da:	d02e      	beq.n	800773a <UART_SetConfig+0xa36>
 80076dc:	e031      	b.n	8007742 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076de:	f7fb f917 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 80076e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076e4:	e033      	b.n	800774e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076e6:	f7fb f929 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 80076ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076ec:	e02f      	b.n	800774e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd f918 	bl	8004928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076fc:	e027      	b.n	800774e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076fe:	f107 0318 	add.w	r3, r7, #24
 8007702:	4618      	mov	r0, r3
 8007704:	f7fd fa64 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800770c:	e01f      	b.n	800774e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800770e:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <UART_SetConfig+0xac0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	d009      	beq.n	800772e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800771a:	4b2a      	ldr	r3, [pc, #168]	; (80077c4 <UART_SetConfig+0xac0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	08db      	lsrs	r3, r3, #3
 8007720:	f003 0303 	and.w	r3, r3, #3
 8007724:	4a28      	ldr	r2, [pc, #160]	; (80077c8 <UART_SetConfig+0xac4>)
 8007726:	fa22 f303 	lsr.w	r3, r2, r3
 800772a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800772c:	e00f      	b.n	800774e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800772e:	4b26      	ldr	r3, [pc, #152]	; (80077c8 <UART_SetConfig+0xac4>)
 8007730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007732:	e00c      	b.n	800774e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007734:	4b25      	ldr	r3, [pc, #148]	; (80077cc <UART_SetConfig+0xac8>)
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007738:	e009      	b.n	800774e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007740:	e005      	b.n	800774e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800774c:	bf00      	nop
    }

    if (pclk != 0U)
 800774e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d021      	beq.n	8007798 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	4a1d      	ldr	r2, [pc, #116]	; (80077d0 <UART_SetConfig+0xacc>)
 800775a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800775e:	461a      	mov	r2, r3
 8007760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007762:	fbb3 f2f2 	udiv	r2, r3, r2
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	441a      	add	r2, r3
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	fbb2 f3f3 	udiv	r3, r2, r3
 8007776:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	2b0f      	cmp	r3, #15
 800777c:	d909      	bls.n	8007792 <UART_SetConfig+0xa8e>
 800777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007784:	d205      	bcs.n	8007792 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	b29a      	uxth	r2, r3
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60da      	str	r2, [r3, #12]
 8007790:	e002      	b.n	8007798 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2201      	movs	r2, #1
 800779c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2200      	movs	r2, #0
 80077ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2200      	movs	r2, #0
 80077b2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80077b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3748      	adds	r7, #72	; 0x48
 80077bc:	46bd      	mov	sp, r7
 80077be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077c2:	bf00      	nop
 80077c4:	58024400 	.word	0x58024400
 80077c8:	03d09000 	.word	0x03d09000
 80077cc:	003d0900 	.word	0x003d0900
 80077d0:	0800bec8 	.word	0x0800bec8

080077d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00a      	beq.n	8007886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01a      	beq.n	80078ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d2:	d10a      	bne.n	80078ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
  }
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b098      	sub	sp, #96	; 0x60
 800791c:	af02      	add	r7, sp, #8
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007928:	f7f9 fc44 	bl	80011b4 <HAL_GetTick>
 800792c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b08      	cmp	r3, #8
 800793a:	d12f      	bne.n	800799c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800793c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007944:	2200      	movs	r2, #0
 8007946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f88e 	bl	8007a6c <UART_WaitOnFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d022      	beq.n	800799c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800796a:	653b      	str	r3, [r7, #80]	; 0x50
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007974:	647b      	str	r3, [r7, #68]	; 0x44
 8007976:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800797a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e6      	bne.n	8007956 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e063      	b.n	8007a64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d149      	bne.n	8007a3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b2:	2200      	movs	r2, #0
 80079b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f857 	bl	8007a6c <UART_WaitOnFlagUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d03c      	beq.n	8007a3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	623b      	str	r3, [r7, #32]
   return(result);
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e2:	633b      	str	r3, [r7, #48]	; 0x30
 80079e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e6      	bne.n	80079c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f023 0301 	bic.w	r3, r3, #1
 8007a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3308      	adds	r3, #8
 8007a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a16:	61fa      	str	r2, [r7, #28]
 8007a18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	69b9      	ldr	r1, [r7, #24]
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	617b      	str	r3, [r7, #20]
   return(result);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e5      	bne.n	80079f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e012      	b.n	8007a64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3758      	adds	r7, #88	; 0x58
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a7c:	e049      	b.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a84:	d045      	beq.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a86:	f7f9 fb95 	bl	80011b4 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d302      	bcc.n	8007a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e048      	b.n	8007b32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d031      	beq.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d110      	bne.n	8007ade <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2208      	movs	r2, #8
 8007ac2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f839 	bl	8007b3c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2208      	movs	r2, #8
 8007ace:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e029      	b.n	8007b32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aec:	d111      	bne.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 f81f 	bl	8007b3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e00f      	b.n	8007b32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69da      	ldr	r2, [r3, #28]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	bf0c      	ite	eq
 8007b22:	2301      	moveq	r3, #1
 8007b24:	2300      	movne	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d0a6      	beq.n	8007a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b095      	sub	sp, #84	; 0x54
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	643b      	str	r3, [r7, #64]	; 0x40
 8007b64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e6      	bne.n	8007b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	4b1e      	ldr	r3, [pc, #120]	; (8007c04 <UART_EndRxTransfer+0xc8>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e5      	bne.n	8007b76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d118      	bne.n	8007be4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f023 0310 	bic.w	r3, r3, #16
 8007bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6979      	ldr	r1, [r7, #20]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e6      	bne.n	8007bb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007bf8:	bf00      	nop
 8007bfa:	3754      	adds	r7, #84	; 0x54
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	effffffe 	.word	0xeffffffe

08007c08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_UARTEx_DisableFifoMode+0x16>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e027      	b.n	8007c6e <HAL_UARTEx_DisableFifoMode+0x66>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2224      	movs	r2, #36	; 0x24
 8007c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0201 	bic.w	r2, r2, #1
 8007c44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e02d      	b.n	8007cee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2224      	movs	r2, #36	; 0x24
 8007c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0201 	bic.w	r2, r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f850 	bl	8007d74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d101      	bne.n	8007d0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	e02d      	b.n	8007d6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2224      	movs	r2, #36	; 0x24
 8007d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 0201 	bic.w	r2, r2, #1
 8007d34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f812 	bl	8007d74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
	...

08007d74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d94:	e031      	b.n	8007dfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d96:	2310      	movs	r3, #16
 8007d98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d9a:	2310      	movs	r3, #16
 8007d9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	0e5b      	lsrs	r3, r3, #25
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	0f5b      	lsrs	r3, r3, #29
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	7b3a      	ldrb	r2, [r7, #12]
 8007dc2:	4911      	ldr	r1, [pc, #68]	; (8007e08 <UARTEx_SetNbDataToProcess+0x94>)
 8007dc4:	5c8a      	ldrb	r2, [r1, r2]
 8007dc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dca:	7b3a      	ldrb	r2, [r7, #12]
 8007dcc:	490f      	ldr	r1, [pc, #60]	; (8007e0c <UARTEx_SetNbDataToProcess+0x98>)
 8007dce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	7b7a      	ldrb	r2, [r7, #13]
 8007de0:	4909      	ldr	r1, [pc, #36]	; (8007e08 <UARTEx_SetNbDataToProcess+0x94>)
 8007de2:	5c8a      	ldrb	r2, [r1, r2]
 8007de4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007de8:	7b7a      	ldrb	r2, [r7, #13]
 8007dea:	4908      	ldr	r1, [pc, #32]	; (8007e0c <UARTEx_SetNbDataToProcess+0x98>)
 8007dec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	0800bee0 	.word	0x0800bee0
 8007e0c:	0800bee8 	.word	0x0800bee8

08007e10 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007e10:	b084      	sub	sp, #16
 8007e12:	b480      	push	{r7}
 8007e14:	b085      	sub	sp, #20
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	f107 001c 	add.w	r0, r7, #28
 8007e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007e26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007e28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007e2a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8007e2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8007e32:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8007e36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <SDMMC_Init+0x50>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	b004      	add	sp, #16
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	ffc02c00 	.word	0xffc02c00

08007e64 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f043 0203 	orr.w	r2, r3, #3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0303 	and.w	r3, r3, #3
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007efe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007f04:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007f0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <SDMMC_SendCommand+0x50>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	fffee0c0 	.word	0xfffee0c0

08007f34 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	b2db      	uxtb	r3, r3
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3314      	adds	r3, #20
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	4413      	add	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007f9a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007fa0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007fa6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0

}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007fda:	2310      	movs	r3, #16
 8007fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fee:	f107 0308 	add.w	r3, r7, #8
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff ff73 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ffe:	2110      	movs	r1, #16
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fa5f 	bl	80084c4 <SDMMC_GetCmdResp1>
 8008006:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008008:	69fb      	ldr	r3, [r7, #28]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3720      	adds	r7, #32
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b088      	sub	sp, #32
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008020:	2311      	movs	r3, #17
 8008022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800802e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008032:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff ff50 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008040:	f241 3288 	movw	r2, #5000	; 0x1388
 8008044:	2111      	movs	r1, #17
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fa3c 	bl	80084c4 <SDMMC_GetCmdResp1>
 800804c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800804e:	69fb      	ldr	r3, [r7, #28]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008066:	2312      	movs	r3, #18
 8008068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800806a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800806e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008078:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800807a:	f107 0308 	add.w	r3, r7, #8
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff ff2d 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008086:	f241 3288 	movw	r2, #5000	; 0x1388
 800808a:	2112      	movs	r1, #18
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fa19 	bl	80084c4 <SDMMC_GetCmdResp1>
 8008092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008094:	69fb      	ldr	r3, [r7, #28]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3720      	adds	r7, #32
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b088      	sub	sp, #32
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80080ac:	2318      	movs	r3, #24
 80080ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080c0:	f107 0308 	add.w	r3, r7, #8
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff ff0a 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80080cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d0:	2118      	movs	r1, #24
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f9f6 	bl	80084c4 <SDMMC_GetCmdResp1>
 80080d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080da:	69fb      	ldr	r3, [r7, #28]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80080f2:	2319      	movs	r3, #25
 80080f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008106:	f107 0308 	add.w	r3, r7, #8
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fee7 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008112:	f241 3288 	movw	r2, #5000	; 0x1388
 8008116:	2119      	movs	r1, #25
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f9d3 	bl	80084c4 <SDMMC_GetCmdResp1>
 800811e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008120:	69fb      	ldr	r3, [r7, #28]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008138:	230c      	movs	r3, #12
 800813a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800813c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008142:	2300      	movs	r3, #0
 8008144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800814a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008164:	f107 0308 	add.w	r3, r7, #8
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff feb8 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008170:	4a0b      	ldr	r2, [pc, #44]	; (80081a0 <SDMMC_CmdStopTransfer+0x74>)
 8008172:	210c      	movs	r1, #12
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f9a5 	bl	80084c4 <SDMMC_GetCmdResp1>
 800817a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800818e:	d101      	bne.n	8008194 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008190:	2300      	movs	r3, #0
 8008192:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008194:	69fb      	ldr	r3, [r7, #28]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3720      	adds	r7, #32
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	05f5e100 	.word	0x05f5e100

080081a4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b088      	sub	sp, #32
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80081b2:	2307      	movs	r3, #7
 80081b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081bc:	2300      	movs	r3, #0
 80081be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081c6:	f107 0308 	add.w	r3, r7, #8
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff fe87 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80081d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081d6:	2107      	movs	r1, #7
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f973 	bl	80084c4 <SDMMC_GetCmdResp1>
 80081de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081e0:	69fb      	ldr	r3, [r7, #28]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3720      	adds	r7, #32
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b088      	sub	sp, #32
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80081fa:	2300      	movs	r3, #0
 80081fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008206:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008208:	f107 0308 	add.w	r3, r7, #8
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff fe66 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fb97 	bl	8008948 <SDMMC_GetCmdError>
 800821a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800821c:	69fb      	ldr	r3, [r7, #28]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3720      	adds	r7, #32
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b088      	sub	sp, #32
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800822e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008234:	2308      	movs	r3, #8
 8008236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800823c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800823e:	2300      	movs	r3, #0
 8008240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008246:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008248:	f107 0308 	add.w	r3, r7, #8
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff fe46 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb29 	bl	80088ac <SDMMC_GetCmdResp7>
 800825a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800825c:	69fb      	ldr	r3, [r7, #28]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b088      	sub	sp, #32
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008274:	2337      	movs	r3, #55	; 0x37
 8008276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800827c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008286:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008288:	f107 0308 	add.w	r3, r7, #8
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff fe26 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008294:	f241 3288 	movw	r2, #5000	; 0x1388
 8008298:	2137      	movs	r1, #55	; 0x37
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f912 	bl	80084c4 <SDMMC_GetCmdResp1>
 80082a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082a2:	69fb      	ldr	r3, [r7, #28]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3720      	adds	r7, #32
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80082ba:	2329      	movs	r3, #41	; 0x29
 80082bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082ce:	f107 0308 	add.w	r3, r7, #8
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff fe03 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa2e 	bl	800873c <SDMMC_GetCmdResp3>
 80082e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082e2:	69fb      	ldr	r3, [r7, #28]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80082fa:	2306      	movs	r3, #6
 80082fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800830c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800830e:	f107 0308 	add.w	r3, r7, #8
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff fde3 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800831a:	f241 3288 	movw	r2, #5000	; 0x1388
 800831e:	2106      	movs	r1, #6
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8cf 	bl	80084c4 <SDMMC_GetCmdResp1>
 8008326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008328:	69fb      	ldr	r3, [r7, #28]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3720      	adds	r7, #32
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b088      	sub	sp, #32
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800833e:	2333      	movs	r3, #51	; 0x33
 8008340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008348:	2300      	movs	r3, #0
 800834a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800834c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008350:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008352:	f107 0308 	add.w	r3, r7, #8
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff fdc1 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800835e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008362:	2133      	movs	r1, #51	; 0x33
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f8ad 	bl	80084c4 <SDMMC_GetCmdResp1>
 800836a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800836c:	69fb      	ldr	r3, [r7, #28]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b088      	sub	sp, #32
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008382:	2302      	movs	r3, #2
 8008384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008386:	f44f 7340 	mov.w	r3, #768	; 0x300
 800838a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008394:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008396:	f107 0308 	add.w	r3, r7, #8
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fd9f 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f980 	bl	80086a8 <SDMMC_GetCmdResp2>
 80083a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083aa:	69fb      	ldr	r3, [r7, #28]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3720      	adds	r7, #32
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80083c2:	2309      	movs	r3, #9
 80083c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80083c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80083ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083d6:	f107 0308 	add.w	r3, r7, #8
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff fd7f 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f960 	bl	80086a8 <SDMMC_GetCmdResp2>
 80083e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ea:	69fb      	ldr	r3, [r7, #28]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3720      	adds	r7, #32
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008402:	2303      	movs	r3, #3
 8008404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800840a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008416:	f107 0308 	add.w	r3, r7, #8
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff fd5f 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	2103      	movs	r1, #3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f9c8 	bl	80087bc <SDMMC_GetCmdResp6>
 800842c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800842e:	69fb      	ldr	r3, [r7, #28]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008446:	230d      	movs	r3, #13
 8008448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800844a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800844e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008450:	2300      	movs	r3, #0
 8008452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008458:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800845a:	f107 0308 	add.w	r3, r7, #8
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff fd3d 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008466:	f241 3288 	movw	r2, #5000	; 0x1388
 800846a:	210d      	movs	r1, #13
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f829 	bl	80084c4 <SDMMC_GetCmdResp1>
 8008472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008474:	69fb      	ldr	r3, [r7, #28]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3720      	adds	r7, #32
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b088      	sub	sp, #32
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800848a:	230d      	movs	r3, #13
 800848c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800848e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800849c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800849e:	f107 0308 	add.w	r3, r7, #8
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff fd1b 	bl	8007ee0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80084aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ae:	210d      	movs	r1, #13
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f807 	bl	80084c4 <SDMMC_GetCmdResp1>
 80084b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084b8:	69fb      	ldr	r3, [r7, #28]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3720      	adds	r7, #32
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
	...

080084c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	460b      	mov	r3, r1
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80084d2:	4b70      	ldr	r3, [pc, #448]	; (8008694 <SDMMC_GetCmdResp1+0x1d0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a70      	ldr	r2, [pc, #448]	; (8008698 <SDMMC_GetCmdResp1+0x1d4>)
 80084d8:	fba2 2303 	umull	r2, r3, r2, r3
 80084dc:	0a5a      	lsrs	r2, r3, #9
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	fb02 f303 	mul.w	r3, r2, r3
 80084e4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	1e5a      	subs	r2, r3, #1
 80084ea:	61fa      	str	r2, [r7, #28]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084f4:	e0c9      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	4b67      	ldr	r3, [pc, #412]	; (800869c <SDMMC_GetCmdResp1+0x1d8>)
 8008500:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0ef      	beq.n	80084e6 <SDMMC_GetCmdResp1+0x22>
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1ea      	bne.n	80084e6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d004      	beq.n	8008526 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2204      	movs	r2, #4
 8008520:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008522:	2304      	movs	r3, #4
 8008524:	e0b1      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2201      	movs	r2, #1
 8008536:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008538:	2301      	movs	r3, #1
 800853a:	e0a6      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4a58      	ldr	r2, [pc, #352]	; (80086a0 <SDMMC_GetCmdResp1+0x1dc>)
 8008540:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f7ff fcf6 	bl	8007f34 <SDMMC_GetCommandResponse>
 8008548:	4603      	mov	r3, r0
 800854a:	461a      	mov	r2, r3
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	4293      	cmp	r3, r2
 8008550:	d001      	beq.n	8008556 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008552:	2301      	movs	r3, #1
 8008554:	e099      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008556:	2100      	movs	r1, #0
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f7ff fcf8 	bl	8007f4e <SDMMC_GetResponse>
 800855e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	4b50      	ldr	r3, [pc, #320]	; (80086a4 <SDMMC_GetCmdResp1+0x1e0>)
 8008564:	4013      	ands	r3, r2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800856a:	2300      	movs	r3, #0
 800856c:	e08d      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	da02      	bge.n	800857a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008574:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008578:	e087      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	e080      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008592:	2380      	movs	r3, #128	; 0x80
 8008594:	e079      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80085a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085a4:	e071      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80085b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085b4:	e069      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80085c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c4:	e061      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80085d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085d4:	e059      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80085e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085e4:	e051      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80085f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085f4:	e049      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008604:	e041      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008614:	e039      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008624:	e031      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008630:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008634:	e029      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008640:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008644:	e021      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008650:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008654:	e019      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008660:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008664:	e011      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008670:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008674:	e009      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f003 0308 	and.w	r3, r3, #8
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008680:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008684:	e001      	b.n	800868a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800868a:	4618      	mov	r0, r3
 800868c:	3720      	adds	r7, #32
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	24000000 	.word	0x24000000
 8008698:	10624dd3 	.word	0x10624dd3
 800869c:	00200045 	.word	0x00200045
 80086a0:	002000c5 	.word	0x002000c5
 80086a4:	fdffe008 	.word	0xfdffe008

080086a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80086b0:	4b1f      	ldr	r3, [pc, #124]	; (8008730 <SDMMC_GetCmdResp2+0x88>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a1f      	ldr	r2, [pc, #124]	; (8008734 <SDMMC_GetCmdResp2+0x8c>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	0a5b      	lsrs	r3, r3, #9
 80086bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c0:	fb02 f303 	mul.w	r3, r2, r3
 80086c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	1e5a      	subs	r2, r3, #1
 80086ca:	60fa      	str	r2, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086d4:	e026      	b.n	8008724 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0ef      	beq.n	80086c6 <SDMMC_GetCmdResp2+0x1e>
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1ea      	bne.n	80086c6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d004      	beq.n	8008706 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2204      	movs	r2, #4
 8008700:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008702:	2304      	movs	r3, #4
 8008704:	e00e      	b.n	8008724 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008718:	2301      	movs	r3, #1
 800871a:	e003      	b.n	8008724 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a06      	ldr	r2, [pc, #24]	; (8008738 <SDMMC_GetCmdResp2+0x90>)
 8008720:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	24000000 	.word	0x24000000
 8008734:	10624dd3 	.word	0x10624dd3
 8008738:	002000c5 	.word	0x002000c5

0800873c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <SDMMC_GetCmdResp3+0x74>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a1a      	ldr	r2, [pc, #104]	; (80087b4 <SDMMC_GetCmdResp3+0x78>)
 800874a:	fba2 2303 	umull	r2, r3, r2, r3
 800874e:	0a5b      	lsrs	r3, r3, #9
 8008750:	f241 3288 	movw	r2, #5000	; 0x1388
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	1e5a      	subs	r2, r3, #1
 800875e:	60fa      	str	r2, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d102      	bne.n	800876a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008764:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008768:	e01b      	b.n	80087a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0ef      	beq.n	800875a <SDMMC_GetCmdResp3+0x1e>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1ea      	bne.n	800875a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2204      	movs	r2, #4
 8008794:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008796:	2304      	movs	r3, #4
 8008798:	e003      	b.n	80087a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a06      	ldr	r2, [pc, #24]	; (80087b8 <SDMMC_GetCmdResp3+0x7c>)
 800879e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	24000000 	.word	0x24000000
 80087b4:	10624dd3 	.word	0x10624dd3
 80087b8:	002000c5 	.word	0x002000c5

080087bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	460b      	mov	r3, r1
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80087ca:	4b35      	ldr	r3, [pc, #212]	; (80088a0 <SDMMC_GetCmdResp6+0xe4>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a35      	ldr	r2, [pc, #212]	; (80088a4 <SDMMC_GetCmdResp6+0xe8>)
 80087d0:	fba2 2303 	umull	r2, r3, r2, r3
 80087d4:	0a5b      	lsrs	r3, r3, #9
 80087d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087da:	fb02 f303 	mul.w	r3, r2, r3
 80087de:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	1e5a      	subs	r2, r3, #1
 80087e4:	61fa      	str	r2, [r7, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087ee:	e052      	b.n	8008896 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0ef      	beq.n	80087e0 <SDMMC_GetCmdResp6+0x24>
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1ea      	bne.n	80087e0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	d004      	beq.n	8008820 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2204      	movs	r2, #4
 800881a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800881c:	2304      	movs	r3, #4
 800881e:	e03a      	b.n	8008896 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d004      	beq.n	8008836 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008832:	2301      	movs	r3, #1
 8008834:	e02f      	b.n	8008896 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7ff fb7c 	bl	8007f34 <SDMMC_GetCommandResponse>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	4293      	cmp	r3, r2
 8008844:	d001      	beq.n	800884a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008846:	2301      	movs	r3, #1
 8008848:	e025      	b.n	8008896 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4a16      	ldr	r2, [pc, #88]	; (80088a8 <SDMMC_GetCmdResp6+0xec>)
 800884e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008850:	2100      	movs	r1, #0
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fb7b 	bl	8007f4e <SDMMC_GetResponse>
 8008858:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	0c1b      	lsrs	r3, r3, #16
 8008868:	b29a      	uxth	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800886e:	2300      	movs	r3, #0
 8008870:	e011      	b.n	8008896 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800887c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008880:	e009      	b.n	8008896 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800888c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008890:	e001      	b.n	8008896 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3720      	adds	r7, #32
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	24000000 	.word	0x24000000
 80088a4:	10624dd3 	.word	0x10624dd3
 80088a8:	002000c5 	.word	0x002000c5

080088ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80088b4:	4b22      	ldr	r3, [pc, #136]	; (8008940 <SDMMC_GetCmdResp7+0x94>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a22      	ldr	r2, [pc, #136]	; (8008944 <SDMMC_GetCmdResp7+0x98>)
 80088ba:	fba2 2303 	umull	r2, r3, r2, r3
 80088be:	0a5b      	lsrs	r3, r3, #9
 80088c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c4:	fb02 f303 	mul.w	r3, r2, r3
 80088c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	1e5a      	subs	r2, r3, #1
 80088ce:	60fa      	str	r2, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088d8:	e02c      	b.n	8008934 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0ef      	beq.n	80088ca <SDMMC_GetCmdResp7+0x1e>
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1ea      	bne.n	80088ca <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d004      	beq.n	800890a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2204      	movs	r2, #4
 8008904:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008906:	2304      	movs	r3, #4
 8008908:	e014      	b.n	8008934 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d004      	beq.n	8008920 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800891c:	2301      	movs	r3, #1
 800891e:	e009      	b.n	8008934 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2240      	movs	r2, #64	; 0x40
 8008930:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008932:	2300      	movs	r3, #0

}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	24000000 	.word	0x24000000
 8008944:	10624dd3 	.word	0x10624dd3

08008948 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008950:	4b11      	ldr	r3, [pc, #68]	; (8008998 <SDMMC_GetCmdError+0x50>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a11      	ldr	r2, [pc, #68]	; (800899c <SDMMC_GetCmdError+0x54>)
 8008956:	fba2 2303 	umull	r2, r3, r2, r3
 800895a:	0a5b      	lsrs	r3, r3, #9
 800895c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008960:	fb02 f303 	mul.w	r3, r2, r3
 8008964:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	1e5a      	subs	r2, r3, #1
 800896a:	60fa      	str	r2, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008970:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008974:	e009      	b.n	800898a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0f1      	beq.n	8008966 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a06      	ldr	r2, [pc, #24]	; (80089a0 <SDMMC_GetCmdError+0x58>)
 8008986:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	24000000 	.word	0x24000000
 800899c:	10624dd3 	.word	0x10624dd3
 80089a0:	002000c5 	.word	0x002000c5

080089a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80089a8:	4904      	ldr	r1, [pc, #16]	; (80089bc <MX_FATFS_Init+0x18>)
 80089aa:	4805      	ldr	r0, [pc, #20]	; (80089c0 <MX_FATFS_Init+0x1c>)
 80089ac:	f002 fc8a 	bl	800b2c4 <FATFS_LinkDriver>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <MX_FATFS_Init+0x20>)
 80089b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80089b8:	bf00      	nop
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	240001ac 	.word	0x240001ac
 80089c0:	0800bef0 	.word	0x0800bef0
 80089c4:	240001a8 	.word	0x240001a8

080089c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80089cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80089e2:	f000 f879 	bl	8008ad8 <BSP_SD_IsDetected>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d001      	beq.n	80089f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80089ec:	2302      	movs	r3, #2
 80089ee:	e012      	b.n	8008a16 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80089f0:	480b      	ldr	r0, [pc, #44]	; (8008a20 <BSP_SD_Init+0x48>)
 80089f2:	f7fc fcf7 	bl	80053e4 <HAL_SD_Init>
 80089f6:	4603      	mov	r3, r0
 80089f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008a00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008a04:	4806      	ldr	r0, [pc, #24]	; (8008a20 <BSP_SD_Init+0x48>)
 8008a06:	f7fd fbb3 	bl	8006170 <HAL_SD_ConfigWideBusOperation>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008a14:	79fb      	ldrb	r3, [r7, #7]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	24000090 	.word	0x24000090

08008a24 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	68f9      	ldr	r1, [r7, #12]
 8008a40:	4806      	ldr	r0, [pc, #24]	; (8008a5c <BSP_SD_ReadBlocks+0x38>)
 8008a42:	f7fc fdef 	bl	8005624 <HAL_SD_ReadBlocks>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	24000090 	.word	0x24000090

08008a60 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	4806      	ldr	r0, [pc, #24]	; (8008a98 <BSP_SD_WriteBlocks+0x38>)
 8008a7e:	f7fc ff5b 	bl	8005938 <HAL_SD_WriteBlocks>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	24000090 	.word	0x24000090

08008a9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008aa0:	4805      	ldr	r0, [pc, #20]	; (8008ab8 <BSP_SD_GetCardState+0x1c>)
 8008aa2:	f7fd fc77 	bl	8006394 <HAL_SD_GetCardState>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	bf14      	ite	ne
 8008aac:	2301      	movne	r3, #1
 8008aae:	2300      	moveq	r3, #0
 8008ab0:	b2db      	uxtb	r3, r3
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	24000090 	.word	0x24000090

08008abc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	4803      	ldr	r0, [pc, #12]	; (8008ad4 <BSP_SD_GetCardInfo+0x18>)
 8008ac8:	f7fd fb26 	bl	8006118 <HAL_SD_GetCardInfo>
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	24000090 	.word	0x24000090

08008ad8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008ae2:	f000 f80b 	bl	8008afc <BSP_PlatformIsDetected>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008aec:	2300      	movs	r3, #0
 8008aee:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	b2db      	uxtb	r3, r3
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008b02:	2301      	movs	r3, #1
 8008b04:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b0a:	4806      	ldr	r0, [pc, #24]	; (8008b24 <BSP_PlatformIsDetected+0x28>)
 8008b0c:	f7f8 fe22 	bl	8001754 <HAL_GPIO_ReadPin>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008b16:	2300      	movs	r3, #0
 8008b18:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	58022000 	.word	0x58022000

08008b28 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <SD_CheckStatus+0x38>)
 8008b34:	2201      	movs	r2, #1
 8008b36:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008b38:	f7ff ffb0 	bl	8008a9c <BSP_SD_GetCardState>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d107      	bne.n	8008b52 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008b42:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <SD_CheckStatus+0x38>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f023 0301 	bic.w	r3, r3, #1
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <SD_CheckStatus+0x38>)
 8008b50:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008b52:	4b03      	ldr	r3, [pc, #12]	; (8008b60 <SD_CheckStatus+0x38>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	b2db      	uxtb	r3, r3
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	2400000d 	.word	0x2400000d

08008b64 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008b6e:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <SD_initialize+0x38>)
 8008b70:	2201      	movs	r2, #1
 8008b72:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008b74:	f7ff ff30 	bl	80089d8 <BSP_SD_Init>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d107      	bne.n	8008b8e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff ffd1 	bl	8008b28 <SD_CheckStatus>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <SD_initialize+0x38>)
 8008b8c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008b8e:	4b03      	ldr	r3, [pc, #12]	; (8008b9c <SD_initialize+0x38>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	b2db      	uxtb	r3, r3
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	2400000d 	.word	0x2400000d

08008ba0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff ffbb 	bl	8008b28 <SD_CheckStatus>
 8008bb2:	4603      	mov	r3, r0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	603b      	str	r3, [r7, #0]
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	68b8      	ldr	r0, [r7, #8]
 8008bda:	f7ff ff23 	bl	8008a24 <BSP_SD_ReadBlocks>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d107      	bne.n	8008bf4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008be4:	bf00      	nop
 8008be6:	f7ff ff59 	bl	8008a9c <BSP_SD_GetCardState>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1fa      	bne.n	8008be6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b086      	sub	sp, #24
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008c12:	f04f 33ff 	mov.w	r3, #4294967295
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	6879      	ldr	r1, [r7, #4]
 8008c1a:	68b8      	ldr	r0, [r7, #8]
 8008c1c:	f7ff ff20 	bl	8008a60 <BSP_SD_WriteBlocks>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d107      	bne.n	8008c36 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008c26:	bf00      	nop
 8008c28:	f7ff ff38 	bl	8008a9c <BSP_SD_GetCardState>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1fa      	bne.n	8008c28 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08c      	sub	sp, #48	; 0x30
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	603a      	str	r2, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008c56:	4b25      	ldr	r3, [pc, #148]	; (8008cec <SD_ioctl+0xac>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <SD_ioctl+0x28>
 8008c64:	2303      	movs	r3, #3
 8008c66:	e03c      	b.n	8008ce2 <SD_ioctl+0xa2>

  switch (cmd)
 8008c68:	79bb      	ldrb	r3, [r7, #6]
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d834      	bhi.n	8008cd8 <SD_ioctl+0x98>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <SD_ioctl+0x34>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008c85 	.word	0x08008c85
 8008c78:	08008c8d 	.word	0x08008c8d
 8008c7c:	08008ca5 	.word	0x08008ca5
 8008c80:	08008cbf 	.word	0x08008cbf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008c8a:	e028      	b.n	8008cde <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008c8c:	f107 0308 	add.w	r3, r7, #8
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff ff13 	bl	8008abc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008c96:	6a3a      	ldr	r2, [r7, #32]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008ca2:	e01c      	b.n	8008cde <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008ca4:	f107 0308 	add.w	r3, r7, #8
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff ff07 	bl	8008abc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008cbc:	e00f      	b.n	8008cde <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008cbe:	f107 0308 	add.w	r3, r7, #8
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fefa 	bl	8008abc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	0a5a      	lsrs	r2, r3, #9
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008cd6:	e002      	b.n	8008cde <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008cd8:	2304      	movs	r3, #4
 8008cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3730      	adds	r7, #48	; 0x30
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	2400000d 	.word	0x2400000d

08008cf0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	4a08      	ldr	r2, [pc, #32]	; (8008d20 <disk_status+0x30>)
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	79fa      	ldrb	r2, [r7, #7]
 8008d08:	4905      	ldr	r1, [pc, #20]	; (8008d20 <disk_status+0x30>)
 8008d0a:	440a      	add	r2, r1
 8008d0c:	7a12      	ldrb	r2, [r2, #8]
 8008d0e:	4610      	mov	r0, r2
 8008d10:	4798      	blx	r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	240001d8 	.word	0x240001d8

08008d24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	4a0d      	ldr	r2, [pc, #52]	; (8008d6c <disk_initialize+0x48>)
 8008d36:	5cd3      	ldrb	r3, [r2, r3]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d111      	bne.n	8008d60 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008d3c:	79fb      	ldrb	r3, [r7, #7]
 8008d3e:	4a0b      	ldr	r2, [pc, #44]	; (8008d6c <disk_initialize+0x48>)
 8008d40:	2101      	movs	r1, #1
 8008d42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <disk_initialize+0x48>)
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	79fa      	ldrb	r2, [r7, #7]
 8008d52:	4906      	ldr	r1, [pc, #24]	; (8008d6c <disk_initialize+0x48>)
 8008d54:	440a      	add	r2, r1
 8008d56:	7a12      	ldrb	r2, [r2, #8]
 8008d58:	4610      	mov	r0, r2
 8008d5a:	4798      	blx	r3
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	240001d8 	.word	0x240001d8

08008d70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	607a      	str	r2, [r7, #4]
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	4a0a      	ldr	r2, [pc, #40]	; (8008dac <disk_read+0x3c>)
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	689c      	ldr	r4, [r3, #8]
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	4a07      	ldr	r2, [pc, #28]	; (8008dac <disk_read+0x3c>)
 8008d90:	4413      	add	r3, r2
 8008d92:	7a18      	ldrb	r0, [r3, #8]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	47a0      	blx	r4
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd90      	pop	{r4, r7, pc}
 8008daa:	bf00      	nop
 8008dac:	240001d8 	.word	0x240001d8

08008db0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008db0:	b590      	push	{r4, r7, lr}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	607a      	str	r2, [r7, #4]
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
 8008dc2:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <disk_write+0x3c>)
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	68dc      	ldr	r4, [r3, #12]
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	4a07      	ldr	r2, [pc, #28]	; (8008dec <disk_write+0x3c>)
 8008dd0:	4413      	add	r3, r2
 8008dd2:	7a18      	ldrb	r0, [r3, #8]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	47a0      	blx	r4
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]
  return res;
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd90      	pop	{r4, r7, pc}
 8008dea:	bf00      	nop
 8008dec:	240001d8 	.word	0x240001d8

08008df0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	603a      	str	r2, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	4a09      	ldr	r2, [pc, #36]	; (8008e28 <disk_ioctl+0x38>)
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	79fa      	ldrb	r2, [r7, #7]
 8008e0e:	4906      	ldr	r1, [pc, #24]	; (8008e28 <disk_ioctl+0x38>)
 8008e10:	440a      	add	r2, r1
 8008e12:	7a10      	ldrb	r0, [r2, #8]
 8008e14:	79b9      	ldrb	r1, [r7, #6]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	4798      	blx	r3
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	240001d8 	.word	0x240001d8

08008e2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3301      	adds	r3, #1
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008e3c:	89fb      	ldrh	r3, [r7, #14]
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	b21a      	sxth	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	b21b      	sxth	r3, r3
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	b21b      	sxth	r3, r3
 8008e4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008e4e:	89fb      	ldrh	r3, [r7, #14]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3303      	adds	r3, #3
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	021b      	lsls	r3, r3, #8
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	3202      	adds	r2, #2
 8008e74:	7812      	ldrb	r2, [r2, #0]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	3201      	adds	r2, #1
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	021b      	lsls	r3, r3, #8
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	7812      	ldrb	r2, [r2, #0]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]
	return rv;
 8008e94:	68fb      	ldr	r3, [r7, #12]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	887a      	ldrh	r2, [r7, #2]
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	887b      	ldrh	r3, [r7, #2]
 8008ebc:	0a1b      	lsrs	r3, r3, #8
 8008ebe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	607a      	str	r2, [r7, #4]
 8008ec6:	887a      	ldrh	r2, [r7, #2]
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	701a      	strb	r2, [r3, #0]
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	b2d2      	uxtb	r2, r2
 8008eec:	701a      	strb	r2, [r3, #0]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	0a1b      	lsrs	r3, r3, #8
 8008ef2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	607a      	str	r2, [r7, #4]
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	b2d2      	uxtb	r2, r2
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	0a1b      	lsrs	r3, r3, #8
 8008f04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	b2d2      	uxtb	r2, r2
 8008f10:	701a      	strb	r2, [r3, #0]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	0a1b      	lsrs	r3, r3, #8
 8008f16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	b2d2      	uxtb	r2, r2
 8008f22:	701a      	strb	r2, [r3, #0]
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	1c53      	adds	r3, r2, #1
 8008f4e:	613b      	str	r3, [r7, #16]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	1c59      	adds	r1, r3, #1
 8008f54:	6179      	str	r1, [r7, #20]
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1f1      	bne.n	8008f4a <mem_cpy+0x1a>
	}
}
 8008f66:	bf00      	nop
 8008f68:	371c      	adds	r7, #28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f72:	b480      	push	{r7}
 8008f74:	b087      	sub	sp, #28
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	1c5a      	adds	r2, r3, #1
 8008f86:	617a      	str	r2, [r7, #20]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f3      	bne.n	8008f82 <mem_set+0x10>
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	371c      	adds	r7, #28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008fa8:	b480      	push	{r7}
 8008faa:	b089      	sub	sp, #36	; 0x24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	61fb      	str	r3, [r7, #28]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	61fa      	str	r2, [r7, #28]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	61ba      	str	r2, [r7, #24]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	1acb      	subs	r3, r1, r3
 8008fd4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <mem_cmp+0x40>
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0eb      	beq.n	8008fc0 <mem_cmp+0x18>

	return r;
 8008fe8:	697b      	ldr	r3, [r7, #20]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3724      	adds	r7, #36	; 0x24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009000:	e002      	b.n	8009008 <chk_chr+0x12>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3301      	adds	r3, #1
 8009006:	607b      	str	r3, [r7, #4]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <chk_chr+0x26>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	4293      	cmp	r3, r2
 800901a:	d1f2      	bne.n	8009002 <chk_chr+0xc>
	return *str;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	781b      	ldrb	r3, [r3, #0]
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009036:	2300      	movs	r3, #0
 8009038:	60bb      	str	r3, [r7, #8]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	60fb      	str	r3, [r7, #12]
 800903e:	e029      	b.n	8009094 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009040:	4a27      	ldr	r2, [pc, #156]	; (80090e0 <chk_lock+0xb4>)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	4413      	add	r3, r2
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01d      	beq.n	800908a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800904e:	4a24      	ldr	r2, [pc, #144]	; (80090e0 <chk_lock+0xb4>)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	4413      	add	r3, r2
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	429a      	cmp	r2, r3
 800905e:	d116      	bne.n	800908e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009060:	4a1f      	ldr	r2, [pc, #124]	; (80090e0 <chk_lock+0xb4>)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	4413      	add	r3, r2
 8009068:	3304      	adds	r3, #4
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009070:	429a      	cmp	r2, r3
 8009072:	d10c      	bne.n	800908e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009074:	4a1a      	ldr	r2, [pc, #104]	; (80090e0 <chk_lock+0xb4>)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	4413      	add	r3, r2
 800907c:	3308      	adds	r3, #8
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009084:	429a      	cmp	r2, r3
 8009086:	d102      	bne.n	800908e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009088:	e007      	b.n	800909a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800908a:	2301      	movs	r3, #1
 800908c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3301      	adds	r3, #1
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d9d2      	bls.n	8009040 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b02      	cmp	r3, #2
 800909e:	d109      	bne.n	80090b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d102      	bne.n	80090ac <chk_lock+0x80>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d101      	bne.n	80090b0 <chk_lock+0x84>
 80090ac:	2300      	movs	r3, #0
 80090ae:	e010      	b.n	80090d2 <chk_lock+0xa6>
 80090b0:	2312      	movs	r3, #18
 80090b2:	e00e      	b.n	80090d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d108      	bne.n	80090cc <chk_lock+0xa0>
 80090ba:	4a09      	ldr	r2, [pc, #36]	; (80090e0 <chk_lock+0xb4>)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	011b      	lsls	r3, r3, #4
 80090c0:	4413      	add	r3, r2
 80090c2:	330c      	adds	r3, #12
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ca:	d101      	bne.n	80090d0 <chk_lock+0xa4>
 80090cc:	2310      	movs	r3, #16
 80090ce:	e000      	b.n	80090d2 <chk_lock+0xa6>
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	240001b8 	.word	0x240001b8

080090e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090ea:	2300      	movs	r3, #0
 80090ec:	607b      	str	r3, [r7, #4]
 80090ee:	e002      	b.n	80090f6 <enq_lock+0x12>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3301      	adds	r3, #1
 80090f4:	607b      	str	r3, [r7, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d806      	bhi.n	800910a <enq_lock+0x26>
 80090fc:	4a09      	ldr	r2, [pc, #36]	; (8009124 <enq_lock+0x40>)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	011b      	lsls	r3, r3, #4
 8009102:	4413      	add	r3, r2
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1f2      	bne.n	80090f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b02      	cmp	r3, #2
 800910e:	bf14      	ite	ne
 8009110:	2301      	movne	r3, #1
 8009112:	2300      	moveq	r3, #0
 8009114:	b2db      	uxtb	r3, r3
}
 8009116:	4618      	mov	r0, r3
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	240001b8 	.word	0x240001b8

08009128 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	e01f      	b.n	8009178 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009138:	4a41      	ldr	r2, [pc, #260]	; (8009240 <inc_lock+0x118>)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	4413      	add	r3, r2
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d113      	bne.n	8009172 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800914a:	4a3d      	ldr	r2, [pc, #244]	; (8009240 <inc_lock+0x118>)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	011b      	lsls	r3, r3, #4
 8009150:	4413      	add	r3, r2
 8009152:	3304      	adds	r3, #4
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800915a:	429a      	cmp	r2, r3
 800915c:	d109      	bne.n	8009172 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800915e:	4a38      	ldr	r2, [pc, #224]	; (8009240 <inc_lock+0x118>)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	4413      	add	r3, r2
 8009166:	3308      	adds	r3, #8
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800916e:	429a      	cmp	r2, r3
 8009170:	d006      	beq.n	8009180 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3301      	adds	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d9dc      	bls.n	8009138 <inc_lock+0x10>
 800917e:	e000      	b.n	8009182 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009180:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d132      	bne.n	80091ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	e002      	b.n	8009194 <inc_lock+0x6c>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3301      	adds	r3, #1
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d806      	bhi.n	80091a8 <inc_lock+0x80>
 800919a:	4a29      	ldr	r2, [pc, #164]	; (8009240 <inc_lock+0x118>)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	011b      	lsls	r3, r3, #4
 80091a0:	4413      	add	r3, r2
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1f2      	bne.n	800918e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d101      	bne.n	80091b2 <inc_lock+0x8a>
 80091ae:	2300      	movs	r3, #0
 80091b0:	e040      	b.n	8009234 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	4922      	ldr	r1, [pc, #136]	; (8009240 <inc_lock+0x118>)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	011b      	lsls	r3, r3, #4
 80091bc:	440b      	add	r3, r1
 80091be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	491e      	ldr	r1, [pc, #120]	; (8009240 <inc_lock+0x118>)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	440b      	add	r3, r1
 80091cc:	3304      	adds	r3, #4
 80091ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	695a      	ldr	r2, [r3, #20]
 80091d4:	491a      	ldr	r1, [pc, #104]	; (8009240 <inc_lock+0x118>)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	440b      	add	r3, r1
 80091dc:	3308      	adds	r3, #8
 80091de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80091e0:	4a17      	ldr	r2, [pc, #92]	; (8009240 <inc_lock+0x118>)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	011b      	lsls	r3, r3, #4
 80091e6:	4413      	add	r3, r2
 80091e8:	330c      	adds	r3, #12
 80091ea:	2200      	movs	r2, #0
 80091ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d009      	beq.n	8009208 <inc_lock+0xe0>
 80091f4:	4a12      	ldr	r2, [pc, #72]	; (8009240 <inc_lock+0x118>)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	4413      	add	r3, r2
 80091fc:	330c      	adds	r3, #12
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <inc_lock+0xe0>
 8009204:	2300      	movs	r3, #0
 8009206:	e015      	b.n	8009234 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d108      	bne.n	8009220 <inc_lock+0xf8>
 800920e:	4a0c      	ldr	r2, [pc, #48]	; (8009240 <inc_lock+0x118>)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	4413      	add	r3, r2
 8009216:	330c      	adds	r3, #12
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	3301      	adds	r3, #1
 800921c:	b29a      	uxth	r2, r3
 800921e:	e001      	b.n	8009224 <inc_lock+0xfc>
 8009220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009224:	4906      	ldr	r1, [pc, #24]	; (8009240 <inc_lock+0x118>)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	440b      	add	r3, r1
 800922c:	330c      	adds	r3, #12
 800922e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3301      	adds	r3, #1
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	240001b8 	.word	0x240001b8

08009244 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	3b01      	subs	r3, #1
 8009250:	607b      	str	r3, [r7, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d825      	bhi.n	80092a4 <dec_lock+0x60>
		n = Files[i].ctr;
 8009258:	4a17      	ldr	r2, [pc, #92]	; (80092b8 <dec_lock+0x74>)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	4413      	add	r3, r2
 8009260:	330c      	adds	r3, #12
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009266:	89fb      	ldrh	r3, [r7, #14]
 8009268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926c:	d101      	bne.n	8009272 <dec_lock+0x2e>
 800926e:	2300      	movs	r3, #0
 8009270:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009272:	89fb      	ldrh	r3, [r7, #14]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <dec_lock+0x3a>
 8009278:	89fb      	ldrh	r3, [r7, #14]
 800927a:	3b01      	subs	r3, #1
 800927c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800927e:	4a0e      	ldr	r2, [pc, #56]	; (80092b8 <dec_lock+0x74>)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	4413      	add	r3, r2
 8009286:	330c      	adds	r3, #12
 8009288:	89fa      	ldrh	r2, [r7, #14]
 800928a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800928c:	89fb      	ldrh	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d105      	bne.n	800929e <dec_lock+0x5a>
 8009292:	4a09      	ldr	r2, [pc, #36]	; (80092b8 <dec_lock+0x74>)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	4413      	add	r3, r2
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	737b      	strb	r3, [r7, #13]
 80092a2:	e001      	b.n	80092a8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80092a4:	2302      	movs	r3, #2
 80092a6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80092a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	240001b8 	.word	0x240001b8

080092bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	e010      	b.n	80092ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80092ca:	4a0d      	ldr	r2, [pc, #52]	; (8009300 <clear_lock+0x44>)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	4413      	add	r3, r2
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d105      	bne.n	80092e6 <clear_lock+0x2a>
 80092da:	4a09      	ldr	r2, [pc, #36]	; (8009300 <clear_lock+0x44>)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	4413      	add	r3, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d9eb      	bls.n	80092ca <clear_lock+0xe>
	}
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	240001b8 	.word	0x240001b8

08009304 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	78db      	ldrb	r3, [r3, #3]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d034      	beq.n	8009382 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	7858      	ldrb	r0, [r3, #1]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009328:	2301      	movs	r3, #1
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	f7ff fd40 	bl	8008db0 <disk_write>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009336:	2301      	movs	r3, #1
 8009338:	73fb      	strb	r3, [r7, #15]
 800933a:	e022      	b.n	8009382 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	1ad2      	subs	r2, r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	429a      	cmp	r2, r3
 8009350:	d217      	bcs.n	8009382 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	789b      	ldrb	r3, [r3, #2]
 8009356:	613b      	str	r3, [r7, #16]
 8009358:	e010      	b.n	800937c <sync_window+0x78>
					wsect += fs->fsize;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	4413      	add	r3, r2
 8009362:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	7858      	ldrb	r0, [r3, #1]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800936e:	2301      	movs	r3, #1
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	f7ff fd1d 	bl	8008db0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	3b01      	subs	r3, #1
 800937a:	613b      	str	r3, [r7, #16]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d8eb      	bhi.n	800935a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d01b      	beq.n	80093dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7ff ffad 	bl	8009304 <sync_window>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d113      	bne.n	80093dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	7858      	ldrb	r0, [r3, #1]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093be:	2301      	movs	r3, #1
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	f7ff fcd5 	bl	8008d70 <disk_read>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d004      	beq.n	80093d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80093cc:	f04f 33ff 	mov.w	r3, #4294967295
 80093d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff ff87 	bl	8009304 <sync_window>
 80093f6:	4603      	mov	r3, r0
 80093f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d158      	bne.n	80094b2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2b03      	cmp	r3, #3
 8009406:	d148      	bne.n	800949a <sync_fs+0xb2>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	791b      	ldrb	r3, [r3, #4]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d144      	bne.n	800949a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3330      	adds	r3, #48	; 0x30
 8009414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009418:	2100      	movs	r1, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff fda9 	bl	8008f72 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3330      	adds	r3, #48	; 0x30
 8009424:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009428:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff fd38 	bl	8008ea2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3330      	adds	r3, #48	; 0x30
 8009436:	4921      	ldr	r1, [pc, #132]	; (80094bc <sync_fs+0xd4>)
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff fd4d 	bl	8008ed8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3330      	adds	r3, #48	; 0x30
 8009442:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009446:	491e      	ldr	r1, [pc, #120]	; (80094c0 <sync_fs+0xd8>)
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff fd45 	bl	8008ed8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3330      	adds	r3, #48	; 0x30
 8009452:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	4619      	mov	r1, r3
 800945c:	4610      	mov	r0, r2
 800945e:	f7ff fd3b 	bl	8008ed8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	3330      	adds	r3, #48	; 0x30
 8009466:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	4619      	mov	r1, r3
 8009470:	4610      	mov	r0, r2
 8009472:	f7ff fd31 	bl	8008ed8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7858      	ldrb	r0, [r3, #1]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948e:	2301      	movs	r3, #1
 8009490:	f7ff fc8e 	bl	8008db0 <disk_write>
			fs->fsi_flag = 0;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	2200      	movs	r2, #0
 80094a0:	2100      	movs	r1, #0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fca4 	bl	8008df0 <disk_ioctl>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <sync_fs+0xca>
 80094ae:	2301      	movs	r3, #1
 80094b0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	41615252 	.word	0x41615252
 80094c0:	61417272 	.word	0x61417272

080094c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	3b02      	subs	r3, #2
 80094d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	3b02      	subs	r3, #2
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d301      	bcc.n	80094e4 <clust2sect+0x20>
 80094e0:	2300      	movs	r3, #0
 80094e2:	e008      	b.n	80094f6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	895b      	ldrh	r3, [r3, #10]
 80094e8:	461a      	mov	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	fb03 f202 	mul.w	r2, r3, r2
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	4413      	add	r3, r2
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b086      	sub	sp, #24
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d904      	bls.n	8009522 <get_fat+0x20>
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	695b      	ldr	r3, [r3, #20]
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d302      	bcc.n	8009528 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009522:	2301      	movs	r3, #1
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	e08f      	b.n	8009648 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009528:	f04f 33ff 	mov.w	r3, #4294967295
 800952c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b03      	cmp	r3, #3
 8009534:	d062      	beq.n	80095fc <get_fat+0xfa>
 8009536:	2b03      	cmp	r3, #3
 8009538:	dc7c      	bgt.n	8009634 <get_fat+0x132>
 800953a:	2b01      	cmp	r3, #1
 800953c:	d002      	beq.n	8009544 <get_fat+0x42>
 800953e:	2b02      	cmp	r3, #2
 8009540:	d042      	beq.n	80095c8 <get_fat+0xc6>
 8009542:	e077      	b.n	8009634 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4413      	add	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	6a1a      	ldr	r2, [r3, #32]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	0a5b      	lsrs	r3, r3, #9
 800955a:	4413      	add	r3, r2
 800955c:	4619      	mov	r1, r3
 800955e:	6938      	ldr	r0, [r7, #16]
 8009560:	f7ff ff14 	bl	800938c <move_window>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d167      	bne.n	800963a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	60fa      	str	r2, [r7, #12]
 8009570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	4413      	add	r3, r2
 8009578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800957c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	6a1a      	ldr	r2, [r3, #32]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	0a5b      	lsrs	r3, r3, #9
 8009586:	4413      	add	r3, r2
 8009588:	4619      	mov	r1, r3
 800958a:	6938      	ldr	r0, [r7, #16]
 800958c:	f7ff fefe 	bl	800938c <move_window>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d153      	bne.n	800963e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4413      	add	r3, r2
 80095a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095a4:	021b      	lsls	r3, r3, #8
 80095a6:	461a      	mov	r2, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <get_fat+0xbc>
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	091b      	lsrs	r3, r3, #4
 80095bc:	e002      	b.n	80095c4 <get_fat+0xc2>
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c4:	617b      	str	r3, [r7, #20]
			break;
 80095c6:	e03f      	b.n	8009648 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	6a1a      	ldr	r2, [r3, #32]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	4413      	add	r3, r2
 80095d2:	4619      	mov	r1, r3
 80095d4:	6938      	ldr	r0, [r7, #16]
 80095d6:	f7ff fed9 	bl	800938c <move_window>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d130      	bne.n	8009642 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80095ee:	4413      	add	r3, r2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7ff fc1b 	bl	8008e2c <ld_word>
 80095f6:	4603      	mov	r3, r0
 80095f8:	617b      	str	r3, [r7, #20]
			break;
 80095fa:	e025      	b.n	8009648 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6a1a      	ldr	r2, [r3, #32]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	09db      	lsrs	r3, r3, #7
 8009604:	4413      	add	r3, r2
 8009606:	4619      	mov	r1, r3
 8009608:	6938      	ldr	r0, [r7, #16]
 800960a:	f7ff febf 	bl	800938c <move_window>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d118      	bne.n	8009646 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009622:	4413      	add	r3, r2
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff fc19 	bl	8008e5c <ld_dword>
 800962a:	4603      	mov	r3, r0
 800962c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009630:	617b      	str	r3, [r7, #20]
			break;
 8009632:	e009      	b.n	8009648 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009634:	2301      	movs	r3, #1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	e006      	b.n	8009648 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800963a:	bf00      	nop
 800963c:	e004      	b.n	8009648 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800963e:	bf00      	nop
 8009640:	e002      	b.n	8009648 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009642:	bf00      	nop
 8009644:	e000      	b.n	8009648 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009646:	bf00      	nop
		}
	}

	return val;
 8009648:	697b      	ldr	r3, [r7, #20]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009652:	b590      	push	{r4, r7, lr}
 8009654:	b089      	sub	sp, #36	; 0x24
 8009656:	af00      	add	r7, sp, #0
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	60b9      	str	r1, [r7, #8]
 800965c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800965e:	2302      	movs	r3, #2
 8009660:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b01      	cmp	r3, #1
 8009666:	f240 80d2 	bls.w	800980e <put_fat+0x1bc>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	429a      	cmp	r2, r3
 8009672:	f080 80cc 	bcs.w	800980e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b03      	cmp	r3, #3
 800967c:	f000 8096 	beq.w	80097ac <put_fat+0x15a>
 8009680:	2b03      	cmp	r3, #3
 8009682:	f300 80cd 	bgt.w	8009820 <put_fat+0x1ce>
 8009686:	2b01      	cmp	r3, #1
 8009688:	d002      	beq.n	8009690 <put_fat+0x3e>
 800968a:	2b02      	cmp	r3, #2
 800968c:	d06e      	beq.n	800976c <put_fat+0x11a>
 800968e:	e0c7      	b.n	8009820 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	61bb      	str	r3, [r7, #24]
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	085b      	lsrs	r3, r3, #1
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	4413      	add	r3, r2
 800969c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a1a      	ldr	r2, [r3, #32]
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	0a5b      	lsrs	r3, r3, #9
 80096a6:	4413      	add	r3, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f7ff fe6e 	bl	800938c <move_window>
 80096b0:	4603      	mov	r3, r0
 80096b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096b4:	7ffb      	ldrb	r3, [r7, #31]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f040 80ab 	bne.w	8009812 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	1c59      	adds	r1, r3, #1
 80096c6:	61b9      	str	r1, [r7, #24]
 80096c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096cc:	4413      	add	r3, r2
 80096ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00d      	beq.n	80096f6 <put_fat+0xa4>
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b25b      	sxtb	r3, r3
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	b25a      	sxtb	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	011b      	lsls	r3, r3, #4
 80096ec:	b25b      	sxtb	r3, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	b25b      	sxtb	r3, r3
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	e001      	b.n	80096fa <put_fat+0xa8>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a1a      	ldr	r2, [r3, #32]
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	0a5b      	lsrs	r3, r3, #9
 800970c:	4413      	add	r3, r2
 800970e:	4619      	mov	r1, r3
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff fe3b 	bl	800938c <move_window>
 8009716:	4603      	mov	r3, r0
 8009718:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800971a:	7ffb      	ldrb	r3, [r7, #31]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d17a      	bne.n	8009816 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972c:	4413      	add	r3, r2
 800972e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <put_fat+0xf0>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	091b      	lsrs	r3, r3, #4
 800973e:	b2db      	uxtb	r3, r3
 8009740:	e00e      	b.n	8009760 <put_fat+0x10e>
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b25b      	sxtb	r3, r3
 8009748:	f023 030f 	bic.w	r3, r3, #15
 800974c:	b25a      	sxtb	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	0a1b      	lsrs	r3, r3, #8
 8009752:	b25b      	sxtb	r3, r3
 8009754:	f003 030f 	and.w	r3, r3, #15
 8009758:	b25b      	sxtb	r3, r3
 800975a:	4313      	orrs	r3, r2
 800975c:	b25b      	sxtb	r3, r3
 800975e:	b2db      	uxtb	r3, r3
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	70da      	strb	r2, [r3, #3]
			break;
 800976a:	e059      	b.n	8009820 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6a1a      	ldr	r2, [r3, #32]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	0a1b      	lsrs	r3, r3, #8
 8009774:	4413      	add	r3, r2
 8009776:	4619      	mov	r1, r3
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff fe07 	bl	800938c <move_window>
 800977e:	4603      	mov	r3, r0
 8009780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009782:	7ffb      	ldrb	r3, [r7, #31]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d148      	bne.n	800981a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009796:	4413      	add	r3, r2
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	b292      	uxth	r2, r2
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff fb7f 	bl	8008ea2 <st_word>
			fs->wflag = 1;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2201      	movs	r2, #1
 80097a8:	70da      	strb	r2, [r3, #3]
			break;
 80097aa:	e039      	b.n	8009820 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6a1a      	ldr	r2, [r3, #32]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	09db      	lsrs	r3, r3, #7
 80097b4:	4413      	add	r3, r2
 80097b6:	4619      	mov	r1, r3
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7ff fde7 	bl	800938c <move_window>
 80097be:	4603      	mov	r3, r0
 80097c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097c2:	7ffb      	ldrb	r3, [r7, #31]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d12a      	bne.n	800981e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80097dc:	4413      	add	r3, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f7ff fb3c 	bl	8008e5c <ld_dword>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80097ea:	4323      	orrs	r3, r4
 80097ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80097fc:	4413      	add	r3, r2
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff fb69 	bl	8008ed8 <st_dword>
			fs->wflag = 1;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	70da      	strb	r2, [r3, #3]
			break;
 800980c:	e008      	b.n	8009820 <put_fat+0x1ce>
		}
	}
 800980e:	bf00      	nop
 8009810:	e006      	b.n	8009820 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009812:	bf00      	nop
 8009814:	e004      	b.n	8009820 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009816:	bf00      	nop
 8009818:	e002      	b.n	8009820 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800981a:	bf00      	nop
 800981c:	e000      	b.n	8009820 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800981e:	bf00      	nop
	return res;
 8009820:	7ffb      	ldrb	r3, [r7, #31]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3724      	adds	r7, #36	; 0x24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd90      	pop	{r4, r7, pc}

0800982a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b088      	sub	sp, #32
 800982e:	af00      	add	r7, sp, #0
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	60b9      	str	r1, [r7, #8]
 8009834:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d904      	bls.n	8009850 <remove_chain+0x26>
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	429a      	cmp	r2, r3
 800984e:	d301      	bcc.n	8009854 <remove_chain+0x2a>
 8009850:	2302      	movs	r3, #2
 8009852:	e04b      	b.n	80098ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00c      	beq.n	8009874 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800985a:	f04f 32ff 	mov.w	r2, #4294967295
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	69b8      	ldr	r0, [r7, #24]
 8009862:	f7ff fef6 	bl	8009652 <put_fat>
 8009866:	4603      	mov	r3, r0
 8009868:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800986a:	7ffb      	ldrb	r3, [r7, #31]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <remove_chain+0x4a>
 8009870:	7ffb      	ldrb	r3, [r7, #31]
 8009872:	e03b      	b.n	80098ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009874:	68b9      	ldr	r1, [r7, #8]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff fe43 	bl	8009502 <get_fat>
 800987c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d031      	beq.n	80098e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <remove_chain+0x64>
 800988a:	2302      	movs	r3, #2
 800988c:	e02e      	b.n	80098ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009894:	d101      	bne.n	800989a <remove_chain+0x70>
 8009896:	2301      	movs	r3, #1
 8009898:	e028      	b.n	80098ec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800989a:	2200      	movs	r2, #0
 800989c:	68b9      	ldr	r1, [r7, #8]
 800989e:	69b8      	ldr	r0, [r7, #24]
 80098a0:	f7ff fed7 	bl	8009652 <put_fat>
 80098a4:	4603      	mov	r3, r0
 80098a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80098a8:	7ffb      	ldrb	r3, [r7, #31]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <remove_chain+0x88>
 80098ae:	7ffb      	ldrb	r3, [r7, #31]
 80098b0:	e01c      	b.n	80098ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	691a      	ldr	r2, [r3, #16]
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	3b02      	subs	r3, #2
 80098bc:	429a      	cmp	r2, r3
 80098be:	d20b      	bcs.n	80098d8 <remove_chain+0xae>
			fs->free_clst++;
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	791b      	ldrb	r3, [r3, #4]
 80098ce:	f043 0301 	orr.w	r3, r3, #1
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d3c6      	bcc.n	8009874 <remove_chain+0x4a>
 80098e6:	e000      	b.n	80098ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80098e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3720      	adds	r7, #32
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10d      	bne.n	8009926 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d004      	beq.n	8009920 <create_chain+0x2c>
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	429a      	cmp	r2, r3
 800991e:	d31b      	bcc.n	8009958 <create_chain+0x64>
 8009920:	2301      	movs	r3, #1
 8009922:	61bb      	str	r3, [r7, #24]
 8009924:	e018      	b.n	8009958 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff fdea 	bl	8009502 <get_fat>
 800992e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d801      	bhi.n	800993a <create_chain+0x46>
 8009936:	2301      	movs	r3, #1
 8009938:	e070      	b.n	8009a1c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009940:	d101      	bne.n	8009946 <create_chain+0x52>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	e06a      	b.n	8009a1c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	429a      	cmp	r2, r3
 800994e:	d201      	bcs.n	8009954 <create_chain+0x60>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	e063      	b.n	8009a1c <create_chain+0x128>
		scl = clst;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	3301      	adds	r3, #1
 8009960:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	429a      	cmp	r2, r3
 800996a:	d307      	bcc.n	800997c <create_chain+0x88>
				ncl = 2;
 800996c:	2302      	movs	r3, #2
 800996e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009970:	69fa      	ldr	r2, [r7, #28]
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	429a      	cmp	r2, r3
 8009976:	d901      	bls.n	800997c <create_chain+0x88>
 8009978:	2300      	movs	r3, #0
 800997a:	e04f      	b.n	8009a1c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800997c:	69f9      	ldr	r1, [r7, #28]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7ff fdbf 	bl	8009502 <get_fat>
 8009984:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00e      	beq.n	80099aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d003      	beq.n	800999a <create_chain+0xa6>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009998:	d101      	bne.n	800999e <create_chain+0xaa>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	e03e      	b.n	8009a1c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d1da      	bne.n	800995c <create_chain+0x68>
 80099a6:	2300      	movs	r3, #0
 80099a8:	e038      	b.n	8009a1c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80099aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295
 80099b0:	69f9      	ldr	r1, [r7, #28]
 80099b2:	6938      	ldr	r0, [r7, #16]
 80099b4:	f7ff fe4d 	bl	8009652 <put_fat>
 80099b8:	4603      	mov	r3, r0
 80099ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d109      	bne.n	80099d6 <create_chain+0xe2>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d006      	beq.n	80099d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80099c8:	69fa      	ldr	r2, [r7, #28]
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6938      	ldr	r0, [r7, #16]
 80099ce:	f7ff fe40 	bl	8009652 <put_fat>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d116      	bne.n	8009a0a <create_chain+0x116>
		fs->last_clst = ncl;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	691a      	ldr	r2, [r3, #16]
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	3b02      	subs	r3, #2
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d804      	bhi.n	80099fa <create_chain+0x106>
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	1e5a      	subs	r2, r3, #1
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	791b      	ldrb	r3, [r3, #4]
 80099fe:	f043 0301 	orr.w	r3, r3, #1
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	711a      	strb	r2, [r3, #4]
 8009a08:	e007      	b.n	8009a1a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d102      	bne.n	8009a16 <create_chain+0x122>
 8009a10:	f04f 33ff 	mov.w	r3, #4294967295
 8009a14:	e000      	b.n	8009a18 <create_chain+0x124>
 8009a16:	2301      	movs	r3, #1
 8009a18:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009a1a:	69fb      	ldr	r3, [r7, #28]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3720      	adds	r7, #32
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a38:	3304      	adds	r3, #4
 8009a3a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	0a5b      	lsrs	r3, r3, #9
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	8952      	ldrh	r2, [r2, #10]
 8009a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a48:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	1d1a      	adds	r2, r3, #4
 8009a4e:	613a      	str	r2, [r7, #16]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <clmt_clust+0x3a>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e010      	b.n	8009a80 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d307      	bcc.n	8009a76 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	3304      	adds	r3, #4
 8009a72:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a74:	e7e9      	b.n	8009a4a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009a76:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	4413      	add	r3, r2
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	371c      	adds	r7, #28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009aa2:	d204      	bcs.n	8009aae <dir_sdi+0x22>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	f003 031f 	and.w	r3, r3, #31
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e063      	b.n	8009b7a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <dir_sdi+0x46>
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d902      	bls.n	8009ad2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10c      	bne.n	8009af2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	095b      	lsrs	r3, r3, #5
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	8912      	ldrh	r2, [r2, #8]
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d301      	bcc.n	8009ae8 <dir_sdi+0x5c>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e048      	b.n	8009b7a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	61da      	str	r2, [r3, #28]
 8009af0:	e029      	b.n	8009b46 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	895b      	ldrh	r3, [r3, #10]
 8009af6:	025b      	lsls	r3, r3, #9
 8009af8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009afa:	e019      	b.n	8009b30 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6979      	ldr	r1, [r7, #20]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7ff fcfe 	bl	8009502 <get_fat>
 8009b06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0e:	d101      	bne.n	8009b14 <dir_sdi+0x88>
 8009b10:	2301      	movs	r3, #1
 8009b12:	e032      	b.n	8009b7a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d904      	bls.n	8009b24 <dir_sdi+0x98>
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d301      	bcc.n	8009b28 <dir_sdi+0x9c>
 8009b24:	2302      	movs	r3, #2
 8009b26:	e028      	b.n	8009b7a <dir_sdi+0xee>
			ofs -= csz;
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d2e1      	bcs.n	8009afc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009b38:	6979      	ldr	r1, [r7, #20]
 8009b3a:	6938      	ldr	r0, [r7, #16]
 8009b3c:	f7ff fcc2 	bl	80094c4 <clust2sect>
 8009b40:	4602      	mov	r2, r0
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <dir_sdi+0xcc>
 8009b54:	2302      	movs	r3, #2
 8009b56:	e010      	b.n	8009b7a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	69da      	ldr	r2, [r3, #28]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	0a5b      	lsrs	r3, r3, #9
 8009b60:	441a      	add	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b72:	441a      	add	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b086      	sub	sp, #24
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	695b      	ldr	r3, [r3, #20]
 8009b96:	3320      	adds	r3, #32
 8009b98:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <dir_next+0x28>
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ba8:	d301      	bcc.n	8009bae <dir_next+0x2c>
 8009baa:	2304      	movs	r3, #4
 8009bac:	e0aa      	b.n	8009d04 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f040 8098 	bne.w	8009cea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10b      	bne.n	8009be4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	095b      	lsrs	r3, r3, #5
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	8912      	ldrh	r2, [r2, #8]
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	f0c0 8088 	bcc.w	8009cea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	61da      	str	r2, [r3, #28]
 8009be0:	2304      	movs	r3, #4
 8009be2:	e08f      	b.n	8009d04 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	0a5b      	lsrs	r3, r3, #9
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	8952      	ldrh	r2, [r2, #10]
 8009bec:	3a01      	subs	r2, #1
 8009bee:	4013      	ands	r3, r2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d17a      	bne.n	8009cea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	f7ff fc80 	bl	8009502 <get_fat>
 8009c02:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d801      	bhi.n	8009c0e <dir_next+0x8c>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e07a      	b.n	8009d04 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c14:	d101      	bne.n	8009c1a <dir_next+0x98>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e074      	b.n	8009d04 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d358      	bcc.n	8009cd6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d104      	bne.n	8009c34 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	61da      	str	r2, [r3, #28]
 8009c30:	2304      	movs	r3, #4
 8009c32:	e067      	b.n	8009d04 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	f7ff fe59 	bl	80098f4 <create_chain>
 8009c42:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <dir_next+0xcc>
 8009c4a:	2307      	movs	r3, #7
 8009c4c:	e05a      	b.n	8009d04 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d101      	bne.n	8009c58 <dir_next+0xd6>
 8009c54:	2302      	movs	r3, #2
 8009c56:	e055      	b.n	8009d04 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5e:	d101      	bne.n	8009c64 <dir_next+0xe2>
 8009c60:	2301      	movs	r3, #1
 8009c62:	e04f      	b.n	8009d04 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7ff fb4d 	bl	8009304 <sync_window>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <dir_next+0xf2>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e047      	b.n	8009d04 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3330      	adds	r3, #48	; 0x30
 8009c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff f977 	bl	8008f72 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009c84:	2300      	movs	r3, #0
 8009c86:	613b      	str	r3, [r7, #16]
 8009c88:	6979      	ldr	r1, [r7, #20]
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff fc1a 	bl	80094c4 <clust2sect>
 8009c90:	4602      	mov	r2, r0
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c96:	e012      	b.n	8009cbe <dir_next+0x13c>
						fs->wflag = 1;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f7ff fb30 	bl	8009304 <sync_window>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <dir_next+0x12c>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e02a      	b.n	8009d04 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	1c5a      	adds	r2, r3, #1
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	895b      	ldrh	r3, [r3, #10]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d3e6      	bcc.n	8009c98 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	1ad2      	subs	r2, r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009cdc:	6979      	ldr	r1, [r7, #20]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7ff fbf0 	bl	80094c4 <clust2sect>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfc:	441a      	add	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff feb4 	bl	8009a8c <dir_sdi>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d12b      	bne.n	8009d86 <dir_alloc+0x7a>
		n = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	4619      	mov	r1, r3
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7ff fb27 	bl	800938c <move_window>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d11d      	bne.n	8009d84 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	2be5      	cmp	r3, #229	; 0xe5
 8009d50:	d004      	beq.n	8009d5c <dir_alloc+0x50>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d107      	bne.n	8009d6c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	613b      	str	r3, [r7, #16]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d102      	bne.n	8009d70 <dir_alloc+0x64>
 8009d6a:	e00c      	b.n	8009d86 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009d70:	2101      	movs	r1, #1
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7ff ff05 	bl	8009b82 <dir_next>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0d7      	beq.n	8009d32 <dir_alloc+0x26>
 8009d82:	e000      	b.n	8009d86 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009d84:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	2b04      	cmp	r3, #4
 8009d8a:	d101      	bne.n	8009d90 <dir_alloc+0x84>
 8009d8c:	2307      	movs	r3, #7
 8009d8e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	331a      	adds	r3, #26
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff f83f 	bl	8008e2c <ld_word>
 8009dae:	4603      	mov	r3, r0
 8009db0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d109      	bne.n	8009dce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	3314      	adds	r3, #20
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff f834 	bl	8008e2c <ld_word>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	041b      	lsls	r3, r3, #16
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009dce:	68fb      	ldr	r3, [r7, #12]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	331a      	adds	r3, #26
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	b292      	uxth	r2, r2
 8009dec:	4611      	mov	r1, r2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff f857 	bl	8008ea2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d109      	bne.n	8009e10 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f103 0214 	add.w	r2, r3, #20
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	0c1b      	lsrs	r3, r3, #16
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	f7ff f849 	bl	8008ea2 <st_word>
	}
}
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009e26:	2100      	movs	r1, #0
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7ff fe2f 	bl	8009a8c <dir_sdi>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <dir_find+0x24>
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	e03e      	b.n	8009eba <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	4619      	mov	r1, r3
 8009e42:	6938      	ldr	r0, [r7, #16]
 8009e44:	f7ff faa2 	bl	800938c <move_window>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d12f      	bne.n	8009eb2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <dir_find+0x4e>
 8009e60:	2304      	movs	r3, #4
 8009e62:	75fb      	strb	r3, [r7, #23]
 8009e64:	e028      	b.n	8009eb8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	330b      	adds	r3, #11
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	330b      	adds	r3, #11
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 0308 	and.w	r3, r3, #8
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10a      	bne.n	8009e9e <dir_find+0x86>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a18      	ldr	r0, [r3, #32]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3324      	adds	r3, #36	; 0x24
 8009e90:	220b      	movs	r2, #11
 8009e92:	4619      	mov	r1, r3
 8009e94:	f7ff f888 	bl	8008fa8 <mem_cmp>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff fe6e 	bl	8009b82 <dir_next>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d0c5      	beq.n	8009e3c <dir_find+0x24>
 8009eb0:	e002      	b.n	8009eb8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009eb2:	bf00      	nop
 8009eb4:	e000      	b.n	8009eb8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009eb6:	bf00      	nop

	return res;
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff ff1a 	bl	8009d0c <dir_alloc>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d11c      	bne.n	8009f1c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	68b8      	ldr	r0, [r7, #8]
 8009eea:	f7ff fa4f 	bl	800938c <move_window>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d111      	bne.n	8009f1c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	2220      	movs	r2, #32
 8009efe:	2100      	movs	r1, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff f836 	bl	8008f72 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a18      	ldr	r0, [r3, #32]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3324      	adds	r3, #36	; 0x24
 8009f0e:	220b      	movs	r2, #11
 8009f10:	4619      	mov	r1, r3
 8009f12:	f7ff f80d 	bl	8008f30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	60fb      	str	r3, [r7, #12]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3324      	adds	r3, #36	; 0x24
 8009f3c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009f3e:	220b      	movs	r2, #11
 8009f40:	2120      	movs	r1, #32
 8009f42:	68b8      	ldr	r0, [r7, #8]
 8009f44:	f7ff f815 	bl	8008f72 <mem_set>
	si = i = 0; ni = 8;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	613b      	str	r3, [r7, #16]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	61fb      	str	r3, [r7, #28]
 8009f50:	2308      	movs	r3, #8
 8009f52:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	61fa      	str	r2, [r7, #28]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009f62:	7efb      	ldrb	r3, [r7, #27]
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d94e      	bls.n	800a006 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009f68:	7efb      	ldrb	r3, [r7, #27]
 8009f6a:	2b2f      	cmp	r3, #47	; 0x2f
 8009f6c:	d006      	beq.n	8009f7c <create_name+0x54>
 8009f6e:	7efb      	ldrb	r3, [r7, #27]
 8009f70:	2b5c      	cmp	r3, #92	; 0x5c
 8009f72:	d110      	bne.n	8009f96 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009f74:	e002      	b.n	8009f7c <create_name+0x54>
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	61fb      	str	r3, [r7, #28]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	4413      	add	r3, r2
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2b2f      	cmp	r3, #47	; 0x2f
 8009f86:	d0f6      	beq.n	8009f76 <create_name+0x4e>
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b5c      	cmp	r3, #92	; 0x5c
 8009f92:	d0f0      	beq.n	8009f76 <create_name+0x4e>
			break;
 8009f94:	e038      	b.n	800a008 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009f96:	7efb      	ldrb	r3, [r7, #27]
 8009f98:	2b2e      	cmp	r3, #46	; 0x2e
 8009f9a:	d003      	beq.n	8009fa4 <create_name+0x7c>
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d30c      	bcc.n	8009fbe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b0b      	cmp	r3, #11
 8009fa8:	d002      	beq.n	8009fb0 <create_name+0x88>
 8009faa:	7efb      	ldrb	r3, [r7, #27]
 8009fac:	2b2e      	cmp	r3, #46	; 0x2e
 8009fae:	d001      	beq.n	8009fb4 <create_name+0x8c>
 8009fb0:	2306      	movs	r3, #6
 8009fb2:	e044      	b.n	800a03e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009fb4:	2308      	movs	r3, #8
 8009fb6:	613b      	str	r3, [r7, #16]
 8009fb8:	230b      	movs	r3, #11
 8009fba:	617b      	str	r3, [r7, #20]
			continue;
 8009fbc:	e022      	b.n	800a004 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009fbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	da04      	bge.n	8009fd0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009fc6:	7efb      	ldrb	r3, [r7, #27]
 8009fc8:	3b80      	subs	r3, #128	; 0x80
 8009fca:	4a1f      	ldr	r2, [pc, #124]	; (800a048 <create_name+0x120>)
 8009fcc:	5cd3      	ldrb	r3, [r2, r3]
 8009fce:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009fd0:	7efb      	ldrb	r3, [r7, #27]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	481d      	ldr	r0, [pc, #116]	; (800a04c <create_name+0x124>)
 8009fd6:	f7ff f80e 	bl	8008ff6 <chk_chr>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <create_name+0xbc>
 8009fe0:	2306      	movs	r3, #6
 8009fe2:	e02c      	b.n	800a03e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009fe4:	7efb      	ldrb	r3, [r7, #27]
 8009fe6:	2b60      	cmp	r3, #96	; 0x60
 8009fe8:	d905      	bls.n	8009ff6 <create_name+0xce>
 8009fea:	7efb      	ldrb	r3, [r7, #27]
 8009fec:	2b7a      	cmp	r3, #122	; 0x7a
 8009fee:	d802      	bhi.n	8009ff6 <create_name+0xce>
 8009ff0:	7efb      	ldrb	r3, [r7, #27]
 8009ff2:	3b20      	subs	r3, #32
 8009ff4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	613a      	str	r2, [r7, #16]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	4413      	add	r3, r2
 800a000:	7efa      	ldrb	r2, [r7, #27]
 800a002:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a004:	e7a6      	b.n	8009f54 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a006:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	441a      	add	r2, r3
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <create_name+0xf4>
 800a018:	2306      	movs	r3, #6
 800a01a:	e010      	b.n	800a03e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2be5      	cmp	r3, #229	; 0xe5
 800a022:	d102      	bne.n	800a02a <create_name+0x102>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	2205      	movs	r2, #5
 800a028:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a02a:	7efb      	ldrb	r3, [r7, #27]
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d801      	bhi.n	800a034 <create_name+0x10c>
 800a030:	2204      	movs	r2, #4
 800a032:	e000      	b.n	800a036 <create_name+0x10e>
 800a034:	2200      	movs	r2, #0
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	330b      	adds	r3, #11
 800a03a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a03c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3720      	adds	r7, #32
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	0800bf04 	.word	0x0800bf04
 800a04c:	0800be74 	.word	0x0800be74

0800a050 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a064:	e002      	b.n	800a06c <follow_path+0x1c>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	3301      	adds	r3, #1
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b2f      	cmp	r3, #47	; 0x2f
 800a072:	d0f8      	beq.n	800a066 <follow_path+0x16>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b5c      	cmp	r3, #92	; 0x5c
 800a07a:	d0f4      	beq.n	800a066 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2200      	movs	r2, #0
 800a080:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b1f      	cmp	r3, #31
 800a088:	d80a      	bhi.n	800a0a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2280      	movs	r2, #128	; 0x80
 800a08e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a092:	2100      	movs	r1, #0
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff fcf9 	bl	8009a8c <dir_sdi>
 800a09a:	4603      	mov	r3, r0
 800a09c:	75fb      	strb	r3, [r7, #23]
 800a09e:	e043      	b.n	800a128 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff ff3f 	bl	8009f28 <create_name>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d134      	bne.n	800a11e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff feaf 	bl	8009e18 <dir_find>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a0c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00a      	beq.n	800a0e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	d127      	bne.n	800a122 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a0d2:	7afb      	ldrb	r3, [r7, #11]
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d122      	bne.n	800a122 <follow_path+0xd2>
 800a0dc:	2305      	movs	r3, #5
 800a0de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a0e0:	e01f      	b.n	800a122 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0e2:	7afb      	ldrb	r3, [r7, #11]
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d11c      	bne.n	800a126 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	799b      	ldrb	r3, [r3, #6]
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d102      	bne.n	800a0fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a0f8:	2305      	movs	r3, #5
 800a0fa:	75fb      	strb	r3, [r7, #23]
 800a0fc:	e014      	b.n	800a128 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10c:	4413      	add	r3, r2
 800a10e:	4619      	mov	r1, r3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff fe42 	bl	8009d9a <ld_clust>
 800a116:	4602      	mov	r2, r0
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a11c:	e7c0      	b.n	800a0a0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a11e:	bf00      	nop
 800a120:	e002      	b.n	800a128 <follow_path+0xd8>
				break;
 800a122:	bf00      	nop
 800a124:	e000      	b.n	800a128 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a126:	bf00      	nop
			}
		}
	}

	return res;
 800a128:	7dfb      	ldrb	r3, [r7, #23]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a132:	b480      	push	{r7}
 800a134:	b087      	sub	sp, #28
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a13a:	f04f 33ff 	mov.w	r3, #4294967295
 800a13e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d031      	beq.n	800a1ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	e002      	b.n	800a156 <get_ldnumber+0x24>
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	3301      	adds	r3, #1
 800a154:	617b      	str	r3, [r7, #20]
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b20      	cmp	r3, #32
 800a15c:	d903      	bls.n	800a166 <get_ldnumber+0x34>
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	2b3a      	cmp	r3, #58	; 0x3a
 800a164:	d1f4      	bne.n	800a150 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b3a      	cmp	r3, #58	; 0x3a
 800a16c:	d11c      	bne.n	800a1a8 <get_ldnumber+0x76>
			tp = *path;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	60fa      	str	r2, [r7, #12]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	3b30      	subs	r3, #48	; 0x30
 800a17e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	2b09      	cmp	r3, #9
 800a184:	d80e      	bhi.n	800a1a4 <get_ldnumber+0x72>
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d10a      	bne.n	800a1a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d107      	bne.n	800a1a4 <get_ldnumber+0x72>
					vol = (int)i;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	3301      	adds	r3, #1
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	e002      	b.n	800a1ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a1ac:	693b      	ldr	r3, [r7, #16]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
	...

0800a1bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	70da      	strb	r2, [r3, #3]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7ff f8d8 	bl	800938c <move_window>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <check_fs+0x2a>
 800a1e2:	2304      	movs	r3, #4
 800a1e4:	e038      	b.n	800a258 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3330      	adds	r3, #48	; 0x30
 800a1ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fe1c 	bl	8008e2c <ld_word>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d001      	beq.n	800a204 <check_fs+0x48>
 800a200:	2303      	movs	r3, #3
 800a202:	e029      	b.n	800a258 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a20a:	2be9      	cmp	r3, #233	; 0xe9
 800a20c:	d009      	beq.n	800a222 <check_fs+0x66>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a214:	2beb      	cmp	r3, #235	; 0xeb
 800a216:	d11e      	bne.n	800a256 <check_fs+0x9a>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a21e:	2b90      	cmp	r3, #144	; 0x90
 800a220:	d119      	bne.n	800a256 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3330      	adds	r3, #48	; 0x30
 800a226:	3336      	adds	r3, #54	; 0x36
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fe fe17 	bl	8008e5c <ld_dword>
 800a22e:	4603      	mov	r3, r0
 800a230:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a234:	4a0a      	ldr	r2, [pc, #40]	; (800a260 <check_fs+0xa4>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d101      	bne.n	800a23e <check_fs+0x82>
 800a23a:	2300      	movs	r3, #0
 800a23c:	e00c      	b.n	800a258 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3330      	adds	r3, #48	; 0x30
 800a242:	3352      	adds	r3, #82	; 0x52
 800a244:	4618      	mov	r0, r3
 800a246:	f7fe fe09 	bl	8008e5c <ld_dword>
 800a24a:	4603      	mov	r3, r0
 800a24c:	4a05      	ldr	r2, [pc, #20]	; (800a264 <check_fs+0xa8>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d101      	bne.n	800a256 <check_fs+0x9a>
 800a252:	2300      	movs	r3, #0
 800a254:	e000      	b.n	800a258 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a256:	2302      	movs	r3, #2
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	00544146 	.word	0x00544146
 800a264:	33544146 	.word	0x33544146

0800a268 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b096      	sub	sp, #88	; 0x58
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	4613      	mov	r3, r2
 800a274:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f7ff ff58 	bl	800a132 <get_ldnumber>
 800a282:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a286:	2b00      	cmp	r3, #0
 800a288:	da01      	bge.n	800a28e <find_volume+0x26>
 800a28a:	230b      	movs	r3, #11
 800a28c:	e22d      	b.n	800a6ea <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a28e:	4aa1      	ldr	r2, [pc, #644]	; (800a514 <find_volume+0x2ac>)
 800a290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a296:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <find_volume+0x3a>
 800a29e:	230c      	movs	r3, #12
 800a2a0:	e223      	b.n	800a6ea <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	f023 0301 	bic.w	r3, r3, #1
 800a2ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01a      	beq.n	800a2ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	785b      	ldrb	r3, [r3, #1]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fe fd17 	bl	8008cf0 <disk_status>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a2c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10c      	bne.n	800a2ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d007      	beq.n	800a2ea <find_volume+0x82>
 800a2da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2de:	f003 0304 	and.w	r3, r3, #4
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a2e6:	230a      	movs	r3, #10
 800a2e8:	e1ff      	b.n	800a6ea <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e1fd      	b.n	800a6ea <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	785b      	ldrb	r3, [r3, #1]
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fd0f 	bl	8008d24 <disk_initialize>
 800a306:	4603      	mov	r3, r0
 800a308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a30c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a318:	2303      	movs	r3, #3
 800a31a:	e1e6      	b.n	800a6ea <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a31c:	79fb      	ldrb	r3, [r7, #7]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d007      	beq.n	800a332 <find_volume+0xca>
 800a322:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a32e:	230a      	movs	r3, #10
 800a330:	e1db      	b.n	800a6ea <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a336:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a33a:	f7ff ff3f 	bl	800a1bc <check_fs>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d149      	bne.n	800a3e0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a34c:	2300      	movs	r3, #0
 800a34e:	643b      	str	r3, [r7, #64]	; 0x40
 800a350:	e01e      	b.n	800a390 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a360:	4413      	add	r3, r2
 800a362:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	3304      	adds	r3, #4
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d006      	beq.n	800a37c <find_volume+0x114>
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	3308      	adds	r3, #8
 800a372:	4618      	mov	r0, r3
 800a374:	f7fe fd72 	bl	8008e5c <ld_dword>
 800a378:	4602      	mov	r2, r0
 800a37a:	e000      	b.n	800a37e <find_volume+0x116>
 800a37c:	2200      	movs	r2, #0
 800a37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	3358      	adds	r3, #88	; 0x58
 800a384:	443b      	add	r3, r7
 800a386:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a38c:	3301      	adds	r3, #1
 800a38e:	643b      	str	r3, [r7, #64]	; 0x40
 800a390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a392:	2b03      	cmp	r3, #3
 800a394:	d9dd      	bls.n	800a352 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a396:	2300      	movs	r3, #0
 800a398:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a39a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <find_volume+0x13e>
 800a3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	3358      	adds	r3, #88	; 0x58
 800a3ac:	443b      	add	r3, r7
 800a3ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a3b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a3b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <find_volume+0x15e>
 800a3ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3be:	f7ff fefd 	bl	800a1bc <check_fs>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	e000      	b.n	800a3c8 <find_volume+0x160>
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a3cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d905      	bls.n	800a3e0 <find_volume+0x178>
 800a3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d9e2      	bls.n	800a3a6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a3e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d101      	bne.n	800a3ec <find_volume+0x184>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e17e      	b.n	800a6ea <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a3ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d901      	bls.n	800a3f8 <find_volume+0x190>
 800a3f4:	230d      	movs	r3, #13
 800a3f6:	e178      	b.n	800a6ea <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	3330      	adds	r3, #48	; 0x30
 800a3fc:	330b      	adds	r3, #11
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe fd14 	bl	8008e2c <ld_word>
 800a404:	4603      	mov	r3, r0
 800a406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a40a:	d001      	beq.n	800a410 <find_volume+0x1a8>
 800a40c:	230d      	movs	r3, #13
 800a40e:	e16c      	b.n	800a6ea <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	3330      	adds	r3, #48	; 0x30
 800a414:	3316      	adds	r3, #22
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe fd08 	bl	8008e2c <ld_word>
 800a41c:	4603      	mov	r3, r0
 800a41e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <find_volume+0x1cc>
 800a426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a428:	3330      	adds	r3, #48	; 0x30
 800a42a:	3324      	adds	r3, #36	; 0x24
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fe fd15 	bl	8008e5c <ld_dword>
 800a432:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a438:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a442:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	789b      	ldrb	r3, [r3, #2]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d005      	beq.n	800a458 <find_volume+0x1f0>
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	789b      	ldrb	r3, [r3, #2]
 800a450:	2b02      	cmp	r3, #2
 800a452:	d001      	beq.n	800a458 <find_volume+0x1f0>
 800a454:	230d      	movs	r3, #13
 800a456:	e148      	b.n	800a6ea <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	789b      	ldrb	r3, [r3, #2]
 800a45c:	461a      	mov	r2, r3
 800a45e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a460:	fb02 f303 	mul.w	r3, r2, r3
 800a464:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a470:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	895b      	ldrh	r3, [r3, #10]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <find_volume+0x224>
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	895b      	ldrh	r3, [r3, #10]
 800a47e:	461a      	mov	r2, r3
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	895b      	ldrh	r3, [r3, #10]
 800a484:	3b01      	subs	r3, #1
 800a486:	4013      	ands	r3, r2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <find_volume+0x228>
 800a48c:	230d      	movs	r3, #13
 800a48e:	e12c      	b.n	800a6ea <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	3330      	adds	r3, #48	; 0x30
 800a494:	3311      	adds	r3, #17
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe fcc8 	bl	8008e2c <ld_word>
 800a49c:	4603      	mov	r3, r0
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a6:	891b      	ldrh	r3, [r3, #8]
 800a4a8:	f003 030f 	and.w	r3, r3, #15
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <find_volume+0x24e>
 800a4b2:	230d      	movs	r3, #13
 800a4b4:	e119      	b.n	800a6ea <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	3330      	adds	r3, #48	; 0x30
 800a4ba:	3313      	adds	r3, #19
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fcb5 	bl	8008e2c <ld_word>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a4c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d106      	bne.n	800a4da <find_volume+0x272>
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	3330      	adds	r3, #48	; 0x30
 800a4d0:	3320      	adds	r3, #32
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fe fcc2 	bl	8008e5c <ld_dword>
 800a4d8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4dc:	3330      	adds	r3, #48	; 0x30
 800a4de:	330e      	adds	r3, #14
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fca3 	bl	8008e2c <ld_word>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a4ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <find_volume+0x28c>
 800a4f0:	230d      	movs	r3, #13
 800a4f2:	e0fa      	b.n	800a6ea <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a4f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f8:	4413      	add	r3, r2
 800a4fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4fc:	8912      	ldrh	r2, [r2, #8]
 800a4fe:	0912      	lsrs	r2, r2, #4
 800a500:	b292      	uxth	r2, r2
 800a502:	4413      	add	r3, r2
 800a504:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d204      	bcs.n	800a518 <find_volume+0x2b0>
 800a50e:	230d      	movs	r3, #13
 800a510:	e0eb      	b.n	800a6ea <find_volume+0x482>
 800a512:	bf00      	nop
 800a514:	240001b0 	.word	0x240001b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a520:	8952      	ldrh	r2, [r2, #10]
 800a522:	fbb3 f3f2 	udiv	r3, r3, r2
 800a526:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <find_volume+0x2ca>
 800a52e:	230d      	movs	r3, #13
 800a530:	e0db      	b.n	800a6ea <find_volume+0x482>
		fmt = FS_FAT32;
 800a532:	2303      	movs	r3, #3
 800a534:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a53e:	4293      	cmp	r3, r2
 800a540:	d802      	bhi.n	800a548 <find_volume+0x2e0>
 800a542:	2302      	movs	r3, #2
 800a544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a54e:	4293      	cmp	r3, r2
 800a550:	d802      	bhi.n	800a558 <find_volume+0x2f0>
 800a552:	2301      	movs	r3, #1
 800a554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	1c9a      	adds	r2, r3, #2
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a564:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a566:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a56a:	441a      	add	r2, r3
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a570:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	441a      	add	r2, r3
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a57a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d11e      	bne.n	800a5c0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	3330      	adds	r3, #48	; 0x30
 800a586:	332a      	adds	r3, #42	; 0x2a
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fc4f 	bl	8008e2c <ld_word>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <find_volume+0x330>
 800a594:	230d      	movs	r3, #13
 800a596:	e0a8      	b.n	800a6ea <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	891b      	ldrh	r3, [r3, #8]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <find_volume+0x33c>
 800a5a0:	230d      	movs	r3, #13
 800a5a2:	e0a2      	b.n	800a6ea <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a6:	3330      	adds	r3, #48	; 0x30
 800a5a8:	332c      	adds	r3, #44	; 0x2c
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fe fc56 	bl	8008e5c <ld_dword>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	647b      	str	r3, [r7, #68]	; 0x44
 800a5be:	e01f      	b.n	800a600 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	891b      	ldrh	r3, [r3, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <find_volume+0x364>
 800a5c8:	230d      	movs	r3, #13
 800a5ca:	e08e      	b.n	800a6ea <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ce:	6a1a      	ldr	r2, [r3, #32]
 800a5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d2:	441a      	add	r2, r3
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a5d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d103      	bne.n	800a5e8 <find_volume+0x380>
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	695b      	ldr	r3, [r3, #20]
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	e00a      	b.n	800a5fe <find_volume+0x396>
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	695a      	ldr	r2, [r3, #20]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	005b      	lsls	r3, r3, #1
 800a5f0:	4413      	add	r3, r2
 800a5f2:	085a      	lsrs	r2, r3, #1
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a5fe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	699a      	ldr	r2, [r3, #24]
 800a604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a606:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a60a:	0a5b      	lsrs	r3, r3, #9
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d201      	bcs.n	800a614 <find_volume+0x3ac>
 800a610:	230d      	movs	r3, #13
 800a612:	e06a      	b.n	800a6ea <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	f04f 32ff 	mov.w	r2, #4294967295
 800a61a:	611a      	str	r2, [r3, #16]
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	691a      	ldr	r2, [r3, #16]
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	2280      	movs	r2, #128	; 0x80
 800a628:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a62a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d149      	bne.n	800a6c6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a634:	3330      	adds	r3, #48	; 0x30
 800a636:	3330      	adds	r3, #48	; 0x30
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe fbf7 	bl	8008e2c <ld_word>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b01      	cmp	r3, #1
 800a642:	d140      	bne.n	800a6c6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a646:	3301      	adds	r3, #1
 800a648:	4619      	mov	r1, r3
 800a64a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a64c:	f7fe fe9e 	bl	800938c <move_window>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d137      	bne.n	800a6c6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	2200      	movs	r2, #0
 800a65a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	3330      	adds	r3, #48	; 0x30
 800a660:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a664:	4618      	mov	r0, r3
 800a666:	f7fe fbe1 	bl	8008e2c <ld_word>
 800a66a:	4603      	mov	r3, r0
 800a66c:	461a      	mov	r2, r3
 800a66e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a672:	429a      	cmp	r2, r3
 800a674:	d127      	bne.n	800a6c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a678:	3330      	adds	r3, #48	; 0x30
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fbee 	bl	8008e5c <ld_dword>
 800a680:	4603      	mov	r3, r0
 800a682:	4a1c      	ldr	r2, [pc, #112]	; (800a6f4 <find_volume+0x48c>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d11e      	bne.n	800a6c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	3330      	adds	r3, #48	; 0x30
 800a68c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe fbe3 	bl	8008e5c <ld_dword>
 800a696:	4603      	mov	r3, r0
 800a698:	4a17      	ldr	r2, [pc, #92]	; (800a6f8 <find_volume+0x490>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d113      	bne.n	800a6c6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a0:	3330      	adds	r3, #48	; 0x30
 800a6a2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fbd8 	bl	8008e5c <ld_dword>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	3330      	adds	r3, #48	; 0x30
 800a6b6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe fbce 	bl	8008e5c <ld_dword>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a6cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a6ce:	4b0b      	ldr	r3, [pc, #44]	; (800a6fc <find_volume+0x494>)
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	4b09      	ldr	r3, [pc, #36]	; (800a6fc <find_volume+0x494>)
 800a6d8:	801a      	strh	r2, [r3, #0]
 800a6da:	4b08      	ldr	r3, [pc, #32]	; (800a6fc <find_volume+0x494>)
 800a6dc:	881a      	ldrh	r2, [r3, #0]
 800a6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a6e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6e4:	f7fe fdea 	bl	80092bc <clear_lock>
#endif
	return FR_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3758      	adds	r7, #88	; 0x58
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	41615252 	.word	0x41615252
 800a6f8:	61417272 	.word	0x61417272
 800a6fc:	240001b4 	.word	0x240001b4

0800a700 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a70a:	2309      	movs	r3, #9
 800a70c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d01c      	beq.n	800a74e <validate+0x4e>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d018      	beq.n	800a74e <validate+0x4e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d013      	beq.n	800a74e <validate+0x4e>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	889a      	ldrh	r2, [r3, #4]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	88db      	ldrh	r3, [r3, #6]
 800a730:	429a      	cmp	r2, r3
 800a732:	d10c      	bne.n	800a74e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	785b      	ldrb	r3, [r3, #1]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fe fad8 	bl	8008cf0 <disk_status>
 800a740:	4603      	mov	r3, r0
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <validate+0x4e>
			res = FR_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d102      	bne.n	800a75a <validate+0x5a>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	e000      	b.n	800a75c <validate+0x5c>
 800a75a:	2300      	movs	r3, #0
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	6013      	str	r3, [r2, #0]
	return res;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	4613      	mov	r3, r2
 800a778:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a77e:	f107 0310 	add.w	r3, r7, #16
 800a782:	4618      	mov	r0, r3
 800a784:	f7ff fcd5 	bl	800a132 <get_ldnumber>
 800a788:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	da01      	bge.n	800a794 <f_mount+0x28>
 800a790:	230b      	movs	r3, #11
 800a792:	e02b      	b.n	800a7ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a794:	4a17      	ldr	r2, [pc, #92]	; (800a7f4 <f_mount+0x88>)
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a79c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d005      	beq.n	800a7b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a7a4:	69b8      	ldr	r0, [r7, #24]
 800a7a6:	f7fe fd89 	bl	80092bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	490d      	ldr	r1, [pc, #52]	; (800a7f4 <f_mount+0x88>)
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <f_mount+0x66>
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d001      	beq.n	800a7d6 <f_mount+0x6a>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	e00a      	b.n	800a7ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a7d6:	f107 010c 	add.w	r1, r7, #12
 800a7da:	f107 0308 	add.w	r3, r7, #8
 800a7de:	2200      	movs	r2, #0
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff fd41 	bl	800a268 <find_volume>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3720      	adds	r7, #32
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	240001b0 	.word	0x240001b0

0800a7f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b098      	sub	sp, #96	; 0x60
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4613      	mov	r3, r2
 800a804:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <f_open+0x18>
 800a80c:	2309      	movs	r3, #9
 800a80e:	e1ad      	b.n	800ab6c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a816:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a818:	79fa      	ldrb	r2, [r7, #7]
 800a81a:	f107 0110 	add.w	r1, r7, #16
 800a81e:	f107 0308 	add.w	r3, r7, #8
 800a822:	4618      	mov	r0, r3
 800a824:	f7ff fd20 	bl	800a268 <find_volume>
 800a828:	4603      	mov	r3, r0
 800a82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a832:	2b00      	cmp	r3, #0
 800a834:	f040 8191 	bne.w	800ab5a <f_open+0x362>
		dj.obj.fs = fs;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	f107 0314 	add.w	r3, r7, #20
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f7ff fc03 	bl	800a050 <follow_path>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a854:	2b00      	cmp	r3, #0
 800a856:	d11a      	bne.n	800a88e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a858:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a85c:	b25b      	sxtb	r3, r3
 800a85e:	2b00      	cmp	r3, #0
 800a860:	da03      	bge.n	800a86a <f_open+0x72>
				res = FR_INVALID_NAME;
 800a862:	2306      	movs	r3, #6
 800a864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a868:	e011      	b.n	800a88e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	f023 0301 	bic.w	r3, r3, #1
 800a870:	2b00      	cmp	r3, #0
 800a872:	bf14      	ite	ne
 800a874:	2301      	movne	r3, #1
 800a876:	2300      	moveq	r3, #0
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	f107 0314 	add.w	r3, r7, #20
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f7fe fbd2 	bl	800902c <chk_lock>
 800a888:	4603      	mov	r3, r0
 800a88a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	f003 031c 	and.w	r3, r3, #28
 800a894:	2b00      	cmp	r3, #0
 800a896:	d07f      	beq.n	800a998 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d017      	beq.n	800a8d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a8a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d10e      	bne.n	800a8c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a8a8:	f7fe fc1c 	bl	80090e4 <enq_lock>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d006      	beq.n	800a8c0 <f_open+0xc8>
 800a8b2:	f107 0314 	add.w	r3, r7, #20
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff fb03 	bl	8009ec2 <dir_register>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	e000      	b.n	800a8c2 <f_open+0xca>
 800a8c0:	2312      	movs	r3, #18
 800a8c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	f043 0308 	orr.w	r3, r3, #8
 800a8cc:	71fb      	strb	r3, [r7, #7]
 800a8ce:	e010      	b.n	800a8f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a8d0:	7ebb      	ldrb	r3, [r7, #26]
 800a8d2:	f003 0311 	and.w	r3, r3, #17
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <f_open+0xea>
					res = FR_DENIED;
 800a8da:	2307      	movs	r3, #7
 800a8dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8e0:	e007      	b.n	800a8f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	f003 0304 	and.w	r3, r3, #4
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <f_open+0xfa>
 800a8ec:	2308      	movs	r3, #8
 800a8ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a8f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d168      	bne.n	800a9cc <f_open+0x1d4>
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
 800a8fc:	f003 0308 	and.w	r3, r3, #8
 800a900:	2b00      	cmp	r3, #0
 800a902:	d063      	beq.n	800a9cc <f_open+0x1d4>
				dw = GET_FATTIME();
 800a904:	f7fe f860 	bl	80089c8 <get_fattime>
 800a908:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90c:	330e      	adds	r3, #14
 800a90e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a910:	4618      	mov	r0, r3
 800a912:	f7fe fae1 	bl	8008ed8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a918:	3316      	adds	r3, #22
 800a91a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fe fadb 	bl	8008ed8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	330b      	adds	r3, #11
 800a926:	2220      	movs	r2, #32
 800a928:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a92e:	4611      	mov	r1, r2
 800a930:	4618      	mov	r0, r3
 800a932:	f7ff fa32 	bl	8009d9a <ld_clust>
 800a936:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a93c:	2200      	movs	r2, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff fa4a 	bl	8009dd8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a946:	331c      	adds	r3, #28
 800a948:	2100      	movs	r1, #0
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe fac4 	bl	8008ed8 <st_dword>
					fs->wflag = 1;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	2201      	movs	r2, #1
 800a954:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d037      	beq.n	800a9cc <f_open+0x1d4>
						dw = fs->winsect;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a962:	f107 0314 	add.w	r3, r7, #20
 800a966:	2200      	movs	r2, #0
 800a968:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe ff5d 	bl	800982a <remove_chain>
 800a970:	4603      	mov	r3, r0
 800a972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d126      	bne.n	800a9cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe fd02 	bl	800938c <move_window>
 800a988:	4603      	mov	r3, r0
 800a98a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a992:	3a01      	subs	r2, #1
 800a994:	60da      	str	r2, [r3, #12]
 800a996:	e019      	b.n	800a9cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d115      	bne.n	800a9cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a9a0:	7ebb      	ldrb	r3, [r7, #26]
 800a9a2:	f003 0310 	and.w	r3, r3, #16
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a9aa:	2304      	movs	r3, #4
 800a9ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a9b0:	e00c      	b.n	800a9cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d007      	beq.n	800a9cc <f_open+0x1d4>
 800a9bc:	7ebb      	ldrb	r3, [r7, #26]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <f_open+0x1d4>
						res = FR_DENIED;
 800a9c6:	2307      	movs	r3, #7
 800a9c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a9cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d128      	bne.n	800aa26 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	f003 0308 	and.w	r3, r3, #8
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a9ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9f4:	79fb      	ldrb	r3, [r7, #7]
 800a9f6:	f023 0301 	bic.w	r3, r3, #1
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	bf14      	ite	ne
 800a9fe:	2301      	movne	r3, #1
 800aa00:	2300      	moveq	r3, #0
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	461a      	mov	r2, r3
 800aa06:	f107 0314 	add.w	r3, r7, #20
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe fb8b 	bl	8009128 <inc_lock>
 800aa12:	4602      	mov	r2, r0
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <f_open+0x22e>
 800aa20:	2302      	movs	r3, #2
 800aa22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f040 8095 	bne.w	800ab5a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa34:	4611      	mov	r1, r2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7ff f9af 	bl	8009d9a <ld_clust>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa44:	331c      	adds	r3, #28
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fa08 	bl	8008e5c <ld_dword>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	88da      	ldrh	r2, [r3, #6]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	79fa      	ldrb	r2, [r7, #7]
 800aa6a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	3330      	adds	r3, #48	; 0x30
 800aa82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa86:	2100      	movs	r1, #0
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fa72 	bl	8008f72 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	f003 0320 	and.w	r3, r3, #32
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d060      	beq.n	800ab5a <f_open+0x362>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d05c      	beq.n	800ab5a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68da      	ldr	r2, [r3, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	895b      	ldrh	r3, [r3, #10]
 800aaac:	025b      	lsls	r3, r3, #9
 800aaae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	657b      	str	r3, [r7, #84]	; 0x54
 800aabc:	e016      	b.n	800aaec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fd1d 	bl	8009502 <get_fat>
 800aac8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aaca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d802      	bhi.n	800aad6 <f_open+0x2de>
 800aad0:	2302      	movs	r3, #2
 800aad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aadc:	d102      	bne.n	800aae4 <f_open+0x2ec>
 800aade:	2301      	movs	r3, #1
 800aae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aae4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	657b      	str	r3, [r7, #84]	; 0x54
 800aaec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d103      	bne.n	800aafc <f_open+0x304>
 800aaf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d8e0      	bhi.n	800aabe <f_open+0x2c6>
				}
				fp->clust = clst;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d127      	bne.n	800ab5a <f_open+0x362>
 800ab0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d022      	beq.n	800ab5a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe fcd3 	bl	80094c4 <clust2sect>
 800ab1e:	6478      	str	r0, [r7, #68]	; 0x44
 800ab20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d103      	bne.n	800ab2e <f_open+0x336>
						res = FR_INT_ERR;
 800ab26:	2302      	movs	r3, #2
 800ab28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab2c:	e015      	b.n	800ab5a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ab2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab30:	0a5a      	lsrs	r2, r3, #9
 800ab32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab34:	441a      	add	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	7858      	ldrb	r0, [r3, #1]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6a1a      	ldr	r2, [r3, #32]
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f7fe f911 	bl	8008d70 <disk_read>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <f_open+0x362>
 800ab54:	2301      	movs	r3, #1
 800ab56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d002      	beq.n	800ab68 <f_open+0x370>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ab68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3760      	adds	r7, #96	; 0x60
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08e      	sub	sp, #56	; 0x38
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f107 0214 	add.w	r2, r7, #20
 800ab92:	4611      	mov	r1, r2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7ff fdb3 	bl	800a700 <validate>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aba0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d107      	bne.n	800abb8 <f_read+0x44>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	7d5b      	ldrb	r3, [r3, #21]
 800abac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800abb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <f_read+0x4a>
 800abb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abbc:	e115      	b.n	800adea <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	7d1b      	ldrb	r3, [r3, #20]
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <f_read+0x5a>
 800abca:	2307      	movs	r3, #7
 800abcc:	e10d      	b.n	800adea <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	68da      	ldr	r2, [r3, #12]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	429a      	cmp	r2, r3
 800abe0:	f240 80fe 	bls.w	800ade0 <f_read+0x26c>
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800abe8:	e0fa      	b.n	800ade0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f040 80c6 	bne.w	800ad84 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	0a5b      	lsrs	r3, r3, #9
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	8952      	ldrh	r2, [r2, #10]
 800ac02:	3a01      	subs	r2, #1
 800ac04:	4013      	ands	r3, r2
 800ac06:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d12f      	bne.n	800ac6e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	699b      	ldr	r3, [r3, #24]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d103      	bne.n	800ac1e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	633b      	str	r3, [r7, #48]	; 0x30
 800ac1c:	e013      	b.n	800ac46 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d007      	beq.n	800ac36 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7fe fef9 	bl	8009a24 <clmt_clust>
 800ac32:	6338      	str	r0, [r7, #48]	; 0x30
 800ac34:	e007      	b.n	800ac46 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	69db      	ldr	r3, [r3, #28]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4610      	mov	r0, r2
 800ac40:	f7fe fc5f 	bl	8009502 <get_fat>
 800ac44:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d804      	bhi.n	800ac56 <f_read+0xe2>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	755a      	strb	r2, [r3, #21]
 800ac52:	2302      	movs	r3, #2
 800ac54:	e0c9      	b.n	800adea <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5c:	d104      	bne.n	800ac68 <f_read+0xf4>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2201      	movs	r2, #1
 800ac62:	755a      	strb	r2, [r3, #21]
 800ac64:	2301      	movs	r3, #1
 800ac66:	e0c0      	b.n	800adea <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	4619      	mov	r1, r3
 800ac76:	4610      	mov	r0, r2
 800ac78:	f7fe fc24 	bl	80094c4 <clust2sect>
 800ac7c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d104      	bne.n	800ac8e <f_read+0x11a>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2202      	movs	r2, #2
 800ac88:	755a      	strb	r2, [r3, #21]
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	e0ad      	b.n	800adea <f_read+0x276>
			sect += csect;
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	4413      	add	r3, r2
 800ac94:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	0a5b      	lsrs	r3, r3, #9
 800ac9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ac9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d039      	beq.n	800ad16 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	4413      	add	r3, r2
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	8952      	ldrh	r2, [r2, #10]
 800acac:	4293      	cmp	r3, r2
 800acae:	d905      	bls.n	800acbc <f_read+0x148>
					cc = fs->csize - csect;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	895b      	ldrh	r3, [r3, #10]
 800acb4:	461a      	mov	r2, r3
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	7858      	ldrb	r0, [r3, #1]
 800acc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acc6:	f7fe f853 	bl	8008d70 <disk_read>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d004      	beq.n	800acda <f_read+0x166>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2201      	movs	r2, #1
 800acd4:	755a      	strb	r2, [r3, #21]
 800acd6:	2301      	movs	r3, #1
 800acd8:	e087      	b.n	800adea <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	7d1b      	ldrb	r3, [r3, #20]
 800acde:	b25b      	sxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da14      	bge.n	800ad0e <f_read+0x19a>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6a1a      	ldr	r2, [r3, #32]
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acee:	429a      	cmp	r2, r3
 800acf0:	d90d      	bls.n	800ad0e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6a1a      	ldr	r2, [r3, #32]
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	025b      	lsls	r3, r3, #9
 800acfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfe:	18d0      	adds	r0, r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3330      	adds	r3, #48	; 0x30
 800ad04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad08:	4619      	mov	r1, r3
 800ad0a:	f7fe f911 	bl	8008f30 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	025b      	lsls	r3, r3, #9
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ad14:	e050      	b.n	800adb8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	69ba      	ldr	r2, [r7, #24]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d02e      	beq.n	800ad7e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	7d1b      	ldrb	r3, [r3, #20]
 800ad24:	b25b      	sxtb	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	da18      	bge.n	800ad5c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	7858      	ldrb	r0, [r3, #1]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6a1a      	ldr	r2, [r3, #32]
 800ad38:	2301      	movs	r3, #1
 800ad3a:	f7fe f839 	bl	8008db0 <disk_write>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d004      	beq.n	800ad4e <f_read+0x1da>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2201      	movs	r2, #1
 800ad48:	755a      	strb	r2, [r3, #21]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e04d      	b.n	800adea <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	7d1b      	ldrb	r3, [r3, #20]
 800ad52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	7858      	ldrb	r0, [r3, #1]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad66:	2301      	movs	r3, #1
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	f7fe f801 	bl	8008d70 <disk_read>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d004      	beq.n	800ad7e <f_read+0x20a>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2201      	movs	r2, #1
 800ad78:	755a      	strb	r2, [r3, #21]
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e035      	b.n	800adea <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ad90:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ad92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d901      	bls.n	800ad9e <f_read+0x22a>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adac:	4413      	add	r3, r2
 800adae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adb0:	4619      	mov	r1, r3
 800adb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adb4:	f7fe f8bc 	bl	8008f30 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800adb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	4413      	add	r3, r2
 800adbe:	627b      	str	r3, [r7, #36]	; 0x24
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	699a      	ldr	r2, [r3, #24]
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	441a      	add	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	619a      	str	r2, [r3, #24]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add2:	441a      	add	r2, r3
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f47f af01 	bne.w	800abea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3738      	adds	r7, #56	; 0x38
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b08c      	sub	sp, #48	; 0x30
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	60f8      	str	r0, [r7, #12]
 800adfa:	60b9      	str	r1, [r7, #8]
 800adfc:	607a      	str	r2, [r7, #4]
 800adfe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2200      	movs	r2, #0
 800ae08:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f107 0210 	add.w	r2, r7, #16
 800ae10:	4611      	mov	r1, r2
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff fc74 	bl	800a700 <validate>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ae1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d107      	bne.n	800ae36 <f_write+0x44>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	7d5b      	ldrb	r3, [r3, #21]
 800ae2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ae2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d002      	beq.n	800ae3c <f_write+0x4a>
 800ae36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae3a:	e14b      	b.n	800b0d4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	7d1b      	ldrb	r3, [r3, #20]
 800ae40:	f003 0302 	and.w	r3, r3, #2
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <f_write+0x5a>
 800ae48:	2307      	movs	r3, #7
 800ae4a:	e143      	b.n	800b0d4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	699a      	ldr	r2, [r3, #24]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	441a      	add	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	f080 812d 	bcs.w	800b0b8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	43db      	mvns	r3, r3
 800ae64:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ae66:	e127      	b.n	800b0b8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f040 80e3 	bne.w	800b03c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	0a5b      	lsrs	r3, r3, #9
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	8952      	ldrh	r2, [r2, #10]
 800ae80:	3a01      	subs	r2, #1
 800ae82:	4013      	ands	r3, r2
 800ae84:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d143      	bne.n	800af14 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10c      	bne.n	800aeae <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d11a      	bne.n	800aed6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2100      	movs	r1, #0
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fe fd25 	bl	80098f4 <create_chain>
 800aeaa:	62b8      	str	r0, [r7, #40]	; 0x28
 800aeac:	e013      	b.n	800aed6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d007      	beq.n	800aec6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	4619      	mov	r1, r3
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f7fe fdb1 	bl	8009a24 <clmt_clust>
 800aec2:	62b8      	str	r0, [r7, #40]	; 0x28
 800aec4:	e007      	b.n	800aed6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	69db      	ldr	r3, [r3, #28]
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f7fe fd10 	bl	80098f4 <create_chain>
 800aed4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 80f2 	beq.w	800b0c2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d104      	bne.n	800aeee <f_write+0xfc>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2202      	movs	r2, #2
 800aee8:	755a      	strb	r2, [r3, #21]
 800aeea:	2302      	movs	r3, #2
 800aeec:	e0f2      	b.n	800b0d4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef4:	d104      	bne.n	800af00 <f_write+0x10e>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2201      	movs	r2, #1
 800aefa:	755a      	strb	r2, [r3, #21]
 800aefc:	2301      	movs	r3, #1
 800aefe:	e0e9      	b.n	800b0d4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af04:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d102      	bne.n	800af14 <f_write+0x122>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	7d1b      	ldrb	r3, [r3, #20]
 800af18:	b25b      	sxtb	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	da18      	bge.n	800af50 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	7858      	ldrb	r0, [r3, #1]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6a1a      	ldr	r2, [r3, #32]
 800af2c:	2301      	movs	r3, #1
 800af2e:	f7fd ff3f 	bl	8008db0 <disk_write>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d004      	beq.n	800af42 <f_write+0x150>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2201      	movs	r2, #1
 800af3c:	755a      	strb	r2, [r3, #21]
 800af3e:	2301      	movs	r3, #1
 800af40:	e0c8      	b.n	800b0d4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	7d1b      	ldrb	r3, [r3, #20]
 800af46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f7fe fab3 	bl	80094c4 <clust2sect>
 800af5e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d104      	bne.n	800af70 <f_write+0x17e>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2202      	movs	r2, #2
 800af6a:	755a      	strb	r2, [r3, #21]
 800af6c:	2302      	movs	r3, #2
 800af6e:	e0b1      	b.n	800b0d4 <f_write+0x2e2>
			sect += csect;
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	4413      	add	r3, r2
 800af76:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	0a5b      	lsrs	r3, r3, #9
 800af7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d03c      	beq.n	800affe <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800af84:	69ba      	ldr	r2, [r7, #24]
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	4413      	add	r3, r2
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	8952      	ldrh	r2, [r2, #10]
 800af8e:	4293      	cmp	r3, r2
 800af90:	d905      	bls.n	800af9e <f_write+0x1ac>
					cc = fs->csize - csect;
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	895b      	ldrh	r3, [r3, #10]
 800af96:	461a      	mov	r2, r3
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	7858      	ldrb	r0, [r3, #1]
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	697a      	ldr	r2, [r7, #20]
 800afa6:	69f9      	ldr	r1, [r7, #28]
 800afa8:	f7fd ff02 	bl	8008db0 <disk_write>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d004      	beq.n	800afbc <f_write+0x1ca>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2201      	movs	r2, #1
 800afb6:	755a      	strb	r2, [r3, #21]
 800afb8:	2301      	movs	r3, #1
 800afba:	e08b      	b.n	800b0d4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6a1a      	ldr	r2, [r3, #32]
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	6a3a      	ldr	r2, [r7, #32]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d915      	bls.n	800aff6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6a1a      	ldr	r2, [r3, #32]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	025b      	lsls	r3, r3, #9
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afe2:	4619      	mov	r1, r3
 800afe4:	f7fd ffa4 	bl	8008f30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	7d1b      	ldrb	r3, [r3, #20]
 800afec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	025b      	lsls	r3, r3, #9
 800affa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800affc:	e03f      	b.n	800b07e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	429a      	cmp	r2, r3
 800b006:	d016      	beq.n	800b036 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	699a      	ldr	r2, [r3, #24]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b010:	429a      	cmp	r2, r3
 800b012:	d210      	bcs.n	800b036 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	7858      	ldrb	r0, [r3, #1]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b01e:	2301      	movs	r3, #1
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	f7fd fea5 	bl	8008d70 <disk_read>
 800b026:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d004      	beq.n	800b036 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2201      	movs	r2, #1
 800b030:	755a      	strb	r2, [r3, #21]
 800b032:	2301      	movs	r3, #1
 800b034:	e04e      	b.n	800b0d4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b044:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b048:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d901      	bls.n	800b056 <f_write+0x264>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b064:	4413      	add	r3, r2
 800b066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b068:	69f9      	ldr	r1, [r7, #28]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fd ff60 	bl	8008f30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	7d1b      	ldrb	r3, [r3, #20]
 800b074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b07e:	69fa      	ldr	r2, [r7, #28]
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	4413      	add	r3, r2
 800b084:	61fb      	str	r3, [r7, #28]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	699a      	ldr	r2, [r3, #24]
 800b08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08c:	441a      	add	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	619a      	str	r2, [r3, #24]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	bf38      	it	cc
 800b09e:	461a      	movcc	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	60da      	str	r2, [r3, #12]
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	441a      	add	r2, r3
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f47f aed4 	bne.w	800ae68 <f_write+0x76>
 800b0c0:	e000      	b.n	800b0c4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b0c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	7d1b      	ldrb	r3, [r3, #20]
 800b0c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3730      	adds	r7, #48	; 0x30
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f107 0208 	add.w	r2, r7, #8
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7ff fb07 	bl	800a700 <validate>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d168      	bne.n	800b1ce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	7d1b      	ldrb	r3, [r3, #20]
 800b100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	d062      	beq.n	800b1ce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	7d1b      	ldrb	r3, [r3, #20]
 800b10c:	b25b      	sxtb	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	da15      	bge.n	800b13e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	7858      	ldrb	r0, [r3, #1]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a1a      	ldr	r2, [r3, #32]
 800b120:	2301      	movs	r3, #1
 800b122:	f7fd fe45 	bl	8008db0 <disk_write>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <f_sync+0x54>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e04f      	b.n	800b1d0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7d1b      	ldrb	r3, [r3, #20]
 800b134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b13e:	f7fd fc43 	bl	80089c8 <get_fattime>
 800b142:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	4619      	mov	r1, r3
 800b14c:	4610      	mov	r0, r2
 800b14e:	f7fe f91d 	bl	800938c <move_window>
 800b152:	4603      	mov	r3, r0
 800b154:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d138      	bne.n	800b1ce <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b160:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	330b      	adds	r3, #11
 800b166:	781a      	ldrb	r2, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	330b      	adds	r3, #11
 800b16c:	f042 0220 	orr.w	r2, r2, #32
 800b170:	b2d2      	uxtb	r2, r2
 800b172:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6818      	ldr	r0, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	461a      	mov	r2, r3
 800b17e:	68f9      	ldr	r1, [r7, #12]
 800b180:	f7fe fe2a 	bl	8009dd8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f103 021c 	add.w	r2, r3, #28
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	4619      	mov	r1, r3
 800b190:	4610      	mov	r0, r2
 800b192:	f7fd fea1 	bl	8008ed8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3316      	adds	r3, #22
 800b19a:	6939      	ldr	r1, [r7, #16]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fd fe9b 	bl	8008ed8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3312      	adds	r3, #18
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fd fe7a 	bl	8008ea2 <st_word>
					fs->wflag = 1;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fe f916 	bl	80093e8 <sync_fs>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7d1b      	ldrb	r3, [r3, #20]
 800b1c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff ff7b 	bl	800b0dc <f_sync>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b1ea:	7bfb      	ldrb	r3, [r7, #15]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d118      	bne.n	800b222 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f107 0208 	add.w	r2, r7, #8
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7ff fa81 	bl	800a700 <validate>
 800b1fe:	4603      	mov	r3, r0
 800b200:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10c      	bne.n	800b222 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe f819 	bl	8009244 <dec_lock>
 800b212:	4603      	mov	r3, r0
 800b214:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b216:	7bfb      	ldrb	r3, [r7, #15]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d102      	bne.n	800b222 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	4613      	mov	r3, r2
 800b238:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b23a:	2301      	movs	r3, #1
 800b23c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b242:	4b1f      	ldr	r3, [pc, #124]	; (800b2c0 <FATFS_LinkDriverEx+0x94>)
 800b244:	7a5b      	ldrb	r3, [r3, #9]
 800b246:	b2db      	uxtb	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d131      	bne.n	800b2b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b24c:	4b1c      	ldr	r3, [pc, #112]	; (800b2c0 <FATFS_LinkDriverEx+0x94>)
 800b24e:	7a5b      	ldrb	r3, [r3, #9]
 800b250:	b2db      	uxtb	r3, r3
 800b252:	461a      	mov	r2, r3
 800b254:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <FATFS_LinkDriverEx+0x94>)
 800b256:	2100      	movs	r1, #0
 800b258:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b25a:	4b19      	ldr	r3, [pc, #100]	; (800b2c0 <FATFS_LinkDriverEx+0x94>)
 800b25c:	7a5b      	ldrb	r3, [r3, #9]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	4a17      	ldr	r2, [pc, #92]	; (800b2c0 <FATFS_LinkDriverEx+0x94>)
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b26a:	4b15      	ldr	r3, [pc, #84]	; (800b2c0 <FATFS_LinkDriverEx+0x94>)
 800b26c:	7a5b      	ldrb	r3, [r3, #9]
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	461a      	mov	r2, r3
 800b272:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <FATFS_LinkDriverEx+0x94>)
 800b274:	4413      	add	r3, r2
 800b276:	79fa      	ldrb	r2, [r7, #7]
 800b278:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b27a:	4b11      	ldr	r3, [pc, #68]	; (800b2c0 <FATFS_LinkDriverEx+0x94>)
 800b27c:	7a5b      	ldrb	r3, [r3, #9]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	b2d1      	uxtb	r1, r2
 800b284:	4a0e      	ldr	r2, [pc, #56]	; (800b2c0 <FATFS_LinkDriverEx+0x94>)
 800b286:	7251      	strb	r1, [r2, #9]
 800b288:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b28a:	7dbb      	ldrb	r3, [r7, #22]
 800b28c:	3330      	adds	r3, #48	; 0x30
 800b28e:	b2da      	uxtb	r2, r3
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	3301      	adds	r3, #1
 800b298:	223a      	movs	r2, #58	; 0x3a
 800b29a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	3302      	adds	r3, #2
 800b2a0:	222f      	movs	r2, #47	; 0x2f
 800b2a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	3303      	adds	r3, #3
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	371c      	adds	r7, #28
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	240001d8 	.word	0x240001d8

0800b2c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7ff ffaa 	bl	800b22c <FATFS_LinkDriverEx>
 800b2d8:	4603      	mov	r3, r0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
	...

0800b2e4 <__errno>:
 800b2e4:	4b01      	ldr	r3, [pc, #4]	; (800b2ec <__errno+0x8>)
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	24000010 	.word	0x24000010

0800b2f0 <__libc_init_array>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	4d0d      	ldr	r5, [pc, #52]	; (800b328 <__libc_init_array+0x38>)
 800b2f4:	4c0d      	ldr	r4, [pc, #52]	; (800b32c <__libc_init_array+0x3c>)
 800b2f6:	1b64      	subs	r4, r4, r5
 800b2f8:	10a4      	asrs	r4, r4, #2
 800b2fa:	2600      	movs	r6, #0
 800b2fc:	42a6      	cmp	r6, r4
 800b2fe:	d109      	bne.n	800b314 <__libc_init_array+0x24>
 800b300:	4d0b      	ldr	r5, [pc, #44]	; (800b330 <__libc_init_array+0x40>)
 800b302:	4c0c      	ldr	r4, [pc, #48]	; (800b334 <__libc_init_array+0x44>)
 800b304:	f000 fc8e 	bl	800bc24 <_init>
 800b308:	1b64      	subs	r4, r4, r5
 800b30a:	10a4      	asrs	r4, r4, #2
 800b30c:	2600      	movs	r6, #0
 800b30e:	42a6      	cmp	r6, r4
 800b310:	d105      	bne.n	800b31e <__libc_init_array+0x2e>
 800b312:	bd70      	pop	{r4, r5, r6, pc}
 800b314:	f855 3b04 	ldr.w	r3, [r5], #4
 800b318:	4798      	blx	r3
 800b31a:	3601      	adds	r6, #1
 800b31c:	e7ee      	b.n	800b2fc <__libc_init_array+0xc>
 800b31e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b322:	4798      	blx	r3
 800b324:	3601      	adds	r6, #1
 800b326:	e7f2      	b.n	800b30e <__libc_init_array+0x1e>
 800b328:	0800bfc0 	.word	0x0800bfc0
 800b32c:	0800bfc0 	.word	0x0800bfc0
 800b330:	0800bfc0 	.word	0x0800bfc0
 800b334:	0800bfc4 	.word	0x0800bfc4

0800b338 <memset>:
 800b338:	4402      	add	r2, r0
 800b33a:	4603      	mov	r3, r0
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d100      	bne.n	800b342 <memset+0xa>
 800b340:	4770      	bx	lr
 800b342:	f803 1b01 	strb.w	r1, [r3], #1
 800b346:	e7f9      	b.n	800b33c <memset+0x4>

0800b348 <siprintf>:
 800b348:	b40e      	push	{r1, r2, r3}
 800b34a:	b500      	push	{lr}
 800b34c:	b09c      	sub	sp, #112	; 0x70
 800b34e:	ab1d      	add	r3, sp, #116	; 0x74
 800b350:	9002      	str	r0, [sp, #8]
 800b352:	9006      	str	r0, [sp, #24]
 800b354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b358:	4809      	ldr	r0, [pc, #36]	; (800b380 <siprintf+0x38>)
 800b35a:	9107      	str	r1, [sp, #28]
 800b35c:	9104      	str	r1, [sp, #16]
 800b35e:	4909      	ldr	r1, [pc, #36]	; (800b384 <siprintf+0x3c>)
 800b360:	f853 2b04 	ldr.w	r2, [r3], #4
 800b364:	9105      	str	r1, [sp, #20]
 800b366:	6800      	ldr	r0, [r0, #0]
 800b368:	9301      	str	r3, [sp, #4]
 800b36a:	a902      	add	r1, sp, #8
 800b36c:	f000 f868 	bl	800b440 <_svfiprintf_r>
 800b370:	9b02      	ldr	r3, [sp, #8]
 800b372:	2200      	movs	r2, #0
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	b01c      	add	sp, #112	; 0x70
 800b378:	f85d eb04 	ldr.w	lr, [sp], #4
 800b37c:	b003      	add	sp, #12
 800b37e:	4770      	bx	lr
 800b380:	24000010 	.word	0x24000010
 800b384:	ffff0208 	.word	0xffff0208

0800b388 <__ssputs_r>:
 800b388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b38c:	688e      	ldr	r6, [r1, #8]
 800b38e:	429e      	cmp	r6, r3
 800b390:	4682      	mov	sl, r0
 800b392:	460c      	mov	r4, r1
 800b394:	4690      	mov	r8, r2
 800b396:	461f      	mov	r7, r3
 800b398:	d838      	bhi.n	800b40c <__ssputs_r+0x84>
 800b39a:	898a      	ldrh	r2, [r1, #12]
 800b39c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3a0:	d032      	beq.n	800b408 <__ssputs_r+0x80>
 800b3a2:	6825      	ldr	r5, [r4, #0]
 800b3a4:	6909      	ldr	r1, [r1, #16]
 800b3a6:	eba5 0901 	sub.w	r9, r5, r1
 800b3aa:	6965      	ldr	r5, [r4, #20]
 800b3ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	444b      	add	r3, r9
 800b3b8:	106d      	asrs	r5, r5, #1
 800b3ba:	429d      	cmp	r5, r3
 800b3bc:	bf38      	it	cc
 800b3be:	461d      	movcc	r5, r3
 800b3c0:	0553      	lsls	r3, r2, #21
 800b3c2:	d531      	bpl.n	800b428 <__ssputs_r+0xa0>
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	f000 fb63 	bl	800ba90 <_malloc_r>
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	b950      	cbnz	r0, 800b3e4 <__ssputs_r+0x5c>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	f8ca 3000 	str.w	r3, [sl]
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e4:	6921      	ldr	r1, [r4, #16]
 800b3e6:	464a      	mov	r2, r9
 800b3e8:	f000 fabe 	bl	800b968 <memcpy>
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f6:	81a3      	strh	r3, [r4, #12]
 800b3f8:	6126      	str	r6, [r4, #16]
 800b3fa:	6165      	str	r5, [r4, #20]
 800b3fc:	444e      	add	r6, r9
 800b3fe:	eba5 0509 	sub.w	r5, r5, r9
 800b402:	6026      	str	r6, [r4, #0]
 800b404:	60a5      	str	r5, [r4, #8]
 800b406:	463e      	mov	r6, r7
 800b408:	42be      	cmp	r6, r7
 800b40a:	d900      	bls.n	800b40e <__ssputs_r+0x86>
 800b40c:	463e      	mov	r6, r7
 800b40e:	6820      	ldr	r0, [r4, #0]
 800b410:	4632      	mov	r2, r6
 800b412:	4641      	mov	r1, r8
 800b414:	f000 fab6 	bl	800b984 <memmove>
 800b418:	68a3      	ldr	r3, [r4, #8]
 800b41a:	1b9b      	subs	r3, r3, r6
 800b41c:	60a3      	str	r3, [r4, #8]
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	4433      	add	r3, r6
 800b422:	6023      	str	r3, [r4, #0]
 800b424:	2000      	movs	r0, #0
 800b426:	e7db      	b.n	800b3e0 <__ssputs_r+0x58>
 800b428:	462a      	mov	r2, r5
 800b42a:	f000 fba5 	bl	800bb78 <_realloc_r>
 800b42e:	4606      	mov	r6, r0
 800b430:	2800      	cmp	r0, #0
 800b432:	d1e1      	bne.n	800b3f8 <__ssputs_r+0x70>
 800b434:	6921      	ldr	r1, [r4, #16]
 800b436:	4650      	mov	r0, sl
 800b438:	f000 fabe 	bl	800b9b8 <_free_r>
 800b43c:	e7c7      	b.n	800b3ce <__ssputs_r+0x46>
	...

0800b440 <_svfiprintf_r>:
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	4698      	mov	r8, r3
 800b446:	898b      	ldrh	r3, [r1, #12]
 800b448:	061b      	lsls	r3, r3, #24
 800b44a:	b09d      	sub	sp, #116	; 0x74
 800b44c:	4607      	mov	r7, r0
 800b44e:	460d      	mov	r5, r1
 800b450:	4614      	mov	r4, r2
 800b452:	d50e      	bpl.n	800b472 <_svfiprintf_r+0x32>
 800b454:	690b      	ldr	r3, [r1, #16]
 800b456:	b963      	cbnz	r3, 800b472 <_svfiprintf_r+0x32>
 800b458:	2140      	movs	r1, #64	; 0x40
 800b45a:	f000 fb19 	bl	800ba90 <_malloc_r>
 800b45e:	6028      	str	r0, [r5, #0]
 800b460:	6128      	str	r0, [r5, #16]
 800b462:	b920      	cbnz	r0, 800b46e <_svfiprintf_r+0x2e>
 800b464:	230c      	movs	r3, #12
 800b466:	603b      	str	r3, [r7, #0]
 800b468:	f04f 30ff 	mov.w	r0, #4294967295
 800b46c:	e0d1      	b.n	800b612 <_svfiprintf_r+0x1d2>
 800b46e:	2340      	movs	r3, #64	; 0x40
 800b470:	616b      	str	r3, [r5, #20]
 800b472:	2300      	movs	r3, #0
 800b474:	9309      	str	r3, [sp, #36]	; 0x24
 800b476:	2320      	movs	r3, #32
 800b478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b47c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b480:	2330      	movs	r3, #48	; 0x30
 800b482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b62c <_svfiprintf_r+0x1ec>
 800b486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b48a:	f04f 0901 	mov.w	r9, #1
 800b48e:	4623      	mov	r3, r4
 800b490:	469a      	mov	sl, r3
 800b492:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b496:	b10a      	cbz	r2, 800b49c <_svfiprintf_r+0x5c>
 800b498:	2a25      	cmp	r2, #37	; 0x25
 800b49a:	d1f9      	bne.n	800b490 <_svfiprintf_r+0x50>
 800b49c:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a0:	d00b      	beq.n	800b4ba <_svfiprintf_r+0x7a>
 800b4a2:	465b      	mov	r3, fp
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff ff6d 	bl	800b388 <__ssputs_r>
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	f000 80aa 	beq.w	800b608 <_svfiprintf_r+0x1c8>
 800b4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4b6:	445a      	add	r2, fp
 800b4b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f000 80a2 	beq.w	800b608 <_svfiprintf_r+0x1c8>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ce:	f10a 0a01 	add.w	sl, sl, #1
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	9307      	str	r3, [sp, #28]
 800b4d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4da:	931a      	str	r3, [sp, #104]	; 0x68
 800b4dc:	4654      	mov	r4, sl
 800b4de:	2205      	movs	r2, #5
 800b4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e4:	4851      	ldr	r0, [pc, #324]	; (800b62c <_svfiprintf_r+0x1ec>)
 800b4e6:	f7f4 fefb 	bl	80002e0 <memchr>
 800b4ea:	9a04      	ldr	r2, [sp, #16]
 800b4ec:	b9d8      	cbnz	r0, 800b526 <_svfiprintf_r+0xe6>
 800b4ee:	06d0      	lsls	r0, r2, #27
 800b4f0:	bf44      	itt	mi
 800b4f2:	2320      	movmi	r3, #32
 800b4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f8:	0711      	lsls	r1, r2, #28
 800b4fa:	bf44      	itt	mi
 800b4fc:	232b      	movmi	r3, #43	; 0x2b
 800b4fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b502:	f89a 3000 	ldrb.w	r3, [sl]
 800b506:	2b2a      	cmp	r3, #42	; 0x2a
 800b508:	d015      	beq.n	800b536 <_svfiprintf_r+0xf6>
 800b50a:	9a07      	ldr	r2, [sp, #28]
 800b50c:	4654      	mov	r4, sl
 800b50e:	2000      	movs	r0, #0
 800b510:	f04f 0c0a 	mov.w	ip, #10
 800b514:	4621      	mov	r1, r4
 800b516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b51a:	3b30      	subs	r3, #48	; 0x30
 800b51c:	2b09      	cmp	r3, #9
 800b51e:	d94e      	bls.n	800b5be <_svfiprintf_r+0x17e>
 800b520:	b1b0      	cbz	r0, 800b550 <_svfiprintf_r+0x110>
 800b522:	9207      	str	r2, [sp, #28]
 800b524:	e014      	b.n	800b550 <_svfiprintf_r+0x110>
 800b526:	eba0 0308 	sub.w	r3, r0, r8
 800b52a:	fa09 f303 	lsl.w	r3, r9, r3
 800b52e:	4313      	orrs	r3, r2
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	46a2      	mov	sl, r4
 800b534:	e7d2      	b.n	800b4dc <_svfiprintf_r+0x9c>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	1d19      	adds	r1, r3, #4
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	9103      	str	r1, [sp, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	bfbb      	ittet	lt
 800b542:	425b      	neglt	r3, r3
 800b544:	f042 0202 	orrlt.w	r2, r2, #2
 800b548:	9307      	strge	r3, [sp, #28]
 800b54a:	9307      	strlt	r3, [sp, #28]
 800b54c:	bfb8      	it	lt
 800b54e:	9204      	strlt	r2, [sp, #16]
 800b550:	7823      	ldrb	r3, [r4, #0]
 800b552:	2b2e      	cmp	r3, #46	; 0x2e
 800b554:	d10c      	bne.n	800b570 <_svfiprintf_r+0x130>
 800b556:	7863      	ldrb	r3, [r4, #1]
 800b558:	2b2a      	cmp	r3, #42	; 0x2a
 800b55a:	d135      	bne.n	800b5c8 <_svfiprintf_r+0x188>
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	1d1a      	adds	r2, r3, #4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	9203      	str	r2, [sp, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	bfb8      	it	lt
 800b568:	f04f 33ff 	movlt.w	r3, #4294967295
 800b56c:	3402      	adds	r4, #2
 800b56e:	9305      	str	r3, [sp, #20]
 800b570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b63c <_svfiprintf_r+0x1fc>
 800b574:	7821      	ldrb	r1, [r4, #0]
 800b576:	2203      	movs	r2, #3
 800b578:	4650      	mov	r0, sl
 800b57a:	f7f4 feb1 	bl	80002e0 <memchr>
 800b57e:	b140      	cbz	r0, 800b592 <_svfiprintf_r+0x152>
 800b580:	2340      	movs	r3, #64	; 0x40
 800b582:	eba0 000a 	sub.w	r0, r0, sl
 800b586:	fa03 f000 	lsl.w	r0, r3, r0
 800b58a:	9b04      	ldr	r3, [sp, #16]
 800b58c:	4303      	orrs	r3, r0
 800b58e:	3401      	adds	r4, #1
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b596:	4826      	ldr	r0, [pc, #152]	; (800b630 <_svfiprintf_r+0x1f0>)
 800b598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b59c:	2206      	movs	r2, #6
 800b59e:	f7f4 fe9f 	bl	80002e0 <memchr>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d038      	beq.n	800b618 <_svfiprintf_r+0x1d8>
 800b5a6:	4b23      	ldr	r3, [pc, #140]	; (800b634 <_svfiprintf_r+0x1f4>)
 800b5a8:	bb1b      	cbnz	r3, 800b5f2 <_svfiprintf_r+0x1b2>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	3307      	adds	r3, #7
 800b5ae:	f023 0307 	bic.w	r3, r3, #7
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	9303      	str	r3, [sp, #12]
 800b5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b8:	4433      	add	r3, r6
 800b5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b5bc:	e767      	b.n	800b48e <_svfiprintf_r+0x4e>
 800b5be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	e7a5      	b.n	800b514 <_svfiprintf_r+0xd4>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	3401      	adds	r4, #1
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	f04f 0c0a 	mov.w	ip, #10
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5da:	3a30      	subs	r2, #48	; 0x30
 800b5dc:	2a09      	cmp	r2, #9
 800b5de:	d903      	bls.n	800b5e8 <_svfiprintf_r+0x1a8>
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0c5      	beq.n	800b570 <_svfiprintf_r+0x130>
 800b5e4:	9105      	str	r1, [sp, #20]
 800b5e6:	e7c3      	b.n	800b570 <_svfiprintf_r+0x130>
 800b5e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e7f0      	b.n	800b5d4 <_svfiprintf_r+0x194>
 800b5f2:	ab03      	add	r3, sp, #12
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	462a      	mov	r2, r5
 800b5f8:	4b0f      	ldr	r3, [pc, #60]	; (800b638 <_svfiprintf_r+0x1f8>)
 800b5fa:	a904      	add	r1, sp, #16
 800b5fc:	4638      	mov	r0, r7
 800b5fe:	f3af 8000 	nop.w
 800b602:	1c42      	adds	r2, r0, #1
 800b604:	4606      	mov	r6, r0
 800b606:	d1d6      	bne.n	800b5b6 <_svfiprintf_r+0x176>
 800b608:	89ab      	ldrh	r3, [r5, #12]
 800b60a:	065b      	lsls	r3, r3, #25
 800b60c:	f53f af2c 	bmi.w	800b468 <_svfiprintf_r+0x28>
 800b610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b612:	b01d      	add	sp, #116	; 0x74
 800b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b618:	ab03      	add	r3, sp, #12
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	462a      	mov	r2, r5
 800b61e:	4b06      	ldr	r3, [pc, #24]	; (800b638 <_svfiprintf_r+0x1f8>)
 800b620:	a904      	add	r1, sp, #16
 800b622:	4638      	mov	r0, r7
 800b624:	f000 f87a 	bl	800b71c <_printf_i>
 800b628:	e7eb      	b.n	800b602 <_svfiprintf_r+0x1c2>
 800b62a:	bf00      	nop
 800b62c:	0800bf84 	.word	0x0800bf84
 800b630:	0800bf8e 	.word	0x0800bf8e
 800b634:	00000000 	.word	0x00000000
 800b638:	0800b389 	.word	0x0800b389
 800b63c:	0800bf8a 	.word	0x0800bf8a

0800b640 <_printf_common>:
 800b640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b644:	4616      	mov	r6, r2
 800b646:	4699      	mov	r9, r3
 800b648:	688a      	ldr	r2, [r1, #8]
 800b64a:	690b      	ldr	r3, [r1, #16]
 800b64c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b650:	4293      	cmp	r3, r2
 800b652:	bfb8      	it	lt
 800b654:	4613      	movlt	r3, r2
 800b656:	6033      	str	r3, [r6, #0]
 800b658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b65c:	4607      	mov	r7, r0
 800b65e:	460c      	mov	r4, r1
 800b660:	b10a      	cbz	r2, 800b666 <_printf_common+0x26>
 800b662:	3301      	adds	r3, #1
 800b664:	6033      	str	r3, [r6, #0]
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	0699      	lsls	r1, r3, #26
 800b66a:	bf42      	ittt	mi
 800b66c:	6833      	ldrmi	r3, [r6, #0]
 800b66e:	3302      	addmi	r3, #2
 800b670:	6033      	strmi	r3, [r6, #0]
 800b672:	6825      	ldr	r5, [r4, #0]
 800b674:	f015 0506 	ands.w	r5, r5, #6
 800b678:	d106      	bne.n	800b688 <_printf_common+0x48>
 800b67a:	f104 0a19 	add.w	sl, r4, #25
 800b67e:	68e3      	ldr	r3, [r4, #12]
 800b680:	6832      	ldr	r2, [r6, #0]
 800b682:	1a9b      	subs	r3, r3, r2
 800b684:	42ab      	cmp	r3, r5
 800b686:	dc26      	bgt.n	800b6d6 <_printf_common+0x96>
 800b688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b68c:	1e13      	subs	r3, r2, #0
 800b68e:	6822      	ldr	r2, [r4, #0]
 800b690:	bf18      	it	ne
 800b692:	2301      	movne	r3, #1
 800b694:	0692      	lsls	r2, r2, #26
 800b696:	d42b      	bmi.n	800b6f0 <_printf_common+0xb0>
 800b698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b69c:	4649      	mov	r1, r9
 800b69e:	4638      	mov	r0, r7
 800b6a0:	47c0      	blx	r8
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	d01e      	beq.n	800b6e4 <_printf_common+0xa4>
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	68e5      	ldr	r5, [r4, #12]
 800b6aa:	6832      	ldr	r2, [r6, #0]
 800b6ac:	f003 0306 	and.w	r3, r3, #6
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	bf08      	it	eq
 800b6b4:	1aad      	subeq	r5, r5, r2
 800b6b6:	68a3      	ldr	r3, [r4, #8]
 800b6b8:	6922      	ldr	r2, [r4, #16]
 800b6ba:	bf0c      	ite	eq
 800b6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6c0:	2500      	movne	r5, #0
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	bfc4      	itt	gt
 800b6c6:	1a9b      	subgt	r3, r3, r2
 800b6c8:	18ed      	addgt	r5, r5, r3
 800b6ca:	2600      	movs	r6, #0
 800b6cc:	341a      	adds	r4, #26
 800b6ce:	42b5      	cmp	r5, r6
 800b6d0:	d11a      	bne.n	800b708 <_printf_common+0xc8>
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	e008      	b.n	800b6e8 <_printf_common+0xa8>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	4652      	mov	r2, sl
 800b6da:	4649      	mov	r1, r9
 800b6dc:	4638      	mov	r0, r7
 800b6de:	47c0      	blx	r8
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d103      	bne.n	800b6ec <_printf_common+0xac>
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ec:	3501      	adds	r5, #1
 800b6ee:	e7c6      	b.n	800b67e <_printf_common+0x3e>
 800b6f0:	18e1      	adds	r1, r4, r3
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	2030      	movs	r0, #48	; 0x30
 800b6f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6fa:	4422      	add	r2, r4
 800b6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b704:	3302      	adds	r3, #2
 800b706:	e7c7      	b.n	800b698 <_printf_common+0x58>
 800b708:	2301      	movs	r3, #1
 800b70a:	4622      	mov	r2, r4
 800b70c:	4649      	mov	r1, r9
 800b70e:	4638      	mov	r0, r7
 800b710:	47c0      	blx	r8
 800b712:	3001      	adds	r0, #1
 800b714:	d0e6      	beq.n	800b6e4 <_printf_common+0xa4>
 800b716:	3601      	adds	r6, #1
 800b718:	e7d9      	b.n	800b6ce <_printf_common+0x8e>
	...

0800b71c <_printf_i>:
 800b71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b720:	7e0f      	ldrb	r7, [r1, #24]
 800b722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b724:	2f78      	cmp	r7, #120	; 0x78
 800b726:	4691      	mov	r9, r2
 800b728:	4680      	mov	r8, r0
 800b72a:	460c      	mov	r4, r1
 800b72c:	469a      	mov	sl, r3
 800b72e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b732:	d807      	bhi.n	800b744 <_printf_i+0x28>
 800b734:	2f62      	cmp	r7, #98	; 0x62
 800b736:	d80a      	bhi.n	800b74e <_printf_i+0x32>
 800b738:	2f00      	cmp	r7, #0
 800b73a:	f000 80d8 	beq.w	800b8ee <_printf_i+0x1d2>
 800b73e:	2f58      	cmp	r7, #88	; 0x58
 800b740:	f000 80a3 	beq.w	800b88a <_printf_i+0x16e>
 800b744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b74c:	e03a      	b.n	800b7c4 <_printf_i+0xa8>
 800b74e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b752:	2b15      	cmp	r3, #21
 800b754:	d8f6      	bhi.n	800b744 <_printf_i+0x28>
 800b756:	a101      	add	r1, pc, #4	; (adr r1, 800b75c <_printf_i+0x40>)
 800b758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b75c:	0800b7b5 	.word	0x0800b7b5
 800b760:	0800b7c9 	.word	0x0800b7c9
 800b764:	0800b745 	.word	0x0800b745
 800b768:	0800b745 	.word	0x0800b745
 800b76c:	0800b745 	.word	0x0800b745
 800b770:	0800b745 	.word	0x0800b745
 800b774:	0800b7c9 	.word	0x0800b7c9
 800b778:	0800b745 	.word	0x0800b745
 800b77c:	0800b745 	.word	0x0800b745
 800b780:	0800b745 	.word	0x0800b745
 800b784:	0800b745 	.word	0x0800b745
 800b788:	0800b8d5 	.word	0x0800b8d5
 800b78c:	0800b7f9 	.word	0x0800b7f9
 800b790:	0800b8b7 	.word	0x0800b8b7
 800b794:	0800b745 	.word	0x0800b745
 800b798:	0800b745 	.word	0x0800b745
 800b79c:	0800b8f7 	.word	0x0800b8f7
 800b7a0:	0800b745 	.word	0x0800b745
 800b7a4:	0800b7f9 	.word	0x0800b7f9
 800b7a8:	0800b745 	.word	0x0800b745
 800b7ac:	0800b745 	.word	0x0800b745
 800b7b0:	0800b8bf 	.word	0x0800b8bf
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	1d1a      	adds	r2, r3, #4
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	602a      	str	r2, [r5, #0]
 800b7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e0a3      	b.n	800b910 <_printf_i+0x1f4>
 800b7c8:	6820      	ldr	r0, [r4, #0]
 800b7ca:	6829      	ldr	r1, [r5, #0]
 800b7cc:	0606      	lsls	r6, r0, #24
 800b7ce:	f101 0304 	add.w	r3, r1, #4
 800b7d2:	d50a      	bpl.n	800b7ea <_printf_i+0xce>
 800b7d4:	680e      	ldr	r6, [r1, #0]
 800b7d6:	602b      	str	r3, [r5, #0]
 800b7d8:	2e00      	cmp	r6, #0
 800b7da:	da03      	bge.n	800b7e4 <_printf_i+0xc8>
 800b7dc:	232d      	movs	r3, #45	; 0x2d
 800b7de:	4276      	negs	r6, r6
 800b7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7e4:	485e      	ldr	r0, [pc, #376]	; (800b960 <_printf_i+0x244>)
 800b7e6:	230a      	movs	r3, #10
 800b7e8:	e019      	b.n	800b81e <_printf_i+0x102>
 800b7ea:	680e      	ldr	r6, [r1, #0]
 800b7ec:	602b      	str	r3, [r5, #0]
 800b7ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7f2:	bf18      	it	ne
 800b7f4:	b236      	sxthne	r6, r6
 800b7f6:	e7ef      	b.n	800b7d8 <_printf_i+0xbc>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	6820      	ldr	r0, [r4, #0]
 800b7fc:	1d19      	adds	r1, r3, #4
 800b7fe:	6029      	str	r1, [r5, #0]
 800b800:	0601      	lsls	r1, r0, #24
 800b802:	d501      	bpl.n	800b808 <_printf_i+0xec>
 800b804:	681e      	ldr	r6, [r3, #0]
 800b806:	e002      	b.n	800b80e <_printf_i+0xf2>
 800b808:	0646      	lsls	r6, r0, #25
 800b80a:	d5fb      	bpl.n	800b804 <_printf_i+0xe8>
 800b80c:	881e      	ldrh	r6, [r3, #0]
 800b80e:	4854      	ldr	r0, [pc, #336]	; (800b960 <_printf_i+0x244>)
 800b810:	2f6f      	cmp	r7, #111	; 0x6f
 800b812:	bf0c      	ite	eq
 800b814:	2308      	moveq	r3, #8
 800b816:	230a      	movne	r3, #10
 800b818:	2100      	movs	r1, #0
 800b81a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b81e:	6865      	ldr	r5, [r4, #4]
 800b820:	60a5      	str	r5, [r4, #8]
 800b822:	2d00      	cmp	r5, #0
 800b824:	bfa2      	ittt	ge
 800b826:	6821      	ldrge	r1, [r4, #0]
 800b828:	f021 0104 	bicge.w	r1, r1, #4
 800b82c:	6021      	strge	r1, [r4, #0]
 800b82e:	b90e      	cbnz	r6, 800b834 <_printf_i+0x118>
 800b830:	2d00      	cmp	r5, #0
 800b832:	d04d      	beq.n	800b8d0 <_printf_i+0x1b4>
 800b834:	4615      	mov	r5, r2
 800b836:	fbb6 f1f3 	udiv	r1, r6, r3
 800b83a:	fb03 6711 	mls	r7, r3, r1, r6
 800b83e:	5dc7      	ldrb	r7, [r0, r7]
 800b840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b844:	4637      	mov	r7, r6
 800b846:	42bb      	cmp	r3, r7
 800b848:	460e      	mov	r6, r1
 800b84a:	d9f4      	bls.n	800b836 <_printf_i+0x11a>
 800b84c:	2b08      	cmp	r3, #8
 800b84e:	d10b      	bne.n	800b868 <_printf_i+0x14c>
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	07de      	lsls	r6, r3, #31
 800b854:	d508      	bpl.n	800b868 <_printf_i+0x14c>
 800b856:	6923      	ldr	r3, [r4, #16]
 800b858:	6861      	ldr	r1, [r4, #4]
 800b85a:	4299      	cmp	r1, r3
 800b85c:	bfde      	ittt	le
 800b85e:	2330      	movle	r3, #48	; 0x30
 800b860:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b864:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b868:	1b52      	subs	r2, r2, r5
 800b86a:	6122      	str	r2, [r4, #16]
 800b86c:	f8cd a000 	str.w	sl, [sp]
 800b870:	464b      	mov	r3, r9
 800b872:	aa03      	add	r2, sp, #12
 800b874:	4621      	mov	r1, r4
 800b876:	4640      	mov	r0, r8
 800b878:	f7ff fee2 	bl	800b640 <_printf_common>
 800b87c:	3001      	adds	r0, #1
 800b87e:	d14c      	bne.n	800b91a <_printf_i+0x1fe>
 800b880:	f04f 30ff 	mov.w	r0, #4294967295
 800b884:	b004      	add	sp, #16
 800b886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88a:	4835      	ldr	r0, [pc, #212]	; (800b960 <_printf_i+0x244>)
 800b88c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b890:	6829      	ldr	r1, [r5, #0]
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	f851 6b04 	ldr.w	r6, [r1], #4
 800b898:	6029      	str	r1, [r5, #0]
 800b89a:	061d      	lsls	r5, r3, #24
 800b89c:	d514      	bpl.n	800b8c8 <_printf_i+0x1ac>
 800b89e:	07df      	lsls	r7, r3, #31
 800b8a0:	bf44      	itt	mi
 800b8a2:	f043 0320 	orrmi.w	r3, r3, #32
 800b8a6:	6023      	strmi	r3, [r4, #0]
 800b8a8:	b91e      	cbnz	r6, 800b8b2 <_printf_i+0x196>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	f023 0320 	bic.w	r3, r3, #32
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	2310      	movs	r3, #16
 800b8b4:	e7b0      	b.n	800b818 <_printf_i+0xfc>
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	f043 0320 	orr.w	r3, r3, #32
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	2378      	movs	r3, #120	; 0x78
 800b8c0:	4828      	ldr	r0, [pc, #160]	; (800b964 <_printf_i+0x248>)
 800b8c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8c6:	e7e3      	b.n	800b890 <_printf_i+0x174>
 800b8c8:	0659      	lsls	r1, r3, #25
 800b8ca:	bf48      	it	mi
 800b8cc:	b2b6      	uxthmi	r6, r6
 800b8ce:	e7e6      	b.n	800b89e <_printf_i+0x182>
 800b8d0:	4615      	mov	r5, r2
 800b8d2:	e7bb      	b.n	800b84c <_printf_i+0x130>
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	6826      	ldr	r6, [r4, #0]
 800b8d8:	6961      	ldr	r1, [r4, #20]
 800b8da:	1d18      	adds	r0, r3, #4
 800b8dc:	6028      	str	r0, [r5, #0]
 800b8de:	0635      	lsls	r5, r6, #24
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	d501      	bpl.n	800b8e8 <_printf_i+0x1cc>
 800b8e4:	6019      	str	r1, [r3, #0]
 800b8e6:	e002      	b.n	800b8ee <_printf_i+0x1d2>
 800b8e8:	0670      	lsls	r0, r6, #25
 800b8ea:	d5fb      	bpl.n	800b8e4 <_printf_i+0x1c8>
 800b8ec:	8019      	strh	r1, [r3, #0]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	6123      	str	r3, [r4, #16]
 800b8f2:	4615      	mov	r5, r2
 800b8f4:	e7ba      	b.n	800b86c <_printf_i+0x150>
 800b8f6:	682b      	ldr	r3, [r5, #0]
 800b8f8:	1d1a      	adds	r2, r3, #4
 800b8fa:	602a      	str	r2, [r5, #0]
 800b8fc:	681d      	ldr	r5, [r3, #0]
 800b8fe:	6862      	ldr	r2, [r4, #4]
 800b900:	2100      	movs	r1, #0
 800b902:	4628      	mov	r0, r5
 800b904:	f7f4 fcec 	bl	80002e0 <memchr>
 800b908:	b108      	cbz	r0, 800b90e <_printf_i+0x1f2>
 800b90a:	1b40      	subs	r0, r0, r5
 800b90c:	6060      	str	r0, [r4, #4]
 800b90e:	6863      	ldr	r3, [r4, #4]
 800b910:	6123      	str	r3, [r4, #16]
 800b912:	2300      	movs	r3, #0
 800b914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b918:	e7a8      	b.n	800b86c <_printf_i+0x150>
 800b91a:	6923      	ldr	r3, [r4, #16]
 800b91c:	462a      	mov	r2, r5
 800b91e:	4649      	mov	r1, r9
 800b920:	4640      	mov	r0, r8
 800b922:	47d0      	blx	sl
 800b924:	3001      	adds	r0, #1
 800b926:	d0ab      	beq.n	800b880 <_printf_i+0x164>
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	079b      	lsls	r3, r3, #30
 800b92c:	d413      	bmi.n	800b956 <_printf_i+0x23a>
 800b92e:	68e0      	ldr	r0, [r4, #12]
 800b930:	9b03      	ldr	r3, [sp, #12]
 800b932:	4298      	cmp	r0, r3
 800b934:	bfb8      	it	lt
 800b936:	4618      	movlt	r0, r3
 800b938:	e7a4      	b.n	800b884 <_printf_i+0x168>
 800b93a:	2301      	movs	r3, #1
 800b93c:	4632      	mov	r2, r6
 800b93e:	4649      	mov	r1, r9
 800b940:	4640      	mov	r0, r8
 800b942:	47d0      	blx	sl
 800b944:	3001      	adds	r0, #1
 800b946:	d09b      	beq.n	800b880 <_printf_i+0x164>
 800b948:	3501      	adds	r5, #1
 800b94a:	68e3      	ldr	r3, [r4, #12]
 800b94c:	9903      	ldr	r1, [sp, #12]
 800b94e:	1a5b      	subs	r3, r3, r1
 800b950:	42ab      	cmp	r3, r5
 800b952:	dcf2      	bgt.n	800b93a <_printf_i+0x21e>
 800b954:	e7eb      	b.n	800b92e <_printf_i+0x212>
 800b956:	2500      	movs	r5, #0
 800b958:	f104 0619 	add.w	r6, r4, #25
 800b95c:	e7f5      	b.n	800b94a <_printf_i+0x22e>
 800b95e:	bf00      	nop
 800b960:	0800bf95 	.word	0x0800bf95
 800b964:	0800bfa6 	.word	0x0800bfa6

0800b968 <memcpy>:
 800b968:	440a      	add	r2, r1
 800b96a:	4291      	cmp	r1, r2
 800b96c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b970:	d100      	bne.n	800b974 <memcpy+0xc>
 800b972:	4770      	bx	lr
 800b974:	b510      	push	{r4, lr}
 800b976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b97a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b97e:	4291      	cmp	r1, r2
 800b980:	d1f9      	bne.n	800b976 <memcpy+0xe>
 800b982:	bd10      	pop	{r4, pc}

0800b984 <memmove>:
 800b984:	4288      	cmp	r0, r1
 800b986:	b510      	push	{r4, lr}
 800b988:	eb01 0402 	add.w	r4, r1, r2
 800b98c:	d902      	bls.n	800b994 <memmove+0x10>
 800b98e:	4284      	cmp	r4, r0
 800b990:	4623      	mov	r3, r4
 800b992:	d807      	bhi.n	800b9a4 <memmove+0x20>
 800b994:	1e43      	subs	r3, r0, #1
 800b996:	42a1      	cmp	r1, r4
 800b998:	d008      	beq.n	800b9ac <memmove+0x28>
 800b99a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b99e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9a2:	e7f8      	b.n	800b996 <memmove+0x12>
 800b9a4:	4402      	add	r2, r0
 800b9a6:	4601      	mov	r1, r0
 800b9a8:	428a      	cmp	r2, r1
 800b9aa:	d100      	bne.n	800b9ae <memmove+0x2a>
 800b9ac:	bd10      	pop	{r4, pc}
 800b9ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9b6:	e7f7      	b.n	800b9a8 <memmove+0x24>

0800b9b8 <_free_r>:
 800b9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ba:	2900      	cmp	r1, #0
 800b9bc:	d044      	beq.n	800ba48 <_free_r+0x90>
 800b9be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9c2:	9001      	str	r0, [sp, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b9ca:	bfb8      	it	lt
 800b9cc:	18e4      	addlt	r4, r4, r3
 800b9ce:	f000 f913 	bl	800bbf8 <__malloc_lock>
 800b9d2:	4a1e      	ldr	r2, [pc, #120]	; (800ba4c <_free_r+0x94>)
 800b9d4:	9801      	ldr	r0, [sp, #4]
 800b9d6:	6813      	ldr	r3, [r2, #0]
 800b9d8:	b933      	cbnz	r3, 800b9e8 <_free_r+0x30>
 800b9da:	6063      	str	r3, [r4, #4]
 800b9dc:	6014      	str	r4, [r2, #0]
 800b9de:	b003      	add	sp, #12
 800b9e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9e4:	f000 b90e 	b.w	800bc04 <__malloc_unlock>
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	d908      	bls.n	800b9fe <_free_r+0x46>
 800b9ec:	6825      	ldr	r5, [r4, #0]
 800b9ee:	1961      	adds	r1, r4, r5
 800b9f0:	428b      	cmp	r3, r1
 800b9f2:	bf01      	itttt	eq
 800b9f4:	6819      	ldreq	r1, [r3, #0]
 800b9f6:	685b      	ldreq	r3, [r3, #4]
 800b9f8:	1949      	addeq	r1, r1, r5
 800b9fa:	6021      	streq	r1, [r4, #0]
 800b9fc:	e7ed      	b.n	800b9da <_free_r+0x22>
 800b9fe:	461a      	mov	r2, r3
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	b10b      	cbz	r3, 800ba08 <_free_r+0x50>
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	d9fa      	bls.n	800b9fe <_free_r+0x46>
 800ba08:	6811      	ldr	r1, [r2, #0]
 800ba0a:	1855      	adds	r5, r2, r1
 800ba0c:	42a5      	cmp	r5, r4
 800ba0e:	d10b      	bne.n	800ba28 <_free_r+0x70>
 800ba10:	6824      	ldr	r4, [r4, #0]
 800ba12:	4421      	add	r1, r4
 800ba14:	1854      	adds	r4, r2, r1
 800ba16:	42a3      	cmp	r3, r4
 800ba18:	6011      	str	r1, [r2, #0]
 800ba1a:	d1e0      	bne.n	800b9de <_free_r+0x26>
 800ba1c:	681c      	ldr	r4, [r3, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	6053      	str	r3, [r2, #4]
 800ba22:	4421      	add	r1, r4
 800ba24:	6011      	str	r1, [r2, #0]
 800ba26:	e7da      	b.n	800b9de <_free_r+0x26>
 800ba28:	d902      	bls.n	800ba30 <_free_r+0x78>
 800ba2a:	230c      	movs	r3, #12
 800ba2c:	6003      	str	r3, [r0, #0]
 800ba2e:	e7d6      	b.n	800b9de <_free_r+0x26>
 800ba30:	6825      	ldr	r5, [r4, #0]
 800ba32:	1961      	adds	r1, r4, r5
 800ba34:	428b      	cmp	r3, r1
 800ba36:	bf04      	itt	eq
 800ba38:	6819      	ldreq	r1, [r3, #0]
 800ba3a:	685b      	ldreq	r3, [r3, #4]
 800ba3c:	6063      	str	r3, [r4, #4]
 800ba3e:	bf04      	itt	eq
 800ba40:	1949      	addeq	r1, r1, r5
 800ba42:	6021      	streq	r1, [r4, #0]
 800ba44:	6054      	str	r4, [r2, #4]
 800ba46:	e7ca      	b.n	800b9de <_free_r+0x26>
 800ba48:	b003      	add	sp, #12
 800ba4a:	bd30      	pop	{r4, r5, pc}
 800ba4c:	240001e4 	.word	0x240001e4

0800ba50 <sbrk_aligned>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	4e0e      	ldr	r6, [pc, #56]	; (800ba8c <sbrk_aligned+0x3c>)
 800ba54:	460c      	mov	r4, r1
 800ba56:	6831      	ldr	r1, [r6, #0]
 800ba58:	4605      	mov	r5, r0
 800ba5a:	b911      	cbnz	r1, 800ba62 <sbrk_aligned+0x12>
 800ba5c:	f000 f8bc 	bl	800bbd8 <_sbrk_r>
 800ba60:	6030      	str	r0, [r6, #0]
 800ba62:	4621      	mov	r1, r4
 800ba64:	4628      	mov	r0, r5
 800ba66:	f000 f8b7 	bl	800bbd8 <_sbrk_r>
 800ba6a:	1c43      	adds	r3, r0, #1
 800ba6c:	d00a      	beq.n	800ba84 <sbrk_aligned+0x34>
 800ba6e:	1cc4      	adds	r4, r0, #3
 800ba70:	f024 0403 	bic.w	r4, r4, #3
 800ba74:	42a0      	cmp	r0, r4
 800ba76:	d007      	beq.n	800ba88 <sbrk_aligned+0x38>
 800ba78:	1a21      	subs	r1, r4, r0
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f000 f8ac 	bl	800bbd8 <_sbrk_r>
 800ba80:	3001      	adds	r0, #1
 800ba82:	d101      	bne.n	800ba88 <sbrk_aligned+0x38>
 800ba84:	f04f 34ff 	mov.w	r4, #4294967295
 800ba88:	4620      	mov	r0, r4
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}
 800ba8c:	240001e8 	.word	0x240001e8

0800ba90 <_malloc_r>:
 800ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba94:	1ccd      	adds	r5, r1, #3
 800ba96:	f025 0503 	bic.w	r5, r5, #3
 800ba9a:	3508      	adds	r5, #8
 800ba9c:	2d0c      	cmp	r5, #12
 800ba9e:	bf38      	it	cc
 800baa0:	250c      	movcc	r5, #12
 800baa2:	2d00      	cmp	r5, #0
 800baa4:	4607      	mov	r7, r0
 800baa6:	db01      	blt.n	800baac <_malloc_r+0x1c>
 800baa8:	42a9      	cmp	r1, r5
 800baaa:	d905      	bls.n	800bab8 <_malloc_r+0x28>
 800baac:	230c      	movs	r3, #12
 800baae:	603b      	str	r3, [r7, #0]
 800bab0:	2600      	movs	r6, #0
 800bab2:	4630      	mov	r0, r6
 800bab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab8:	4e2e      	ldr	r6, [pc, #184]	; (800bb74 <_malloc_r+0xe4>)
 800baba:	f000 f89d 	bl	800bbf8 <__malloc_lock>
 800babe:	6833      	ldr	r3, [r6, #0]
 800bac0:	461c      	mov	r4, r3
 800bac2:	bb34      	cbnz	r4, 800bb12 <_malloc_r+0x82>
 800bac4:	4629      	mov	r1, r5
 800bac6:	4638      	mov	r0, r7
 800bac8:	f7ff ffc2 	bl	800ba50 <sbrk_aligned>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	4604      	mov	r4, r0
 800bad0:	d14d      	bne.n	800bb6e <_malloc_r+0xde>
 800bad2:	6834      	ldr	r4, [r6, #0]
 800bad4:	4626      	mov	r6, r4
 800bad6:	2e00      	cmp	r6, #0
 800bad8:	d140      	bne.n	800bb5c <_malloc_r+0xcc>
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	4631      	mov	r1, r6
 800bade:	4638      	mov	r0, r7
 800bae0:	eb04 0803 	add.w	r8, r4, r3
 800bae4:	f000 f878 	bl	800bbd8 <_sbrk_r>
 800bae8:	4580      	cmp	r8, r0
 800baea:	d13a      	bne.n	800bb62 <_malloc_r+0xd2>
 800baec:	6821      	ldr	r1, [r4, #0]
 800baee:	3503      	adds	r5, #3
 800baf0:	1a6d      	subs	r5, r5, r1
 800baf2:	f025 0503 	bic.w	r5, r5, #3
 800baf6:	3508      	adds	r5, #8
 800baf8:	2d0c      	cmp	r5, #12
 800bafa:	bf38      	it	cc
 800bafc:	250c      	movcc	r5, #12
 800bafe:	4629      	mov	r1, r5
 800bb00:	4638      	mov	r0, r7
 800bb02:	f7ff ffa5 	bl	800ba50 <sbrk_aligned>
 800bb06:	3001      	adds	r0, #1
 800bb08:	d02b      	beq.n	800bb62 <_malloc_r+0xd2>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	442b      	add	r3, r5
 800bb0e:	6023      	str	r3, [r4, #0]
 800bb10:	e00e      	b.n	800bb30 <_malloc_r+0xa0>
 800bb12:	6822      	ldr	r2, [r4, #0]
 800bb14:	1b52      	subs	r2, r2, r5
 800bb16:	d41e      	bmi.n	800bb56 <_malloc_r+0xc6>
 800bb18:	2a0b      	cmp	r2, #11
 800bb1a:	d916      	bls.n	800bb4a <_malloc_r+0xba>
 800bb1c:	1961      	adds	r1, r4, r5
 800bb1e:	42a3      	cmp	r3, r4
 800bb20:	6025      	str	r5, [r4, #0]
 800bb22:	bf18      	it	ne
 800bb24:	6059      	strne	r1, [r3, #4]
 800bb26:	6863      	ldr	r3, [r4, #4]
 800bb28:	bf08      	it	eq
 800bb2a:	6031      	streq	r1, [r6, #0]
 800bb2c:	5162      	str	r2, [r4, r5]
 800bb2e:	604b      	str	r3, [r1, #4]
 800bb30:	4638      	mov	r0, r7
 800bb32:	f104 060b 	add.w	r6, r4, #11
 800bb36:	f000 f865 	bl	800bc04 <__malloc_unlock>
 800bb3a:	f026 0607 	bic.w	r6, r6, #7
 800bb3e:	1d23      	adds	r3, r4, #4
 800bb40:	1af2      	subs	r2, r6, r3
 800bb42:	d0b6      	beq.n	800bab2 <_malloc_r+0x22>
 800bb44:	1b9b      	subs	r3, r3, r6
 800bb46:	50a3      	str	r3, [r4, r2]
 800bb48:	e7b3      	b.n	800bab2 <_malloc_r+0x22>
 800bb4a:	6862      	ldr	r2, [r4, #4]
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	bf0c      	ite	eq
 800bb50:	6032      	streq	r2, [r6, #0]
 800bb52:	605a      	strne	r2, [r3, #4]
 800bb54:	e7ec      	b.n	800bb30 <_malloc_r+0xa0>
 800bb56:	4623      	mov	r3, r4
 800bb58:	6864      	ldr	r4, [r4, #4]
 800bb5a:	e7b2      	b.n	800bac2 <_malloc_r+0x32>
 800bb5c:	4634      	mov	r4, r6
 800bb5e:	6876      	ldr	r6, [r6, #4]
 800bb60:	e7b9      	b.n	800bad6 <_malloc_r+0x46>
 800bb62:	230c      	movs	r3, #12
 800bb64:	603b      	str	r3, [r7, #0]
 800bb66:	4638      	mov	r0, r7
 800bb68:	f000 f84c 	bl	800bc04 <__malloc_unlock>
 800bb6c:	e7a1      	b.n	800bab2 <_malloc_r+0x22>
 800bb6e:	6025      	str	r5, [r4, #0]
 800bb70:	e7de      	b.n	800bb30 <_malloc_r+0xa0>
 800bb72:	bf00      	nop
 800bb74:	240001e4 	.word	0x240001e4

0800bb78 <_realloc_r>:
 800bb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7c:	4680      	mov	r8, r0
 800bb7e:	4614      	mov	r4, r2
 800bb80:	460e      	mov	r6, r1
 800bb82:	b921      	cbnz	r1, 800bb8e <_realloc_r+0x16>
 800bb84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb88:	4611      	mov	r1, r2
 800bb8a:	f7ff bf81 	b.w	800ba90 <_malloc_r>
 800bb8e:	b92a      	cbnz	r2, 800bb9c <_realloc_r+0x24>
 800bb90:	f7ff ff12 	bl	800b9b8 <_free_r>
 800bb94:	4625      	mov	r5, r4
 800bb96:	4628      	mov	r0, r5
 800bb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb9c:	f000 f838 	bl	800bc10 <_malloc_usable_size_r>
 800bba0:	4284      	cmp	r4, r0
 800bba2:	4607      	mov	r7, r0
 800bba4:	d802      	bhi.n	800bbac <_realloc_r+0x34>
 800bba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbaa:	d812      	bhi.n	800bbd2 <_realloc_r+0x5a>
 800bbac:	4621      	mov	r1, r4
 800bbae:	4640      	mov	r0, r8
 800bbb0:	f7ff ff6e 	bl	800ba90 <_malloc_r>
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d0ed      	beq.n	800bb96 <_realloc_r+0x1e>
 800bbba:	42bc      	cmp	r4, r7
 800bbbc:	4622      	mov	r2, r4
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	bf28      	it	cs
 800bbc2:	463a      	movcs	r2, r7
 800bbc4:	f7ff fed0 	bl	800b968 <memcpy>
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4640      	mov	r0, r8
 800bbcc:	f7ff fef4 	bl	800b9b8 <_free_r>
 800bbd0:	e7e1      	b.n	800bb96 <_realloc_r+0x1e>
 800bbd2:	4635      	mov	r5, r6
 800bbd4:	e7df      	b.n	800bb96 <_realloc_r+0x1e>
	...

0800bbd8 <_sbrk_r>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	4d06      	ldr	r5, [pc, #24]	; (800bbf4 <_sbrk_r+0x1c>)
 800bbdc:	2300      	movs	r3, #0
 800bbde:	4604      	mov	r4, r0
 800bbe0:	4608      	mov	r0, r1
 800bbe2:	602b      	str	r3, [r5, #0]
 800bbe4:	f7f5 fa00 	bl	8000fe8 <_sbrk>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_sbrk_r+0x1a>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_sbrk_r+0x1a>
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	240001ec 	.word	0x240001ec

0800bbf8 <__malloc_lock>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	; (800bc00 <__malloc_lock+0x8>)
 800bbfa:	f000 b811 	b.w	800bc20 <__retarget_lock_acquire_recursive>
 800bbfe:	bf00      	nop
 800bc00:	240001f0 	.word	0x240001f0

0800bc04 <__malloc_unlock>:
 800bc04:	4801      	ldr	r0, [pc, #4]	; (800bc0c <__malloc_unlock+0x8>)
 800bc06:	f000 b80c 	b.w	800bc22 <__retarget_lock_release_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	240001f0 	.word	0x240001f0

0800bc10 <_malloc_usable_size_r>:
 800bc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc14:	1f18      	subs	r0, r3, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	bfbc      	itt	lt
 800bc1a:	580b      	ldrlt	r3, [r1, r0]
 800bc1c:	18c0      	addlt	r0, r0, r3
 800bc1e:	4770      	bx	lr

0800bc20 <__retarget_lock_acquire_recursive>:
 800bc20:	4770      	bx	lr

0800bc22 <__retarget_lock_release_recursive>:
 800bc22:	4770      	bx	lr

0800bc24 <_init>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	bf00      	nop
 800bc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2a:	bc08      	pop	{r3}
 800bc2c:	469e      	mov	lr, r3
 800bc2e:	4770      	bx	lr

0800bc30 <_fini>:
 800bc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc32:	bf00      	nop
 800bc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc36:	bc08      	pop	{r3}
 800bc38:	469e      	mov	lr, r3
 800bc3a:	4770      	bx	lr
